
amt-db-funcs.c,407
int get_rec_count(void)get_rec_count22,896
void check4DB(char *prog_name)check4DB45,1503
bool check_db_access(void)check_db_access116,3998
char *get_last_acronym(void)get_last_acronym157,5173
int do_acronym_search(char *findme)do_acronym_search192,6093
int new_acronym(void)new_acronym242,7805
int del_acro_rec(int recordid)del_acro_rec396,13062
void get_acro_src(void)get_acro_src499,17217

sqlite3.c,825698
#define SQLITE_CORE SQLITE_CORE20,1241
#define SQLITE_AMALGAMATION SQLITE_AMALGAMATION21,1263
# define SQLITE_PRIVATE SQLITE_PRIVATE23,1316
#define SQLITEINT_HSQLITEINT_H41,1881
#  define SQLITE_TCLAPISQLITE_TCLAPI75,3292
#  define _CRT_RAND_S_CRT_RAND_S83,3458
#define SQLITE_MSVC_HSQLITE_MSVC_H109,4374
#define OS_VXWORKS OS_VXWORKS158,5939
#define SQLITE_OS_OTHER SQLITE_OS_OTHER159,5960
#define SQLITE_HOMEGROWN_RECURSIVE_MUTEX SQLITE_HOMEGROWN_RECURSIVE_MUTEX160,5986
#define SQLITE_OMIT_LOAD_EXTENSION SQLITE_OMIT_LOAD_EXTENSION161,6029
#define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE162,6066
#define HAVE_UTIME HAVE_UTIME163,6104
#define OS_VXWORKS OS_VXWORKS166,6158
#define HAVE_FCHOWN HAVE_FCHOWN167,6179
#define HAVE_READLINK HAVE_READLINK168,6201
#define HAVE_LSTAT HAVE_LSTAT169,6225
# define _LARGE_FILE _LARGE_FILE200,7716
#   define _FILE_OFFSET_BITS _FILE_OFFSET_BITS202,7772
# define _LARGEFILE_SOURCE _LARGEFILE_SOURCE204,7812
# define GCC_VERSION GCC_VERSION214,8242
# define GCC_VERSION GCC_VERSION216,8328
# define CLANG_VERSION CLANG_VERSION219,8439
# define CLANG_VERSION CLANG_VERSION222,8550
# define MSVC_VERSION MSVC_VERSION225,8642
# define MSVC_VERSION MSVC_VERSION227,8679
# define _GNU_SOURCE_GNU_SOURCE232,8798
# define _BSD_SOURCE_BSD_SOURCE236,8877
# define _USE_32BIT_TIME_T_USE_32BIT_TIME_T268,10265
#define SQLITE3_HSQLITE3_H310,12130
# define SQLITE_EXTERN SQLITE_EXTERN325,12394
# define SQLITE_APISQLITE_API328,12450
# define SQLITE_CDECLSQLITE_CDECL331,12498
# define SQLITE_APICALLSQLITE_APICALL334,12550
# define SQLITE_STDCALL SQLITE_STDCALL337,12604
# define SQLITE_CALLBACKSQLITE_CALLBACK340,12674
# define SQLITE_SYSAPISQLITE_SYSAPI343,12728
#define SQLITE_DEPRECATEDSQLITE_DEPRECATED359,13398
#define SQLITE_EXPERIMENTALSQLITE_EXPERIMENTAL360,13424
# undef SQLITE_VERSIONSQLITE_VERSION366,13552
# undef SQLITE_VERSION_NUMBERSQLITE_VERSION_NUMBER369,13611
#define SQLITE_VERSION SQLITE_VERSION400,15035
#define SQLITE_VERSION_NUMBER SQLITE_VERSION_NUMBER401,15074
#define SQLITE_SOURCE_ID SQLITE_SOURCE_ID402,15112
SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;sqlite3_version434,16690
typedef struct sqlite3 sqlite3;sqlite3518,20546
  typedef SQLITE_INT64_TYPE sqlite_int64;sqlite_int64537,21269
    typedef SQLITE_UINT64_TYPE sqlite_uint64;sqlite_uint64539,21338
    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;sqlite_uint64541,21393
  typedef __int64 sqlite_int64;sqlite_int64544,21504
  typedef unsigned __int64 sqlite_uint64;sqlite_uint64545,21536
  typedef long long int sqlite_int64;sqlite_int64547,21584
  typedef unsigned long long int sqlite_uint64;sqlite_uint64548,21622
typedef sqlite_int64 sqlite3_int64;sqlite3_int64550,21677
typedef sqlite_uint64 sqlite3_uint64;sqlite3_uint64551,21713
# define double double558,21901
typedef int (*sqlite3_callback)(void*,int,char**, char**);sqlite3_callback611,24315
#define SQLITE_OK SQLITE_OK694,28263
#define SQLITE_ERROR SQLITE_ERROR696,28350
#define SQLITE_INTERNAL SQLITE_INTERNAL697,28418
#define SQLITE_PERM SQLITE_PERM698,28487
#define SQLITE_ABORT SQLITE_ABORT699,28550
#define SQLITE_BUSY SQLITE_BUSY700,28624
#define SQLITE_LOCKED SQLITE_LOCKED701,28690
#define SQLITE_NOMEM SQLITE_NOMEM702,28762
#define SQLITE_READONLY SQLITE_READONLY703,28818
#define SQLITE_INTERRUPT SQLITE_INTERRUPT704,28893
#define SQLITE_IOERR SQLITE_IOERR705,28974
#define SQLITE_CORRUPT SQLITE_CORRUPT706,29049
#define SQLITE_NOTFOUND SQLITE_NOTFOUND707,29124
#define SQLITE_FULL SQLITE_FULL708,29203
#define SQLITE_CANTOPEN SQLITE_CANTOPEN709,29283
#define SQLITE_PROTOCOL SQLITE_PROTOCOL710,29354
#define SQLITE_EMPTY SQLITE_EMPTY711,29421
#define SQLITE_SCHEMA SQLITE_SCHEMA712,29477
#define SQLITE_TOOBIG SQLITE_TOOBIG713,29543
#define SQLITE_CONSTRAINT SQLITE_CONSTRAINT714,29615
#define SQLITE_MISMATCH SQLITE_MISMATCH715,29687
#define SQLITE_MISUSE SQLITE_MISUSE716,29744
#define SQLITE_NOLFS SQLITE_NOLFS717,29807
#define SQLITE_AUTH SQLITE_AUTH718,29884
#define SQLITE_FORMAT SQLITE_FORMAT719,29943
#define SQLITE_RANGE SQLITE_RANGE720,30013
#define SQLITE_NOTADB SQLITE_NOTADB721,30094
#define SQLITE_NOTICE SQLITE_NOTICE722,30172
#define SQLITE_WARNING SQLITE_WARNING723,30243
#define SQLITE_ROW SQLITE_ROW724,30309
#define SQLITE_DONE SQLITE_DONE725,30384
#define SQLITE_IOERR_READ SQLITE_IOERR_READ745,31308
#define SQLITE_IOERR_SHORT_READ SQLITE_IOERR_SHORT_READ746,31371
#define SQLITE_IOERR_WRITE SQLITE_IOERR_WRITE747,31434
#define SQLITE_IOERR_FSYNC SQLITE_IOERR_FSYNC748,31497
#define SQLITE_IOERR_DIR_FSYNC SQLITE_IOERR_DIR_FSYNC749,31560
#define SQLITE_IOERR_TRUNCATE SQLITE_IOERR_TRUNCATE750,31623
#define SQLITE_IOERR_FSTAT SQLITE_IOERR_FSTAT751,31686
#define SQLITE_IOERR_UNLOCK SQLITE_IOERR_UNLOCK752,31749
#define SQLITE_IOERR_RDLOCK SQLITE_IOERR_RDLOCK753,31812
#define SQLITE_IOERR_DELETE SQLITE_IOERR_DELETE754,31875
#define SQLITE_IOERR_BLOCKED SQLITE_IOERR_BLOCKED755,31939
#define SQLITE_IOERR_NOMEM SQLITE_IOERR_NOMEM756,32003
#define SQLITE_IOERR_ACCESS SQLITE_IOERR_ACCESS757,32067
#define SQLITE_IOERR_CHECKRESERVEDLOCK SQLITE_IOERR_CHECKRESERVEDLOCK758,32131
#define SQLITE_IOERR_LOCK SQLITE_IOERR_LOCK759,32195
#define SQLITE_IOERR_CLOSE SQLITE_IOERR_CLOSE760,32259
#define SQLITE_IOERR_DIR_CLOSE SQLITE_IOERR_DIR_CLOSE761,32323
#define SQLITE_IOERR_SHMOPEN SQLITE_IOERR_SHMOPEN762,32387
#define SQLITE_IOERR_SHMSIZE SQLITE_IOERR_SHMSIZE763,32451
#define SQLITE_IOERR_SHMLOCK SQLITE_IOERR_SHMLOCK764,32515
#define SQLITE_IOERR_SHMMAP SQLITE_IOERR_SHMMAP765,32579
#define SQLITE_IOERR_SEEK SQLITE_IOERR_SEEK766,32643
#define SQLITE_IOERR_DELETE_NOENT SQLITE_IOERR_DELETE_NOENT767,32707
#define SQLITE_IOERR_MMAP SQLITE_IOERR_MMAP768,32771
#define SQLITE_IOERR_GETTEMPPATH SQLITE_IOERR_GETTEMPPATH769,32835
#define SQLITE_IOERR_CONVPATH SQLITE_IOERR_CONVPATH770,32899
#define SQLITE_IOERR_VNODE SQLITE_IOERR_VNODE771,32963
#define SQLITE_IOERR_AUTH SQLITE_IOERR_AUTH772,33027
#define SQLITE_LOCKED_SHAREDCACHE SQLITE_LOCKED_SHAREDCACHE773,33091
#define SQLITE_BUSY_RECOVERY SQLITE_BUSY_RECOVERY774,33156
#define SQLITE_BUSY_SNAPSHOT SQLITE_BUSY_SNAPSHOT775,33221
#define SQLITE_CANTOPEN_NOTEMPDIR SQLITE_CANTOPEN_NOTEMPDIR776,33286
#define SQLITE_CANTOPEN_ISDIR SQLITE_CANTOPEN_ISDIR777,33352
#define SQLITE_CANTOPEN_FULLPATH SQLITE_CANTOPEN_FULLPATH778,33418
#define SQLITE_CANTOPEN_CONVPATH SQLITE_CANTOPEN_CONVPATH779,33484
#define SQLITE_CORRUPT_VTAB SQLITE_CORRUPT_VTAB780,33550
#define SQLITE_READONLY_RECOVERY SQLITE_READONLY_RECOVERY781,33615
#define SQLITE_READONLY_CANTLOCK SQLITE_READONLY_CANTLOCK782,33681
#define SQLITE_READONLY_ROLLBACK SQLITE_READONLY_ROLLBACK783,33747
#define SQLITE_READONLY_DBMOVED SQLITE_READONLY_DBMOVED784,33813
#define SQLITE_ABORT_ROLLBACK SQLITE_ABORT_ROLLBACK785,33879
#define SQLITE_CONSTRAINT_CHECK SQLITE_CONSTRAINT_CHECK786,33942
#define SQLITE_CONSTRAINT_COMMITHOOK SQLITE_CONSTRAINT_COMMITHOOK787,34010
#define SQLITE_CONSTRAINT_FOREIGNKEY SQLITE_CONSTRAINT_FOREIGNKEY788,34078
#define SQLITE_CONSTRAINT_FUNCTION SQLITE_CONSTRAINT_FUNCTION789,34146
#define SQLITE_CONSTRAINT_NOTNULL SQLITE_CONSTRAINT_NOTNULL790,34214
#define SQLITE_CONSTRAINT_PRIMARYKEY SQLITE_CONSTRAINT_PRIMARYKEY791,34282
#define SQLITE_CONSTRAINT_TRIGGER SQLITE_CONSTRAINT_TRIGGER792,34350
#define SQLITE_CONSTRAINT_UNIQUE SQLITE_CONSTRAINT_UNIQUE793,34418
#define SQLITE_CONSTRAINT_VTAB SQLITE_CONSTRAINT_VTAB794,34486
#define SQLITE_CONSTRAINT_ROWID SQLITE_CONSTRAINT_ROWID795,34554
#define SQLITE_NOTICE_RECOVER_WAL SQLITE_NOTICE_RECOVER_WAL796,34622
#define SQLITE_NOTICE_RECOVER_ROLLBACK SQLITE_NOTICE_RECOVER_ROLLBACK797,34686
#define SQLITE_WARNING_AUTOINDEX SQLITE_WARNING_AUTOINDEX798,34750
#define SQLITE_AUTH_USER SQLITE_AUTH_USER799,34815
#define SQLITE_OK_LOAD_PERMANENTLY SQLITE_OK_LOAD_PERMANENTLY800,34877
#define SQLITE_OPEN_READONLY SQLITE_OPEN_READONLY809,35156
#define SQLITE_OPEN_READWRITE SQLITE_OPEN_READWRITE810,35236
#define SQLITE_OPEN_CREATE SQLITE_OPEN_CREATE811,35316
#define SQLITE_OPEN_DELETEONCLOSE SQLITE_OPEN_DELETEONCLOSE812,35396
#define SQLITE_OPEN_EXCLUSIVE SQLITE_OPEN_EXCLUSIVE813,35460
#define SQLITE_OPEN_AUTOPROXY SQLITE_OPEN_AUTOPROXY814,35524
#define SQLITE_OPEN_URI SQLITE_OPEN_URI815,35588
#define SQLITE_OPEN_MEMORY SQLITE_OPEN_MEMORY816,35668
#define SQLITE_OPEN_MAIN_DB SQLITE_OPEN_MAIN_DB817,35748
#define SQLITE_OPEN_TEMP_DB SQLITE_OPEN_TEMP_DB818,35812
#define SQLITE_OPEN_TRANSIENT_DB SQLITE_OPEN_TRANSIENT_DB819,35876
#define SQLITE_OPEN_MAIN_JOURNAL SQLITE_OPEN_MAIN_JOURNAL820,35940
#define SQLITE_OPEN_TEMP_JOURNAL SQLITE_OPEN_TEMP_JOURNAL821,36004
#define SQLITE_OPEN_SUBJOURNAL SQLITE_OPEN_SUBJOURNAL822,36068
#define SQLITE_OPEN_MASTER_JOURNAL SQLITE_OPEN_MASTER_JOURNAL823,36132
#define SQLITE_OPEN_NOMUTEX SQLITE_OPEN_NOMUTEX824,36196
#define SQLITE_OPEN_FULLMUTEX SQLITE_OPEN_FULLMUTEX825,36276
#define SQLITE_OPEN_SHAREDCACHE SQLITE_OPEN_SHAREDCACHE826,36356
#define SQLITE_OPEN_PRIVATECACHE SQLITE_OPEN_PRIVATECACHE827,36436
#define SQLITE_OPEN_WAL SQLITE_OPEN_WAL828,36516
#define SQLITE_IOCAP_ATOMIC SQLITE_IOCAP_ATOMIC860,38058
#define SQLITE_IOCAP_ATOMIC512 SQLITE_IOCAP_ATOMIC512861,38113
#define SQLITE_IOCAP_ATOMIC1K SQLITE_IOCAP_ATOMIC1K862,38168
#define SQLITE_IOCAP_ATOMIC2K SQLITE_IOCAP_ATOMIC2K863,38223
#define SQLITE_IOCAP_ATOMIC4K SQLITE_IOCAP_ATOMIC4K864,38278
#define SQLITE_IOCAP_ATOMIC8K SQLITE_IOCAP_ATOMIC8K865,38333
#define SQLITE_IOCAP_ATOMIC16K SQLITE_IOCAP_ATOMIC16K866,38388
#define SQLITE_IOCAP_ATOMIC32K SQLITE_IOCAP_ATOMIC32K867,38443
#define SQLITE_IOCAP_ATOMIC64K SQLITE_IOCAP_ATOMIC64K868,38498
#define SQLITE_IOCAP_SAFE_APPEND SQLITE_IOCAP_SAFE_APPEND869,38553
#define SQLITE_IOCAP_SEQUENTIAL SQLITE_IOCAP_SEQUENTIAL870,38608
#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN871,38663
#define SQLITE_IOCAP_POWERSAFE_OVERWRITE SQLITE_IOCAP_POWERSAFE_OVERWRITE872,38718
#define SQLITE_IOCAP_IMMUTABLE SQLITE_IOCAP_IMMUTABLE873,38773
#define SQLITE_LOCK_NONE SQLITE_LOCK_NONE882,39033
#define SQLITE_LOCK_SHARED SQLITE_LOCK_SHARED883,39069
#define SQLITE_LOCK_RESERVED SQLITE_LOCK_RESERVED884,39105
#define SQLITE_LOCK_PENDING SQLITE_LOCK_PENDING885,39141
#define SQLITE_LOCK_EXCLUSIVE SQLITE_LOCK_EXCLUSIVE886,39177
#define SQLITE_SYNC_NORMAL SQLITE_SYNC_NORMAL914,40516
#define SQLITE_SYNC_FULL SQLITE_SYNC_FULL915,40558
#define SQLITE_SYNC_DATAONLY SQLITE_SYNC_DATAONLY916,40600
typedef struct sqlite3_file sqlite3_file;sqlite3_file929,41070
struct sqlite3_file {sqlite3_file930,41112
  const struct sqlite3_io_methods *pMethods;  /* Methods for an open file */pMethods931,41134
typedef struct sqlite3_io_methods sqlite3_io_methods;sqlite3_io_methods1027,45544
struct sqlite3_io_methods {sqlite3_io_methods1028,45598
  int iVersion;iVersion1029,45626
  int (*xClose)(sqlite3_file*);xClose1030,45642
  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);xRead1031,45674
  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);xWrite1032,45743
  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);xTruncate1033,45819
  int (*xSync)(sqlite3_file*, int flags);xSync1034,45874
  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);xFileSize1035,45916
  int (*xLock)(sqlite3_file*, int);xLock1036,45973
  int (*xUnlock)(sqlite3_file*, int);xUnlock1037,46009
  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);xCheckReservedLock1038,46047
  int (*xFileControl)(sqlite3_file*, int op, void *pArg);xFileControl1039,46105
  int (*xSectorSize)(sqlite3_file*);xSectorSize1040,46163
  int (*xDeviceCharacteristics)(sqlite3_file*);xDeviceCharacteristics1041,46200
  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);xShmMap1043,46294
  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);xShmLock1044,46368
  void (*xShmBarrier)(sqlite3_file*);xShmBarrier1045,46432
  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);xShmUnmap1046,46470
  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);xFetch1048,46567
  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);xUnfetch1049,46641
#define SQLITE_FCNTL_LOCKSTATE SQLITE_FCNTL_LOCKSTATE1293,60147
#define SQLITE_FCNTL_GET_LOCKPROXYFILE SQLITE_FCNTL_GET_LOCKPROXYFILE1294,60194
#define SQLITE_FCNTL_SET_LOCKPROXYFILE SQLITE_FCNTL_SET_LOCKPROXYFILE1295,60241
#define SQLITE_FCNTL_LAST_ERRNO SQLITE_FCNTL_LAST_ERRNO1296,60288
#define SQLITE_FCNTL_SIZE_HINT SQLITE_FCNTL_SIZE_HINT1297,60335
#define SQLITE_FCNTL_CHUNK_SIZE SQLITE_FCNTL_CHUNK_SIZE1298,60382
#define SQLITE_FCNTL_FILE_POINTER SQLITE_FCNTL_FILE_POINTER1299,60429
#define SQLITE_FCNTL_SYNC_OMITTED SQLITE_FCNTL_SYNC_OMITTED1300,60476
#define SQLITE_FCNTL_WIN32_AV_RETRY SQLITE_FCNTL_WIN32_AV_RETRY1301,60523
#define SQLITE_FCNTL_PERSIST_WAL SQLITE_FCNTL_PERSIST_WAL1302,60570
#define SQLITE_FCNTL_OVERWRITE SQLITE_FCNTL_OVERWRITE1303,60617
#define SQLITE_FCNTL_VFSNAME SQLITE_FCNTL_VFSNAME1304,60664
#define SQLITE_FCNTL_POWERSAFE_OVERWRITE SQLITE_FCNTL_POWERSAFE_OVERWRITE1305,60711
#define SQLITE_FCNTL_PRAGMA SQLITE_FCNTL_PRAGMA1306,60758
#define SQLITE_FCNTL_BUSYHANDLER SQLITE_FCNTL_BUSYHANDLER1307,60805
#define SQLITE_FCNTL_TEMPFILENAME SQLITE_FCNTL_TEMPFILENAME1308,60852
#define SQLITE_FCNTL_MMAP_SIZE SQLITE_FCNTL_MMAP_SIZE1309,60899
#define SQLITE_FCNTL_TRACE SQLITE_FCNTL_TRACE1310,60946
#define SQLITE_FCNTL_HAS_MOVED SQLITE_FCNTL_HAS_MOVED1311,60993
#define SQLITE_FCNTL_SYNC SQLITE_FCNTL_SYNC1312,61040
#define SQLITE_FCNTL_COMMIT_PHASETWO SQLITE_FCNTL_COMMIT_PHASETWO1313,61087
#define SQLITE_FCNTL_WIN32_SET_HANDLE SQLITE_FCNTL_WIN32_SET_HANDLE1314,61134
#define SQLITE_FCNTL_WAL_BLOCK SQLITE_FCNTL_WAL_BLOCK1315,61181
#define SQLITE_FCNTL_ZIPVFS SQLITE_FCNTL_ZIPVFS1316,61228
#define SQLITE_FCNTL_RBU SQLITE_FCNTL_RBU1317,61275
#define SQLITE_FCNTL_VFS_POINTER SQLITE_FCNTL_VFS_POINTER1318,61322
#define SQLITE_FCNTL_JOURNAL_POINTER SQLITE_FCNTL_JOURNAL_POINTER1319,61369
#define SQLITE_FCNTL_WIN32_GET_HANDLE SQLITE_FCNTL_WIN32_GET_HANDLE1320,61416
#define SQLITE_FCNTL_PDB SQLITE_FCNTL_PDB1321,61463
#define SQLITE_GET_LOCKPROXYFILE SQLITE_GET_LOCKPROXYFILE1324,61534
#define SQLITE_SET_LOCKPROXYFILE SQLITE_SET_LOCKPROXYFILE1325,61603
#define SQLITE_LAST_ERRNO SQLITE_LAST_ERRNO1326,61672
typedef struct sqlite3_mutex sqlite3_mutex;sqlite3_mutex1339,62081
typedef struct sqlite3_api_routines sqlite3_api_routines;sqlite3_api_routines1349,62410
typedef struct sqlite3_vfs sqlite3_vfs;sqlite3_vfs1508,70315
typedef void (*sqlite3_syscall_ptr)(void);sqlite3_syscall_ptr1509,70355
struct sqlite3_vfs {sqlite3_vfs1510,70398
  int iVersion;            /* Structure version number (currently 3) */iVersion1511,70419
  int szOsFile;            /* Size of subclassed sqlite3_file */szOsFile1512,70491
  int mxPathname;          /* Maximum file pathname length */mxPathname1513,70556
  sqlite3_vfs *pNext;      /* Next registered VFS */pNext1514,70618
  const char *zName;       /* Name of this virtual file system */zName1515,70671
  void *pAppData;          /* Pointer to application-specific data */pAppData1516,70737
  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,xOpen1517,70807
  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);xDelete1519,70913
  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);xAccess1520,70977
  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);xFullPathname1521,71053
  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);xDlOpen1522,71132
  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);xDlError1523,71189
  void (*xDlClose)(sqlite3_vfs*, void*);xDlClose1525,71317
  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);xRandomness1526,71358
  int (*xSleep)(sqlite3_vfs*, int microseconds);xSleep1527,71417
  int (*xCurrentTime)(sqlite3_vfs*, double*);xCurrentTime1528,71466
  int (*xGetLastError)(sqlite3_vfs*, int, char *);xGetLastError1529,71512
  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);xCurrentTimeInt641534,71706
  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);xSetSystemCall1539,71895
  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);xGetSystemCall1540,71974
  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);xNextSystemCall1541,72048
#define SQLITE_ACCESS_EXISTS SQLITE_ACCESS_EXISTS1569,73237
#define SQLITE_ACCESS_READWRITE SQLITE_ACCESS_READWRITE1570,73271
#define SQLITE_ACCESS_READ SQLITE_ACCESS_READ1571,73349
#define SQLITE_SHM_UNLOCK SQLITE_SHM_UNLOCK1595,74155
#define SQLITE_SHM_LOCK SQLITE_SHM_LOCK1596,74189
#define SQLITE_SHM_SHARED SQLITE_SHM_SHARED1597,74223
#define SQLITE_SHM_EXCLUSIVE SQLITE_SHM_EXCLUSIVE1598,74257
#define SQLITE_SHM_NLOCK SQLITE_SHM_NLOCK1608,74551
typedef struct sqlite3_mem_methods sqlite3_mem_methods;sqlite3_mem_methods1806,84404
struct sqlite3_mem_methods {sqlite3_mem_methods1807,84460
  void *(*xMalloc)(int);         /* Memory allocation function */xMalloc1808,84489
  void (*xFree)(void*);          /* Free a prior allocation */xFree1809,84555
  void *(*xRealloc)(void*,int);  /* Resize an allocation */xRealloc1810,84618
  int (*xSize)(void*);           /* Return the size of an allocation */xSize1811,84678
  int (*xRoundup)(int);          /* Round up request size to allocation size */xRoundup1812,84750
  int (*xInit)(void*);           /* Initialize the memory allocator */xInit1813,84830
  void (*xShutdown)(void*);      /* Deinitialize the memory allocator */xShutdown1814,84901
  void *pAppData;                /* Argument to xInit() and xShutdown() */pAppData1815,84974
#define SQLITE_CONFIG_SINGLETHREAD SQLITE_CONFIG_SINGLETHREAD2152,104017
#define SQLITE_CONFIG_MULTITHREAD SQLITE_CONFIG_MULTITHREAD2153,104066
#define SQLITE_CONFIG_SERIALIZED SQLITE_CONFIG_SERIALIZED2154,104115
#define SQLITE_CONFIG_MALLOC SQLITE_CONFIG_MALLOC2155,104164
#define SQLITE_CONFIG_GETMALLOC SQLITE_CONFIG_GETMALLOC2156,104230
#define SQLITE_CONFIG_SCRATCH SQLITE_CONFIG_SCRATCH2157,104296
#define SQLITE_CONFIG_PAGECACHE SQLITE_CONFIG_PAGECACHE2158,104362
#define SQLITE_CONFIG_HEAP SQLITE_CONFIG_HEAP2159,104428
#define SQLITE_CONFIG_MEMSTATUS SQLITE_CONFIG_MEMSTATUS2160,104499
#define SQLITE_CONFIG_MUTEX SQLITE_CONFIG_MUTEX2161,104552
#define SQLITE_CONFIG_GETMUTEX SQLITE_CONFIG_GETMUTEX2162,104620
#define SQLITE_CONFIG_LOOKASIDE SQLITE_CONFIG_LOOKASIDE2164,104755
#define SQLITE_CONFIG_PCACHE SQLITE_CONFIG_PCACHE2165,104808
#define SQLITE_CONFIG_GETPCACHE SQLITE_CONFIG_GETPCACHE2166,104859
#define SQLITE_CONFIG_LOG SQLITE_CONFIG_LOG2167,104910
#define SQLITE_CONFIG_URI SQLITE_CONFIG_URI2168,104968
#define SQLITE_CONFIG_PCACHE2 SQLITE_CONFIG_PCACHE22169,105017
#define SQLITE_CONFIG_GETPCACHE2 SQLITE_CONFIG_GETPCACHE22170,105087
#define SQLITE_CONFIG_COVERING_INDEX_SCAN SQLITE_CONFIG_COVERING_INDEX_SCAN2171,105157
#define SQLITE_CONFIG_SQLLOG SQLITE_CONFIG_SQLLOG2172,105213
#define SQLITE_CONFIG_MMAP_SIZE SQLITE_CONFIG_MMAP_SIZE2173,105273
#define SQLITE_CONFIG_WIN32_HEAPSIZE SQLITE_CONFIG_WIN32_HEAPSIZE2174,105347
#define SQLITE_CONFIG_PCACHE_HDRSZ SQLITE_CONFIG_PCACHE_HDRSZ2175,105409
#define SQLITE_CONFIG_PMASZ SQLITE_CONFIG_PMASZ2176,105470
#define SQLITE_CONFIG_STMTJRNL_SPILL SQLITE_CONFIG_STMTJRNL_SPILL2177,105541
#define SQLITE_DBCONFIG_MAINDBNAME SQLITE_DBCONFIG_MAINDBNAME2288,111738
#define SQLITE_DBCONFIG_LOOKASIDE SQLITE_DBCONFIG_LOOKASIDE2289,111807
#define SQLITE_DBCONFIG_ENABLE_FKEY SQLITE_DBCONFIG_ENABLE_FKEY2290,111878
#define SQLITE_DBCONFIG_ENABLE_TRIGGER SQLITE_DBCONFIG_ENABLE_TRIGGER2291,111944
#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER2292,112010
#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION2293,112076
#define SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE2294,112142
#define SQLITE_DENY SQLITE_DENY3031,146684
#define SQLITE_IGNORE SQLITE_IGNORE3032,146754
#define SQLITE_CREATE_INDEX SQLITE_CREATE_INDEX3054,147879
#define SQLITE_CREATE_TABLE SQLITE_CREATE_TABLE3055,147958
#define SQLITE_CREATE_TEMP_INDEX SQLITE_CREATE_TEMP_INDEX3056,148037
#define SQLITE_CREATE_TEMP_TABLE SQLITE_CREATE_TEMP_TABLE3057,148116
#define SQLITE_CREATE_TEMP_TRIGGER SQLITE_CREATE_TEMP_TRIGGER3058,148195
#define SQLITE_CREATE_TEMP_VIEW SQLITE_CREATE_TEMP_VIEW3059,148274
#define SQLITE_CREATE_TRIGGER SQLITE_CREATE_TRIGGER3060,148353
#define SQLITE_CREATE_VIEW SQLITE_CREATE_VIEW3061,148432
#define SQLITE_DELETE SQLITE_DELETE3062,148511
#define SQLITE_DROP_INDEX SQLITE_DROP_INDEX3063,148590
#define SQLITE_DROP_TABLE SQLITE_DROP_TABLE3064,148669
#define SQLITE_DROP_TEMP_INDEX SQLITE_DROP_TEMP_INDEX3065,148748
#define SQLITE_DROP_TEMP_TABLE SQLITE_DROP_TEMP_TABLE3066,148827
#define SQLITE_DROP_TEMP_TRIGGER SQLITE_DROP_TEMP_TRIGGER3067,148906
#define SQLITE_DROP_TEMP_VIEW SQLITE_DROP_TEMP_VIEW3068,148985
#define SQLITE_DROP_TRIGGER SQLITE_DROP_TRIGGER3069,149064
#define SQLITE_DROP_VIEW SQLITE_DROP_VIEW3070,149143
#define SQLITE_INSERT SQLITE_INSERT3071,149222
#define SQLITE_PRAGMA SQLITE_PRAGMA3072,149301
#define SQLITE_READ SQLITE_READ3073,149380
#define SQLITE_SELECT SQLITE_SELECT3074,149459
#define SQLITE_TRANSACTION SQLITE_TRANSACTION3075,149538
#define SQLITE_UPDATE SQLITE_UPDATE3076,149617
#define SQLITE_ATTACH SQLITE_ATTACH3077,149696
#define SQLITE_DETACH SQLITE_DETACH3078,149775
#define SQLITE_ALTER_TABLE SQLITE_ALTER_TABLE3079,149854
#define SQLITE_REINDEX SQLITE_REINDEX3080,149933
#define SQLITE_ANALYZE SQLITE_ANALYZE3081,150012
#define SQLITE_CREATE_VTABLE SQLITE_CREATE_VTABLE3082,150091
#define SQLITE_DROP_VTABLE SQLITE_DROP_VTABLE3083,150170
#define SQLITE_FUNCTION SQLITE_FUNCTION3084,150249
#define SQLITE_SAVEPOINT SQLITE_SAVEPOINT3085,150328
#define SQLITE_COPY SQLITE_COPY3086,150407
#define SQLITE_RECURSIVE SQLITE_RECURSIVE3087,150469
#define SQLITE_TRACE_STMT SQLITE_TRACE_STMT3178,154877
#define SQLITE_TRACE_PROFILE SQLITE_TRACE_PROFILE3179,154914
#define SQLITE_TRACE_ROW SQLITE_TRACE_ROW3180,154951
#define SQLITE_TRACE_CLOSE SQLITE_TRACE_CLOSE3181,154988
typedef struct sqlite3_stmt sqlite3_stmt;sqlite3_stmt3610,176542
#define SQLITE_LIMIT_LENGTH SQLITE_LIMIT_LENGTH3710,181041
#define SQLITE_LIMIT_SQL_LENGTH SQLITE_LIMIT_SQL_LENGTH3711,181090
#define SQLITE_LIMIT_COLUMN SQLITE_LIMIT_COLUMN3712,181139
#define SQLITE_LIMIT_EXPR_DEPTH SQLITE_LIMIT_EXPR_DEPTH3713,181188
#define SQLITE_LIMIT_COMPOUND_SELECT SQLITE_LIMIT_COMPOUND_SELECT3714,181237
#define SQLITE_LIMIT_VDBE_OP SQLITE_LIMIT_VDBE_OP3715,181286
#define SQLITE_LIMIT_FUNCTION_ARG SQLITE_LIMIT_FUNCTION_ARG3716,181335
#define SQLITE_LIMIT_ATTACHED SQLITE_LIMIT_ATTACHED3717,181384
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH SQLITE_LIMIT_LIKE_PATTERN_LENGTH3718,181433
#define SQLITE_LIMIT_VARIABLE_NUMBER SQLITE_LIMIT_VARIABLE_NUMBER3719,181482
#define SQLITE_LIMIT_TRIGGER_DEPTH SQLITE_LIMIT_TRIGGER_DEPTH3720,181531
#define SQLITE_LIMIT_WORKER_THREADS SQLITE_LIMIT_WORKER_THREADS3721,181580
typedef struct Mem sqlite3_value;sqlite3_value3963,193336
typedef struct sqlite3_context sqlite3_context;sqlite3_context3977,193918
#define SQLITE_INTEGER SQLITE_INTEGER4432,215250
#define SQLITE_FLOAT SQLITE_FLOAT4433,215276
#define SQLITE_BLOB SQLITE_BLOB4434,215302
#define SQLITE_NULL SQLITE_NULL4435,215328
# undef SQLITE_TEXTSQLITE_TEXT4437,215373
# define SQLITE_TEXT SQLITE_TEXT4439,215399
#define SQLITE3_TEXT SQLITE3_TEXT4441,215433
#define SQLITE_UTF8 SQLITE_UTF84801,233090
#define SQLITE_UTF16LE SQLITE_UTF16LE4802,233150
#define SQLITE_UTF16BE SQLITE_UTF16BE4803,233210
#define SQLITE_UTF16 SQLITE_UTF164804,233270
#define SQLITE_ANY SQLITE_ANY4805,233333
#define SQLITE_UTF16_ALIGNED SQLITE_UTF16_ALIGNED4806,233385
#define SQLITE_DETERMINISTIC SQLITE_DETERMINISTIC4816,233714
typedef void (*sqlite3_destructor_type)(void*);sqlite3_destructor_type5072,245565
#define SQLITE_STATIC SQLITE_STATIC5073,245613
#define SQLITE_TRANSIENT SQLITE_TRANSIENT5074,245669
SQLITE_API char *sqlite3_temp_directory;sqlite3_temp_directory5499,265342
SQLITE_API char *sqlite3_data_directory;sqlite3_data_directory5536,267164
typedef struct sqlite3_vtab sqlite3_vtab;sqlite3_vtab6082,291368
typedef struct sqlite3_index_info sqlite3_index_info;sqlite3_index_info6083,291410
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;sqlite3_vtab_cursor6084,291464
typedef struct sqlite3_module sqlite3_module;sqlite3_module6085,291520
struct sqlite3_module {sqlite3_module6103,292272
  int iVersion;iVersion6104,292296
  int (*xCreate)(sqlite3*, void *pAux,xCreate6105,292312
  int (*xConnect)(sqlite3*, void *pAux,xConnect6108,292447
  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);xBestIndex6111,292583
  int (*xDisconnect)(sqlite3_vtab *pVTab);xDisconnect6112,292646
  int (*xDestroy)(sqlite3_vtab *pVTab);xDestroy6113,292689
  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);xOpen6114,292729
  int (*xClose)(sqlite3_vtab_cursor*);xClose6115,292798
  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,xFilter6116,292837
  int (*xNext)(sqlite3_vtab_cursor*);xNext6118,292957
  int (*xEof)(sqlite3_vtab_cursor*);xEof6119,292995
  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);xColumn6120,293032
  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);xRowid6121,293095
  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);xUpdate6122,293157
  int (*xBegin)(sqlite3_vtab *pVTab);xBegin6123,293231
  int (*xSync)(sqlite3_vtab *pVTab);xSync6124,293269
  int (*xCommit)(sqlite3_vtab *pVTab);xCommit6125,293306
  int (*xRollback)(sqlite3_vtab *pVTab);xRollback6126,293345
  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,xFindFunction6127,293386
  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);xRename6130,293575
  int (*xSavepoint)(sqlite3_vtab *pVTab, int);xSavepoint6133,293753
  int (*xRelease)(sqlite3_vtab *pVTab, int);xRelease6134,293800
  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);xRollbackTo6135,293845
struct sqlite3_index_info {sqlite3_index_info6234,298991
  int nConstraint;           /* Number of entries in aConstraint */nConstraint6236,299034
  struct sqlite3_index_constraint {sqlite3_index_constraint6237,299102
     int iColumn;              /* Column constrained.  -1 for ROWID */iColumn6238,299138
     unsigned char op;         /* Constraint operator */op6239,299209
     unsigned char usable;     /* True if this constraint is usable */usable6240,299266
     int iTermOffset;          /* Used internally - xBestIndex should ignore */iTermOffset6241,299337
  } *aConstraint;            /* Table of WHERE clause constraints */aConstraint6242,299417
  int nOrderBy;              /* Number of terms in the ORDER BY clause */nOrderBy6243,299486
  struct sqlite3_index_orderby {sqlite3_index_orderby6244,299560
     int iColumn;              /* Column number */iColumn6245,299593
     unsigned char desc;       /* True for DESC.  False for ASC. */desc6246,299644
  } *aOrderBy;               /* The ORDER BY clause */aOrderBy6247,299712
  struct sqlite3_index_constraint_usage {sqlite3_index_constraint_usage6249,299783
    int argvIndex;           /* if >0, constraint is part of argv to xFilter */argvIndex6250,299825
    unsigned char omit;      /* Do not code a test for this constraint */omit6251,299905
  } *aConstraintUsage;aConstraintUsage6252,299979
  int idxNum;                /* Number used to identify the index */idxNum6253,300002
  char *idxStr;              /* String, possibly obtained from sqlite3_malloc */idxStr6254,300071
  int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */needToFreeIdxStr6255,300152
  int orderByConsumed;       /* True if output is already ordered */orderByConsumed6256,300228
  double estimatedCost;           /* Estimated cost of using this index */estimatedCost6257,300297
  sqlite3_int64 estimatedRows;    /* Estimated number of rows returned */estimatedRows6259,300438
  int idxFlags;              /* Mask of SQLITE_INDEX_SCAN_* flags */idxFlags6261,300578
  sqlite3_uint64 colUsed;    /* Input: Mask of columns used by statement */colUsed6263,300714
#define SQLITE_INDEX_SCAN_UNIQUE SQLITE_INDEX_SCAN_UNIQUE6269,300838
#define SQLITE_INDEX_CONSTRAINT_EQ SQLITE_INDEX_CONSTRAINT_EQ6279,301211
#define SQLITE_INDEX_CONSTRAINT_GT SQLITE_INDEX_CONSTRAINT_GT6280,301253
#define SQLITE_INDEX_CONSTRAINT_LE SQLITE_INDEX_CONSTRAINT_LE6281,301295
#define SQLITE_INDEX_CONSTRAINT_LT SQLITE_INDEX_CONSTRAINT_LT6282,301337
#define SQLITE_INDEX_CONSTRAINT_GE SQLITE_INDEX_CONSTRAINT_GE6283,301379
#define SQLITE_INDEX_CONSTRAINT_MATCH SQLITE_INDEX_CONSTRAINT_MATCH6284,301421
#define SQLITE_INDEX_CONSTRAINT_LIKE SQLITE_INDEX_CONSTRAINT_LIKE6285,301463
#define SQLITE_INDEX_CONSTRAINT_GLOB SQLITE_INDEX_CONSTRAINT_GLOB6286,301505
#define SQLITE_INDEX_CONSTRAINT_REGEXP SQLITE_INDEX_CONSTRAINT_REGEXP6287,301547
struct sqlite3_vtab {sqlite3_vtab6347,304364
  const sqlite3_module *pModule;  /* The module for this virtual table */pModule6348,304386
  int nRef;                       /* Number of open cursors */nRef6349,304460
  char *zErrMsg;                  /* Error message from sqlite3_mprintf() */zErrMsg6350,304523
struct sqlite3_vtab_cursor {sqlite3_vtab_cursor6371,305461
  sqlite3_vtab *pVtab;      /* Virtual table of this cursor */pVtab6372,305490
typedef struct sqlite3_blob sqlite3_blob;sqlite3_blob6427,307771
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;sqlite3_mutex_methods6875,328478
struct sqlite3_mutex_methods {sqlite3_mutex_methods6876,328538
  int (*xMutexInit)(void);xMutexInit6877,328569
  int (*xMutexEnd)(void);xMutexEnd6878,328596
  sqlite3_mutex *(*xMutexAlloc)(int);xMutexAlloc6879,328622
  void (*xMutexFree)(sqlite3_mutex *);xMutexFree6880,328660
  void (*xMutexEnter)(sqlite3_mutex *);xMutexEnter6881,328699
  int (*xMutexTry)(sqlite3_mutex *);xMutexTry6882,328739
  void (*xMutexLeave)(sqlite3_mutex *);xMutexLeave6883,328776
  int (*xMutexHeld)(sqlite3_mutex *);xMutexHeld6884,328816
  int (*xMutexNotheld)(sqlite3_mutex *);xMutexNotheld6885,328854
#define SQLITE_MUTEX_FAST SQLITE_MUTEX_FAST6932,330877
#define SQLITE_MUTEX_RECURSIVE SQLITE_MUTEX_RECURSIVE6933,330917
#define SQLITE_MUTEX_STATIC_MASTER SQLITE_MUTEX_STATIC_MASTER6934,330957
#define SQLITE_MUTEX_STATIC_MEM SQLITE_MUTEX_STATIC_MEM6935,330997
#define SQLITE_MUTEX_STATIC_MEM2 SQLITE_MUTEX_STATIC_MEM26936,331061
#define SQLITE_MUTEX_STATIC_OPEN SQLITE_MUTEX_STATIC_OPEN6937,331117
#define SQLITE_MUTEX_STATIC_PRNG SQLITE_MUTEX_STATIC_PRNG6938,331183
#define SQLITE_MUTEX_STATIC_LRU SQLITE_MUTEX_STATIC_LRU6939,331251
#define SQLITE_MUTEX_STATIC_LRU2 SQLITE_MUTEX_STATIC_LRU26940,331312
#define SQLITE_MUTEX_STATIC_PMEM SQLITE_MUTEX_STATIC_PMEM6941,331368
#define SQLITE_MUTEX_STATIC_APP1 SQLITE_MUTEX_STATIC_APP16942,331435
#define SQLITE_MUTEX_STATIC_APP2 SQLITE_MUTEX_STATIC_APP26943,331505
#define SQLITE_MUTEX_STATIC_APP3 SQLITE_MUTEX_STATIC_APP36944,331575
#define SQLITE_MUTEX_STATIC_VFS1 SQLITE_MUTEX_STATIC_VFS16945,331645
#define SQLITE_MUTEX_STATIC_VFS2 SQLITE_MUTEX_STATIC_VFS26946,331716
#define SQLITE_MUTEX_STATIC_VFS3 SQLITE_MUTEX_STATIC_VFS36947,331788
#define SQLITE_TESTCTRL_FIRST SQLITE_TESTCTRL_FIRST7026,335281
#define SQLITE_TESTCTRL_PRNG_SAVE SQLITE_TESTCTRL_PRNG_SAVE7027,335332
#define SQLITE_TESTCTRL_PRNG_RESTORE SQLITE_TESTCTRL_PRNG_RESTORE7028,335383
#define SQLITE_TESTCTRL_PRNG_RESET SQLITE_TESTCTRL_PRNG_RESET7029,335434
#define SQLITE_TESTCTRL_BITVEC_TEST SQLITE_TESTCTRL_BITVEC_TEST7030,335485
#define SQLITE_TESTCTRL_FAULT_INSTALL SQLITE_TESTCTRL_FAULT_INSTALL7031,335536
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS7032,335587
#define SQLITE_TESTCTRL_PENDING_BYTE SQLITE_TESTCTRL_PENDING_BYTE7033,335638
#define SQLITE_TESTCTRL_ASSERT SQLITE_TESTCTRL_ASSERT7034,335689
#define SQLITE_TESTCTRL_ALWAYS SQLITE_TESTCTRL_ALWAYS7035,335740
#define SQLITE_TESTCTRL_RESERVE SQLITE_TESTCTRL_RESERVE7036,335791
#define SQLITE_TESTCTRL_OPTIMIZATIONS SQLITE_TESTCTRL_OPTIMIZATIONS7037,335842
#define SQLITE_TESTCTRL_ISKEYWORD SQLITE_TESTCTRL_ISKEYWORD7038,335893
#define SQLITE_TESTCTRL_SCRATCHMALLOC SQLITE_TESTCTRL_SCRATCHMALLOC7039,335944
#define SQLITE_TESTCTRL_LOCALTIME_FAULT SQLITE_TESTCTRL_LOCALTIME_FAULT7040,335995
#define SQLITE_TESTCTRL_EXPLAIN_STMT SQLITE_TESTCTRL_EXPLAIN_STMT7041,336046
#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD7042,336113
#define SQLITE_TESTCTRL_NEVER_CORRUPT SQLITE_TESTCTRL_NEVER_CORRUPT7043,336164
#define SQLITE_TESTCTRL_VDBE_COVERAGE SQLITE_TESTCTRL_VDBE_COVERAGE7044,336215
#define SQLITE_TESTCTRL_BYTEORDER SQLITE_TESTCTRL_BYTEORDER7045,336266
#define SQLITE_TESTCTRL_ISINIT SQLITE_TESTCTRL_ISINIT7046,336317
#define SQLITE_TESTCTRL_SORTER_MMAP SQLITE_TESTCTRL_SORTER_MMAP7047,336368
#define SQLITE_TESTCTRL_IMPOSTER SQLITE_TESTCTRL_IMPOSTER7048,336419
#define SQLITE_TESTCTRL_LAST SQLITE_TESTCTRL_LAST7049,336470
#define SQLITE_STATUS_MEMORY_USED SQLITE_STATUS_MEMORY_USED7169,342287
#define SQLITE_STATUS_PAGECACHE_USED SQLITE_STATUS_PAGECACHE_USED7170,342332
#define SQLITE_STATUS_PAGECACHE_OVERFLOW SQLITE_STATUS_PAGECACHE_OVERFLOW7171,342377
#define SQLITE_STATUS_SCRATCH_USED SQLITE_STATUS_SCRATCH_USED7172,342422
#define SQLITE_STATUS_SCRATCH_OVERFLOW SQLITE_STATUS_SCRATCH_OVERFLOW7173,342467
#define SQLITE_STATUS_MALLOC_SIZE SQLITE_STATUS_MALLOC_SIZE7174,342512
#define SQLITE_STATUS_PARSER_STACK SQLITE_STATUS_PARSER_STACK7175,342557
#define SQLITE_STATUS_PAGECACHE_SIZE SQLITE_STATUS_PAGECACHE_SIZE7176,342602
#define SQLITE_STATUS_SCRATCH_SIZE SQLITE_STATUS_SCRATCH_SIZE7177,342647
#define SQLITE_STATUS_MALLOC_COUNT SQLITE_STATUS_MALLOC_COUNT7178,342692
#define SQLITE_DBSTATUS_LOOKASIDE_USED SQLITE_DBSTATUS_LOOKASIDE_USED7307,348895
#define SQLITE_DBSTATUS_CACHE_USED SQLITE_DBSTATUS_CACHE_USED7308,348942
#define SQLITE_DBSTATUS_SCHEMA_USED SQLITE_DBSTATUS_SCHEMA_USED7309,348989
#define SQLITE_DBSTATUS_STMT_USED SQLITE_DBSTATUS_STMT_USED7310,349036
#define SQLITE_DBSTATUS_LOOKASIDE_HIT SQLITE_DBSTATUS_LOOKASIDE_HIT7311,349083
#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE7312,349130
#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL7313,349177
#define SQLITE_DBSTATUS_CACHE_HIT SQLITE_DBSTATUS_CACHE_HIT7314,349224
#define SQLITE_DBSTATUS_CACHE_MISS SQLITE_DBSTATUS_CACHE_MISS7315,349271
#define SQLITE_DBSTATUS_CACHE_WRITE SQLITE_DBSTATUS_CACHE_WRITE7316,349318
#define SQLITE_DBSTATUS_DEFERRED_FKS SQLITE_DBSTATUS_DEFERRED_FKS7317,349365
#define SQLITE_DBSTATUS_CACHE_USED_SHARED SQLITE_DBSTATUS_CACHE_USED_SHARED7318,349412
#define SQLITE_DBSTATUS_MAX SQLITE_DBSTATUS_MAX7319,349459
#define SQLITE_STMTSTATUS_FULLSCAN_STEP SQLITE_STMTSTATUS_FULLSCAN_STEP7385,352502
#define SQLITE_STMTSTATUS_SORT SQLITE_STMTSTATUS_SORT7386,352548
#define SQLITE_STMTSTATUS_AUTOINDEX SQLITE_STMTSTATUS_AUTOINDEX7387,352594
#define SQLITE_STMTSTATUS_VM_STEP SQLITE_STMTSTATUS_VM_STEP7388,352640
typedef struct sqlite3_pcache sqlite3_pcache;sqlite3_pcache7401,353061
typedef struct sqlite3_pcache_page sqlite3_pcache_page;sqlite3_pcache_page7413,353478
struct sqlite3_pcache_page {sqlite3_pcache_page7414,353534
  void *pBuf;        /* The content of the page */pBuf7415,353563
  void *pExtra;      /* Extra information associated with the page */pExtra7416,353614
typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;sqlite3_pcache_methods27578,361842
struct sqlite3_pcache_methods2 {sqlite3_pcache_methods27579,361906
  int iVersion;iVersion7580,361939
  void *pArg;pArg7581,361955
  int (*xInit)(void*);xInit7582,361969
  void (*xShutdown)(void*);xShutdown7583,361992
  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);xCreate7584,362020
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize7585,362091
  int (*xPagecount)(sqlite3_pcache*);xPagecount7586,362146
  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch7587,362184
  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);xUnpin7588,362265
  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, xRekey7589,362335
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate7591,362433
  void (*xDestroy)(sqlite3_pcache*);xDestroy7592,362488
  void (*xShrink)(sqlite3_pcache*);xShrink7593,362525
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;sqlite3_pcache_methods7601,362783
struct sqlite3_pcache_methods {sqlite3_pcache_methods7602,362845
  void *pArg;pArg7603,362877
  int (*xInit)(void*);xInit7604,362891
  void (*xShutdown)(void*);xShutdown7605,362914
  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);xCreate7606,362942
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize7607,363000
  int (*xPagecount)(sqlite3_pcache*);xPagecount7608,363055
  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch7609,363093
  void (*xUnpin)(sqlite3_pcache*, void*, int discard);xUnpin7610,363159
  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);xRekey7611,363214
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate7612,363290
  void (*xDestroy)(sqlite3_pcache*);xDestroy7613,363345
typedef struct sqlite3_backup sqlite3_backup;sqlite3_backup7627,363722
#define SQLITE_CHECKPOINT_PASSIVE SQLITE_CHECKPOINT_PASSIVE8224,394077
#define SQLITE_CHECKPOINT_FULL SQLITE_CHECKPOINT_FULL8225,394157
#define SQLITE_CHECKPOINT_RESTART SQLITE_CHECKPOINT_RESTART8226,394235
#define SQLITE_CHECKPOINT_TRUNCATE SQLITE_CHECKPOINT_TRUNCATE8227,394314
#define SQLITE_VTAB_CONSTRAINT_SUPPORT SQLITE_VTAB_CONSTRAINT_SUPPORT8284,396981
#define SQLITE_ROLLBACK SQLITE_ROLLBACK8310,398011
#define SQLITE_FAIL SQLITE_FAIL8312,398113
#define SQLITE_REPLACE SQLITE_REPLACE8314,398191
#define SQLITE_SCANSTAT_NLOOP SQLITE_SCANSTAT_NLOOP8363,400512
#define SQLITE_SCANSTAT_NVISIT SQLITE_SCANSTAT_NVISIT8364,400547
#define SQLITE_SCANSTAT_EST SQLITE_SCANSTAT_EST8365,400582
#define SQLITE_SCANSTAT_NAME SQLITE_SCANSTAT_NAME8366,400617
#define SQLITE_SCANSTAT_EXPLAIN SQLITE_SCANSTAT_EXPLAIN8367,400652
#define SQLITE_SCANSTAT_SELECTID SQLITE_SCANSTAT_SELECTID8368,400687
typedef struct sqlite3_snapshot {sqlite3_snapshot8591,411582
  unsigned char hidden[48];hidden8592,411616
} sqlite3_snapshot;sqlite3_snapshot8593,411644
# undef doubledouble8749,418124
#define _SQLITE3RTREE_H__SQLITE3RTREE_H_8772,418671
typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;sqlite3_rtree_geometry8779,418725
typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;sqlite3_rtree_query_info8780,418787
  typedef sqlite3_int64 sqlite3_rtree_dbl;sqlite3_rtree_dbl8786,418994
  typedef double sqlite3_rtree_dbl;sqlite3_rtree_dbl8788,419043
struct sqlite3_rtree_geometry {sqlite3_rtree_geometry8809,419609
  void *pContext;                 /* Copy of pContext passed to s_r_g_c() */pContext8810,419641
  int nParam;                     /* Size of array aParam[] */nParam8811,419718
  sqlite3_rtree_dbl *aParam;      /* Parameters passed to SQL geom function */aParam8812,419781
  void *pUser;                    /* Callback implementation user data */pUser8813,419860
  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */xDelUser8814,419934
struct sqlite3_rtree_query_info {sqlite3_rtree_query_info8841,420741
  void *pContext;                   /* pContext from when function registered */pContext8842,420775
  int nParam;                       /* Number of function parameters */nParam8843,420856
  sqlite3_rtree_dbl *aParam;        /* value of function parameters */aParam8844,420928
  void *pUser;                      /* callback can use this, if desired */pUser8845,420999
  void (*xDelUser)(void*);          /* function to free pUser */xDelUser8846,421075
  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check */aCoord8847,421140
  unsigned int *anQueue;            /* Number of pending entries in the queue */anQueue8848,421220
  int nCoord;                       /* Number of coordinates */nCoord8849,421301
  int iLevel;                       /* Level of current node or entry */iLevel8850,421365
  int mxLevel;                      /* The largest iLevel value in the tree */mxLevel8851,421438
  sqlite3_int64 iRowid;             /* Rowid for current entry */iRowid8852,421517
  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */rParentScore8853,421583
  int eParentWithin;                /* Visibility of parent node */eParentWithin8854,421646
  int eWithin;                      /* OUT: Visiblity */eWithin8855,421714
  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */rScore8856,421771
  sqlite3_value **apSqlParam;       /* Original SQL values of parameters */apSqlParam8858,421907
#define NOT_WITHIN NOT_WITHIN8864,422063
#define PARTLY_WITHIN PARTLY_WITHIN8865,422140
#define FULLY_WITHIN FULLY_WITHIN8866,422214
#define __SQLITESESSION_H_ __SQLITESESSION_H_8879,422546
typedef struct sqlite3_session sqlite3_session;sqlite3_session8892,422697
typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;sqlite3_changeset_iter8897,422791
typedef struct sqlite3_changegroup sqlite3_changegroup;sqlite3_changegroup9608,455571
#define SQLITE_CHANGESET_DATA SQLITE_CHANGESET_DATA9972,473586
#define SQLITE_CHANGESET_NOTFOUND SQLITE_CHANGESET_NOTFOUND9973,473625
#define SQLITE_CHANGESET_CONFLICT SQLITE_CHANGESET_CONFLICT9974,473664
#define SQLITE_CHANGESET_CONSTRAINT SQLITE_CHANGESET_CONSTRAINT9975,473703
#define SQLITE_CHANGESET_FOREIGN_KEY SQLITE_CHANGESET_FOREIGN_KEY9976,473742
#define SQLITE_CHANGESET_OMIT SQLITE_CHANGESET_OMIT10009,475179
#define SQLITE_CHANGESET_REPLACE SQLITE_CHANGESET_REPLACE10010,475217
#define SQLITE_CHANGESET_ABORT SQLITE_CHANGESET_ABORT10011,475255
#define _FTS5_H_FTS5_H10188,482261
typedef struct Fts5ExtensionApi Fts5ExtensionApi;Fts5ExtensionApi10202,482540
typedef struct Fts5Context Fts5Context;Fts5Context10203,482590
typedef struct Fts5PhraseIter Fts5PhraseIter;Fts5PhraseIter10204,482630
typedef void (*fts5_extension_function)(fts5_extension_function10206,482677
struct Fts5PhraseIter {Fts5PhraseIter10214,483090
  const unsigned char *a;a10215,483114
  const unsigned char *b;b10216,483140
struct Fts5ExtensionApi {Fts5ExtensionApi10434,492801
  int iVersion;                   /* Currently always set to 3 */iVersion10435,492827
  void *(*xUserData)(Fts5Context*);xUserData10437,492894
  int (*xColumnCount)(Fts5Context*);xColumnCount10439,492931
  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);xRowCount10440,492968
  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);xColumnTotalSize10441,493024
  int (*xTokenize)(Fts5Context*, xTokenize10443,493100
  int (*xPhraseCount)(Fts5Context*);xPhraseCount10449,493343
  int (*xPhraseSize)(Fts5Context*, int iPhrase);xPhraseSize10450,493380
  int (*xInstCount)(Fts5Context*, int *pnInst);xInstCount10452,493430
  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);xInst10453,493478
  sqlite3_int64 (*xRowid)(Fts5Context*);xRowid10455,493558
  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);xColumnText10456,493599
  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);xColumnSize10457,493671
  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,xQueryPhrase10459,493732
  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));xSetAuxdata10462,493858
  void *(*xGetAuxdata)(Fts5Context*, int bClear);xGetAuxdata10463,493929
  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);xPhraseFirst10465,493980
  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);xPhraseNext10466,494059
  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);xPhraseFirstColumn10468,494138
  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);xPhraseNextColumn10469,494217
typedef struct Fts5Tokenizer Fts5Tokenizer;Fts5Tokenizer10668,504516
typedef struct fts5_tokenizer fts5_tokenizer;fts5_tokenizer10669,504560
struct fts5_tokenizer {fts5_tokenizer10670,504606
  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);xCreate10671,504630
  void (*xDelete)(Fts5Tokenizer*);xDelete10672,504708
  int (*xTokenize)(Fts5Tokenizer*, xTokenize10673,504743
#define FTS5_TOKENIZE_QUERY FTS5_TOKENIZE_QUERY10689,505414
#define FTS5_TOKENIZE_PREFIX FTS5_TOKENIZE_PREFIX10690,505453
#define FTS5_TOKENIZE_DOCUMENT FTS5_TOKENIZE_DOCUMENT10691,505492
#define FTS5_TOKENIZE_AUX FTS5_TOKENIZE_AUX10692,505531
#define FTS5_TOKEN_COLOCATED FTS5_TOKEN_COLOCATED10696,505705
typedef struct fts5_api fts5_api;fts5_api10705,506005
struct fts5_api {fts5_api10706,506039
  int iVersion;                   /* Currently always set to 2 */iVersion10707,506057
  int (*xCreateTokenizer)(xCreateTokenizer10710,506155
  int (*xFindTokenizer)(xFindTokenizer10719,506346
  int (*xCreateFunction)(xCreateFunction10727,506513
# define SQLITE_MAX_LENGTH SQLITE_MAX_LENGTH10784,508070
# define SQLITE_MAX_COLUMN SQLITE_MAX_COLUMN10805,508836
# define SQLITE_MAX_SQL_LENGTH SQLITE_MAX_SQL_LENGTH10816,509132
# define SQLITE_MAX_EXPR_DEPTH SQLITE_MAX_EXPR_DEPTH10830,509572
# define SQLITE_MAX_COMPOUND_SELECT SQLITE_MAX_COMPOUND_SELECT10842,510035
# define SQLITE_MAX_VDBE_OP SQLITE_MAX_VDBE_OP10850,510195
# define SQLITE_MAX_FUNCTION_ARG SQLITE_MAX_FUNCTION_ARG10857,510330
# define SQLITE_DEFAULT_CACHE_SIZE SQLITE_DEFAULT_CACHE_SIZE10870,510826
# define SQLITE_DEFAULT_WAL_AUTOCHECKPOINT SQLITE_DEFAULT_WAL_AUTOCHECKPOINT10878,511036
# define SQLITE_MAX_ATTACHED SQLITE_MAX_ATTACHED10888,511419
# define SQLITE_MAX_VARIABLE_NUMBER SQLITE_MAX_VARIABLE_NUMBER10896,511570
# undef SQLITE_MAX_PAGE_SIZESQLITE_MAX_PAGE_SIZE10911,512294
#define SQLITE_MAX_PAGE_SIZE SQLITE_MAX_PAGE_SIZE10913,512330
# define SQLITE_DEFAULT_PAGE_SIZE SQLITE_DEFAULT_PAGE_SIZE10920,512446
# undef SQLITE_DEFAULT_PAGE_SIZESQLITE_DEFAULT_PAGE_SIZE10923,512542
# define SQLITE_DEFAULT_PAGE_SIZE SQLITE_DEFAULT_PAGE_SIZE10924,512575
# define SQLITE_MAX_DEFAULT_PAGE_SIZE SQLITE_MAX_DEFAULT_PAGE_SIZE10935,513001
# undef SQLITE_MAX_DEFAULT_PAGE_SIZESQLITE_MAX_DEFAULT_PAGE_SIZE10938,513105
# define SQLITE_MAX_DEFAULT_PAGE_SIZE SQLITE_MAX_DEFAULT_PAGE_SIZE10939,513142
# define SQLITE_MAX_PAGE_COUNT SQLITE_MAX_PAGE_COUNT10951,513463
# define SQLITE_MAX_LIKE_PATTERN_LENGTH SQLITE_MAX_LIKE_PATTERN_LENGTH10959,513633
# define SQLITE_MAX_TRIGGER_DEPTH SQLITE_MAX_TRIGGER_DEPTH10970,513939
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR11012,515470
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT11013,515532
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR11015,515665
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT11016,515720
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR11018,515855
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT11019,515909
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR11021,516040
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT11022,516084
#  define SQLITE_NOINLINE SQLITE_NOINLINE11030,516239
#  define SQLITE_NOINLINE SQLITE_NOINLINE11032,516334
#  define SQLITE_NOINLINESQLITE_NOINLINE11034,516388
#   define SQLITE_THREADSAFE SQLITE_THREADSAFE11069,517526
#   define SQLITE_THREADSAFE SQLITE_THREADSAFE11071,517573
# define SQLITE_POWERSAFE_OVERWRITE SQLITE_POWERSAFE_OVERWRITE11080,517815
# define SQLITE_DEFAULT_MEMSTATUS SQLITE_DEFAULT_MEMSTATUS11089,518120
# define SQLITE_SYSTEM_MALLOC SQLITE_SYSTEM_MALLOC11122,519415
# define SQLITE_MALLOC_SOFT_LIMIT SQLITE_MALLOC_SOFT_LIMIT11130,519629
#  define _XOPEN_SOURCE _XOPEN_SOURCE11140,519962
# define NDEBUG NDEBUG11155,520544
# undef NDEBUGNDEBUG11158,520614
# define SQLITE_ENABLE_EXPLAIN_COMMENTS SQLITE_ENABLE_EXPLAIN_COMMENTS11165,520784
# define testcase(testcase11184,521604
# define testcase(testcase11186,521670
# define TESTONLY(TESTONLY11195,521930
# define TESTONLY(TESTONLY11197,521960
# define VVA_ONLY(VVA_ONLY11209,522440
# define VVA_ONLY(VVA_ONLY11211,522470
# define ALWAYS(ALWAYS11230,523249
# define NEVER(NEVER11231,523277
# define ALWAYS(ALWAYS11233,523328
# define NEVER(NEVER11234,523374
# define ALWAYS(ALWAYS11236,523426
# define NEVER(NEVER11237,523454
# define ONLY_IF_REALLOC_STRESS(ONLY_IF_REALLOC_STRESS11248,523905
# define ONLY_IF_REALLOC_STRESS(ONLY_IF_REALLOC_STRESS11250,523968
# define ONLY_IF_REALLOC_STRESS(ONLY_IF_REALLOC_STRESS11252,524032
# define OSTRACE(OSTRACE11261,524290
# define SQLITE_HAVE_OS_TRACESQLITE_HAVE_OS_TRACE11262,524361
# define OSTRACE(OSTRACE11264,524397
# undef  SQLITE_HAVE_OS_TRACESQLITE_HAVE_OS_TRACE11265,524417
# define SQLITE_NEED_ERR_NAMESQLITE_NEED_ERR_NAME11276,524804
# undef  SQLITE_NEED_ERR_NAMESQLITE_NEED_ERR_NAME11278,524840
# undef SQLITE_ENABLE_EXPLAIN_COMMENTSSQLITE_ENABLE_EXPLAIN_COMMENTS11285,524986
#define IS_BIG_INT(IS_BIG_INT11293,525252
#define likely(likely11302,525620
#define unlikely(unlikely11303,525645
#define SQLITE_HASH_HSQLITE_HASH_H11322,526319
typedef struct Hash Hash;Hash11325,526384
typedef struct HashElem HashElem;HashElem11326,526410
struct Hash {Hash11349,527525
  unsigned int htsize;      /* Number of buckets in the hash table */htsize11350,527539
  unsigned int count;       /* Number of entries in this table */count11351,527609
  HashElem *first;          /* The first element of the array */first11352,527675
  struct _ht {              /* the hash table */_ht11353,527740
    int count;                 /* Number of entries with this hash */count11354,527789
    HashElem *chain;           /* Pointer to first entry with this hash */chain11355,527859
  } *ht;ht11356,527934
struct HashElem {HashElem11365,528205
  HashElem *next, *prev;       /* Next and previous elements in the table */next11366,528223
  HashElem *next, *prev;       /* Next and previous elements in the table */prev11366,528223
  void *data;                  /* Data associated with this element */data11367,528300
  const char *pKey;            /* Key associated with this element */pKey11368,528371
#define sqliteHashFirst(sqliteHashFirst11391,529024
#define sqliteHashNext(sqliteHashNext11392,529065
#define sqliteHashData(sqliteHashData11393,529105
#define TK_SEMI TK_SEMI11408,529715
#define TK_EXPLAIN TK_EXPLAIN11409,529761
#define TK_QUERY TK_QUERY11410,529807
#define TK_PLAN TK_PLAN11411,529853
#define TK_BEGIN TK_BEGIN11412,529899
#define TK_TRANSACTION TK_TRANSACTION11413,529945
#define TK_DEFERRED TK_DEFERRED11414,529991
#define TK_IMMEDIATE TK_IMMEDIATE11415,530037
#define TK_EXCLUSIVE TK_EXCLUSIVE11416,530083
#define TK_COMMIT TK_COMMIT11417,530129
#define TK_END TK_END11418,530175
#define TK_ROLLBACK TK_ROLLBACK11419,530221
#define TK_SAVEPOINT TK_SAVEPOINT11420,530267
#define TK_RELEASE TK_RELEASE11421,530313
#define TK_TO TK_TO11422,530359
#define TK_TABLE TK_TABLE11423,530405
#define TK_CREATE TK_CREATE11424,530451
#define TK_IF TK_IF11425,530497
#define TK_NOT TK_NOT11426,530543
#define TK_EXISTS TK_EXISTS11427,530589
#define TK_TEMP TK_TEMP11428,530635
#define TK_LP TK_LP11429,530681
#define TK_RP TK_RP11430,530727
#define TK_AS TK_AS11431,530773
#define TK_WITHOUT TK_WITHOUT11432,530819
#define TK_COMMA TK_COMMA11433,530865
#define TK_OR TK_OR11434,530911
#define TK_AND TK_AND11435,530957
#define TK_IS TK_IS11436,531003
#define TK_MATCH TK_MATCH11437,531049
#define TK_LIKE_KW TK_LIKE_KW11438,531095
#define TK_BETWEEN TK_BETWEEN11439,531141
#define TK_IN TK_IN11440,531187
#define TK_ISNULL TK_ISNULL11441,531233
#define TK_NOTNULL TK_NOTNULL11442,531279
#define TK_NE TK_NE11443,531325
#define TK_EQ TK_EQ11444,531371
#define TK_GT TK_GT11445,531417
#define TK_LE TK_LE11446,531463
#define TK_LT TK_LT11447,531509
#define TK_GE TK_GE11448,531555
#define TK_ESCAPE TK_ESCAPE11449,531601
#define TK_BITAND TK_BITAND11450,531647
#define TK_BITOR TK_BITOR11451,531693
#define TK_LSHIFT TK_LSHIFT11452,531739
#define TK_RSHIFT TK_RSHIFT11453,531785
#define TK_PLUS TK_PLUS11454,531831
#define TK_MINUS TK_MINUS11455,531877
#define TK_STAR TK_STAR11456,531923
#define TK_SLASH TK_SLASH11457,531969
#define TK_REM TK_REM11458,532015
#define TK_CONCAT TK_CONCAT11459,532061
#define TK_COLLATE TK_COLLATE11460,532107
#define TK_BITNOT TK_BITNOT11461,532153
#define TK_ID TK_ID11462,532199
#define TK_INDEXED TK_INDEXED11463,532245
#define TK_ABORT TK_ABORT11464,532291
#define TK_ACTION TK_ACTION11465,532337
#define TK_AFTER TK_AFTER11466,532383
#define TK_ANALYZE TK_ANALYZE11467,532429
#define TK_ASC TK_ASC11468,532475
#define TK_ATTACH TK_ATTACH11469,532521
#define TK_BEFORE TK_BEFORE11470,532567
#define TK_BY TK_BY11471,532613
#define TK_CASCADE TK_CASCADE11472,532659
#define TK_CAST TK_CAST11473,532705
#define TK_COLUMNKW TK_COLUMNKW11474,532751
#define TK_CONFLICT TK_CONFLICT11475,532797
#define TK_DATABASE TK_DATABASE11476,532843
#define TK_DESC TK_DESC11477,532889
#define TK_DETACH TK_DETACH11478,532935
#define TK_EACH TK_EACH11479,532981
#define TK_FAIL TK_FAIL11480,533027
#define TK_FOR TK_FOR11481,533073
#define TK_IGNORE TK_IGNORE11482,533119
#define TK_INITIALLY TK_INITIALLY11483,533165
#define TK_INSTEAD TK_INSTEAD11484,533211
#define TK_NO TK_NO11485,533257
#define TK_KEY TK_KEY11486,533303
#define TK_OF TK_OF11487,533349
#define TK_OFFSET TK_OFFSET11488,533395
#define TK_PRAGMA TK_PRAGMA11489,533441
#define TK_RAISE TK_RAISE11490,533487
#define TK_RECURSIVE TK_RECURSIVE11491,533533
#define TK_REPLACE TK_REPLACE11492,533579
#define TK_RESTRICT TK_RESTRICT11493,533625
#define TK_ROW TK_ROW11494,533671
#define TK_TRIGGER TK_TRIGGER11495,533717
#define TK_VACUUM TK_VACUUM11496,533763
#define TK_VIEW TK_VIEW11497,533809
#define TK_VIRTUAL TK_VIRTUAL11498,533855
#define TK_WITH TK_WITH11499,533901
#define TK_REINDEX TK_REINDEX11500,533947
#define TK_RENAME TK_RENAME11501,533993
#define TK_CTIME_KW TK_CTIME_KW11502,534039
#define TK_ANY TK_ANY11503,534085
#define TK_STRING TK_STRING11504,534131
#define TK_JOIN_KW TK_JOIN_KW11505,534177
#define TK_CONSTRAINT TK_CONSTRAINT11506,534223
#define TK_DEFAULT TK_DEFAULT11507,534269
#define TK_NULL TK_NULL11508,534315
#define TK_PRIMARY TK_PRIMARY11509,534361
#define TK_UNIQUE TK_UNIQUE11510,534407
#define TK_CHECK TK_CHECK11511,534453
#define TK_REFERENCES TK_REFERENCES11512,534499
#define TK_AUTOINCR TK_AUTOINCR11513,534545
#define TK_ON TK_ON11514,534591
#define TK_INSERT TK_INSERT11515,534637
#define TK_DELETE TK_DELETE11516,534683
#define TK_UPDATE TK_UPDATE11517,534729
#define TK_SET TK_SET11518,534775
#define TK_DEFERRABLE TK_DEFERRABLE11519,534821
#define TK_FOREIGN TK_FOREIGN11520,534867
#define TK_DROP TK_DROP11521,534913
#define TK_UNION TK_UNION11522,534959
#define TK_ALL TK_ALL11523,535005
#define TK_EXCEPT TK_EXCEPT11524,535051
#define TK_INTERSECT TK_INTERSECT11525,535097
#define TK_SELECT TK_SELECT11526,535143
#define TK_VALUES TK_VALUES11527,535189
#define TK_DISTINCT TK_DISTINCT11528,535235
#define TK_DOT TK_DOT11529,535281
#define TK_FROM TK_FROM11530,535327
#define TK_JOIN TK_JOIN11531,535373
#define TK_USING TK_USING11532,535419
#define TK_ORDER TK_ORDER11533,535465
#define TK_GROUP TK_GROUP11534,535511
#define TK_HAVING TK_HAVING11535,535557
#define TK_LIMIT TK_LIMIT11536,535603
#define TK_WHERE TK_WHERE11537,535649
#define TK_INTO TK_INTO11538,535695
#define TK_FLOAT TK_FLOAT11539,535741
#define TK_BLOB TK_BLOB11540,535787
#define TK_INTEGER TK_INTEGER11541,535833
#define TK_VARIABLE TK_VARIABLE11542,535879
#define TK_CASE TK_CASE11543,535925
#define TK_WHEN TK_WHEN11544,535971
#define TK_THEN TK_THEN11545,536017
#define TK_ELSE TK_ELSE11546,536063
#define TK_INDEX TK_INDEX11547,536109
#define TK_ALTER TK_ALTER11548,536155
#define TK_ADD TK_ADD11549,536201
#define TK_TO_TEXT TK_TO_TEXT11550,536247
#define TK_TO_BLOB TK_TO_BLOB11551,536293
#define TK_TO_NUMERIC TK_TO_NUMERIC11552,536339
#define TK_TO_INT TK_TO_INT11553,536385
#define TK_TO_REAL TK_TO_REAL11554,536431
#define TK_ISNOT TK_ISNOT11555,536477
#define TK_END_OF_FILE TK_END_OF_FILE11556,536523
#define TK_UNCLOSED_STRING TK_UNCLOSED_STRING11557,536569
#define TK_FUNCTION TK_FUNCTION11558,536615
#define TK_COLUMN TK_COLUMN11559,536661
#define TK_AGG_FUNCTION TK_AGG_FUNCTION11560,536707
#define TK_AGG_COLUMN TK_AGG_COLUMN11561,536753
#define TK_UMINUS TK_UMINUS11562,536799
#define TK_UPLUS TK_UPLUS11563,536845
#define TK_REGISTER TK_REGISTER11564,536891
#define TK_VECTOR TK_VECTOR11565,536937
#define TK_SELECT_COLUMN TK_SELECT_COLUMN11566,536983
#define TK_ASTERISK TK_ASTERISK11567,537029
#define TK_SPAN TK_SPAN11568,537075
#define TK_SPACE TK_SPACE11569,537121
#define TK_ILLEGAL TK_ILLEGAL11570,537167
#define TKFLG_MASK TKFLG_MASK11573,537265
#define TKFLG_DONTFOLD TKFLG_DONTFOLD11577,537388
# define memcpy(memcpy11595,538065
# define double double11604,538369
# define float float11605,538398
# define LONGDOUBLE_TYPE LONGDOUBLE_TYPE11606,538426
#   define SQLITE_BIG_DBL SQLITE_BIG_DBL11608,538488
# define SQLITE_OMIT_DATETIME_FUNCS SQLITE_OMIT_DATETIME_FUNCS11610,538547
# define SQLITE_OMIT_TRACE SQLITE_OMIT_TRACE11611,538585
# undef SQLITE_MIXED_ENDIAN_64BIT_FLOATSQLITE_MIXED_ENDIAN_64BIT_FLOAT11612,538614
# undef SQLITE_HAVE_ISNANSQLITE_HAVE_ISNAN11613,538654
# define SQLITE_BIG_DBL SQLITE_BIG_DBL11616,538710
#define OMIT_TEMPDB OMIT_TEMPDB11625,538983
#define OMIT_TEMPDB OMIT_TEMPDB11627,539011
#define SQLITE_MAX_FILE_FORMAT SQLITE_MAX_FILE_FORMAT11636,539293
# define SQLITE_DEFAULT_FILE_FORMAT SQLITE_DEFAULT_FILE_FORMAT11638,539361
# define SQLITE_DEFAULT_RECURSIVE_TRIGGERS SQLITE_DEFAULT_RECURSIVE_TRIGGERS11646,539563
# define SQLITE_TEMP_STORE SQLITE_TEMP_STORE11654,539748
# define SQLITE_TEMP_STORE_xc SQLITE_TEMP_STORE_xc11655,539777
# undef SQLITE_MAX_WORKER_THREADSSQLITE_MAX_WORKER_THREADS11664,540051
# define SQLITE_MAX_WORKER_THREADS SQLITE_MAX_WORKER_THREADS11665,540085
# define SQLITE_MAX_WORKER_THREADS SQLITE_MAX_WORKER_THREADS11668,540163
# define SQLITE_DEFAULT_WORKER_THREADS SQLITE_DEFAULT_WORKER_THREADS11671,540245
# undef SQLITE_MAX_WORKER_THREADSSQLITE_MAX_WORKER_THREADS11674,540353
# define SQLITE_MAX_WORKER_THREADS SQLITE_MAX_WORKER_THREADS11675,540387
# define SQLITE_DEFAULT_PCACHE_INITSZ SQLITE_DEFAULT_PCACHE_INITSZ11688,540941
#define offsetof(offsetof11696,541094
# define MIN(MIN11703,541251
# define MAX(MAX11706,541306
#define SWAP(SWAP11712,541390
# define SQLITE_EBCDIC SQLITE_EBCDIC11719,541587
# define SQLITE_ASCII SQLITE_ASCII11721,541618
#  define UINT32_TYPE UINT32_TYPE11733,541965
#  define UINT32_TYPE UINT32_TYPE11735,542003
#  define UINT16_TYPE UINT16_TYPE11740,542095
#  define UINT16_TYPE UINT16_TYPE11742,542133
#  define INT16_TYPE INT16_TYPE11747,542229
#  define INT16_TYPE INT16_TYPE11749,542265
#  define UINT8_TYPE UINT8_TYPE11754,542351
#  define UINT8_TYPE UINT8_TYPE11756,542387
#  define INT8_TYPE INT8_TYPE11761,542475
#  define INT8_TYPE INT8_TYPE11763,542509
# define LONGDOUBLE_TYPE LONGDOUBLE_TYPE11767,542580
typedef sqlite_int64 i64;          /* 8-byte signed integer */i6411769,542624
typedef sqlite_uint64 u64;         /* 8-byte unsigned integer */u6411770,542687
typedef UINT32_TYPE u32;           /* 4-byte unsigned integer */u3211771,542752
typedef UINT16_TYPE u16;           /* 2-byte unsigned integer */u1611772,542817
typedef INT16_TYPE i16;            /* 2-byte signed integer */i1611773,542882
typedef UINT8_TYPE u8;             /* 1-byte unsigned integer */u811774,542945
typedef INT8_TYPE i8;              /* 1-byte signed integer */i811775,543010
#define SQLITE_MAX_U32 SQLITE_MAX_U3211783,543346
 typedef u64 tRowcnt;    /* 64-bit only if requested at compile-time */tRowcnt11792,543668
 typedef u32 tRowcnt;    /* 32-bit is the default */tRowcnt11794,543746
typedef INT16_TYPE LogEst;LogEst11820,544800
#   define SQLITE_PTRSIZE SQLITE_PTRSIZE11827,544958
#   define SQLITE_PTRSIZE SQLITE_PTRSIZE11830,545145
#   define SQLITE_PTRSIZE SQLITE_PTRSIZE11832,545180
  typedef uintptr_t uptr;uptr11839,545325
  typedef u32 uptr;uptr11841,545375
  typedef u64 uptr;uptr11843,545401
#define SQLITE_WITHIN(SQLITE_WITHIN11854,545747
#   define SQLITE_BYTEORDER SQLITE_BYTEORDER11871,546455
#   define SQLITE_BYTEORDER SQLITE_BYTEORDER11873,546536
#   define SQLITE_BYTEORDER SQLITE_BYTEORDER11875,546579
# define SQLITE_BIGENDIAN SQLITE_BIGENDIAN11879,546651
# define SQLITE_LITTLEENDIAN SQLITE_LITTLEENDIAN11880,546682
# define SQLITE_UTF16NATIVE SQLITE_UTF16NATIVE11881,546713
# define SQLITE_BIGENDIAN SQLITE_BIGENDIAN11883,546786
# define SQLITE_LITTLEENDIAN SQLITE_LITTLEENDIAN11884,546817
# define SQLITE_UTF16NATIVE SQLITE_UTF16NATIVE11885,546848
  const int sqlite3one = 1;sqlite3one11888,546926
# define SQLITE_BIGENDIAN SQLITE_BIGENDIAN11892,547000
# define SQLITE_LITTLEENDIAN SQLITE_LITTLEENDIAN11893,547057
# define SQLITE_UTF16NATIVE SQLITE_UTF16NATIVE11894,547114
#define LARGEST_INT64 LARGEST_INT6411902,547368
#define SMALLEST_INT64 SMALLEST_INT6411903,547428
#define ROUND8(ROUND811909,547609
#define ROUNDDOWN8(ROUNDDOWN811914,547694
# define EIGHT_BYTE_ALIGNMENT(EIGHT_BYTE_ALIGNMENT11926,548137
# define EIGHT_BYTE_ALIGNMENT(EIGHT_BYTE_ALIGNMENT11928,548211
# undef SQLITE_MAX_MMAP_SIZESQLITE_MAX_MMAP_SIZE11935,548400
# define SQLITE_MAX_MMAP_SIZE SQLITE_MAX_MMAP_SIZE11936,548429
#   define SQLITE_MAX_MMAP_SIZE SQLITE_MAX_MMAP_SIZE11952,548808
#   define SQLITE_MAX_MMAP_SIZE SQLITE_MAX_MMAP_SIZE11954,548876
# define SQLITE_MAX_MMAP_SIZE_xc SQLITE_MAX_MMAP_SIZE_xc11956,548918
# define SQLITE_DEFAULT_MMAP_SIZE SQLITE_DEFAULT_MMAP_SIZE11965,549211
# define SQLITE_DEFAULT_MMAP_SIZE_xc SQLITE_DEFAULT_MMAP_SIZE_xc11966,549247
# undef SQLITE_DEFAULT_MMAP_SIZESQLITE_DEFAULT_MMAP_SIZE11969,549371
# define SQLITE_DEFAULT_MMAP_SIZE SQLITE_DEFAULT_MMAP_SIZE11970,549404
# undef SQLITE_ENABLE_STAT3SQLITE_ENABLE_STAT311979,549687
# define SQLITE_ENABLE_STAT3_OR_STAT4 SQLITE_ENABLE_STAT3_OR_STAT411980,549715
# define SQLITE_ENABLE_STAT3_OR_STAT4 SQLITE_ENABLE_STAT3_OR_STAT411982,549781
# undef SQLITE_ENABLE_STAT3_OR_STAT4SQLITE_ENABLE_STAT3_OR_STAT411984,549856
# define SELECTTRACE_ENABLED SELECTTRACE_ENABLED11992,550102
# define SELECTTRACE_ENABLED SELECTTRACE_ENABLED11994,550139
typedef struct BusyHandler BusyHandler;BusyHandler12006,550573
struct BusyHandler {BusyHandler12007,550613
  int (*xFunc)(void *,int);  /* The busy callback */xFunc12008,550634
  void *pArg;                /* First arg to busy callback */pArg12009,550687
  int nBusy;                 /* Incremented with each busy call */nBusy12010,550749
#define MASTER_NAME MASTER_NAME12018,550984
#define TEMP_MASTER_NAME TEMP_MASTER_NAME12019,551026
#define MASTER_ROOT MASTER_ROOT12024,551127
#define SCHEMA_TABLE(SCHEMA_TABLE12029,551195
#define ArraySize(ArraySize12035,551356
#define IsPowerOfTwo(IsPowerOfTwo12040,551466
#define SQLITE_DYNAMIC SQLITE_DYNAMIC12050,551893
  #define SQLITE_WSD SQLITE_WSD12067,552769
  #define GLOBAL(GLOBAL12068,552796
  #define sqlite3GlobalConfig sqlite3GlobalConfig12069,552866
  #define SQLITE_WSDSQLITE_WSD12073,553044
  #define GLOBAL(GLOBAL12074,553065
  #define sqlite3GlobalConfig sqlite3GlobalConfig12075,553089
#define UNUSED_PARAMETER(UNUSED_PARAMETER12094,554067
#define UNUSED_PARAMETER2(UNUSED_PARAMETER212095,554105
typedef struct AggInfo AggInfo;AggInfo12100,554219
typedef struct AuthContext AuthContext;AuthContext12101,554251
typedef struct AutoincInfo AutoincInfo;AutoincInfo12102,554291
typedef struct Bitvec Bitvec;Bitvec12103,554331
typedef struct CollSeq CollSeq;CollSeq12104,554361
typedef struct Column Column;Column12105,554393
typedef struct Db Db;Db12106,554423
typedef struct Schema Schema;Schema12107,554445
typedef struct Expr Expr;Expr12108,554475
typedef struct ExprList ExprList;ExprList12109,554501
typedef struct ExprSpan ExprSpan;ExprSpan12110,554535
typedef struct FKey FKey;FKey12111,554569
typedef struct FuncDestructor FuncDestructor;FuncDestructor12112,554595
typedef struct FuncDef FuncDef;FuncDef12113,554641
typedef struct FuncDefHash FuncDefHash;FuncDefHash12114,554673
typedef struct IdList IdList;IdList12115,554713
typedef struct Index Index;Index12116,554743
typedef struct IndexSample IndexSample;IndexSample12117,554771
typedef struct KeyClass KeyClass;KeyClass12118,554811
typedef struct KeyInfo KeyInfo;KeyInfo12119,554845
typedef struct Lookaside Lookaside;Lookaside12120,554877
typedef struct LookasideSlot LookasideSlot;LookasideSlot12121,554913
typedef struct Module Module;Module12122,554957
typedef struct NameContext NameContext;NameContext12123,554987
typedef struct Parse Parse;Parse12124,555027
typedef struct PreUpdate PreUpdate;PreUpdate12125,555055
typedef struct PrintfArguments PrintfArguments;PrintfArguments12126,555091
typedef struct RowSet RowSet;RowSet12127,555139
typedef struct Savepoint Savepoint;Savepoint12128,555169
typedef struct Select Select;Select12129,555205
typedef struct SQLiteThread SQLiteThread;SQLiteThread12130,555235
typedef struct SelectDest SelectDest;SelectDest12131,555277
typedef struct SrcList SrcList;SrcList12132,555315
typedef struct StrAccum StrAccum;StrAccum12133,555347
typedef struct Table Table;Table12134,555381
typedef struct TableLock TableLock;TableLock12135,555409
typedef struct Token Token;Token12136,555445
typedef struct TreeView TreeView;TreeView12137,555473
typedef struct Trigger Trigger;Trigger12138,555507
typedef struct TriggerPrg TriggerPrg;TriggerPrg12139,555539
typedef struct TriggerStep TriggerStep;TriggerStep12140,555577
typedef struct UnpackedRecord UnpackedRecord;UnpackedRecord12141,555617
typedef struct VTable VTable;VTable12142,555663
typedef struct VtabCtx VtabCtx;VtabCtx12143,555693
typedef struct Walker Walker;Walker12144,555725
typedef struct WhereInfo WhereInfo;WhereInfo12145,555755
typedef struct With With;With12146,555791
typedef int VList;VList12154,556152
#define SQLITE_BTREE_HSQLITE_BTREE_H12179,557100
#define SQLITE_N_BTREE_META SQLITE_N_BTREE_META12184,557224
  #define SQLITE_DEFAULT_AUTOVACUUM SQLITE_DEFAULT_AUTOVACUUM12191,557442
#define BTREE_AUTOVACUUM_NONE BTREE_AUTOVACUUM_NONE12194,557488
#define BTREE_AUTOVACUUM_FULL BTREE_AUTOVACUUM_FULL12195,557555
#define BTREE_AUTOVACUUM_INCR BTREE_AUTOVACUUM_INCR12196,557620
typedef struct Btree Btree;Btree12201,557728
typedef struct BtCursor BtCursor;BtCursor12202,557756
typedef struct BtShared BtShared;BtShared12203,557790
typedef struct BtreePayload BtreePayload;BtreePayload12204,557824
#define BTREE_OMIT_JOURNAL BTREE_OMIT_JOURNAL12222,558439
#define BTREE_MEMORY BTREE_MEMORY12223,558516
#define BTREE_SINGLE BTREE_SINGLE12224,558577
#define BTREE_UNORDERED BTREE_UNORDERED12225,558649
#define BTREE_INTKEY BTREE_INTKEY12276,561202
#define BTREE_BLOBKEY BTREE_BLOBKEY12277,561280
#define BTREE_FREE_PAGE_COUNT BTREE_FREE_PAGE_COUNT12306,562558
#define BTREE_SCHEMA_VERSION BTREE_SCHEMA_VERSION12307,562594
#define BTREE_FILE_FORMAT BTREE_FILE_FORMAT12308,562630
#define BTREE_DEFAULT_CACHE_SIZE BTREE_DEFAULT_CACHE_SIZE12309,562666
#define BTREE_LARGEST_ROOT_PAGE BTREE_LARGEST_ROOT_PAGE12310,562702
#define BTREE_TEXT_ENCODING BTREE_TEXT_ENCODING12311,562738
#define BTREE_USER_VERSION BTREE_USER_VERSION12312,562774
#define BTREE_INCR_VACUUM BTREE_INCR_VACUUM12313,562810
#define BTREE_APPLICATION_ID BTREE_APPLICATION_ID12314,562846
#define BTREE_DATA_VERSION BTREE_DATA_VERSION12315,562882
#define BTREE_HINT_RANGE BTREE_HINT_RANGE12344,564299
#define BTREE_BULKLOAD BTREE_BULKLOAD12359,564898
#define BTREE_SEEK_EQ BTREE_SEEK_EQ12360,564974
#define BTREE_WRCSR BTREE_WRCSR12385,566201
#define BTREE_FORDELETE BTREE_FORDELETE12386,566264
#define BTREE_SAVEPOSITION BTREE_SAVEPOSITION12415,567472
#define BTREE_AUXDELETE BTREE_AUXDELETE12416,567549
#define BTREE_APPEND BTREE_APPEND12417,567621
struct BtreePayload {BtreePayload12437,568665
  const void *pKey;       /* Key content for indexes.  NULL for tables */pKey12438,568687
  sqlite3_int64 nKey;     /* Size of pKey for indexes.  PRIMARY KEY for tabs */nKey12439,568761
  const void *pData;      /* Data for tables.  NULL for indexes */pData12440,568841
  struct Mem *aMem;       /* First of nMem value in the unpacked pKey */aMem12441,568908
  u16 nMem;               /* Number of aMem[] value.  Might be zero */nMem12442,568981
  int nData;              /* Size of pData.  0 if none. */nData12443,569052
  int nZero;              /* Extra zero data appended after pData,nData */nZero12444,569111
# define sqlite3BtreeEnter(sqlite3BtreeEnter12503,571549
# define sqlite3BtreeEnterAll(sqlite3BtreeEnterAll12504,571580
# define sqlite3BtreeSharable(sqlite3BtreeSharable12505,571613
# define sqlite3BtreeEnterCursor(sqlite3BtreeEnterCursor12506,571648
# define sqlite3BtreeConnectionCount(sqlite3BtreeConnectionCount12507,571684
# define sqlite3BtreeLeave(sqlite3BtreeLeave12522,572229
# define sqlite3BtreeLeaveCursor(sqlite3BtreeLeaveCursor12523,572259
# define sqlite3BtreeLeaveAll(sqlite3BtreeLeaveAll12524,572295
# define sqlite3BtreeHoldsMutex(sqlite3BtreeHoldsMutex12526,572329
# define sqlite3BtreeHoldsAllMutexes(sqlite3BtreeHoldsAllMutexes12527,572366
# define sqlite3SchemaMutexHeld(sqlite3SchemaMutexHeld12528,572408
#define SQLITE_VDBE_HSQLITE_VDBE_H12556,573461
typedef struct Vdbe Vdbe;Vdbe12564,573672
typedef struct Mem Mem;Mem12570,573806
typedef struct SubProgram SubProgram;SubProgram12571,573830
struct VdbeOp {VdbeOp12578,574045
  u8 opcode;          /* What operation to perform */opcode12579,574061
  signed char p4type; /* One of the P4_xxx constants for p4 */p4type12580,574115
  u16 p5;             /* Fifth parameter is an unsigned 16-bit integer */p512581,574178
  int p1;             /* First operand */p112582,574252
  int p2;             /* Second parameter (often the jump destination) */p212583,574294
  int p3;             /* The third parameter */p312584,574368
  union p4union {     /* fourth parameter */p4union12585,574416
    int i;                 /* Integer value if p4type==P4_INT32 */i12586,574461
    void *p;               /* Generic pointer */p12587,574528
    char *z;               /* Pointer to data for string (char array) types */z12588,574577
    i64 *pI64;             /* Used when p4type is P4_INT64 */pI6412589,574656
    double *pReal;         /* Used when p4type is P4_REAL */pReal12590,574718
    FuncDef *pFunc;        /* Used when p4type is P4_FUNCDEF */pFunc12591,574779
    sqlite3_context *pCtx; /* Used when p4type is P4_FUNCCTX */pCtx12592,574843
    CollSeq *pColl;        /* Used when p4type is P4_COLLSEQ */pColl12593,574907
    Mem *pMem;             /* Used when p4type is P4_MEM */pMem12594,574971
    VTable *pVtab;         /* Used when p4type is P4_VTAB */pVtab12595,575031
    KeyInfo *pKeyInfo;     /* Used when p4type is P4_KEYINFO */pKeyInfo12596,575092
    int *ai;               /* Used when p4type is P4_INTARRAY */ai12597,575156
    SubProgram *pProgram;  /* Used when p4type is P4_SUBPROGRAM */pProgram12598,575221
    Table *pTab;           /* Used when p4type is P4_TABLE */pTab12599,575288
    Expr *pExpr;           /* Used when p4type is P4_EXPR */pExpr12601,575384
    int (*xAdvance)(BtCursor *, int *);xAdvance12603,575452
  } p4;p412604,575492
  char *zComment;          /* Comment to improve readability */zComment12606,575538
  u32 cnt;                 /* Number of times this instruction was executed */cnt12609,575629
  u64 cycles;              /* Total time spent executing this instruction */cycles12610,575708
  int iSrcLine;            /* Source-code line that generated this opcode */iSrcLine12613,575820
typedef struct VdbeOp VdbeOp;VdbeOp12616,575907
struct SubProgram {SubProgram12622,575999
  VdbeOp *aOp;                  /* Array of opcodes for sub-program */aOp12623,576019
  int nOp;                      /* Elements in aOp[] */nOp12624,576090
  int nMem;                     /* Number of memory cells required */nMem12625,576146
  int nCsr;                     /* Number of cursors required */nCsr12626,576216
  void *token;                  /* id that may be used to recursive triggers */token12627,576281
  SubProgram *pNext;            /* Next sub-program already visited */pNext12628,576361
struct VdbeOpList {VdbeOpList12635,576546
  u8 opcode;          /* What operation to perform */opcode12636,576566
  signed char p1;     /* First operand */p112637,576620
  signed char p2;     /* Second parameter (often the jump destination) */p212638,576662
  signed char p3;     /* Third parameter */p312639,576736
typedef struct VdbeOpList VdbeOpList;VdbeOpList12641,576783
#define P4_NOTUSED P4_NOTUSED12646,576863
#define P4_DYNAMIC P4_DYNAMIC12647,576924
#define P4_STATIC P4_STATIC12648,577005
#define P4_COLLSEQ P4_COLLSEQ12649,577064
#define P4_FUNCDEF P4_FUNCDEF12650,577135
#define P4_KEYINFO P4_KEYINFO12651,577206
#define P4_EXPR P4_EXPR12652,577277
#define P4_MEM P4_MEM12653,577341
#define P4_TRANSIENT P4_TRANSIENT12654,577412
#define P4_VTAB P4_VTAB12655,577482
#define P4_REAL P4_REAL12656,577558
#define P4_INT64 P4_INT6412657,577625
#define P4_INT32 P4_INT3212658,577687
#define P4_INTARRAY P4_INTARRAY12659,577749
#define P4_SUBPROGRAM P4_SUBPROGRAM12660,577815
#define P4_ADVANCE P4_ADVANCE12661,577892
#define P4_TABLE P4_TABLE12662,577970
#define P4_FUNCCTX P4_FUNCCTX12663,578039
#define P5_ConstraintNotNull P5_ConstraintNotNull12666,578155
#define P5_ConstraintUnique P5_ConstraintUnique12667,578186
#define P5_ConstraintCheck P5_ConstraintCheck12668,578217
#define P5_ConstraintFK P5_ConstraintFK12669,578248
#define COLNAME_NAME COLNAME_NAME12675,578413
#define COLNAME_DECLTYPE COLNAME_DECLTYPE12676,578440
#define COLNAME_DATABASE COLNAME_DATABASE12677,578467
#define COLNAME_TABLE COLNAME_TABLE12678,578494
#define COLNAME_COLUMN COLNAME_COLUMN12679,578521
# define COLNAME_N COLNAME_N12681,578585
#   define COLNAME_N COLNAME_N12684,578689
#   define COLNAME_N COLNAME_N12686,578755
#define ADDR(ADDR12696,579080
#define OP_Savepoint OP_Savepoint12706,579513
#define OP_AutoCommit OP_AutoCommit12707,579542
#define OP_Transaction OP_Transaction12708,579571
#define OP_SorterNext OP_SorterNext12709,579600
#define OP_PrevIfOpen OP_PrevIfOpen12710,579629
#define OP_NextIfOpen OP_NextIfOpen12711,579658
#define OP_Prev OP_Prev12712,579687
#define OP_Next OP_Next12713,579716
#define OP_Checkpoint OP_Checkpoint12714,579745
#define OP_JournalMode OP_JournalMode12715,579774
#define OP_Vacuum OP_Vacuum12716,579803
#define OP_VFilter OP_VFilter12717,579832
#define OP_VUpdate OP_VUpdate12718,579910
#define OP_Goto OP_Goto12719,579988
#define OP_Gosub OP_Gosub12720,580017
#define OP_InitCoroutine OP_InitCoroutine12721,580046
#define OP_Yield OP_Yield12722,580075
#define OP_MustBeInt OP_MustBeInt12723,580104
#define OP_Jump OP_Jump12724,580133
#define OP_Not OP_Not12725,580162
#define OP_Once OP_Once12726,580240
#define OP_If OP_If12727,580269
#define OP_IfNot OP_IfNot12728,580298
#define OP_SeekLT OP_SeekLT12729,580327
#define OP_SeekLE OP_SeekLE12730,580405
#define OP_SeekGE OP_SeekGE12731,580483
#define OP_SeekGT OP_SeekGT12732,580561
#define OP_Or OP_Or12733,580639
#define OP_And OP_And12734,580722
#define OP_NoConflict OP_NoConflict12735,580806
#define OP_NotFound OP_NotFound12736,580884
#define OP_Found OP_Found12737,580962
#define OP_SeekRowid OP_SeekRowid12738,581040
#define OP_NotExists OP_NotExists12739,581118
#define OP_IsNull OP_IsNull12740,581196
#define OP_NotNull OP_NotNull12741,581283
#define OP_Ne OP_Ne12742,581371
#define OP_Eq OP_Eq12743,581449
#define OP_Gt OP_Gt12744,581527
#define OP_Le OP_Le12745,581605
#define OP_Lt OP_Lt12746,581683
#define OP_Ge OP_Ge12747,581761
#define OP_ElseNotEq OP_ElseNotEq12748,581839
#define OP_BitAnd OP_BitAnd12749,581917
#define OP_BitOr OP_BitOr12750,581999
#define OP_ShiftLeft OP_ShiftLeft12751,582080
#define OP_ShiftRight OP_ShiftRight12752,582163
#define OP_Add OP_Add12753,582246
#define OP_Subtract OP_Subtract12754,582326
#define OP_Multiply OP_Multiply12755,582407
#define OP_Divide OP_Divide12756,582487
#define OP_Remainder OP_Remainder12757,582568
#define OP_Concat OP_Concat12758,582647
#define OP_Last OP_Last12759,582729
#define OP_BitNot OP_BitNot12760,582758
#define OP_SorterSort OP_SorterSort12761,582836
#define OP_Sort OP_Sort12762,582865
#define OP_Rewind OP_Rewind12763,582894
#define OP_IdxLE OP_IdxLE12764,582923
#define OP_IdxGT OP_IdxGT12765,583001
#define OP_IdxLT OP_IdxLT12766,583079
#define OP_IdxGE OP_IdxGE12767,583157
#define OP_RowSetRead OP_RowSetRead12768,583235
#define OP_RowSetTest OP_RowSetTest12769,583313
#define OP_Program OP_Program12770,583391
#define OP_FkIfZero OP_FkIfZero12771,583420
#define OP_IfPos OP_IfPos12772,583498
#define OP_IfNotZero OP_IfNotZero12773,583578
#define OP_DecrJumpZero OP_DecrJumpZero12774,583657
#define OP_IncrVacuum OP_IncrVacuum12775,583735
#define OP_VNext OP_VNext12776,583764
#define OP_Init OP_Init12777,583793
#define OP_Return OP_Return12778,583871
#define OP_EndCoroutine OP_EndCoroutine12779,583900
#define OP_HaltIfNull OP_HaltIfNull12780,583929
#define OP_Halt OP_Halt12781,584007
#define OP_Integer OP_Integer12782,584036
#define OP_Int64 OP_Int6412783,584114
#define OP_String OP_String12784,584192
#define OP_Null OP_Null12785,584270
#define OP_SoftNull OP_SoftNull12786,584348
#define OP_Blob OP_Blob12787,584426
#define OP_Variable OP_Variable12788,584504
#define OP_Move OP_Move12789,584582
#define OP_Copy OP_Copy12790,584660
#define OP_SCopy OP_SCopy12791,584738
#define OP_IntCopy OP_IntCopy12792,584816
#define OP_ResultRow OP_ResultRow12793,584894
#define OP_CollSeq OP_CollSeq12794,584972
#define OP_Function0 OP_Function012795,585001
#define OP_Function OP_Function12796,585079
#define OP_AddImm OP_AddImm12797,585157
#define OP_RealAffinity OP_RealAffinity12798,585235
#define OP_Cast OP_Cast12799,585264
#define OP_Permutation OP_Permutation12800,585342
#define OP_Compare OP_Compare12801,585371
#define OP_Column OP_Column12802,585449
#define OP_String8 OP_String812803,585527
#define OP_Affinity OP_Affinity12804,585605
#define OP_MakeRecord OP_MakeRecord12805,585683
#define OP_Count OP_Count12806,585761
#define OP_ReadCookie OP_ReadCookie12807,585839
#define OP_SetCookie OP_SetCookie12808,585868
#define OP_ReopenIdx OP_ReopenIdx12809,585897
#define OP_OpenRead OP_OpenRead12810,585975
#define OP_OpenWrite OP_OpenWrite12811,586053
#define OP_OpenAutoindex OP_OpenAutoindex12812,586131
#define OP_OpenEphemeral OP_OpenEphemeral12813,586209
#define OP_SorterOpen OP_SorterOpen12814,586287
#define OP_SequenceTest OP_SequenceTest12815,586316
#define OP_OpenPseudo OP_OpenPseudo12816,586394
#define OP_Close OP_Close12817,586472
#define OP_ColumnsUsed OP_ColumnsUsed12818,586501
#define OP_Sequence OP_Sequence12819,586530
#define OP_NewRowid OP_NewRowid12820,586608
#define OP_Insert OP_Insert12821,586686
#define OP_InsertInt OP_InsertInt12822,586764
#define OP_Delete OP_Delete12823,586842
#define OP_ResetCount OP_ResetCount12824,586871
#define OP_SorterCompare OP_SorterCompare12825,586900
#define OP_SorterData OP_SorterData12826,586980
#define OP_RowData OP_RowData12827,587058
#define OP_Rowid OP_Rowid12828,587136
#define OP_NullRow OP_NullRow12829,587214
#define OP_SorterInsert OP_SorterInsert12830,587243
#define OP_IdxInsert OP_IdxInsert12831,587321
#define OP_IdxDelete OP_IdxDelete12832,587399
#define OP_Seek OP_Seek12833,587477
#define OP_IdxRowid OP_IdxRowid12834,587555
#define OP_Destroy OP_Destroy12835,587633
#define OP_Clear OP_Clear12836,587662
#define OP_ResetSorter OP_ResetSorter12837,587691
#define OP_Real OP_Real12838,587720
#define OP_CreateIndex OP_CreateIndex12839,587798
#define OP_CreateTable OP_CreateTable12840,587876
#define OP_ParseSchema OP_ParseSchema12841,587954
#define OP_LoadAnalysis OP_LoadAnalysis12842,587983
#define OP_DropTable OP_DropTable12843,588012
#define OP_DropIndex OP_DropIndex12844,588041
#define OP_DropTrigger OP_DropTrigger12845,588070
#define OP_IntegrityCk OP_IntegrityCk12846,588099
#define OP_RowSetAdd OP_RowSetAdd12847,588128
#define OP_Param OP_Param12848,588206
#define OP_FkCounter OP_FkCounter12849,588235
#define OP_MemMax OP_MemMax12850,588313
#define OP_OffsetLimit OP_OffsetLimit12851,588391
#define OP_AggStep0 OP_AggStep012852,588493
#define OP_AggStep OP_AggStep12853,588571
#define OP_AggFinal OP_AggFinal12854,588649
#define OP_Expire OP_Expire12855,588727
#define OP_TableLock OP_TableLock12856,588756
#define OP_VBegin OP_VBegin12857,588834
#define OP_VCreate OP_VCreate12858,588863
#define OP_VDestroy OP_VDestroy12859,588892
#define OP_VOpen OP_VOpen12860,588921
#define OP_VColumn OP_VColumn12861,588950
#define OP_VRename OP_VRename12862,589028
#define OP_Pagecount OP_Pagecount12863,589057
#define OP_MaxPgcnt OP_MaxPgcnt12864,589086
#define OP_CursorHint OP_CursorHint12865,589115
#define OP_Noop OP_Noop12866,589144
#define OP_Explain OP_Explain12867,589173
#define OPFLG_JUMP OPFLG_JUMP12873,589373
#define OPFLG_IN1 OPFLG_IN112874,589438
#define OPFLG_IN2 OPFLG_IN212875,589498
#define OPFLG_IN3 OPFLG_IN312876,589558
#define OPFLG_OUT2 OPFLG_OUT212877,589618
#define OPFLG_OUT3 OPFLG_OUT312878,589679
#define OPFLG_INITIALIZER OPFLG_INITIALIZER12879,589740
#define SQLITE_MX_JUMP_OPCODE SQLITE_MX_JUMP_OPCODE12908,591278
# define sqlite3VdbeVerifyNoMallocRequired(sqlite3VdbeVerifyNoMallocRequired12933,592578
# define sqlite3VdbeVerifyNoResultRow(sqlite3VdbeVerifyNoResultRow12934,592626
typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);RecordCompare12985,595424
# define VdbeComment(VdbeComment13001,596023
# define VdbeNoopComment(VdbeNoopComment13003,596140
#   define VdbeModuleComment(VdbeModuleComment13005,596232
#   define VdbeModuleComment(VdbeModuleComment13007,596297
# define VdbeComment(VdbeComment13010,596343
# define VdbeNoopComment(VdbeNoopComment13011,596367
# define VdbeModuleComment(VdbeModuleComment13012,596395
# define VdbeCoverage(VdbeCoverage13039,597605
# define VdbeCoverageIf(VdbeCoverageIf13040,597667
# define VdbeCoverageAlwaysTaken(VdbeCoverageAlwaysTaken13041,597738
# define VdbeCoverageNeverTaken(VdbeCoverageNeverTaken13042,597805
# define VDBE_OFFSET_LINENO(VDBE_OFFSET_LINENO13043,597871
# define VdbeCoverage(VdbeCoverage13045,597921
# define VdbeCoverageIf(VdbeCoverageIf13046,597946
# define VdbeCoverageAlwaysTaken(VdbeCoverageAlwaysTaken13047,597975
# define VdbeCoverageNeverTaken(VdbeCoverageNeverTaken13048,598011
# define VDBE_OFFSET_LINENO(VDBE_OFFSET_LINENO13049,598046
# define sqlite3VdbeScanStatus(sqlite3VdbeScanStatus13055,598216
#define SQLITE_PAGER_HSQLITE_PAGER_H13081,599206
  #define SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT13089,599486
typedef u32 Pgno;Pgno13096,599677
typedef struct Pager Pager;Pager13101,599780
typedef struct PgHdr DbPage;DbPage13106,599841
#define PAGER_MJ_PGNO(PAGER_MJ_PGNO13116,600259
#define PAGER_OMIT_JOURNAL PAGER_OMIT_JOURNAL13123,600479
#define PAGER_MEMORY PAGER_MEMORY13124,600553
#define PAGER_LOCKINGMODE_QUERY PAGER_LOCKINGMODE_QUERY13129,600693
#define PAGER_LOCKINGMODE_NORMAL PAGER_LOCKINGMODE_NORMAL13130,600733
#define PAGER_LOCKINGMODE_EXCLUSIVE PAGER_LOCKINGMODE_EXCLUSIVE13131,600773
#define PAGER_JOURNALMODE_QUERY PAGER_JOURNALMODE_QUERY13140,601075
#define PAGER_JOURNALMODE_DELETE PAGER_JOURNALMODE_DELETE13141,601154
#define PAGER_JOURNALMODE_PERSIST PAGER_JOURNALMODE_PERSIST13142,601234
#define PAGER_JOURNALMODE_OFF PAGER_JOURNALMODE_OFF13143,601315
#define PAGER_JOURNALMODE_TRUNCATE PAGER_JOURNALMODE_TRUNCATE13144,601381
#define PAGER_JOURNALMODE_MEMORY PAGER_JOURNALMODE_MEMORY13145,601458
#define PAGER_JOURNALMODE_WAL PAGER_JOURNALMODE_WAL13146,601529
#define PAGER_GET_NOCONTENT PAGER_GET_NOCONTENT13151,601668
#define PAGER_GET_READONLY PAGER_GET_READONLY13152,601739
#define PAGER_SYNCHRONOUS_OFF PAGER_SYNCHRONOUS_OFF13162,602050
#define PAGER_SYNCHRONOUS_NORMAL PAGER_SYNCHRONOUS_NORMAL13163,602121
#define PAGER_SYNCHRONOUS_FULL PAGER_SYNCHRONOUS_FULL13164,602195
#define PAGER_SYNCHRONOUS_EXTRA PAGER_SYNCHRONOUS_EXTRA13165,602267
#define PAGER_SYNCHRONOUS_MASK PAGER_SYNCHRONOUS_MASK13166,602340
#define PAGER_FULLFSYNC PAGER_FULLFSYNC13167,602415
#define PAGER_CKPT_FULLFSYNC PAGER_CKPT_FULLFSYNC13168,602483
#define PAGER_CACHESPILL PAGER_CACHESPILL13169,602562
#define PAGER_FLAGS_MASK PAGER_FLAGS_MASK13170,602632
# define sqlite3PagerUseWal(sqlite3PagerUseWal13253,606476
# define disable_simulated_io_errors(disable_simulated_io_errors13298,608181
# define enable_simulated_io_errors(enable_simulated_io_errors13299,608220
typedef struct PgHdr PgHdr;PgHdr13325,609095
typedef struct PCache PCache;PCache13326,609123
struct PgHdr {PgHdr13332,609247
  sqlite3_pcache_page *pPage;    /* Pcache object page handle */pPage13333,609262
  void *pData;                   /* Page data */pData13334,609327
  void *pExtra;                  /* Extra content */pExtra13335,609376
  PgHdr *pDirty;                 /* Transient list of dirty sorted by pgno */pDirty13336,609429
  Pager *pPager;                 /* The pager this page is part of */pPager13337,609507
  Pgno pgno;                     /* Page number for this page */pgno13338,609577
  u32 pageHash;                  /* Hash of page content */pageHash13340,609668
  u16 flags;                     /* PGHDR flags defined below */flags13342,609735
  i16 nRef;                      /* Number of users of this page */nRef13348,610003
  PCache *pCache;                /* Cache that owns this page */pCache13349,610071
  PgHdr *pDirtyNext;             /* Next element in list of dirty pages */pDirtyNext13351,610137
  PgHdr *pDirtyPrev;             /* Previous element in list of dirty pages */pDirtyPrev13352,610212
#define PGHDR_CLEAN PGHDR_CLEAN13356,610328
#define PGHDR_DIRTY PGHDR_DIRTY13357,610406
#define PGHDR_WRITEABLE PGHDR_WRITEABLE13358,610483
#define PGHDR_NEED_SYNC PGHDR_NEED_SYNC13359,610556
#define PGHDR_DONT_WRITE PGHDR_DONT_WRITE13361,610707
#define PGHDR_MMAP PGHDR_MMAP13362,610779
#define PGHDR_WAL_APPEND PGHDR_WAL_APPEND13364,610851
#define _SQLITE_OS_H__SQLITE_OS_H_13517,616815
#define SQLITE_OS_SETUP_HSQLITE_OS_SETUP_H13541,617629
#    undef SQLITE_OS_UNIXSQLITE_OS_UNIX13553,618007
#    define SQLITE_OS_UNIX SQLITE_OS_UNIX13554,618033
#    undef SQLITE_OS_WINSQLITE_OS_WIN13555,618062
#    define SQLITE_OS_WIN SQLITE_OS_WIN13556,618087
#    undef SQLITE_OS_OTHERSQLITE_OS_OTHER13558,618123
#  define SQLITE_OS_OTHER SQLITE_OS_OTHER13562,618224
#      define SQLITE_OS_WIN SQLITE_OS_WIN13566,618400
#      define SQLITE_OS_UNIX SQLITE_OS_UNIX13567,618430
#      define SQLITE_OS_WIN SQLITE_OS_WIN13569,618471
#      define SQLITE_OS_UNIX SQLITE_OS_UNIX13570,618501
#    define SQLITE_OS_UNIX SQLITE_OS_UNIX13573,618551
#    define SQLITE_OS_WIN SQLITE_OS_WIN13577,618619
# define SET_FULLSYNC(SET_FULLSYNC13590,618956
# define SQLITE_DEFAULT_SECTOR_SIZE SQLITE_DEFAULT_SECTOR_SIZE13597,619069
# define SQLITE_TEMP_FILE_PREFIX SQLITE_TEMP_FILE_PREFIX13622,620374
#define NO_LOCK NO_LOCK13642,621302
#define SHARED_LOCK SHARED_LOCK13643,621328
#define RESERVED_LOCK RESERVED_LOCK13644,621354
#define PENDING_LOCK PENDING_LOCK13645,621380
#define EXCLUSIVE_LOCK EXCLUSIVE_LOCK13646,621406
# define PENDING_BYTE PENDING_BYTE13704,624499
# define PENDING_BYTE PENDING_BYTE13706,624544
#define RESERVED_BYTE RESERVED_BYTE13708,624597
#define SHARED_FIRST SHARED_FIRST13709,624640
#define SHARED_SIZE SHARED_SIZE13710,624683
#define SQLITE_FCNTL_DB_UNCHANGED SQLITE_FCNTL_DB_UNCHANGED13731,625595
# define SQLITE_MUTEX_OMITSQLITE_MUTEX_OMIT13813,629286
#    define SQLITE_MUTEX_PTHREADSSQLITE_MUTEX_PTHREADS13817,629394
#    define SQLITE_MUTEX_W32SQLITE_MUTEX_W3213819,629450
#    define SQLITE_MUTEX_NOOPSQLITE_MUTEX_NOOP13821,629487
#define sqlite3_mutex_alloc(sqlite3_mutex_alloc13829,629635
#define sqlite3_mutex_free(sqlite3_mutex_free13830,629689
#define sqlite3_mutex_enter(sqlite3_mutex_enter13831,629719
#define sqlite3_mutex_try(sqlite3_mutex_try13832,629754
#define sqlite3_mutex_leave(sqlite3_mutex_leave13833,629798
#define sqlite3_mutex_held(sqlite3_mutex_held13834,629833
#define sqlite3_mutex_notheld(sqlite3_mutex_notheld13835,629881
#define sqlite3MutexAlloc(sqlite3MutexAlloc13836,629929
#define sqlite3MutexInit(sqlite3MutexInit13837,629983
#define sqlite3MutexEnd(sqlite3MutexEnd13838,630027
#define MUTEX_LOGIC(MUTEX_LOGIC13839,630053
#define MUTEX_LOGIC(MUTEX_LOGIC13841,630082
# define SQLITE_DEFAULT_SYNCHRONOUS SQLITE_DEFAULT_SYNCHRONOUS13852,630559
# define SQLITE_DEFAULT_SYNCHRONOUS SQLITE_DEFAULT_SYNCHRONOUS13872,631257
# define SQLITE_DEFAULT_WAL_SYNCHRONOUS SQLITE_DEFAULT_WAL_SYNCHRONOUS13875,631366
struct Db {Db13885,631760
  char *zDbSName;      /* Name of this database. (schema name, not filename) */zDbSName13886,631772
  Btree *pBt;          /* The B*Tree structure for this database file */pBt13887,631852
  u8 safety_level;     /* How aggressive at syncing data to disk */safety_level13888,631925
  u8 bSyncSet;         /* True if "PRAGMA synchronous=N" has been run */bSyncSet13889,631993
  Schema *pSchema;     /* Pointer to database schema (possibly shared) */pSchema13890,632066
struct Schema {Schema13910,632952
  int schema_cookie;   /* Database schema version number for this file */schema_cookie13911,632968
  int iGeneration;     /* Generation counter.  Incremented with each change */iGeneration13912,633042
  Hash tblHash;        /* All tables indexed by name */tblHash13913,633121
  Hash idxHash;        /* All (named) indices indexed by name */idxHash13914,633177
  Hash trigHash;       /* All triggers indexed by name */trigHash13915,633242
  Hash fkeyHash;       /* All foreign keys by referenced table name */fkeyHash13916,633300
  Table *pSeqTab;      /* The sqlite_sequence table used by AUTOINCREMENT */pSeqTab13917,633371
  u8 file_format;      /* Schema format version for this file */file_format13918,633448
  u8 enc;              /* Text encoding used by this database */enc13919,633513
  u16 schemaFlags;     /* Flags associated with this schema */schemaFlags13920,633578
  int cache_size;      /* Number of pages to use in the cache */cache_size13921,633641
#define DbHasProperty(DbHasProperty13928,633807
#define DbHasAnyProperty(DbHasAnyProperty13929,633886
#define DbSetProperty(DbSetProperty13930,633963
#define DbClearProperty(DbClearProperty13931,634034
#define DB_SchemaLoaded DB_SchemaLoaded13943,634470
#define DB_UnresetViews DB_UnresetViews13944,634538
#define DB_Empty DB_Empty13945,634616
#define SQLITE_N_LIMIT SQLITE_N_LIMIT13951,634802
struct Lookaside {Lookaside13973,635892
  u32 bDisable;           /* Only operate the lookaside when zero */bDisable13974,635911
  u16 sz;                 /* Size of each buffer in bytes */sz13975,635980
  u8 bMalloced;           /* True if pStart obtained from sqlite3_malloc() */bMalloced13976,636041
  int nOut;               /* Number of buffers currently checked out */nOut13977,636119
  int mxOut;              /* Highwater mark for nOut */mxOut13978,636191
  int anStat[3];          /* 0: hits.  1: size misses.  2: full misses */anStat13979,636247
  LookasideSlot *pFree;   /* List of available buffers */pFree13980,636321
  void *pStart;           /* First byte of available memory space */pStart13981,636379
  void *pEnd;             /* First byte past end of available space */pEnd13982,636448
struct LookasideSlot {LookasideSlot13984,636522
  LookasideSlot *pNext;    /* Next buffer in the list of free buffers */pNext13985,636545
#define SQLITE_FUNC_HASH_SZ SQLITE_FUNC_HASH_SZ13995,636875
struct FuncDefHash {FuncDefHash13996,636906
  FuncDef *a[SQLITE_FUNC_HASH_SZ];       /* Hash table for functions */a13997,636927
typedef struct sqlite3_userauth sqlite3_userauth;sqlite3_userauth14005,637150
struct sqlite3_userauth {sqlite3_userauth14006,637200
  u8 authLevel;                 /* Current authentication level */authLevel14007,637226
  int nAuthPW;                  /* Size of the zAuthPW in bytes */nAuthPW14008,637293
  char *zAuthPW;                /* Password used to authenticate */zAuthPW14009,637360
  char *zAuthUser;              /* User name used to authenticate */zAuthUser14010,637428
#define UAUTH_Unknown UAUTH_Unknown14014,637553
#define UAUTH_Fail UAUTH_Fail14015,637622
#define UAUTH_User UAUTH_User14016,637687
#define UAUTH_Admin UAUTH_Admin14017,637756
  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,sqlite3_xauth14031,638270
  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,sqlite3_xauth14034,638412
#define SQLITE_TRACE_LEGACY SQLITE_TRACE_LEGACY14042,638683
#define SQLITE_TRACE_LEGACY SQLITE_TRACE_LEGACY14044,638723
struct sqlite3 {sqlite314051,638869
  sqlite3_vfs *pVfs;            /* OS Interface */pVfs14052,638886
  struct Vdbe *pVdbe;           /* List of active virtual machines */pVdbe14053,638937
  CollSeq *pDfltColl;           /* The default collating sequence (BINARY) */pDfltColl14054,639007
  sqlite3_mutex *mutex;         /* Connection mutex */mutex14055,639085
  Db *aDb;                      /* All backends */aDb14056,639140
  int nDb;                      /* Number of backends currently in use */nDb14057,639191
  int flags;                    /* Miscellaneous flags. See below */flags14058,639265
  i64 lastRowid;                /* ROWID of most recent insert (see above) */lastRowid14059,639334
  i64 szMmap;                   /* Default mmap_size setting */szMmap14060,639412
  unsigned int openFlags;       /* Flags passed to sqlite3_vfs.xOpen() */openFlags14061,639476
  int errCode;                  /* Most recent error code (SQLITE_*) */errCode14062,639550
  int errMask;                  /* & result codes with this before returning */errMask14063,639622
  int iSysErrno;                /* Errno value from last system error */iSysErrno14064,639702
  u16 dbOptFlags;               /* Flags to enable/disable optimizations */dbOptFlags14065,639775
  u8 enc;                       /* Text encoding */enc14066,639851
  u8 autoCommit;                /* The auto-commit flag. */autoCommit14067,639903
  u8 temp_store;                /* 1: file 2: memory 0: default */temp_store14068,639963
  u8 mallocFailed;              /* True if we have seen a malloc failure */mallocFailed14069,640030
  u8 bBenignMalloc;             /* Do not require OOMs if true */bBenignMalloc14070,640106
  u8 dfltLockMode;              /* Default locking-mode for attached dbs */dfltLockMode14071,640172
  signed char nextAutovac;      /* Autovac setting after VACUUM if >=0 */nextAutovac14072,640248
  u8 suppressErr;               /* Do not issue error messages if true */suppressErr14073,640322
  u8 vtabOnConflict;            /* Value to return for s3_vtab_on_conflict() */vtabOnConflict14074,640396
  u8 isTransactionSavepoint;    /* True if the outermost savepoint is a TS */isTransactionSavepoint14075,640476
  u8 mTrace;                    /* zero or more SQLITE_TRACE flags */mTrace14076,640554
  u8 skipBtreeMutex;            /* True if no shared-cache backends */skipBtreeMutex14077,640624
  int nextPagesize;             /* Pagesize after VACUUM if >0 */nextPagesize14078,640695
  u32 magic;                    /* Magic number for detect library misuse */magic14079,640761
  int nChange;                  /* Value returned by sqlite3_changes() */nChange14080,640838
  int nTotalChange;             /* Value returned by sqlite3_total_changes() */nTotalChange14081,640912
  int aLimit[SQLITE_N_LIMIT];   /* Limits */aLimit14082,640992
  int nMaxSorterMmap;           /* Maximum size of regions mapped by sorter */nMaxSorterMmap14083,641037
  struct sqlite3InitInfo {      /* Information used during initialization */sqlite3InitInfo14084,641116
    int newTnum;                /* Rootpage of table being initialized */newTnum14085,641193
    u8 iDb;                     /* Which db file is being initialized */iDb14086,641267
    u8 busy;                    /* TRUE if currently initializing */busy14087,641340
    u8 orphanTrigger;           /* Last statement is orphaned TEMP trigger */orphanTrigger14088,641409
    u8 imposterTable;           /* Building an imposter table */imposterTable14089,641487
  } init;init14090,641552
  int nVdbeActive;              /* Number of VDBEs currently running */nVdbeActive14091,641562
  int nVdbeRead;                /* Number of active VDBEs that read or write */nVdbeRead14092,641634
  int nVdbeWrite;               /* Number of active VDBEs that read and write */nVdbeWrite14093,641714
  int nVdbeExec;                /* Number of nested calls to VdbeExec() */nVdbeExec14094,641795
  int nVDestroy;                /* Number of active OP_VDestroy operations */nVDestroy14095,641870
  int nExtension;               /* Number of loaded extensions */nExtension14096,641948
  void **aExtension;            /* Array of shared library handles */aExtension14097,642014
  int (*xTrace)(u32,void*,void*,void*);     /* Trace function */xTrace14098,642084
  void *pTraceArg;                          /* Argument to the trace function */pTraceArg14099,642149
  void (*xProfile)(void*,const char*,u64);  /* Profiling function */xProfile14100,642230
  void *pProfileArg;                        /* Argument to profile function */pProfileArg14101,642299
  void *pCommitArg;                 /* Argument to xCommitCallback() */pCommitArg14102,642378
  int (*xCommitCallback)(void*);    /* Invoked at every commit. */xCommitCallback14103,642450
  void *pRollbackArg;               /* Argument to xRollbackCallback() */pRollbackArg14104,642517
  void (*xRollbackCallback)(void*); /* Invoked at every commit. */xRollbackCallback14105,642591
  void *pUpdateArg;pUpdateArg14106,642658
  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);xUpdateCallback14107,642678
  void *pPreUpdateArg;          /* First argument to xPreUpdateCallback */pPreUpdateArg14109,642790
  void (*xPreUpdateCallback)(   /* Registered using sqlite3_preupdate_hook() */xPreUpdateCallback14110,642865
  PreUpdate *pPreUpdate;        /* Context for active pre-update callback */pPreUpdate14113,643025
  int (*xWalCallback)(void *, sqlite3 *, const char *, int);xWalCallback14116,643168
  void *pWalArg;pWalArg14117,643229
  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);xCollNeeded14119,643253
  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);xCollNeeded1614120,643316
  void *pCollNeededArg;pCollNeededArg14121,643381
  sqlite3_value *pErr;          /* Most recent error message */pErr14122,643405
    volatile int isInterrupted; /* True if sqlite3_interrupt has been called */isInterrupted14124,643479
    double notUsed1;            /* Spacer */notUsed114125,643559
  } u1;u114126,643604
  Lookaside lookaside;          /* Lookaside malloc configuration */lookaside14127,643612
  sqlite3_xauth xAuth;          /* Access authorization function */xAuth14129,643715
  void *pAuthArg;               /* 1st argument to the access auth function */pAuthArg14130,643783
  int (*xProgress)(void *);     /* The progress callback */xProgress14133,643907
  void *pProgressArg;           /* Argument to the progress callback */pProgressArg14134,643967
  unsigned nProgressOps;        /* Number of opcodes for progress callback */nProgressOps14135,644039
  int nVTrans;                  /* Allocated size of aVTrans */nVTrans14138,644157
  Hash aModule;                 /* populated by sqlite3_create_module() */aModule14139,644221
  VtabCtx *pVtabCtx;            /* Context for active vtab connect/create */pVtabCtx14140,644296
  VTable **aVTrans;             /* Virtual tables with open transactions */aVTrans14141,644373
  VTable *pDisconnect;    /* Disconnect these in next sqlite3_prepare() */pDisconnect14142,644449
  Hash aFunc;                   /* Hash table of connection functions */aFunc14144,644531
  Hash aCollSeq;                /* All collating sequences */aCollSeq14145,644604
  BusyHandler busyHandler;      /* Busy callback */busyHandler14146,644666
  Db aDbStatic[2];              /* Static space for the 2 default backends */aDbStatic14147,644718
  Savepoint *pSavepoint;        /* List of active savepoints */pSavepoint14148,644796
  int busyTimeout;              /* Busy handler timeout, in msec */busyTimeout14149,644860
  int nSavepoint;               /* Number of non-transaction savepoints */nSavepoint14150,644928
  int nStatement;               /* Number of nested statement-transactions  */nStatement14151,645003
  i64 nDeferredCons;            /* Net deferred constraints this transaction. */nDeferredCons14152,645082
  i64 nDeferredImmCons;         /* Net deferred immediate constraints */nDeferredImmCons14153,645163
  int *pnBytesFreed;            /* If not NULL, increment this in DbFree() */pnBytesFreed14154,645236
  sqlite3 *pBlockingConnection; /* Connection that caused SQLITE_LOCKED */pBlockingConnection14166,645774
  sqlite3 *pUnlockConnection;           /* Connection to watch for unlock */pUnlockConnection14167,645849
  void *pUnlockArg;                     /* Argument to xUnlockNotify */pUnlockArg14168,645926
  void (*xUnlockNotify)(void **, int);  /* Unlock notify callback */xUnlockNotify14169,645998
  sqlite3 *pNextBlocked;        /* Next in list of all blocked connections */pNextBlocked14170,646067
  sqlite3_userauth auth;        /* User authentication information */auth14173,646186
#define SCHEMA_ENC(SCHEMA_ENC14180,646324
#define ENC(ENC14181,646375
#define SQLITE_VdbeTrace SQLITE_VdbeTrace14191,646659
#define SQLITE_InternChanges SQLITE_InternChanges14192,646736
#define SQLITE_FullColNames SQLITE_FullColNames14193,646815
#define SQLITE_FullFSync SQLITE_FullFSync14194,646896
#define SQLITE_CkptFullFSync SQLITE_CkptFullFSync14195,646974
#define SQLITE_CacheSpill SQLITE_CacheSpill14196,647052
#define SQLITE_ShortColNames SQLITE_ShortColNames14197,647124
#define SQLITE_CountRows SQLITE_CountRows14198,647197
#define SQLITE_NullCallback SQLITE_NullCallback14201,647432
#define SQLITE_SqlTrace SQLITE_SqlTrace14203,647582
#define SQLITE_VdbeListing SQLITE_VdbeListing14204,647661
#define SQLITE_WriteSchema SQLITE_WriteSchema14205,647741
#define SQLITE_VdbeAddopTrace SQLITE_VdbeAddopTrace14206,647816
#define SQLITE_IgnoreChecks SQLITE_IgnoreChecks14207,647895
#define SQLITE_ReadUncommitted SQLITE_ReadUncommitted14208,647976
#define SQLITE_LegacyFileFmt SQLITE_LegacyFileFmt14209,648046
#define SQLITE_RecoveryMode SQLITE_RecoveryMode14210,648127
#define SQLITE_ReverseOrder SQLITE_ReverseOrder14211,648196
#define SQLITE_RecTriggers SQLITE_RecTriggers14212,648270
#define SQLITE_ForeignKeys SQLITE_ForeignKeys14213,648344
#define SQLITE_AutoIndex SQLITE_AutoIndex14214,648425
#define SQLITE_PreferBuiltin SQLITE_PreferBuiltin14215,648498
#define SQLITE_LoadExtension SQLITE_LoadExtension14216,648575
#define SQLITE_LoadExtFunc SQLITE_LoadExtFunc14217,648645
#define SQLITE_EnableTrigger SQLITE_EnableTrigger14218,648726
#define SQLITE_DeferFKs SQLITE_DeferFKs14219,648798
#define SQLITE_QueryOnly SQLITE_QueryOnly14220,648871
#define SQLITE_VdbeEQP SQLITE_VdbeEQP14221,648944
#define SQLITE_Vacuum SQLITE_Vacuum14222,649017
#define SQLITE_CellSizeCk SQLITE_CellSizeCk14223,649087
#define SQLITE_Fts3Tokenizer SQLITE_Fts3Tokenizer14224,649166
#define SQLITE_NoCkptOnClose SQLITE_NoCkptOnClose14225,649239
#define SQLITE_QueryFlattener SQLITE_QueryFlattener14233,649506
#define SQLITE_ColumnCache SQLITE_ColumnCache14234,649568
#define SQLITE_GroupByOrder SQLITE_GroupByOrder14235,649626
#define SQLITE_FactorOutConst SQLITE_FactorOutConst14236,649696
#define SQLITE_DistinctOpt SQLITE_DistinctOpt14238,649830
#define SQLITE_CoverIdxScan SQLITE_CoverIdxScan14239,649898
#define SQLITE_OrderByIdxJoin SQLITE_OrderByIdxJoin14240,649964
#define SQLITE_SubqCoroutine SQLITE_SubqCoroutine14241,650037
#define SQLITE_Transitive SQLITE_Transitive14242,650116
#define SQLITE_OmitNoopJoin SQLITE_OmitNoopJoin14243,650184
#define SQLITE_Stat34 SQLITE_Stat3414244,650257
#define SQLITE_CursorHints SQLITE_CursorHints14245,650326
#define SQLITE_AllOpts SQLITE_AllOpts14246,650397
#define OptimizationDisabled(OptimizationDisabled14251,650543
#define OptimizationEnabled(OptimizationEnabled14252,650614
#define ConstFactorOk(ConstFactorOk14258,650835
#define SQLITE_MAGIC_OPEN SQLITE_MAGIC_OPEN14265,651049
#define SQLITE_MAGIC_CLOSED SQLITE_MAGIC_CLOSED14266,651114
#define SQLITE_MAGIC_SICK SQLITE_MAGIC_SICK14267,651181
#define SQLITE_MAGIC_BUSY SQLITE_MAGIC_BUSY14268,651254
#define SQLITE_MAGIC_ERROR SQLITE_MAGIC_ERROR14269,651328
#define SQLITE_MAGIC_ZOMBIE SQLITE_MAGIC_ZOMBIE14270,651408
struct FuncDef {FuncDef14282,651964
  i8 nArg;             /* Number of arguments.  -1 means unlimited */nArg14283,651981
  u16 funcFlags;       /* Some combination of SQLITE_FUNC_* */funcFlags14284,652051
  void *pUserData;     /* User data parameter */pUserData14285,652114
  FuncDef *pNext;      /* Next function with same name */pNext14286,652163
  void (*xSFunc)(sqlite3_context*,int,sqlite3_value**); /* func or agg-step */xSFunc14287,652221
  void (*xFinalize)(sqlite3_context*);                  /* Agg finalizer */xFinalize14288,652300
  const char *zName;   /* SQL name of the function. */zName14289,652376
    FuncDef *pHash;      /* Next with a different name but the same hash */pHash14291,652441
    FuncDestructor *pDestructor;   /* Reference counted destructor function */pDestructor14292,652517
  } u;u14293,652596
struct FuncDestructor {FuncDestructor14310,653358
  int nRef;nRef14311,653382
  void (*xDestroy)(void *);xDestroy14312,653394
  void *pUserData;pUserData14313,653422
#define SQLITE_FUNC_ENCMASK SQLITE_FUNC_ENCMASK14329,654078
#define SQLITE_FUNC_LIKE SQLITE_FUNC_LIKE14330,654159
#define SQLITE_FUNC_CASE SQLITE_FUNC_CASE14331,654237
#define SQLITE_FUNC_EPHEM SQLITE_FUNC_EPHEM14332,654313
#define SQLITE_FUNC_NEEDCOLL SQLITE_FUNC_NEEDCOLL14333,654384
#define SQLITE_FUNC_LENGTH SQLITE_FUNC_LENGTH14334,654465
#define SQLITE_FUNC_TYPEOF SQLITE_FUNC_TYPEOF14335,654534
#define SQLITE_FUNC_COUNT SQLITE_FUNC_COUNT14336,654603
#define SQLITE_FUNC_COALESCE SQLITE_FUNC_COALESCE14337,654673
#define SQLITE_FUNC_UNLIKELY SQLITE_FUNC_UNLIKELY14338,654747
#define SQLITE_FUNC_CONSTANT SQLITE_FUNC_CONSTANT14339,654818
#define SQLITE_FUNC_MINMAX SQLITE_FUNC_MINMAX14340,654899
#define SQLITE_FUNC_SLOCHNG SQLITE_FUNC_SLOCHNG14341,654977
#define SQLITE_FUNC_AFFINITY SQLITE_FUNC_AFFINITY14343,655135
#define FUNCTION(FUNCTION14379,656850
#define VFUNCTION(VFUNCTION14382,657027
#define DFUNCTION(DFUNCTION14385,657184
#define FUNCTION2(FUNCTION214388,657361
#define STR_FUNCTION(STR_FUNCTION14391,657560
#define LIKEFUNC(LIKEFUNC14394,657717
#define AGGREGATE(AGGREGATE14397,657858
#define AGGREGATE2(AGGREGATE214400,658021
struct Savepoint {Savepoint14410,658450
  char *zName;                        /* Savepoint name (nul-terminated) */zName14411,658469
  i64 nDeferredCons;                  /* Number of deferred fk violations */nDeferredCons14412,658545
  i64 nDeferredImmCons;               /* Number of deferred imm fk. */nDeferredImmCons14413,658622
  Savepoint *pNext;                   /* Parent savepoint (if any) */pNext14414,658693
#define SAVEPOINT_BEGIN SAVEPOINT_BEGIN14421,658905
#define SAVEPOINT_RELEASE SAVEPOINT_RELEASE14422,658936
#define SAVEPOINT_ROLLBACK SAVEPOINT_ROLLBACK14423,658967
struct Module {Module14431,659157
  const sqlite3_module *pModule;       /* Callback pointers */pModule14432,659173
  const char *zName;                   /* Name passed to create_module() */zName14433,659236
  void *pAux;                          /* pAux passed to create_module() */pAux14434,659312
  void (*xDestroy)(void *);            /* Module destructor function */xDestroy14435,659388
  Table *pEpoTab;                      /* Eponymous table for this module */pEpoTab14436,659460
struct Column {Column14443,659641
  char *zName;     /* Name of this column, \000, then the type */zName14444,659657
  Expr *pDflt;     /* Default value of this column */pDflt14445,659723
  char *zColl;     /* Collating sequence.  If NULL, use the default */zColl14446,659777
  u8 notNull;      /* An OE_ code for handling a NOT NULL constraint */notNull14447,659848
  char affinity;   /* One of the SQLITE_AFF_... values */affinity14448,659920
  u8 szEst;        /* Estimated size of value in this column. sizeof(INT)==1 */szEst14449,659978
  u8 colFlags;     /* Boolean properties.  See COLFLAG_ defines below */colFlags14450,660058
#define COLFLAG_PRIMKEY COLFLAG_PRIMKEY14455,660177
#define COLFLAG_HIDDEN COLFLAG_HIDDEN14456,660252
#define COLFLAG_HASTYPE COLFLAG_HASTYPE14457,660328
struct CollSeq {CollSeq14468,660778
  char *zName;          /* Name of the collating sequence, UTF-8 encoded */zName14469,660795
  u8 enc;               /* Text encoding handled by xCmp() */enc14470,660871
  void *pUser;          /* First argument to xCmp() */pUser14471,660933
  int (*xCmp)(void*,int, const void*, int, const void*);xCmp14472,660988
  void (*xDel)(void*);  /* Destructor for pUser */xDel14473,661045
#define SQLITE_SO_ASC SQLITE_SO_ASC14479,661149
#define SQLITE_SO_DESC SQLITE_SO_DESC14480,661210
#define SQLITE_SO_UNDEFINED SQLITE_SO_UNDEFINED14481,661271
#define SQLITE_AFF_BLOB SQLITE_AFF_BLOB14497,661917
#define SQLITE_AFF_TEXT SQLITE_AFF_TEXT14498,661949
#define SQLITE_AFF_NUMERIC SQLITE_AFF_NUMERIC14499,661981
#define SQLITE_AFF_INTEGER SQLITE_AFF_INTEGER14500,662013
#define SQLITE_AFF_REAL SQLITE_AFF_REAL14501,662045
#define sqlite3IsNumericAffinity(sqlite3IsNumericAffinity14503,662078
#define SQLITE_AFF_MASK SQLITE_AFF_MASK14509,662234
#define SQLITE_KEEPNULL SQLITE_KEEPNULL14520,662624
#define SQLITE_JUMPIFNULL SQLITE_JUMPIFNULL14521,662688
#define SQLITE_STOREP2 SQLITE_STOREP214522,662760
#define SQLITE_NULLEQ SQLITE_NULLEQ14523,662841
#define SQLITE_NOTNULL SQLITE_NOTNULL14524,662891
struct VTable {VTable14568,665408
  sqlite3 *db;              /* Database connection associated with this table */db14569,665424
  Module *pMod;             /* Pointer to module implementation */pMod14570,665505
  sqlite3_vtab *pVtab;      /* Pointer to vtab instance */pVtab14571,665572
  int nRef;                 /* Number of pointers to this structure */nRef14572,665631
  u8 bConstraint;           /* True if constraints are supported */bConstraint14573,665702
  int iSavepoint;           /* Depth of the SAVEPOINT stack */iSavepoint14574,665770
  VTable *pNext;            /* Next in linked list (see above) */pNext14575,665833
struct Table {Table14582,666022
  char *zName;         /* Name of the table or view */zName14583,666037
  Column *aCol;        /* Information about each column */aCol14584,666092
  Index *pIndex;       /* List of SQL indexes on this table. */pIndex14585,666151
  Select *pSelect;     /* NULL for tables.  Points to definition if a view. */pSelect14586,666215
  FKey *pFKey;         /* Linked list of all foreign keys in this table */pFKey14587,666294
  char *zColAff;       /* String defining the affinity of each column */zColAff14588,666369
  ExprList *pCheck;    /* All CHECK constraints */pCheck14589,666442
  int tnum;            /* Root BTree page for this table */tnum14591,666568
  u32 nTabRef;         /* Number of pointers to this Table */nTabRef14592,666628
  i16 iPKey;           /* If not negative, use aCol[iPKey] as the rowid */iPKey14593,666690
  i16 nCol;            /* Number of columns in this table */nCol14594,666765
  LogEst nRowLogEst;   /* Estimated rows in table - from sqlite_stat1 table */nRowLogEst14595,666826
  LogEst szTabRow;     /* Estimated size of each table row in bytes */szTabRow14596,666905
  LogEst costMult;     /* Cost multiplier for using this table */costMult14598,667006
  u8 tabFlags;         /* Mask of TF_* values */tabFlags14600,667079
  u8 keyConf;          /* What to do in case of uniqueness conflict on iPKey */keyConf14601,667128
  int addColOffset;    /* Offset in CREATE TABLE stmt to add a new column */addColOffset14603,667239
  int nModuleArg;      /* Number of arguments to the module */nModuleArg14606,667356
  char **azModuleArg;  /* 0: module 1: schema 2: vtab name 3...: args */azModuleArg14607,667419
  VTable *pVTable;     /* List of VTable objects. */pVTable14608,667492
  Trigger *pTrigger;   /* List of triggers stored in pSchema */pTrigger14610,667552
  Schema *pSchema;     /* Schema that contains this table */pSchema14611,667616
  Table *pNextZombie;  /* Next on the Parse.pZombieTab list */pNextZombie14612,667677
#define TF_Readonly TF_Readonly14624,668144
#define TF_Ephemeral TF_Ephemeral14625,668208
#define TF_HasPrimaryKey TF_HasPrimaryKey14626,668268
#define TF_Autoincrement TF_Autoincrement14627,668333
#define TF_Virtual TF_Virtual14628,668411
#define TF_WithoutRowid TF_WithoutRowid14629,668471
#define TF_NoVisibleRowid TF_NoVisibleRowid14630,668546
#define TF_OOOHidden TF_OOOHidden14631,668618
#  define IsVirtual(IsVirtual14640,668904
#  define IsVirtual(IsVirtual14642,668972
#  define IsHiddenColumn(IsHiddenColumn14652,669317
#  define IsOrdinaryHiddenColumn(IsOrdinaryHiddenColumn14653,669391
#  define IsHiddenColumn(IsHiddenColumn14655,669506
#  define IsOrdinaryHiddenColumn(IsOrdinaryHiddenColumn14656,669580
#  define IsHiddenColumn(IsHiddenColumn14658,669624
#  define IsOrdinaryHiddenColumn(IsOrdinaryHiddenColumn14659,669662
#define HasRowid(HasRowid14664,669743
#define VisibleRowid(VisibleRowid14665,669806
struct FKey {FKey14695,670921
  Table *pFrom;     /* Table containing the REFERENCES clause (aka: Child) */pFrom14696,670935
  FKey *pNextFrom;  /* Next FKey with the same in pFrom. Next parent of pFrom */pNextFrom14697,671013
  char *zTo;        /* Name of table that the key points to (aka: Parent) */zTo14698,671094
  FKey *pNextTo;    /* Next with the same zTo. Next child of zTo. */pNextTo14699,671171
  FKey *pPrevTo;    /* Previous with the same zTo */pPrevTo14700,671240
  int nCol;         /* Number of columns in this key */nCol14701,671293
  u8 isDeferred;       /* True if constraint checking is deferred till COMMIT */isDeferred14703,671375
  u8 aAction[2];        /* ON DELETE and ON UPDATE actions, respectively */aAction14704,671456
  Trigger *apTrigger[2];/* Triggers for aAction[] actions */apTrigger14705,671532
  struct sColMap {      /* Mapping of columns in pFrom to columns in zTo */sColMap14706,671593
    int iFrom;            /* Index of column in pFrom */iFrom14707,671669
    char *zCol;           /* Name of column in zTo.  If NULL use PRIMARY KEY */zCol14708,671726
  } aCol[1];            /* One entry for each of nCol columns */aCol14709,671806
#define OE_None OE_None14737,673257
#define OE_Rollback OE_Rollback14738,673319
#define OE_Abort OE_Abort14739,673397
#define OE_Fail OE_Fail14740,673475
#define OE_Ignore OE_Ignore14741,673552
#define OE_Replace OE_Replace14742,673631
#define OE_Restrict OE_Restrict14744,673711
#define OE_SetNull OE_SetNull14745,673790
#define OE_SetDflt OE_SetDflt14746,673854
#define OE_Cascade OE_Cascade14747,673925
#define OE_Default OE_Default14749,673976
struct KeyInfo {KeyInfo14761,674380
  u32 nRef;           /* Number of references to this KeyInfo object */nRef14762,674397
  u8 enc;             /* Text encoding - one of the SQLITE_UTF* values */enc14763,674469
  u16 nField;         /* Number of key columns in the index */nField14764,674543
  u16 nXField;        /* Number of columns beyond the key columns */nXField14765,674606
  sqlite3 *db;        /* The database connection */db14766,674675
  u8 *aSortOrder;     /* Sort order for each column. */aSortOrder14767,674727
  CollSeq *aColl[1];  /* Collating sequence for each term of the key */aColl14768,674783
struct UnpackedRecord {UnpackedRecord14806,676592
  KeyInfo *pKeyInfo;  /* Collation and sort-order information */pKeyInfo14807,676616
  Mem *aMem;          /* Values */aMem14808,676681
  u16 nField;         /* Number of entries in apMem[] */nField14809,676716
  i8 default_rc;      /* Comparison result if keys are equal */default_rc14810,676773
  u8 errCode;         /* Error detected by xRecordCompare (CORRUPT or NOMEM) */errCode14811,676837
  i8 r1;              /* Value to return if (lhs > rhs) */r114812,676917
  i8 r2;              /* Value to return if (rhs < lhs) */r214813,676976
  u8 eqSeen;          /* True if an equality comparison has been seen */eqSeen14814,677035
struct Index {Index14852,678819
  char *zName;             /* Name of this index */zName14853,678834
  i16 *aiColumn;           /* Which columns are used by this index.  1st is 0 */aiColumn14854,678886
  LogEst *aiRowLogEst;     /* From ANALYZE: Est. rows selected by each column */aiRowLogEst14855,678967
  Table *pTable;           /* The SQL table being indexed */pTable14856,679048
  char *zColAff;           /* String defining the affinity of each column */zColAff14857,679109
  Index *pNext;            /* The next index associated with the same table */pNext14858,679186
  Schema *pSchema;         /* Schema containing this index */pSchema14859,679265
  u8 *aSortOrder;          /* for each column: True==DESC, False==ASC */aSortOrder14860,679327
  const char **azColl;     /* Array of collation sequence names for index */azColl14861,679400
  Expr *pPartIdxWhere;     /* WHERE clause for partial indices */pPartIdxWhere14862,679477
  ExprList *aColExpr;      /* Column expressions */aColExpr14863,679543
  int tnum;                /* DB Page containing root of this index */tnum14864,679595
  LogEst szIdxRow;         /* Estimated average row size in bytes */szIdxRow14865,679666
  u16 nKeyCol;             /* Number of columns forming the key */nKeyCol14866,679735
  u16 nColumn;             /* Number of columns stored in the index */nColumn14867,679802
  u8 onError;              /* OE_Abort, OE_Ignore, OE_Replace, or OE_None */onError14868,679873
  unsigned idxType:2;      /* 1==UNIQUE, 2==PRIMARY KEY, 0==CREATE INDEX */idxType14869,679950
  unsigned bUnordered:1;   /* Use this index for == or IN queries only */bUnordered14870,680026
  unsigned uniqNotNull:1;  /* True if UNIQUE and NOT NULL for all columns */uniqNotNull14871,680100
  unsigned isResized:1;    /* True if resizeIndexObject() has been called */isResized14872,680177
  unsigned isCovering:1;   /* True if this is a covering index */isCovering14873,680254
  unsigned noSkipScan:1;   /* Do not try to use skip-scan if true */noSkipScan14874,680320
  int nSample;             /* Number of elements in aSample[] */nSample14876,680425
  int nSampleCol;          /* Size of IndexSample.anEq[] and so on */nSampleCol14877,680490
  tRowcnt *aAvgEq;         /* Average nEq values for keys not in aSample */aAvgEq14878,680560
  IndexSample *aSample;    /* Samples of the left-most key */aSample14879,680636
  tRowcnt *aiRowEst;       /* Non-logarithmic stat1 data for this index */aiRowEst14880,680698
  tRowcnt nRowEst0;        /* Non-logarithmic number of rows in the index */nRowEst014881,680773
#define SQLITE_IDXTYPE_APPDEF SQLITE_IDXTYPE_APPDEF14888,680903
#define SQLITE_IDXTYPE_UNIQUE SQLITE_IDXTYPE_UNIQUE14889,680975
#define SQLITE_IDXTYPE_PRIMARYKEY SQLITE_IDXTYPE_PRIMARYKEY14890,681051
#define IsPrimaryKeyIndex(IsPrimaryKeyIndex14893,681182
#define IsUniqueIndex(IsUniqueIndex14896,681302
#define XN_ROWID XN_ROWID14901,681488
#define XN_EXPR XN_EXPR14902,681552
struct IndexSample {IndexSample14909,681825
  void *p;          /* Pointer to sampled record */p14910,681846
  int n;            /* Size of record in bytes */n14911,681898
  tRowcnt *anEq;    /* Est. number of rows where the key equals this sample */anEq14912,681948
  tRowcnt *anLt;    /* Est. number of rows where key is less than this sample */anLt14913,682027
  tRowcnt *anDLt;   /* Est. number of distinct keys less than this sample */anDLt14914,682108
struct Token {Token14925,682495
  const char *z;     /* Text of the token.  Not NULL-terminated! */z14926,682510
  unsigned int n;    /* Number of characters in this token */n14927,682578
struct AggInfo {AggInfo14943,683240
  u8 directMode;          /* Direct rendering mode means take data directlydirectMode14944,683257
  u8 useSortingIdx;       /* In direct mode, reference the sorting index ratheruseSortingIdx14946,683414
  int sortingIdx;         /* Cursor number of the sorting index */sortingIdx14948,683548
  int sortingIdxPTab;     /* Cursor number of pseudo-table */sortingIdxPTab14949,683615
  int nSortingColumn;     /* Number of columns in the sorting index */nSortingColumn14950,683677
  int mnReg, mxReg;       /* Range of registers allocated for aCol and aFunc */mnReg14951,683748
  int mnReg, mxReg;       /* Range of registers allocated for aCol and aFunc */mxReg14951,683748
  ExprList *pGroupBy;     /* The group by clause */pGroupBy14952,683828
  struct AggInfo_col {    /* For each column used in source tables */AggInfo_col14953,683880
    Table *pTab;             /* Source table */pTab14954,683950
    int iTable;              /* Cursor number of the source table */iTable14955,683998
    int iColumn;             /* Column number within the source table */iColumn14956,684067
    int iSorterColumn;       /* Column number in the sorting index */iSorterColumn14957,684140
    int iMem;                /* Memory location that acts as accumulator */iMem14958,684210
    Expr *pExpr;             /* The original expression */pExpr14959,684286
  } *aCol;aCol14960,684345
  int nColumn;            /* Number of used entries in aCol[] */nColumn14961,684356
  int nAccumulator;       /* Number of columns that show through to the output.nAccumulator14962,684421
  struct AggInfo_func {   /* For each aggregate function */AggInfo_func14965,684632
    Expr *pExpr;             /* Expression encoding the function */pExpr14966,684692
    FuncDef *pFunc;          /* The aggregate function implementation */pFunc14967,684760
    int iMem;                /* Memory location that acts as accumulator */iMem14968,684833
    int iDistinct;           /* Ephemeral table used to enforce DISTINCT */iDistinct14969,684909
  } *aFunc;aFunc14970,684985
  int nFunc;              /* Number of entries in aFunc[] */nFunc14971,684997
typedef i16 ynVar;ynVar14985,685646
typedef int ynVar;ynVar14987,685671
struct Expr {Expr15053,688930
  u8 op;                 /* Operation performed by this node */op15054,688944
  char affinity;         /* The affinity of the column or 0 if not a column */affinity15055,689008
  u32 flags;             /* Various flags.  EP_* See below */flags15056,689087
    char *zToken;          /* Token value. Zero terminated and dequoted */zToken15058,689159
    int iValue;            /* Non-negative integer value if EP_IntValue */iValue15059,689234
  } u;u15060,689309
  Expr *pLeft;           /* Left subnode */pLeft15067,689590
  Expr *pRight;          /* Right subnode */pRight15068,689634
    ExprList *pList;     /* op = IN, EXISTS, SELECT, CASE, FUNCTION, BETWEEN */pList15070,689689
    Select *pSelect;     /* EP_xIsSelect and op = IN, EXISTS, SELECT */pSelect15071,689769
  } x;x15072,689841
  int nHeight;           /* Height of the tree headed by this node */nHeight15080,690148
  int iTable;            /* TK_COLUMN: cursor number of table holding columniTable15082,690225
  ynVar iColumn;         /* TK_COLUMN: column index.  -1 for rowid.iColumn15087,690559
  i16 iAgg;              /* Which entry in pAggInfo->aCol[] or ->aFunc[] */iAgg15090,690776
  i16 iRightJoinTable;   /* If EP_FromJoin, the right table of the join */iRightJoinTable15091,690852
  u8 op2;                /* TK_REGISTER: original value of Expr.opop215092,690927
  AggInfo *pAggInfo;     /* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION */pAggInfo15095,691125
  Table *pTab;           /* Table for TK_COLUMN expressions. */pTab15096,691198
#define EP_FromJoin EP_FromJoin15102,691339
#define EP_Agg EP_Agg15103,691419
#define EP_Resolved EP_Resolved15104,691496
#define EP_Error EP_Error15105,691566
#define EP_Distinct EP_Distinct15106,691641
#define EP_VarSelect EP_VarSelect15107,691718
#define EP_DblQuoted EP_DblQuoted15108,691790
#define EP_InfixFunc EP_InfixFunc15109,691858
#define EP_Collate EP_Collate15110,691938
#define EP_Generic EP_Generic15111,692010
#define EP_IntValue EP_IntValue15112,692086
#define EP_xIsSelect EP_xIsSelect15113,692158
#define EP_Skip EP_Skip15114,692236
#define EP_Reduced EP_Reduced15115,692297
#define EP_TokenOnly EP_TokenOnly15116,692373
#define EP_Static EP_Static15117,692451
#define EP_MemToken EP_MemToken15118,692529
#define EP_NoReduce EP_NoReduce15119,692601
#define EP_Unlikely EP_Unlikely15120,692669
#define EP_ConstFunc EP_ConstFunc15121,692741
#define EP_CanBeNull EP_CanBeNull15122,692821
#define EP_Subquery EP_Subquery15123,692897
#define EP_Alias EP_Alias15124,692968
#define EP_Leaf EP_Leaf15125,693040
#define EP_Propagate EP_Propagate15130,693166
#define ExprHasProperty(ExprHasProperty15136,693338
#define ExprHasAllProperty(ExprHasAllProperty15137,693393
#define ExprSetProperty(ExprSetProperty15138,693450
#define ExprClearProperty(ExprClearProperty15139,693499
# define ExprSetVVAProperty(ExprSetVVAProperty15146,693758
# define ExprSetVVAProperty(ExprSetVVAProperty15148,693814
#define EXPR_FULLSIZE EXPR_FULLSIZE15156,694053
#define EXPR_REDUCEDSIZE EXPR_REDUCEDSIZE15157,694124
#define EXPR_TOKENONLYSIZE EXPR_TOKENONLYSIZE15158,694201
#define EXPRDUP_REDUCE EXPRDUP_REDUCE15164,694396
struct ExprList {ExprList15182,695340
  int nExpr;             /* Number of expressions on the list */nExpr15183,695358
  struct ExprList_item { /* For each expression in the list */ExprList_item15184,695423
    Expr *pExpr;            /* The list of expressions */pExpr15185,695486
    char *zName;            /* Token associated with this expression */zName15186,695544
    char *zSpan;            /* Original text of the expression */zSpan15187,695616
    u8 sortOrder;           /* 1 for DESC or 0 for ASC */sortOrder15188,695682
    unsigned done :1;       /* A flag to indicate when processing is finished */done15189,695740
    unsigned bSpanIsTab :1; /* zSpan holds DB.TABLE.COLUMN */bSpanIsTab15190,695821
    unsigned reusable :1;   /* Constant expression is reusable */reusable15191,695883
        u16 iOrderByCol;      /* For ORDER BY, column number in result set */iOrderByCol15194,695976
        u16 iAlias;           /* Index into Parse.aAlias[] for zName */iAlias15195,696054
      } x;x15196,696126
      int iConstExprReg;      /* Register in which Expr value is cached */iConstExprReg15197,696137
    } u;u15198,696212
  } *a;                  /* Alloc a power of two greater or equal to nExpr */a15199,696221
struct ExprSpan {ExprSpan15207,696464
  Expr *pExpr;          /* The expression parse tree */pExpr15208,696482
  const char *zStart;   /* First character of input text */zStart15209,696538
  const char *zEnd;     /* One character past the end of input text */zEnd15210,696598
struct IdList {IdList15228,697208
  struct IdList_item {IdList_item15229,697224
    char *zName;      /* Name of the identifier */zName15230,697247
    int idx;          /* Index in some Table.aCol[] of a column named zName */idx15231,697298
  } *a;a15232,697377
  int nId;         /* Number of identifiers on the list */nId15233,697385
  typedef SQLITE_BITMASK_TYPE Bitmask;Bitmask15244,697737
  typedef u64 Bitmask;Bitmask15246,697782
#define BMS BMS15252,697884
#define MASKBIT(MASKBIT15257,697953
#define MASKBIT32(MASKBIT3215258,697994
#define ALLBITS ALLBITS15259,698040
struct SrcList {SrcList15280,699080
  int nSrc;        /* Number of tables or subqueries in the FROM clause */nSrc15281,699097
  u32 nAlloc;      /* Number of entries allocated in a[] below */nAlloc15282,699172
  struct SrcList_item {SrcList_item15283,699238
    Schema *pSchema;  /* Schema to which this item is fixed */pSchema15284,699262
    char *zDatabase;  /* Name of database holding this table */zDatabase15285,699325
    char *zName;      /* Name of the table */zName15286,699389
    char *zAlias;     /* The "B" part of a "A AS B" phrase.  zName is the "A" */zAlias15287,699435
    Table *pTab;      /* An SQL table corresponding to zName */pTab15288,699516
    Select *pSelect;  /* A SELECT statement used in place of a table name */pSelect15289,699580
    int addrFillSub;  /* Address of subroutine to manifest a subquery */addrFillSub15290,699657
    int regReturn;    /* Register holding return address of addrFillSub */regReturn15291,699730
    int regResult;    /* Registers holding results of a co-routine */regResult15292,699805
      u8 jointype;      /* Type of join between this table and the previous */jointype15294,699888
      unsigned notIndexed :1;    /* True if there is a NOT INDEXED clause */notIndexed15295,699967
      unsigned isIndexedBy :1;   /* True if there is an INDEXED BY clause */isIndexedBy15296,700044
      unsigned isTabFunc :1;     /* True if table-valued-function syntax */isTabFunc15297,700121
      unsigned isCorrelated :1;  /* True if sub-query is correlated */isCorrelated15298,700197
      unsigned viaCoroutine :1;  /* Implemented as a co-routine */viaCoroutine15299,700268
      unsigned isRecursive :1;   /* True for recursive reference in WITH */isRecursive15300,700335
    } fg;fg15301,700411
    u8 iSelectId;     /* If pSelect!=0, the id of the sub-select in EQP */iSelectId15303,700449
    int iCursor;      /* The VDBE cursor number used to access this table */iCursor15305,700531
    Expr *pOn;        /* The ON clause of a join */pOn15306,700608
    IdList *pUsing;   /* The USING clause of a join */pUsing15307,700660
    Bitmask colUsed;  /* Bit N (1<<N) set if column N of pTab is used */colUsed15308,700715
      char *zIndexedBy;    /* Identifier from "INDEXED BY <zIndex>" clause */zIndexedBy15310,700800
      ExprList *pFuncArg;  /* Arguments to table-valued-function */pFuncArg15311,700878
    } u1;u115312,700946
    Index *pIBIndex;  /* Index structure corresponding to u1.zIndexedBy */pIBIndex15313,700956
  } a[1];             /* One entry for each identifier on the list */a15314,701031
#define JT_INNER JT_INNER15320,701163
#define JT_CROSS JT_CROSS15321,701232
#define JT_NATURAL JT_NATURAL15322,701303
#define JT_LEFT JT_LEFT15323,701366
#define JT_RIGHT JT_RIGHT15324,701419
#define JT_OUTER JT_OUTER15325,701473
#define JT_ERROR JT_ERROR15326,701541
#define WHERE_ORDERBY_NORMAL WHERE_ORDERBY_NORMAL15336,701822
#define WHERE_ORDERBY_MIN WHERE_ORDERBY_MIN15337,701872
#define WHERE_ORDERBY_MAX WHERE_ORDERBY_MAX15338,701951
#define WHERE_ONEPASS_DESIRED WHERE_ONEPASS_DESIRED15339,702030
#define WHERE_ONEPASS_MULTIROW WHERE_ONEPASS_MULTIROW15340,702108
#define WHERE_DUPLICATES_OK WHERE_DUPLICATES_OK15341,702185
#define WHERE_OR_SUBCLAUSE WHERE_OR_SUBCLAUSE15342,702263
#define WHERE_GROUPBY WHERE_GROUPBY15344,702403
#define WHERE_DISTINCTBY WHERE_DISTINCTBY15345,702477
#define WHERE_WANT_DISTINCT WHERE_WANT_DISTINCT15346,702558
#define WHERE_SORTBYGROUP WHERE_SORTBYGROUP15347,702634
#define WHERE_SEEK_TABLE WHERE_SEEK_TABLE15348,702709
#define WHERE_ORDERBY_LIMIT WHERE_ORDERBY_LIMIT15349,702786
#define WHERE_SEEK_UNIQ_TABLE WHERE_SEEK_UNIQ_TABLE15350,702862
#define WHERE_USE_LIMIT WHERE_USE_LIMIT15352,702998
#define WHERE_DISTINCT_NOOP WHERE_DISTINCT_NOOP15357,703196
#define WHERE_DISTINCT_UNIQUE WHERE_DISTINCT_UNIQUE15358,703264
#define WHERE_DISTINCT_ORDERED WHERE_DISTINCT_ORDERED15359,703320
#define WHERE_DISTINCT_UNORDERED WHERE_DISTINCT_UNORDERED15360,703390
struct NameContext {NameContext15383,704565
  Parse *pParse;       /* The parser */pParse15384,704586
  SrcList *pSrcList;   /* One or more tables used to resolve names */pSrcList15385,704626
  ExprList *pEList;    /* Optional list of result-set columns */pEList15386,704696
  AggInfo *pAggInfo;   /* Information about aggregates at this level */pAggInfo15387,704761
  NameContext *pNext;  /* Next outer name context.  NULL for outermost */pNext15388,704833
  int nRef;            /* Number of names resolved by this context */nRef15389,704907
  int nErr;            /* Number of errors encountered while resolving names */nErr15390,704977
  u16 ncFlags;         /* Zero or more NC_* flags defined below */ncFlags15391,705057
#define NC_AllowAgg NC_AllowAgg15402,705332
#define NC_PartIdx NC_PartIdx15403,705404
#define NC_IsCheck NC_IsCheck15404,705479
#define NC_InAggFunc NC_InAggFunc15405,705560
#define NC_HasAgg NC_HasAgg15406,705638
#define NC_IdxExpr NC_IdxExpr15407,705710
#define NC_VarSelect NC_VarSelect15408,705787
#define NC_MinMaxAgg NC_MinMaxAgg15409,705858
struct Select {Select15431,707009
  ExprList *pEList;      /* The fields of the result */pEList15432,707025
  u8 op;                 /* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT */op15433,707081
  LogEst nSelectRow;     /* Estimated number of result rows */nSelectRow15434,707159
  u32 selFlags;          /* Various SF_* values */selFlags15435,707222
  int iLimit, iOffset;   /* Memory registers holding LIMIT & OFFSET counters */iLimit15436,707273
  int iLimit, iOffset;   /* Memory registers holding LIMIT & OFFSET counters */iOffset15436,707273
  char zSelName[12];     /* Symbolic name of this SELECT use for debugging */zSelName15438,707377
  int addrOpenEphm[2];   /* OP_OpenEphem opcodes related to this select */addrOpenEphm15440,707462
  SrcList *pSrc;         /* The FROM clause */pSrc15441,707537
  Expr *pWhere;          /* The WHERE clause */pWhere15442,707584
  ExprList *pGroupBy;    /* The GROUP BY clause */pGroupBy15443,707632
  Expr *pHaving;         /* The HAVING clause */pHaving15444,707683
  ExprList *pOrderBy;    /* The ORDER BY clause */pOrderBy15445,707732
  Select *pPrior;        /* Prior select in a compound select statement */pPrior15446,707783
  Select *pNext;         /* Next select to the left in a compound */pNext15447,707858
  Expr *pLimit;          /* LIMIT expression. NULL means not used. */pLimit15448,707927
  Expr *pOffset;         /* OFFSET expression. NULL means not used. */pOffset15449,707997
  With *pWith;           /* WITH clause attached to this select. Or NULL. */pWith15450,708068
#define SF_Distinct SF_Distinct15462,708428
#define SF_All SF_All15463,708495
#define SF_Resolved SF_Resolved15464,708561
#define SF_Aggregate SF_Aggregate15465,708633
#define SF_HasAgg SF_HasAgg15466,708711
#define SF_UsesEphemeral SF_UsesEphemeral15467,708781
#define SF_Expanded SF_Expanded15468,708852
#define SF_HasTypeInfo SF_HasTypeInfo15469,708930
#define SF_Compound SF_Compound15470,709007
#define SF_Values SF_Values15471,709073
#define SF_MultiValue SF_MultiValue15472,709145
#define SF_NestedFrom SF_NestedFrom15473,709224
#define SF_MinMaxAgg SF_MinMaxAgg15474,709301
#define SF_Recursive SF_Recursive15475,709378
#define SF_FixedLimit SF_FixedLimit15476,709457
#define SF_MaybeConvert SF_MaybeConvert15477,709533
#define SF_Converted SF_Converted15478,709613
#define SF_IncludeHidden SF_IncludeHidden15479,709691
#define SRT_Union SRT_Union15546,713014
#define SRT_Except SRT_Except15547,713081
#define SRT_Exists SRT_Exists15548,713148
#define SRT_Discard SRT_Discard15549,713217
#define SRT_Fifo SRT_Fifo15550,713284
#define SRT_DistFifo SRT_DistFifo15551,713363
#define SRT_Queue SRT_Queue15552,713436
#define SRT_DistQueue SRT_DistQueue15553,713495
#define IgnorableOrderby(IgnorableOrderby15556,713628
#define SRT_Output SRT_Output15558,713685
#define SRT_Mem SRT_Mem15559,713745
#define SRT_Set SRT_Set15560,713809
#define SRT_EphemTab SRT_EphemTab15561,713877
#define SRT_Coroutine SRT_Coroutine15562,713957
#define SRT_Table SRT_Table15563,714023
struct SelectDest {SelectDest15569,714203
  u8 eDest;            /* How to dispose of the results.  On of SRT_* above. */eDest15570,714223
  char *zAffSdst;      /* Affinity used when eDest==SRT_Set */zAffSdst15571,714303
  int iSDParm;         /* A parameter used by the eDest disposal method */iSDParm15572,714366
  int iSdst;           /* Base register where results are written */iSdst15573,714441
  int nSdst;           /* Number of registers allocated */nSdst15574,714510
  ExprList *pOrderBy;  /* Key columns for SRT_Queue and SRT_DistQueue */pOrderBy15575,714569
struct AutoincInfo {AutoincInfo15587,715147
  AutoincInfo *pNext;   /* Next info block in a list of them all */pNext15588,715168
  Table *pTab;          /* Table this info block refers to */pTab15589,715236
  int iDb;              /* Index in sqlite3.aDb[] of database holding pTab */iDb15590,715298
  int regCtr;           /* Memory register holding the rowid counter */regCtr15591,715376
# define SQLITE_N_COLCACHE SQLITE_N_COLCACHE15598,715512
struct TriggerPrg {TriggerPrg15619,716438
  Trigger *pTrigger;      /* Trigger this program was coded from */pTrigger15620,716458
  TriggerPrg *pNext;      /* Next entry in Parse.pTriggerPrg list */pNext15621,716526
  SubProgram *pProgram;   /* Program implementing pTrigger/orconf */pProgram15622,716595
  int orconf;             /* Default ON CONFLICT policy */orconf15623,716664
  u32 aColmask[2];        /* Masks of old.*, new.* columns accessed */aColmask15624,716723
  typedef unsigned char yDbMask[(SQLITE_MAX_ATTACHED+9)/8];yDbMask15631,716898
# define DbMaskTest(DbMaskTest15632,716958
# define DbMaskZero(DbMaskZero15633,717017
# define DbMaskSet(DbMaskSet15634,717069
# define DbMaskAllZero(DbMaskAllZero15635,717122
# define DbMaskNonZero(DbMaskNonZero15636,717174
  typedef unsigned int yDbMask;yDbMask15638,717237
# define DbMaskTest(DbMaskTest15639,717269
# define DbMaskZero(DbMaskZero15640,717328
# define DbMaskSet(DbMaskSet15641,717362
# define DbMaskAllZero(DbMaskAllZero15642,717415
# define DbMaskNonZero(DbMaskNonZero15643,717450
struct Parse {Parse15662,718245
  sqlite3 *db;         /* The main database structure */db15663,718260
  char *zErrMsg;       /* An error message */zErrMsg15664,718317
  Vdbe *pVdbe;         /* An engine for executing database bytecode */pVdbe15665,718363
  int rc;              /* Return code from execution */rc15666,718434
  u8 colNamesSet;      /* TRUE after OP_ColumnName has been issued to pVdbe */colNamesSet15667,718490
  u8 checkSchema;      /* Causes schema cookie check after an error */checkSchema15668,718569
  u8 nested;           /* Number of nested calls to the parser/code generator */nested15669,718640
  u8 nTempReg;         /* Number of temporary registers in aTempReg[] */nTempReg15670,718721
  u8 isMultiWrite;     /* True if statement may modify/insert multiple rows */isMultiWrite15671,718794
  u8 mayAbort;         /* True if statement may throw an ABORT exception */mayAbort15672,718873
  u8 hasCompound;      /* Need to invoke convertCompoundSelectToSubquery() */hasCompound15673,718949
  u8 okConstFactor;    /* OK to factor out constants */okConstFactor15674,719027
  u8 disableLookaside; /* Number of times lookaside has been disabled */disableLookaside15675,719083
  u8 nColCache;        /* Number of entries in aColCache[] */nColCache15676,719156
  int nRangeReg;       /* Size of the temporary register block */nRangeReg15677,719218
  int iRangeReg;       /* First register in temporary register block */iRangeReg15678,719284
  int nErr;            /* Number of errors seen */nErr15679,719356
  int nTab;            /* Number of previously allocated VDBE cursors */nTab15680,719407
  int nMem;            /* Number of memory cells used so far */nMem15681,719480
  int nOpAlloc;        /* Number of slots allocated for Vdbe.aOp[] */nOpAlloc15682,719544
  int szOpAlloc;       /* Bytes of memory space allocated for Vdbe.aOp[] */szOpAlloc15683,719614
  int ckBase;          /* Base register of data during check constraints */ckBase15684,719690
  int iSelfTab;        /* Table of an index whose exprs are being coded */iSelfTab15685,719766
  int iCacheLevel;     /* ColCache valid when aColCache[].iLevel<=iCacheLevel */iCacheLevel15686,719841
  int iCacheCnt;       /* Counter used to generate aColCache[].lru values */iCacheCnt15687,719922
  int nLabel;          /* Number of labels used */nLabel15688,719999
  int *aLabel;         /* Space to hold the labels */aLabel15689,720050
  ExprList *pConstExpr;/* Constant expressions */pConstExpr15690,720104
  Token constraintName;/* Name of the constraint currently being parsed */constraintName15691,720154
  yDbMask writeMask;   /* Start a write transaction on these databases */writeMask15692,720229
  yDbMask cookieMask;  /* Bitmask of schema verified databases */cookieMask15693,720303
  int regRowid;        /* Register holding rowid of CREATE TABLE entry */regRowid15694,720369
  int regRoot;         /* Register holding root page number for new objects */regRoot15695,720443
  int nMaxArg;         /* Max args passed to user function by sub-program */nMaxArg15696,720522
  int nSelect;         /* Number of SELECT statements seen */nSelect15698,720623
  int nSelectIndent;   /* How far to indent SELECTTRACE() output */nSelectIndent15699,720685
  int nTableLock;        /* Number of locks in aTableLock */nTableLock15702,720793
  TableLock *aTableLock; /* Required table locks for shared-cache mode */aTableLock15703,720854
  AutoincInfo *pAinc;  /* Information about AUTOINCREMENT counters */pAinc15705,720935
  Parse *pToplevel;    /* Parse structure for main program (or NULL) */pToplevel15706,721005
  Table *pTriggerTab;  /* Table triggers are being coded for */pTriggerTab15707,721077
  int addrCrTab;       /* Address of OP_CreateTable opcode on CREATE TABLE */addrCrTab15708,721141
  u32 nQueryLoop;      /* Est number of iterations of a query (10*log2(N)) */nQueryLoop15709,721219
  u32 oldmask;         /* Mask of old.* columns referenced */oldmask15710,721297
  u32 newmask;         /* Mask of new.* columns referenced */newmask15711,721359
  u8 eTriggerOp;       /* TK_UPDATE, TK_INSERT or TK_DELETE */eTriggerOp15712,721421
  u8 eOrconf;          /* Default ON CONFLICT policy for trigger steps */eOrconf15713,721484
  u8 disableTriggers;  /* True to disable triggers */disableTriggers15714,721558
  struct yColCache {yColCache15723,722032
    int iTable;           /* Table cursor number */iTable15724,722053
    i16 iColumn;          /* Table column number */iColumn15725,722105
    u8 tempReg;           /* iReg is a temp register that needs to be freed */tempReg15726,722157
    int iLevel;           /* Nesting level */iLevel15727,722236
    int iReg;             /* Reg with value of this column. 0 means none. */iReg15728,722282
    int lru;              /* Least recently used entry has the smallest value */lru15729,722359
  } aColCache[SQLITE_N_COLCACHE];  /* One for each column cache entry */aColCache15730,722440
  int aTempReg[8];        /* Holding area for temporary registers */aTempReg15731,722513
  Token sNameToken;       /* Token with unqualified schema object name */sNameToken15732,722582
  Token sLastToken;       /* The last token parsed */sLastToken15741,723077
  ynVar nVar;               /* Number of '?' variables seen in the SQL so far */nVar15742,723131
  u8 iPkSortOrder;          /* ASC or DESC for INTEGER PRIMARY KEY */iPkSortOrder15743,723212
  u8 explain;               /* True if the EXPLAIN flag is found on the query */explain15744,723282
  u8 declareVtab;           /* True if inside sqlite3_declare_vtab() */declareVtab15746,723396
  int nVtabLock;            /* Number of virtual tables to lock */nVtabLock15747,723468
  int nHeight;              /* Expression tree height of current sub-select */nHeight15749,723542
  int iSelectId;            /* ID of current select for EXPLAIN output */iSelectId15751,723649
  int iNextSelectId;        /* Next available select ID for EXPLAIN output */iNextSelectId15752,723723
  VList *pVList;            /* Mapping between variable names and numbers */pVList15754,723808
  Vdbe *pReprepare;         /* VM being reprepared (sqlite3Reprepare()) */pReprepare15755,723885
  const char *zTail;        /* All SQL text past the last semicolon parsed */zTail15756,723960
  Table *pNewTable;         /* A table being constructed by CREATE TABLE */pNewTable15757,724038
  Trigger *pNewTrigger;     /* Trigger under construct by a CREATE TRIGGER */pNewTrigger15758,724114
  const char *zAuthContext; /* The 6th parameter to db->xAuth callbacks */zAuthContext15759,724192
  Token sArg;               /* Complete text of a module argument */sArg15761,724300
  Table **apVtabLock;       /* Pointer to virtual tables needing locking */apVtabLock15762,724369
  Table *pZombieTab;        /* List of Table objects to delete after code gen */pZombieTab15764,724452
  TriggerPrg *pTriggerPrg;  /* Linked list of coded triggers */pTriggerPrg15765,724533
  With *pWith;              /* Current WITH clause, or NULL */pWith15766,724597
  With *pWithToFree;        /* Free this WITH object at the end of the parse */pWithToFree15767,724660
#define PARSE_HDR_SZ PARSE_HDR_SZ15773,724810
#define PARSE_RECURSE_SZ PARSE_RECURSE_SZ15774,724891
#define PARSE_TAIL_SZ PARSE_TAIL_SZ15775,724967
#define PARSE_TAIL(PARSE_TAIL15776,725047
  #define IN_DECLARE_VTAB IN_DECLARE_VTAB15782,725230
  #define IN_DECLARE_VTAB IN_DECLARE_VTAB15784,725264
struct AuthContext {AuthContext15791,725478
  const char *zAuthContext;   /* Put saved Parse.zAuthContext here */zAuthContext15792,725499
  Parse *pParse;              /* The Parse structure */pParse15793,725569
#define OPFLAG_NCHANGE OPFLAG_NCHANGE15808,726056
#define OPFLAG_EPHEM OPFLAG_EPHEM15810,726217
#define OPFLAG_LASTROWID OPFLAG_LASTROWID15811,726294
#define OPFLAG_ISUPDATE OPFLAG_ISUPDATE15812,726365
#define OPFLAG_APPEND OPFLAG_APPEND15813,726440
#define OPFLAG_USESEEKRESULT OPFLAG_USESEEKRESULT15814,726514
#define OPFLAG_ISNOOP OPFLAG_ISNOOP15815,726594
#define OPFLAG_LENGTHARG OPFLAG_LENGTHARG15816,726673
#define OPFLAG_TYPEOFARG OPFLAG_TYPEOFARG15817,726749
#define OPFLAG_BULKCSR OPFLAG_BULKCSR15818,726825
#define OPFLAG_SEEKEQ OPFLAG_SEEKEQ15819,726903
#define OPFLAG_FORDELETE OPFLAG_FORDELETE15820,726981
#define OPFLAG_P2ISREG OPFLAG_P2ISREG15821,727059
#define OPFLAG_PERMUTE OPFLAG_PERMUTE15822,727139
#define OPFLAG_SAVEPOSITION OPFLAG_SAVEPOSITION15823,727214
#define OPFLAG_AUXDELETE OPFLAG_AUXDELETE15824,727291
struct Trigger {Trigger15841,728076
  char *zName;            /* The name of the trigger                        */zName15842,728093
  char *table;            /* The table or view to which the trigger applies */table15843,728172
  u8 op;                  /* One of TK_DELETE, TK_UPDATE, TK_INSERT         */op15844,728251
  u8 tr_tm;               /* One of TRIGGER_BEFORE, TRIGGER_AFTER */tr_tm15845,728330
  Expr *pWhen;            /* The WHEN clause of the expression (may be NULL) */pWhen15846,728399
  IdList *pColumns;       /* If this is an UPDATE OF <column-list> trigger,pColumns15847,728479
  Schema *pSchema;        /* Schema containing the trigger */pSchema15849,728620
  Schema *pTabSchema;     /* Schema containing the table */pTabSchema15850,728682
  TriggerStep *step_list; /* Link list of trigger program steps             */step_list15851,728742
  Trigger *pNext;         /* Next trigger associated with the table */pNext15852,728821
#define TRIGGER_BEFORE TRIGGER_BEFORE15862,729139
#define TRIGGER_AFTER TRIGGER_AFTER15863,729165
struct TriggerStep {TriggerStep15903,730937
  u8 op;               /* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT */op15904,730958
  u8 orconf;           /* OE_Rollback etc. */orconf15905,731037
  Trigger *pTrig;      /* The trigger that this step is a part of */pTrig15906,731083
  Select *pSelect;     /* SELECT statement or RHS of INSERT INTO SELECT ... */pSelect15907,731152
  char *zTarget;       /* Target table for DELETE, UPDATE, INSERT */zTarget15908,731231
  Expr *pWhere;        /* The WHERE clause for DELETE or UPDATE steps */pWhere15909,731300
  ExprList *pExprList; /* SET clause for UPDATE. */pExprList15910,731373
  IdList *pIdList;     /* Column names for INSERT */pIdList15911,731425
  TriggerStep *pNext;  /* Next in the link-list */pNext15912,731478
  TriggerStep *pLast;  /* Last element in link-list. Valid for 1st elem only */pLast15913,731529
typedef struct DbFixer DbFixer;DbFixer15921,731773
struct DbFixer {DbFixer15922,731805
  Parse *pParse;      /* The parsing context.  Error messages written here */pParse15923,731822
  Schema *pSchema;    /* Fix items to this schema */pSchema15924,731900
  int bVarOnly;       /* Check for variable references only */bVarOnly15925,731953
  const char *zDb;    /* Make sure all objects are contained in this database */zDb15926,732016
  const char *zType;  /* Type of the container - used for error messages */zType15927,732097
  const Token *pName; /* Name of the container - used for error messages */pName15928,732173
struct StrAccum {StrAccum15935,732389
  sqlite3 *db;         /* Optional database for lookaside.  Can be NULL */db15936,732407
  char *zBase;         /* A base allocation.  Not from malloc. */zBase15937,732482
  char *zText;         /* The string collected so far */zText15938,732548
  u32  nChar;          /* Length of the string so far */nChar15939,732605
  u32  nAlloc;         /* Amount of space allocated in zText */nAlloc15940,732662
  u32  mxAlloc;        /* Maximum allowed allocation.  0 for no malloc usage */mxAlloc15941,732726
  u8   accError;       /* STRACCUM_NOMEM or STRACCUM_TOOBIG */accError15942,732806
  u8   printfFlags;    /* SQLITE_PRINTF flags below */printfFlags15943,732869
#define STRACCUM_NOMEM STRACCUM_NOMEM15945,732927
#define STRACCUM_TOOBIG STRACCUM_TOOBIG15946,732954
#define SQLITE_PRINTF_INTERNAL SQLITE_PRINTF_INTERNAL15947,732981
#define SQLITE_PRINTF_SQLFUNC SQLITE_PRINTF_SQLFUNC15948,733061
#define SQLITE_PRINTF_MALLOCED SQLITE_PRINTF_MALLOCED15949,733139
#define isMalloced(isMalloced15951,733216
  sqlite3 *db;        /* The database being initialized */db15959,733448
  char **pzErrMsg;    /* Error message stored here */pzErrMsg15960,733507
  int iDb;            /* 0 for main database.  1 for TEMP, 2.. for ATTACHed */iDb15961,733561
  int rc;             /* Result code stored here */rc15962,733640
} InitData;InitData15963,733692
struct Sqlite3Config {Sqlite3Config15970,733844
  int bMemstat;                     /* True to enable memory status */bMemstat15971,733867
  int bCoreMutex;                   /* True to enable core mutexing */bCoreMutex15972,733938
  int bFullMutex;                   /* True to enable full mutexing */bFullMutex15973,734009
  int bOpenUri;                     /* True to interpret filenames as URIs */bOpenUri15974,734080
  int bUseCis;                      /* Use covering indices for full-scans */bUseCis15975,734158
  int mxStrlen;                     /* Maximum string length */mxStrlen15976,734236
  int neverCorrupt;                 /* Database is always well-formed */neverCorrupt15977,734300
  int szLookaside;                  /* Default lookaside buffer size */szLookaside15978,734373
  int nLookaside;                   /* Default lookaside buffer count */nLookaside15979,734445
  int nStmtSpill;                   /* Stmt-journal spill-to-disk threshold */nStmtSpill15980,734518
  sqlite3_mem_methods m;            /* Low-level memory allocation interface */m15981,734597
  sqlite3_mutex_methods mutex;      /* Low-level mutex interface */mutex15982,734677
  sqlite3_pcache_methods2 pcache2;  /* Low-level page-cache interface */pcache215983,734745
  void *pHeap;                      /* Heap storage space */pHeap15984,734818
  int nHeap;                        /* Size of pHeap[] */nHeap15985,734879
  int mnReq, mxReq;                 /* Min and max heap requests sizes */mnReq15986,734937
  int mnReq, mxReq;                 /* Min and max heap requests sizes */mxReq15986,734937
  sqlite3_int64 szMmap;             /* mmap() space per open file */szMmap15987,735011
  sqlite3_int64 mxMmap;             /* Maximum value for szMmap */mxMmap15988,735080
  void *pScratch;                   /* Scratch memory */pScratch15989,735147
  int szScratch;                    /* Size of each scratch buffer */szScratch15990,735204
  int nScratch;                     /* Number of scratch buffers */nScratch15991,735274
  void *pPage;                      /* Page cache memory */pPage15992,735342
  int szPage;                       /* Size of each page in pPage[] */szPage15993,735402
  int nPage;                        /* Number of pages in pPage[] */nPage15994,735473
  int mxParserStack;                /* maximum depth of the parser stack */mxParserStack15995,735542
  int sharedCacheEnabled;           /* true if shared-cache mode enabled */sharedCacheEnabled15996,735618
  u32 szPma;                        /* Maximum Sorter PMA size */szPma15997,735694
  int isInit;                       /* True after initialization has finished */isInit16000,735875
  int inProgress;                   /* True while initialization in progress */inProgress16001,735956
  int isMutexInit;                  /* True after mutexes are initialized */isMutexInit16002,736036
  int isMallocInit;                 /* True after malloc is initialized */isMallocInit16003,736113
  int isPCacheInit;                 /* True after malloc is initialized */isPCacheInit16004,736188
  int nRefInitMutex;                /* Number of users of pInitMutex */nRefInitMutex16005,736263
  sqlite3_mutex *pInitMutex;        /* Mutex used by sqlite3_initialize() */pInitMutex16006,736335
  void (*xLog)(void*,int,const char*); /* Function for logging */xLog16007,736412
  void *pLogArg;                       /* First argument to xLog() */pLogArg16008,736478
  void(*xSqllog)(void*,sqlite3*,const char*, int);xSqllog16010,736576
  void *pSqllogArg;pSqllogArg16011,736627
  void (*xVdbeBranch)(void*,int iSrcLine,u8 eThis,u8 eMx);  /* Callback */xVdbeBranch16017,736832
  void *pVdbeBranchArg;                                     /* 1st argument */pVdbeBranchArg16018,736907
  int (*xTestCallback)(int);        /* Invoked by sqlite3FaultSim() */xTestCallback16021,737019
  int bLocaltimeFault;              /* True to fail localtime() calls */bLocaltimeFault16023,737097
  int iOnceResetThreshold;          /* When to reset OP_Once counters */iOnceResetThreshold16024,737170
#define CORRUPT_DB CORRUPT_DB16043,737818
struct Walker {Walker16048,737931
  Parse *pParse;                            /* Parser context.  */pParse16049,737947
  int (*xExprCallback)(Walker*, Expr*);     /* Callback for expressions */xExprCallback16050,738014
  int (*xSelectCallback)(Walker*,Select*);  /* Callback for SELECTs */xSelectCallback16051,738089
  void (*xSelectCallback2)(Walker*,Select*);/* Second callback for SELECTs */xSelectCallback216052,738160
  int walkerDepth;                          /* Number of subqueries */walkerDepth16053,738238
  u8 eCode;                                 /* A small processing code */eCode16054,738309
    NameContext *pNC;                          /* Naming context */pNC16056,738457
    int n;                                     /* A counter */n16057,738525
    int iCur;                                  /* A cursor number */iCur16058,738588
    SrcList *pSrcList;                         /* FROM clause */pSrcList16059,738657
    struct SrcCount *pSrcCount;                /* Counting column references */pSrcCount16060,738722
    struct CCurHint *pCCurHint;                /* Used by codeCursorHint() */pCCurHint16061,738802
    int *aiCol;                                /* array of column indexes */aiCol16062,738880
    struct IdxCover *pIdxCover;                /* Check for index coverage */pIdxCover16063,738957
  } u;u16064,739035
#define WRC_Continue WRC_Continue16079,739502
#define WRC_Prune WRC_Prune16080,739564
#define WRC_Abort WRC_Abort16081,739642
struct With {With16087,739838
  int nCte;                       /* Number of CTEs in the WITH clause */nCte16088,739852
  With *pOuter;                   /* Containing WITH clause, or NULL */pOuter16089,739926
  struct Cte {                    /* For each CTE in the WITH clause.... */Cte16090,739998
    char *zName;                    /* Name of this CTE */zName16091,740074
    ExprList *pCols;                /* List of explicit column names, or NULL */pCols16092,740133
    Select *pSelect;                /* The definition of this CTE */pSelect16093,740214
    const char *zCteErr;            /* Error message for circular references */zCteErr16094,740283
  } a[1];a16095,740363
struct TreeView {TreeView16103,740544
  int iLevel;             /* Which level of the tree we are on */iLevel16104,740562
  u8  bLine[100];         /* Draw vertical in column i if bLine[i] is true */bLine16105,740628
#define SQLITE_SKIP_UTF8(SQLITE_SKIP_UTF816113,740876
#define SQLITE_CORRUPT_BKPT SQLITE_CORRUPT_BKPT16129,741558
#define SQLITE_MISUSE_BKPT SQLITE_MISUSE_BKPT16130,741616
#define SQLITE_CANTOPEN_BKPT SQLITE_CANTOPEN_BKPT16131,741672
# define SQLITE_NOMEM_BKPT SQLITE_NOMEM_BKPT16135,741847
# define SQLITE_IOERR_NOMEM_BKPT SQLITE_IOERR_NOMEM_BKPT16136,741902
# define SQLITE_NOMEM_BKPT SQLITE_NOMEM_BKPT16138,741974
# define SQLITE_IOERR_NOMEM_BKPT SQLITE_IOERR_NOMEM_BKPT16139,742014
# undef SQLITE_ENABLE_FTS3SQLITE_ENABLE_FTS316146,742170
# undef SQLITE_ENABLE_FTS4SQLITE_ENABLE_FTS416147,742197
# define SQLITE_ENABLE_FTS3 SQLITE_ENABLE_FTS316156,742511
# define sqlite3Toupper(sqlite3Toupper16174,743049
# define sqlite3Isspace(sqlite3Isspace16175,743127
# define sqlite3Isalnum(sqlite3Isalnum16176,743199
# define sqlite3Isalpha(sqlite3Isalpha16177,743271
# define sqlite3Isdigit(sqlite3Isdigit16178,743343
# define sqlite3Isxdigit(sqlite3Isxdigit16179,743415
# define sqlite3Tolower(sqlite3Tolower16180,743487
# define sqlite3Isquote(sqlite3Isquote16181,743558
# define sqlite3Toupper(sqlite3Toupper16183,743636
# define sqlite3Isspace(sqlite3Isspace16184,743693
# define sqlite3Isalnum(sqlite3Isalnum16185,743750
# define sqlite3Isalpha(sqlite3Isalpha16186,743807
# define sqlite3Isdigit(sqlite3Isdigit16187,743864
# define sqlite3Isxdigit(sqlite3Isxdigit16188,743921
# define sqlite3Tolower(sqlite3Tolower16189,743979
# define sqlite3Isquote(sqlite3Isquote16190,744036
#define sqlite3StrNICmp sqlite3StrNICmp16202,744404
# define sqlite3StackAllocRaw(sqlite3StackAllocRaw16238,745993
# define sqlite3StackAllocZero(sqlite3StackAllocZero16239,746040
# define sqlite3StackFree(sqlite3StackFree16240,746101
# define sqlite3StackAllocRaw(sqlite3StackAllocRaw16242,746138
# define sqlite3StackAllocZero(sqlite3StackAllocZero16243,746199
# define sqlite3StackFree(sqlite3StackFree16244,746261
#undef SQLITE_ENABLE_MEMSYS3SQLITE_ENABLE_MEMSYS316252,746525
# define sqlite3MemoryBarrier(sqlite3MemoryBarrier16269,747109
# define sqlite3IsNaN(sqlite3IsNaN16284,747601
struct PrintfArguments {PrintfArguments16291,747786
  int nArg;                /* Total number of arguments */nArg16292,747811
  int nUsed;               /* Number of arguments used so far */nUsed16293,747870
  sqlite3_value **apArg;   /* The argument values */apArg16294,747935
# define sqlite3ColumnPropertiesFromName(sqlite3ColumnPropertiesFromName16369,751941
# define sqlite3FaultSim(sqlite3FaultSim16383,752664
# define sqlite3ViewGetColumnNames(sqlite3ViewGetColumnNames16410,753746
# define sqlite3AutoincrementBegin(sqlite3AutoincrementBegin16423,754240
# define sqlite3AutoincrementEnd(sqlite3AutoincrementEnd16424,754278
#define ONEPASS_OFF ONEPASS_OFF16467,757051
#define ONEPASS_SINGLE ONEPASS_SINGLE16468,757118
#define ONEPASS_MULTI ONEPASS_MULTI16469,757196
#define SQLITE_ECEL_DUP SQLITE_ECEL_DUP16489,758523
#define SQLITE_ECEL_FACTOR SQLITE_ECEL_FACTOR16490,758589
#define SQLITE_ECEL_REF SQLITE_ECEL_REF16491,758656
#define SQLITE_ECEL_OMITREF SQLITE_ECEL_OMITREF16492,758726
#define LOCATE_VIEW LOCATE_VIEW16497,759072
#define LOCATE_NOERR LOCATE_NOERR16498,759100
# define sqlite3SetMakeRecordP5(sqlite3SetMakeRecordP516549,762014
# define sqlite3SelectSetName(sqlite3SelectSetName16567,763014
# define sqlite3ParseToplevel(sqlite3ParseToplevel16603,765202
# define sqlite3IsToplevel(sqlite3IsToplevel16604,765275
# define sqlite3TriggersExist(sqlite3TriggersExist16606,765331
# define sqlite3DeleteTrigger(sqlite3DeleteTrigger16607,765374
# define sqlite3DropTriggerPtr(sqlite3DropTriggerPtr16608,765409
# define sqlite3UnlinkAndDeleteTrigger(sqlite3UnlinkAndDeleteTrigger16609,765445
# define sqlite3CodeRowTrigger(sqlite3CodeRowTrigger16610,765491
# define sqlite3CodeRowTriggerDirect(sqlite3CodeRowTriggerDirect16611,765541
# define sqlite3TriggerList(sqlite3TriggerList16612,765591
# define sqlite3ParseToplevel(sqlite3ParseToplevel16613,765627
# define sqlite3IsToplevel(sqlite3IsToplevel16614,765662
# define sqlite3TriggerColmask(sqlite3TriggerColmask16615,765694
# define sqlite3AuthRead(sqlite3AuthRead16628,766385
# define sqlite3AuthCheck(sqlite3AuthCheck16629,766419
# define sqlite3AuthContextPush(sqlite3AuthContextPush16630,766469
# define sqlite3AuthContextPop(sqlite3AuthContextPop16631,766508
#define getVarint32(getVarint3216676,768579
#define putVarint32(putVarint3216678,768685
#define getVarint getVarint16681,768800
#define putVarint putVarint16682,768838
# define sqlite3FileSuffix3(sqlite3FileSuffix316722,770852
SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];sqlite3OpcodeProperty16737,771615
SQLITE_PRIVATE const char sqlite3StrBINARY[];sqlite3StrBINARY16738,771675
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];sqlite3UpperToLower16739,771721
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];sqlite3CtypeMap16740,771779
SQLITE_PRIVATE const Token sqlite3IntTokens[];sqlite3IntTokens16741,771833
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;sqlite3Config16742,771880
SQLITE_PRIVATE FuncDefHash sqlite3BuiltinFunctions;sqlite3BuiltinFunctions16743,771942
SQLITE_PRIVATE int sqlite3PendingByte;sqlite3PendingByte16745,772018
# define sqlite3ExprCheckIN(sqlite3ExprCheckIN16813,775777
# define sqlite3CloseExtensions(sqlite3CloseExtensions16842,776841
  #define sqlite3TableLock(sqlite3TableLock16848,777000
#  define sqlite3VtabClear(sqlite3VtabClear16856,777158
#  define sqlite3VtabSync(sqlite3VtabSync16857,777188
#  define sqlite3VtabRollback(sqlite3VtabRollback16858,777229
#  define sqlite3VtabCommit(sqlite3VtabCommit16859,777262
#  define sqlite3VtabInSync(sqlite3VtabInSync16860,777293
#  define sqlite3VtabLock(sqlite3VtabLock16861,777327
#  define sqlite3VtabUnlock(sqlite3VtabUnlock16862,777356
#  define sqlite3VtabUnlockList(sqlite3VtabUnlockList16863,777387
#  define sqlite3VtabSavepoint(sqlite3VtabSavepoint16864,777422
#  define sqlite3GetVTable(sqlite3GetVTable16865,777472
#  define sqlite3VtabInSync(sqlite3VtabInSync16885,778329
#define sqlite3WithPush(sqlite3WithPush16918,780271
#define sqlite3WithDelete(sqlite3WithDelete16919,780302
  #define sqlite3FkActions(sqlite3FkActions16937,781248
  #define sqlite3FkCheck(sqlite3FkCheck16938,781288
  #define sqlite3FkDropTable(sqlite3FkDropTable16939,781326
  #define sqlite3FkOldmask(sqlite3FkOldmask16940,781362
  #define sqlite3FkRequired(sqlite3FkRequired16941,781404
  #define sqlite3FkReferences(sqlite3FkReferences16942,781446
  #define sqlite3FkDelete(sqlite3FkDelete16948,781669
  #define sqlite3FkLocateIndex(sqlite3FkLocateIndex16949,781700
#define SQLITE_FAULTINJECTOR_MALLOC SQLITE_FAULTINJECTOR_MALLOC16956,781825
#define SQLITE_FAULTINJECTOR_COUNT SQLITE_FAULTINJECTOR_COUNT16957,781867
  #define sqlite3BeginBenignMalloc(sqlite3BeginBenignMalloc16968,782205
  #define sqlite3EndBenignMalloc(sqlite3EndBenignMalloc16969,782242
#define IN_INDEX_ROWID IN_INDEX_ROWID16975,782342
#define IN_INDEX_EPH IN_INDEX_EPH16976,782412
#define IN_INDEX_INDEX_ASC IN_INDEX_INDEX_ASC16977,782479
#define IN_INDEX_INDEX_DESC IN_INDEX_INDEX_DESC16978,782544
#define IN_INDEX_NOOP IN_INDEX_NOOP16979,782610
#define IN_INDEX_NOOP_OK IN_INDEX_NOOP_OK16983,782756
#define IN_INDEX_MEMBERSHIP IN_INDEX_MEMBERSHIP16984,782826
#define IN_INDEX_LOOP IN_INDEX_LOOP16985,782906
  #define sqlite3SelectExprHeight(sqlite3SelectExprHeight17002,783643
  #define sqlite3ExprCheckHeight(sqlite3ExprCheckHeight17003,783682
  #define sqlite3ConnectionBlocked(sqlite3ConnectionBlocked17014,784056
  #define sqlite3ConnectionUnlocked(sqlite3ConnectionUnlocked17015,784096
  #define sqlite3ConnectionClosed(sqlite3ConnectionClosed17016,784135
# define IOTRACE(IOTRACE17029,784459
SQLITE_API SQLITE_EXTERN void (SQLITE_CDECL *sqlite3IoTrace)(const char*,...);sqlite3IoTrace17031,784574
# define IOTRACE(IOTRACE17033,784659
# define sqlite3VdbeIOTraceSql(sqlite3VdbeIOTraceSql17034,784679
# define sqlite3MemdebugSetType(sqlite3MemdebugSetType17070,786324
# define sqlite3MemdebugHasType(sqlite3MemdebugHasType17071,786374
# define sqlite3MemdebugNoType(sqlite3MemdebugNoType17072,786414
#define MEMTYPE_HEAP MEMTYPE_HEAP17074,786461
#define MEMTYPE_LOOKASIDE MEMTYPE_LOOKASIDE17075,786525
#define MEMTYPE_SCRATCH MEMTYPE_SCRATCH17076,786600
#define MEMTYPE_PCACHE MEMTYPE_PCACHE17077,786659
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {sqlite3UpperToLower17124,788308
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {sqlite3CtypeMap17191,791995
# define  SQLITE_USE_URI SQLITE_USE_URI17242,795008
# define SQLITE_ALLOW_COVERING_INDEX_SCAN SQLITE_ALLOW_COVERING_INDEX_SCAN17250,795269
# define SQLITE_SORTER_PMASZ SQLITE_SORTER_PMASZ17257,795447
# define SQLITE_STMTJRNL_SPILL SQLITE_STMTJRNL_SPILL17269,795972
# define SQLITE_DEFAULT_LOOKASIDE SQLITE_DEFAULT_LOOKASIDE17281,796455
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {sqlite3Config17289,796601
SQLITE_PRIVATE FuncDefHash sqlite3BuiltinFunctions;sqlite3BuiltinFunctions17346,798937
SQLITE_PRIVATE const Token sqlite3IntTokens[] = {sqlite3IntTokens17351,799035
SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;sqlite3PendingByte17376,800021
SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;sqlite3OpcodeProperty17386,800325
SQLITE_PRIVATE const char sqlite3StrBINARY[] = "BINARY";sqlite3StrBINARY17391,800454
#define CTIMEOPT_VAL_(CTIMEOPT_VAL_17427,801689
#define CTIMEOPT_VAL(CTIMEOPT_VAL17428,801721
static const char * const azCompileOpt[] = {azCompileOpt17423,801517
SQLITE_API int sqlite3_compileoption_used(const char *zOptName){sqlite3_compileoption_used17816,809588
SQLITE_API const char *sqlite3_compileoption_get(int N){sqlite3_compileoption_get17844,810315
#define SQLITE_VDBEINT_HSQLITE_VDBEINT_H17891,812034
# define SQLITE_MAX_SCHEMA_RETRY SQLITE_MAX_SCHEMA_RETRY17898,812222
# define VDBE_DISPLAY_P4 VDBE_DISPLAY_P417907,812493
# define VDBE_DISPLAY_P4 VDBE_DISPLAY_P417909,812526
typedef struct VdbeOp Op;Op17917,812724
typedef unsigned Bool;Bool17922,812775
typedef struct VdbeSorter VdbeSorter;VdbeSorter17925,812844
typedef struct AuxData AuxData;AuxData17928,812934
#define CURTYPE_BTREE CURTYPE_BTREE17931,812995
#define CURTYPE_SORTER CURTYPE_SORTER17932,813025
#define CURTYPE_VTAB CURTYPE_VTAB17933,813055
#define CURTYPE_PSEUDO CURTYPE_PSEUDO17934,813085
typedef struct VdbeCursor VdbeCursor;VdbeCursor17946,813440
struct VdbeCursor {VdbeCursor17947,813478
  u8 eCurType;            /* One of the CURTYPE_* values above */eCurType17948,813498
  i8 iDb;                 /* Index of cursor database in db->aDb[] (or -1) */iDb17949,813564
  u8 nullRow;             /* True if pointing to a row with no data */nullRow17950,813642
  u8 deferredMoveto;      /* A call to sqlite3BtreeMoveto() is needed */deferredMoveto17951,813713
  u8 isTable;             /* True for rowid tables.  False for indexes */isTable17952,813786
  u8 seekOp;              /* Most recent seek operation on this cursor */seekOp17954,813880
  u8 wrFlag;              /* The wrFlag argument to sqlite3BtreeCursor() */wrFlag17955,813954
  Bool isEphemeral:1;     /* True for an ephemeral table */isEphemeral17957,814037
  Bool useRandomRowid:1;  /* Generate new record numbers semi-randomly */useRandomRowid17958,814097
  Bool isOrdered:1;       /* True if the table is not BTREE_UNORDERED */isOrdered17959,814171
  Btree *pBtx;            /* Separate file holding temporary table */pBtx17960,814244
  i64 seqCount;           /* Sequence counter */seqCount17961,814314
  int *aAltMap;           /* Mapping from table to index column numbers */aAltMap17962,814363
  u32 cacheStatus;        /* Cache is valid if this matches Vdbe.cacheCtr */cacheStatus17968,814693
  int seekResult;         /* Result of previous sqlite3BtreeMoveto() or 0seekResult17969,814770
  VdbeCursor *pAltCursor; /* Associated index cursor from which to read */pAltCursor17977,815262
    BtCursor *pCursor;          /* CURTYPE_BTREE.  Btree cursor */pCursor17979,815347
    sqlite3_vtab_cursor *pVCur; /* CURTYPE_VTAB.   Vtab cursor */pVCur17980,815414
    int pseudoTableReg;         /* CURTYPE_PSEUDO. Reg holding content. */pseudoTableReg17981,815480
    VdbeSorter *pSorter;        /* CURTYPE_SORTER. Sorter object */pSorter17982,815555
  } uc;uc17983,815623
  KeyInfo *pKeyInfo;      /* Info about index keys needed by index cursors */pKeyInfo17984,815631
  u32 iHdrOffset;         /* Offset to next unparsed byte of the header */iHdrOffset17985,815709
  Pgno pgnoRoot;          /* Root page of the open btree cursor */pgnoRoot17986,815784
  i16 nField;             /* Number of fields in the header */nField17987,815851
  u16 nHdrParsed;         /* Number of header fields parsed so far */nHdrParsed17988,815914
  i64 movetoTarget;       /* Argument to the deferred sqlite3BtreeMoveto() */movetoTarget17989,815984
  u32 *aOffset;           /* Pointer to aType[nField] */aOffset17990,816062
  const u8 *aRow;         /* Data for the current row, if all on one page */aRow17991,816119
  u32 payloadSize;        /* Total number of bytes in the record */payloadSize17992,816196
  u32 szRow;              /* Byte available in aRow */szRow17993,816264
  u64 maskUsed;           /* Mask of columns used by this cursor */maskUsed17995,816357
  u32 aType[1];           /* Type values record decode.  MUST BE LAST */aType18001,816638
#define CACHE_STALE CACHE_STALE18008,816800
typedef struct VdbeFrame VdbeFrame;VdbeFrame18031,817987
struct VdbeFrame {VdbeFrame18032,818023
  Vdbe *v;                /* VM this frame belongs to */v18033,818042
  VdbeFrame *pParent;     /* Parent of this frame, or NULL if parent is main */pParent18034,818099
  Op *aOp;                /* Program instructions for parent frame */aOp18035,818179
  i64 *anExec;            /* Event counters from parent frame */anExec18036,818249
  Mem *aMem;              /* Array of memory cells for parent frame */aMem18037,818314
  VdbeCursor **apCsr;     /* Array of Vdbe cursors for parent frame */apCsr18038,818385
  void *token;            /* Copy of SubProgram.token */token18039,818456
  i64 lastRowid;          /* Last insert rowid (sqlite3.lastRowid) */lastRowid18040,818513
  AuxData *pAuxData;      /* Linked list of auxdata allocations */pAuxData18041,818583
  int nCursor;            /* Number of entries in apCsr */nCursor18042,818650
  int pc;                 /* Program Counter in parent (calling) frame */pc18043,818709
  int nOp;                /* Size of aOp array */nOp18044,818783
  int nMem;               /* Number of entries in aMem */nMem18045,818833
  int nChildMem;          /* Number of memory cells for child frame */nChildMem18046,818891
  int nChildCsr;          /* Number of cursors for child frame */nChildCsr18047,818962
  int nChange;            /* Statement changes (Vdbe.nChange)     */nChange18048,819028
  int nDbChange;          /* Value of db->nChange */nDbChange18049,819097
#define VdbeFrameMem(VdbeFrameMem18052,819154
struct Mem {Mem18059,819408
  union MemValue {MemValue18060,819421
    double r;           /* Real value used when MEM_Real is set in flags */r18061,819440
    i64 i;              /* Integer value used when MEM_Int is set in flags */i18062,819516
    int nZero;          /* Used when bit MEM_Zero is set in flags */nZero18063,819594
    FuncDef *pDef;      /* Used only when flags==MEM_Agg */pDef18064,819663
    RowSet *pRowSet;    /* Used only when flags==MEM_RowSet */pRowSet18065,819723
    VdbeFrame *pFrame;  /* Used when flags==MEM_Frame */pFrame18066,819786
  } u;u18067,819843
  u16 flags;          /* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. */flags18068,819850
  u8  enc;            /* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE */enc18069,819931
  u8  eSubtype;       /* Subtype for this value */eSubtype18070,820003
  int n;              /* Number of characters in string value, excluding '\0' */n18071,820054
  char *z;            /* String or BLOB value */z18072,820135
  char *zMalloc;      /* Space to hold MEM_Str or MEM_Blob if szMalloc>0 */zMalloc18074,820245
  int szMalloc;       /* Size of the zMalloc allocation */szMalloc18075,820321
  u32 uTemp;          /* Transient storage for serial_type in OP_MakeRecord */uTemp18076,820380
  sqlite3 *db;        /* The associated database connection */db18077,820459
  void (*xDel)(void*);/* Destructor for Mem.z - only valid if MEM_Dyn */xDel18078,820522
  Mem *pScopyFrom;    /* This Mem is a shallow copy of pScopyFrom */pScopyFrom18080,820615
  void *pFiller;      /* So that sizeof(Mem) is a multiple of 8 */pFiller18081,820684
#define MEMCELLSIZE MEMCELLSIZE18089,820856
#define MEM_Null MEM_Null18103,821474
#define MEM_Str MEM_Str18104,821525
#define MEM_Int MEM_Int18105,821580
#define MEM_Real MEM_Real18106,821637
#define MEM_Blob MEM_Blob18107,821697
#define MEM_AffMask MEM_AffMask18108,821750
#define MEM_RowSet MEM_RowSet18109,821809
#define MEM_Frame MEM_Frame18110,821871
#define MEM_Undefined MEM_Undefined18111,821936
#define MEM_Cleared MEM_Cleared18112,821992
#define MEM_TypeMask MEM_TypeMask18113,822064
#define MEM_Term MEM_Term18121,822372
#define MEM_Dyn MEM_Dyn18122,822438
#define MEM_Static MEM_Static18123,822508
#define MEM_Ephem MEM_Ephem18124,822577
#define MEM_Agg MEM_Agg18125,822650
#define MEM_Zero MEM_Zero18126,822727
#define MEM_Subtype MEM_Subtype18127,822808
  #undef MEM_ZeroMEM_Zero18129,822895
  #define MEM_Zero MEM_Zero18130,822913
#define VdbeMemDynamic(VdbeMemDynamic18136,823073
#define MemSetTypeFlag(MemSetTypeFlag18142,823236
#define memIsValid(memIsValid18150,823469
struct AuxData {AuxData18160,823863
  int iOp;                        /* Instruction number of OP_Function opcode */iOp18161,823880
  int iArg;                       /* Index of function argument. */iArg18162,823961
  void *pAux;                     /* Aux data pointer */pAux18163,824029
  void (*xDelete)(void *);        /* Destructor for the aux data */xDelete18164,824086
  AuxData *pNext;                 /* Next element in list */pNext18165,824154
struct sqlite3_context {sqlite3_context18181,824769
  Mem *pOut;              /* The return value is stored here */pOut18182,824794
  FuncDef *pFunc;         /* Pointer to function information */pFunc18183,824858
  Mem *pMem;              /* Memory cell used to store aggregate context */pMem18184,824922
  Vdbe *pVdbe;            /* The VM that owns this context */pVdbe18185,824998
  int iOp;                /* Instruction number of OP_Function */iOp18186,825060
  int isError;            /* Error code returned by the function. */isError18187,825126
  u8 skipFlag;            /* Skip accumulator loading if true */skipFlag18188,825195
  u8 fErrorOrAux;         /* isError!=0 or pVdbe->pAuxData modified */fErrorOrAux18189,825260
  u8 argc;                /* Number of arguments */argc18190,825331
  sqlite3_value *argv[1]; /* Argument set */argv18191,825383
typedef unsigned bft;  /* Bit Field Type */bft18197,825541
typedef struct ScanStatus ScanStatus;ScanStatus18199,825586
struct ScanStatus {ScanStatus18200,825624
  int addrExplain;                /* OP_Explain for loop */addrExplain18201,825644
  int addrLoop;                   /* Address of "loops" counter */addrLoop18202,825704
  int addrVisit;                  /* Address of "rows visited" counter */addrVisit18203,825771
  int iSelectID;                  /* The "Select-ID" for this loop */iSelectID18204,825845
  LogEst nEst;                    /* Estimated output rows per loop */nEst18205,825915
  char *zName;                    /* Name of table or index */zName18206,825986
struct Vdbe {Vdbe18216,826307
  sqlite3 *db;            /* The database connection that owns this statement */db18217,826321
  Vdbe *pPrev,*pNext;     /* Linked list of VDBEs with the same Vdbe.db */pPrev18218,826402
  Vdbe *pPrev,*pNext;     /* Linked list of VDBEs with the same Vdbe.db */pNext18218,826402
  Parse *pParse;          /* Parsing context used to create this Vdbe */pParse18219,826477
  ynVar nVar;             /* Number of entries in aVar[] */nVar18220,826550
  u32 magic;              /* Magic number for sanity checking */magic18221,826610
  int nMem;               /* Number of memory locations currently allocated */nMem18222,826675
  int nCursor;            /* Number of slots in apCsr[] */nCursor18223,826754
  u32 cacheCtr;           /* VdbeCursor row cache generation counter */cacheCtr18224,826813
  int pc;                 /* The program counter */pc18225,826885
  int rc;                 /* Value to return */rc18226,826937
  int nChange;            /* Number of db changes made since last reset */nChange18227,826985
  int iStatement;         /* Statement number (or 0 if has not opened stmt) */iStatement18228,827060
  i64 iCurrentTime;       /* Value of julianday('now') for this statement */iCurrentTime18229,827139
  i64 nFkConstraint;      /* Number of imm. FK constraints this VM */nFkConstraint18230,827216
  i64 nStmtDefCons;       /* Number of def. constraints when stmt started */nStmtDefCons18231,827286
  i64 nStmtDefImmCons;    /* Number of def. imm constraints when stmt started */nStmtDefImmCons18232,827363
  Op *aOp;                /* Space to hold the virtual machine's program */aOp18237,827556
  Mem *aMem;              /* The memory locations */aMem18238,827632
  Mem **apArg;            /* Arguments to currently executing user function */apArg18239,827685
  Mem *aColName;          /* Column names to return */aColName18240,827764
  Mem *pResultSet;        /* Pointer to an array of results */pResultSet18241,827819
  char *zErrMsg;          /* Error message written here */zErrMsg18242,827882
  VdbeCursor **apCsr;     /* One element of this array for each open cursor */apCsr18243,827941
  Mem *aVar;              /* Values for the OP_Variable opcode. */aVar18244,828020
  VList *pVList;          /* Name of variables */pVList18245,828087
  i64 startTime;          /* Time when query started - used for profiling */startTime18247,828163
  int nOp;                /* Number of instructions in the program */nOp18249,828247
  int rcApp;              /* errcode set by sqlite3_result_error_code() */rcApp18251,828337
  u16 nResColumn;         /* Number of columns in one row of the result set */nResColumn18253,828419
  u8 errorAction;         /* Recovery action to do in case of an error */errorAction18254,828498
  u8 minWriteFileFormat;  /* Minimum file format for writable database files */minWriteFileFormat18255,828572
  bft expired:1;          /* True if the VM needs to be recompiled */expired18256,828652
  bft doingRerun:1;       /* True if rerunning after an auto-reprepare */doingRerun18257,828722
  bft explain:2;          /* True if EXPLAIN present on SQL command */explain18258,828796
  bft changeCntOn:1;      /* True to update the change-counter */changeCntOn18259,828867
  bft runOnlyOnce:1;      /* Automatically expire on reset */runOnlyOnce18260,828933
  bft usesStmtJournal:1;  /* True if uses a statement journal */usesStmtJournal18261,828995
  bft readOnly:1;         /* True for statements that do not write */readOnly18262,829060
  bft bIsReader:1;        /* True for statements that read */bIsReader18263,829130
  bft isPrepareV2:1;      /* True if prepared with prepare_v2() */isPrepareV218264,829192
  yDbMask btreeMask;      /* Bitmask of db->aDb[] entries referenced */btreeMask18265,829259
  yDbMask lockMask;       /* Subset of btreeMask that requires a lock */lockMask18266,829331
  u32 aCounter[5];        /* Counters used by sqlite3_stmt_status() */aCounter18267,829404
  char *zSql;             /* Text of the SQL statement that generated this */zSql18268,829475
  void *pFree;            /* Free this when deleting the vdbe */pFree18269,829553
  VdbeFrame *pFrame;      /* Parent frame */pFrame18270,829618
  VdbeFrame *pDelFrame;   /* List of frame objects to free on VM reset */pDelFrame18271,829663
  int nFrame;             /* Number of frames in pFrame list */nFrame18272,829737
  u32 expmask;            /* Binding to these vars invalidates VM */expmask18273,829801
  SubProgram *pProgram;   /* Linked list of all sub-programs used by VM */pProgram18274,829870
  AuxData *pAuxData;      /* Linked list of auxdata allocations */pAuxData18275,829945
  i64 *anExec;            /* Number of times each op has been executed */anExec18277,830049
  int nScan;              /* Entries in aScan[] */nScan18278,830123
  ScanStatus *aScan;      /* Scan definitions for sqlite3_stmt_scanstatus() */aScan18279,830174
#define VDBE_MAGIC_INIT VDBE_MAGIC_INIT18286,830321
#define VDBE_MAGIC_RUN VDBE_MAGIC_RUN18287,830393
#define VDBE_MAGIC_HALT VDBE_MAGIC_HALT18288,830466
#define VDBE_MAGIC_RESET VDBE_MAGIC_RESET18289,830543
#define VDBE_MAGIC_DEAD VDBE_MAGIC_DEAD18290,830620
struct PreUpdate {PreUpdate18296,830801
  Vdbe *v;v18297,830820
  VdbeCursor *pCsr;               /* Cursor to read old values from */pCsr18298,830831
  int op;                         /* One of SQLITE_INSERT, UPDATE, DELETE */op18299,830902
  u8 *aRecord;                    /* old.* database record */aRecord18300,830979
  KeyInfo keyinfo;keyinfo18301,831041
  UnpackedRecord *pUnpacked;      /* Unpacked version of aRecord[] */pUnpacked18302,831060
  UnpackedRecord *pNewUnpacked;   /* Unpacked version of new.* record */pNewUnpacked18303,831130
  int iNewReg;                    /* Register for new.* values */iNewReg18304,831203
  i64 iKey1;                      /* First key value passed to hook */iKey118305,831269
  i64 iKey2;                      /* Second key value passed to hook */iKey218306,831340
  Mem *aNew;                      /* Array of new.* values */aNew18307,831412
  Table *pTab;                    /* Schema object being upated */          pTab18308,831474
  Index *pPk;                     /* PK index if pTab is WITHOUT ROWID */pPk18309,831551
# define sqlite3VdbeMemSetDouble sqlite3VdbeMemSetDouble18345,833309
# define sqlite3VdbeEnter(sqlite3VdbeEnter18388,835530
# define sqlite3VdbeLeave(sqlite3VdbeLeave18394,835682
# define sqlite3VdbeCheckFk(sqlite3VdbeCheckFk18405,835954
  #define ExpandBlob(ExpandBlob18417,836339
  #define sqlite3VdbeMemExpandBlob(sqlite3VdbeMemExpandBlob18419,836423
  #define ExpandBlob(ExpandBlob18420,836471
typedef sqlite3_int64 sqlite3StatValueType;sqlite3StatValueType18432,836794
typedef u32 sqlite3StatValueType;sqlite3StatValueType18434,836844
typedef struct sqlite3StatType sqlite3StatType;sqlite3StatType18436,836885
static SQLITE_WSD struct sqlite3StatType {sqlite3StatType18437,836933
  sqlite3StatValueType nowValue[10];  /* Current value */nowValue18438,836976
  sqlite3StatValueType mxValue[10];   /* Maximum value */mxValue18439,837034
} sqlite3Stat = { {0,}, {0,} };sqlite3Stat18440,837092
static const char statMutex[] = {statMutex18446,837279
# define wsdStatInit wsdStatInit18467,838080
# define wsdStat wsdStat18468,838160
# define wsdStatInitwsdStatInit18470,838188
# define wsdStat wsdStat18471,838209
SQLITE_PRIVATE sqlite3_int64 sqlite3StatusValue(int op){sqlite3StatusValue18478,838357
SQLITE_PRIVATE void sqlite3StatusUp(int op, int N){sqlite3StatusUp18498,839154
SQLITE_PRIVATE void sqlite3StatusDown(int op, int N){sqlite3StatusDown18509,839590
SQLITE_PRIVATE void sqlite3StatusHighwater(int op, int X){sqlite3StatusHighwater18523,840041
SQLITE_API int sqlite3_status64(sqlite3_status6418544,840733
SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){sqlite3_status18569,841442
SQLITE_API int sqlite3_db_status(sqlite3_db_status18586,841891
typedef struct DateTime DateTime;DateTime18829,850092
struct DateTime {DateTime18830,850126
  sqlite3_int64 iJD;  /* The julian day number times 86400000 */iJD18831,850144
  int Y, M, D;        /* Year, month, and day */Y18832,850209
  int Y, M, D;        /* Year, month, and day */M18832,850209
  int Y, M, D;        /* Year, month, and day */D18832,850209
  int h, m;           /* Hour and minutes */h18833,850258
  int h, m;           /* Hour and minutes */m18833,850258
  int tz;             /* Timezone offset in minutes */tz18834,850303
  double s;           /* Seconds */s18835,850358
  char validJD;       /* True (1) if iJD is valid */validJD18836,850394
  char rawS;          /* Raw numeric value stored in s */rawS18837,850447
  char validYMD;      /* True (1) if Y,M,D are valid */validYMD18838,850505
  char validHMS;      /* True (1) if h,m,s are valid */validHMS18839,850561
  char validTZ;       /* True (1) if tz is valid */validTZ18840,850617
  char tzSet;         /* Timezone was set explicitly */tzSet18841,850669
  char isError;       /* An overflow has occurred */isError18842,850725
static int getDigits(const char *zDate, const char *zFormat, ...){getDigits18873,851808
static int parseTimezone(const char *zDate, DateTime *p){parseTimezone18927,853092
static int parseHhMmSs(const char *zDate, DateTime *p){parseHhMmSs18963,853887
static void datetimeError(DateTime *p){datetimeError19003,854675
static void computeJD(DateTime *p){computeJD19014,854934
static int parseYyyyMmDd(const char *zDate, DateTime *p){parseYyyyMmDd19064,855969
static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){setDateTimeToCurrent19101,856650
static void setRawDateNumber(DateTime *p, double r){setRawDateNumber19117,857138
static int parseDateOrTime(parseDateOrTime19142,857877
#define INT_464269060799999 INT_46426906079999919168,858623
static int validJulianDay(sqlite3_int64 iJD){validJulianDay19175,858805
static void computeYMD(DateTime *p){computeYMD19182,858969
static void computeHMS(DateTime *p){computeHMS19209,859625
static void computeYMD_HMS(DateTime *p){computeYMD_HMS19228,859953
static void clearYMD_HMS_TZ(DateTime *p){clearYMD_HMS_TZ19236,860073
#undef  HAVE_LOCALTIME_SHAVE_LOCALTIME_S19257,860792
#define HAVE_LOCALTIME_S HAVE_LOCALTIME_S19258,860817
static int osLocaltime(time_t *t, struct tm *pTm){osLocaltime19274,861356
static sqlite3_int64 localtimeOffset(localtimeOffset19313,862434
  u8 eType;           /* Transformation type code */eType19379,864173
  u8 nName;           /* Length of th name */nName19380,864226
  char *zName;        /* Name of the transformation */zName19381,864272
  double rLimit;      /* Maximum NNN value for this transform */rLimit19382,864327
  double rXform;      /* Constant used for this transform */rXform19383,864392
} aXformType[] = {aXformType19384,864453
static int parseModifier(parseModifier19417,865468
static int isDate(isDate19633,871479
static void juliandayFunc(juliandayFunc19676,872491
static void datetimeFunc(datetimeFunc19693,872804
static void timeFunc(timeFunc19713,873267
static void dateFunc(dateFunc19732,873671
static void strftimeFunc(strftimeFunc19765,874468
static void ctimeFunc(ctimeFunc19903,878134
static void cdateFunc(cdateFunc19917,878383
static void ctimestampFunc(ctimestampFunc19931,878641
static void currentTimeFunc(currentTimeFunc19953,879400
SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){sqlite3RegisterDateTimeFunctions19991,880348
SQLITE_API int sqlite3_io_error_hit = 0;            /* Total number of I/O Errors */sqlite3_io_error_hit20036,882168
SQLITE_API int sqlite3_io_error_hardhit = 0;        /* Number of non-benign errors */sqlite3_io_error_hardhit20037,882253
SQLITE_API int sqlite3_io_error_pending = 0;        /* Count down to first I/O error */sqlite3_io_error_pending20038,882339
SQLITE_API int sqlite3_io_error_persist = 0;        /* True if I/O errors persist */sqlite3_io_error_persist20039,882427
SQLITE_API int sqlite3_io_error_benign = 0;         /* True if errors are benign */sqlite3_io_error_benign20040,882512
SQLITE_API int sqlite3_diskfull_pending = 0;sqlite3_diskfull_pending20041,882596
SQLITE_API int sqlite3_diskfull = 0;sqlite3_diskfull20042,882641
SQLITE_API int sqlite3_open_file_count = 0;sqlite3_open_file_count20049,882808
SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;sqlite3_memdebug_vfs_oom_test20077,883666
  #define DO_OS_MALLOC_TEST(DO_OS_MALLOC_TEST20078,883716
  #define DO_OS_MALLOC_TEST(DO_OS_MALLOC_TEST20085,884091
SQLITE_PRIVATE void sqlite3OsClose(sqlite3_file *pId){sqlite3OsClose20094,884374
SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){sqlite3OsRead20100,884513
SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){sqlite3OsWrite20104,884678
SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){sqlite3OsTruncate20108,884851
SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){sqlite3OsSync20111,884963
SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){sqlite3OsFileSize20115,885094
SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){sqlite3OsLock20119,885234
SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){sqlite3OsUnlock20123,885371
SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){sqlite3OsCheckReservedLock20126,885487
SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){sqlite3OsFileControl20139,886108
SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){sqlite3OsFileControlHint20157,886932
SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){sqlite3OsSectorSize20161,887069
SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){sqlite3OsDeviceCharacteristics20165,887265
SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){sqlite3OsShmLock20168,887387
SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){sqlite3OsShmBarrier20171,887529
SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){sqlite3OsShmUnmap20174,887623
SQLITE_PRIVATE int sqlite3OsShmMap(sqlite3OsShmMap20177,887747
SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){sqlite3OsFetch20190,888179
SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){sqlite3OsUnfetch20194,888341
SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){sqlite3OsFetch20199,888529
SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){sqlite3OsUnfetch20203,888646
SQLITE_PRIVATE int sqlite3OsOpen(sqlite3OsOpen20212,888838
SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){sqlite3OsDelete20229,889378
SQLITE_PRIVATE int sqlite3OsAccess(sqlite3OsAccess20234,889575
SQLITE_PRIVATE int sqlite3OsFullPathname(sqlite3OsFullPathname20243,889763
SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){sqlite3OsDlOpen20254,890026
SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){sqlite3OsDlError20257,890141
SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){sqlite3OsDlSym20260,890266
SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){sqlite3OsDlClose20263,890405
SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){sqlite3OsRandomness20267,890552
SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){sqlite3OsSleep20270,890689
SQLITE_PRIVATE int sqlite3OsGetLastError(sqlite3_vfs *pVfs){sqlite3OsGetLastError20273,890794
SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){sqlite3OsCurrentTimeInt6420276,890925
SQLITE_PRIVATE int sqlite3OsOpenMalloc(sqlite3OsOpenMalloc20294,891572
SQLITE_PRIVATE void sqlite3OsCloseFree(sqlite3_file *pFile){sqlite3OsCloseFree20316,892031
SQLITE_PRIVATE int sqlite3OsInit(void){sqlite3OsInit20328,892439
static sqlite3_vfs * SQLITE_WSD vfsList = 0;vfsList20338,892657
#define vfsList vfsList20339,892702
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){sqlite3_vfs_find20345,892847
static void vfsUnlink(sqlite3_vfs *pVfs){vfsUnlink20369,893404
SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){sqlite3_vfs_register20391,893961
SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){sqlite3_vfs_unregister20419,894649
typedef struct BenignMallocHooks BenignMallocHooks;BenignMallocHooks20464,896232
static SQLITE_WSD struct BenignMallocHooks {BenignMallocHooks20465,896284
  void (*xBenignBegin)(void);xBenignBegin20466,896329
  void (*xBenignEnd)(void);xBenignEnd20467,896359
} sqlite3Hooks = { 0, 0 };sqlite3Hooks20468,896387
# define wsdHooksInit wsdHooksInit20477,896786
# define wsdHooks wsdHooks20479,896875
# define wsdHooksInitwsdHooksInit20481,896904
# define wsdHooks wsdHooks20482,896926
SQLITE_PRIVATE void sqlite3BenignMallocHooks(sqlite3BenignMallocHooks20490,897088
SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){sqlite3BeginBenignMalloc20504,897510
SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){sqlite3EndBenignMalloc20510,897644
static void *sqlite3MemMalloc(int nByte){ return 0; }sqlite3MemMalloc20551,898948
static void sqlite3MemFree(void *pPrior){ return; }sqlite3MemFree20552,899002
static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }sqlite3MemRealloc20553,899054
static int sqlite3MemSize(void *pPrior){ return 0; }sqlite3MemSize20554,899123
static int sqlite3MemRoundup(int n){ return n; }sqlite3MemRoundup20555,899176
static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }sqlite3MemInit20556,899225
static void sqlite3MemShutdown(void *NotUsed){ return; }sqlite3MemShutdown20557,899287
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault20565,899560
static malloc_zone_t* _sqliteZone_;_sqliteZone_20643,902563
#define SQLITE_MALLOC(SQLITE_MALLOC20644,902599
#define SQLITE_FREE(SQLITE_FREE20645,902662
#define SQLITE_REALLOC(SQLITE_REALLOC20646,902722
#define SQLITE_MALLOCSIZE(SQLITE_MALLOCSIZE20647,902794
#define SQLITE_MALLOC(SQLITE_MALLOC20656,903076
#define SQLITE_FREE(SQLITE_FREE20657,903123
#define SQLITE_REALLOC(SQLITE_REALLOC20658,903168
#  define SQLITE_USE_MALLOC_H SQLITE_USE_MALLOC_H20665,903379
#  define SQLITE_USE_MALLOC_USABLE_SIZE SQLITE_USE_MALLOC_USABLE_SIZE20666,903411
#  define SQLITE_USE_MALLOC_HSQLITE_USE_MALLOC_H20674,903759
#  define SQLITE_USE_MSIZESQLITE_USE_MSIZE20675,903789
#      define SQLITE_MALLOCSIZE(SQLITE_MALLOCSIZE20689,904322
#      define SQLITE_MALLOCSIZE SQLITE_MALLOCSIZE20693,904462
static void *sqlite3MemMalloc(int nByte){sqlite3MemMalloc20708,904888
static void sqlite3MemFree(void *pPrior){sqlite3MemFree20742,905779
static int sqlite3MemSize(void *pPrior){sqlite3MemSize20757,906064
static void *sqlite3MemRealloc(void *pPrior, int nByte){sqlite3MemRealloc20780,906718
static int sqlite3MemRoundup(int n){sqlite3MemRoundup20812,907525
static int sqlite3MemInit(void *NotUsed){sqlite3MemInit20819,907618
static void sqlite3MemShutdown(void *NotUsed){sqlite3MemShutdown20855,908691
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault20866,908995
# define backtrace(backtrace20920,910693
# define backtrace_symbols_fd(backtrace_symbols_fd20921,910719
struct MemBlockHdr {MemBlockHdr20938,911373
  i64 iSize;                          /* Size of this allocation */iSize20939,911394
  struct MemBlockHdr *pNext, *pPrev;  /* Linked list of all unfreed memory */pNext20940,911462
  struct MemBlockHdr *pNext, *pPrev;  /* Linked list of all unfreed memory */pPrev20940,911462
  char nBacktrace;                    /* Number of backtraces on this alloc */nBacktrace20941,911540
  char nBacktraceSlots;               /* Available backtrace slots */nBacktraceSlots20942,911619
  u8 nTitle;                          /* Bytes of title; includes '\0' */nTitle20943,911689
  u8 eType;                           /* Allocation type code */eType20944,911763
  int iForeGuard;                     /* Guard word for sanity */iForeGuard20945,911828
#define FOREGUARD FOREGUARD20951,911919
#define REARGUARD REARGUARD20952,911948
#define NCSIZE NCSIZE20957,912030
  sqlite3_mutex *mutex;mutex20970,912406
  struct MemBlockHdr *pFirst;pFirst20975,912508
  struct MemBlockHdr *pLast;pLast20976,912538
  int nBacktrace;nBacktrace20981,912647
  void (*xBacktrace)(int, int, void **);xBacktrace20982,912665
  int nTitle;        /* Bytes of zTitle to save.  Includes '\0' and padding */nTitle20987,912766
  char zTitle[100];  /* The title text */zTitle20988,912845
  int disallow; /* Do not allow memory allocation */disallow20994,913003
  int nAlloc[NCSIZE];      /* Total number of allocations */nAlloc21002,913286
  int nCurrent[NCSIZE];    /* Current number of allocations */nCurrent21003,913347
  int mxCurrent[NCSIZE];   /* Highwater mark for nCurrent */mxCurrent21004,913410
} mem;mem21006,913472
static void adjustStats(int iSize, int increment){adjustStats21012,913521
static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){sqlite3MemsysGetHeader21035,914055
static int sqlite3MemSize(void *p){sqlite3MemSize21059,914721
static int sqlite3MemInit(void *NotUsed){sqlite3MemInit21071,914934
static void sqlite3MemShutdown(void *NotUsed){sqlite3MemShutdown21085,915382
static int sqlite3MemRoundup(int n){sqlite3MemRoundup21093,915546
static void randomFill(char *pBuf, int nByte){randomFill21102,915820
static void *sqlite3MemMalloc(int nByte){sqlite3MemMalloc21125,916296
static void sqlite3MemFree(void *pPrior){sqlite3MemFree21184,917818
static void *sqlite3MemRealloc(void *pPrior, int nByte){sqlite3MemRealloc21226,919093
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault21247,919759
SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){sqlite3MemdebugSetType21264,920134
SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){sqlite3MemdebugHasType21282,920707
SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){sqlite3MemdebugNoType21304,921384
SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){sqlite3MemdebugBacktrace21322,921908
SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){sqlite3MemdebugBacktraceCallback21329,922082
SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){sqlite3MemdebugSettitle21336,922267
SQLITE_PRIVATE void sqlite3MemdebugSync(){sqlite3MemdebugSync21346,922587
SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){sqlite3MemdebugDump21359,922947
SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){sqlite3MemdebugMallocCount21401,924199
#define MX_SMALL MX_SMALL21454,925960
#define N_HASH N_HASH21460,926021
typedef struct Mem3Block Mem3Block;Mem3Block21494,927641
struct Mem3Block {Mem3Block21495,927677
      u32 prevSize;   /* Size of previous chunk in Mem3Block elements */prevSize21498,927719
      u32 size4x;     /* 4x the size of current chunk in Mem3Block elements */size4x21499,927792
    } hdr;hdr21500,927871
      u32 next;       /* Index in mem3.aPool[] of next free chunk */next21502,927895
      u32 prev;       /* Index in mem3.aPool[] of previous free chunk */prev21503,927964
    } list;list21504,928037
  } u;u21505,928049
static SQLITE_WSD struct Mem3Global {Mem3Global21514,928321
  u32 nPool;nPool21519,928487
  Mem3Block *aPool;aPool21520,928500
  int alarmBusy;alarmBusy21525,928589
  sqlite3_mutex *mutex;mutex21530,928684
  u32 mnMaster;mnMaster21535,928778
  u32 iMaster;iMaster21543,929080
  u32 szMaster;szMaster21544,929095
  u32 aiSmall[MX_SMALL-1];   /* For sizes 2 through MX_SMALL, inclusive */aiSmall21551,929263
  u32 aiHash[N_HASH];        /* For sizes MX_SMALL+1 and larger */aiHash21552,929338
} mem3 = { 97535575 };mem321553,929405
#define mem3 mem321555,929429
static void memsys3UnlinkFromList(u32 i, u32 *pRoot){memsys3UnlinkFromList21561,929594
static void memsys3Unlink(u32 i){memsys3Unlink21581,930076
static void memsys3LinkIntoList(u32 i, u32 *pRoot){memsys3LinkIntoList21601,930614
static void memsys3Link(u32 i){memsys3Link21615,930978
static void memsys3Enter(void){memsys3Enter21636,931603
static void memsys3Leave(void){memsys3Leave21642,931795
static void memsys3OutOfMemory(int nByte){memsys3OutOfMemory21649,931936
static void *memsys3Checkout(u32 i, u32 nBlock){memsys3Checkout21666,932377
static void *memsys3FromMaster(u32 nBlock){memsys3FromMaster21684,932993
static void memsys3Merge(u32 *pRoot){memsys3Merge21729,934772
static void *memsys3MallocUnsafe(int nByte){memsys3MallocUnsafe21768,935850
static void memsys3FreeUnsafe(void *pOld){memsys3FreeUnsafe21850,938042
static int memsys3Size(void *p){memsys3Size21891,939638
static int memsys3Roundup(int n){memsys3Roundup21902,939896
static void *memsys3Malloc(int nBytes){memsys3Malloc21913,940040
static void memsys3Free(void *pPrior){memsys3Free21925,940290
static void *memsys3Realloc(void *pPrior, int nBytes){memsys3Realloc21935,940475
static int memsys3Init(void *NotUsed){memsys3Init21966,941038
static void memsys3Shutdown(void *NotUsed){memsys3Shutdown21991,941731
SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){sqlite3Memsys3Dump22003,941939
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){sqlite3MemGetMemsys322087,944481
typedef struct Mem5Link Mem5Link;Mem5Link22171,947582
struct Mem5Link {Mem5Link22172,947616
  int next;       /* Index of next free chunk */next22173,947634
  int prev;       /* Index of previous free chunk */prev22174,947683
#define LOGMAX LOGMAX22182,947934
#define CTRL_LOGSIZE CTRL_LOGSIZE22187,948000
#define CTRL_FREE CTRL_FREE22188,948060
static SQLITE_WSD struct Mem5Global {Mem5Global22196,948382
  int szAtom;      /* Smallest possible allocation in bytes */szAtom22200,948467
  int nBlock;      /* Number of szAtom sized blocks in zPool */nBlock22201,948530
  u8 *zPool;       /* Memory available to be allocated */zPool22202,948594
  sqlite3_mutex *mutex;mutex22207,948730
  u64 nAlloc;         /* Total number of calls to malloc */nAlloc22213,948843
  u64 totalAlloc;     /* Total of all malloc calls - includes internal frag */totalAlloc22214,948903
  u64 totalExcess;    /* Total internal fragmentation */totalExcess22215,948982
  u32 currentOut;     /* Current checkout, including internal fragmentation */currentOut22216,949039
  u32 currentCount;   /* Current number of distinct checkouts */currentCount22217,949118
  u32 maxOut;         /* Maximum instantaneous currentOut */maxOut22218,949183
  u32 maxCount;       /* Maximum instantaneous currentCount */maxCount22219,949244
  u32 maxRequest;     /* Largest allocation (exclusive of internal frag) */maxRequest22220,949307
  int aiFreelist[LOGMAX+1];aiFreelist22228,949612
  u8 *aCtrl;aCtrl22234,949758
} mem5;mem522236,949772
#define mem5 mem522241,949854
#define MEM5LINK(MEM5LINK22247,950026
static void memsys5Unlink(int i, int iLogsize){memsys5Unlink22253,950222
static void memsys5Link(int i, int iLogsize){memsys5Link22275,950718
static void memsys5Enter(void){memsys5Enter22294,951219
static void memsys5Leave(void){memsys5Leave22297,951288
static int memsys5Size(void *p){memsys5Size22305,951485
static void *memsys5MallocUnsafe(int nByte){memsys5MallocUnsafe22324,952051
static void memsys5FreeUnsafe(void *pOld){memsys5FreeUnsafe22394,954238
static void *memsys5Malloc(int nBytes){memsys5Malloc22460,956130
static void memsys5Free(void *pPrior){memsys5Free22476,956436
static void *memsys5Realloc(void *pPrior, int nBytes){memsys5Realloc22495,957032
static int memsys5Roundup(int n){memsys5Roundup22525,957765
static int memsys5Log(int iValue){memsys5Log22542,958191
static int memsys5Init(void *NotUsed){memsys5Init22554,958511
static void memsys5Shutdown(void *NotUsed){memsys5Shutdown22612,960220
SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){sqlite3Memsys5Dump22623,960445
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){sqlite3MemGetMemsys522666,961822
static SQLITE_WSD int mutexIsInit = 0;mutexIsInit22707,963130
SQLITE_PRIVATE int sqlite3MutexInit(void){ sqlite3MutexInit22715,963292
SQLITE_PRIVATE int sqlite3MutexEnd(void){sqlite3MutexEnd22756,964614
SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){sqlite3_mutex_alloc22772,964929
SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){sqlite3MutexAlloc22781,965261
SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){sqlite3_mutex_free22793,965552
SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){sqlite3_mutex_enter22804,965829
SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){sqlite3_mutex_try22815,966158
SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){sqlite3_mutex_leave22830,966615
SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){sqlite3_mutex_held22842,966924
SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){sqlite3_mutex_notheld22846,967095
static int noopMutexInit(void){ return SQLITE_OK; }noopMutexInit22893,968637
static int noopMutexEnd(void){ return SQLITE_OK; }noopMutexEnd22894,968689
static sqlite3_mutex *noopMutexAlloc(int id){ noopMutexAlloc22895,968740
static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }noopMutexFree22899,968842
static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }noopMutexEnter22900,968918
static int noopMutexTry(sqlite3_mutex *p){noopMutexTry22901,968995
static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }noopMutexLeave22905,969083
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){sqlite3NoopMutex22907,969161
typedef struct sqlite3_debug_mutex {sqlite3_debug_mutex22935,969685
  int id;     /* The mutex type */id22936,969722
  int cnt;    /* Number of entries without a matching leave */cnt22937,969757
} sqlite3_debug_mutex;sqlite3_debug_mutex22938,969820
static int debugMutexHeld(sqlite3_mutex *pX){debugMutexHeld22944,969966
static int debugMutexNotheld(sqlite3_mutex *pX){debugMutexNotheld22948,970094
static int debugMutexInit(void){ return SQLITE_OK; }debugMutexInit22956,970285
static int debugMutexEnd(void){ return SQLITE_OK; }debugMutexEnd22957,970338
static sqlite3_mutex *debugMutexAlloc(int id){debugMutexAlloc22964,970560
static void debugMutexFree(sqlite3_mutex *pX){debugMutexFree22995,971253
static void debugMutexEnter(sqlite3_mutex *pX){debugMutexEnter23018,972169
static int debugMutexTry(sqlite3_mutex *pX){debugMutexTry23023,972352
static void debugMutexLeave(sqlite3_mutex *pX){debugMutexLeave23036,972793
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){sqlite3NoopMutex23043,973009
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){sqlite3DefaultMutex23066,973528
# define SQLITE_MUTEX_NREF SQLITE_MUTEX_NREF23106,974911
# define SQLITE_MUTEX_NREF SQLITE_MUTEX_NREF23108,974946
struct sqlite3_mutex {sqlite3_mutex23114,975056
  pthread_mutex_t mutex;     /* Mutex controlling the lock */mutex23115,975079
  int id;                    /* Mutex type */id23117,975199
  volatile int nRef;         /* Number of entrances */nRef23120,975274
  volatile pthread_t owner;  /* Thread that is within this mutex */owner23121,975329
  int trace;                 /* True to trace changes */trace23122,975397
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER23126,975486
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER23128,975606
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER23130,975679
static int pthreadMutexHeld(sqlite3_mutex *p){pthreadMutexHeld23150,976617
static int pthreadMutexNotheld(sqlite3_mutex *p){pthreadMutexNotheld23153,976732
SQLITE_PRIVATE void sqlite3MemoryBarrier(void){sqlite3MemoryBarrier23163,977052
static int pthreadMutexInit(void){ return SQLITE_OK; }pthreadMutexInit23174,977300
static int pthreadMutexEnd(void){ return SQLITE_OK; }pthreadMutexEnd23175,977355
static sqlite3_mutex *pthreadMutexAlloc(int iType){pthreadMutexAlloc23225,979540
static void pthreadMutexFree(sqlite3_mutex *p){pthreadMutexFree23290,981329
static void pthreadMutexEnter(sqlite3_mutex *p){pthreadMutexEnter23317,982273
static int pthreadMutexTry(sqlite3_mutex *p){pthreadMutexTry23359,983621
static void pthreadMutexLeave(sqlite3_mutex *p){pthreadMutexLeave23416,985364
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){sqlite3DefaultMutex23439,985853
#define _OS_COMMON_H__OS_COMMON_H_23505,987820
#define SQLITE_HWTIME_HSQLITE_HWTIME_H23544,989069
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime23557,989466
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec23565,989674
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime23576,989889
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime23584,990084
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime23608,990826
static sqlite_uint64 g_start;g_start23617,991117
static sqlite_uint64 g_elapsed;g_elapsed23618,991147
#define TIMER_START TIMER_START23619,991179
#define TIMER_END TIMER_END23620,991229
#define TIMER_ELAPSED TIMER_ELAPSED23621,991289
#define TIMER_STARTTIMER_START23623,991331
#define TIMER_ENDTIMER_END23624,991351
#define TIMER_ELAPSED TIMER_ELAPSED23625,991369
#define SimulateIOErrorBenign(SimulateIOErrorBenign23641,991969
#define SimulateIOError(SimulateIOError23642,992030
static void local_ioerr(){local_ioerr23646,992208
#define SimulateDiskfullError(SimulateDiskfullError23651,992348
#define SimulateIOErrorBenign(SimulateIOErrorBenign23663,992643
#define SimulateIOError(SimulateIOError23664,992676
#define SimulateDiskfullError(SimulateDiskfullError23665,992703
#define OpenCounter(OpenCounter23673,992908
#define OpenCounter(OpenCounter23675,992967
#define SQLITE_OS_WIN_HSQLITE_OS_WIN_H23703,993903
# define SQLITE_OS_WINNT SQLITE_OS_WINNT23733,994708
# define SQLITE_OS_WINCE SQLITE_OS_WINCE23741,994855
# define SQLITE_OS_WINCE SQLITE_OS_WINCE23743,994888
# define SQLITE_OS_WINRT SQLITE_OS_WINRT23751,995057
# define SQLITE_WIN32_VOLATILESQLITE_WIN32_VOLATILE23759,995206
# define SQLITE_WIN32_VOLATILE SQLITE_WIN32_VOLATILE23761,995243
# define SQLITE_OS_WIN_THREADS SQLITE_OS_WIN_THREADS23770,995554
# define SQLITE_OS_WIN_THREADS SQLITE_OS_WIN_THREADS23772,995593
struct sqlite3_mutex {sqlite3_mutex23790,996030
  CRITICAL_SECTION mutex;    /* Mutex controlling the lock */mutex23791,996053
  int id;                    /* Mutex type */id23792,996115
  volatile int nRef;         /* Number of enterances */nRef23794,996181
  volatile DWORD owner;      /* Thread holding this mutex */owner23795,996237
  volatile int trace;        /* True to trace changes */trace23796,996298
#define SQLITE_W32_MUTEX_INITIALIZER SQLITE_W32_MUTEX_INITIALIZER23805,996544
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER23808,996608
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER23811,996739
static int winMutexHeld(sqlite3_mutex *p){winMutexHeld23819,996964
static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){winMutexNotheld223823,997065
static int winMutexNotheld(sqlite3_mutex *p){winMutexNotheld23827,997164
SQLITE_PRIVATE void sqlite3MemoryBarrier(void){sqlite3MemoryBarrier23838,997494
static sqlite3_mutex winMutex_staticMutexes[] = {winMutex_staticMutexes23853,997814
static int winMutex_isInit = 0;winMutex_isInit23868,998215
static int winMutex_isNt = -1; /* <0 means "need to query" */winMutex_isNt23869,998247
static LONG SQLITE_WIN32_VOLATILE winMutex_lock = 0;winMutex_lock23875,998524
static int winMutexInit(void){winMutexInit23880,998708
static int winMutexEnd(void){winMutexEnd23902,999326
static sqlite3_mutex *winMutexAlloc(int iType){winMutexAlloc23965,1001882
static void winMutexFree(sqlite3_mutex *p){winMutexFree24013,1002883
static void winMutexEnter(sqlite3_mutex *p){winMutexEnter24037,1003812
static int winMutexTry(sqlite3_mutex *p){winMutexTry24060,1004376
static void winMutexLeave(sqlite3_mutex *p){winMutexLeave24110,1005989
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){sqlite3DefaultMutex24132,1006545
SQLITE_API int sqlite3_release_memory(int n){sqlite3_release_memory24178,1007787
typedef struct ScratchFreeslot {ScratchFreeslot24194,1008241
  struct ScratchFreeslot *pNext;   /* Next unused scratch buffer */pNext24195,1008274
} ScratchFreeslot;ScratchFreeslot24196,1008342
static SQLITE_WSD struct Mem0Global {Mem0Global24201,1008431
  sqlite3_mutex *mutex;         /* Mutex to serialize access */mutex24202,1008469
  sqlite3_int64 alarmThreshold; /* The soft heap limit */alarmThreshold24203,1008533
  void *pScratchEnd;pScratchEnd24211,1008834
  ScratchFreeslot *pScratchFree;pScratchFree24212,1008855
  u32 nScratchFree;nScratchFree24213,1008888
  int nearlyFull;nearlyFull24219,1009025
} mem0 = { 0, 0, 0, 0, 0, 0 };mem024220,1009043
#define mem0 mem024222,1009075
SQLITE_PRIVATE sqlite3_mutex *sqlite3MallocMutex(void){sqlite3MallocMutex24227,1009192
SQLITE_API int sqlite3_memory_alarm(sqlite3_memory_alarm24237,1009454
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){sqlite3_soft_heap_limit6424253,1009788
SQLITE_API void sqlite3_soft_heap_limit(int n){sqlite3_soft_heap_limit24275,1010459
SQLITE_PRIVATE int sqlite3MallocInit(void){sqlite3MallocInit24283,1010614
SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){sqlite3HeapNearlyFull24327,1012077
SQLITE_PRIVATE void sqlite3MallocEnd(void){sqlite3MallocEnd24334,1012209
SQLITE_API sqlite3_int64 sqlite3_memory_used(void){sqlite3_memory_used24344,1012464
SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){sqlite3_memory_highwater24355,1012776
static void sqlite3MallocAlarm(int nByte){sqlite3MallocAlarm24364,1012980
static void mallocWithAlarm(int n, void **pp){mallocWithAlarm24375,1013265
SQLITE_PRIVATE void *sqlite3Malloc(u64 n){sqlite3Malloc24417,1014611
SQLITE_API void *sqlite3_malloc(int n){sqlite3_malloc24442,1015533
SQLITE_API void *sqlite3_malloc64(sqlite3_uint64 n){sqlite3_malloc6424448,1015688
static int scratchAllocOut = 0;scratchAllocOut24462,1016153
SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){sqlite3ScratchMalloc24474,1016544
SQLITE_PRIVATE void sqlite3ScratchFree(void *p){sqlite3ScratchFree24511,1017640
static int isLookaside(sqlite3 *db, void *p){isLookaside24558,1019374
#define isLookaside(isLookaside24562,1019497
SQLITE_PRIVATE int sqlite3MallocSize(void *p){sqlite3MallocSize24569,1019645
SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){sqlite3DbMallocSize24573,1019788
SQLITE_API sqlite3_uint64 sqlite3_msize(void *p){sqlite3_msize24591,1020371
SQLITE_API void sqlite3_free(void *p){sqlite3_free24600,1020646
static SQLITE_NOINLINE void measureAllocationSize(sqlite3 *db, void *p){measureAllocationSize24619,1021253
SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){sqlite3DbFree24627,1021467
SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, u64 nBytes){sqlite3Realloc24657,1022357
SQLITE_API void *sqlite3_realloc(void *pOld, int n){sqlite3_realloc24709,1024119
SQLITE_API void *sqlite3_realloc64(void *pOld, sqlite3_uint64 n){sqlite3_realloc6424716,1024328
SQLITE_PRIVATE void *sqlite3MallocZero(u64 n){sqlite3MallocZero24727,1024543
SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, u64 n){sqlite3DbMallocZero24739,1024797
static SQLITE_NOINLINE void *dbMallocRawFinish(sqlite3 *db, u64 n){dbMallocRawFinish24751,1025113
SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, u64 n){sqlite3DbMallocRaw24783,1026271
SQLITE_PRIVATE void *sqlite3DbMallocRawNN(sqlite3 *db, u64 n){sqlite3DbMallocRawNN24790,1026471
SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, u64 n){sqlite3DbRealloc24832,1027634
static SQLITE_NOINLINE void *dbReallocFinish(sqlite3 *db, void *p, u64 n){dbReallocFinish24839,1027910
SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, u64 n){sqlite3DbReallocOrFree24869,1028825
SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){sqlite3DbStrDup24885,1029344
SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, u64 n){sqlite3DbStrNDup24898,1029584
SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zNew){sqlite3SetString24916,1029954
SQLITE_PRIVATE void sqlite3OomFault(sqlite3 *db){sqlite3OomFault24927,1030335
SQLITE_PRIVATE void sqlite3OomClear(sqlite3 *db){sqlite3OomClear24944,1030750
static SQLITE_NOINLINE int apiOomError(sqlite3 *db){apiOomError24956,1031052
SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){sqlite3ApiExit24974,1031687
#define etRADIX etRADIX25006,1032795
#define etFLOAT etFLOAT25007,1032866
#define etEXP etEXP25008,1032916
#define etGENERIC etGENERIC25009,1032980
#define etSIZE etSIZE25010,1033061
#define etSTRING etSTRING25011,1033140
#define etDYNSTRING etDYNSTRING25012,1033182
#define etPERCENT etPERCENT25013,1033246
#define etCHARX etCHARX25014,1033295
#define etSQLESCAPE etSQLESCAPE25016,1033402
#define etSQLESCAPE2 etSQLESCAPE225017,1033463
#define etTOKEN etTOKEN25019,1033605
#define etSRCLIST etSRCLIST25020,1033666
#define etPOINTER etPOINTER25021,1033719
#define etSQLESCAPE3 etSQLESCAPE325022,1033767
#define etORDINAL etORDINAL25023,1033829
#define etINVALID etINVALID25025,1033905
typedef unsigned char etByte;etByte25031,1034019
typedef struct et_info {   /* Information about each format field */et_info25037,1034173
  char fmttype;            /* The format field code letter */fmttype25038,1034242
  etByte base;             /* The base for radix conversion */base25039,1034304
  etByte flags;            /* One or more of FLAG_ constants below */flags25040,1034367
  etByte type;             /* Conversion paradigm */type25041,1034437
  etByte charset;          /* Offset into aDigits[] of the digits string */charset25042,1034490
  etByte prefix;           /* Offset into aPrefix[] of the prefix string */prefix25043,1034566
} et_info;et_info25044,1034642
#define FLAG_SIGNED FLAG_SIGNED25049,1034696
#define FLAG_STRING FLAG_STRING25050,1034768
static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";aDigits25057,1034952
static const char aPrefix[] = "-x0\000X0";aPrefix25058,1035018
static const et_info fmtinfo[] = {fmtinfo25059,1035061
static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){et_getdigit25107,1036699
static void setStrAccumError(StrAccum *p, u8 eError){setStrAccumError25123,1037024
static sqlite3_int64 getIntArg(PrintfArguments *p){getIntArg25132,1037246
static double getDoubleArg(PrintfArguments *p){getDoubleArg25136,1037388
static char *getTextArg(PrintfArguments *p){getTextArg25140,1037529
# define SQLITE_PRINT_BUF_SIZE SQLITE_PRINT_BUF_SIZE25151,1037831
#define etBUFSIZE etBUFSIZE25153,1037872
SQLITE_PRIVATE void sqlite3VXPrintf(sqlite3VXPrintf25158,1038012
static int sqlite3StrAccumEnlarge(StrAccum *p, int N){sqlite3StrAccumEnlarge25744,1057569
SQLITE_PRIVATE void sqlite3AppendChar(StrAccum *p, int N, char c){sqlite3AppendChar25796,1059088
static void SQLITE_NOINLINE enlargeAndAppend(StrAccum *p, const char *z, int N){enlargeAndAppend25813,1059727
SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){sqlite3StrAccumAppend25826,1060124
SQLITE_PRIVATE void sqlite3StrAccumAppendAll(StrAccum *p, const char *z){sqlite3StrAccumAppendAll25843,1060596
static SQLITE_NOINLINE char *strAccumFinishRealloc(StrAccum *p){strAccumFinishRealloc25853,1060901
SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){sqlite3StrAccumFinish25864,1061246
SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){sqlite3StrAccumReset25878,1061579
SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, sqlite3 *db, char *zBase, int n, int mx){sqlite3StrAccumInit25901,1062426
SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){sqlite3VMPrintf25915,1062765
SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){sqlite3MPrintf25935,1063344
SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){sqlite3_vmprintf25948,1063645
SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){sqlite3_mprintf25972,1064230
SQLITE_API char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){sqlite3_vsnprintf25997,1065008
SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){sqlite3_snprintf26012,1065409
static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){renderLogMsg26035,1066267
SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){sqlite3_log26048,1066764
SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){sqlite3DebugPrintf26063,1067278
SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, const char *zFormat, ...){sqlite3XPrintf26082,1067766
static TreeView *sqlite3TreeViewPush(TreeView *p, u8 moreToFollow){sqlite3TreeViewPush26117,1068887
static void sqlite3TreeViewPop(TreeView *p){sqlite3TreeViewPop26133,1069273
static void sqlite3TreeViewLine(TreeView *p, const char *zFormat, ...){sqlite3TreeViewLine26143,1069512
static void sqlite3TreeViewItem(TreeView *p, const char *zLabel,u8 moreFollows){sqlite3TreeViewItem26168,1070243
SQLITE_PRIVATE void sqlite3TreeViewWith(TreeView *pView, const With *pWith, u8 moreToFollow){sqlite3TreeViewWith26176,1070475
SQLITE_PRIVATE void sqlite3TreeViewSelect(TreeView *pView, const Select *p, u8 moreToFollow){sqlite3TreeViewSelect26216,1071694
SQLITE_PRIVATE void sqlite3TreeViewExpr(TreeView *pView, const Expr *pExpr, u8 moreToFollow){sqlite3TreeViewExpr26324,1075197
SQLITE_PRIVATE void sqlite3TreeViewBareExprList(sqlite3TreeViewBareExprList26574,1083095
SQLITE_PRIVATE void sqlite3TreeViewExprList(sqlite3TreeViewExprList26596,1083722
static SQLITE_WSD struct sqlite3PrngType {sqlite3PrngType26634,1084936
  unsigned char isInit;          /* True if initialized */isInit26635,1084979
  unsigned char i, j;            /* State variables */i26636,1085038
  unsigned char i, j;            /* State variables */j26636,1085038
  unsigned char s[256];          /* State variables */s26637,1085093
} sqlite3Prng;sqlite3Prng26638,1085148
SQLITE_API void sqlite3_randomness(int N, void *pBuf){sqlite3_randomness26643,1085196
# define wsdPrng wsdPrng26655,1085761
static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;sqlite3SavedPrng26729,1087652
SQLITE_PRIVATE void sqlite3PrngSaveState(void){sqlite3PrngSaveState26730,1087711
SQLITE_PRIVATE void sqlite3PrngRestoreState(void){sqlite3PrngRestoreState26737,1087905
#define SQLITE_THREADS_IMPLEMENTED SQLITE_THREADS_IMPLEMENTED26785,1089702
struct SQLiteThread {SQLiteThread26789,1089834
  pthread_t tid;                 /* Thread ID */tid26790,1089856
  int done;                      /* Set to true when thread finishes */done26791,1089905
  void *pOut;                    /* Result returned by the thread */pOut26792,1089977
  void *(*xTask)(void*);         /* The thread routine */xTask26793,1090046
  void *pIn;                     /* Argument to the thread */pIn26794,1090104
SQLITE_PRIVATE int sqlite3ThreadCreate(sqlite3ThreadCreate26798,1090196
SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){sqlite3ThreadJoin26835,1091266
#define SQLITE_THREADS_IMPLEMENTED SQLITE_THREADS_IMPLEMENTED26857,1091835
struct SQLiteThread {SQLiteThread26861,1091961
  void *tid;               /* The thread handle */tid26862,1091983
  unsigned id;             /* The thread identifier */id26863,1092034
  void *(*xTask)(void*);   /* The routine to run as a thread */xTask26864,1092089
  void *pIn;               /* Argument to xTask */pIn26865,1092153
  void *pResult;           /* Result of xTask */pResult26866,1092204
static unsigned __stdcall sqlite3ThreadProc(sqlite3ThreadProc26870,1092305
SQLITE_PRIVATE int sqlite3ThreadCreate(sqlite3ThreadCreate26893,1092898
SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){sqlite3ThreadJoin26931,1094120
struct SQLiteThread {SQLiteThread26966,1095169
  void *(*xTask)(void*);   /* The routine to run as a thread */xTask26967,1095191
  void *pIn;               /* Argument to xTask */pIn26968,1095255
  void *pResult;           /* Result of xTask */pResult26969,1095306
SQLITE_PRIVATE int sqlite3ThreadCreate(sqlite3ThreadCreate26973,1095385
SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){sqlite3ThreadJoin26997,1095998
SQLITE_PRIVATE const int sqlite3one = 1;sqlite3one27069,1098212
static const unsigned char sqlite3Utf8Trans1[] = {sqlite3Utf8Trans127076,1098410
#define WRITE_UTF8(WRITE_UTF827088,1098866
#define WRITE_UTF16LE(WRITE_UTF16LE27108,1099895
#define WRITE_UTF16BE(WRITE_UTF16BE27120,1100598
#define READ_UTF16LE(READ_UTF16LE27132,1101301
#define READ_UTF16BE(READ_UTF16BE27142,1101880
#define READ_UTF8(READ_UTF827179,1103562
SQLITE_PRIVATE u32 sqlite3Utf8Read(sqlite3Utf8Read27190,1104176
SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){sqlite3VdbeMemTranslate27226,1105146
SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){sqlite3VdbeMemHandleBom27369,1109359
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){sqlite3Utf8CharLen27407,1110348
SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){sqlite3Utf8To827437,1111079
SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){sqlite3Utf16to827461,1111663
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){sqlite3Utf16ByteLen27482,1112330
SQLITE_PRIVATE void sqlite3UtfSelfTest(void){sqlite3UtfSelfTest27507,1112929
SQLITE_PRIVATE void sqlite3Coverage(int x){sqlite3Coverage27585,1114893
SQLITE_PRIVATE int sqlite3FaultSim(int iTest){sqlite3FaultSim27603,1115449
SQLITE_PRIVATE int sqlite3IsNaN(double x){sqlite3IsNaN27616,1115878
SQLITE_PRIVATE int sqlite3Strlen30(const char *z){sqlite3Strlen3027664,1117688
SQLITE_PRIVATE char *sqlite3ColumnType(Column *pCol, char *zDflt){sqlite3ColumnType27676,1118051
static SQLITE_NOINLINE void  sqlite3ErrorFinish(sqlite3 *db, int err_code){sqlite3ErrorFinish27686,1118396
SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code){sqlite3Error27696,1118747
SQLITE_PRIVATE void sqlite3SystemError(sqlite3 *db, int rc){sqlite3SystemError27706,1119040
SQLITE_PRIVATE void sqlite3ErrorWithMsg(sqlite3 *db, int err_code, const char *zFormat, ...){sqlite3ErrorWithMsg27735,1120011
SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){sqlite3ErrorMsg27768,1121234
SQLITE_PRIVATE void sqlite3Dequote(char *z){sqlite3Dequote27802,1122278
SQLITE_PRIVATE void sqlite3TokenInit(Token *p, char *z){sqlite3TokenInit27828,1122727
#define UpperToLower UpperToLower27834,1122856
SQLITE_API int sqlite3_stricmp(const char *zLeft, const char *zRight){sqlite3_stricmp27846,1123359
SQLITE_PRIVATE int sqlite3StrICmp(const char *zLeft, const char *zRight){sqlite3StrICmp27854,1123561
SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){sqlite3_strnicmp27867,1123859
SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){sqlite3AtoF27902,1125077
static int compare2pow63(const char *zNum, int incr){compare2pow6328092,1130681
SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){sqlite3Atoi6428128,1131816
SQLITE_PRIVATE int sqlite3DecOrHexToI64(const char *z, i64 *pOut){sqlite3DecOrHexToI6428214,1134511
SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){sqlite3GetInt3228244,1135388
SQLITE_PRIVATE int sqlite3Atoi(const char *z){sqlite3Atoi28302,1136610
static int SQLITE_NOINLINE putVarint64(unsigned char *p, u64 v){putVarint6428337,1137550
SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){sqlite3PutVarint28361,1138012
#define SLOT_2_0 SLOT_2_028383,1138554
#define SLOT_4_2_0 SLOT_4_2_028384,1138586
SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){sqlite3GetVarint28391,1138761
SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){sqlite3GetVarint3228562,1141983
SQLITE_PRIVATE int sqlite3VarintLen(u64 v){sqlite3VarintLen28685,1144530
SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){sqlite3Get4byte28695,1144709
SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){sqlite3Put4byte28713,1145173
SQLITE_PRIVATE u8 sqlite3HexToInt(int h){sqlite3HexToInt28737,1145756
SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){sqlite3HexToBlob28755,1146300
static void logBadConnection(const char *zType){logBadConnection28776,1146903
SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){sqlite3SafetyCheckOk28797,1147773
SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){sqlite3SafetyCheckSickOrOk28814,1148132
SQLITE_PRIVATE int sqlite3AddInt64(i64 *pA, i64 iB){sqlite3AddInt6428834,1148722
SQLITE_PRIVATE int sqlite3SubInt64(i64 *pA, i64 iB){sqlite3SubInt6428854,1149367
SQLITE_PRIVATE int sqlite3MulInt64(i64 *pA, i64 iB){sqlite3MulInt6428869,1149755
SQLITE_PRIVATE int sqlite3AbsInt32(int x){sqlite3AbsInt3228895,1150443
SQLITE_PRIVATE void sqlite3FileSuffix3(const char *zBaseFilename, char *z){sqlite3FileSuffix328919,1151253
SQLITE_PRIVATE LogEst sqlite3LogEstAdd(LogEst a, LogEst b){sqlite3LogEstAdd28938,1151774
SQLITE_PRIVATE LogEst sqlite3LogEst(u64 x){sqlite3LogEst28965,1152601
SQLITE_PRIVATE LogEst sqlite3LogEstFromDouble(double x){sqlite3LogEstFromDouble28983,1153069
SQLITE_PRIVATE u64 sqlite3LogEstToInt(LogEst x){sqlite3LogEstToInt29004,1153663
SQLITE_PRIVATE VList *sqlite3VListAdd(sqlite3VListAdd29058,1155628
SQLITE_PRIVATE const char *sqlite3VListNumToName(VList *pIn, int iVal){sqlite3VListNumToName29096,1156910
SQLITE_PRIVATE int sqlite3VListNameToNum(VList *pIn, const char *zName, int nName){sqlite3VListNameToNum29112,1157270
SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){sqlite3HashInit29149,1158422
SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){sqlite3HashClear29161,1158726
static unsigned int strHash(const char *z){strHash29181,1159118
static void insertElement(insertElement29198,1159671
static int rehash(Hash *pH, unsigned int new_size){rehash29232,1160648
static HashElem *findElementWithHash(findElementWithHash29272,1162219
static void removeElementGivenHash(removeElementGivenHash29306,1163161
SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey){sqlite3HashFind29341,1164037
SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){sqlite3HashInsert29365,1164913
# define OpHelp(OpHelp29407,1166305
# define OpHelp(OpHelp29409,1166337
SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){sqlite3OpcodeName29411,1166363
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE29649,1178359
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE29651,1178409
# define HAVE_PREAD HAVE_PREAD29657,1178544
# define HAVE_PWRITE HAVE_PWRITE29658,1178566
# undef USE_PREADUSE_PREAD29661,1178648
# define USE_PREAD64 USE_PREAD6429662,1178666
# undef USE_PREAD64USE_PREAD6429664,1178739
# define USE_PREAD USE_PREAD29665,1178759
#    define HAVE_GETHOSTUUID HAVE_GETHOSTUUID29692,1179489
#define SQLITE_FSFLAGS_IS_MSDOS SQLITE_FSFLAGS_IS_MSDOS29716,1179879
# define SQLITE_UNIX_THREADS SQLITE_UNIX_THREADS29724,1180081
# define SQLITE_DEFAULT_FILE_PERMISSIONS SQLITE_DEFAULT_FILE_PERMISSIONS29731,1180214
# define SQLITE_DEFAULT_PROXYDIR_PERMISSIONS SQLITE_DEFAULT_PROXYDIR_PERMISSIONS29738,1180370
#define MAX_PATHNAME MAX_PATHNAME29744,1180468
#define SQLITE_MAX_SYMLINKS SQLITE_MAX_SYMLINKS29749,1180536
#define osGetpid(osGetpid29753,1180665
#define IS_LOCK_ERROR(IS_LOCK_ERROR29759,1180838
typedef struct unixShm unixShm;               /* Connection shared memory */unixShm29762,1180931
typedef struct unixShmNode unixShmNode;       /* Shared memory instance */unixShmNode29763,1181008
typedef struct unixInodeInfo unixInodeInfo;   /* An i-node */unixInodeInfo29764,1181083
typedef struct UnixUnusedFd UnixUnusedFd;     /* An unused file descriptor */UnixUnusedFd29765,1181145
struct UnixUnusedFd {UnixUnusedFd29773,1181497
  int fd;                   /* File descriptor to close */fd29774,1181519
  int flags;                /* Flags this file descriptor was opened with */flags29775,1181578
  UnixUnusedFd *pNext;      /* Next unused file descriptor on same file */pNext29776,1181655
typedef struct unixFile unixFile;unixFile29783,1181839
struct unixFile {unixFile29784,1181873
  sqlite3_io_methods const *pMethod;  /* Always the first entry */pMethod29785,1181891
  sqlite3_vfs *pVfs;                  /* The VFS that created this unixFile */pVfs29786,1181958
  unixInodeInfo *pInode;              /* Info about locks on this inode */pInode29787,1182037
  int h;                              /* The file descriptor */h29788,1182112
  unsigned char eFileLock;            /* The type of lock held on this fd */eFileLock29789,1182176
  unsigned short int ctrlFlags;       /* Behavioral bits.  UNIXFILE_* flags */ctrlFlags29790,1182253
  int lastErrno;                      /* The unix errno from last I/O error */lastErrno29791,1182332
  void *lockingContext;               /* Locking style specific state */lockingContext29792,1182411
  UnixUnusedFd *pUnused;              /* Pre-allocated UnixUnusedFd */pUnused29793,1182484
  const char *zPath;                  /* Name of the file */zPath29794,1182555
  unixShm *pShm;                      /* Shared memory segment information */pShm29795,1182616
  int szChunk;                        /* Configured by FCNTL_CHUNK_SIZE */szChunk29796,1182694
  int nFetchOut;                      /* Number of outstanding xFetch refs */nFetchOut29798,1182796
  sqlite3_int64 mmapSize;             /* Usable size of mapping at pMapRegion */mmapSize29799,1182874
  sqlite3_int64 mmapSizeActual;       /* Actual size of mapping at pMapRegion */mmapSizeActual29800,1182955
  sqlite3_int64 mmapSizeMax;          /* Configured FCNTL_MMAP_SIZE value */mmapSizeMax29801,1183036
  void *pMapRegion;                   /* Memory mapped region */pMapRegion29802,1183113
  int sectorSize;                     /* Device sector size */sectorSize29805,1183203
  int deviceCharacteristics;          /* Precomputed device characteristics */deviceCharacteristics29806,1183266
  int openFlags;                      /* The flags specified at open() */openFlags29809,1183384
  unsigned fsFlags;                   /* cached details from statfs() */fsFlags29812,1183519
  struct vxworksFileId *pId;          /* Unique file ID */pId29815,1183614
  unsigned char transCntrChng;   /* True if the transaction counter changed */transCntrChng29825,1184095
  unsigned char dbUpdate;        /* True if any part of database file changed */dbUpdate29826,1184174
  unsigned char inNormalWrite;   /* True if in a normal write operation */inNormalWrite29827,1184255
  char aPadding[32];aPadding29835,1184497
static pid_t randomnessPid = 0;randomnessPid29843,1184743
#define UNIXFILE_EXCL UNIXFILE_EXCL29848,1184836
#define UNIXFILE_RDONLY UNIXFILE_RDONLY29849,1184914
#define UNIXFILE_PERSIST_WAL UNIXFILE_PERSIST_WAL29850,1184982
# define UNIXFILE_DIRSYNC UNIXFILE_DIRSYNC29852,1185077
# define UNIXFILE_DIRSYNC UNIXFILE_DIRSYNC29854,1185149
#define UNIXFILE_PSOW UNIXFILE_PSOW29856,1185190
#define UNIXFILE_DELETE UNIXFILE_DELETE29857,1185267
#define UNIXFILE_URI UNIXFILE_URI29858,1185327
#define UNIXFILE_NOLOCK UNIXFILE_NOLOCK29859,1185408
#define _OS_COMMON_H__OS_COMMON_H_29886,1186355
#define SQLITE_HWTIME_HSQLITE_HWTIME_H29925,1187604
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime29938,1188001
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec29946,1188209
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime29957,1188424
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime29965,1188619
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime29989,1189361
static sqlite_uint64 g_start;g_start29998,1189652
static sqlite_uint64 g_elapsed;g_elapsed29999,1189682
#define TIMER_START TIMER_START30000,1189714
#define TIMER_END TIMER_END30001,1189764
#define TIMER_ELAPSED TIMER_ELAPSED30002,1189824
#define TIMER_STARTTIMER_START30004,1189866
#define TIMER_ENDTIMER_END30005,1189886
#define TIMER_ELAPSED TIMER_ELAPSED30006,1189904
#define SimulateIOErrorBenign(SimulateIOErrorBenign30022,1190504
#define SimulateIOError(SimulateIOError30023,1190565
static void local_ioerr(){local_ioerr30027,1190743
#define SimulateDiskfullError(SimulateDiskfullError30032,1190883
#define SimulateIOErrorBenign(SimulateIOErrorBenign30044,1191178
#define SimulateIOError(SimulateIOError30045,1191211
#define SimulateDiskfullError(SimulateDiskfullError30046,1191238
#define OpenCounter(OpenCounter30054,1191443
#define OpenCounter(OpenCounter30056,1191502
# define O_LARGEFILE O_LARGEFILE30068,1191846
# undef O_LARGEFILEO_LARGEFILE30071,1191902
# define O_LARGEFILE O_LARGEFILE30072,1191922
# define O_NOFOLLOW O_NOFOLLOW30075,1191971
# define O_BINARY O_BINARY30078,1192017
#define threadid threadid30086,1192171
#define threadid threadid30088,1192209
#  define HAVE_MREMAP HAVE_MREMAP30096,1192384
#  define HAVE_MREMAP HAVE_MREMAP30098,1192415
# define lseek lseek30107,1192627
static int posixOpen(const char *zFile, int flags, int mode){posixOpen30118,1193004
static struct unix_syscall {unix_syscall30132,1193473
  const char *zName;            /* Name of the system call */zName30133,1193502
  sqlite3_syscall_ptr pCurrent; /* Current value of the system call */pCurrent30134,1193564
  sqlite3_syscall_ptr pDefault; /* Default value */pDefault30135,1193635
#define osOpen osOpen30138,1193763
#define osClose osClose30141,1193895
#define osAccess osAccess30144,1194011
#define osGetcwd osGetcwd30147,1194139
#define osStat osStat30150,1194266
#define osFstat(osFstat30160,1194667
#define osFtruncate osFtruncate30167,1194901
#define osFcntl osFcntl30170,1195023
#define osRead osRead30173,1195147
#define osPread osPread30180,1195406
#define osPread64 osPread6430187,1195642
#define osWrite osWrite30190,1195782
#define osPwrite osPwrite30197,1196048
#define osPwrite64 osPwrite6430205,1196313
#define osFchmod osFchmod30209,1196488
#define osFallocate osFallocate30216,1196752
#define osUnlink osUnlink30219,1196886
#define osOpenDirectory osOpenDirectory30222,1197022
#define osMkdir osMkdir30225,1197160
#define osRmdir osRmdir30228,1197296
#define osFchown osFchown30235,1197526
#define osGeteuid osGeteuid30238,1197659
#define osMmap osMmap30245,1197915
#define osMunmap osMunmap30252,1198192
#define osMremap osMremap30259,1198470
#define osGetpagesize osGetpagesize30266,1198746
#define osReadlink osReadlink30273,1198973
#define osLstat osLstat30280,1199218
} aSyscall[] = {aSyscall30136,1193687
static int robustFchown(int fd, uid_t uid, gid_t gid){robustFchown30290,1199533
static int unixSetSystemCall(unixSetSystemCall30304,1199930
static sqlite3_syscall_ptr unixGetSystemCall(unixGetSystemCall30347,1201215
static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){unixNextSystemCall30366,1201742
# define SQLITE_MINIMUM_FILE_DESCRIPTOR SQLITE_MINIMUM_FILE_DESCRIPTOR30387,1202333
static int robust_open(const char *z, int f, mode_t m){robust_open30407,1203212
static void unixEnterMutex(void){unixEnterMutex30458,1204586
static void unixLeaveMutex(void){unixLeaveMutex30461,1204690
static int unixMutexHeld(void) {unixMutexHeld30465,1204814
static const char *azFileLock(int eFileLock){azFileLock30477,1205125
static int lockTrace(int fd, int op, struct flock *p){lockTrace30498,1205725
#undef osFcntlosFcntl30545,1206977
#define osFcntl osFcntl30546,1206992
static int robust_ftruncate(int h, sqlite3_int64 sz){robust_ftruncate30556,1207283
static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {sqliteErrorFromPosixError30581,1208201
struct vxworksFileId {vxworksFileId30623,1209722
  struct vxworksFileId *pNext;  /* Next in a list of them all */pNext30624,1209745
  int nRef;                     /* Number of references to this one */nRef30625,1209810
  int nName;                    /* Length of the zCanonicalName[] string */nName30626,1209881
  char *zCanonicalName;         /* Canonical filename */zCanonicalName30627,1209957
static struct vxworksFileId *vxworksFileList = 0;vxworksFileList30635,1210118
static int vxworksSimplifyName(char *z, int n){vxworksSimplifyName30650,1210562
static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){vxworksFindFileId30684,1211455
static void vxworksReleaseFileId(struct vxworksFileId *pId){vxworksReleaseFileId30726,1212855
struct unixFileId {unixFileId30838,1218421
  dev_t dev;                  /* Device number */dev30839,1218441
  struct vxworksFileId *pId;  /* Unique file ID for vxworks. */pId30841,1218506
  u64 ino;                   /* Inode number */ino30850,1218992
struct unixInodeInfo {unixInodeInfo30863,1219443
  struct unixFileId fileId;       /* The lookup key */fileId30864,1219466
  int nShared;                    /* Number of SHARED locks held */nShared30865,1219521
  unsigned char eFileLock;        /* One of SHARED_LOCK, RESERVED_LOCK etc. */eFileLock30866,1219589
  unsigned char bProcessLock;     /* An exclusive process lock is held */bProcessLock30867,1219668
  int nRef;                       /* Number of pointers to this structure */nRef30868,1219742
  unixShmNode *pShmNode;          /* Shared memory associated with this inode */pShmNode30869,1219819
  int nLock;                      /* Number of outstanding file locks */nLock30870,1219900
  UnixUnusedFd *pUnused;          /* Unused file descriptors to close */pUnused30871,1219973
  unixInodeInfo *pNext;           /* List of all unixInodeInfo objects */pNext30872,1220046
  unixInodeInfo *pPrev;           /*    .... doubly linked */pPrev30873,1220120
  unsigned long long sharedByte;  /* for AFP simulated shared lock */sharedByte30875,1220214
  sem_t *pSem;                    /* Named POSIX semaphore */pSem30878,1220306
  char aSemName[MAX_PATHNAME+2];  /* Name of that semaphore */aSemName30879,1220368
static unixInodeInfo *inodeList = 0;inodeList30886,1220489
#define unixLogError(unixLogError30904,1221188
static int unixLogErrorAtLine(unixLogErrorAtLine30905,1221255
static void robust_close(unixFile *pFile, int h, int lineno){robust_close30970,1223705
static void storeLastErrno(unixFile *pFile, int error){storeLastErrno30981,1224024
static void closePendingFds(unixFile *pFile){closePendingFds30988,1224195
static void releaseInodeInfo(unixFile *pFile){releaseInodeInfo31006,1224667
static int findInodeInfo(findInodeInfo31040,1225654
static int fileHasMoved(unixFile *pFile){fileHasMoved31123,1228364
static void verifyDbFile(unixFile *pFile){verifyDbFile31144,1228938
static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){unixCheckReservedLock31177,1229928
static int unixFileLock(unixFile *pFile, struct flock *pLock){unixFileLock31237,1231878
static int unixLock(sqlite3_file *id, int eFileLock){unixLock31287,1233380
static void setPendingFd(unixFile *pFile){setPendingFd31514,1241162
static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){posixUnlock31536,1242007
static int unixUnlock(sqlite3_file *id, int eFileLock){unixUnlock31696,1247422
static int closeUnixFile(sqlite3_file *id){closeUnixFile31718,1248152
static int unixClose(sqlite3_file *id){unixClose31753,1248934
static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){nolockCheckReservedLock31798,1250803
static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){nolockLock31803,1250943
static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){nolockUnlock31807,1251065
static int nolockClose(sqlite3_file *id) {nolockClose31815,1251215
#define DOTLOCK_SUFFIX DOTLOCK_SUFFIX31848,1252633
static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {dotlockCheckReservedLock31860,1253173
static int dotlockLock(sqlite3_file *id, int eFileLock) {dotlockLock31901,1254512
static int dotlockUnlock(sqlite3_file *id, int eFileLock) {dotlockUnlock31951,1255862
static int dotlockClose(sqlite3_file *id) {dotlockClose31994,1256955
static int robust_flock(int fd, int op){robust_flock32024,1258093
# define robust_flock(robust_flock32030,1258222
static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){flockCheckReservedLock32040,1258576
static int flockLock(sqlite3_file *id, int eFileLock) {flockLock32120,1260986
static int flockUnlock(sqlite3_file *id, int eFileLock) {flockUnlock32164,1262241
static int flockClose(sqlite3_file *id) {flockClose32198,1263066
static int semXCheckReservedLock(sqlite3_file *id, int *pResOut) {semXCheckReservedLock32227,1264209
static int semXLock(sqlite3_file *id, int eFileLock) {semXLock32294,1266266
static int semXUnlock(sqlite3_file *id, int eFileLock) {semXUnlock32327,1267141
static int semXClose(sqlite3_file *id) {semXClose32364,1268036
typedef struct afpLockingContext afpLockingContext;afpLockingContext32399,1269069
struct afpLockingContext {afpLockingContext32400,1269121
  int reserved;reserved32401,1269148
  const char *dbPath;             /* Name of the open file */dbPath32402,1269164
struct ByteRangeLockPB2ByteRangeLockPB232405,1269230
  unsigned long long offset;        /* offset to first byte to lock */offset32407,1269256
  unsigned long long length;        /* nbr of bytes to lock */length32408,1269327
  unsigned long long retRangeStart; /* nbr of 1st byte locked if successful */retRangeStart32409,1269390
  unsigned char unLockFlag;         /* 1 = unlock, 0 = lock */unLockFlag32410,1269469
  unsigned char startEndFlag;       /* 1=rel to end of fork, 0=rel to start */startEndFlag32411,1269532
  int fd;                           /* file desc to assoc this lock with */fd32412,1269611
#define afpfsByteRangeLock2FSCTL afpfsByteRangeLock2FSCTL32415,1269691
static int afpSetLock(afpSetLock32423,1269925
static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){afpCheckReservedLock32469,1271502
static int afpLock(sqlite3_file *id, int eFileLock){afpLock32539,1273581
static int afpUnlock(sqlite3_file *id, int eFileLock) {afpUnlock32721,1279787
static int afpClose(sqlite3_file *id) {afpClose32824,1283142
static int nfsUnlock(sqlite3_file *id, int eFileLock){nfsUnlock32866,1284717
static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){seekAndRead32902,1286239
static int unixRead(unixRead32951,1287532
static int seekAndWriteFd(seekAndWriteFd33010,1289218
static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){seekAndWrite33056,1290602
static int unixWrite(unixWrite33065,1290867
SQLITE_API int sqlite3_sync_count = 0;sqlite3_sync_count33150,1293332
SQLITE_API int sqlite3_fullsync_count = 0;sqlite3_fullsync_count33151,1293371
# define fdatasync fdatasync33161,1293760
# define HAVE_FULLFSYNC HAVE_FULLFSYNC33170,1293999
# define HAVE_FULLFSYNC HAVE_FULLFSYNC33172,1294031
static int full_fsync(int fd, int fullSync, int dataOnly){full_fsync33200,1295355
static int openDirectory(const char *zFilename, int *pFd){openDirectory33296,1298575
static int unixSync(sqlite3_file *id, int flags){unixSync33333,1299918
static int unixTruncate(sqlite3_file *id, i64 nByte){unixTruncate33383,1301456
static int unixFileSize(sqlite3_file *id, i64 *pSize){unixFileSize33433,1303059
static int fcntlSizeHint(unixFile *pFile, i64 nByte){fcntlSizeHint33471,1304199
static void unixModeBit(unixFile *pFile, unsigned char mask, int *pArg){unixModeBit33540,1306655
static int unixFileControl(sqlite3_file *id, int op, void *pArg){unixFileControl33556,1307024
static int unixSectorSize(sqlite3_file *NotUsed){unixSectorSize33652,1309967
static int unixSectorSize(sqlite3_file *id){unixSectorSize33664,1310235
static int unixDeviceCharacteristics(sqlite3_file *id){unixDeviceCharacteristics33751,1314290
static int unixGetpagesize(void){unixGetpagesize33772,1314829
struct unixShmNode {unixShmNode33815,1316227
  unixInodeInfo *pInode;     /* unixInodeInfo that owns this SHM node */pInode33816,1316248
  sqlite3_mutex *mutex;      /* Mutex to access this object */mutex33817,1316321
  char *zFilename;           /* Name of the mmapped file */zFilename33818,1316384
  int h;                     /* Open file descriptor */h33819,1316444
  int szRegion;              /* Size of shared-memory regions */szRegion33820,1316500
  u16 nRegion;               /* Size of array apRegion */nRegion33821,1316565
  u8 isReadonly;             /* True if read-only */isReadonly33822,1316623
  char **apRegion;           /* Array of mapped shared-memory regions */apRegion33823,1316676
  int nRef;                  /* Number of unixShm objects pointing to this */nRef33824,1316749
  unixShm *pFirst;           /* All unixShm objects pointing to this */pFirst33825,1316827
  u8 exclMask;               /* Mask of exclusive locks held */exclMask33827,1316919
  u8 sharedMask;             /* Mask of shared locks held */sharedMask33828,1316983
  u8 nextShmId;              /* Next available unixShm.id value */nextShmId33829,1317044
struct unixShm {unixShm33846,1317493
  unixShmNode *pShmNode;     /* The underlying unixShmNode object */pShmNode33847,1317510
  unixShm *pNext;            /* Next unixShm with the same unixShmNode */pNext33848,1317579
  u8 hasMutex;               /* True if holding the unixShmNode mutex */hasMutex33849,1317653
  u8 id;                     /* Id of this connection within its unixShmNode */id33850,1317726
  u16 sharedMask;            /* Mask of shared locks held */sharedMask33851,1317806
  u16 exclMask;              /* Mask of exclusive locks held */exclMask33852,1317867
#define UNIX_SHM_BASE UNIX_SHM_BASE33858,1317971
#define UNIX_SHM_DMS UNIX_SHM_DMS33859,1318051
static int unixShmSystemLock(unixShmSystemLock33867,1318296
static int unixShmRegionPerMap(void){unixShmRegionPerMap33946,1320789
static void unixShmPurge(unixFile *pFd){unixShmPurge33960,1321254
static int unixOpenSharedMemory(unixFile *pDbFd){unixOpenSharedMemory34020,1323902
static int unixShmMap(unixShmMap34169,1329357
static int unixShmLock(unixShmLock34307,1334110
static void unixShmBarrier(unixShmBarrier34419,1338011
static int unixShmUnmap(unixShmUnmap34435,1338520
# define unixShmMap unixShmMap34481,1339840
# define unixShmLock unixShmLock34482,1339866
# define unixShmBarrier unixShmBarrier34483,1339892
# define unixShmUnmap unixShmUnmap34484,1339918
static void unixUnmapfile(unixFile *pFd){unixUnmapfile34491,1340068
static void unixRemapfile(unixRemapfile34516,1340820
static int unixMapfile(unixFile *pFd, i64 nMap){unixMapfile34608,1343849
static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){unixFetch34645,1345032
static int unixUnfetch(sqlite3_file *fd, i64 iOff, void *p){unixUnfetch34676,1346006
#define IOMETHODS(IOMETHODS34744,1348383
static const sqlite3_io_methods *autolockIoFinderImpl(autolockIoFinderImpl34896,1355570
  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;autolockIoFinder34950,1357185
static const sqlite3_io_methods *vxworksIoFinderImpl(vxworksIoFinderImpl34960,1357542
  *(*const vxworksIoFinder)(const char*,unixFile*) = vxworksIoFinderImpl;vxworksIoFinder34986,1358289
typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);finder_type34993,1358462
static int fillInUnixFile(fillInUnixFile35006,1358864
static const char *unixTempFileDir(void){unixTempFileDir35193,1364903
static int unixGetTempname(int nBuf, char *zBuf){unixGetTempname35227,1365657
static UnixUnusedFd *findReusableFd(const char *zPath, int flags){findReusableFd35277,1367459
static int getFileMode(getFileMode35322,1369065
static int findCreateFileMode(findCreateFileMode35361,1370694
static int unixOpen(unixOpen35443,1373685
static int unixDelete(unixDelete35699,1382683
static int unixAccess(unixAccess35747,1384002
static int mkFullPathname(mkFullPathname35773,1384793
static int unixFullPathname(unixFullPathname35806,1385856
static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){unixDlOpen35896,1388470
static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){unixDlError35908,1388935
static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){unixDlSym35918,1389185
static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){unixDlClose35941,1390265
  #define unixDlOpen unixDlOpen35946,1390432
  #define unixDlError unixDlError35947,1390456
  #define unixDlSym unixDlSym35948,1390480
  #define unixDlClose unixDlClose35949,1390504
static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){unixRandomness35955,1390606
static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){unixSleep36002,1392354
SQLITE_API int sqlite3_current_time = 0;  /* Fake system time in seconds since 1970. */sqlite3_current_time36029,1393079
static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){unixCurrentTimeInt6436042,1393614
static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){unixCurrentTime36074,1394631
# define unixCurrentTime unixCurrentTime36083,1394840
static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){unixGetLastError36092,1395088
typedef struct proxyLockingContext proxyLockingContext;proxyLockingContext36263,1402476
struct proxyLockingContext {proxyLockingContext36264,1402532
  unixFile *conchFile;         /* Open conch file */conchFile36265,1402561
  char *conchFilePath;         /* Name of the conch file */conchFilePath36266,1402614
  unixFile *lockProxy;         /* Open proxy lock file */lockProxy36267,1402674
  char *lockProxyPath;         /* Name of the proxy lock file */lockProxyPath36268,1402732
  char *dbPath;                /* Name of the open file */dbPath36269,1402797
  int conchHeld;               /* 1 if the conch is held, -1 if lockless */conchHeld36270,1402856
  int nFails;                  /* Number of conch taking failures */nFails36271,1402932
  void *oldLockingContext;     /* Original lockingcontext to restore on close */oldLockingContext36272,1403001
  sqlite3_io_methods const *pOldMethod;     /* Original I/O methods for close */pOldMethod36273,1403082
static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){proxyGetLockPath36281,1403347
static int proxyCreateLockPath(const char *lockPath){proxyCreateLockPath36322,1404394
static int proxyCreateUnixFile(proxyCreateUnixFile36362,1405745
SQLITE_API int sqlite3_hostid_num = 0;sqlite3_hostid_num36446,1408031
#define PROXY_HOSTIDLEN PROXY_HOSTIDLEN36449,1408078
static int proxyGetHostID(unsigned char *pHostID, int *pError){proxyGetHostID36459,1408405
#define PROXY_CONCHVERSION PROXY_CONCHVERSION36488,1409133
#define PROXY_HEADERLEN PROXY_HEADERLEN36489,1409207
#define PROXY_PATHINDEX PROXY_PATHINDEX36490,1409269
#define PROXY_MAXCONCHLEN PROXY_MAXCONCHLEN36491,1409330
static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){proxyBreakConchLock36499,1409677
static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){proxyConchLock36559,1411644
static int proxyTakeConch(unixFile *pFile){proxyTakeConch36637,1414368
static int proxyReleaseConch(unixFile *pFile){proxyReleaseConch36859,1422606
static int proxyCreateConchPathname(char *dbPath, char **pConchPath){proxyCreateConchPathname36889,1423771
static int switchLockProxyPath(unixFile *pFile, const char *path) {switchLockProxyPath36926,1424815
static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){proxyGetDbPathForUnixFile36962,1425890
static int proxyTransformUnixFile(unixFile *pFile, const char *path) {proxyTransformUnixFile36993,1427137
static int proxyFileControl(sqlite3_file *id, int op, void *pArg){proxyFileControl37080,1429828
static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {proxyCheckReservedLock37153,1432313
static int proxyLock(sqlite3_file *id, int eFileLock) {proxyLock37192,1433591
static int proxyUnlock(sqlite3_file *id, int eFileLock) {proxyUnlock37216,1434328
static int proxyClose(sqlite3_file *id) {proxyClose37235,1434858
SQLITE_API int sqlite3_os_init(void){ sqlite3_os_init37297,1436979
  #define UNIXVFS(UNIXVFS37318,1438117
SQLITE_API int sqlite3_os_end(void){ sqlite3_os_end37396,1441261
#define _OS_COMMON_H__OS_COMMON_H_37446,1442935
#define SQLITE_HWTIME_HSQLITE_HWTIME_H37485,1444184
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime37498,1444581
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec37506,1444789
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime37517,1445004
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime37525,1445199
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime37549,1445941
static sqlite_uint64 g_start;g_start37558,1446232
static sqlite_uint64 g_elapsed;g_elapsed37559,1446262
#define TIMER_START TIMER_START37560,1446294
#define TIMER_END TIMER_END37561,1446344
#define TIMER_ELAPSED TIMER_ELAPSED37562,1446404
#define TIMER_STARTTIMER_START37564,1446446
#define TIMER_ENDTIMER_END37565,1446466
#define TIMER_ELAPSED TIMER_ELAPSED37566,1446484
#define SimulateIOErrorBenign(SimulateIOErrorBenign37582,1447084
#define SimulateIOError(SimulateIOError37583,1447145
static void local_ioerr(){local_ioerr37587,1447323
#define SimulateDiskfullError(SimulateDiskfullError37592,1447463
#define SimulateIOErrorBenign(SimulateIOErrorBenign37604,1447758
#define SimulateIOError(SimulateIOError37605,1447791
#define SimulateDiskfullError(SimulateDiskfullError37606,1447818
#define OpenCounter(OpenCounter37614,1448023
#define OpenCounter(OpenCounter37616,1448082
#  define SQLITE_WIN32_HAS_ANSISQLITE_WIN32_HAS_ANSI37648,1449063
#  define SQLITE_WIN32_HAS_WIDESQLITE_WIN32_HAS_WIDE37657,1449318
#  define NTDDI_WIN8 NTDDI_WIN837673,1449711
#  define NTDDI_WINBLUE NTDDI_WINBLUE37677,1449796
#  define NTDDI_WINTHRESHOLD NTDDI_WINTHRESHOLD37681,1449886
#    define SQLITE_WIN32_GETVERSIONEX SQLITE_WIN32_GETVERSIONEX37690,1450188
#    define SQLITE_WIN32_GETVERSIONEX SQLITE_WIN32_GETVERSIONEX37692,1450275
#    define SQLITE_WIN32_CREATEFILEMAPPINGA SQLITE_WIN32_CREATEFILEMAPPINGA37703,1450698
#    define SQLITE_WIN32_CREATEFILEMAPPINGA SQLITE_WIN32_CREATEFILEMAPPINGA37705,1450754
#  define MAX_PATH MAX_PATH37713,1450915
#  define SQLITE_WIN32_MAX_PATH_CHARS SQLITE_WIN32_MAX_PATH_CHARS37721,1451098
#  define UNICODE_STRING_MAX_CHARS UNICODE_STRING_MAX_CHARS37728,1451268
#  define SQLITE_WINNT_MAX_PATH_CHARS SQLITE_WINNT_MAX_PATH_CHARS37736,1451469
#  define SQLITE_WIN32_MAX_PATH_BYTES SQLITE_WIN32_MAX_PATH_BYTES37745,1451771
#  define SQLITE_WINNT_MAX_PATH_BYTES SQLITE_WINNT_MAX_PATH_BYTES37753,1452012
#  define SQLITE_WIN32_MAX_ERRMSG_CHARS SQLITE_WIN32_MAX_ERRMSG_CHARS37761,1452234
#  define winIsDirSep(winIsDirSep37769,1452399
#  define UNUSED_VARIABLE_VALUE(UNUSED_VARIABLE_VALUE37777,1452657
#  define winGetDirSep(winGetDirSep37784,1452815
# define INVALID_FILE_ATTRIBUTES INVALID_FILE_ATTRIBUTES37829,1454318
# define FILE_FLAG_MASK FILE_FLAG_MASK37833,1454394
# define FILE_ATTRIBUTE_MASK FILE_ATTRIBUTE_MASK37837,1454476
typedef struct winShm winShm;           /* A connection to shared-memory */winShm37842,1454606
typedef struct winShmNode winShmNode;   /* A region of shared-memory */winShmNode37843,1454682
typedef struct winceLock {winceLock37851,1454887
  int nReaders;       /* Number of reader locks obtained */nReaders37852,1454914
  BOOL bPending;      /* Indicates a pending lock has been obtained */bPending37853,1454974
  BOOL bReserved;     /* Indicates a reserved lock has been obtained */bReserved37854,1455045
  BOOL bExclusive;    /* Indicates an exclusive lock has been obtained */bExclusive37855,1455117
} winceLock;winceLock37856,1455191
typedef struct winFile winFile;winFile37863,1455318
struct winFile {winFile37864,1455350
  const sqlite3_io_methods *pMethod; /*** Must be first ***/pMethod37865,1455367
  sqlite3_vfs *pVfs;      /* The VFS used to open this file */pVfs37866,1455428
  HANDLE h;               /* Handle for accessing the file */h37867,1455491
  u8 locktype;            /* Type of lock currently held on this file */locktype37868,1455553
  short sharedLockByte;   /* Randomly chosen byte used as a shared lock */sharedLockByte37869,1455626
  u8 ctrlFlags;           /* Flags.  See WINFILE_* below */ctrlFlags37870,1455701
  DWORD lastErrno;        /* The Windows errno from the last I/O error */lastErrno37871,1455761
  winShm *pShm;           /* Instance of shared memory on this file */pShm37873,1455859
  const char *zPath;      /* Full pathname of this file */zPath37875,1455937
  int szChunk;            /* Chunk size configured by FCNTL_CHUNK_SIZE */szChunk37876,1455996
  LPWSTR zDeleteOnClose;  /* Name of file to delete when closing */zDeleteOnClose37878,1456090
  HANDLE hMutex;          /* Mutex used to control access to shared lock */hMutex37879,1456158
  HANDLE hShared;         /* Shared memory segment used for locking */hShared37880,1456234
  winceLock local;        /* Locks obtained by this instance of winFile */local37881,1456305
  winceLock *shared;      /* Global shared lock memory for the file  */shared37882,1456380
  int nFetchOut;                /* Number of outstanding xFetch references */nFetchOut37885,1456486
  HANDLE hMap;                  /* Handle for accessing memory mapping */hMap37886,1456564
  void *pMapRegion;             /* Area memory mapped */pMapRegion37887,1456638
  sqlite3_int64 mmapSize;       /* Usable size of mapped region */mmapSize37888,1456695
  sqlite3_int64 mmapSizeActual; /* Actual size of mapped region */mmapSizeActual37889,1456762
  sqlite3_int64 mmapSizeMax;    /* Configured FCNTL_MMAP_SIZE value */mmapSizeMax37890,1456829
typedef struct winVfsAppData winVfsAppData;winVfsAppData37898,1457018
struct winVfsAppData {winVfsAppData37899,1457062
  const sqlite3_io_methods *pMethod; /* The file I/O methods to use. */pMethod37900,1457085
  void *pAppData;                    /* The extra pAppData, if any. */pAppData37901,1457157
  BOOL bNoLock;                      /* Non-zero if locking is disabled. */bNoLock37902,1457228
#define WINFILE_RDONLY WINFILE_RDONLY37908,1457354
#define WINFILE_PERSIST_WAL WINFILE_PERSIST_WAL37909,1457423
#define WINFILE_PSOW WINFILE_PSOW37910,1457488
#  define SQLITE_WIN32_DBG_BUF_SIZE SQLITE_WIN32_DBG_BUF_SIZE37916,1457671
#  define SQLITE_WIN32_DATA_DIRECTORY_TYPE SQLITE_WIN32_DATA_DIRECTORY_TYPE37924,1457903
#  define SQLITE_WIN32_TEMP_DIRECTORY_TYPE SQLITE_WIN32_TEMP_DIRECTORY_TYPE37932,1458121
#  define SQLITE_WIN32_HEAP_CREATE SQLITE_WIN32_HEAP_CREATE37956,1459236
#    define SQLITE_WIN32_CACHE_SIZE SQLITE_WIN32_CACHE_SIZE37965,1459484
#    define SQLITE_WIN32_CACHE_SIZE SQLITE_WIN32_CACHE_SIZE37967,1459556
#  define SQLITE_WIN32_HEAP_INIT_SIZE SQLITE_WIN32_HEAP_INIT_SIZE37975,1459756
#  define SQLITE_WIN32_HEAP_MAX_SIZE SQLITE_WIN32_HEAP_MAX_SIZE37983,1460025
#  define SQLITE_WIN32_HEAP_FLAGS SQLITE_WIN32_HEAP_FLAGS37991,1460226
typedef struct winMemData winMemData;winMemData37999,1460400
struct winMemData {winMemData38000,1460438
  u32 magic1;   /* Magic number to detect structure corruption. */magic138002,1460473
  HANDLE hHeap; /* The handle to our heap. */hHeap38004,1460547
  BOOL bOwned;  /* Do we own the heap (i.e. destroy it on shutdown)? */bOwned38005,1460593
  u32 magic2;   /* Magic number to detect structure corruption. */magic238007,1460680
#define WINMEM_MAGIC1 WINMEM_MAGIC138012,1460773
#define WINMEM_MAGIC2 WINMEM_MAGIC238013,1460810
static struct winMemData win_mem_data = {win_mem_data38016,1460855
#define winMemAssertMagic1(winMemAssertMagic138027,1461008
#define winMemAssertMagic2(winMemAssertMagic238028,1461082
#define winMemAssertMagic(winMemAssertMagic38029,1461156
#define winMemAssertMagic(winMemAssertMagic38031,1461235
#define winMemGetDataPtr(winMemGetDataPtr38034,1461271
#define winMemGetHeap(winMemGetHeap38035,1461313
#define winMemGetOwned(winMemGetOwned38036,1461360
SQLITE_API LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;sqlite3_os_type38062,1462204
static LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;sqlite3_os_type38064,1462269
#  define SYSCALL SYSCALL38068,1462348
#  define osAreFileApisANSI(osAreFileApisANSI38076,1462499
static struct win_syscall {win_syscall38085,1462810
  const char *zName;            /* Name of the system call */zName38086,1462838
  sqlite3_syscall_ptr pCurrent; /* Current value of the system call */pCurrent38087,1462900
  sqlite3_syscall_ptr pDefault; /* Default value */pDefault38088,1462971
#define osAreFileApisANSI osAreFileApisANSI38097,1463261
#define osCharLowerW osCharLowerW38106,1463547
#define osCharUpperW osCharUpperW38114,1463825
#define osCloseHandle osCloseHandle38118,1463966
#define osCreateFileA osCreateFileA38126,1464224
#define osCreateFileW osCreateFileW38135,1464568
#define osCreateFileMappingA osCreateFileMappingA38146,1465025
#define osCreateFileMappingW osCreateFileMappingW38156,1465458
#define osCreateMutexW osCreateMutexW38165,1465804
#define osDeleteFileA osDeleteFileA38174,1466104
#define osDeleteFileW osDeleteFileW38182,1466362
#define osFileTimeToLocalFileTime osFileTimeToLocalFileTime38190,1466607
#define osFileTimeToSystemTime osFileTimeToSystemTime38199,1466894
#define osFlushFileBuffers osFlushFileBuffers38204,1467077
#define osFormatMessageA osFormatMessageA38212,1467341
#define osFormatMessageW osFormatMessageW38221,1467655
#define osFreeLibrary osFreeLibrary38230,1467976
#define osGetCurrentProcessId osGetCurrentProcessId38234,1468118
#define osGetDiskFreeSpaceA osGetDiskFreeSpaceA38242,1468404
#define osGetDiskFreeSpaceW osGetDiskFreeSpaceW38251,1468752
#define osGetFileAttributesA osGetFileAttributesA38260,1469061
#define osGetFileAttributesW osGetFileAttributesW38268,1469348
#define osGetFileAttributesExW osGetFileAttributesExW38276,1469616
#define osGetFileSize osGetFileSize38285,1469912
#define osGetFullPathNameA osGetFullPathNameA38293,1470200
#define osGetFullPathNameW osGetFullPathNameW38302,1470535
#define osGetLastError osGetLastError38307,1470715
#define osGetProcAddressA osGetProcAddressA38322,1471277
#define osGetSystemInfo osGetSystemInfo38331,1471548
#define osGetSystemTime osGetSystemTime38335,1471698
#define osGetSystemTimeAsFileTime osGetSystemTimeAsFileTime38343,1471951
#define osGetTempPathA osGetTempPathA38352,1472237
#define osGetTempPathW osGetTempPathW38360,1472523
#define osGetTickCount osGetTickCount38368,1472776
#define osGetVersionExA osGetVersionExA38376,1473064
#define osGetVersionExW osGetVersionExW38386,1473405
#define osHeapAlloc osHeapAlloc38391,1473569
#define osHeapCreate osHeapCreate38400,1473838
#define osHeapDestroy osHeapDestroy38409,1474108
#define osHeapFree osHeapFree38413,1474249
#define osHeapReAlloc osHeapReAlloc38417,1474400
#define osHeapSize osHeapSize38422,1474574
#define osHeapValidate osHeapValidate38431,1474843
#define osHeapCompact osHeapCompact38440,1475134
#define osLoadLibraryA osLoadLibraryA38448,1475439
#define osLoadLibraryW osLoadLibraryW38457,1475772
#define osLocalFree osLocalFree38465,1476022
#define osLockFile osLockFile38474,1476306
#define osLockFileEx osLockFileEx38485,1476611
#define osMapViewOfFile osMapViewOfFile38496,1476998
#define osMultiByteToWideChar osMultiByteToWideChar38501,1477179
#define osQueryPerformanceCounter osQueryPerformanceCounter38506,1477364
#define osReadFile osReadFile38511,1477536
#define osSetEndOfFile osSetEndOfFile38516,1477719
#define osSetFilePointer osSetFilePointer38524,1477965
#define osSleep osSleep38533,1478242
#define osSystemTimeToFileTime osSystemTimeToFileTime38537,1478376
#define osUnlockFile osUnlockFile38547,1478704
#define osUnlockFileEx osUnlockFileEx38557,1478990
#define osUnmapViewOfFile osUnmapViewOfFile38566,1479332
#define osWideCharToMultiByte osWideCharToMultiByte38570,1479478
#define osWriteFile osWriteFile38575,1479677
#define osCreateEventExW osCreateEventExW38584,1479965
#define osWaitForSingleObject osWaitForSingleObject38593,1480261
#define osWaitForSingleObjectEx osWaitForSingleObjectEx38602,1480532
#define osSetFilePointerEx osSetFilePointerEx38611,1480809
#define osGetFileInformationByHandleEx osGetFileInformationByHandleEx38620,1481114
#define osMapViewOfFileFromApp osMapViewOfFileFromApp38629,1481482
#define osCreateFile2 osCreateFile238638,1481769
#define osLoadPackagedLibrary osLoadPackagedLibrary38647,1482119
#define osGetTickCount64 osGetTickCount6438656,1482392
#define osGetNativeSystemInfo osGetNativeSystemInfo38664,1482642
#define osOutputDebugStringA osOutputDebugStringA38673,1482927
#define osOutputDebugStringW osOutputDebugStringW38681,1483193
#define osGetProcessHeap osGetProcessHeap38685,1483342
#define osCreateFileMappingFromApp osCreateFileMappingFromApp38693,1483648
#define osInterlockedCompareExchange osInterlockedCompareExchange38704,1484123
#define osUuidCreate osUuidCreate38718,1484666
#define osUuidCreateSequential osUuidCreateSequential38726,1484963
#define osFlushViewOfFile osFlushViewOfFile38735,1485269
} aSyscall[] = {aSyscall38089,1463023
static int winSetSystemCall(winSetSystemCall38746,1485649
static sqlite3_syscall_ptr winGetSystemCall(winGetSystemCall38789,1486933
static const char *winNextSystemCall(sqlite3_vfs *p, const char *zName){winNextSystemCall38808,1487459
SQLITE_API int sqlite3_win32_compact_heap(LPUINT pnLargest){sqlite3_win32_compact_heap38831,1488208
SQLITE_API int sqlite3_win32_reset_heap(){sqlite3_win32_reset_heap38871,1489561
SQLITE_API void sqlite3_win32_write_debug(const char *zBuf, int nBuf){sqlite3_win32_write_debug38916,1491212
static HANDLE sleepObj = NULL;sleepObj38959,1492527
SQLITE_API void sqlite3_win32_sleep(DWORD milliseconds){sqlite3_win32_sleep38962,1492566
SQLITE_PRIVATE DWORD sqlite3Win32Wait(HANDLE hObject){sqlite3Win32Wait38977,1493021
# define osIsNT(osIsNT38998,1493788
# define osIsNT(osIsNT39000,1493887
# define osIsNT(osIsNT39002,1493948
# define osIsNT(osIsNT39004,1493977
SQLITE_API int sqlite3_win32_is_nt(void){sqlite3_win32_is_nt39011,1494160
static void *winMemMalloc(int nBytes){winMemMalloc39050,1495349
static void winMemFree(void *pPrior){winMemFree39073,1495941
static void *winMemRealloc(void *pPrior, int nBytes){winMemRealloc39093,1496574
static int winMemSize(void *p){winMemSize39121,1497384
static int winMemRoundup(int n){winMemRoundup39145,1498021
static int winMemInit(void *pAppData){winMemInit39152,1498102
static void winMemShutdown(void *pAppData){winMemShutdown39201,1499737
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetWin32(void){sqlite3MemGetWin3239232,1500814
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault39246,1501110
static LPWSTR winUtf8ToUnicode(const char *zText){winUtf8ToUnicode39256,1501385
static char *winUnicodeToUtf8(LPCWSTR zWideText){winUnicodeToUtf839282,1501995
static LPWSTR winMbcsToUnicode(const char *zText, int useAnsi){winMbcsToUnicode39309,1502618
static char *winUnicodeToMbcs(LPCWSTR zWideText, int useAnsi){winUnicodeToMbcs39338,1503395
static char *winMbcsToUtf8(const char *zText, int useAnsi){winMbcsToUtf839365,1504046
static char *winUtf8ToMbcs(const char *zText, int useAnsi){winUtf8ToMbcs39383,1504463
SQLITE_API LPWSTR sqlite3_win32_utf8_to_unicode(const char *zText){sqlite3_win32_utf8_to_unicode39399,1504810
SQLITE_API char *sqlite3_win32_unicode_to_utf8(LPCWSTR zWideText){sqlite3_win32_unicode_to_utf839415,1505163
SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zText){sqlite3_win32_mbcs_to_utf839431,1505520
SQLITE_API char *sqlite3_win32_mbcs_to_utf8_v2(const char *zText, int useAnsi){sqlite3_win32_mbcs_to_utf8_v239447,1505884
SQLITE_API char *sqlite3_win32_utf8_to_mbcs(const char *zText){sqlite3_win32_utf8_to_mbcs39463,1506252
SQLITE_API char *sqlite3_win32_utf8_to_mbcs_v2(const char *zText, int useAnsi){sqlite3_win32_utf8_to_mbcs_v239479,1506616
SQLITE_API int sqlite3_win32_set_directory(DWORD type, LPCWSTR zValue){sqlite3_win32_set_directory39499,1507254
static int winGetLastErrorMsg(DWORD lastErrno, int nBuf, char *zBuf){winGetLastErrorMsg39534,1508308
#define winLogError(winLogError39624,1511436
static int winLogErrorAtLine(winLogErrorAtLine39625,1511503
# define SQLITE_WIN32_IOERR_RETRY SQLITE_WIN32_IOERR_RETRY39656,1512630
# define SQLITE_WIN32_IOERR_RETRY_DELAY SQLITE_WIN32_IOERR_RETRY_DELAY39659,1512713
static int winIoerrRetry = SQLITE_WIN32_IOERR_RETRY;winIoerrRetry39661,1512763
static int winIoerrRetryDelay = SQLITE_WIN32_IOERR_RETRY_DELAY;winIoerrRetryDelay39662,1512816
#define winIoerrCanRetry1(winIoerrCanRetry139681,1513850
static int winRetryIoerr(int *pnRetry, DWORD *pError){winRetryIoerr39695,1514511
static void winLogIoerr(int nRetry, int lineno){winLogIoerr39724,1515069
struct tm *__cdecl localtime(const time_t *t)localtime39744,1515679
#define HANDLE_TO_WINFILE(HANDLE_TO_WINFILE39771,1516386
static void winceMutexAcquire(HANDLE h){winceMutexAcquire39776,1516505
#define winceMutexRelease(winceMutexRelease39785,1516741
static int winceCreateLock(const char *zFilename, winFile *pFile){winceCreateLock39791,1516880
static void winceDestroyLock(winFile *pFile){winceDestroyLock39885,1519706
static BOOL winceLockFile(winceLockFile39919,1520629
static BOOL winceUnlockFile(winceUnlockFile39985,1522398
static BOOL winLockFile(winLockFile40054,1524272
static BOOL winUnlockFile(winUnlockFile40086,1525038
# define INVALID_SET_FILE_POINTER INVALID_SET_FILE_POINTER40123,1526116
static int winSeekFile(winFile *pFile, sqlite3_int64 iOffset){winSeekFile40131,1526372
#define MX_CLOSE_ATTEMPT MX_CLOSE_ATTEMPT40203,1528972
static int winClose(sqlite3_file *id){winClose40204,1528999
#define WINCE_DELETION_ATTEMPTS WINCE_DELETION_ATTEMPTS40225,1529592
static int winRead(winRead40260,1530627
static int winWrite(winWrite40340,1533719
static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){winTruncate40449,1537660
SQLITE_API int sqlite3_sync_count = 0;sqlite3_sync_count40499,1539583
SQLITE_API int sqlite3_fullsync_count = 0;sqlite3_fullsync_count40500,1539622
static int winSync(sqlite3_file *id, int flags){winSync40506,1539747
static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){winFileSize40591,1542303
# define LOCKFILE_FAIL_IMMEDIATELY LOCKFILE_FAIL_IMMEDIATELY40637,1543660
# define LOCKFILE_EXCLUSIVE_LOCK LOCKFILE_EXCLUSIVE_LOCK40641,1543737
# define SQLITE_LOCKFILE_FLAGS SQLITE_LOCKFILE_FLAGS40652,1544197
# define SQLITE_LOCKFILEEX_FLAGS SQLITE_LOCKFILEEX_FLAGS40661,1544503
static int winGetReadLock(winFile *pFile){winGetReadLock40669,1544696
static int winUnlockReadLock(winFile *pFile){winUnlockReadLock40704,1545680
static int winLock(sqlite3_file *id, int locktype){winLock40751,1547299
static int winCheckReservedLock(sqlite3_file *id, int *pResOut){winCheckReservedLock40894,1551865
static int winUnlock(sqlite3_file *id, int locktype){winUnlock40930,1553099
static int winNolockLock(sqlite3_file *id, int locktype){winNolockLock40980,1555112
static int winNolockCheckReservedLock(sqlite3_file *id, int *pResOut){winNolockCheckReservedLock40986,1555247
static int winNolockUnlock(sqlite3_file *id, int locktype){winNolockUnlock40992,1555394
static void winModeBit(winFile *pFile, unsigned char mask, int *pArg){winModeBit41007,1555921
static int winFileControl(sqlite3_file *id, int op, void *pArg){winFileControl41025,1556417
static int winSectorSize(sqlite3_file *id){winSectorSize41152,1560504
static int winDeviceCharacteristics(sqlite3_file *id){winDeviceCharacteristics41160,1560652
static SYSTEM_INFO winSysInfo;winSysInfo41172,1561053
static void winShmEnterMutex(void){winShmEnterMutex41189,1561567
static void winShmLeaveMutex(void){winShmLeaveMutex41192,1561673
static int winShmMutexHeld(void) {winShmMutexHeld41196,1561794
struct winShmNode {winShmNode41224,1562666
  sqlite3_mutex *mutex;      /* Mutex to access this object */mutex41225,1562686
  char *zFilename;           /* Name of the file */zFilename41226,1562749
  winFile hFile;             /* File handle from winOpen */hFile41227,1562801
  int szRegion;              /* Size of shared-memory regions */szRegion41229,1562862
  int nRegion;               /* Size of array apRegion */nRegion41230,1562927
  struct ShmRegion {ShmRegion41231,1562985
    HANDLE hMap;             /* File handle from CreateFileMapping */hMap41232,1563006
    void *pMap;pMap41233,1563076
  } *aRegion;aRegion41234,1563092
  DWORD lastErrno;           /* The Windows errno from the last I/O error */lastErrno41235,1563106
  int nRef;                  /* Number of winShm objects pointing to this */nRef41237,1563184
  winShm *pFirst;            /* All winShm objects pointing to this */pFirst41238,1563261
  winShmNode *pNext;         /* Next in list of all winShmNode objects */pNext41239,1563332
  u8 nextShmId;              /* Next available winShm.id value */nextShmId41241,1563465
static winShmNode *winShmNodeList = 0;winShmNodeList41250,1563670
struct winShm {winShm41265,1564084
  winShmNode *pShmNode;      /* The underlying winShmNode object */pShmNode41266,1564100
  winShm *pNext;             /* Next winShm with the same winShmNode */pNext41267,1564168
  u8 hasMutex;               /* True if holding the winShmNode mutex */hasMutex41268,1564240
  u16 sharedMask;            /* Mask of shared locks held */sharedMask41269,1564312
  u16 exclMask;              /* Mask of exclusive locks held */exclMask41270,1564373
  u8 id;                     /* Id of this connection with its winShmNode */id41272,1564496
#define WIN_SHM_BASE WIN_SHM_BASE41279,1564620
#define WIN_SHM_DMS WIN_SHM_DMS41280,1564698
#define WINSHM_UNLCK WINSHM_UNLCK41285,1564841
#define WINSHM_RDLCK WINSHM_RDLCK41286,1564865
#define WINSHM_WRLCK WINSHM_WRLCK41287,1564889
static int winShmSystemLock(winShmSystemLock41288,1564913
static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){winShmPurge41336,1566614
static int winOpenSharedMemory(winFile *pDbFd){winOpenSharedMemory41385,1568284
static int winShmUnmap(winShmUnmap41498,1572265
static int winShmLock(winShmLock41539,1573435
static void winShmBarrier(winShmBarrier41648,1577174
static int winShmMap(winShmMap41676,1578387
# define winShmMap winShmMap41806,1582947
# define winShmLock winShmLock41807,1582972
# define winShmBarrier winShmBarrier41808,1582997
# define winShmUnmap winShmUnmap41809,1583022
static int winUnmapfile(winFile *pFile){winUnmapfile41816,1583180
static int winMapfile(winFile *pFd, sqlite3_int64 nByte){winMapfile41866,1585370
static int winFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){winFetch41965,1588927
static int winUnfetch(sqlite3_file *fd, i64 iOff, void *p){winUnfetch42006,1590280
static const sqlite3_io_methods winIoMethod = {winIoMethod42049,1591680
static const sqlite3_io_methods winIoNolockMethod = {winIoNolockMethod42075,1592809
static winVfsAppData winAppData = {winAppData42097,1593818
static winVfsAppData winNolockAppData = {winNolockAppData42103,1593967
static char *winConvertToUtf8Filename(const void *zFilename){winConvertToUtf8Filename42122,1594603
static void *winConvertFromUtf8Filename(const char *zFilename){winConvertFromUtf8Filename42143,1595148
static int winMakeEndInDirSep(int nBuf, char *zBuf){winMakeEndInDirSep42162,1595643
static int winGetTempname(sqlite3_vfs *pVfs, char **pzBuf){winGetTempname42182,1596120
static int winIsDir(const void *zConverted){winIsDir42413,1603915
static int winOpen(winOpen42440,1604618
static int winDelete(winDelete42737,1614688
static int winAccess(winAccess42845,1617729
static BOOL winIsDriveLetterAndColon(winIsDriveLetterAndColon42923,1620147
static BOOL winIsVerbatimPathname(winIsVerbatimPathname42935,1620579
static int winFullPathname(winFullPathname42971,1621763
static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){winDlOpen43155,1628319
static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){winDlError43196,1629443
static void (*winDlSym(sqlite3_vfs *pVfs,void *pH,const char *zSym))(void){winDlSym43200,1629594
static void winDlClose(sqlite3_vfs *pVfs, void *pHandle){winDlClose43208,1629888
  #define winDlOpen winDlOpen43214,1630114
  #define winDlError winDlError43215,1630137
  #define winDlSym winDlSym43216,1630160
  #define winDlClose winDlClose43217,1630183
typedef struct EntropyGatherer EntropyGatherer;EntropyGatherer43221,1630267
struct EntropyGatherer {EntropyGatherer43222,1630315
  unsigned char *a;   /* Gather entropy into this buffer */a43223,1630340
  int na;             /* Size of a[] in bytes */na43224,1630400
  int i;              /* XOR next input into a[i] */i43225,1630449
  int nXor;           /* Number of XOR operations done */nXor43226,1630502
static void xorMemory(EntropyGatherer *p, unsigned char *x, int sz){xorMemory43231,1630664
static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){winRandomness43245,1630989
static int winSleep(sqlite3_vfs *pVfs, int microsec){winSleep43305,1632689
SQLITE_API int sqlite3_current_time = 0;  /* Fake system time in seconds since 1970. */sqlite3_current_time43317,1633062
static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){winCurrentTimeInt6443330,1633596
static int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){winCurrentTime43373,1634991
static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){winGetLastError43413,1636463
SQLITE_API int sqlite3_os_init(void){sqlite3_os_init43423,1636722
SQLITE_API int sqlite3_os_end(void){sqlite3_os_end43554,1641586
#define BITVEC_SZ BITVEC_SZ43607,1643696
#define BITVEC_USIZE BITVEC_USIZE43611,1643857
#define BITVEC_TELEM BITVEC_TELEM43618,1644172
#define BITVEC_SZELEM BITVEC_SZELEM43620,1644244
#define BITVEC_NELEM BITVEC_NELEM43622,1644315
#define BITVEC_NBIT BITVEC_NBIT43624,1644418
#define BITVEC_NINT BITVEC_NINT43627,1644515
#define BITVEC_MXHASH BITVEC_MXHASH43630,1644653
#define BITVEC_HASH(BITVEC_HASH43635,1644896
#define BITVEC_NPTR BITVEC_NPTR43637,1644944
struct Bitvec {Bitvec43661,1645920
  u32 iSize;      /* Maximum bit index.  Max iSize is 4,294,967,296. */iSize43662,1645936
  u32 nSet;       /* Number of bits that are set - only valid for aHashnSet43663,1646008
  u32 iDivisor;   /* Number of bits handled by each apSub[] entry. */iDivisor43666,1646197
    BITVEC_TELEM aBitmap[BITVEC_NELEM];    /* Bitmap representation */aBitmap43671,1646474
    u32 aHash[BITVEC_NINT];      /* Hash table representation */aHash43672,1646545
    Bitvec *apSub[BITVEC_NPTR];  /* Recursive representation */apSub43673,1646610
  } u;u43674,1646674
SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){sqlite3BitvecCreate43682,1646847
SQLITE_PRIVATE int sqlite3BitvecTestNotNull(Bitvec *p, u32 i){sqlite3BitvecTestNotNull43697,1647210
SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){sqlite3BitvecTest43720,1647740
SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){sqlite3BitvecSet43736,1648316
SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){sqlite3BitvecClear43807,1650415
SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){sqlite3BitvecDestroy43844,1651298
SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){sqlite3BitvecSize43859,1651612
#define SETBIT(SETBIT43870,1651937
#define CLEARBIT(CLEARBIT43871,1651984
#define TESTBIT(TESTBIT43872,1652032
SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){sqlite3BitvecBuiltinTest43904,1653417
struct PCache {PCache44022,1657155
  PgHdr *pDirty, *pDirtyTail;         /* List of dirty pages in LRU order */pDirty44023,1657171
  PgHdr *pDirty, *pDirtyTail;         /* List of dirty pages in LRU order */pDirtyTail44023,1657171
  PgHdr *pSynced;                     /* Last synced page in dirty page list */pSynced44024,1657248
  int nRefSum;                        /* Sum of ref counts over all pages */nRefSum44025,1657328
  int szCache;                        /* Configured cache size */szCache44026,1657405
  int szSpill;                        /* Size before spilling occurs */szSpill44027,1657471
  int szPage;                         /* Size of every page in this cache */szPage44028,1657543
  int szExtra;                        /* Size of extra space for each page */szExtra44029,1657620
  u8 bPurgeable;                      /* True if pages are on backing store */bPurgeable44030,1657698
  u8 eCreate;                         /* eCreate value for for xFetch() */eCreate44031,1657777
  int (*xStress)(void*,PgHdr*);       /* Call to try make a page clean */xStress44032,1657852
  void *pStress;                      /* Argument to xStress */pStress44033,1657926
  sqlite3_pcache *pCache;             /* Pluggable cache module */pCache44034,1657990
  int sqlite3PcacheTrace = 2;       /* 0: off  1: simple  2: cache dumps */sqlite3PcacheTrace44047,1658484
  int sqlite3PcacheMxDump = 9999;   /* Max cache entries for pcacheDump() */sqlite3PcacheMxDump44048,1658560
# define pcacheTrace(pcacheTrace44049,1658637
  void pcacheDump(PCache *pCache){pcacheDump44050,1658707
# define pcacheTrace(pcacheTrace44075,1659495
# define pcacheDump(pcacheDump44076,1659519
SQLITE_PRIVATE int sqlite3PcachePageSanity(PgHdr *pPg){sqlite3PcachePageSanity44089,1659829
#define PCACHE_DIRTYLIST_REMOVE PCACHE_DIRTYLIST_REMOVE44129,1661634
#define PCACHE_DIRTYLIST_ADD PCACHE_DIRTYLIST_ADD44130,1661708
#define PCACHE_DIRTYLIST_FRONT PCACHE_DIRTYLIST_FRONT44131,1661781
static void pcacheManageDirtyList(PgHdr *pPage, u8 addRemove){pcacheManageDirtyList44139,1662160
static void pcacheUnpin(PgHdr *p){pcacheUnpin44212,1664654
static int numberOfCachePages(PCache *p){numberOfCachePages44224,1665021
SQLITE_PRIVATE int sqlite3PcacheInitialize(void){sqlite3PcacheInitialize44242,1665680
SQLITE_PRIVATE void sqlite3PcacheShutdown(void){sqlite3PcacheShutdown44251,1666071
SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }sqlite3PcacheSize44261,1666384
SQLITE_PRIVATE int sqlite3PcacheOpen(sqlite3PcacheOpen44275,1666992
SQLITE_PRIVATE int sqlite3PcacheSetPageSize(PCache *pCache, int szPage){sqlite3PcacheSetPageSize44301,1667974
SQLITE_PRIVATE sqlite3_pcache_page *sqlite3PcacheFetch(sqlite3PcacheFetch44345,1669770
SQLITE_PRIVATE int sqlite3PcacheFetchStress(sqlite3PcacheFetchStress44386,1671556
static SQLITE_NOINLINE PgHdr *pcacheFetchFinishWithInit(pcacheFetchFinishWithInit44442,1673710
SQLITE_PRIVATE PgHdr *sqlite3PcacheFetchFinish(sqlite3PcacheFetchFinish44468,1674638
SQLITE_PRIVATE void SQLITE_NOINLINE sqlite3PcacheRelease(PgHdr *p){sqlite3PcacheRelease44491,1675309
SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){sqlite3PcacheRef44510,1675937
SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){sqlite3PcacheDrop44522,1676273
SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){sqlite3PcacheMakeDirty44536,1676662
SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){sqlite3PcacheMakeClean44555,1677297
SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){sqlite3PcacheCleanAll44573,1677825
SQLITE_PRIVATE void sqlite3PcacheClearWritable(PCache *pCache){sqlite3PcacheClearWritable44584,1678094
SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){sqlite3PcacheClearSyncFlags44596,1678424
SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){sqlite3PcacheMove44607,1678682
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){sqlite3PcacheTruncate44629,1679549
SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){sqlite3PcacheClose44662,1680574
SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){sqlite3PcacheClear44671,1680803
static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){pcacheMergeDirtyList44679,1681020
#define N_SORT_BUCKET N_SORT_BUCKET44715,1681936
static PgHdr *pcacheSortDirtyList(PgHdr *pIn){pcacheSortDirtyList44716,1681962
SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){sqlite3PcacheDirtyList44751,1682774
SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){sqlite3PcacheRefCount44765,1683166
SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){sqlite3PcachePageRefcount44772,1683331
SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){sqlite3PcachePagecount44779,1683465
SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){sqlite3PcacheGetCachesize44788,1683687
SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){sqlite3PcacheSetCachesize44796,1683841
SQLITE_PRIVATE int sqlite3PcacheSetSpillsize(PCache *p, int mxPage){sqlite3PcacheSetSpillsize44808,1684295
SQLITE_PRIVATE void sqlite3PcacheShrink(PCache *pCache){sqlite3PcacheShrink44825,1684693
SQLITE_PRIVATE int sqlite3HeaderSizePcache(void){ return ROUND8(sizeof(PgHdr)); }sqlite3HeaderSizePcache44834,1684941
SQLITE_PRIVATE int sqlite3PCachePercentDirty(PCache *pCache){sqlite3PCachePercentDirty44840,1685139
SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){sqlite3PcacheIterateDirty44854,1685624
typedef struct PCache1 PCache1;PCache144948,1689988
typedef struct PgHdr1 PgHdr1;PgHdr144949,1690020
typedef struct PgFreeslot PgFreeslot;PgFreeslot44950,1690050
typedef struct PGroup PGroup;PGroup44951,1690088
struct PgHdr1 {PgHdr144959,1690358
  sqlite3_pcache_page page;      /* Base class. Must be first. pBuf & pExtra */page44960,1690374
  unsigned int iKey;             /* Key value (page number) */iKey44961,1690454
  u8 isPinned;                   /* Page in use, not on the LRU list */isPinned44962,1690517
  u8 isBulkLocal;                /* This page from bulk local storage */isBulkLocal44963,1690589
  u8 isAnchor;                   /* This is the PGroup.lru element */isAnchor44964,1690662
  PgHdr1 *pNext;                 /* Next in hash table chain */pNext44965,1690732
  PCache1 *pCache;               /* Cache that currently owns this page */pCache44966,1690796
  PgHdr1 *pLruNext;              /* Next in LRU list of unpinned pages */pLruNext44967,1690871
  PgHdr1 *pLruPrev;              /* Previous in LRU list of unpinned pages */pLruPrev44968,1690945
struct PGroup {PGroup44993,1691983
  sqlite3_mutex *mutex;          /* MUTEX_STATIC_LRU or NULL */mutex44994,1691999
  unsigned int nMaxPage;         /* Sum of nMax for purgeable caches */nMaxPage44995,1692063
  unsigned int nMinPage;         /* Sum of nMin for purgeable caches */nMinPage44996,1692135
  unsigned int mxPinned;         /* nMaxpage + 10 - nMinPage */mxPinned44997,1692207
  unsigned int nCurrentPage;     /* Number of purgeable pages allocated */nCurrentPage44998,1692271
  PgHdr1 lru;                    /* The beginning and end of the LRU list */lru44999,1692346
struct PCache1 {PCache145010,1692765
  PGroup *pGroup;                     /* PGroup this cache belongs to */pGroup45016,1693058
  int szPage;                         /* Size of database content section */szPage45017,1693131
  int szExtra;                        /* sizeof(MemPage)+sizeof(PgHdr) */szExtra45018,1693208
  int szAlloc;                        /* Total size of one pcache line */szAlloc45019,1693282
  int bPurgeable;                     /* True if cache is purgeable */bPurgeable45020,1693356
  unsigned int nMin;                  /* Minimum number of pages reserved */nMin45021,1693427
  unsigned int nMax;                  /* Configured "cache_size" value */nMax45022,1693504
  unsigned int n90pct;                /* nMax*9/10 */n90pct45023,1693578
  unsigned int iMaxKey;               /* Largest key seen since xTruncate() */iMaxKey45024,1693632
  unsigned int nRecyclable;           /* Number of pages in the LRU list */nRecyclable45029,1693844
  unsigned int nPage;                 /* Total number of pages in apHash */nPage45030,1693920
  unsigned int nHash;                 /* Number of slots in apHash[] */nHash45031,1693996
  PgHdr1 **apHash;                    /* Hash table for fast lookup by key */apHash45032,1694068
  PgHdr1 *pFree;                      /* List of unused pcache-local pages */pFree45033,1694146
  void *pBulk;                        /* Bulk memory used by pcache-local */pBulk45034,1694224
struct PgFreeslot {PgFreeslot45041,1694446
  PgFreeslot *pNext;  /* Next free slot */pNext45042,1694466
static SQLITE_WSD struct PCacheGlobal {PCacheGlobal45048,1694554
  PGroup grp;                    /* The global PGroup for mode (2) */grp45049,1694594
  int isInit;                    /* True if initialized */isInit45056,1694947
  int separateCache;             /* Use a new PGroup for each PCache */separateCache45057,1695006
  int nInitPage;                 /* Initial bulk allocation size */   nInitPage45058,1695078
  int szSlot;                    /* Size of each free slot */szSlot45059,1695149
  int nSlot;                     /* The number of pcache slots */nSlot45060,1695211
  int nReserve;                  /* Try to keep nFreeSlot above this */nReserve45061,1695277
  void *pStart, *pEnd;           /* Bounds of global page cache memory */pStart45062,1695349
  void *pStart, *pEnd;           /* Bounds of global page cache memory */pEnd45062,1695349
  sqlite3_mutex *mutex;          /* Mutex for accessing the following: */mutex45064,1695499
  PgFreeslot *pFree;             /* Free page blocks */pFree45065,1695573
  int nFreeSlot;                 /* Number of unused pcache slots */nFreeSlot45066,1695629
  int bUnderPressure;            /* True if low on PAGECACHE memory */bUnderPressure45071,1695968
} pcache1_g;pcache1_g45072,1696039
#define pcache1 pcache145079,1696257
# define pcache1EnterMutex(pcache1EnterMutex45085,1696442
# define pcache1LeaveMutex(pcache1LeaveMutex45086,1696495
# define PCACHE1_MIGHT_USE_GROUP_MUTEX PCACHE1_MIGHT_USE_GROUP_MUTEX45087,1696548
# define pcache1EnterMutex(pcache1EnterMutex45089,1696595
# define pcache1LeaveMutex(pcache1LeaveMutex45090,1696657
# define PCACHE1_MIGHT_USE_GROUP_MUTEX PCACHE1_MIGHT_USE_GROUP_MUTEX45091,1696719
SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){sqlite3PCacheBufferSetup45107,1697362
static int pcache1InitBulk(PCache1 *pCache){pcache1InitBulk45132,1698059
static void *pcache1Alloc(int nByte){pcache1Alloc45175,1699427
static void pcache1Free(void *p){pcache1Free45213,1700615
static int pcache1MemSize(void *p){pcache1MemSize45246,1701615
static PgHdr1 *pcache1AllocPage(PCache1 *pCache, int benignMalloc){pcache1AllocPage45263,1702076
static void pcache1FreePage(PgHdr1 *p){pcache1FreePage45313,1703530
SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){sqlite3PageMalloc45337,1704158
SQLITE_PRIVATE void sqlite3PageFree(void *p){sqlite3PageFree45344,1704305
static int pcache1UnderMemoryPressure(PCache1 *pCache){pcache1UnderMemoryPressure45365,1705043
static void pcache1ResizeHash(PCache1 *p){pcache1ResizeHash45382,1705597
static PgHdr1 *pcache1PinPage(PgHdr1 *pPage){pcache1PinPage45423,1706656
static void pcache1RemoveFromHash(PgHdr1 *pPage, int freeFlag){pcache1RemoveFromHash45451,1707441
static void pcache1EnforceMaxPage(PCache1 *pCache){pcache1EnforceMaxPage45469,1707948
static void pcache1TruncateUnsafe(pcache1TruncateUnsafe45494,1708711
static int pcache1Init(void *NotUsed){pcache1Init45545,1710473
static void pcache1Shutdown(void *NotUsed){pcache1Shutdown45598,1712133
static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){pcache1Create45612,1712444
static void pcache1Cachesize(sqlite3_pcache *p, int nMax){pcache1Cachesize45659,1713954
static void pcache1Shrink(sqlite3_pcache *p){pcache1Shrink45678,1714498
static int pcache1Pagecount(sqlite3_pcache *p){pcache1Pagecount45695,1714934
static SQLITE_NOINLINE PgHdr1 *pcache1FetchStage2(pcache1FetchStage245713,1715482
static PgHdr1 *pcache1FetchNoMutex(pcache1FetchNoMutex45841,1719946
static PgHdr1 *pcache1FetchWithMutex(pcache1FetchWithMutex45871,1720855
static sqlite3_pcache_page *pcache1Fetch(pcache1Fetch45886,1721207
static void pcache1Unpin(pcache1Unpin45917,1722061
static void pcache1Rekey(pcache1Rekey45953,1722994
static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){pcache1Truncate45993,1723936
static void pcache1Destroy(sqlite3_pcache *p){pcache1Destroy46008,1724347
SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){sqlite3PCacheSetDefault46031,1725189
SQLITE_PRIVATE int sqlite3HeaderSizePcache1(void){ return ROUND8(sizeof(PgHdr1)); }sqlite3HeaderSizePcache146053,1726010
SQLITE_PRIVATE sqlite3_mutex *sqlite3Pcache1Mutex(void){sqlite3Pcache1Mutex46059,1726225
SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){sqlite3PcacheReleaseMemory46073,1726736
SQLITE_PRIVATE void sqlite3PcacheStats(sqlite3PcacheStats46103,1727563
#define ROWSET_ALLOCATION_SIZE ROWSET_ALLOCATION_SIZE46193,1731070
#define ROWSET_ENTRY_PER_CHUNK ROWSET_ENTRY_PER_CHUNK46198,1731167
struct RowSetEntry {            RowSetEntry46209,1731631
  i64 v;                        /* ROWID value for this entry */v46210,1731664
  struct RowSetEntry *pRight;   /* Right subtree (larger entries) or list */pRight46211,1731729
  struct RowSetEntry *pLeft;    /* Left subtree (smaller entries) */pLeft46212,1731806
struct RowSetChunk {RowSetChunk46221,1732124
  struct RowSetChunk *pNextChunk;        /* Next chunk on list of them all */pNextChunk46222,1732145
  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; /* Allocated entries */aEntry46223,1732223
struct RowSet {RowSet46231,1732424
  struct RowSetChunk *pChunk;    /* List of all chunk allocations */pChunk46232,1732440
  sqlite3 *db;                   /* The database connection */db46233,1732509
  struct RowSetEntry *pEntry;    /* List of entries using pRight */pEntry46234,1732572
  struct RowSetEntry *pLast;     /* Last entry on the pEntry list */pLast46235,1732640
  struct RowSetEntry *pFresh;    /* Source of new entry objects */pFresh46236,1732709
  struct RowSetEntry *pForest;   /* List of binary trees of entries */pForest46237,1732776
  u16 nFresh;                    /* Number of objects on pFresh */nFresh46238,1732847
  u16 rsFlags;                   /* Various flags */rsFlags46239,1732914
  int iBatch;                    /* Current insert batch */iBatch46240,1732967
#define ROWSET_SORTED ROWSET_SORTED46246,1733074
#define ROWSET_NEXT ROWSET_NEXT46247,1733142
SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){sqlite3RowSetInit46261,1733684
SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){sqlite3RowSetClear46282,1734291
static struct RowSetEntry *rowSetEntryAlloc(RowSet *p){rowSetEntryAlloc46304,1734892
SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){sqlite3RowSetInsert46329,1735597
static struct RowSetEntry *rowSetEntryMerge(rowSetEntryMerge46360,1736485
static struct RowSetEntry *rowSetEntrySort(struct RowSetEntry *pIn){rowSetEntrySort46395,1737321
static void rowSetTreeToList(rowSetTreeToList46424,1738120
static struct RowSetEntry *rowSetNDeepTree(rowSetNDeepTree46459,1739257
static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){rowSetListToTree46495,1740399
SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){sqlite3RowSetNext46527,1741372
SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, int iBatch, sqlite3_int64 iRowid){sqlite3RowSetTest46561,1742482
#define SQLITE_WAL_HSQLITE_WAL_H46666,1746159
#define WAL_SYNC_TRANSACTIONS WAL_SYNC_TRANSACTIONS46673,1746306
#define SQLITE_SYNC_MASK SQLITE_SYNC_MASK46674,1746386
# define sqlite3WalOpen(sqlite3WalOpen46677,1746488
# define sqlite3WalLimit(sqlite3WalLimit46678,1746539
# define sqlite3WalClose(sqlite3WalClose46679,1746569
# define sqlite3WalBeginReadTransaction(sqlite3WalBeginReadTransaction46680,1746620
# define sqlite3WalEndReadTransaction(sqlite3WalEndReadTransaction46681,1746671
# define sqlite3WalDbsize(sqlite3WalDbsize46682,1746712
# define sqlite3WalBeginWriteTransaction(sqlite3WalBeginWriteTransaction46683,1746763
# define sqlite3WalEndWriteTransaction(sqlite3WalEndWriteTransaction46684,1746814
# define sqlite3WalUndo(sqlite3WalUndo46685,1746865
# define sqlite3WalSavepoint(sqlite3WalSavepoint46686,1746916
# define sqlite3WalSavepointUndo(sqlite3WalSavepointUndo46687,1746950
# define sqlite3WalFrames(sqlite3WalFrames46688,1747001
# define sqlite3WalCheckpoint(sqlite3WalCheckpoint46689,1747052
# define sqlite3WalCallback(sqlite3WalCallback46690,1747105
# define sqlite3WalExclusiveMode(sqlite3WalExclusiveMode46691,1747156
# define sqlite3WalHeapMemory(sqlite3WalHeapMemory46692,1747207
# define sqlite3WalFramesize(sqlite3WalFramesize46693,1747258
# define sqlite3WalFindFrame(sqlite3WalFindFrame46694,1747309
# define sqlite3WalFile(sqlite3WalFile46695,1747360
#define WAL_SAVEPOINT_NDATA WAL_SAVEPOINT_NDATA46698,1747418
typedef struct Wal Wal;Wal46703,1747553
#define PAGERTRACE(PAGERTRACE46896,1756178
#define PAGERID(PAGERID46907,1756501
#define FILEHANDLEID(FILEHANDLEID46908,1756535
#define PAGER_OPEN PAGER_OPEN47127,1767084
#define PAGER_READER PAGER_READER47128,1767122
#define PAGER_WRITER_LOCKED PAGER_WRITER_LOCKED47129,1767160
#define PAGER_WRITER_CACHEMOD PAGER_WRITER_CACHEMOD47130,1767198
#define PAGER_WRITER_DBMOD PAGER_WRITER_DBMOD47131,1767236
#define PAGER_WRITER_FINISHED PAGER_WRITER_FINISHED47132,1767274
#define PAGER_ERROR PAGER_ERROR47133,1767312
#define UNKNOWN_LOCK UNKNOWN_LOCK47183,1770099
# define CODEC1(CODEC147189,1770240
# define CODEC2(CODEC247191,1770328
# define CODEC1(CODEC147195,1770468
# define CODEC2(CODEC247196,1770509
#define MAX_SECTOR_SIZE MAX_SECTOR_SIZE47205,1770841
typedef struct PagerSavepoint PagerSavepoint;PagerSavepoint47221,1771535
struct PagerSavepoint {PagerSavepoint47222,1771581
  i64 iOffset;                 /* Starting offset in main journal */iOffset47223,1771605
  i64 iHdrOffset;              /* See above */iHdrOffset47224,1771674
  Bitvec *pInSavepoint;        /* Set of pages in this savepoint */pInSavepoint47225,1771721
  Pgno nOrig;                  /* Original number of pages in file */nOrig47226,1771789
  Pgno iSubRec;                /* Index of first record in sub-journal */iSubRec47227,1771859
  u32 aWalData[WAL_SAVEPOINT_NDATA];        /* WAL savepoint context */aWalData47229,1771957
#define SPILLFLAG_OFF SPILLFLAG_OFF47236,1772116
#define SPILLFLAG_ROLLBACK SPILLFLAG_ROLLBACK47237,1772192
#define SPILLFLAG_NOSYNC SPILLFLAG_NOSYNC47238,1772271
struct Pager {Pager47396,1779960
  sqlite3_vfs *pVfs;          /* OS functions to use for IO */pVfs47397,1779975
  u8 exclusiveMode;           /* Boolean. True if locking_mode==EXCLUSIVE */exclusiveMode47398,1780038
  u8 journalMode;             /* One of the PAGER_JOURNALMODE_* values */journalMode47399,1780115
  u8 useJournal;              /* Use a rollback journal on this file */useJournal47400,1780189
  u8 noSync;                  /* Do not sync the journal if true */noSync47401,1780261
  u8 fullSync;                /* Do extra syncs of the journal for robustness */fullSync47402,1780329
  u8 extraSync;               /* sync directory after journal delete */extraSync47403,1780410
  u8 ckptSyncFlags;           /* SYNC_NORMAL or SYNC_FULL for checkpoint */ckptSyncFlags47404,1780482
  u8 walSyncFlags;            /* SYNC_NORMAL or SYNC_FULL for wal writes */walSyncFlags47405,1780558
  u8 syncFlags;               /* SYNC_NORMAL or SYNC_FULL otherwise */syncFlags47406,1780634
  u8 tempFile;                /* zFilename is a temporary or immutable file */tempFile47407,1780705
  u8 noLock;                  /* Do not lock (except in WAL mode) */noLock47408,1780784
  u8 readOnly;                /* True for a read-only database */readOnly47409,1780853
  u8 memDb;                   /* True to inhibit all file I/O */memDb47410,1780919
  u8 eState;                  /* Pager state (OPEN, READER, WRITER_LOCKED..) */eState47421,1781545
  u8 eLock;                   /* Current lock held on database file */eLock47422,1781625
  u8 changeCountDone;         /* Set after incrementing the change-counter */changeCountDone47423,1781696
  u8 setMaster;               /* True if a m-j name has been written to jrnl */setMaster47424,1781774
  u8 doNotSpill;              /* Do not spill the cache when non-zero */doNotSpill47425,1781854
  u8 subjInMemory;            /* True to use in-memory sub-journals */subjInMemory47426,1781927
  u8 bUseFetch;               /* True to use xFetch() */bUseFetch47427,1781998
  u8 hasHeldSharedLock;       /* True if a shared lock has ever been held */hasHeldSharedLock47428,1782055
  Pgno dbSize;                /* Number of pages in the database */dbSize47429,1782132
  Pgno dbOrigSize;            /* dbSize before the current transaction */dbOrigSize47430,1782200
  Pgno dbFileSize;            /* Number of pages in the database file */dbFileSize47431,1782274
  Pgno dbHintSize;            /* Value passed to FCNTL_SIZE_HINT call */dbHintSize47432,1782347
  int errCode;                /* One of several kinds of errors */errCode47433,1782420
  int nRec;                   /* Pages journalled since last j-header written */nRec47434,1782487
  u32 cksumInit;              /* Quasi-random value added to every checksum */cksumInit47435,1782568
  u32 nSubRec;                /* Number of records written to sub-journal */nSubRec47436,1782647
  Bitvec *pInJournal;         /* One bit for each page in the database file */pInJournal47437,1782724
  sqlite3_file *fd;           /* File descriptor for database */fd47438,1782803
  sqlite3_file *jfd;          /* File descriptor for main journal */jfd47439,1782868
  sqlite3_file *sjfd;         /* File descriptor for sub-journal */sjfd47440,1782937
  i64 journalOff;             /* Current write offset in the journal file */journalOff47441,1783005
  i64 journalHdr;             /* Byte offset to previous journal header */journalHdr47442,1783082
  sqlite3_backup *pBackup;    /* Pointer to list of ongoing backup processes */pBackup47443,1783157
  PagerSavepoint *aSavepoint; /* Array of active savepoints */aSavepoint47444,1783237
  int nSavepoint;             /* Number of elements in aSavepoint[] */nSavepoint47445,1783300
  u32 iDataVersion;           /* Changes whenever database content changes */iDataVersion47446,1783371
  char dbFileVers[16];        /* Changes whenever database file changes */dbFileVers47447,1783449
  int nMmapOut;               /* Number of mmap pages currently outstanding */nMmapOut47449,1783525
  sqlite3_int64 szMmap;       /* Desired maximum mmap size */szMmap47450,1783604
  PgHdr *pMmapFreelist;       /* List of free mmap page headers (pDirty) */pMmapFreelist47451,1783666
  u16 nExtra;                 /* Add this many bytes to each in-memory page */nExtra47456,1783876
  i16 nReserve;               /* Number of unused bytes at end of each page */nReserve47457,1783955
  u32 vfsFlags;               /* Flags for sqlite3_vfs.xOpen() */vfsFlags47458,1784034
  u32 sectorSize;             /* Assumed sector size during rollback */sectorSize47459,1784100
  int pageSize;               /* Number of bytes in a page */pageSize47460,1784172
  Pgno mxPgno;                /* Maximum allowed size of the database */mxPgno47461,1784234
  i64 journalSizeLimit;       /* Size limit for persistent journal files */journalSizeLimit47462,1784307
  char *zFilename;            /* Name of the database file */zFilename47463,1784383
  char *zJournal;             /* Name of the journal file */zJournal47464,1784445
  int (*xBusyHandler)(void*); /* Function to call when busy */xBusyHandler47465,1784506
  void *pBusyHandlerArg;      /* Context argument for xBusyHandler */pBusyHandlerArg47466,1784569
  int aStat[3];               /* Total cache hits, misses and writes */aStat47467,1784639
  int nRead;                  /* Database pages read */nRead47469,1784730
  void (*xReiniter)(DbPage*); /* Call this routine when reloading pages */xReiniter47471,1784793
  int (*xGet)(Pager*,Pgno,DbPage**,int); /* Routine to fetch a patch */xGet47472,1784868
  void *(*xCodec)(void*,void*,Pgno,int); /* Routine for en/decoding data */xCodec47474,1784964
  void (*xCodecSizeChng)(void*,int,int); /* Notify of page size changes */xCodecSizeChng47475,1785040
  void (*xCodecFree)(void*);             /* Destructor for the codec */xCodecFree47476,1785115
  void *pCodec;               /* First argument to xCodec... methods */pCodec47477,1785187
  char *pTmpSpace;            /* Pager.pageSize bytes of space for tmp use */pTmpSpace47479,1785266
  PCache *pPCache;            /* Pointer to page cache object */pPCache47480,1785344
  Wal *pWal;                  /* Write-ahead log used by "journal_mode=wal" */pWal47482,1785433
  char *zWal;                 /* File name for write-ahead log */zWal47483,1785512
#define PAGER_STAT_HIT PAGER_STAT_HIT47492,1785782
#define PAGER_STAT_MISS PAGER_STAT_MISS47493,1785809
#define PAGER_STAT_WRITE PAGER_STAT_WRITE47494,1785836
SQLITE_API int sqlite3_pager_readdb_count = 0;    /* Number of full pages read from DB */sqlite3_pager_readdb_count47502,1786067
SQLITE_API int sqlite3_pager_writedb_count = 0;   /* Number of full pages written to DB */sqlite3_pager_writedb_count47503,1786157
SQLITE_API int sqlite3_pager_writej_count = 0;    /* Number of pages written to journal */sqlite3_pager_writej_count47504,1786248
# define PAGER_INCR(PAGER_INCR47505,1786339
# define PAGER_INCR(PAGER_INCR47507,1786373
static const unsigned char aJournalMagic[] = {aJournalMagic47535,1787707
#define JOURNAL_PG_SZ(JOURNAL_PG_SZ47543,1787904
#define JOURNAL_HDR_SZ(JOURNAL_HDR_SZ47549,1788095
# define MEMDB MEMDB47558,1788440
# define MEMDB MEMDB47560,1788463
# define USEFETCH(USEFETCH47568,1788674
# define USEFETCH(USEFETCH47570,1788718
#define PAGER_MAX_PGNO PAGER_MAX_PGNO47576,1788803
#define isOpen(isOpen47590,1789132
SQLITE_PRIVATE int sqlite3PagerUseWal(Pager *pPager, Pgno pgno){sqlite3PagerUseWal47597,1789389
# define pagerUseWal(pagerUseWal47606,1789626
# define pagerUseWal(pagerUseWal47608,1789671
# define pagerRollbackWal(pagerRollbackWal47609,1789697
# define pagerWalFrames(pagerWalFrames47610,1789728
# define pagerOpenWalIfPresent(pagerOpenWalIfPresent47611,1789763
# define pagerBeginReadTransaction(pagerBeginReadTransaction47612,1789807
static int assert_pager_state(Pager *p){assert_pager_state47624,1790056
static char *print_pager_state(Pager *p){print_pager_state47763,1794958
static void setGetterMethod(Pager *pPager){setGetterMethod47816,1797105
static int subjRequiresPage(PgHdr *pPg){subjRequiresPage47841,1797806
static int pageInJournal(Pager *pPager, PgHdr *pPg){pageInJournal47859,1798210
static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){read32bits47871,1798576
#define put32bits(put32bits47883,1798872
static int write32bits(sqlite3_file *fd, i64 offset, u32 val){write32bits47890,1799062
static int pagerUnlockDb(Pager *pPager, int eLock){pagerUnlockDb47905,1799619
static int pagerLockDb(Pager *pPager, int eLock){pagerLockDb47932,1800584
static int jrnlBufferSize(Pager *pPager){jrnlBufferSize47964,1801804
# define jrnlBufferSize(jrnlBufferSize47986,1802481
static u32 pager_datahash(int nByte, unsigned char *pData){pager_datahash47998,1802764
static u32 pager_pagehash(PgHdr *pPage){pager_pagehash48006,1802931
static void pager_set_pagehash(PgHdr *pPage){pager_set_pagehash48009,1803055
#define CHECK_PAGE(CHECK_PAGE48018,1803377
static void checkPage(PgHdr *pPg){checkPage48019,1803412
#define pager_datahash(pager_datahash48026,1803604
#define pager_pagehash(pager_pagehash48027,1803635
#define pager_set_pagehash(pager_set_pagehash48028,1803664
#define CHECK_PAGE(CHECK_PAGE48029,1803694
static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){readMasterJournal48057,1804960
static i64 journalHdrOffset(Pager *pPager){journalHdrOffset48111,1806766
static int zeroJournalHdr(Pager *pPager, int doTruncate){zeroJournalHdr48144,1808080
static int writeJournalHdr(Pager *pPager){writeJournalHdr48194,1809961
static int readJournalHdr(readJournalHdr48312,1815289
static int writeMasterJournal(Pager *pPager, const char *zMaster){writeMasterJournal48437,1820251
static void pager_reset(Pager *pPager){pager_reset48505,1822741
SQLITE_PRIVATE u32 sqlite3PagerDataVersion(Pager *pPager){sqlite3PagerDataVersion48514,1822937
static void releaseAllSavepoints(Pager *pPager){releaseAllSavepoints48524,1823272
static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){addToSavepointBitvecs48543,1823914
static void pager_unlock(Pager *pPager){pager_unlock48575,1825154
static int pager_error(Pager *pPager, int rc){pager_error48673,1828994
static int pagerFlushOnCommit(Pager *pPager, int bCommit){pagerFlushOnCommit48707,1830011
static int pager_end_transaction(Pager *pPager, int hasMaster, int bCommit){pager_end_transaction48767,1832714
static void pagerUnlockAndRollback(Pager *pPager){pagerUnlockAndRollback48913,1838580
static u32 pager_cksum(Pager *pPager, const u8 *aData){pager_cksum48947,1839998
static void pagerReportSize(Pager *pPager){pagerReportSize48962,1840375
# define pagerReportSize(pagerReportSize48969,1840575
SQLITE_PRIVATE void sqlite3PagerAlignReserve(Pager *pDest, Pager *pSrc){sqlite3PagerAlignReserve48978,1840884
static int pager_playback_one_page(pager_playback_one_page49023,1842856
static int pager_delmaster(Pager *pPager, const char *zMaster){pager_delmaster49268,1853829
static int pager_truncate(Pager *pPager, Pgno nPage){pager_truncate49378,1858049
SQLITE_PRIVATE int sqlite3SectorSize(sqlite3_file *pFile){sqlite3SectorSize49414,1859255
static void setSectorSize(Pager *pPager){setSectorSize49448,1860697
static int pager_playback(Pager *pPager, int isHot){pager_playback49521,1864054
static int readDbPage(PgHdr *pPg, u32 iFrame){readDbPage49729,1872154
static void pager_write_changecounter(PgHdr *pPg){pager_write_changecounter49791,1874502
static int pagerUndoCallback(void *pCtx, Pgno iPg){pagerUndoCallback49818,1875664
static int pagerRollbackWal(Pager *pPager){pagerRollbackWal49857,1876846
static int pagerWalFrames(pagerWalFrames49889,1878033
static int pagerBeginReadTransaction(Pager *pPager){pagerBeginReadTransaction49956,1880117
static int pagerPagecount(Pager *pPager, Pgno *pnPage){pagerPagecount49989,1881332
static int pagerOpenWalIfPresent(Pager *pPager){pagerOpenWalIfPresent50049,1883655
static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){pagerPlaybackSavepoint50118,1886365
SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){sqlite3PagerSetCachesize50230,1890492
SQLITE_PRIVATE int sqlite3PagerSetSpillsize(Pager *pPager, int mxPage){sqlite3PagerSetSpillsize50238,1890741
static void pagerFixMaplimit(Pager *pPager){pagerFixMaplimit50245,1890954
SQLITE_PRIVATE void sqlite3PagerSetMmapLimit(Pager *pPager, sqlite3_int64 szMmap){sqlite3PagerSetMmapLimit50261,1891383
SQLITE_PRIVATE void sqlite3PagerShrink(Pager *pPager){sqlite3PagerShrink50269,1891581
SQLITE_PRIVATE void sqlite3PagerSetFlags(sqlite3PagerSetFlags50325,1894387
SQLITE_API int sqlite3_opentemp_count = 0;sqlite3_opentemp_count50370,1895799
static int pagerOpentemp(pagerOpentemp50388,1896314
SQLITE_PRIVATE void sqlite3PagerSetBusyhandler(sqlite3PagerSetBusyhandler50427,1897815
SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){sqlite3PagerSetPagesize50473,1899747
SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){sqlite3PagerTempSpace50536,1901884
SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){sqlite3PagerMaxPageCount50547,1902255
static int saved_cnt;saved_cnt50567,1902961
void disable_simulated_io_errors(void){disable_simulated_io_errors50568,1902983
void enable_simulated_io_errors(void){enable_simulated_io_errors50572,1903098
# define disable_simulated_io_errors(disable_simulated_io_errors50576,1903185
# define enable_simulated_io_errors(enable_simulated_io_errors50577,1903224
SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){sqlite3PagerReadFileheader50594,1903888
SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){sqlite3PagerPagecount50622,1904747
static int pager_wait_on_lock(Pager *pPager, int locktype){pager_wait_on_lock50643,1905554
static void assertTruncateConstraintCb(PgHdr *pPg){assertTruncateConstraintCb50685,1907382
static void assertTruncateConstraint(Pager *pPager){assertTruncateConstraint50689,1907542
# define assertTruncateConstraint(assertTruncateConstraint50693,1907677
SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){sqlite3PagerTruncateImage50707,1908260
static int pagerSyncHotJournal(Pager *pPager){pagerSyncHotJournal50738,1909652
static int pagerAcquireMapPage(pagerAcquireMapPage50760,1910360
static void pagerReleaseMapPage(PgHdr *pPg){pagerReleaseMapPage50804,1911585
static void pagerFreeMapHdrs(Pager *pPager){pagerFreeMapHdrs50817,1911957
SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager, sqlite3 *db){sqlite3PagerClose50841,1912731
SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){sqlite3PagerPagenumber50902,1914780
SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){sqlite3PagerRef50910,1914920
static int syncJournal(Pager *pPager, int newHdr){syncJournal50949,1916443
static int pager_write_pagelist(Pager *pPager, PgHdr *pList){pager_write_pagelist51092,1922658
static int openSubJournal(Pager *pPager){openSubJournal51184,1926122
static int subjournalPage(PgHdr *pPg){subjournalPage51210,1927051
static int subjournalPageIfRequired(PgHdr *pPg){subjournalPageIfRequired51247,1928321
static int pagerStress(void *p, PgHdr *pPg){pagerStress51274,1929410
SQLITE_PRIVATE int sqlite3PagerFlush(Pager *pPager){sqlite3PagerFlush51343,1931715
SQLITE_PRIVATE int sqlite3PagerOpen(sqlite3PagerOpen51392,1933738
static int databaseIsUnmoved(Pager *pPager){databaseIsUnmoved51686,1945200
static int hasHotJournal(Pager *pPager, int *pExists){hasHotJournal51737,1947448
SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){sqlite3PagerSharedLock51857,1952791
static void pagerUnlockIfUnused(Pager *pPager){pagerUnlockIfUnused52079,1961704
static int getPageNormal(getPageNormal52142,1964746
static int getPageMMap(getPageMMap52249,1968277
static int getPageError(getPageError52321,1970581
SQLITE_PRIVATE int sqlite3PagerGet(sqlite3PagerGet52337,1971042
SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){sqlite3PagerLookup52357,1971824
SQLITE_PRIVATE void sqlite3PagerUnrefNotNull(DbPage *pPg){sqlite3PagerUnrefNotNull52376,1972452
SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){sqlite3PagerUnref52387,1972712
static int pager_open_journal(Pager *pPager){pager_open_journal52413,1973831
SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){sqlite3PagerBegin52502,1976965
static SQLITE_NOINLINE int pagerAddPageToRollbackJournal(PgHdr *pPg){pagerAddPageToRollbackJournal52571,1979575
static int pager_write(PgHdr *pPg){pager_write52628,1981799
static SQLITE_NOINLINE int pagerWriteLargeSector(PgHdr *pPg){pagerWriteLargeSector52720,1985230
SQLITE_PRIVATE int sqlite3PagerWrite(PgHdr *pPg){sqlite3PagerWrite52814,1988647
SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){sqlite3PagerIswriteable52838,1989454
SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){sqlite3PagerDontWrite52863,1990472
static int pager_incr_changecounter(Pager *pPager, int isDirectMode){pager_incr_changecounter52897,1992008
# define DIRECT_MODE DIRECT_MODE52916,1992770
SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager, const char *zMaster){sqlite3PagerSync52980,1994998
SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){sqlite3PagerExclusiveLock53006,1995926
SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne(sqlite3PagerCommitPhaseOne53048,1997544
SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){sqlite3PagerCommitPhaseTwo53225,2005130
SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){sqlite3PagerRollback53291,2007917
SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){sqlite3PagerIsreadonly53341,2009789
SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){sqlite3PagerRefcount53349,2009974
SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){sqlite3PagerMemUsed53358,2010204
SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){sqlite3PagerPageRefcount53369,2010583
SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){sqlite3PagerStats53377,2010769
SQLITE_PRIVATE void sqlite3PagerCacheStat(Pager *pPager, int eStat, int reset, int *pnVal){sqlite3PagerCacheStat53401,2011641
SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){sqlite3PagerIsMemdb53421,2012302
static SQLITE_NOINLINE int pagerOpenSavepoint(Pager *pPager, int nSavepoint){pagerOpenSavepoint53435,2012846
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){sqlite3PagerOpenSavepoint53480,2014559
SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){sqlite3PagerSavepoint53522,2016393
SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){sqlite3PagerFilename53598,2019307
SQLITE_PRIVATE sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){sqlite3PagerVfs53605,2019506
SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){sqlite3PagerFile53614,2019740
SQLITE_PRIVATE sqlite3_file *sqlite3PagerJrnlFile(Pager *pPager){sqlite3PagerJrnlFile53622,2019956
SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){sqlite3PagerJournalname53633,2020203
SQLITE_PRIVATE void sqlite3PagerSetCodec(sqlite3PagerSetCodec53641,2020374
SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){sqlite3PagerGetCodec53656,2020833
SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){sqlite3PagerCodec53667,2021160
SQLITE_PRIVATE int sqlite3PagerState(Pager *pPager){sqlite3PagerState53676,2021356
SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){sqlite3PagerMovepage53707,2022702
SQLITE_PRIVATE void sqlite3PagerRekey(DbPage *pPg, Pgno iNew, u16 flags){sqlite3PagerRekey53841,2027787
SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){sqlite3PagerGetData53850,2028009
SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){sqlite3PagerGetExtra53859,2028249
SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){sqlite3PagerLockingMode53873,2028742
SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){sqlite3PagerSetJournalMode53906,2029935
SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){sqlite3PagerGetJournalMode54004,2033331
SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){sqlite3PagerOkToChangeJournalMode54013,2033597
SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){sqlite3PagerJournalSizeLimit54026,2034033
SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){sqlite3PagerBackupPtr54040,2034493
SQLITE_PRIVATE void sqlite3PagerClearCache(Pager *pPager){sqlite3PagerClearCache54048,2034703
SQLITE_PRIVATE int sqlite3PagerCheckpoint(sqlite3PagerCheckpoint54063,2035165
SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){sqlite3PagerWalCallback54082,2035896
SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){sqlite3PagerWalSupported54090,2036126
static int pagerExclusiveLock(Pager *pPager){pagerExclusiveLock54100,2036494
static int pagerOpenWal(Pager *pPager){pagerOpenWal54120,2037194
SQLITE_PRIVATE int sqlite3PagerOpenWal(sqlite3PagerOpenWal54165,2038730
SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager, sqlite3 *db){sqlite3PagerCloseWal54204,2040003
SQLITE_PRIVATE int sqlite3PagerSnapshotGet(Pager *pPager, sqlite3_snapshot **ppSnapshot){sqlite3PagerSnapshotGet54247,2041373
SQLITE_PRIVATE int sqlite3PagerSnapshotOpen(Pager *pPager, sqlite3_snapshot *pSnapshot){sqlite3PagerSnapshotOpen54260,2041798
SQLITE_PRIVATE int sqlite3PagerSnapshotRecover(Pager *pPager){sqlite3PagerSnapshotRecover54274,2042158
SQLITE_PRIVATE int sqlite3PagerWalFramesize(Pager *pPager){sqlite3PagerWalFramesize54294,2042773
SQLITE_PRIVATE int sqlite3WalTrace = 0;sqlite3WalTrace54554,2055711
# define WALTRACE(WALTRACE54555,2055751
# define WALTRACE(WALTRACE54557,2055820
#define WAL_MAX_VERSION WAL_MAX_VERSION54573,2056449
#define WALINDEX_MAX_VERSION WALINDEX_MAX_VERSION54574,2056486
#define WAL_WRITE_LOCK WAL_WRITE_LOCK54581,2056710
#define WAL_ALL_BUT_WRITE WAL_ALL_BUT_WRITE54582,2056743
#define WAL_CKPT_LOCK WAL_CKPT_LOCK54583,2056776
#define WAL_RECOVER_LOCK WAL_RECOVER_LOCK54584,2056809
#define WAL_READ_LOCK(WAL_READ_LOCK54585,2056842
#define WAL_NREADER WAL_NREADER54586,2056881
typedef struct WalIndexHdr WalIndexHdr;WalIndexHdr54590,2056961
typedef struct WalIterator WalIterator;WalIterator54591,2057001
typedef struct WalCkptInfo WalCkptInfo;WalCkptInfo54592,2057041
struct WalIndexHdr {WalIndexHdr54608,2057671
  u32 iVersion;                   /* Wal-index version */iVersion54609,2057692
  u32 unused;                     /* Unused (padding) field */unused54610,2057750
  u32 iChange;                    /* Counter incremented each transaction */iChange54611,2057813
  u8 isInit;                      /* 1 when initialized */isInit54612,2057890
  u8 bigEndCksum;                 /* True if checksums in WAL are big-endian */bigEndCksum54613,2057949
  u16 szPage;                     /* Database page size in bytes. 1==64K */szPage54614,2058029
  u32 mxFrame;                    /* Index of last valid frame in the WAL */mxFrame54615,2058105
  u32 nPage;                      /* Size of database in pages */nPage54616,2058182
  u32 aFrameCksum[2];             /* Checksum of last frame in log */aFrameCksum54617,2058248
  u32 aSalt[2];                   /* Two salt values copied from WAL header */aSalt54618,2058318
  u32 aCksum[2];                  /* Checksum over all prior fields */aCksum54619,2058397
struct WalCkptInfo {WalCkptInfo54681,2061782
  u32 nBackfill;                  /* Number of WAL frames backfilled into DB */nBackfill54682,2061803
  u32 aReadMark[WAL_NREADER];     /* Reader marks */aReadMark54683,2061883
  u8 aLock[SQLITE_SHM_NLOCK];     /* Reserved space for locks */aLock54684,2061936
  u32 nBackfillAttempted;         /* WAL frames perhaps written, or maybe not */nBackfillAttempted54685,2062001
  u32 notUsed0;                   /* Available for future enhancements */notUsed054686,2062082
#define READMARK_NOT_USED READMARK_NOT_USED54688,2062159
#define WALINDEX_LOCK_OFFSET WALINDEX_LOCK_OFFSET54696,2062450
#define WALINDEX_HDR_SIZE WALINDEX_HDR_SIZE54697,2062531
#define WAL_FRAME_HDRSIZE WAL_FRAME_HDRSIZE54700,2062651
#define WAL_HDRSIZE WAL_HDRSIZE54704,2062768
#define WAL_MAGIC WAL_MAGIC54715,2063250
#define walFrameOffset(walFrameOffset54722,2063479
struct Wal {Wal54730,2063724
  sqlite3_vfs *pVfs;         /* The VFS used to create pDbFd */pVfs54731,2063737
  sqlite3_file *pDbFd;       /* File handle for the database file */pDbFd54732,2063801
  sqlite3_file *pWalFd;      /* File handle for WAL file */pWalFd54733,2063870
  u32 iCallback;             /* Value to pass to log callback (or 0) */iCallback54734,2063930
  i64 mxWalSize;             /* Truncate WAL to this size upon reset */mxWalSize54735,2064002
  int nWiData;               /* Size of array apWiData */nWiData54736,2064074
  int szFirstBlock;          /* Size of first block written to WAL file */szFirstBlock54737,2064132
  volatile u32 **apWiData;   /* Pointer to wal-index content in memory */apWiData54738,2064207
  u32 szPage;                /* Database page size */szPage54739,2064281
  i16 readLock;              /* Which read lock is being held.  -1 for none */readLock54740,2064335
  u8 syncFlags;              /* Flags to use to sync header writes */syncFlags54741,2064414
  u8 exclusiveMode;          /* Non-zero if connection is in exclusive mode */exclusiveMode54742,2064484
  u8 writeLock;              /* True if in a write transaction */writeLock54743,2064563
  u8 ckptLock;               /* True if holding a checkpoint lock */ckptLock54744,2064629
  u8 readOnly;               /* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY */readOnly54745,2064698
  u8 truncateOnCommit;       /* True to truncate WAL file on commit */truncateOnCommit54746,2064773
  u8 syncHeader;             /* Fsync the WAL header if true */syncHeader54747,2064844
  u8 padToSectorBoundary;    /* Pad transactions out to the next sector */padToSectorBoundary54748,2064908
  WalIndexHdr hdr;           /* Wal-index header for current transaction */hdr54749,2064983
  u32 minFrame;              /* Ignore wal frames before this one */minFrame54750,2065059
  u32 iReCksum;              /* On commit, recalculate checksums from here */iReCksum54751,2065128
  const char *zWalName;      /* Name of WAL file */zWalName54752,2065206
  u32 nCkpt;                 /* Checkpoint sequence counter in the wal-header */nCkpt54753,2065258
  u8 lockError;              /* True if a locking error has occurred */lockError54755,2065359
  WalIndexHdr *pSnapshot;    /* Start transaction here if not NULL */pSnapshot54758,2065468
#define WAL_NORMAL_MODE WAL_NORMAL_MODE54765,2065598
#define WAL_EXCLUSIVE_MODE WAL_EXCLUSIVE_MODE54766,2065628
#define WAL_HEAPMEMORY_MODE WAL_HEAPMEMORY_MODE54767,2065663
#define WAL_RDWR WAL_RDWR54772,2065736
#define WAL_RDONLY WAL_RDONLY54773,2065800
#define WAL_SHM_RDONLY WAL_SHM_RDONLY54774,2065860
typedef u16 ht_slot;ht_slot54780,2066061
struct WalIterator {WalIterator54797,2066677
  int iPrior;                     /* Last result returned from the iterator */iPrior54798,2066698
  int nSegment;                   /* Number of entries in aSegment[] */nSegment54799,2066777
  struct WalSegment {WalSegment54800,2066849
    int iNext;                    /* Next slot in aIndex[] not yet returned */iNext54801,2066871
    ht_slot *aIndex;              /* i0, i1, i2... such that aPgno[iN] ascend */aIndex54802,2066950
    u32 *aPgno;                   /* Array of page numbers. */aPgno54803,2067031
    int nEntry;                   /* Nr. of entries in aPgno[] and aIndex[] */nEntry54804,2067094
    int iZero;                    /* Frame number associated with aPgno[0] */iZero54805,2067173
  } aSegment[1];                  /* One for every 32KB page in the wal-index */aSegment54806,2067251
#define HASHTABLE_NPAGE HASHTABLE_NPAGE54817,2067603
#define HASHTABLE_HASH_1 HASHTABLE_HASH_154818,2067678
#define HASHTABLE_NSLOT HASHTABLE_NSLOT54819,2067750
#define HASHTABLE_NPAGE_ONE HASHTABLE_NPAGE_ONE54826,2068036
#define WALINDEX_PGSZ WALINDEX_PGSZ54829,2068189
static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){walIndexPage54842,2068716
static volatile WalCkptInfo *walCkptInfo(Wal *pWal){walCkptInfo54884,2069998
static volatile WalIndexHdr *walIndexHdr(Wal *pWal){walIndexHdr54892,2070254
#define BYTESWAP32(BYTESWAP3254904,2070753
static void walChecksumBytes(walChecksumBytes54918,2071179
static void walShmBarrier(Wal *pWal){walShmBarrier54956,2072023
static void walIndexWriteHdr(Wal *pWal){walIndexWriteHdr54967,2072292
static void walEncodeFrame(walEncodeFrame54993,2073256
static int walDecodeFrame(walDecodeFrame55024,2074470
static const char *walLockName(int lockIdx){walLockName55079,2076307
static int walLockShared(Wal *pWal, int lockIdx){walLockShared55103,2077037
static void walUnlockShared(Wal *pWal, int lockIdx){walUnlockShared55113,2077450
static int walLockExclusive(Wal *pWal, int lockIdx, int n){walLockExclusive55119,2077728
static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){walUnlockExclusive55129,2078167
static int walHash(u32 iPage){walHash55142,2078697
static int walNextHash(int iPriorHash){walNextHash55147,2078864
static int walHashGet(walHashGet55165,2079557
static int walFramePage(u32 iFrame){walFramePage55203,2080716
static u32 walFramePgno(Wal *pWal, u32 iFrame){walFramePgno55217,2081242
static void walCleanupHash(Wal *pWal){walCleanupHash55237,2081949
static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){walIndexAppend55299,2084175
static int walIndexRecover(Wal *pWal){walIndexRecover55388,2087373
static void walIndexClose(Wal *pWal, int isDelete){walIndexClose55555,2093298
SQLITE_PRIVATE int sqlite3WalOpen(sqlite3WalOpen55582,2094342
SQLITE_PRIVATE void sqlite3WalLimit(Wal *pWal, i64 iLimit){sqlite3WalLimit55656,2096905
static int walIteratorNext(walIteratorNext55670,2097430
static void walMerge(walMerge55723,2099336
static void walMergesort(walMergesort55780,2101174
static void walIteratorFree(WalIterator *p){walIteratorFree55843,2103197
static int walIteratorInit(Wal *pWal, WalIterator **pp){walIteratorInit55859,2103748
static int walBusyLock(walBusyLock55941,2106419
static int walPagesize(Wal *pWal){walPagesize55959,2107045
static void walRestartHdr(Wal *pWal, u32 salt1){walRestartHdr55980,2107863
static int walCheckpoint(walCheckpoint56027,2109948
static void walLimitSize(Wal *pWal, i64 nMax){walLimitSize56213,2117460
SQLITE_PRIVATE int sqlite3WalClose(sqlite3WalClose56230,2117849
static int walIndexTryHdr(Wal *pWal, int *pChanged){walIndexTryHdr56311,2120994
static int walIndexReadHdr(Wal *pWal, int *pChanged){walIndexReadHdr56369,2123195
#define WAL_RETRY WAL_RETRY56434,2125517
static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){walTryBeginRead56486,2128508
SQLITE_PRIVATE int sqlite3WalSnapshotRecover(Wal *pWal){sqlite3WalSnapshotRecover56705,2137965
SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){sqlite3WalBeginReadTransaction56777,2140466
SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){sqlite3WalEndReadTransaction56867,2144001
SQLITE_PRIVATE int sqlite3WalFindFrame(sqlite3WalFindFrame56883,2144534
SQLITE_PRIVATE int sqlite3WalReadFrame(sqlite3WalReadFrame56985,2148512
SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){sqlite3WalDbsize57005,2149214
SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){sqlite3WalBeginWriteTransaction57026,2149869
SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){sqlite3WalEndWriteTransaction57064,2150870
SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){sqlite3WalUndo57086,2151619
SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){sqlite3WalSavepoint57126,2153235
SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){sqlite3WalSavepointUndo57140,2153734
static int walRestartLog(Wal *pWal){walRestartLog57177,2155016
typedef struct WalWriter {WalWriter57224,2156687
  Wal *pWal;                   /* The complete WAL information */pWal57225,2156714
  sqlite3_file *pFd;           /* The WAL file to which we write */pFd57226,2156780
  sqlite3_int64 iSyncPoint;    /* Fsync at this offset */iSyncPoint57227,2156848
  int syncFlags;               /* Flags for the fsync */syncFlags57228,2156906
  int szPage;                  /* Size of one page */szPage57229,2156963
} WalWriter;WalWriter57230,2157017
static int walWriteToLog(walWriteToLog57240,2157317
static int walWriteOneFrame(walWriteOneFrame57265,2158180
static int walRewriteChecksums(Wal *pWal, u32 iLast){walRewriteChecksums57295,2159449
SQLITE_PRIVATE int sqlite3WalFrames(sqlite3WalFrames57344,2161320
SQLITE_PRIVATE int sqlite3WalCheckpoint(sqlite3WalCheckpoint57584,2170270
SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){sqlite3WalCallback57694,2174537
SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){sqlite3WalExclusiveMode57727,2175864
SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){sqlite3WalHeapMemory57769,2177260
SQLITE_PRIVATE int sqlite3WalSnapshotGet(Wal *pWal, sqlite3_snapshot **ppSnapshot){sqlite3WalSnapshotGet57778,2177567
SQLITE_PRIVATE void sqlite3WalSnapshotOpen(Wal *pWal, sqlite3_snapshot *pSnapshot){sqlite3WalSnapshotOpen57802,2178198
SQLITE_API int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2){sqlite3_snapshot_cmp57810,2178475
SQLITE_PRIVATE int sqlite3WalFramesize(Wal *pWal){sqlite3WalFramesize57830,2179248
SQLITE_PRIVATE sqlite3_file *sqlite3WalFile(Wal *pWal){sqlite3WalFile57838,2179441
#define MX_CELL_SIZE(MX_CELL_SIZE58086,2190882
#define MX_CELL(MX_CELL58093,2191202
typedef struct MemPage MemPage;MemPage58096,2191273
typedef struct BtLock BtLock;BtLock58097,2191305
typedef struct CellInfo CellInfo;CellInfo58098,2191335
#  define SQLITE_FILE_HEADER SQLITE_FILE_HEADER58113,2192027
#define PTF_INTKEY PTF_INTKEY58120,2192210
#define PTF_ZERODATA PTF_ZERODATA58121,2192237
#define PTF_LEAFDATA PTF_LEAFDATA58122,2192264
#define PTF_LEAF PTF_LEAF58123,2192291
struct MemPage {MemPage58137,2192838
  u8 isInit;           /* True if previously initialized. MUST BE FIRST! */isInit58138,2192855
  u8 bBusy;            /* Prevent endless loops on corrupt database files */bBusy58139,2192931
  u8 intKey;           /* True if table b-trees.  False for index b-trees */intKey58140,2193008
  u8 intKeyLeaf;       /* True if the leaf of an intKey table */intKeyLeaf58141,2193085
  Pgno pgno;           /* Page number for this page */pgno58142,2193150
  u8 leaf;             /* True if a leaf page */leaf58145,2193355
  u8 hdrOffset;        /* 100 for page 1.  0 otherwise */hdrOffset58146,2193404
  u8 childPtrSize;     /* 0 if leaf==1.  4 if leaf==0 */childPtrSize58147,2193462
  u8 max1bytePayload;  /* min(maxLocal,127) */max1bytePayload58148,2193519
  u8 nOverflow;        /* Number of overflow cell bodies in aCell[] */nOverflow58149,2193566
  u16 maxLocal;        /* Copy of BtShared.maxLocal or BtShared.maxLeaf */maxLocal58150,2193637
  u16 minLocal;        /* Copy of BtShared.minLocal or BtShared.minLeaf */minLocal58151,2193712
  u16 cellOffset;      /* Index in aData of first cell pointer */cellOffset58152,2193787
  u16 nFree;           /* Number of free bytes on the page */nFree58153,2193853
  u16 nCell;           /* Number of cells on this page, local and ovfl */nCell58154,2193915
  u16 maskPage;        /* Mask for page offset */maskPage58155,2193989
  u16 aiOvfl[4];       /* Insert the i-th overflow cell before the aiOvfl-thaiOvfl58156,2194039
  u8 *apOvfl[4];       /* Pointers to the body of overflow cells */apOvfl58158,2194163
  BtShared *pBt;       /* Pointer to BtShared that this page is part of */pBt58159,2194231
  u8 *aData;           /* Pointer to disk image of the page data */aData58160,2194306
  u8 *aDataEnd;        /* One byte past the end of usable data */aDataEnd58161,2194374
  u8 *aCellIdx;        /* The cell index area */aCellIdx58162,2194440
  u8 *aDataOfst;       /* Same as aData for leaves.  aData+4 for interior */aDataOfst58163,2194489
  DbPage *pDbPage;     /* Pager page handle */pDbPage58164,2194566
  u16 (*xCellSize)(MemPage*,u8*);             /* cellSizePtr method */xCellSize58165,2194613
  void (*xParseCell)(MemPage*,u8*,CellInfo*); /* btreeParseCell method */xParseCell58166,2194684
struct BtLock {BtLock58176,2195098
  Btree *pBtree;        /* Btree handle holding this lock */pBtree58177,2195114
  Pgno iTable;          /* Root page of table */iTable58178,2195175
  u8 eLock;             /* READ_LOCK or WRITE_LOCK */eLock58179,2195224
  BtLock *pNext;        /* Next in BtShared.pLock list */pNext58180,2195278
#define READ_LOCK READ_LOCK58184,2195380
#define WRITE_LOCK WRITE_LOCK58185,2195404
struct Btree {Btree58208,2196464
  sqlite3 *db;       /* The database connection holding this btree */db58209,2196479
  BtShared *pBt;     /* Sharable content of this btree */pBt58210,2196549
  u8 inTrans;        /* TRANS_NONE, TRANS_READ or TRANS_WRITE */inTrans58211,2196607
  u8 sharable;       /* True if we can share pBt with another db */sharable58212,2196672
  u8 locked;         /* True if db currently has pBt locked */locked58213,2196740
  u8 hasIncrblobCur; /* True if there are one or more Incrblob cursors */hasIncrblobCur58214,2196803
  int wantToLock;    /* Number of nested calls to sqlite3BtreeEnter() */wantToLock58215,2196877
  int nBackup;       /* Number of backup operations reading this btree */nBackup58216,2196950
  u32 iDataVersion;  /* Combines with pBt->pPager->iDataVersion */iDataVersion58217,2197024
  Btree *pNext;      /* List of other sharable Btrees from the same db */pNext58218,2197091
  Btree *pPrev;      /* Back pointer of the same list */pPrev58219,2197165
  BtLock lock;       /* Object used to lock page 1 */lock58221,2197255
#define TRANS_NONE TRANS_NONE58232,2197587
#define TRANS_READ TRANS_READ58233,2197609
#define TRANS_WRITE TRANS_WRITE58234,2197631
struct BtShared {BtShared58271,2199133
  Pager *pPager;        /* The page cache */pPager58272,2199151
  sqlite3 *db;          /* Database connection currently using this Btree */db58273,2199196
  BtCursor *pCursor;    /* A list of all open cursors */pCursor58274,2199273
  MemPage *pPage1;      /* First page of the database */pPage158275,2199330
  u8 openFlags;         /* Flags to sqlite3BtreeOpen() */openFlags58276,2199387
  u8 autoVacuum;        /* True if auto-vacuum is enabled */autoVacuum58278,2199476
  u8 incrVacuum;        /* True if incr-vacuum is enabled */incrVacuum58279,2199537
  u8 bDoTruncate;       /* True to truncate db on commit */bDoTruncate58280,2199598
  u8 inTransaction;     /* Transaction state */inTransaction58282,2199665
  u8 max1bytePayload;   /* Maximum first byte of cell for a 1-byte payload */max1bytePayload58283,2199713
  u8 optimalReserve;    /* Desired amount of reserved space per page */optimalReserve58285,2199815
  u16 btsFlags;         /* Boolean parameters.  See BTS_* macros below */btsFlags58287,2199894
  u16 maxLocal;         /* Maximum local payload in non-LEAFDATA tables */maxLocal58288,2199968
  u16 minLocal;         /* Minimum local payload in non-LEAFDATA tables */minLocal58289,2200043
  u16 maxLeaf;          /* Maximum local payload in a LEAFDATA table */maxLeaf58290,2200118
  u16 minLeaf;          /* Minimum local payload in a LEAFDATA table */minLeaf58291,2200190
  u32 pageSize;         /* Total number of bytes on a page */pageSize58292,2200262
  u32 usableSize;       /* Number of usable bytes on each page */usableSize58293,2200324
  int nTransaction;     /* Number of open transactions (read + write) */nTransaction58294,2200390
  u32 nPage;            /* Number of pages in the database */nPage58295,2200463
  void *pSchema;        /* Pointer to space allocated by sqlite3BtreeSchema() */pSchema58296,2200525
  void (*xFreeSchema)(void*);  /* Destructor for BtShared.pSchema */xFreeSchema58297,2200606
  sqlite3_mutex *mutex; /* Non-recursive mutex required to access this object */mutex58298,2200675
  Bitvec *pHasContent;  /* Set of pages moved to free-list this transaction */pHasContent58299,2200756
  int nRef;             /* Number of references to this structure */nRef58301,2200868
  BtShared *pNext;      /* Next on a list of sharable BtShared structs */pNext58302,2200937
  BtLock *pLock;        /* List of locks held on this shared-btree struct */pLock58303,2201011
  Btree *pWriter;       /* Btree with currently open write transaction */pWriter58304,2201088
  u8 *pTmpSpace;        /* Temp space sufficient to hold a single cell */pTmpSpace58306,2201169
#define BTS_READ_ONLY BTS_READ_ONLY58312,2201293
#define BTS_PAGESIZE_FIXED BTS_PAGESIZE_FIXED58313,2201365
#define BTS_SECURE_DELETE BTS_SECURE_DELETE58314,2201444
#define BTS_INITIALLY_EMPTY BTS_INITIALLY_EMPTY58315,2201520
#define BTS_NO_WAL BTS_NO_WAL58316,2201598
#define BTS_EXCLUSIVE BTS_EXCLUSIVE58317,2201676
#define BTS_PENDING BTS_PENDING58318,2201750
struct CellInfo {CellInfo58325,2202029
  i64 nKey;      /* The key for INTKEY tables, or nPayload otherwise */nKey58326,2202047
  u8 *pPayload;  /* Pointer to the start of payload */pPayload58327,2202119
  u32 nPayload;  /* Bytes of payload */nPayload58328,2202174
  u16 nLocal;    /* Amount of payload held locally, not on overflow */nLocal58329,2202214
  u16 nSize;     /* Size of the cell content on the main b-tree page */nSize58330,2202285
#define BTCURSOR_MAX_DEPTH BTCURSOR_MAX_DEPTH58342,2202739
struct BtCursor {BtCursor58363,2203536
  Btree *pBtree;            /* The Btree to which this cursor belongs */pBtree58364,2203554
  BtShared *pBt;            /* The BtShared this cursor points to */pBt58365,2203627
  BtCursor *pNext;          /* Forms a linked list of all cursors */pNext58366,2203696
  Pgno *aOverflow;          /* Cache of overflow page locations */aOverflow58367,2203765
  CellInfo info;            /* A parse of the cell we are pointing at */info58368,2203832
  i64 nKey;                 /* Size of pKey, or last integer key */nKey58369,2203905
  void *pKey;               /* Saved key that was cursor last known position */pKey58370,2203973
  Pgno pgnoRoot;            /* The root page of this tree */pgnoRoot58371,2204053
  int nOvflAlloc;           /* Allocated size of aOverflow[] array */nOvflAlloc58372,2204114
  int skipNext;    /* Prev() is noop if negative. Next() is noop if positive.skipNext58373,2204184
  u8 curFlags;              /* zero or more BTCF_* flags defined below */curFlags58375,2204322
  u8 curPagerFlags;         /* Flags to send to sqlite3PagerGet() */curPagerFlags58376,2204396
  u8 eState;                /* One of the CURSOR_XXX constants (see below) */eState58377,2204465
  u8 hints;                 /* As configured by CursorSetHints() */hints58378,2204543
  i8 iPage;                 /* Index of current page in apPage */iPage58382,2204768
  u8 curIntKey;             /* Value of apPage[0]->intKey */curIntKey58383,2204834
  struct KeyInfo *pKeyInfo; /* Argument passed to comparison function */pKeyInfo58384,2204895
  void *padding1;           /* Make object size a multiple of 16 */padding158385,2204968
  u16 aiIdx[BTCURSOR_MAX_DEPTH];        /* Current index in apPage[i] */aiIdx58386,2205036
  MemPage *apPage[BTCURSOR_MAX_DEPTH];  /* Pages from root to current page */apPage58387,2205109
#define BTCF_WriteFlag BTCF_WriteFlag58393,2205235
#define BTCF_ValidNKey BTCF_ValidNKey58394,2205297
#define BTCF_ValidOvfl BTCF_ValidOvfl58395,2205363
#define BTCF_AtLast BTCF_AtLast58396,2205429
#define BTCF_Incrblob BTCF_Incrblob58397,2205505
#define BTCF_Multiple BTCF_Multiple58398,2205578
#define CURSOR_INVALID CURSOR_INVALID58430,2206912
#define CURSOR_VALID CURSOR_VALID58431,2206947
#define CURSOR_SKIPNEXT CURSOR_SKIPNEXT58432,2206982
#define CURSOR_REQUIRESEEK CURSOR_REQUIRESEEK58433,2207017
#define CURSOR_FAULT CURSOR_FAULT58434,2207052
# define PENDING_BYTE_PAGE(PENDING_BYTE_PAGE58439,2207168
#define PTRMAP_PAGENO(PTRMAP_PAGENO58456,2207890
#define PTRMAP_PTROFFSET(PTRMAP_PTROFFSET58457,2207947
#define PTRMAP_ISPAGE(PTRMAP_ISPAGE58458,2208010
#define PTRMAP_ROOTPAGE PTRMAP_ROOTPAGE58491,2209706
#define PTRMAP_FREEPAGE PTRMAP_FREEPAGE58492,2209732
#define PTRMAP_OVERFLOW1 PTRMAP_OVERFLOW158493,2209758
#define PTRMAP_OVERFLOW2 PTRMAP_OVERFLOW258494,2209785
#define PTRMAP_BTREE PTRMAP_BTREE58495,2209812
#define btreeIntegrity(btreeIntegrity58500,2209970
#define ISAUTOVACUUM ISAUTOVACUUM58513,2210473
#define ISAUTOVACUUM ISAUTOVACUUM58515,2210518
typedef struct IntegrityCk IntegrityCk;IntegrityCk58529,2211014
struct IntegrityCk {IntegrityCk58530,2211054
  BtShared *pBt;    /* The tree being checked out */pBt58531,2211075
  Pager *pPager;    /* The associated pager.  Also accessible by pBt->pPager */pPager58532,2211128
  u8 *aPgRef;       /* 1 bit per page in the db (see above) */aPgRef58533,2211208
  Pgno nPage;       /* Number of pages in the database */nPage58534,2211271
  int mxErr;        /* Stop accumulating errors when this reaches zero */mxErr58535,2211329
  int nErr;         /* Number of messages written to zErrMsg so far */nErr58536,2211403
  int mallocFailed; /* A memory allocation error has occurred */mallocFailed58537,2211474
  const char *zPfx; /* Error message prefix */zPfx58538,2211539
  int v1, v2;       /* Values for up to two %d fields in zPfx */v158539,2211586
  int v1, v2;       /* Values for up to two %d fields in zPfx */v258539,2211586
  StrAccum errMsg;  /* Accumulate the error message text here */errMsg58540,2211651
  u32 *heap;        /* Min-heap used for analyzing cell coverage */heap58541,2211716
#define get2byte(get2byte58547,2211871
#define put2byte(put2byte58548,2211914
#define get4byte get4byte58549,2211978
#define put4byte put4byte58550,2212011
# define get2byteAligned(get2byteAligned58558,2212267
# define get2byteAligned(get2byteAligned58560,2212362
# define get2byteAligned(get2byteAligned58562,2212472
# define get2byteAligned(get2byteAligned58564,2212536
static void lockBtreeMutex(Btree *p){lockBtreeMutex58577,2212982
static void SQLITE_NOINLINE unlockBtreeMutex(Btree *p){unlockBtreeMutex58591,2213327
SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){sqlite3BtreeEnter58621,2214424
static void SQLITE_NOINLINE btreeLockCarefully(Btree *p){btreeLockCarefully58655,2215784
SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){sqlite3BtreeLeave58693,2216830
SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){sqlite3BtreeHoldsMutex58711,2217258
static void SQLITE_NOINLINE btreeEnterAll(sqlite3 *db){btreeEnterAll58736,2218212
SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){sqlite3BtreeEnterAll58750,2218519
static void SQLITE_NOINLINE btreeLeaveAll(sqlite3 *db){btreeLeaveAll58753,2218625
SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){sqlite3BtreeLeaveAll58762,2218837
SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){sqlite3BtreeHoldsAllMutexes58773,2219136
SQLITE_PRIVATE int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){sqlite3SchemaMutexHeld58802,2219845
SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){sqlite3BtreeEnter58826,2220687
SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){sqlite3BtreeEnterAll58829,2220760
SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){sqlite3BtreeEnterCursor58848,2221300
SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){sqlite3BtreeLeaveCursor58852,2221421
static const char zMagicHeader[] = SQLITE_FILE_HEADER;zMagicHeader58883,2222477
# define TRACE(TRACE58893,2222750
#define get2byteNotZero(get2byteNotZero58905,2223184
#define BTALLOC_ANY BTALLOC_ANY58910,2223315
#define BTALLOC_EXACT BTALLOC_EXACT58911,2223373
#define BTALLOC_LE BTALLOC_LE58912,2223445
#define IfNotOmitAV(IfNotOmitAV58921,2223726
#define IfNotOmitAV(IfNotOmitAV58923,2223765
SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;sqlite3SharedCacheList58936,2224156
static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;sqlite3SharedCacheList58938,2224226
SQLITE_API int sqlite3_enable_shared_cache(int enable){sqlite3_enable_shared_cache58950,2224609
  #define querySharedCacheTableLock(querySharedCacheTableLock58968,2225244
  #define setSharedCacheTableLock(setSharedCacheTableLock58969,2225297
  #define clearAllSharedCacheTableLocks(clearAllSharedCacheTableLocks58970,2225348
  #define downgradeAllSharedCacheTableLocks(downgradeAllSharedCacheTableLocks58971,2225391
  #define hasSharedCacheTableLock(hasSharedCacheTableLock58972,2225438
  #define hasReadConflicts(hasReadConflicts58973,2225483
static int hasSharedCacheTableLock(hasSharedCacheTableLock59001,2226541
static int hasReadConflicts(Btree *pBtree, Pgno iRoot){hasReadConflicts59088,2229615
static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){querySharedCacheTableLock59108,2230181
static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){setSharedCacheTableLock59180,2232826
static void clearAllSharedCacheTableLocks(Btree *p){clearAllSharedCacheTableLocks59244,2234969
static void downgradeAllSharedCacheTableLocks(Btree *p){downgradeAllSharedCacheTableLocks59288,2236372
static int cursorHoldsMutex(BtCursor *p){cursorHoldsMutex59311,2236981
static int cursorOwnsBtShared(BtCursor *p){cursorOwnsBtShared59323,2237594
#define invalidateOverflowCache(invalidateOverflowCache59333,2237840
static void invalidateAllOverflowCache(BtShared *pBt){invalidateAllOverflowCache59339,2238025
static void invalidateIncrblobCursors(invalidateIncrblobCursors59361,2238827
  #define invalidateIncrblobCursors(invalidateIncrblobCursors59382,2239473
static int btreeSetHasContent(BtShared *pBt, Pgno pgno){btreeSetHasContent59420,2241331
static int btreeGetHasContent(BtShared *pBt, Pgno pgno){btreeGetHasContent59442,2242006
static void btreeClearHasContent(BtShared *pBt){btreeClearHasContent59451,2242302
static void btreeReleaseAllCursorPages(BtCursor *pCur){btreeReleaseAllCursorPages59459,2242477
static int saveCursorKey(BtCursor *pCur){saveCursorKey59481,2243265
static int saveCursorPosition(BtCursor *pCur){saveCursorPosition59517,2244290
static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){saveAllCursors59564,2246002
static int SQLITE_NOINLINE saveCursorsOnList(saveCursorsOnList59581,2246717
SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){sqlite3BtreeClearCursor59606,2247392
static int btreeMoveto(btreeMoveto59618,2247769
static int btreeRestoreCursorPosition(BtCursor *pCur){btreeRestoreCursorPosition59655,2249055
#define restoreCursorPosition(restoreCursorPosition59677,2249683
SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur){sqlite3BtreeCursorHasMoved59694,2250330
SQLITE_PRIVATE int sqlite3BtreeCursorRestore(BtCursor *pCur, int *pDifferentRow){sqlite3BtreeCursorRestore59711,2251000
SQLITE_PRIVATE void sqlite3BtreeCursorHint(BtCursor *pCur, int eHintType, ...){sqlite3BtreeCursorHint59736,2251658
SQLITE_PRIVATE void sqlite3BtreeCursorHintFlags(BtCursor *pCur, unsigned x){sqlite3BtreeCursorHintFlags59744,2251860
static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){ptrmapPageno59760,2252381
static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){ptrmapPut59784,2253081
static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){ptrmapGet59836,2254686
  #define ptrmapPut(ptrmapPut59868,2255637
  #define ptrmapGet(ptrmapGet59869,2255669
  #define ptrmapPutOvflPtr(ptrmapPutOvflPtr59870,2255708
#define findCell(findCell59883,2256131
#define findCellPastPtr(findCellPastPtr59885,2256229
static SQLITE_NOINLINE void btreeParseCellAdjustSizeForOverflow(btreeParseCellAdjustSizeForOverflow59895,2256571
static void btreeParseCellPtrNoPayload(btreeParseCellPtrNoPayload59940,2258340
static void btreeParseCellPtr(btreeParseCellPtr59957,2258865
static void btreeParseCellPtrIndex(btreeParseCellPtrIndex60025,2260787
static void btreeParseCell(btreeParseCell60062,2262038
static u16 cellSizePtr(MemPage *pPage, u8 *pCell){cellSizePtr60082,2262768
static u16 cellSizePtrNoPayload(MemPage *pPage, u8 *pCell){cellSizePtrNoPayload60130,2264444
static u16 cellSize(MemPage *pPage, int iCell){cellSize60156,2265327
static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){ptrmapPutOvflPtr60167,2265627
static int defragmentPage(MemPage *pPage){defragmentPage60191,2266457
static u8 *pageFindSlot(MemPage *pPg, int nByte, int *pRc){pageFindSlot60281,2269728
static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){allocateSpace60344,2272035
static int freeSpace(MemPage *pPage, u16 iStart, u16 iSize){freeSpace60434,2275507
static int decodeFlags(MemPage *pPage, int flagByte){decodeFlags60536,2279343
static int btreeInitPage(MemPage *pPage){btreeInitPage60594,2281517
static void zeroPage(MemPage *pPage, int flags){zeroPage60730,2286928
static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){btreePageFromDbPage60767,2288135
static int btreeGetPage(btreeGetPage60791,2289077
static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){btreePageLookup60813,2289845
static Pgno btreePagecount(BtShared *pBt){btreePagecount60827,2290223
SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){sqlite3BtreeLastPage60830,2290289
static int getAndInitPage(getAndInitPage60849,2290935
static void releasePageNotNull(MemPage *pPage){releasePageNotNull60903,2292630
static void releasePage(MemPage *pPage){releasePage60912,2292985
static int btreeGetUnusedPage(btreeGetUnusedPage60925,2293335
static void pageReinit(DbPage *pData){pageReinit60954,2294224
static int btreeInvokeBusyHandler(void *pArg){btreeInvokeBusyHandler60976,2295021
SQLITE_PRIVATE int sqlite3BtreeOpen(sqlite3BtreeOpen61004,2296130
static int removeFromSharingList(BtShared *pBt){removeFromSharingList61296,2306346
static void allocateTempSpace(BtShared *pBt){allocateTempSpace61335,2307357
static void freeTempSpace(BtShared *pBt){freeTempSpace61364,2308506
SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){sqlite3BtreeClose61375,2308725
SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){sqlite3BtreeSetCacheSize61437,2310568
SQLITE_PRIVATE int sqlite3BtreeSetSpillSize(Btree *p, int mxPage){sqlite3BtreeSetSpillSize61456,2311270
SQLITE_PRIVATE int sqlite3BtreeSetMmapLimit(Btree *p, sqlite3_int64 szMmap){sqlite3BtreeSetMmapLimit61471,2311658
SQLITE_PRIVATE int sqlite3BtreeSetPagerFlags(sqlite3BtreeSetPagerFlags61490,2312443
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){sqlite3BtreeSetPageSize61523,2313640
SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){sqlite3BtreeGetPageSize61556,2314644
SQLITE_PRIVATE int sqlite3BtreeGetReserveNoMutex(Btree *p){sqlite3BtreeGetReserveNoMutex61571,2315244
SQLITE_PRIVATE int sqlite3BtreeGetOptimalReserve(Btree *p){sqlite3BtreeGetOptimalReserve61587,2315752
SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){sqlite3BtreeMaxPageCount61604,2316211
SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){sqlite3BtreeSecureDelete61617,2316591
SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){sqlite3BtreeSetAutoVacuum61636,2317202
SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){sqlite3BtreeGetAutoVacuum61660,2317780
static int lockBtree(BtShared *pBt){lockBtree61686,2318467
static int countValidCursors(BtShared *pBt, int wrOnly){countValidCursors61881,2325540
static void unlockBtreeIfUnused(BtShared *pBt){unlockBtreeIfUnused61900,2326130
static int newDatabase(BtShared *pBt){newDatabase61917,2326679
SQLITE_PRIVATE int sqlite3BtreeNewDb(Btree *p){sqlite3BtreeNewDb61961,2327999
SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){sqlite3BtreeBeginTrans62005,2329858
static int setChildPtrmaps(MemPage *pPage){setChildPtrmaps62152,2334538
static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){modifyPagePointer62197,2335945
static int relocatePage(relocatePage62258,2337694
static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg, int bCommit){incrVacuumStep62351,2341102
static Pgno finalDbSize(BtShared *pBt, Pgno nOrig, Pgno nFree){finalDbSize62447,2344035
SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){sqlite3BtreeIncrVacuum62473,2344973
static int autoVacuumCommit(BtShared *pBt){autoVacuumCommit62515,2346194
# define setChildPtrmaps(setChildPtrmaps62565,2347891
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){sqlite3BtreeCommitPhaseOne62594,2349299
static void btreeEndTransaction(Btree *p){btreeEndTransaction62621,2349999
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){sqlite3BtreeCommitPhaseTwo62683,2352619
SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){sqlite3BtreeCommit62715,2353471
SQLITE_PRIVATE int sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode, int writeOnly){sqlite3BtreeTripAllCursors62752,2354954
SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p, int tripCode, int writeOnly){sqlite3BtreeRollback62795,2356266
SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){sqlite3BtreeBeginStmt62864,2358710
SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){sqlite3BtreeSavepoint62895,2359980
static int btreeCursor(btreeCursor62967,2363058
SQLITE_PRIVATE int sqlite3BtreeCursor(sqlite3BtreeCursor63027,2365318
SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){sqlite3BtreeCursorSize63053,2366211
SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){sqlite3BtreeCursorZero63065,2366643
SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){sqlite3BtreeCloseCursor63073,2366854
  static void assertCellInfo(BtCursor *pCur){assertCellInfo63113,2367939
  #define assertCellInfo(assertCellInfo63121,2368220
static SQLITE_NOINLINE void getCellInfo(BtCursor *pCur){getCellInfo63123,2368255
SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){sqlite3BtreeCursorIsValid63139,2368812
SQLITE_PRIVATE int sqlite3BtreeCursorIsValidNN(BtCursor *pCur){sqlite3BtreeCursorIsValidNN63143,2368941
SQLITE_PRIVATE i64 sqlite3BtreeIntegerKey(BtCursor *pCur){sqlite3BtreeIntegerKey63154,2369332
SQLITE_PRIVATE u32 sqlite3BtreePayloadSize(BtCursor *pCur){sqlite3BtreePayloadSize63171,2369950
static int getOverflowPage(getOverflowPage63197,2371087
static int copyPayload(copyPayload63265,2373120
static int accessPayload(accessPayload63315,2375014
SQLITE_PRIVATE int sqlite3BtreePayload(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){sqlite3BtreePayload63517,2382471
static SQLITE_NOINLINE int accessPayloadChecked(accessPayloadChecked63531,2383032
SQLITE_PRIVATE int sqlite3BtreePayloadChecked(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){sqlite3BtreePayloadChecked63545,2383361
static const void *fetchPayload(fetchPayload63574,2384658
SQLITE_PRIVATE const void *sqlite3BtreePayloadFetch(BtCursor *pCur, u32 *pAmt){sqlite3BtreePayloadFetch63608,2386072
static int moveToChild(BtCursor *pCur, u32 newPgno){moveToChild63622,2386553
static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){assertParentIndex63648,2387423
#  define assertParentIndex(assertParentIndex63659,2387841
static void moveToParent(BtCursor *pCur){moveToParent63670,2388153
static int moveToRoot(BtCursor *pCur){moveToRoot63707,2389740
static int moveToLeftmost(BtCursor *pCur){moveToLeftmost63790,2392349
static int moveToRightmost(BtCursor *pCur){moveToRightmost63815,2393195
SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){sqlite3BtreeFirst63838,2393935
SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){sqlite3BtreeLast63861,2394614
SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked(sqlite3BtreeMovetoUnpacked63932,2397058
SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){sqlite3BtreeEof64175,2405984
static SQLITE_NOINLINE int btreeNext(BtCursor *pCur, int *pRes){btreeNext64204,2407385
SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){sqlite3BtreeNext64271,2409262
static SQLITE_NOINLINE int btreePrevious(BtCursor *pCur, int *pRes){btreePrevious64314,2411037
SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){sqlite3BtreePrevious64373,2412615
static int allocateBtreePage(allocateBtreePage64413,2414221
static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){freePage264735,2426094
static void freePage(MemPage *pPage, int *pRC){freePage64863,2431090
static int clearCell(clearCell64874,2431400
static int fillInCell(fillInCell64953,2434297
static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){dropCell65130,2440256
static void insertCell(insertCell65185,2442195
typedef struct CellArray CellArray;CellArray65278,2446084
struct CellArray {CellArray65279,2446120
  int nCell;              /* Number of cells in apCell[] */nCell65280,2446139
  MemPage *pRef;          /* Reference page */pRef65281,2446199
  u8 **apCell;            /* All cells begin balanced */apCell65282,2446246
  u16 *szCell;            /* Local size of all cells in apCell[] */szCell65283,2446303
static void populateCellCache(CellArray *p, int idx, int N){populateCellCache65290,2446460
static SQLITE_NOINLINE u16 computeCellSize(CellArray *p, int N){computeCellSize65308,2446917
static u16 cachedCellSize(CellArray *p, int N){cachedCellSize65314,2447128
static int rebuildPage(rebuildPage65333,2447840
static int pageInsertArray(pageInsertArray65402,2450620
static int pageFreeArray(pageFreeArray65448,2452443
static int editPage(editPage65505,2454297
#define NN NN65611,2457872
#define NB NB65612,2457947
static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){balance_quick65639,2459131
static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){copyNodeContent65783,2464544
static int balance_nonroot(balance_nonroot65864,2468032
static int balance_deeper(MemPage *pRoot, MemPage **ppChild){balance_deeper66627,2496858
static int balance(BtCursor *pCur){balance66684,2498866
SQLITE_PRIVATE int sqlite3BtreeInsert(sqlite3BtreeInsert66831,2505073
SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur, u8 flags){sqlite3BtreeDelete67045,2513760
static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){btreeCreateTable67210,2520458
SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){sqlite3BtreeCreateTable67353,2525045
static int clearDatabasePage(clearDatabasePage67365,2525340
SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){sqlite3BtreeClearTable67432,2527375
SQLITE_PRIVATE int sqlite3BtreeClearTableOfCursor(BtCursor *pCur){sqlite3BtreeClearTableOfCursor67456,2528076
static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){btreeDropTable67480,2529197
SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){sqlite3BtreeDropTable67562,2531388
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){sqlite3BtreeGetMeta67591,2532579
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){sqlite3BtreeUpdateMeta67621,2533427
SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){sqlite3BtreeCount67654,2534428
SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){sqlite3BtreePager67724,2536817
static void checkAppendMsg(checkAppendMsg67732,2536987
static int getPageReferenced(IntegrityCk *pCheck, Pgno iPg){getPageReferenced67762,2537710
static void setPageReferenced(IntegrityCk *pCheck, Pgno iPg){setPageReferenced67770,2537979
static int checkRef(IntegrityCk *pCheck, Pgno iPage){checkRef67784,2538467
static void checkPtrmap(checkPtrmap67804,2539020
static void checkList(checkList67833,2539932
static void btreeHeapInsert(u32 *aHeap, u32 x){btreeHeapInsert67925,2543116
static int btreeHeapPull(u32 *aHeap, u32 *pOut){btreeHeapPull67935,2543328
static int checkTreePage(checkTreePage67969,2544289
SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck(sqlite3BtreeIntegrityCheck68233,2554399
SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){sqlite3BtreeGetFilename68352,2558093
SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){sqlite3BtreeGetJournalname68365,2558552
SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){sqlite3BtreeIsInTrans68373,2558754
SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){sqlite3BtreeCheckpoint68387,2559218
SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){sqlite3BtreeIsInReadTrans68406,2559678
SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){sqlite3BtreeIsInBackup68412,2559831
SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){sqlite3BtreeSchema68438,2560971
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){sqlite3BtreeSchemaLocked68454,2561461
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){sqlite3BtreeLockTable68471,2561938
SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){sqlite3BtreePutData68501,2562944
SQLITE_PRIVATE void sqlite3BtreeIncrblobCursor(BtCursor *pCur){sqlite3BtreeIncrblobCursor68549,2564703
SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){sqlite3BtreeSetVersion68560,2565019
SQLITE_PRIVATE int sqlite3BtreeCursorHasHint(BtCursor *pCsr, unsigned int mask){sqlite3BtreeCursorHasHint68595,2566034
SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){sqlite3BtreeIsReadonly68602,2566206
SQLITE_PRIVATE int sqlite3HeaderSizeBtree(void){ return ROUND8(sizeof(MemPage)); }sqlite3HeaderSizeBtree68609,2566384
SQLITE_PRIVATE int sqlite3BtreeSharable(Btree *p){sqlite3BtreeSharable68615,2566582
SQLITE_PRIVATE int sqlite3BtreeConnectionCount(Btree *p){sqlite3BtreeConnectionCount68624,2566867
struct sqlite3_backup {sqlite3_backup68652,2567748
  sqlite3* pDestDb;        /* Destination database handle */pDestDb68653,2567772
  Btree *pDest;            /* Destination b-tree file */pDest68654,2567833
  u32 iDestSchema;         /* Original schema cookie in destination */iDestSchema68655,2567890
  int bDestLocked;         /* True once a write-transaction is open on pDest */bDestLocked68656,2567961
  Pgno iNext;              /* Page number of the next source page to copy */iNext68658,2568042
  sqlite3* pSrcDb;         /* Source database handle */pSrcDb68659,2568119
  Btree *pSrc;             /* Source b-tree file */pSrc68660,2568175
  int rc;                  /* Backup process error code */rc68662,2568228
  Pgno nRemaining;         /* Number of pages left to copy */nRemaining68667,2568432
  Pgno nPagecount;         /* Total number of pages to copy */nPagecount68668,2568494
  int isAttached;          /* True once backup has been registered with pager */isAttached68670,2568558
  sqlite3_backup *pNext;   /* Next backup associated with source pager */pNext68671,2568639
static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){findBtree68713,2570542
static int setDestPgsz(sqlite3_backup *p){setDestPgsz68744,2571266
static int checkReadTransaction(sqlite3 *db, Btree *p){checkReadTransaction68756,2571678
SQLITE_API sqlite3_backup *sqlite3_backup_init(sqlite3_backup_init68772,2572216
static int isFatalError(int rc){isFatalError68849,2574902
static int backupOnePage(backupOnePage68858,2575175
static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){backupTruncateFile68954,2578828
static void attachBackupObject(sqlite3_backup *p){attachBackupObject68967,2579194
SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){sqlite3_backup_step68979,2579493
SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){sqlite3_backup_finish69233,2589150
SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){sqlite3_backup_remaining69285,2590723
SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){sqlite3_backup_pagecount69299,2591032
static SQLITE_NOINLINE void backupUpdate(backupUpdate69321,2591735
SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){sqlite3BackupUpdate69346,2592480
SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){sqlite3BackupRestart69361,2593140
SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){sqlite3BtreeCopyFile69378,2593711
SQLITE_PRIVATE int sqlite3VdbeCheckMemInvariants(Mem *p){sqlite3VdbeCheckMemInvariants69462,2596573
SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){sqlite3VdbeChangeEncoding69515,2598489
SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){sqlite3VdbeMemGrow69550,2599660
SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){sqlite3VdbeMemClearAndResize69607,2601641
SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){sqlite3VdbeMemMakeWriteable69625,2602198
SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){sqlite3VdbeMemExpandBlob69652,2602963
static SQLITE_NOINLINE int vdbeMemAddTerminator(Mem *pMem){vdbeMemAddTerminator69679,2603681
SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){sqlite3VdbeMemNulTerminate69692,2603978
SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){sqlite3VdbeMemStringify69717,2605024
SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){sqlite3VdbeMemFinalize69762,2606445
static SQLITE_NOINLINE void vdbeMemClearExternAndSetNull(Mem *p){vdbeMemClearExternAndSetNull69794,2607523
static SQLITE_NOINLINE void vdbeMemClear(Mem *p){vdbeMemClear69824,2608486
SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){sqlite3VdbeMemRelease69845,2609091
static i64 doubleToInt64(double r){doubleToInt6469857,2609446
SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){sqlite3VdbeIntValue69893,2610646
SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){sqlite3VdbeRealValue69918,2611393
SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){sqlite3VdbeIntegerAffinity69940,2612072
SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){sqlite3VdbeMemIntegerify69968,2612973
SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){sqlite3VdbeMemRealify69982,2613369
SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){sqlite3VdbeMemNumerify69999,2613934
SQLITE_PRIVATE void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){sqlite3VdbeMemCast70023,2614888
SQLITE_PRIVATE void sqlite3VdbeMemInit(Mem *pMem, sqlite3 *db, u16 flags){sqlite3VdbeMemInit70065,2616151
SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){sqlite3VdbeMemSetNull70085,2616860
SQLITE_PRIVATE void sqlite3ValueSetNull(sqlite3_value *p){sqlite3ValueSetNull70092,2617027
SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){sqlite3VdbeMemSetZeroBlob70100,2617227
static SQLITE_NOINLINE void vdbeReleaseAndSetInt64(Mem *pMem, i64 val){vdbeReleaseAndSetInt6470115,2617629
SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){sqlite3VdbeMemSetInt6470125,2617882
SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){sqlite3VdbeMemSetDouble70139,2618214
SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){sqlite3VdbeMemSetRowSet70152,2618498
SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){sqlite3VdbeMemTooBig70174,2619169
SQLITE_PRIVATE void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){sqlite3VdbeMemAboutToChange70195,2619720
static SQLITE_NOINLINE void vdbeClrCopy(Mem *pTo, const Mem *pFrom, int eType){vdbeClrCopy70215,2620282
SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){sqlite3VdbeMemShallowCopy70220,2620483
SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){sqlite3VdbeMemCopy70236,2621039
SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){sqlite3VdbeMemMove70259,2621676
SQLITE_PRIVATE int sqlite3VdbeMemSetStr(sqlite3VdbeMemSetStr70285,2622730
static SQLITE_NOINLINE int vdbeMemFromBtreeResize(vdbeMemFromBtreeResize70384,2625815
SQLITE_PRIVATE int sqlite3VdbeMemFromBtree(sqlite3VdbeMemFromBtree70405,2626505
static SQLITE_NOINLINE const void *valueToText(sqlite3_value* pVal, u8 enc){valueToText70440,2627730
SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){sqlite3ValueText70482,2629324
SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){sqlite3ValueNew70499,2629811
struct ValueNewStat4Ctx {ValueNewStat4Ctx70512,2630122
  Parse *pParse;pParse70513,2630148
  Index *pIdx;pIdx70514,2630165
  UnpackedRecord **ppRec;ppRec70515,2630180
  int iVal;iVal70516,2630206
static sqlite3_value *valueNew(sqlite3 *db, struct ValueNewStat4Ctx *p){valueNew70530,2630752
static int valueFromFunction(valueFromFunction70592,2632988
# define valueFromFunction(valueFromFunction70673,2635486
static int valueFromExpr(valueFromExpr70686,2635986
SQLITE_PRIVATE int sqlite3ValueFromExpr(sqlite3ValueFromExpr70819,2640469
static void recordFunc(recordFunc70838,2641255
SQLITE_PRIVATE void sqlite3AnalyzeFunctions(void){sqlite3AnalyzeFunctions70872,2642223
static int stat4ValueFromExpr(stat4ValueFromExpr70897,2643088
SQLITE_PRIVATE int sqlite3Stat4ProbeSetValue(sqlite3Stat4ProbeSetValue70975,2645938
SQLITE_PRIVATE int sqlite3Stat4ValueFromExpr(sqlite3Stat4ValueFromExpr71020,2647500
SQLITE_PRIVATE int sqlite3Stat4Column(sqlite3Stat4Column71037,2648204
SQLITE_PRIVATE void sqlite3Stat4ProbeFree(UnpackedRecord *pRec){sqlite3Stat4ProbeFree71082,2649932
SQLITE_PRIVATE void sqlite3ValueSetStr(sqlite3ValueSetStr71100,2650391
SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){sqlite3ValueFree71113,2650784
static SQLITE_NOINLINE int valueBytes(sqlite3_value *pVal, u8 enc){valueBytes71124,2651124
SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){sqlite3ValueBytes71127,2651244
SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(Parse *pParse){sqlite3VdbeCreate71166,2652477
SQLITE_PRIVATE void sqlite3VdbeError(Vdbe *p, const char *zFormat, ...){sqlite3VdbeError71191,2653068
SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){sqlite3VdbeSetSql71202,2653344
SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){sqlite3VdbeSwap71216,2653760
static int growOpArray(Vdbe *v, int nOp){growOpArray71245,2654584
static void test_addop_breakpoint(void){test_addop_breakpoint71279,2655898
static SQLITE_NOINLINE int growOp3(Vdbe *p, int op, int p1, int p2, int p3){growOp371301,2656408
SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){sqlite3VdbeAddOp371307,2656651
SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){sqlite3VdbeAddOp071352,2657677
SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){sqlite3VdbeAddOp171355,2657778
SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){sqlite3VdbeAddOp271358,2657888
SQLITE_PRIVATE int sqlite3VdbeGoto(Vdbe *p, int iDest){sqlite3VdbeGoto71364,2658075
SQLITE_PRIVATE int sqlite3VdbeLoadString(Vdbe *p, int iDest, const char *zStr){sqlite3VdbeLoadString71371,2658268
SQLITE_PRIVATE void sqlite3VdbeMultiLoad(Vdbe *p, int iDest, const char *zTypes, ...){sqlite3VdbeMultiLoad71383,2658857
SQLITE_PRIVATE int sqlite3VdbeAddOp4(sqlite3VdbeAddOp471403,2659373
SQLITE_PRIVATE int sqlite3VdbeAddOp4Dup8(sqlite3VdbeAddOp4Dup871421,2659927
SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){sqlite3VdbeAddParseSchemaOp71443,2660749
SQLITE_PRIVATE int sqlite3VdbeAddOp4Int(sqlite3VdbeAddOp4Int71452,2661036
SQLITE_PRIVATE void sqlite3VdbeEndCoroutine(Vdbe *v, int regYield){sqlite3VdbeEndCoroutine71471,2661586
SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *v){sqlite3VdbeMakeLabel71498,2662725
SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *v, int x){sqlite3VdbeResolveLabel71517,2663263
SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){sqlite3VdbeRunOnlyOnce71531,2663563
SQLITE_PRIVATE void sqlite3VdbeReusable(Vdbe *p){sqlite3VdbeReusable71538,2663708
typedef struct VdbeOpIter VdbeOpIter;VdbeOpIter71560,2664334
struct VdbeOpIter {VdbeOpIter71561,2664372
  Vdbe *v;                   /* Vdbe to iterate through the opcodes of */v71562,2664392
  SubProgram **apSub;        /* Array of subprograms */apSub71563,2664466
  int nSub;                  /* Number of entries in apSub */nSub71564,2664522
  int iAddr;                 /* Address of next instruction to return */iAddr71565,2664584
  int iSub;                  /* 0 = main program, 1 = first sub-program etc. */iSub71566,2664657
static Op *opIterNext(VdbeOpIter *p){opIterNext71568,2664740
SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){sqlite3VdbeAssertMayAbort71633,2666544
static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){resolveP2Values71693,2668722
SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){sqlite3VdbeCurrentAddr71777,2671163
SQLITE_PRIVATE void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N){sqlite3VdbeVerifyNoMallocRequired71791,2671729
SQLITE_PRIVATE void sqlite3VdbeVerifyNoResultRow(Vdbe *p){sqlite3VdbeVerifyNoResultRow71804,2672212
SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){sqlite3VdbeTakeOpArray71823,2672873
SQLITE_PRIVATE VdbeOp *sqlite3VdbeAddOpList(sqlite3VdbeAddOpList71843,2673478
SQLITE_PRIVATE void sqlite3VdbeScanStatus(sqlite3VdbeScanStatus71891,2674829
SQLITE_PRIVATE void sqlite3VdbeChangeOpcode(Vdbe *p, u32 addr, u8 iNewOpcode){sqlite3VdbeChangeOpcode71919,2675796
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, u32 addr, int val){sqlite3VdbeChangeP171922,2675926
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, u32 addr, int val){sqlite3VdbeChangeP271925,2676035
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, u32 addr, int val){sqlite3VdbeChangeP371928,2676144
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u16 p5){sqlite3VdbeChangeP571931,2676253
SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){sqlite3VdbeJumpHere71940,2676526
static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){freeEphemeralFunction71949,2676751
static SQLITE_NOINLINE void freeP4Mem(sqlite3 *db, Mem *p){freeP4Mem71960,2676993
static SQLITE_NOINLINE void freeP4FuncCtx(sqlite3 *db, sqlite3_context *p){freeP4FuncCtx71964,2677130
static void freeP4(sqlite3 *db, int p4type, void *p4){freeP471968,2677271
static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){vdbeFreeOpArray72016,2678351
SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){sqlite3VdbeLinkSubProgram72034,2678867
SQLITE_PRIVATE int sqlite3VdbeChangeToNoop(Vdbe *p, int addr){sqlite3VdbeChangeToNoop72042,2679046
SQLITE_PRIVATE int sqlite3VdbeDeletePriorOpcode(Vdbe *p, u8 op){sqlite3VdbeDeletePriorOpcode72058,2679487
static void SQLITE_NOINLINE vdbeChangeP4Full(vdbeChangeP4Full72083,2680463
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){sqlite3VdbeChangeP472102,2680874
SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe *p, void *pP4, int n){sqlite3VdbeAppendP472145,2682092
SQLITE_PRIVATE void sqlite3VdbeSetP4KeyInfo(Parse *pParse, Index *pIdx){sqlite3VdbeSetP4KeyInfo72165,2682553
static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){vdbeVComment72181,2683107
SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){sqlite3VdbeComment72190,2683454
SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){sqlite3VdbeNoopComment72198,2683637
SQLITE_PRIVATE void sqlite3VdbeSetLineNumber(Vdbe *v, int iLine){sqlite3VdbeSetLineNumber72213,2683992
SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){sqlite3VdbeGetOp72231,2684807
static int translateP(char c, const Op *pOp){translateP72252,2685481
static int displayComment(displayComment72273,2686221
static void displayP4Expr(StrAccum *p, Expr *pExpr){displayP4Expr72351,2688657
static char *displayP4(Op *pOp, char *zTemp, int nTemp){displayP472425,2690954
SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){sqlite3VdbeUsesBtree72549,2694306
SQLITE_PRIVATE void sqlite3VdbeEnter(Vdbe *p){sqlite3VdbeEnter72580,2695660
static SQLITE_NOINLINE void vdbeLeave(Vdbe *p){vdbeLeave72601,2696165
SQLITE_PRIVATE void sqlite3VdbeLeave(Vdbe *p){sqlite3VdbeLeave72615,2696450
SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){sqlite3VdbePrintOp72625,2696714
static void initMemArray(Mem *p, int N, sqlite3 *db, u16 flags){initMemArray72651,2697484
static void releaseMemArray(Mem *p, int N){releaseMemArray72666,2697738
SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){sqlite3VdbeFrameDelete72712,2699383
SQLITE_PRIVATE int sqlite3VdbeList(sqlite3VdbeList72740,2700378
SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){sqlite3VdbePrintSql72920,2706268
SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){sqlite3VdbeIOTraceSql72939,2706719
struct ReusableSpace {ReusableSpace72969,2707544
  u8 *pSpace;          /* Available memory */pSpace72970,2707567
  int nFree;           /* Bytes of available memory */nFree72971,2707613
  int nNeeded;         /* Total bytes that could not be allocated */nNeeded72972,2707668
static void *allocSpace(allocSpace72989,2708415
SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe *p){sqlite3VdbeRewind73012,2709000
SQLITE_PRIVATE void sqlite3VdbeMakeReady(sqlite3VdbeMakeReady73065,2710608
SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){sqlite3VdbeFreeCursor73164,2714263
static void closeCursorsInFrame(Vdbe *p){closeCursorsInFrame73201,2715203
SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){sqlite3VdbeFrameRestore73219,2715625
static void closeAllCursors(Vdbe *p){closeAllCursors73248,2716484
static void Cleanup(Vdbe *p){Cleanup73275,2717161
SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){sqlite3VdbeSetNumCols73299,2717885
SQLITE_PRIVATE int sqlite3VdbeSetColName(sqlite3VdbeSetColName73323,2718747
static int vdbeCommit(sqlite3 *db, Vdbe *p){vdbeCommit73351,2719834
static void checkActiveVdbeCnt(sqlite3 *db){checkActiveVdbeCnt73613,2728932
#define checkActiveVdbeCnt(checkActiveVdbeCnt73632,2729340
static SQLITE_NOINLINE int vdbeCloseStatement(Vdbe *p, int eOp){vdbeCloseStatement73645,2729804
SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){sqlite3VdbeCloseStatement73691,2731134
SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){sqlite3VdbeCheckFk73710,2731826
SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){sqlite3VdbeHalt73737,2732805
SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){sqlite3VdbeResetStepResult73938,2739702
SQLITE_PRIVATE int sqlite3VdbeTransferError(Vdbe *p){sqlite3VdbeTransferError73950,2740106
static void vdbeInvokeSqllog(Vdbe *v){vdbeInvokeSqllog73972,2740668
# define vdbeInvokeSqllog(vdbeInvokeSqllog73985,2741062
SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){sqlite3VdbeReset73999,2741485
SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){sqlite3VdbeFinalize74079,2743818
SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(sqlite3 *db, AuxData **pp, int iOp, int mask){sqlite3VdbeDeleteAuxData74105,2744718
SQLITE_PRIVATE void sqlite3VdbeClearObject(sqlite3 *db, Vdbe *p){sqlite3VdbeClearObject74131,2745497
SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){sqlite3VdbeDelete74162,2746291
static int SQLITE_NOINLINE handleDeferredMoveto(VdbeCursor *p){handleDeferredMoveto74188,2746886
static int SQLITE_NOINLINE handleMovedCursor(VdbeCursor *p){handleMovedCursor74214,2747737
SQLITE_PRIVATE int sqlite3VdbeCursorRestore(VdbeCursor *p){sqlite3VdbeCursorRestore74229,2748238
SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor **pp, int *piCol){sqlite3VdbeCursorMoveto74250,2749051
SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format, u32 *pLen){sqlite3VdbeSerialType74314,2751396
#   define MAX_6BYTE MAX_6BYTE74325,2751674
static const u8 sqlite3SmallTypeSizes[] = {sqlite3SmallTypeSizes74366,2752529
SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){sqlite3VdbeSerialTypeLen74386,2753369
SQLITE_PRIVATE u8 sqlite3VdbeOneByteSerialTypeLen(u8 serial_type){sqlite3VdbeOneByteSerialTypeLen74395,2753653
static u64 floatSwap(u64 in){floatSwap74435,2755513
# define swapMixedEndianFloat(swapMixedEndianFloat74448,2755670
# define swapMixedEndianFloat(swapMixedEndianFloat74450,2755727
SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, Mem *pMem, u32 serial_type){sqlite3VdbeSerialPut74466,2756344
#define ONE_BYTE_INT(ONE_BYTE_INT74505,2757302
#define TWO_BYTE_INT(TWO_BYTE_INT74506,2757342
#define THREE_BYTE_INT(THREE_BYTE_INT74507,2757395
#define FOUR_BYTE_UINT(FOUR_BYTE_UINT74508,2757462
#define FOUR_BYTE_INT(FOUR_BYTE_INT74509,2757541
static u32 SQLITE_NOINLINE serialGet(serialGet74520,2758014
SQLITE_PRIVATE u32 sqlite3VdbeSerialGet(sqlite3VdbeSerialGet74556,2759358
SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord(sqlite3VdbeAllocUnpackedRecord74655,2762993
SQLITE_PRIVATE void sqlite3VdbeRecordUnpack(sqlite3VdbeRecordUnpack74675,2763784
static int vdbeRecordCompareDebug(vdbeRecordCompareDebug74722,2765439
static void vdbeAssertFieldCountWithinLimits(vdbeAssertFieldCountWithinLimits74827,2769296
# define vdbeAssertFieldCountWithinLimits(vdbeAssertFieldCountWithinLimits74848,2769851
static int vdbeCompareMemString(vdbeCompareMemString74857,2770206
static int isAllZero(const char *z, int n){isAllZero74893,2771398
static SQLITE_NOINLINE int sqlite3BlobCompare(const Mem *pB1, const Mem *pB2){sqlite3BlobCompare74906,2771736
static int sqlite3IntFloatCompare(i64 i, double r){sqlite3IntFloatCompare74939,2772865
SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){sqlite3MemCompare74972,2773822
static i64 vdbeRecordDecodeInt(u32 serial_type, const u8 *aKey){vdbeRecordDecodeInt75058,2776317
SQLITE_PRIVATE int sqlite3VdbeRecordCompareWithSkip(sqlite3VdbeRecordCompareWithSkip75113,2778151
SQLITE_PRIVATE int sqlite3VdbeRecordCompare(sqlite3VdbeRecordCompare75299,2784290
static int vdbeRecordCompareInt(vdbeRecordCompareInt75316,2784903
static int vdbeRecordCompareString(vdbeRecordCompareString75410,2787698
SQLITE_PRIVATE RecordCompare sqlite3VdbeFindCompare(UnpackedRecord *p){sqlite3VdbeFindCompare75471,2789357
SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){sqlite3VdbeIdxRowid75517,2791215
SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare(sqlite3VdbeIdxKeyCompare75594,2793959
SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){sqlite3VdbeSetChanges75629,2795090
SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){sqlite3VdbeCountChanges75639,2795356
SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){sqlite3ExpirePreparedStatements75653,2795854
SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){sqlite3VdbeDb75663,2796050
SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetBoundValue(Vdbe *v, int iVar, u8 aff){sqlite3VdbeGetBoundValue75675,2796476
SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){sqlite3VdbeSetVarmask75696,2797067
SQLITE_PRIVATE void sqlite3VtabImportErrmsg(Vdbe *p, sqlite3_vtab *pVtab){sqlite3VtabImportErrmsg75711,2797484
static void vdbeFreeUnpacked(sqlite3 *db, int nField, UnpackedRecord *p){vdbeFreeUnpacked75732,2798170
SQLITE_PRIVATE void sqlite3VdbePreUpdateHook(sqlite3VdbePreUpdateHook75751,2798806
SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){sqlite3_expired75840,2801791
static int vdbeSafety(Vdbe *p){vdbeSafety75851,2802089
static int vdbeSafetyNotNull(Vdbe *p){vdbeSafetyNotNull75859,2802262
static SQLITE_NOINLINE void invokeProfileCallback(sqlite3 *db, Vdbe *p){invokeProfileCallback75873,2802623
# define checkProfileCallback(checkProfileCallback75894,2803347
# define checkProfileCallback(checkProfileCallback75897,2803451
SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){sqlite3_finalize75909,2803864
SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){sqlite3_reset75936,2804703
SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){sqlite3_clear_bindings75957,2805189
SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){sqlite3_value_blob75981,2805800
SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){sqlite3_value_bytes75994,2806137
SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){sqlite3_value_bytes1675997,2806243
SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){sqlite3_value_double76000,2806358
SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){sqlite3_value_int76003,2806464
SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){sqlite3_value_int6476006,2806568
SQLITE_API unsigned int sqlite3_value_subtype(sqlite3_value *pVal){sqlite3_value_subtype76009,2806678
SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){sqlite3_value_text76013,2806835
SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){sqlite3_value_text1676017,2807005
SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){sqlite3_value_text16be76020,2807126
SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){sqlite3_value_text16le76023,2807245
SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){sqlite3_value_type76031,2807568
SQLITE_API sqlite3_value *sqlite3_value_dup(const sqlite3_value *pOrig){sqlite3_value_dup76071,2808804
SQLITE_API void sqlite3_value_free(sqlite3_value *pOld){sqlite3_value_free76094,2809437
static void setResultStrOrError(setResultStrOrError76110,2810040
static int invokeValueDestructor(invokeValueDestructor76121,2810464
SQLITE_API void sqlite3_result_blob(sqlite3_result_blob76137,2810901
SQLITE_API void sqlite3_result_blob64(sqlite3_result_blob6476147,2811137
SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){sqlite3_result_double76161,2811491
SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){sqlite3_result_error76165,2811668
SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){sqlite3_result_error1676172,2811964
SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){sqlite3_result_int76179,2812250
SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){sqlite3_result_int6476183,2812425
SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){sqlite3_result_null76187,2812597
SQLITE_API void sqlite3_result_subtype(sqlite3_context *pCtx, unsigned int eSubtype){sqlite3_result_subtype76191,2812751
SQLITE_API void sqlite3_result_text(sqlite3_result_text76197,2812980
SQLITE_API void sqlite3_result_text64(sqlite3_result_text6476206,2813207
SQLITE_API void sqlite3_result_text16(sqlite3_result_text1676223,2813662
SQLITE_API void sqlite3_result_text16be(sqlite3_result_text16be76232,2813899
SQLITE_API void sqlite3_result_text16le(sqlite3_result_text16le76241,2814134
SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){sqlite3_result_value76251,2814400
SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){sqlite3_result_zeroblob76255,2814583
SQLITE_API int sqlite3_result_zeroblob64(sqlite3_context *pCtx, u64 n){sqlite3_result_zeroblob6476259,2814755
SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){sqlite3_result_error_code76268,2815057
SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){sqlite3_result_error_toobig76281,2815466
SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){sqlite3_result_error_nomem76290,2815797
static int doWalCallbacks(sqlite3 *db){doWalCallbacks76302,2816202
static int sqlite3Step(Vdbe *p){sqlite3Step76332,2817075
SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){sqlite3_step76462,2821249
SQLITE_API void *sqlite3_user_data(sqlite3_context *p){sqlite3_user_data76513,2822988
SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){sqlite3_context_db_handle76528,2823504
SQLITE_PRIVATE sqlite3_int64 sqlite3StmtCurrentTime(sqlite3_context *p){sqlite3StmtCurrentTime76540,2823977
SQLITE_PRIVATE void sqlite3InvalidFunction(sqlite3InvalidFunction76564,2824812
static SQLITE_NOINLINE void *createAggContext(sqlite3_context *p, int nByte){createAggContext76582,2825407
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){sqlite3_aggregate_context76604,2826018
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){sqlite3_get_auxdata76619,2826460
SQLITE_API void sqlite3_set_auxdata(sqlite3_set_auxdata76640,2827124
SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){sqlite3_aggregate_count76695,2828499
SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){sqlite3_column_count76704,2828732
SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){sqlite3_data_count76713,2828973
static const Mem *columnNullValue(void){columnNullValue76722,2829207
static Mem *columnMem(sqlite3_stmt *pStmt, int i){columnMem76762,2830749
static void columnMallocFailure(sqlite3_stmt *pStmt)columnMallocFailure76797,2831810
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){sqlite3_column_blob76817,2832501
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){sqlite3_column_bytes76827,2832845
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){sqlite3_column_bytes1676832,2833011
SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){sqlite3_column_double76837,2833181
SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){sqlite3_column_int76842,2833355
SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){sqlite3_column_int6476847,2833517
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){sqlite3_column_text76852,2833701
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){sqlite3_column_value76857,2833899
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){sqlite3_column_text1676867,2834198
SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){sqlite3_column_type76873,2834413
static const void *columnName(columnName76895,2835299
SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){sqlite3_column_name76937,2836184
SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_name1676942,2836378
SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){sqlite3_column_decltype76962,2836993
SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){sqlite3_column_decltype1676967,2837195
SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){sqlite3_column_database_name76980,2837705
SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_database_name1676985,2837912
SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){sqlite3_column_table_name76996,2838353
SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_table_name1677001,2838554
SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){sqlite3_column_origin_name77012,2838996
SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_origin_name1677017,2839199
static int vdbeUnbind(Vdbe *p, int i){vdbeUnbind77040,2840063
static int bindText(bindText77084,2841433
SQLITE_API int sqlite3_bind_blob(sqlite3_bind_blob77118,2842419
SQLITE_API int sqlite3_bind_blob64(sqlite3_bind_blob6477130,2842683
SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){sqlite3_bind_double77144,2843009
SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){sqlite3_bind_int77154,2843283
SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){sqlite3_bind_int6477157,2843402
SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){sqlite3_bind_null77167,2843680
SQLITE_API int sqlite3_bind_text( sqlite3_bind_text77176,2843884
SQLITE_API int sqlite3_bind_text64( sqlite3_bind_text6477185,2844078
SQLITE_API int sqlite3_bind_text16(sqlite3_bind_text1677202,2844508
SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){sqlite3_bind_value77212,2844741
SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){sqlite3_bind_zeroblob77243,2845594
SQLITE_API int sqlite3_bind_zeroblob64(sqlite3_stmt *pStmt, int i, sqlite3_uint64 n){sqlite3_bind_zeroblob6477253,2845859
SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){sqlite3_bind_parameter_count77272,2846399
SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){sqlite3_bind_parameter_name77283,2846680
SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){sqlite3VdbeParameterIndex77294,2847011
SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){sqlite3_bind_parameter_index77298,2847190
SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){sqlite3TransferBindings77305,2847435
SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){sqlite3_transfer_bindings77332,2848358
SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){sqlite3_db_handle77354,2849041
SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){sqlite3_stmt_readonly77362,2849237
SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt *pStmt){sqlite3_stmt_busy77369,2849420
SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){sqlite3_next_stmt77380,2849797
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){sqlite3_stmt_status77401,2850301
SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){sqlite3_sql77418,2850673
SQLITE_API char *sqlite3_expanded_sql(sqlite3_stmt *pStmt){sqlite3_expanded_sql77432,2851149
static UnpackedRecord *vdbeUnpackRecord(vdbeUnpackRecord77454,2851758
SQLITE_API int sqlite3_preupdate_old(sqlite3 *db, int iIdx, sqlite3_value **ppValue){sqlite3_preupdate_old77473,2852252
SQLITE_API int sqlite3_preupdate_count(sqlite3 *db){sqlite3_preupdate_count77534,2854070
SQLITE_API int sqlite3_preupdate_depth(sqlite3 *db){sqlite3_preupdate_depth77552,2854806
SQLITE_API int sqlite3_preupdate_new(sqlite3 *db, int iIdx, sqlite3_value **ppValue){sqlite3_preupdate_new77563,2855144
SQLITE_API int sqlite3_stmt_scanstatus(sqlite3_stmt_scanstatus77638,2857434
SQLITE_API void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *pStmt){sqlite3_stmt_scanstatus_reset77697,2858953
static int findNextHostParameter(const char *zSql, int *pnToken){findNextHostParameter77733,2860217
SQLITE_PRIVATE char *sqlite3VdbeExpandSql(sqlite3VdbeExpandSql77776,2861839
# define memAboutToChange(memAboutToChange77935,2867796
# define memAboutToChange(memAboutToChange77937,2867866
SQLITE_API int sqlite3_search_count = 0;sqlite3_search_count77948,2868257
SQLITE_API int sqlite3_interrupt_count = 0;sqlite3_interrupt_count77960,2868660
SQLITE_API int sqlite3_sort_count = 0;sqlite3_sort_count77971,2869050
SQLITE_API int sqlite3_max_blobsize = 0;sqlite3_max_blobsize77982,2869457
static void updateMaxBlobsize(Mem *p){updateMaxBlobsize77983,2869498
# define HAS_UPDATE_HOOK(HAS_UPDATE_HOOK77995,2869819
# define HAS_UPDATE_HOOK(HAS_UPDATE_HOOK77997,2869904
SQLITE_API int sqlite3_found_count = 0;sqlite3_found_count78008,2870286
# define UPDATE_MAX_BLOBSIZE(UPDATE_MAX_BLOBSIZE78016,2870516
# define UPDATE_MAX_BLOBSIZE(UPDATE_MAX_BLOBSIZE78018,2870576
# define VdbeBranchTaken(VdbeBranchTaken78038,2871412
# define VdbeBranchTaken(VdbeBranchTaken78040,2871448
  static void vdbeTakeBranch(int iSrcLine, u8 I, u8 M){vdbeTakeBranch78041,2871512
#define Stringify(Stringify78059,2872097
#define Deephemeralize(Deephemeralize78074,2872744
#define isSorter(isSorter78079,2872941
static VdbeCursor *allocateCursor(allocateCursor78085,2873102
static void applyNumericAffinity(Mem *pRec, int bTryForInt){applyNumericAffinity78154,2875956
static void applyAffinity(applyAffinity78188,2877002
SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){sqlite3_value_numeric_type78224,2878454
SQLITE_PRIVATE void sqlite3ValueApplyAffinity(sqlite3ValueApplyAffinity78238,2878822
static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){computeNumericType78252,2879200
static u16 numericType(Mem *pMem){numericType78271,2879793
SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){sqlite3VdbeMemPrettyPrint78286,2880144
static void memTracePrint(Mem *p){memTracePrint78368,2882276
static void registerTrace(int iReg, Mem *p){registerTrace78390,2882928
#  define REGISTER_TRACE(REGISTER_TRACE78398,2883069
#  define REGISTER_TRACE(REGISTER_TRACE78400,2883154
#define SQLITE_HWTIME_HSQLITE_HWTIME_H78428,2883987
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime78441,2884384
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec78449,2884592
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime78460,2884807
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime78468,2885002
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime78492,2885744
static int checkSavepointCount(sqlite3 *db){checkSavepointCount78514,2886372
static SQLITE_NOINLINE Mem *out2PrereleaseWithClear(Mem *pOut){out2PrereleaseWithClear78527,2886683
static Mem *out2Prerelease(Vdbe *p, VdbeOp *pOp){out2Prerelease78532,2886820
SQLITE_PRIVATE int sqlite3VdbeExec(sqlite3VdbeExec78551,2887264
#   define MAX_ROWID MAX_ROWID82228,3013816
typedef struct Incrblob Incrblob;Incrblob85100,3107627
struct Incrblob {Incrblob85101,3107661
  int nByte;              /* Size of open blob, in bytes */nByte85102,3107679
  int iOffset;            /* Byte offset of blob in cursor data */iOffset85103,3107739
  u16 iCol;               /* Table column this handle is open on */iCol85104,3107806
  BtCursor *pCsr;         /* Cursor pointing at blob row */pCsr85105,3107874
  sqlite3_stmt *pStmt;    /* Statement holding cursor open */pStmt85106,3107934
  sqlite3 *db;            /* The associated database */db85107,3107996
  char *zDb;              /* Database name */zDb85108,3108052
  Table *pTab;            /* Table object */pTab85109,3108098
static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){blobSeekToRow85130,3109005
SQLITE_API int sqlite3_blob_open(sqlite3_blob_open85194,3110875
SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){sqlite3_blob_close85430,3118799
static int blobReadWrite(blobReadWrite85450,3119180
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){sqlite3_blob_read85523,3121402
SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){sqlite3_blob_write85530,3121601
SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){sqlite3_blob_bytes85540,3121937
SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){sqlite3_blob_reopen85555,3122503
#define SQLITE_MAX_PMASZ SQLITE_MAX_PMASZ85743,3130905
typedef struct MergeEngine MergeEngine;     /* Merge PMAs together */MergeEngine85748,3130986
typedef struct PmaReader PmaReader;         /* Incrementally read one PMA */PmaReader85749,3131056
typedef struct PmaWriter PmaWriter;         /* Incrementally write one PMA */PmaWriter85750,3131133
typedef struct SorterRecord SorterRecord;   /* A record being sorted */SorterRecord85751,3131211
typedef struct SortSubtask SortSubtask;     /* A sub-task in the sort process */SortSubtask85752,3131283
typedef struct SorterFile SorterFile;       /* Temporary file object wrapper */SorterFile85753,3131364
typedef struct SorterList SorterList;       /* In-memory list of records */SorterList85754,3131444
typedef struct IncrMerger IncrMerger;       /* Read & merge multiple PMAs */IncrMerger85755,3131520
struct SorterFile {SorterFile85761,3131697
  sqlite3_file *pFd;              /* File handle */pFd85762,3131717
  i64 iEof;                       /* Bytes of data stored in pFd */iEof85763,3131769
struct SorterList {SorterList85774,3132167
  SorterRecord *pList;            /* Linked list of records */pList85775,3132187
  u8 *aMemory;                    /* If non-NULL, bulk memory to hold pList */aMemory85776,3132250
  int szPMA;                      /* Size of pList as PMA in bytes */szPMA85777,3132329
struct MergeEngine {MergeEngine85844,3135306
  int nTree;                 /* Used size of aTree/aReadr (power of 2) */nTree85845,3135327
  SortSubtask *pTask;        /* Used by this thread only */pTask85846,3135401
  int *aTree;                /* Current state of incremental merge */aTree85847,3135461
  PmaReader *aReadr;         /* Array of PmaReaders to merge data from */aReadr85848,3135531
typedef int (*SorterCompare)(SortSubtask*,int*,const void*,int,const void*,int);SorterCompare85882,3137204
struct SortSubtask {SortSubtask85883,3137285
  SQLiteThread *pThread;          /* Background thread, if any */pThread85884,3137306
  int bDone;                      /* Set if thread is finished but not joined */bDone85885,3137372
  VdbeSorter *pSorter;            /* Sorter that owns this sub-task */pSorter85886,3137453
  UnpackedRecord *pUnpacked;      /* Space to unpack a record */pUnpacked85887,3137524
  SorterList list;                /* List for thread to write to a PMA */list85888,3137589
  int nPMA;                       /* Number of PMAs currently in file */nPMA85889,3137663
  SorterCompare xCompare;         /* Compare function to use */xCompare85890,3137736
  SorterFile file;                /* Temp file for level-0 PMAs */file85891,3137800
  SorterFile file2;               /* Space for other PMAs */file285892,3137867
struct VdbeSorter {VdbeSorter85905,3138255
  int mnPmaSize;                  /* Minimum PMA size, in bytes */mnPmaSize85906,3138275
  int mxPmaSize;                  /* Maximum PMA size, in bytes.  0==no limit */mxPmaSize85907,3138342
  int mxKeysize;                  /* Largest serialized key seen so far */mxKeysize85908,3138423
  int pgsz;                       /* Main database page size */pgsz85909,3138498
  PmaReader *pReader;             /* Readr data from here after Rewind() */pReader85910,3138562
  MergeEngine *pMerger;           /* Or here, if bUseThreads==0 */pMerger85911,3138638
  sqlite3 *db;                    /* Database connection */db85912,3138705
  KeyInfo *pKeyInfo;              /* How to compare records */pKeyInfo85913,3138765
  UnpackedRecord *pUnpacked;      /* Used by VdbeSorterCompare() */pUnpacked85914,3138828
  SorterList list;                /* List of in-memory records */list85915,3138896
  int iMemory;                    /* Offset of free space in list.aMemory */iMemory85916,3138962
  int nMemory;                    /* Size of list.aMemory allocation in bytes */nMemory85917,3139039
  u8 bUsePMA;                     /* True if one or more PMAs created */bUsePMA85918,3139120
  u8 bUseThreads;                 /* True to use background threads */bUseThreads85919,3139193
  u8 iPrev;                       /* Previous thread used to flush PMA */iPrev85920,3139264
  u8 nTask;                       /* Size of aTask[] array */nTask85921,3139338
  u8 typeMask;typeMask85922,3139400
  SortSubtask aTask[1];           /* One or more subtasks */aTask85923,3139415
#define SORTER_TYPE_INTEGER SORTER_TYPE_INTEGER85926,3139480
#define SORTER_TYPE_TEXT SORTER_TYPE_TEXT85927,3139513
struct PmaReader {PmaReader85938,3139948
  i64 iReadOff;               /* Current read offset */iReadOff85939,3139967
  i64 iEof;                   /* 1 byte past EOF for this PmaReader */iEof85940,3140023
  int nAlloc;                 /* Bytes of space at aAlloc */nAlloc85941,3140094
  int nKey;                   /* Number of bytes in key */nKey85942,3140155
  sqlite3_file *pFd;          /* File handle we are reading from */pFd85943,3140214
  u8 *aAlloc;                 /* Space for aKey if aBuffer and pMap wont work */aAlloc85944,3140282
  u8 *aKey;                   /* Pointer to current key */aKey85945,3140363
  u8 *aBuffer;                /* Current read buffer */aBuffer85946,3140422
  int nBuffer;                /* Size of read buffer in bytes */nBuffer85947,3140478
  u8 *aMap;                   /* Pointer to mapping of entire file */aMap85948,3140543
  IncrMerger *pIncr;          /* Incremental merger */pIncr85949,3140613
struct IncrMerger {IncrMerger85984,3142392
  SortSubtask *pTask;             /* Task that owns this merger */pTask85985,3142412
  MergeEngine *pMerger;           /* Merge engine thread reads data from */pMerger85986,3142479
  i64 iStartOff;                  /* Offset to start writing file at */iStartOff85987,3142555
  int mxSz;                       /* Maximum bytes of data to store */mxSz85988,3142627
  int bEof;                       /* Set to true when merge is finished */bEof85989,3142698
  int bUseThread;                 /* True to use a bg thread for this object */bUseThread85990,3142773
  SorterFile aFile[2];            /* aFile[0] for reading, [1] for writing */aFile85991,3142853
struct PmaWriter {PmaWriter86002,3143286
  int eFWErr;                     /* Non-zero if in an error state */eFWErr86003,3143305
  u8 *aBuffer;                    /* Pointer to write buffer */aBuffer86004,3143375
  int nBuffer;                    /* Size of write buffer in bytes */nBuffer86005,3143439
  int iBufStart;                  /* First byte of buffer to write */iBufStart86006,3143509
  int iBufEnd;                    /* Last byte of buffer to write */iBufEnd86007,3143579
  i64 iWriteOff;                  /* Offset of start of buffer in file */iWriteOff86008,3143648
  sqlite3_file *pFd;              /* File handle to write to */pFd86009,3143722
struct SorterRecord {SorterRecord86030,3144753
  int nVal;                       /* Size of the record in bytes */nVal86031,3144775
    SorterRecord *pNext;          /* Pointer to next record in list */pNext86033,3144853
    int iNext;                    /* Offset within aMemory of next record */iNext86034,3144924
  } u;u86035,3145001
#define SRVAL(SRVAL86044,3145254
#define SORTER_MAX_MERGE_COUNT SORTER_MAX_MERGE_COUNT86048,3145372
static void vdbePmaReaderClear(PmaReader *pReadr){vdbePmaReaderClear86057,3145627
static int vdbePmaReadBlob(vdbePmaReadBlob86074,3146194
static int vdbePmaReadVarint(PmaReader *p, u64 *pnOut){vdbePmaReadVarint86168,3149454
static int vdbeSorterMapFile(SortSubtask *pTask, SorterFile *pFile, u8 **pp){vdbeSorterMapFile86201,3150423
static int vdbePmaReaderSeek(vdbePmaReaderSeek86218,3151005
static int vdbePmaReaderNext(PmaReader *pReadr){vdbePmaReaderNext86265,3152441
static int vdbePmaReaderInit(vdbePmaReaderInit86312,3153727
static int vdbeSorterCompareTail(vdbeSorterCompareTail86345,3154740
static int vdbeSorterCompare(vdbeSorterCompare86372,3155890
static int vdbeSorterCompareText(vdbeSorterCompareText86391,3156612
static int vdbeSorterCompareInt(vdbeSorterCompareInt86432,3157767
SQLITE_PRIVATE int sqlite3VdbeSorterInit(sqlite3VdbeSorterInit86515,3160552
# define nWorker nWorker86528,3161281
#undef nWorker nWorker86614,3164062
static void vdbeSorterRecordFree(sqlite3 *db, SorterRecord *pRecord){vdbeSorterRecordFree86619,3164184
static void vdbeSortSubtaskCleanup(sqlite3 *db, SortSubtask *pTask){vdbeSortSubtaskCleanup86632,3164514
static void vdbeSorterWorkDebug(SortSubtask *pTask, const char *zEvent){vdbeSorterWorkDebug86655,3165198
static void vdbeSorterRewindDebug(const char *zEvent){vdbeSorterRewindDebug86661,3165441
static void vdbeSorterPopulateDebug(vdbeSorterPopulateDebug86666,3165606
static void vdbeSorterBlockDebug(vdbeSorterBlockDebug86675,3165861
# define vdbeSorterWorkDebug(vdbeSorterWorkDebug86687,3166109
# define vdbeSorterRewindDebug(vdbeSorterRewindDebug86688,3166143
# define vdbeSorterPopulateDebug(vdbeSorterPopulateDebug86689,3166177
# define vdbeSorterBlockDebug(vdbeSorterBlockDebug86690,3166215
static int vdbeSorterJoinThread(SortSubtask *pTask){vdbeSorterJoinThread86697,3166328
static int vdbeSorterCreateThread(vdbeSorterCreateThread86718,3166886
static int vdbeSorterJoinAll(VdbeSorter *pSorter, int rcin){vdbeSorterJoinAll86731,3167346
# define vdbeSorterJoinAll(vdbeSorterJoinAll86750,3168052
# define vdbeSorterJoinThread(vdbeSorterJoinThread86751,3168094
static MergeEngine *vdbeMergeEngineNew(int nReader){vdbeMergeEngineNew86761,3168388
static void vdbeMergeEngineFree(MergeEngine *pMerger){vdbeMergeEngineFree86784,3169116
static void vdbeIncrFree(IncrMerger *pIncr){vdbeIncrFree86798,3169421
SQLITE_PRIVATE void sqlite3VdbeSorterReset(sqlite3 *db, VdbeSorter *pSorter){sqlite3VdbeSorterReset86815,3169882
SQLITE_PRIVATE void sqlite3VdbeSorterClose(sqlite3 *db, VdbeCursor *pCsr){sqlite3VdbeSorterClose86848,3170835
static void vdbeSorterExtendFile(sqlite3 *db, sqlite3_file *pFd, i64 nByte){vdbeSorterExtendFile86870,3171566
# define vdbeSorterExtendFile(vdbeSorterExtendFile86881,3171988
static int vdbeSorterOpenTempFile(vdbeSorterOpenTempFile86889,3172251
static int vdbeSortAllocUnpacked(SortSubtask *pTask){vdbeSortAllocUnpacked86916,3173159
static SorterRecord *vdbeSorterMerge(vdbeSorterMerge86930,3173573
static SorterCompare vdbeSorterGetCompare(VdbeSorter *p){vdbeSorterGetCompare86972,3174482
static int vdbeSorterSort(SortSubtask *pTask, SorterList *pList){vdbeSorterSort86986,3174899
static void vdbePmaWriterInit(vdbePmaWriterInit87042,3176129
static void vdbePmaWriteBlob(PmaWriter *p, u8 *pData, int nData){vdbePmaWriteBlob87064,3176818
static int vdbePmaWriterFinish(PmaWriter *p, i64 *piEof){vdbePmaWriterFinish87097,3177847
static void vdbePmaWriteVarint(PmaWriter *p, u64 iVal){vdbePmaWriteVarint87116,3178411
static int vdbeSorterListToPMA(SortSubtask *pTask, SorterList *pList){vdbeSorterListToPMA87137,3179171
static int vdbeMergeEngineStep(vdbeMergeEngineStep87201,3181227
static void *vdbeSorterFlushThread(void *pCtx){vdbeSorterFlushThread87272,3184094
static int vdbeSorterFlushPMA(VdbeSorter *pSorter){vdbeSorterFlushPMA87286,3184519
SQLITE_PRIVATE int sqlite3VdbeSorterWrite(sqlite3VdbeSorterWrite87353,3186850
static int vdbeIncrPopulate(IncrMerger *pIncr){vdbeIncrPopulate87461,3190561
static void *vdbeIncrPopulateThread(void *pCtx){vdbeIncrPopulateThread87503,3191895
static int vdbeIncrBgPopulate(IncrMerger *pIncr){vdbeIncrBgPopulate87513,3192158
static int vdbeIncrSwap(IncrMerger *pIncr){vdbeIncrSwap87537,3193118
static int vdbeIncrMergerNew(vdbeIncrMergerNew87576,3193986
static void vdbeIncrMergerSetThreads(IncrMerger *pIncr){vdbeIncrMergerSetThreads87600,3194746
static void vdbeMergeEngineCompare(vdbeMergeEngineCompare87613,3195117
#define INCRINIT_NORMAL INCRINIT_NORMAL87666,3196385
#define INCRINIT_TASK INCRINIT_TASK87667,3196411
#define INCRINIT_ROOT INCRINIT_ROOT87668,3196437
static int vdbeMergeEngineInit(vdbeMergeEngineInit87695,3197544
static int vdbePmaReaderIncrMergeInit(PmaReader *pReadr, int eMode){vdbePmaReaderIncrMergeInit87766,3200872
static void *vdbePmaReaderBgIncrInit(void *pCtx){vdbePmaReaderBgIncrInit87833,3203139
static int vdbePmaReaderIncrInit(PmaReader *pReadr, int eMode){vdbePmaReaderIncrInit87854,3203961
static int vdbeMergeEngineLevel0(vdbeMergeEngineLevel087884,3205087
static int vdbeSorterTreeDepth(int nPMA){vdbeSorterTreeDepth87923,3206189
static int vdbeSorterAddToTree(vdbeSorterAddToTree87941,3206742
static int vdbeSorterMergeTreeBuild(vdbeSorterMergeTreeBuild87997,3208485
static int vdbeSorterSetupMerge(VdbeSorter *pSorter){vdbeSorterSetupMerge88076,3211130
SQLITE_PRIVATE int sqlite3VdbeSorterRewind(const VdbeCursor *pCsr, int *pbEof){sqlite3VdbeSorterRewind88158,3213848
SQLITE_PRIVATE int sqlite3VdbeSorterNext(sqlite3 *db, const VdbeCursor *pCsr, int *pbEof){sqlite3VdbeSorterNext88206,3215282
static void *vdbeSorterRowkey(vdbeSorterRowkey88243,3216534
SQLITE_PRIVATE int sqlite3VdbeSorterRowkey(const VdbeCursor *pCsr, Mem *pOut){sqlite3VdbeSorterRowkey88270,3217217
SQLITE_PRIVATE int sqlite3VdbeSorterCompare(sqlite3VdbeSorterCompare88303,3218427
typedef struct MemJournal MemJournal;MemJournal88369,3220846
typedef struct FilePoint FilePoint;FilePoint88370,3220884
typedef struct FileChunk FileChunk;FileChunk88371,3220920
struct FileChunk {FileChunk88379,3221184
  FileChunk *pNext;               /* Next chunk in the journal */pNext88380,3221203
  u8 zChunk[8];                   /* Content of this chunk */zChunk88381,3221269
#define MEMJOURNAL_DFLT_FILECHUNKSIZE MEMJOURNAL_DFLT_FILECHUNKSIZE88387,3221418
#define fileChunkSize(fileChunkSize88393,3221583
struct FilePoint {FilePoint88399,3221791
  sqlite3_int64 iOffset;          /* Offset from the beginning of the file */iOffset88400,3221810
  FileChunk *pChunk;              /* Specific chunk into which cursor points */pChunk88401,3221888
struct MemJournal {MemJournal88408,3222085
  const sqlite3_io_methods *pMethod; /* Parent class. MUST BE FIRST */pMethod88409,3222105
  int nChunkSize;                 /* In-memory chunk-size */nChunkSize88410,3222176
  int nSpill;                     /* Bytes of data before flushing */nSpill88412,3222238
  int nSize;                      /* Bytes of data currently in memory */nSize88413,3222308
  FileChunk *pFirst;              /* Head of in-memory chunk-list */pFirst88414,3222382
  FilePoint endpoint;             /* Pointer to the end of the file */endpoint88415,3222451
  FilePoint readpoint;            /* Pointer to the end of the last xRead() */readpoint88416,3222522
  int flags;                      /* xOpen flags */flags88418,3222602
  sqlite3_vfs *pVfs;              /* The "real" underlying VFS */pVfs88419,3222654
  const char *zJournal;           /* Name of the journal file */zJournal88420,3222720
static int memjrnlRead(memjrnlRead88427,3222905
static void memjrnlFreeChunks(MemJournal *p){memjrnlFreeChunks88478,3224349
static int memjrnlCreateFile(MemJournal *p){memjrnlCreateFile88491,3224617
static int memjrnlWrite(memjrnlWrite88530,3225736
static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){memjrnlTruncate88608,3228257
static int memjrnlClose(sqlite3_file *pJfd){memjrnlClose88624,3228599
static int memjrnlSync(sqlite3_file *pJfd, int flags){memjrnlSync88636,3228874
static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){memjrnlFileSize88644,3229032
static const struct sqlite3_io_methods MemJournalMethods = {MemJournalMethods88653,3229271
SQLITE_PRIVATE int sqlite3JournalOpen(sqlite3JournalOpen88687,3230607
SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){sqlite3MemJournalOpen88723,3231804
SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){sqlite3JournalCreate88734,3232183
SQLITE_PRIVATE int sqlite3JournalIsInMemory(sqlite3_file *p){sqlite3JournalIsInMemory88748,3232582
SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){sqlite3JournalSize88756,3232820
static SQLITE_NOINLINE int walkExpr(Walker *pWalker, Expr *pExpr){walkExpr88800,3234388
SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){sqlite3WalkExpr88817,3235107
SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){sqlite3WalkExprList88825,3235334
SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){sqlite3WalkSelectExpr88842,3235855
SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){sqlite3WalkSelectFrom88860,3236689
SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){sqlite3WalkSelect88897,3237819
static int incrAggDepth(Walker *pWalker, Expr *pExpr){incrAggDepth88953,3239598
static void incrAggFunctionDepth(Expr *pExpr, int N){incrAggFunctionDepth88957,3239741
static void resolveAlias(resolveAlias88986,3240673
static int nameInUsingClause(IdList *pUsing, const char *zCol){nameInUsingClause89035,3242589
SQLITE_PRIVATE int sqlite3MatchSpanName(sqlite3MatchSpanName89052,3243132
static int lookupName(lookupName89102,3245050
SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){sqlite3CreateColumnExpr89429,3256404
static void notValid(notValid89452,3257075
static int exprProbability(Expr *p){exprProbability89474,3257890
static int resolveExprStep(Walker *pWalker, Expr *pExpr){resolveExprStep89494,3258532
static int resolveAsName(resolveAsName89758,3267957
static int resolveOrderByTermToExprList(resolveOrderByTermToExprList89797,3269239
static void resolveOutOfRangeError(resolveOutOfRangeError89844,3270638
static int resolveCompoundOrderBy(resolveCompoundOrderBy89870,3271752
SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy(sqlite3ResolveOrderGroupBy89968,3274797
static int resolveOrderGroupBy(resolveOrderGroupBy90019,3276829
static int resolveSelectStep(Walker *pWalker, Select *p){resolveSelectStep90077,3279072
SQLITE_PRIVATE int sqlite3ResolveExprNames( sqlite3ResolveExprNames90345,3289386
SQLITE_PRIVATE int sqlite3ResolveExprListNames( sqlite3ResolveExprListNames90390,3290664
SQLITE_PRIVATE void sqlite3ResolveSelectNames(sqlite3ResolveSelectNames90415,3291455
SQLITE_PRIVATE void sqlite3ResolveSelfReference(sqlite3ResolveSelfReference90442,3292263
SQLITE_PRIVATE char sqlite3TableColumnAffinity(Table *pTab, int iCol){sqlite3TableColumnAffinity90491,3294130
SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){sqlite3ExprAffinity90512,3294841
SQLITE_PRIVATE Expr *sqlite3ExprAddCollateToken(sqlite3ExprAddCollateToken90548,3295993
SQLITE_PRIVATE Expr *sqlite3ExprAddCollateString(Parse *pParse, Expr *pExpr, const char *zC){sqlite3ExprAddCollateString90564,3296525
SQLITE_PRIVATE Expr *sqlite3ExprSkipCollate(Expr *pExpr){sqlite3ExprSkipCollate90575,3296867
SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){sqlite3ExprCollSeq90599,3297676
SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){sqlite3CompareAffinity90663,3299738
static char comparisonAffinity(Expr *pExpr){comparisonAffinity90690,3300602
SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){sqlite3IndexAffinityOk90713,3301449
static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){binaryCompareP590729,3301904
SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq(sqlite3BinaryCompareCollSeq90747,3302570
static int codeCompare(codeCompare90770,3303102
SQLITE_PRIVATE int sqlite3ExprIsVector(Expr *pExpr){sqlite3ExprIsVector90800,3304238
SQLITE_PRIVATE int sqlite3ExprVectorSize(Expr *pExpr){sqlite3ExprVectorSize90810,3304600
SQLITE_PRIVATE Expr *sqlite3VectorFieldSubexpr(Expr *pVector, int i){sqlite3VectorFieldSubexpr90838,3305511
SQLITE_PRIVATE Expr *sqlite3ExprForVectorField(sqlite3ExprForVectorField90874,3306947
static int exprCodeSubselect(Parse *pParse, Expr *pExpr){exprCodeSubselect90920,3308825
static int exprVectorRegister(exprVectorRegister90948,3309895
static void codeVectorCompare(codeVectorCompare90981,3311170
SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){sqlite3ExprCheckHeight91065,3314093
static void heightOfExpr(Expr *p, int *pnHeight){heightOfExpr91086,3314794
static void heightOfExprList(ExprList *p, int *pnHeight){heightOfExprList91093,3314929
static void heightOfSelect(Select *p, int *pnHeight){heightOfSelect91101,3315097
static void exprSetHeight(Expr *p){exprSetHeight91124,3315876
SQLITE_PRIVATE void sqlite3ExprSetHeightAndFlags(Parse *pParse, Expr *p){sqlite3ExprSetHeightAndFlags91145,3316522
SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){sqlite3SelectExprHeight91155,3316813
SQLITE_PRIVATE void sqlite3ExprSetHeightAndFlags(Parse *pParse, Expr *p){sqlite3ExprSetHeightAndFlags91165,3317102
#define exprSetHeight(exprSetHeight91170,3317309
SQLITE_PRIVATE Expr *sqlite3ExprAlloc(sqlite3ExprAlloc91193,3318382
SQLITE_PRIVATE Expr *sqlite3Expr(sqlite3Expr91242,3319747
SQLITE_PRIVATE void sqlite3ExprAttachSubtrees(sqlite3ExprAttachSubtrees91259,3320292
SQLITE_PRIVATE Expr *sqlite3PExpr(sqlite3PExpr91289,3321026
SQLITE_PRIVATE void sqlite3PExprAddSelect(Parse *pParse, Expr *pExpr, Select *pSelect){sqlite3PExprAddSelect91318,3321880
static int exprAlwaysTrue(Expr *p){exprAlwaysTrue91344,3322849
static int exprAlwaysFalse(Expr *p){exprAlwaysFalse91350,3323012
SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){sqlite3ExprAnd91365,3323475
SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){sqlite3ExprFunction91385,3324062
SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr, u32 n){sqlite3ExprAssignVarNumber91416,3325165
static SQLITE_NOINLINE void sqlite3ExprDeleteNN(sqlite3 *db, Expr *p){sqlite3ExprDeleteNN91484,3327308
SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){sqlite3ExprDelete91511,3328317
static int exprStructSize(Expr *p){exprStructSize91520,3328608
static int dupedExprStructSize(Expr *p, int flags){dupedExprStructSize91560,3330468
static int dupedExprNodeSize(Expr *p, int flags){dupedExprNodeSize91587,3331358
static int dupedExprSize(Expr *p, int flags){dupedExprSize91608,3332196
static Expr *exprDup(sqlite3 *db, Expr *p, int dupFlags, u8 **pzBuffer){exprDup91627,3332879
static With *withDup(sqlite3 *db, With *p){withDup91726,3336286
# define withDup(withDup91744,3336795
SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){sqlite3ExprDup91764,3337643
SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){sqlite3ExprListDup91768,3337805
SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){sqlite3SrcListDup91823,3339680
SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){sqlite3IdListDup91864,3341217
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *pDup, int flags){sqlite3SelectDup91888,3342006
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){sqlite3SelectDup91925,3343217
SQLITE_PRIVATE ExprList *sqlite3ExprListAppend(sqlite3ExprListAppend91940,3343652
SQLITE_PRIVATE ExprList *sqlite3ExprListAppendVector(sqlite3ExprListAppendVector91990,3345149
SQLITE_PRIVATE void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder){sqlite3ExprListSetSortOrder92051,3347321
SQLITE_PRIVATE void sqlite3ExprListSetName(sqlite3ExprListSetName92070,3347929
SQLITE_PRIVATE void sqlite3ExprListSetSpan(sqlite3ExprListSetSpan92095,3348796
SQLITE_PRIVATE void sqlite3ExprListCheckLength(sqlite3ExprListCheckLength92116,3349539
static SQLITE_NOINLINE void exprListDeleteNN(sqlite3 *db, ExprList *pList){exprListDeleteNN92132,3349939
SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){sqlite3ExprListDelete92144,3350337
SQLITE_PRIVATE u32 sqlite3ExprListFlags(const ExprList *pList){sqlite3ExprListFlags92152,3350538
static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){exprNodeIsConstant92190,3352012
static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){selectNodeIsConstant92244,3353921
static int exprIsConst(Expr *p, int initFlag, int iCur){exprIsConst92249,3354061
SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){sqlite3ExprIsConstant92268,3354625
SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){sqlite3ExprIsConstantNotJoin92278,3354952
SQLITE_PRIVATE int sqlite3ExprIsTableConstant(Expr *p, int iCur){sqlite3ExprIsTableConstant92288,3355296
SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p, u8 isInit){sqlite3ExprIsConstantOrFunction92301,3355733
SQLITE_PRIVATE int sqlite3ExprContainsSubquery(Expr *p){sqlite3ExprContainsSubquery92311,3356053
SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){sqlite3ExprIsInteger92328,3356603
SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){sqlite3ExprCanBeNull92373,3357969
SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){sqlite3ExprNeedsNoAffinityChange92403,3358829
SQLITE_PRIVATE int sqlite3IsRowid(const char *z){sqlite3IsRowid92436,3359681
static Select *isCandidateForInOpt(Expr *pX){isCandidateForInOpt92451,3360225
static void sqlite3SetHasNullFlag(Vdbe *v, int iCur, int regHasNull){sqlite3SetHasNullFlag92497,3362186
static int sqlite3InRhsIsConstant(Expr *pIn){sqlite3InRhsIsConstant92514,3362743
SQLITE_PRIVATE int sqlite3FindInIndex(sqlite3FindInIndex92608,3367095
static char *exprINAffinity(Parse *pParse, Expr *pExpr){exprINAffinity92830,3376148
SQLITE_PRIVATE void sqlite3SubselectError(Parse *pParse, int nActual, int nExpect){sqlite3SubselectError92862,3376971
SQLITE_PRIVATE void sqlite3VectorErrorMsg(Parse *pParse, Expr *pExpr){sqlite3VectorErrorMsg92879,3377512
SQLITE_PRIVATE int sqlite3CodeSubselect(sqlite3CodeSubselect92920,3379253
SQLITE_PRIVATE int sqlite3ExprCheckIN(Parse *pParse, Expr *pIn){sqlite3ExprCheckIN93164,3388890
static void sqlite3ExprCodeIN(sqlite3ExprCodeIN93205,3390414
static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){codeReal93446,3399971
static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){codeInteger93464,3400507
static void cacheEntryClear(Parse *pParse, int i){cacheEntryClear93500,3401540
SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){sqlite3ExprCacheStore93517,3402016
SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){sqlite3ExprCacheRemove93572,3403727
SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){sqlite3ExprCachePush93589,3404189
SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse){sqlite3ExprCachePop93603,3404618
static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){sqlite3ExprCachePinRegister93627,3405265
SQLITE_PRIVATE void sqlite3ExprCodeLoadIndexColumn(sqlite3ExprCodeLoadIndexColumn93640,3405615
SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable(sqlite3ExprCodeGetColumnOfTable93662,3406434
SQLITE_PRIVATE int sqlite3ExprCodeGetColumn(sqlite3ExprCodeGetColumn93696,3407721
SQLITE_PRIVATE void sqlite3ExprCodeGetColumnToReg(sqlite3ExprCodeGetColumnToReg93724,3408627
SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){sqlite3ExprCacheClear93739,3409158
SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){sqlite3ExprCacheAffinityChange93761,3409681
SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){sqlite3ExprCodeMove93769,3409962
static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){usedAsColumnCache93783,3410493
static void exprToRegister(Expr *p, int iReg){exprToRegister93800,3410980
static int exprCodeVector(Parse *pParse, Expr *p, int *piFreeable){exprCodeVector93817,3411558
SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeTarget93850,3412568
SQLITE_PRIVATE int sqlite3ExprCodeAtInit(sqlite3ExprCodeAtInit94488,3436639
SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){sqlite3ExprCodeTemp94530,3438053
SQLITE_PRIVATE void sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCode94557,3438750
SQLITE_PRIVATE void sqlite3ExprCodeCopy(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeCopy94577,3439456
SQLITE_PRIVATE void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeFactorable94590,3439984
SQLITE_PRIVATE void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeAndCache94610,3440691
SQLITE_PRIVATE int sqlite3ExprCodeExprList(sqlite3ExprCodeExprList94638,3441661
static void exprCodeBetween(exprCodeBetween94704,3443673
SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){sqlite3ExprIfTrue94773,3446673
SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){sqlite3ExprIfFalse94896,3450990
SQLITE_PRIVATE void sqlite3ExprIfFalseDup(Parse *pParse, Expr *pExpr, int dest,int jumpIfNull){sqlite3ExprIfFalseDup95046,3456246
SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB, int iTab){sqlite3ExprCompare95078,3457703
SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB, int iTab){sqlite3ExprListCompare95136,3459796
SQLITE_PRIVATE int sqlite3ExprImpliesExpr(Expr *pE1, Expr *pE2, int iTab){sqlite3ExprImpliesExpr95170,3461158
struct IdxCover {IdxCover95195,3462009
  Index *pIdx;     /* The index to be tested for coverage */pIdx95196,3462027
  int iCur;        /* Cursor number for the table corresponding to the index */iCur95197,3462088
static int exprIdxCover(Walker *pWalker, Expr *pExpr){exprIdxCover95205,3462333
SQLITE_PRIVATE int sqlite3ExprCoveredByIndex(sqlite3ExprCoveredByIndex95226,3463041
struct SrcCount {SrcCount95249,3463726
  SrcList *pSrc;   /* One particular FROM clause in a nested query */pSrc95250,3463744
  int nThis;       /* Number of references to columns in pSrcList */nThis95251,3463814
  int nOther;      /* Number of references to columns in other FROM clauses */nOther95252,3463883
static int exprSrcCount(Walker *pWalker, Expr *pExpr){exprSrcCount95258,3464018
SQLITE_PRIVATE int sqlite3FunctionUsesThisSrc(Expr *pExpr, SrcList *pSrcList){sqlite3FunctionUsesThisSrc95287,3465069
static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){addAggInfoColumn95305,3465594
static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){addAggInfoFunc95321,3465962
static int analyzeAggregate(Walker *pWalker, Expr *pExpr){analyzeAggregate95338,3466366
static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){analyzeAggregatesInSelect95463,3471041
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){sqlite3ExprAnalyzeAggregates95478,3471542
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){sqlite3ExprAnalyzeAggList95494,3472007
SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){sqlite3GetTempReg95507,3472354
SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){sqlite3ReleaseTempReg95522,3472774
SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){sqlite3GetTempRange95539,3473214
SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){sqlite3ReleaseTempRange95554,3473599
SQLITE_PRIVATE void sqlite3ClearTempRegCache(Parse *pParse){sqlite3ClearTempRegCache95569,3473968
SQLITE_PRIVATE int sqlite3NoTempsInRange(Parse *pParse, int iFirst, int iLast){sqlite3NoTempsInRange95580,3474264
static void renameTableFunc(renameTableFunc95635,3476015
static void renameParentFunc(renameParentFunc95700,3478080
static void renameTriggerFunc(renameTriggerFunc95757,3480009
SQLITE_PRIVATE void sqlite3AlterFunctions(void){sqlite3AlterFunctions95829,3482247
static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){whereOrName95858,3483370
static char *whereForeignKeys(Parse *pParse, Table *pTab){whereForeignKeys95876,3483964
static char *whereTempTriggers(Parse *pParse, Table *pTab){whereTempTriggers95892,3484466
static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){reloadTableSchema95926,3485739
static int isSystemTable(Parse *pParse, const char *zName){isSystemTable95975,3487491
SQLITE_PRIVATE void sqlite3AlterRenameTable(sqlite3AlterRenameTable95987,3487814
SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){sqlite3AlterFinishAddColumn96191,3494627
SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){sqlite3AlterBeginAddColumn96329,3499471
# define IsStat4 IsStat496555,3509520
# define IsStat3 IsStat396556,3509543
# define IsStat4 IsStat496558,3509601
# define IsStat3 IsStat396559,3509624
# define IsStat4 IsStat496561,3509653
# define IsStat3 IsStat396562,3509676
# undef SQLITE_STAT4_SAMPLESSQLITE_STAT4_SAMPLES96563,3509699
# define SQLITE_STAT4_SAMPLES SQLITE_STAT4_SAMPLES96564,3509728
#define IsStat34 IsStat3496566,3509767
static void openStatTable(openStatTable96581,3510468
# define SQLITE_STAT4_SAMPLES SQLITE_STAT4_SAMPLES96666,3513324
typedef struct Stat4Accum Stat4Accum;Stat4Accum96674,3513523
typedef struct Stat4Sample Stat4Sample;Stat4Sample96675,3513561
struct Stat4Sample {Stat4Sample96676,3513601
  tRowcnt *anEq;                  /* sqlite_stat4.nEq */anEq96677,3513622
  tRowcnt *anDLt;                 /* sqlite_stat4.nDLt */anDLt96678,3513679
  tRowcnt *anLt;                  /* sqlite_stat4.nLt */anLt96680,3513773
    i64 iRowid;                     /* Rowid in main table of the key */iRowid96682,3513840
    u8 *aRowid;                     /* Key for WITHOUT ROWID tables */aRowid96683,3513913
  } u;u96684,3513984
  u32 nRowid;                     /* Sizeof aRowid[] */nRowid96685,3513991
  u8 isPSample;                   /* True if a periodic sample */isPSample96686,3514047
  int iCol;                       /* If !isPSample, the reason for inclusion */iCol96687,3514113
  u32 iHash;                      /* Tiebreaker hash */iHash96688,3514193
struct Stat4Accum {Stat4Accum96691,3514311
  tRowcnt nRow;             /* Number of rows in the entire table */nRow96692,3514331
  tRowcnt nPSample;         /* How often to do a periodic sample */nPSample96693,3514400
  int nCol;                 /* Number of columns in index + pk/rowid */nCol96694,3514468
  int nKeyCol;              /* Number of index columns w/o the pk/rowid */nKeyCol96695,3514540
  int mxSample;             /* Maximum number of samples to accumulate */mxSample96696,3514615
  Stat4Sample current;      /* Current row as a Stat4Sample */current96697,3514689
  u32 iPrn;                 /* Pseudo-random number used for sampling */iPrn96698,3514752
  Stat4Sample *aBest;       /* Array of nCol best samples */aBest96699,3514825
  int iMin;                 /* Index in a[] of entry with minimum score */iMin96700,3514886
  int nSample;              /* Current number of samples */nSample96701,3514961
  int iGet;                 /* Index of current sample accessed by stat_get() */iGet96702,3515021
  Stat4Sample *a;           /* Array of mxSample Stat4Sample objects */a96703,3515102
  sqlite3 *db;              /* Database connection, for malloc() */db96704,3515174
static void sampleClear(sqlite3 *db, Stat4Sample *p){sampleClear96710,3515325
static void sampleSetRowid(sqlite3 *db, Stat4Sample *p, int n, const u8 *pData){sampleSetRowid96722,3515565
static void sampleSetRowidInt64(sqlite3 *db, Stat4Sample *p, i64 iRowid){sampleSetRowidInt6496738,3515960
static void sampleCopy(Stat4Accum *p, Stat4Sample *pTo, Stat4Sample *pFrom){sampleCopy96751,3516250
static void stat4Destructor(void *pOld){stat4Destructor96769,3516818
static void statInit(statInit96803,3518172
static const FuncDef statInitFuncdef = {statInitFuncdef96885,3521059
static int sampleIsBetterPost(sampleIsBetterPost96908,3521953
static int sampleIsBetter(sampleIsBetter96932,3522568
static void sampleInsert(Stat4Accum *p, Stat4Sample *pNew, int nEqZero){sampleInsert96959,3523297
static void samplePushPrevious(Stat4Accum *p, int iChng){samplePushPrevious97049,3526087
static void statPush(statPush97115,3528158
static const FuncDef statPushFuncdef = {statPushFuncdef97184,3530106
#define STAT_GET_STAT1 STAT_GET_STAT197195,3530386
#define STAT_GET_ROWID STAT_GET_ROWID97196,3530455
#define STAT_GET_NEQ STAT_GET_NEQ97197,3530528
#define STAT_GET_NLT STAT_GET_NLT97198,3530599
#define STAT_GET_NDLT STAT_GET_NDLT97199,3530670
static void statGet(statGet97220,3531669
static const FuncDef statGetFuncdef = {statGetFuncdef97335,3535150
static void callStatGet(Vdbe *v, int regStat4, int iParam, int regOut){callStatGet97346,3535429
static void analyzeOneTable(analyzeOneTable97364,3535992
static void loadAnalysis(Parse *pParse, int iDb){loadAnalysis97690,3548360
static void analyzeDatabase(Parse *pParse, int iDb){analyzeDatabase97700,3548582
static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){analyzeTable97727,3549410
SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){sqlite3Analyze97758,3550476
typedef struct analysisInfo analysisInfo;analysisInfo97822,3552364
struct analysisInfo {analysisInfo97823,3552406
  sqlite3 *db;db97824,3552428
  const char *zDatabase;zDatabase97825,3552443
static void decodeIntArray(decodeIntArray97833,3552639
static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){analysisLoader97904,3554547
SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){sqlite3DeleteIndexSamples97962,3556265
static void initAvgEq(Index *pIdx){initAvgEq97987,3556892
static Index *findIndexOrPrimaryKey(findIndexOrPrimaryKey98046,3559041
static int loadStatTbl(loadStatTbl98072,3559878
static int loadStat4(sqlite3 *db, const char *zDb){loadStat498198,3564692
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){sqlite3AnalysisLoad98242,3566305
static int resolveAttachExpr(NameContext *pName, Expr *pExpr)resolveAttachExpr98342,3569439
static void attachFunc(attachFunc98366,3570019
static void detachFunc(detachFunc98569,3576074
static void codeAttach(codeAttach98621,3577423
SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){sqlite3Detach98695,3579599
SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){sqlite3Attach98714,3580145
SQLITE_PRIVATE void sqlite3FixInit(sqlite3FixInit98733,3580790
SQLITE_PRIVATE int sqlite3FixSrcList(sqlite3FixSrcList98766,3582132
SQLITE_PRIVATE int sqlite3FixSelect(sqlite3FixSelect98796,3583136
SQLITE_PRIVATE int sqlite3FixExpr(sqlite3FixExpr98829,3583963
SQLITE_PRIVATE int sqlite3FixExprList(sqlite3FixExprList98855,3584734
SQLITE_PRIVATE int sqlite3FixTriggerStep(sqlite3FixTriggerStep98872,3585144
SQLITE_API int sqlite3_set_authorizer(sqlite3_set_authorizer98963,3588287
static void sqliteAuthBadReturnCode(Parse *pParse){sqliteAuthBadReturnCode98983,3588863
SQLITE_PRIVATE int sqlite3AuthReadCol(sqlite3AuthReadCol98997,3589458
SQLITE_PRIVATE void sqlite3AuthRead(sqlite3AuthRead99035,3590898
SQLITE_PRIVATE int sqlite3AuthCheck(sqlite3AuthCheck99092,3592746
SQLITE_PRIVATE void sqlite3AuthContextPush(sqlite3AuthContextPush99132,3593786
SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){sqlite3AuthContextPop99147,3594129
struct TableLock {TableLock99189,3595403
  int iDb;               /* The database containing the table to be locked */iDb99190,3595422
  int iTab;              /* The root page of the table to be locked */iTab99191,3595500
  u8 isWriteLock;        /* True for write lock.  False for a read lock */isWriteLock99192,3595571
  const char *zLockName; /* Name of the table */zLockName99193,3595646
SQLITE_PRIVATE void sqlite3TableLock(sqlite3TableLock99206,3596109
static void codeTableLocks(Parse *pParse){codeTableLocks99248,3597402
  #define codeTableLocks(codeTableLocks99263,3597820
SQLITE_PRIVATE int sqlite3DbMaskAllZero(yDbMask m){sqlite3DbMaskAllZero99272,3598092
SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){sqlite3FinishCoding99289,3598592
SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){sqlite3NestedParse99408,3602741
SQLITE_PRIVATE int sqlite3UserAuthTable(const char *zTable){sqlite3UserAuthTable99438,3603644
SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){sqlite3FindTable99455,3604285
SQLITE_PRIVATE Table *sqlite3LocateTable(sqlite3LocateTable99496,3605857
SQLITE_PRIVATE Table *sqlite3LocateTableItem(sqlite3LocateTableItem99549,3607747
SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){sqlite3FindIndex99577,3608605
static void freeIndex(sqlite3 *db, Index *p){freeIndex99597,3609264
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){sqlite3UnlinkAndDeleteIndex99617,3609880
SQLITE_PRIVATE void sqlite3CollapseDatabaseArray(sqlite3 *db){sqlite3CollapseDatabaseArray99650,3610946
SQLITE_PRIVATE void sqlite3ResetOneSchema(sqlite3 *db, int iDb){sqlite3ResetOneSchema99676,3611536
SQLITE_PRIVATE void sqlite3ResetAllSchemasOfConnection(sqlite3 *db){sqlite3ResetAllSchemasOfConnection99702,3612257
SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){sqlite3CommitInternalChanges99720,3612680
SQLITE_PRIVATE void sqlite3DeleteColumnNames(sqlite3 *db, Table *pTable){sqlite3DeleteColumnNames99728,3612886
static void SQLITE_NOINLINE deleteTable(sqlite3 *db, Table *pTable){deleteTable99757,3613914
SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){sqlite3DeleteTable99801,3615599
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){sqlite3UnlinkAndDeleteTable99813,3615996
SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){sqlite3NameFromToken99841,3616967
SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){sqlite3OpenMasterTable99856,3617322
SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){sqlite3FindDbName99871,3617839
SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){sqlite3FindDb99891,3618561
SQLITE_PRIVATE int sqlite3TwoPartName(sqlite3TwoPartName99916,3619443
SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){sqlite3CheckObjectName99952,3620627
SQLITE_PRIVATE Index *sqlite3PrimaryKeyIndex(Table *pTab){sqlite3PrimaryKeyIndex99965,3621050
SQLITE_PRIVATE i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){sqlite3ColumnOfIndex99975,3621308
SQLITE_PRIVATE void sqlite3StartTable(sqlite3StartTable99999,3622345
SQLITE_PRIVATE void sqlite3ColumnPropertiesFromName(Table *pTab, Column *pCol){sqlite3ColumnPropertiesFromName100189,3629181
SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName, Token *pType){sqlite3AddColumn100207,3629771
SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){sqlite3AddNotNull100270,3631539
SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn, u8 *pszEst){sqlite3AffinityType100302,3632643
SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){sqlite3AddDefaultValue100374,3635025
static void sqlite3StringToId(Expr *p){sqlite3StringToId100420,3636790
SQLITE_PRIVATE void sqlite3AddPrimaryKey(sqlite3AddPrimaryKey100446,3637776
SQLITE_PRIVATE void sqlite3AddCheckConstraint(sqlite3AddCheckConstraint100516,3639910
SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){sqlite3AddCollateType100541,3640604
SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){sqlite3LocateCollSeq100593,3642357
SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){sqlite3ChangeCookie100627,3643564
static int identLength(const char *z){identLength100643,3644122
static void identPut(char *z, int *pIdx, char *zSignedIdent){identPut100664,3644911
static char *createTableStmt(sqlite3 *db, Table *p){createTableStmt100692,3645688
static int resizeIndexObject(sqlite3 *db, Index *pIdx, int N){resizeIndexObject100760,3647643
static void estimateTableWidth(Table *pTab){estimateTableWidth100784,3648397
static void estimateIndexWidth(Index *pIdx){estimateIndexWidth100798,3648732
static int hasColumn(const i16 *aiCol, int nCol, int x){hasColumn100812,3649138
static void convertToWithoutRowidTable(Parse *pParse, Table *pTab){convertToWithoutRowidTable100842,3650621
SQLITE_PRIVATE void sqlite3EndTable(sqlite3EndTable100989,3655545
SQLITE_PRIVATE void sqlite3CreateView(sqlite3CreateView101231,3663685
SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){sqlite3ViewGetColumnNames101303,3666216
static void sqliteViewResetAll(sqlite3 *db, int idx){sqliteViewResetAll101417,3670182
# define sqliteViewResetAll(sqliteViewResetAll101432,3670648
SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){sqlite3RootPageMoved101453,3671624
static void destroyRootPage(Parse *pParse, int iTable, int iDb){destroyRootPage101483,3672547
static void destroyTable(Parse *pParse, Table *pTab){destroyTable101512,3673748
static void sqlite3ClearStatTables(sqlite3ClearStatTables101570,3675525
SQLITE_PRIVATE void sqlite3CodeDropTable(Parse *pParse, Table *pTab, int iDb, int isView){sqlite3CodeDropTable101593,3676158
SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){sqlite3DropTable101664,3678496
SQLITE_PRIVATE void sqlite3CreateForeignKey(sqlite3CreateForeignKey101780,3682146
SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){sqlite3DeferForeignKey101901,3685539
static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){sqlite3RefillIndex101922,3686401
SQLITE_PRIVATE Index *sqlite3AllocateIndexObject(sqlite3AllocateIndexObject102009,3690108
SQLITE_PRIVATE void sqlite3CreateIndex(sqlite3CreateIndex102049,3691977
SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){sqlite3DefaultRowEst102607,3712121
SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){sqlite3DropIndex102636,3713242
SQLITE_PRIVATE void *sqlite3ArrayAllocate(sqlite3ArrayAllocate102717,3716050
SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){sqlite3IdListAppend102748,3716894
SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){sqlite3IdListDelete102772,3717385
SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){sqlite3IdListIndex102786,3717719
SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge(sqlite3SrcListEnlarge102814,3718684
SQLITE_PRIVATE SrcList *sqlite3SrcListAppend(sqlite3SrcListAppend102896,3721471
SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){sqlite3SrcListAssignCursors102936,3722653
SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){sqlite3SrcListDelete102954,3723150
SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm(sqlite3SrcListAppendFromTerm102988,3724636
SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){sqlite3SrcListIndexedBy103032,3726087
SQLITE_PRIVATE void sqlite3SrcListFuncArgs(Parse *pParse, SrcList *p, ExprList *pList){sqlite3SrcListFuncArgs103054,3726844
SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){sqlite3SrcListShiftJoinType103082,3727828
SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){sqlite3BeginTransaction103095,3728087
SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){sqlite3CommitTransaction103120,3728654
SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){sqlite3RollbackTransaction103137,3729009
SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){sqlite3Savepoint103155,3729442
SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){sqlite3OpenTempDatabase103175,3730188
SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){sqlite3CodeVerifySchema103210,3731247
SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){sqlite3CodeVerifyNamedSchema103229,3731896
SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){sqlite3BeginWriteOperation103253,3732879
SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){sqlite3MultiWrite103267,3733500
SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){sqlite3MayAbort103288,3734505
SQLITE_PRIVATE void sqlite3HaltConstraint(sqlite3HaltConstraint103298,3734836
SQLITE_PRIVATE void sqlite3UniqueConstraint(sqlite3UniqueConstraint103318,3735469
SQLITE_PRIVATE void sqlite3RowidConstraint(sqlite3RowidConstraint103351,3736446
static int collationMatch(const char *zColl, Index *pIndex){collationMatch103375,3737230
static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){reindexTable103394,3737712
static void reindexDatabases(Parse *pParse, char const *zColl){reindexDatabases103413,3738344
SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){sqlite3Reindex103445,3739575
SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoOfIndex(Parse *pParse, Index *pIdx){sqlite3KeyInfoOfIndex103505,3741564
SQLITE_PRIVATE With *sqlite3WithAdd(sqlite3WithAdd103537,3742426
SQLITE_PRIVATE void sqlite3WithDelete(sqlite3 *db, With *pWith){sqlite3WithDelete103587,3743910
static void callCollNeeded(sqlite3 *db, int enc, const char *zName){callCollNeeded103625,3745111
static int synthCollSeq(sqlite3 *db, CollSeq *pColl){synthCollSeq103654,3746148
SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq(sqlite3GetCollSeq103684,3747259
SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){sqlite3CheckCollSeq103725,3748705
static CollSeq *findCollSeqEntry(findCollSeqEntry103753,3749634
SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq(sqlite3FindCollSeq103806,3751431
#define FUNC_PERFECT_MATCH FUNC_PERFECT_MATCH103852,3753182
static int matchQuality(matchQuality103853,3753248
static FuncDef *functionSearch(functionSearch103888,3754311
SQLITE_PRIVATE void sqlite3InsertBuiltinFuncs(sqlite3InsertBuiltinFuncs103904,3754656
SQLITE_PRIVATE FuncDef *sqlite3FindFunction(sqlite3FindFunction103948,3756264
SQLITE_PRIVATE void sqlite3SchemaClear(void *p){sqlite3SchemaClear104038,3759367
SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){sqlite3SchemaGet104070,3760307
SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){sqlite3SrcListLookup104121,3762118
SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){sqlite3IsReadOnly104142,3762681
SQLITE_PRIVATE void sqlite3MaterializeView(sqlite3MaterializeView104179,3763959
SQLITE_PRIVATE Expr *sqlite3LimitWhere(sqlite3LimitWhere104216,3765399
SQLITE_PRIVATE void sqlite3DeleteFrom(sqlite3DeleteFrom104298,3768611
# undef isViewisView104366,3771892
# define isView isView104367,3771907
 #undef isViewisView104658,3782345
 #undef pTriggerpTrigger104661,3782383
SQLITE_PRIVATE void sqlite3GenerateRowDelete(sqlite3GenerateRowDelete104705,3784367
SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete(sqlite3GenerateRowIndexDelete104856,3790830
SQLITE_PRIVATE int sqlite3GenerateIndexKey(sqlite3GenerateIndexKey104920,3794020
SQLITE_PRIVATE void sqlite3ResolvePartIdxLabel(Parse *pParse, int iLabel){sqlite3ResolvePartIdxLabel104982,3796464
static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){sqlite3GetFuncCollSeq105014,3797553
static void sqlite3SkipAccumulatorLoad(sqlite3_context *context){sqlite3SkipAccumulatorLoad105027,3797917
static void minmaxFunc(minmaxFunc105034,3798082
static void typeofFunc(typeofFunc105064,3798800
static void lengthFunc(lengthFunc105085,3799330
static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){absFunc105125,3800157
static void instrFunc(instrFunc105174,3801874
static void printfFunc(printfFunc105221,3803156
static void substrFunc(substrFunc105257,3804218
static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){roundFunc105352,3806424
static void *contextMalloc(sqlite3_context *context, i64 nByte){contextMalloc105393,3807710
static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){upperFunc105414,3808256
static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){lowerFunc105433,3808836
#define noopFunc noopFunc105461,3809861
static void randomFunc(randomFunc105466,3809999
static void randomBlob(randomBlob105492,3810817
static void last_insert_rowid(last_insert_rowid105516,3811334
static void changes(changes105536,3811976
static void total_changes(total_changes105550,3812356
struct compareInfo {compareInfo105565,3812784
  u8 matchAll;          /* "*" or "%" */matchAll105566,3812805
  u8 matchOne;          /* "?" or "_" */matchOne105567,3812846
  u8 matchSet;          /* "[" or 0 */matchSet105568,3812887
  u8 noCase;            /* true to ignore case differences */noCase105569,3812926
# define sqlite3Utf8Read(sqlite3Utf8Read105579,3813269
# define Utf8Read(Utf8Read105580,3813316
# define Utf8Read(Utf8Read105582,3813366
static const struct compareInfo globInfo = { '*', '?', '[', 0 };globInfo105585,3813448
static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };likeInfoNorm105588,3813626
static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };likeInfoAlt105591,3813820
#define SQLITE_MATCH SQLITE_MATCH105596,3813941
#define SQLITE_NOMATCH SQLITE_NOMATCH105597,3813976
#define SQLITE_NOWILDCARDMATCH SQLITE_NOWILDCARDMATCH105598,3814011
static int patternCompare(patternCompare105638,3815380
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){sqlite3_strglob105766,3819923
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){sqlite3_strlike105774,3820186
SQLITE_API int sqlite3_like_count = 0;sqlite3_like_count105784,3820522
static void likeFunc(likeFunc105800,3820950
static void nullifFunc(nullifFunc105865,3822889
static void versionFunc(versionFunc105881,3823295
static void sourceidFunc(sourceidFunc105897,3823787
static void errlogFunc(errlogFunc105913,3824285
static void compileoptionusedFunc(compileoptionusedFunc105929,3824716
static void compileoptiongetFunc(compileoptiongetFunc105953,3825428
static const char hexdigits[] = {hexdigits105971,3825972
static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){quoteFunc105983,3826416
static void unicodeFunc(unicodeFunc106059,3828656
static void charFunc(charFunc106074,3829106
static void hexFunc(hexFunc106115,3830267
static void zeroblobFunc(zeroblobFunc106143,3830975
static void replaceFunc(replaceFunc106166,3831577
static void trimFunc(trimFunc106250,3834337
static void unknownFunc(unknownFunc106341,3837208
static void soundexFunc(soundexFunc106362,3837723
static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){loadExt106415,3839293
typedef struct SumCtx SumCtx;SumCtx106446,3840169
struct SumCtx {SumCtx106447,3840199
  double rSum;      /* Floating point sum */rSum106448,3840215
  i64 iSum;         /* Integer sum */   iSum106449,3840260
  i64 cnt;          /* Number of elements summed */cnt106450,3840301
  u8 overflow;      /* True if integer overflow seen */overflow106451,3840353
  u8 approx;        /* True if non-integer value was input to the sum */approx106452,3840409
static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){sumStep106465,3840923
static void sumFinalize(sqlite3_context *context){sumFinalize106486,3841513
static void avgFinalize(sqlite3_context *context){avgFinalize106499,3841870
static void totalFinalize(sqlite3_context *context){totalFinalize106506,3842068
typedef struct CountCtx CountCtx;CountCtx106517,3842405
struct CountCtx {CountCtx106518,3842439
  i64 n;n106519,3842457
static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){countStep106525,3842533
static void countFinalize(sqlite3_context *context){countFinalize106541,3843177
static void minmaxStep(minmaxStep106550,3843408
static void minMaxFinalize(sqlite3_context *context){minMaxFinalize106588,3844687
static void groupConcatStep(groupConcatStep106602,3844996
static void groupConcatFinalize(sqlite3_context *context){groupConcatFinalize106634,3845915
SQLITE_PRIVATE void sqlite3RegisterPerConnectionBuiltinFunctions(sqlite3 *db){sqlite3RegisterPerConnectionBuiltinFunctions106654,3846584
static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){setLikeOptFlag106665,3846900
SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){sqlite3RegisterLikeFunctions106678,3847296
SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){sqlite3IsLikeFunction106706,3848505
SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(void){sqlite3RegisterBuiltinFunctions106739,3849658
SQLITE_PRIVATE int sqlite3FkLocateIndex(sqlite3FkLocateIndex107048,3863593
static void fkLookupParent(fkLookupParent107183,3869138
static Expr *exprTableRegister(exprTableRegister107324,3875376
static Expr *exprTableColumn(exprTableColumn107356,3876303
static void fkScanChildren(fkScanChildren107403,3878376
SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){sqlite3FkReferences107528,3883575
static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){fkTriggerDelete107540,3884023
SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){sqlite3FkDropTable107568,3885102
static int fkChildIsModified(fkChildIsModified107629,3887614
static int fkParentIsModified(fkParentIsModified107656,3888743
static int isSetNullAction(Parse *pParse, FKey *pFKey){isSetNullAction107685,3889440
SQLITE_PRIVATE void sqlite3FkCheck(sqlite3FkCheck107718,3890760
#define COLUMN_MASK(COLUMN_MASK107912,3898767
SQLITE_PRIVATE u32 sqlite3FkOldmask(sqlite3FkOldmask107918,3898942
SQLITE_PRIVATE int sqlite3FkRequired(sqlite3FkRequired107958,3900374
static Trigger *fkActionTrigger(fkActionTrigger108018,3902774
SQLITE_PRIVATE void sqlite3FkActions(sqlite3FkActions108200,3909579
SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){sqlite3FkDelete108232,3910962
SQLITE_PRIVATE void sqlite3OpenTable(sqlite3OpenTable108298,3913146
SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(sqlite3 *db, Index *pIdx){sqlite3IndexAffinityStr108344,3914806
SQLITE_PRIVATE void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){sqlite3TableAffinity108402,3916746
static int readsTable(Parse *p, int iDb, Table *pTab){readsTable108437,3917737
static int autoIncBegin(autoIncBegin108494,3919611
SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){sqlite3AutoincrementBegin108528,3920758
static void autoIncStep(Parse *pParse, int memId, int regRowid){autoIncStep108583,3922792
static SQLITE_NOINLINE void autoIncrementEnd(Parse *pParse){autoIncrementEnd108596,3923253
SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){sqlite3AutoincrementEnd108631,3924339
# define autoIncBegin(autoIncBegin108639,3924553
# define autoIncStep(autoIncStep108640,3924586
SQLITE_PRIVATE void sqlite3Insert(sqlite3Insert108750,3928919
# undef isViewisView108841,3932877
# define isView isView108842,3932892
 #undef isViewisView109352,3951205
 #undef pTriggerpTrigger109355,3951243
 #undef tmasktmask109358,3951280
#define CKCNSTRNT_COLUMN CKCNSTRNT_COLUMN109364,3951380
#define CKCNSTRNT_ROWID CKCNSTRNT_ROWID109365,3951461
static int checkConstraintExprNode(Walker *pWalker, Expr *pExpr){checkConstraintExprNode109372,3951773
static int checkConstraintUnchanged(Expr *pExpr, int *aiChng, int chngRowid){checkConstraintUnchanged109396,3952606
SQLITE_PRIVATE void sqlite3GenerateConstraintChecks(sqlite3GenerateConstraintChecks109497,3957754
SQLITE_PRIVATE void sqlite3SetMakeRecordP5(Vdbe *v, Table *pTab){sqlite3SetMakeRecordP5109950,3975510
SQLITE_PRIVATE void sqlite3CompleteInsertion(sqlite3CompleteInsertion109971,3976248
SQLITE_PRIVATE int sqlite3OpenTableAndIndices(sqlite3OpenTableAndIndices110073,3980292
SQLITE_API int sqlite3_xferopt_count;sqlite3_xferopt_count110135,3982474
static int xferCompatibleIndex(Index *pDest, Index *pSrc){xferCompatibleIndex110151,3983019
static int xferOptimization(xferOptimization110212,3985465
SQLITE_API int sqlite3_exec(sqlite3_exec110561,3999783
  #define SQLITE_CORE SQLITE_CORE110695,4003991
#define SQLITE3EXT_HSQLITE3EXT_H110717,4004896
struct sqlite3_api_routines {sqlite3_api_routines110730,4005318
  void * (*aggregate_context)(sqlite3_context*,int nBytes);aggregate_context110731,4005348
  int  (*aggregate_count)(sqlite3_context*);aggregate_count110732,4005408
  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));bind_blob110733,4005453
  int  (*bind_double)(sqlite3_stmt*,int,double);bind_double110734,4005526
  int  (*bind_int)(sqlite3_stmt*,int,int);bind_int110735,4005575
  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);bind_int64110736,4005618
  int  (*bind_null)(sqlite3_stmt*,int);bind_null110737,4005672
  int  (*bind_parameter_count)(sqlite3_stmt*);bind_parameter_count110738,4005712
  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);bind_parameter_index110739,4005759
  const char * (*bind_parameter_name)(sqlite3_stmt*,int);bind_parameter_name110740,4005823
  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));bind_text110741,4005881
  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));bind_text16110742,4005954
  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);bind_value110743,4006027
  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);busy_handler110744,4006089
  int  (*busy_timeout)(sqlite3*,int ms);busy_timeout110745,4006147
  int  (*changes)(sqlite3*);changes110746,4006188
  int  (*close)(sqlite3*);close110747,4006217
  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,collation_needed110748,4006244
  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,collation_needed16110750,4006365
  const void * (*column_blob)(sqlite3_stmt*,int iCol);column_blob110752,4006490
  int  (*column_bytes)(sqlite3_stmt*,int iCol);column_bytes110753,4006545
  int  (*column_bytes16)(sqlite3_stmt*,int iCol);column_bytes16110754,4006593
  int  (*column_count)(sqlite3_stmt*pStmt);column_count110755,4006643
  const char * (*column_database_name)(sqlite3_stmt*,int);column_database_name110756,4006687
  const void * (*column_database_name16)(sqlite3_stmt*,int);column_database_name16110757,4006746
  const char * (*column_decltype)(sqlite3_stmt*,int i);column_decltype110758,4006807
  const void * (*column_decltype16)(sqlite3_stmt*,int);column_decltype16110759,4006863
  double  (*column_double)(sqlite3_stmt*,int iCol);column_double110760,4006919
  int  (*column_int)(sqlite3_stmt*,int iCol);column_int110761,4006971
  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);column_int64110762,4007017
  const char * (*column_name)(sqlite3_stmt*,int);column_name110763,4007074
  const void * (*column_name16)(sqlite3_stmt*,int);column_name16110764,4007124
  const char * (*column_origin_name)(sqlite3_stmt*,int);column_origin_name110765,4007176
  const void * (*column_origin_name16)(sqlite3_stmt*,int);column_origin_name16110766,4007233
  const char * (*column_table_name)(sqlite3_stmt*,int);column_table_name110767,4007292
  const void * (*column_table_name16)(sqlite3_stmt*,int);column_table_name16110768,4007348
  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);column_text110769,4007406
  const void * (*column_text16)(sqlite3_stmt*,int iCol);column_text16110770,4007470
  int  (*column_type)(sqlite3_stmt*,int iCol);column_type110771,4007527
  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);column_value110772,4007574
  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);commit_hook110773,4007632
  int  (*complete)(const char*sql);complete110774,4007687
  int  (*complete16)(const void*sql);complete16110775,4007723
  int  (*create_collation)(sqlite3*,const char*,int,void*,create_collation110776,4007761
  int  (*create_collation16)(sqlite3*,const void*,int,void*,create_collation16110778,4007895
  int  (*create_function)(sqlite3*,const char*,int,int,void*,create_function110780,4008033
  int  (*create_function16)(sqlite3*,const void*,int,int,void*,create_function16110784,4008314
  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);create_module110788,4008603
  int  (*data_count)(sqlite3_stmt*pStmt);data_count110789,4008677
  sqlite3 * (*db_handle)(sqlite3_stmt*);db_handle110790,4008719
  int (*declare_vtab)(sqlite3*,const char*);declare_vtab110791,4008760
  int  (*enable_shared_cache)(int);enable_shared_cache110792,4008805
  int  (*errcode)(sqlite3*db);errcode110793,4008841
  const char * (*errmsg)(sqlite3*);errmsg110794,4008872
  const void * (*errmsg16)(sqlite3*);errmsg16110795,4008908
  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);exec110796,4008946
  int  (*expired)(sqlite3_stmt*);expired110797,4009014
  int  (*finalize)(sqlite3_stmt*pStmt);finalize110798,4009048
  void  (*free)(void*);free110799,4009088
  void  (*free_table)(char**result);free_table110800,4009112
  int  (*get_autocommit)(sqlite3*);get_autocommit110801,4009149
  void * (*get_auxdata)(sqlite3_context*,int);get_auxdata110802,4009185
  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);get_table110803,4009232
  int  (*global_recover)(void);global_recover110804,4009300
  void  (*interruptx)(sqlite3*);interruptx110805,4009332
  sqlite_int64  (*last_insert_rowid)(sqlite3*);last_insert_rowid110806,4009365
  const char * (*libversion)(void);libversion110807,4009413
  int  (*libversion_number)(void);libversion_number110808,4009449
  void *(*malloc)(int);malloc110809,4009484
  char * (*mprintf)(const char*,...);mprintf110810,4009508
  int  (*open)(const char*,sqlite3**);open110811,4009546
  int  (*open16)(const void*,sqlite3**);open16110812,4009585
  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);prepare110813,4009626
  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);prepare16110814,4009699
  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);profile110815,4009774
  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);progress_handler110816,4009852
  void *(*realloc)(void*,int);realloc110817,4009915
  int  (*reset)(sqlite3_stmt*pStmt);reset110818,4009946
  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));result_blob110819,4009983
  void  (*result_double)(sqlite3_context*,double);result_double110820,4010056
  void  (*result_error)(sqlite3_context*,const char*,int);result_error110821,4010107
  void  (*result_error16)(sqlite3_context*,const void*,int);result_error16110822,4010166
  void  (*result_int)(sqlite3_context*,int);result_int110823,4010227
  void  (*result_int64)(sqlite3_context*,sqlite_int64);result_int64110824,4010272
  void  (*result_null)(sqlite3_context*);result_null110825,4010328
  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));result_text110826,4010370
  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));result_text16110827,4010443
  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));result_text16be110828,4010518
  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));result_text16le110829,4010595
  void  (*result_value)(sqlite3_context*,sqlite3_value*);result_value110830,4010672
  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);rollback_hook110831,4010730
  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,set_authorizer110832,4010788
  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));set_auxdata110834,4010922
  char * (*snprintf)(int,char*,const char*,...);snprintf110835,4010990
  int  (*step)(sqlite3_stmt*);step110836,4011039
  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,table_column_metadata110837,4011070
  void  (*thread_cleanup)(void);thread_cleanup110839,4011223
  int  (*total_changes)(sqlite3*);total_changes110840,4011256
  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);trace110841,4011291
  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);transfer_bindings110842,4011359
  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,update_hook110843,4011417
  void * (*user_data)(sqlite3_context*);user_data110845,4011557
  const void * (*value_blob)(sqlite3_value*);value_blob110846,4011598
  int  (*value_bytes)(sqlite3_value*);value_bytes110847,4011644
  int  (*value_bytes16)(sqlite3_value*);value_bytes16110848,4011683
  double  (*value_double)(sqlite3_value*);value_double110849,4011724
  int  (*value_int)(sqlite3_value*);value_int110850,4011767
  sqlite_int64  (*value_int64)(sqlite3_value*);value_int64110851,4011804
  int  (*value_numeric_type)(sqlite3_value*);value_numeric_type110852,4011852
  const unsigned char * (*value_text)(sqlite3_value*);value_text110853,4011898
  const void * (*value_text16)(sqlite3_value*);value_text16110854,4011953
  const void * (*value_text16be)(sqlite3_value*);value_text16be110855,4012001
  const void * (*value_text16le)(sqlite3_value*);value_text16le110856,4012051
  int  (*value_type)(sqlite3_value*);value_type110857,4012101
  char *(*vmprintf)(const char*,va_list);vmprintf110858,4012139
  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);overload_function110860,4012199
  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);prepare_v2110862,4012294
  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);prepare16_v2110863,4012369
  int (*clear_bindings)(sqlite3_stmt*);clear_bindings110864,4012446
  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,create_module_v2110866,4012509
  int (*bind_zeroblob)(sqlite3_stmt*,int,int);bind_zeroblob110869,4012661
  int (*blob_bytes)(sqlite3_blob*);blob_bytes110870,4012708
  int (*blob_close)(sqlite3_blob*);blob_close110871,4012744
  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,blob_open110872,4012780
  int (*blob_read)(sqlite3_blob*,void*,int,int);blob_read110874,4012899
  int (*blob_write)(sqlite3_blob*,const void*,int,int);blob_write110875,4012948
  int (*create_collation_v2)(sqlite3*,const char*,int,void*,create_collation_v2110876,4013004
  int (*file_control)(sqlite3*,const char*,int,void*);file_control110879,4013187
  sqlite3_int64 (*memory_highwater)(int);memory_highwater110880,4013242
  sqlite3_int64 (*memory_used)(void);memory_used110881,4013284
  sqlite3_mutex *(*mutex_alloc)(int);mutex_alloc110882,4013322
  void (*mutex_enter)(sqlite3_mutex*);mutex_enter110883,4013360
  void (*mutex_free)(sqlite3_mutex*);mutex_free110884,4013399
  void (*mutex_leave)(sqlite3_mutex*);mutex_leave110885,4013437
  int (*mutex_try)(sqlite3_mutex*);mutex_try110886,4013476
  int (*open_v2)(const char*,sqlite3**,int,const char*);open_v2110887,4013512
  int (*release_memory)(int);release_memory110888,4013569
  void (*result_error_nomem)(sqlite3_context*);result_error_nomem110889,4013599
  void (*result_error_toobig)(sqlite3_context*);result_error_toobig110890,4013647
  int (*sleep)(int);sleep110891,4013696
  void (*soft_heap_limit)(int);soft_heap_limit110892,4013717
  sqlite3_vfs *(*vfs_find)(const char*);vfs_find110893,4013749
  int (*vfs_register)(sqlite3_vfs*,int);vfs_register110894,4013790
  int (*vfs_unregister)(sqlite3_vfs*);vfs_unregister110895,4013831
  int (*xthreadsafe)(void);xthreadsafe110896,4013870
  void (*result_zeroblob)(sqlite3_context*,int);result_zeroblob110897,4013898
  void (*result_error_code)(sqlite3_context*,int);result_error_code110898,4013947
  int (*test_control)(int, ...);test_control110899,4013998
  void (*randomness)(int,void*);randomness110900,4014031
  sqlite3 *(*context_db_handle)(sqlite3_context*);context_db_handle110901,4014064
  int (*extended_result_codes)(sqlite3*,int);extended_result_codes110902,4014115
  int (*limit)(sqlite3*,int,int);limit110903,4014161
  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);next_stmt110904,4014195
  const char *(*sql)(sqlite3_stmt*);sql110905,4014249
  int (*status)(int,int*,int*,int);status110906,4014286
  int (*backup_finish)(sqlite3_backup*);backup_finish110907,4014322
  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);backup_init110908,4014363
  int (*backup_pagecount)(sqlite3_backup*);backup_pagecount110909,4014440
  int (*backup_remaining)(sqlite3_backup*);backup_remaining110910,4014484
  int (*backup_step)(sqlite3_backup*,int);backup_step110911,4014528
  const char *(*compileoption_get)(int);compileoption_get110912,4014571
  int (*compileoption_used)(const char*);compileoption_used110913,4014612
  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,create_function_v2110914,4014654
  int (*db_config)(sqlite3*,int,...);db_config110919,4014995
  sqlite3_mutex *(*db_mutex)(sqlite3*);db_mutex110920,4015033
  int (*db_status)(sqlite3*,int,int*,int*,int);db_status110921,4015073
  int (*extended_errcode)(sqlite3*);extended_errcode110922,4015121
  void (*log)(int,const char*,...);log110923,4015158
  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);soft_heap_limit64110924,4015194
  const char *(*sourceid)(void);sourceid110925,4015247
  int (*stmt_status)(sqlite3_stmt*,int,int);stmt_status110926,4015280
  int (*strnicmp)(const char*,const char*,int);strnicmp110927,4015325
  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);unlock_notify110928,4015373
  int (*wal_autocheckpoint)(sqlite3*,int);wal_autocheckpoint110929,4015433
  int (*wal_checkpoint)(sqlite3*,const char*);wal_checkpoint110930,4015476
  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);wal_hook110931,4015523
  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);blob_reopen110932,4015599
  int (*vtab_config)(sqlite3*,int op,...);vtab_config110933,4015650
  int (*vtab_on_conflict)(sqlite3*);vtab_on_conflict110934,4015693
  int (*close_v2)(sqlite3*);close_v2110936,4015763
  const char *(*db_filename)(sqlite3*,const char*);db_filename110937,4015792
  int (*db_readonly)(sqlite3*,const char*);db_readonly110938,4015844
  int (*db_release_memory)(sqlite3*);db_release_memory110939,4015888
  const char *(*errstr)(int);errstr110940,4015926
  int (*stmt_busy)(sqlite3_stmt*);stmt_busy110941,4015956
  int (*stmt_readonly)(sqlite3_stmt*);stmt_readonly110942,4015991
  int (*stricmp)(const char*,const char*);stricmp110943,4016030
  int (*uri_boolean)(const char*,const char*,int);uri_boolean110944,4016073
  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);uri_int64110945,4016124
  const char *(*uri_parameter)(const char*,const char*);uri_parameter110946,4016193
  char *(*vsnprintf)(int,char*,const char*,va_list);vsnprintf110947,4016250
  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);wal_checkpoint_v2110948,4016303
  int (*auto_extension)(void(*)(void));auto_extension110950,4016399
  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,bind_blob64110951,4016439
  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,bind_text64110953,4016544
  int (*cancel_auto_extension)(void(*)(void));cancel_auto_extension110955,4016664
  int (*load_extension)(sqlite3*,const char*,const char*,char**);load_extension110956,4016711
  void *(*malloc64)(sqlite3_uint64);malloc64110957,4016777
  sqlite3_uint64 (*msize)(void*);msize110958,4016814
  void *(*realloc64)(void*,sqlite3_uint64);realloc64110959,4016848
  void (*reset_auto_extension)(void);reset_auto_extension110960,4016892
  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,result_blob64110961,4016930
  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,result_text64110963,4017040
  int (*strglob)(const char*,const char*);strglob110965,4017166
  sqlite3_value *(*value_dup)(const sqlite3_value*);value_dup110967,4017242
  void (*value_free)(sqlite3_value*);value_free110968,4017295
  int (*result_zeroblob64)(sqlite3_context*,sqlite3_uint64);result_zeroblob64110969,4017333
  int (*bind_zeroblob64)(sqlite3_stmt*, int, sqlite3_uint64);bind_zeroblob64110970,4017394
  unsigned int (*value_subtype)(sqlite3_value*);value_subtype110972,4017488
  void (*result_subtype)(sqlite3_context*,unsigned int);result_subtype110973,4017537
  int (*status64)(int,sqlite3_int64*,sqlite3_int64*,int);status64110975,4017627
  int (*strlike)(const char*,const char*,unsigned int);strlike110976,4017685
  int (*db_cacheflush)(sqlite3*);db_cacheflush110977,4017741
  int (*system_errno)(sqlite3*);system_errno110979,4017808
  int (*trace_v2)(sqlite3*,unsigned,int(*)(unsigned,void*,void*,void*),void*);trace_v2110981,4017874
  char *(*expanded_sql)(sqlite3_stmt*);expanded_sql110982,4017953
typedef int (*sqlite3_loadext_entry)(sqlite3_loadext_entry110989,4018122
#define sqlite3_aggregate_context sqlite3_aggregate_context111007,4018931
#define sqlite3_aggregate_count sqlite3_aggregate_count111009,4019032
#define sqlite3_bind_blob sqlite3_bind_blob111011,4019107
#define sqlite3_bind_double sqlite3_bind_double111012,4019169
#define sqlite3_bind_int sqlite3_bind_int111013,4019233
#define sqlite3_bind_int64 sqlite3_bind_int64111014,4019294
#define sqlite3_bind_null sqlite3_bind_null111015,4019357
#define sqlite3_bind_parameter_count sqlite3_bind_parameter_count111016,4019419
#define sqlite3_bind_parameter_index sqlite3_bind_parameter_index111017,4019492
#define sqlite3_bind_parameter_name sqlite3_bind_parameter_name111018,4019565
#define sqlite3_bind_text sqlite3_bind_text111019,4019637
#define sqlite3_bind_text16 sqlite3_bind_text16111020,4019699
#define sqlite3_bind_value sqlite3_bind_value111021,4019763
#define sqlite3_busy_handler sqlite3_busy_handler111022,4019826
#define sqlite3_busy_timeout sqlite3_busy_timeout111023,4019891
#define sqlite3_changes sqlite3_changes111024,4019956
#define sqlite3_close sqlite3_close111025,4020016
#define sqlite3_collation_needed sqlite3_collation_needed111026,4020074
#define sqlite3_collation_needed16 sqlite3_collation_needed16111027,4020143
#define sqlite3_column_blob sqlite3_column_blob111028,4020214
#define sqlite3_column_bytes sqlite3_column_bytes111029,4020278
#define sqlite3_column_bytes16 sqlite3_column_bytes16111030,4020343
#define sqlite3_column_count sqlite3_column_count111031,4020410
#define sqlite3_column_database_name sqlite3_column_database_name111032,4020475
#define sqlite3_column_database_name16 sqlite3_column_database_name16111033,4020548
#define sqlite3_column_decltype sqlite3_column_decltype111034,4020623
#define sqlite3_column_decltype16 sqlite3_column_decltype16111035,4020691
#define sqlite3_column_double sqlite3_column_double111036,4020761
#define sqlite3_column_int sqlite3_column_int111037,4020827
#define sqlite3_column_int64 sqlite3_column_int64111038,4020890
#define sqlite3_column_name sqlite3_column_name111039,4020955
#define sqlite3_column_name16 sqlite3_column_name16111040,4021019
#define sqlite3_column_origin_name sqlite3_column_origin_name111041,4021085
#define sqlite3_column_origin_name16 sqlite3_column_origin_name16111042,4021156
#define sqlite3_column_table_name sqlite3_column_table_name111043,4021229
#define sqlite3_column_table_name16 sqlite3_column_table_name16111044,4021299
#define sqlite3_column_text sqlite3_column_text111045,4021371
#define sqlite3_column_text16 sqlite3_column_text16111046,4021435
#define sqlite3_column_type sqlite3_column_type111047,4021501
#define sqlite3_column_value sqlite3_column_value111048,4021565
#define sqlite3_commit_hook sqlite3_commit_hook111049,4021630
#define sqlite3_complete sqlite3_complete111050,4021694
#define sqlite3_complete16 sqlite3_complete16111051,4021755
#define sqlite3_create_collation sqlite3_create_collation111052,4021818
#define sqlite3_create_collation16 sqlite3_create_collation16111053,4021887
#define sqlite3_create_function sqlite3_create_function111054,4021958
#define sqlite3_create_function16 sqlite3_create_function16111055,4022026
#define sqlite3_create_module sqlite3_create_module111056,4022096
#define sqlite3_create_module_v2 sqlite3_create_module_v2111057,4022162
#define sqlite3_data_count sqlite3_data_count111058,4022231
#define sqlite3_db_handle sqlite3_db_handle111059,4022294
#define sqlite3_declare_vtab sqlite3_declare_vtab111060,4022356
#define sqlite3_enable_shared_cache sqlite3_enable_shared_cache111061,4022421
#define sqlite3_errcode sqlite3_errcode111062,4022493
#define sqlite3_errmsg sqlite3_errmsg111063,4022553
#define sqlite3_errmsg16 sqlite3_errmsg16111064,4022612
#define sqlite3_exec sqlite3_exec111065,4022673
#define sqlite3_expired sqlite3_expired111067,4022761
#define sqlite3_finalize sqlite3_finalize111069,4022828
#define sqlite3_free sqlite3_free111070,4022889
#define sqlite3_free_table sqlite3_free_table111071,4022946
#define sqlite3_get_autocommit sqlite3_get_autocommit111072,4023009
#define sqlite3_get_auxdata sqlite3_get_auxdata111073,4023076
#define sqlite3_get_table sqlite3_get_table111074,4023140
#define sqlite3_global_recover sqlite3_global_recover111076,4023233
#define sqlite3_interrupt sqlite3_interrupt111078,4023307
#define sqlite3_last_insert_rowid sqlite3_last_insert_rowid111079,4023370
#define sqlite3_libversion sqlite3_libversion111080,4023440
#define sqlite3_libversion_number sqlite3_libversion_number111081,4023503
#define sqlite3_malloc sqlite3_malloc111082,4023573
#define sqlite3_mprintf sqlite3_mprintf111083,4023632
#define sqlite3_open sqlite3_open111084,4023692
#define sqlite3_open16 sqlite3_open16111085,4023749
#define sqlite3_prepare sqlite3_prepare111086,4023808
#define sqlite3_prepare16 sqlite3_prepare16111087,4023868
#define sqlite3_prepare_v2 sqlite3_prepare_v2111088,4023930
#define sqlite3_prepare16_v2 sqlite3_prepare16_v2111089,4023993
#define sqlite3_profile sqlite3_profile111090,4024058
#define sqlite3_progress_handler sqlite3_progress_handler111091,4024118
#define sqlite3_realloc sqlite3_realloc111092,4024187
#define sqlite3_reset sqlite3_reset111093,4024247
#define sqlite3_result_blob sqlite3_result_blob111094,4024305
#define sqlite3_result_double sqlite3_result_double111095,4024369
#define sqlite3_result_error sqlite3_result_error111096,4024435
#define sqlite3_result_error16 sqlite3_result_error16111097,4024500
#define sqlite3_result_int sqlite3_result_int111098,4024567
#define sqlite3_result_int64 sqlite3_result_int64111099,4024630
#define sqlite3_result_null sqlite3_result_null111100,4024695
#define sqlite3_result_text sqlite3_result_text111101,4024759
#define sqlite3_result_text16 sqlite3_result_text16111102,4024823
#define sqlite3_result_text16be sqlite3_result_text16be111103,4024889
#define sqlite3_result_text16le sqlite3_result_text16le111104,4024957
#define sqlite3_result_value sqlite3_result_value111105,4025025
#define sqlite3_rollback_hook sqlite3_rollback_hook111106,4025090
#define sqlite3_set_authorizer sqlite3_set_authorizer111107,4025156
#define sqlite3_set_auxdata sqlite3_set_auxdata111108,4025223
#define sqlite3_snprintf sqlite3_snprintf111109,4025287
#define sqlite3_step sqlite3_step111110,4025348
#define sqlite3_table_column_metadata sqlite3_table_column_metadata111111,4025405
#define sqlite3_thread_cleanup sqlite3_thread_cleanup111112,4025479
#define sqlite3_total_changes sqlite3_total_changes111113,4025546
#define sqlite3_trace sqlite3_trace111114,4025612
#define sqlite3_transfer_bindings sqlite3_transfer_bindings111116,4025701
#define sqlite3_update_hook sqlite3_update_hook111118,4025778
#define sqlite3_user_data sqlite3_user_data111119,4025842
#define sqlite3_value_blob sqlite3_value_blob111120,4025904
#define sqlite3_value_bytes sqlite3_value_bytes111121,4025967
#define sqlite3_value_bytes16 sqlite3_value_bytes16111122,4026031
#define sqlite3_value_double sqlite3_value_double111123,4026097
#define sqlite3_value_int sqlite3_value_int111124,4026162
#define sqlite3_value_int64 sqlite3_value_int64111125,4026224
#define sqlite3_value_numeric_type sqlite3_value_numeric_type111126,4026288
#define sqlite3_value_text sqlite3_value_text111127,4026359
#define sqlite3_value_text16 sqlite3_value_text16111128,4026422
#define sqlite3_value_text16be sqlite3_value_text16be111129,4026487
#define sqlite3_value_text16le sqlite3_value_text16le111130,4026554
#define sqlite3_value_type sqlite3_value_type111131,4026621
#define sqlite3_vmprintf sqlite3_vmprintf111132,4026684
#define sqlite3_vsnprintf sqlite3_vsnprintf111133,4026745
#define sqlite3_overload_function sqlite3_overload_function111134,4026807
#define sqlite3_prepare_v2 sqlite3_prepare_v2111135,4026877
#define sqlite3_prepare16_v2 sqlite3_prepare16_v2111136,4026940
#define sqlite3_clear_bindings sqlite3_clear_bindings111137,4027005
#define sqlite3_bind_zeroblob sqlite3_bind_zeroblob111138,4027072
#define sqlite3_blob_bytes sqlite3_blob_bytes111139,4027138
#define sqlite3_blob_close sqlite3_blob_close111140,4027201
#define sqlite3_blob_open sqlite3_blob_open111141,4027264
#define sqlite3_blob_read sqlite3_blob_read111142,4027326
#define sqlite3_blob_write sqlite3_blob_write111143,4027388
#define sqlite3_create_collation_v2 sqlite3_create_collation_v2111144,4027451
#define sqlite3_file_control sqlite3_file_control111145,4027523
#define sqlite3_memory_highwater sqlite3_memory_highwater111146,4027588
#define sqlite3_memory_used sqlite3_memory_used111147,4027657
#define sqlite3_mutex_alloc sqlite3_mutex_alloc111148,4027721
#define sqlite3_mutex_enter sqlite3_mutex_enter111149,4027785
#define sqlite3_mutex_free sqlite3_mutex_free111150,4027849
#define sqlite3_mutex_leave sqlite3_mutex_leave111151,4027912
#define sqlite3_mutex_try sqlite3_mutex_try111152,4027976
#define sqlite3_open_v2 sqlite3_open_v2111153,4028038
#define sqlite3_release_memory sqlite3_release_memory111154,4028098
#define sqlite3_result_error_nomem sqlite3_result_error_nomem111155,4028165
#define sqlite3_result_error_toobig sqlite3_result_error_toobig111156,4028236
#define sqlite3_sleep sqlite3_sleep111157,4028308
#define sqlite3_soft_heap_limit sqlite3_soft_heap_limit111158,4028366
#define sqlite3_vfs_find sqlite3_vfs_find111159,4028434
#define sqlite3_vfs_register sqlite3_vfs_register111160,4028495
#define sqlite3_vfs_unregister sqlite3_vfs_unregister111161,4028560
#define sqlite3_threadsafe sqlite3_threadsafe111162,4028627
#define sqlite3_result_zeroblob sqlite3_result_zeroblob111163,4028691
#define sqlite3_result_error_code sqlite3_result_error_code111164,4028759
#define sqlite3_test_control sqlite3_test_control111165,4028829
#define sqlite3_randomness sqlite3_randomness111166,4028894
#define sqlite3_context_db_handle sqlite3_context_db_handle111167,4028957
#define sqlite3_extended_result_codes sqlite3_extended_result_codes111168,4029027
#define sqlite3_limit sqlite3_limit111169,4029101
#define sqlite3_next_stmt sqlite3_next_stmt111170,4029159
#define sqlite3_sql sqlite3_sql111171,4029221
#define sqlite3_status sqlite3_status111172,4029277
#define sqlite3_backup_finish sqlite3_backup_finish111173,4029336
#define sqlite3_backup_init sqlite3_backup_init111174,4029402
#define sqlite3_backup_pagecount sqlite3_backup_pagecount111175,4029466
#define sqlite3_backup_remaining sqlite3_backup_remaining111176,4029535
#define sqlite3_backup_step sqlite3_backup_step111177,4029604
#define sqlite3_compileoption_get sqlite3_compileoption_get111178,4029668
#define sqlite3_compileoption_used sqlite3_compileoption_used111179,4029738
#define sqlite3_create_function_v2 sqlite3_create_function_v2111180,4029809
#define sqlite3_db_config sqlite3_db_config111181,4029880
#define sqlite3_db_mutex sqlite3_db_mutex111182,4029942
#define sqlite3_db_status sqlite3_db_status111183,4030003
#define sqlite3_extended_errcode sqlite3_extended_errcode111184,4030065
#define sqlite3_log sqlite3_log111185,4030134
#define sqlite3_soft_heap_limit64 sqlite3_soft_heap_limit64111186,4030190
#define sqlite3_sourceid sqlite3_sourceid111187,4030260
#define sqlite3_stmt_status sqlite3_stmt_status111188,4030321
#define sqlite3_strnicmp sqlite3_strnicmp111189,4030385
#define sqlite3_unlock_notify sqlite3_unlock_notify111190,4030446
#define sqlite3_wal_autocheckpoint sqlite3_wal_autocheckpoint111191,4030512
#define sqlite3_wal_checkpoint sqlite3_wal_checkpoint111192,4030583
#define sqlite3_wal_hook sqlite3_wal_hook111193,4030650
#define sqlite3_blob_reopen sqlite3_blob_reopen111194,4030711
#define sqlite3_vtab_config sqlite3_vtab_config111195,4030775
#define sqlite3_vtab_on_conflict sqlite3_vtab_on_conflict111196,4030839
#define sqlite3_close_v2 sqlite3_close_v2111198,4030939
#define sqlite3_db_filename sqlite3_db_filename111199,4031000
#define sqlite3_db_readonly sqlite3_db_readonly111200,4031064
#define sqlite3_db_release_memory sqlite3_db_release_memory111201,4031128
#define sqlite3_errstr sqlite3_errstr111202,4031198
#define sqlite3_stmt_busy sqlite3_stmt_busy111203,4031257
#define sqlite3_stmt_readonly sqlite3_stmt_readonly111204,4031319
#define sqlite3_stricmp sqlite3_stricmp111205,4031385
#define sqlite3_uri_boolean sqlite3_uri_boolean111206,4031445
#define sqlite3_uri_int64 sqlite3_uri_int64111207,4031509
#define sqlite3_uri_parameter sqlite3_uri_parameter111208,4031571
#define sqlite3_uri_vsnprintf sqlite3_uri_vsnprintf111209,4031637
#define sqlite3_wal_checkpoint_v2 sqlite3_wal_checkpoint_v2111210,4031699
#define sqlite3_auto_extension sqlite3_auto_extension111212,4031799
#define sqlite3_bind_blob64 sqlite3_bind_blob64111213,4031866
#define sqlite3_bind_text64 sqlite3_bind_text64111214,4031930
#define sqlite3_cancel_auto_extension sqlite3_cancel_auto_extension111215,4031994
#define sqlite3_load_extension sqlite3_load_extension111216,4032068
#define sqlite3_malloc64 sqlite3_malloc64111217,4032135
#define sqlite3_msize sqlite3_msize111218,4032196
#define sqlite3_realloc64 sqlite3_realloc64111219,4032254
#define sqlite3_reset_auto_extension sqlite3_reset_auto_extension111220,4032316
#define sqlite3_result_blob64 sqlite3_result_blob64111221,4032389
#define sqlite3_result_text64 sqlite3_result_text64111222,4032455
#define sqlite3_strglob sqlite3_strglob111223,4032521
#define sqlite3_value_dup sqlite3_value_dup111225,4032612
#define sqlite3_value_free sqlite3_value_free111226,4032674
#define sqlite3_result_zeroblob64 sqlite3_result_zeroblob64111227,4032737
#define sqlite3_bind_zeroblob64 sqlite3_bind_zeroblob64111228,4032807
#define sqlite3_value_subtype sqlite3_value_subtype111230,4032905
#define sqlite3_result_subtype sqlite3_result_subtype111231,4032971
#define sqlite3_status64 sqlite3_status64111233,4033069
#define sqlite3_strlike sqlite3_strlike111234,4033130
#define sqlite3_db_cacheflush sqlite3_db_cacheflush111235,4033190
#define sqlite3_system_errno sqlite3_system_errno111237,4033287
#define sqlite3_trace_v2 sqlite3_trace_v2111239,4033383
#define sqlite3_expanded_sql sqlite3_expanded_sql111240,4033444
# define SQLITE_EXTENSION_INIT1 SQLITE_EXTENSION_INIT1111246,4033738
# define SQLITE_EXTENSION_INIT2(SQLITE_EXTENSION_INIT2111247,4033817
# define SQLITE_EXTENSION_INIT3 SQLITE_EXTENSION_INIT3111248,4033868
# define SQLITE_EXTENSION_INIT1 SQLITE_EXTENSION_INIT1111253,4034050
# define SQLITE_EXTENSION_INIT2(SQLITE_EXTENSION_INIT2111254,4034096
# define SQLITE_EXTENSION_INIT3 SQLITE_EXTENSION_INIT3111255,4034164
# define sqlite3_column_database_name sqlite3_column_database_name111271,4034661
# define sqlite3_column_database_name16 sqlite3_column_database_name16111272,4034703
# define sqlite3_column_table_name sqlite3_column_table_name111273,4034745
# define sqlite3_column_table_name16 sqlite3_column_table_name16111274,4034787
# define sqlite3_column_origin_name sqlite3_column_origin_name111275,4034829
# define sqlite3_column_origin_name16 sqlite3_column_origin_name16111276,4034871
# define sqlite3_set_authorizer sqlite3_set_authorizer111280,4034954
# define sqlite3_bind_text16 sqlite3_bind_text16111284,4035029
# define sqlite3_collation_needed16 sqlite3_collation_needed16111285,4035071
# define sqlite3_column_decltype16 sqlite3_column_decltype16111286,4035113
# define sqlite3_column_name16 sqlite3_column_name16111287,4035155
# define sqlite3_column_text16 sqlite3_column_text16111288,4035197
# define sqlite3_complete16 sqlite3_complete16111289,4035239
# define sqlite3_create_collation16 sqlite3_create_collation16111290,4035281
# define sqlite3_create_function16 sqlite3_create_function16111291,4035323
# define sqlite3_errmsg16 sqlite3_errmsg16111292,4035365
# define sqlite3_open16 sqlite3_open16111293,4035407
# define sqlite3_prepare16 sqlite3_prepare16111294,4035449
# define sqlite3_prepare16_v2 sqlite3_prepare16_v2111295,4035491
# define sqlite3_result_error16 sqlite3_result_error16111296,4035533
# define sqlite3_result_text16 sqlite3_result_text16111297,4035575
# define sqlite3_result_text16be sqlite3_result_text16be111298,4035617
# define sqlite3_result_text16le sqlite3_result_text16le111299,4035659
# define sqlite3_value_text16 sqlite3_value_text16111300,4035701
# define sqlite3_value_text16be sqlite3_value_text16be111301,4035743
# define sqlite3_value_text16le sqlite3_value_text16le111302,4035785
# define sqlite3_column_database_name16 sqlite3_column_database_name16111303,4035827
# define sqlite3_column_table_name16 sqlite3_column_table_name16111304,4035869
# define sqlite3_column_origin_name16 sqlite3_column_origin_name16111305,4035911
# define sqlite3_complete sqlite3_complete111309,4035989
# define sqlite3_complete16 sqlite3_complete16111310,4036017
# define sqlite3_column_decltype16 sqlite3_column_decltype16111314,4036083
# define sqlite3_column_decltype sqlite3_column_decltype111315,4036125
# define sqlite3_progress_handler sqlite3_progress_handler111319,4036212
# define sqlite3_create_module sqlite3_create_module111323,4036288
# define sqlite3_create_module_v2 sqlite3_create_module_v2111324,4036321
# define sqlite3_declare_vtab sqlite3_declare_vtab111325,4036357
# define sqlite3_vtab_config sqlite3_vtab_config111326,4036389
# define sqlite3_vtab_on_conflict sqlite3_vtab_on_conflict111327,4036420
# define sqlite3_enable_shared_cache sqlite3_enable_shared_cache111331,4036496
# define sqlite3_profile sqlite3_profile111335,4036609
# define sqlite3_trace sqlite3_trace111336,4036642
# define sqlite3_free_table sqlite3_free_table111340,4036712
# define sqlite3_get_table sqlite3_get_table111341,4036745
#define sqlite3_bind_zeroblob sqlite3_bind_zeroblob111345,4036814
#define sqlite3_blob_bytes sqlite3_blob_bytes111346,4036847
#define sqlite3_blob_close sqlite3_blob_close111347,4036880
#define sqlite3_blob_open sqlite3_blob_open111348,4036913
#define sqlite3_blob_read sqlite3_blob_read111349,4036946
#define sqlite3_blob_write sqlite3_blob_write111350,4036979
#define sqlite3_blob_reopen sqlite3_blob_reopen111351,4037012
# define sqlite3_trace_v2 sqlite3_trace_v2111355,4037084
static const sqlite3_api_routines sqlite3Apis = {sqlite3Apis111373,4037753
static int sqlite3LoadExtension(sqlite3LoadExtension111681,4044792
SQLITE_API int sqlite3_load_extension(sqlite3_load_extension111822,4049380
SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){sqlite3CloseExtensions111840,4050010
SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){sqlite3_enable_load_extension111853,4050396
typedef struct sqlite3AutoExtList sqlite3AutoExtList;sqlite3AutoExtList111873,4050962
static SQLITE_WSD struct sqlite3AutoExtList {sqlite3AutoExtList111874,4051016
  u32 nExt;              /* Number of entries in aExt[] */          nExt111875,4051062
  void (**aExt)(void);   /* Pointers to the extension init functions */aExt111876,4051131
} sqlite3Autoext = { 0, 0 };sqlite3Autoext111877,4051203
# define wsdAutoextInit wsdAutoextInit111886,4051594
# define wsdAutoext wsdAutoext111888,4051689
# define wsdAutoextInitwsdAutoextInit111890,4051720
# define wsdAutoext wsdAutoext111891,4051744
SQLITE_API int sqlite3_auto_extension(sqlite3_auto_extension111899,4051902
SQLITE_API int sqlite3_cancel_auto_extension(sqlite3_cancel_auto_extension111946,4053146
SQLITE_API void sqlite3_reset_auto_extension(void){sqlite3_reset_auto_extension111971,4053692
SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){sqlite3AutoLoadExtensions111993,4054214
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE112051,4055884
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE112053,4055934
#define PragTyp_HEADER_VALUE PragTyp_HEADER_VALUE112073,4056818
#define PragTyp_AUTO_VACUUM PragTyp_AUTO_VACUUM112074,4056867
#define PragTyp_FLAG PragTyp_FLAG112075,4056916
#define PragTyp_BUSY_TIMEOUT PragTyp_BUSY_TIMEOUT112076,4056965
#define PragTyp_CACHE_SIZE PragTyp_CACHE_SIZE112077,4057014
#define PragTyp_CACHE_SPILL PragTyp_CACHE_SPILL112078,4057063
#define PragTyp_CASE_SENSITIVE_LIKE PragTyp_CASE_SENSITIVE_LIKE112079,4057112
#define PragTyp_COLLATION_LIST PragTyp_COLLATION_LIST112080,4057161
#define PragTyp_COMPILE_OPTIONS PragTyp_COMPILE_OPTIONS112081,4057210
#define PragTyp_DATA_STORE_DIRECTORY PragTyp_DATA_STORE_DIRECTORY112082,4057259
#define PragTyp_DATABASE_LIST PragTyp_DATABASE_LIST112083,4057308
#define PragTyp_DEFAULT_CACHE_SIZE PragTyp_DEFAULT_CACHE_SIZE112084,4057357
#define PragTyp_ENCODING PragTyp_ENCODING112085,4057406
#define PragTyp_FOREIGN_KEY_CHECK PragTyp_FOREIGN_KEY_CHECK112086,4057455
#define PragTyp_FOREIGN_KEY_LIST PragTyp_FOREIGN_KEY_LIST112087,4057504
#define PragTyp_INCREMENTAL_VACUUM PragTyp_INCREMENTAL_VACUUM112088,4057553
#define PragTyp_INDEX_INFO PragTyp_INDEX_INFO112089,4057602
#define PragTyp_INDEX_LIST PragTyp_INDEX_LIST112090,4057651
#define PragTyp_INTEGRITY_CHECK PragTyp_INTEGRITY_CHECK112091,4057700
#define PragTyp_JOURNAL_MODE PragTyp_JOURNAL_MODE112092,4057749
#define PragTyp_JOURNAL_SIZE_LIMIT PragTyp_JOURNAL_SIZE_LIMIT112093,4057798
#define PragTyp_LOCK_PROXY_FILE PragTyp_LOCK_PROXY_FILE112094,4057847
#define PragTyp_LOCKING_MODE PragTyp_LOCKING_MODE112095,4057896
#define PragTyp_PAGE_COUNT PragTyp_PAGE_COUNT112096,4057945
#define PragTyp_MMAP_SIZE PragTyp_MMAP_SIZE112097,4057994
#define PragTyp_PAGE_SIZE PragTyp_PAGE_SIZE112098,4058043
#define PragTyp_SECURE_DELETE PragTyp_SECURE_DELETE112099,4058092
#define PragTyp_SHRINK_MEMORY PragTyp_SHRINK_MEMORY112100,4058141
#define PragTyp_SOFT_HEAP_LIMIT PragTyp_SOFT_HEAP_LIMIT112101,4058190
#define PragTyp_STATS PragTyp_STATS112102,4058239
#define PragTyp_SYNCHRONOUS PragTyp_SYNCHRONOUS112103,4058288
#define PragTyp_TABLE_INFO PragTyp_TABLE_INFO112104,4058337
#define PragTyp_TEMP_STORE PragTyp_TEMP_STORE112105,4058386
#define PragTyp_TEMP_STORE_DIRECTORY PragTyp_TEMP_STORE_DIRECTORY112106,4058435
#define PragTyp_THREADS PragTyp_THREADS112107,4058484
#define PragTyp_WAL_AUTOCHECKPOINT PragTyp_WAL_AUTOCHECKPOINT112108,4058533
#define PragTyp_WAL_CHECKPOINT PragTyp_WAL_CHECKPOINT112109,4058582
#define PragTyp_ACTIVATE_EXTENSIONS PragTyp_ACTIVATE_EXTENSIONS112110,4058631
#define PragTyp_HEXKEY PragTyp_HEXKEY112111,4058680
#define PragTyp_KEY PragTyp_KEY112112,4058729
#define PragTyp_REKEY PragTyp_REKEY112113,4058778
#define PragTyp_LOCK_STATUS PragTyp_LOCK_STATUS112114,4058827
#define PragTyp_PARSER_TRACE PragTyp_PARSER_TRACE112115,4058876
#define PragFlg_NeedSchema PragFlg_NeedSchema112118,4058979
#define PragFlg_NoColumns PragFlg_NoColumns112119,4059050
#define PragFlg_NoColumns1 PragFlg_NoColumns1112120,4059126
#define PragFlg_ReadOnly PragFlg_ReadOnly112121,4059204
#define PragFlg_Result0 PragFlg_Result0112122,4059265
#define PragFlg_Result1 PragFlg_Result1112123,4059334
#define PragFlg_SchemaOpt PragFlg_SchemaOpt112124,4059408
#define PragFlg_SchemaReq PragFlg_SchemaReq112125,4059486
static const char *const pragCName[] = {pragCName112131,4059748
typedef struct PragmaName {PragmaName112183,4061501
  const char *const zName; /* Name of pragma */zName112184,4061529
  u8 ePragTyp;             /* PragTyp_XXX value */ePragTyp112185,4061577
  u8 mPragFlg;             /* Zero or more PragFlg_XXX values */mPragFlg112186,4061628
  u8 iPragCName;           /* Start of column names in pragCName[] */iPragCName112187,4061693
  u8 nPragCName;           /* Num of col names. 0 means use pragma name */nPragCName112188,4061763
  u32 iArg;                /* Extra argument */iArg112189,4061838
} PragmaName;PragmaName112190,4061886
static const PragmaName aPragmaName[] = {aPragmaName112191,4061900
static u8 getSafetyLevel(const char *z, int omitFull, u8 dflt){getSafetyLevel112688,4078969
SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z, u8 dflt){sqlite3GetBoolean112713,4079780
static int getLockingMode(const char *z){getLockingMode112726,4080181
static int getAutoVacuum(const char *z){getAutoVacuum112741,4080667
static int getTempStore(const char *z){getTempStore112757,4081254
static int invalidateTempStorage(Parse *pParse){invalidateTempStorage112775,4081712
static int changeTempStorage(Parse *pParse, const char *zStorageType){changeTempStorage112797,4082418
static void setPragmaResultColumnNames(setPragmaResultColumnNames112812,4082815
static void returnSingleInt(Vdbe *v, i64 value){returnSingleInt112831,4083359
static void returnSingleText(returnSingleText112839,4083585
static void setAllPagerFlags(sqlite3 *db){setAllPagerFlags112855,4084009
# define setAllPagerFlags(setAllPagerFlags112875,4084666
static const char *actionName(u8 action){actionName112883,4084823
SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){sqlite3JournalModename112903,4085430
static const PragmaName *pragmaLocate(const char *zName){pragmaLocate112925,4086062
SQLITE_PRIVATE void sqlite3Pragma(sqlite3Pragma112957,4086920
# define SQLITE_INTEGRITY_CHECK_ERROR_MAX SQLITE_INTEGRITY_CHECK_ERROR_MAX114020,4122403
typedef struct PragmaVtab PragmaVtab;PragmaVtab114620,4144465
typedef struct PragmaVtabCursor PragmaVtabCursor;PragmaVtabCursor114621,4144503
struct PragmaVtab {PragmaVtab114622,4144553
  sqlite3_vtab base;        /* Base class.  Must be first */base114623,4144573
  sqlite3 *db;              /* The database connection to which it belongs */db114624,4144634
  const PragmaName *pName;  /* Name of the pragma */pName114625,4144712
  u8 nHidden;               /* Number of hidden columns */nHidden114626,4144765
  u8 iHidden;               /* Index of the first hidden column */iHidden114627,4144824
struct PragmaVtabCursor {PragmaVtabCursor114629,4144894
  sqlite3_vtab_cursor base; /* Base class.  Must be first */base114630,4144920
  sqlite3_stmt *pPragma;    /* The pragma statement to run */pPragma114631,4144981
  sqlite_int64 iRowid;      /* Current rowid */iRowid114632,4145043
  char *azArg[2];           /* Value of the argument and schema */azArg114633,4145091
static int pragmaVtabConnect(pragmaVtabConnect114639,4145217
static int pragmaVtabDisconnect(sqlite3_vtab *pVtab){pragmaVtabDisconnect114702,4146779
static int pragmaVtabBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){pragmaVtabBestIndex114715,4147265
static int pragmaVtabOpen(sqlite3_vtab *pVtab, sqlite3_vtab_cursor **ppCursor){pragmaVtabOpen114752,4148469
static void pragmaVtabCursorClear(PragmaVtabCursor *pCsr){pragmaVtabCursorClear114763,4148852
static int pragmaVtabClose(sqlite3_vtab_cursor *cur){pragmaVtabClose114774,4149126
static int pragmaVtabNext(sqlite3_vtab_cursor *pVtabCursor){pragmaVtabNext114782,4149369
static int pragmaVtabFilter(pragmaVtabFilter114800,4149813
static int pragmaVtabEof(sqlite3_vtab_cursor *pVtabCursor){pragmaVtabEof114846,4151177
static int pragmaVtabColumn(pragmaVtabColumn114854,4151415
static int pragmaVtabRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *p){pragmaVtabRowid114872,4151897
static const sqlite3_module pragmaVtabModule = {pragmaVtabModule114879,4152117
SQLITE_PRIVATE Module *sqlite3PragmaVtabRegister(sqlite3 *db, const char *zName){sqlite3PragmaVtabRegister114910,4153788
static void corruptSchema(corruptSchema114947,4155118
SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){sqlite3InitCallback114976,4156183
static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){sqlite3InitOne115060,4159306
SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){sqlite3Init115280,4166603
SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){sqlite3ReadSchema115324,4167851
static void schemaIsValid(Parse *pParse){schemaIsValid115344,4168325
SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){sqlite3SchemaToIndex115393,4169983
SQLITE_PRIVATE void sqlite3ParserReset(Parse *pParse){sqlite3ParserReset115421,4170888
static int sqlite3Prepare(sqlite3Prepare115437,4171345
static int sqlite3LockAndPrepare(sqlite3LockAndPrepare115588,4176347
SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){sqlite3Reprepare115627,4177740
SQLITE_API int sqlite3_prepare(sqlite3_prepare115664,4178866
SQLITE_API int sqlite3_prepare_v2(sqlite3_prepare_v2115676,4179374
static int sqlite3Prepare16(sqlite3Prepare16115694,4179993
SQLITE_API int sqlite3_prepare16(sqlite3_prepare16115752,4182146
SQLITE_API int sqlite3_prepare16_v2(sqlite3_prepare16_v2115764,4182651
/***/ int sqlite3SelectTrace = 0;sqlite3SelectTrace115801,4183923
# define SELECTTRACE(SELECTTRACE115802,4183957
# define SELECTTRACE(SELECTTRACE115808,4184147
typedef struct DistinctCtx DistinctCtx;DistinctCtx115817,4184383
struct DistinctCtx {DistinctCtx115818,4184423
  u8 isTnct;      /* True if the DISTINCT keyword is present */isTnct115819,4184444
  u8 eTnctType;   /* One of the WHERE_DISTINCT_* operators */eTnctType115820,4184508
  int tabTnct;    /* Ephemeral table used for DISTINCT processing */tabTnct115821,4184570
  int addrTnct;   /* Address of OP_OpenEphemeral opcode for tabTnct */addrTnct115822,4184639
typedef struct SortCtx SortCtx;SortCtx115829,4184857
struct SortCtx {SortCtx115830,4184889
  ExprList *pOrderBy;   /* The ORDER BY (or GROUP BY clause) */pOrderBy115831,4184906
  int nOBSat;           /* Number of ORDER BY terms satisfied by indices */nOBSat115832,4184970
  int iECursor;         /* Cursor number for the sorter */iECursor115833,4185046
  int regReturn;        /* Register holding block-output return address */regReturn115834,4185105
  int labelBkOut;       /* Start label for the block-output subroutine */labelBkOut115835,4185180
  int addrSortIndex;    /* Address of the OP_SorterOpen or OP_OpenEphemeral */addrSortIndex115836,4185254
  int labelDone;        /* Jump here when done, ex: LIMIT reached */labelDone115837,4185333
  u8 sortFlags;         /* Zero or more SORTFLAG_* bits */sortFlags115838,4185402
  u8 bOrderedInnerLoop; /* ORDER BY correctly sorts the inner loop */bOrderedInnerLoop115839,4185461
#define SORTFLAG_UseSorter SORTFLAG_UseSorter115841,4185534
static void clearSelect(sqlite3 *db, Select *p, int bFree){clearSelect115847,4185730
SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){sqlite3SelectDestInit115868,4186331
SQLITE_PRIVATE Select *sqlite3SelectNew(sqlite3SelectNew115881,4186620
SQLITE_PRIVATE void sqlite3SelectSetName(Select *p, const char *zName){sqlite3SelectSetName115941,4188425
SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){sqlite3SelectDelete115952,4188674
static Select *findRightmost(Select *p){findRightmost115959,4188851
SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){sqlite3JoinType115981,4189426
static int columnIndex(Table *pTab, const char *zCol){columnIndex116042,4191450
static int tableAndColumnIndex(tableAndColumnIndex116059,4191902
static void addWhereTerm(addWhereTerm116094,4193058
static void setJoinExpr(Expr *p, int iTable){setJoinExpr116153,4195501
static int sqliteProcessJoin(Parse *pParse, Select *p){sqliteProcessJoin116184,4196640
static void pushOntoSorter(pushOntoSorter116284,4200302
static void codeOffset(codeOffset116405,4205733
static void codeDistinct(codeDistinct116425,4206451
static void selectInnerLoop(selectInnerLoop116453,4207484
SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoAlloc(sqlite3 *db, int N, int X){sqlite3KeyInfoAlloc116814,4221292
SQLITE_PRIVATE void sqlite3KeyInfoUnref(KeyInfo *p){sqlite3KeyInfoUnref116834,4221750
SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoRef(KeyInfo *p){sqlite3KeyInfoRef116845,4221955
SQLITE_PRIVATE int sqlite3KeyInfoIsWriteable(KeyInfo *p){ return p->nRef==1; }sqlite3KeyInfoIsWriteable116860,4222312
static KeyInfo *keyInfoFromExprList(keyInfoFromExprList116877,4223059
static const char *selectOpName(int id){selectOpName116907,4223964
static void explainTempTable(Parse *pParse, const char *zUsage){explainTempTable116929,4224623
# define explainSetInteger(explainSetInteger116944,4225247
# define explainTempTable(explainTempTable116948,4225356
# define explainSetInteger(explainSetInteger116949,4225387
static void explainComposite(explainComposite116967,4226170
# define explainComposite(explainComposite116986,4226969
static void generateSortTail(generateSortTail116995,4227283
# define columnType(columnType117147,4232738
# define columnType(columnType117149,4232854
static const char *columnTypeImpl(columnTypeImpl117151,4232916
static void generateColumnTypes(generateColumnTypes117302,4237969
static void generateColumnNames(generateColumnNames117342,4239340
SQLITE_PRIVATE int sqlite3ColumnsFromExprList(sqlite3ColumnsFromExprList117421,4241986
SQLITE_PRIVATE void sqlite3SelectAddColumnTypeAndCollation(sqlite3SelectAddColumnTypeAndCollation117522,4245578
SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){sqlite3ResultSetOfSelect117571,4247137
static SQLITE_NOINLINE Vdbe *allocVdbe(Parse *pParse){allocVdbe117607,4248263
SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){sqlite3GetVdbe117617,4248561
static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){computeLimitRegisters117646,4249803
static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){multiSelectCollSeq117701,4251740
static KeyInfo *multiSelectOrderByKeyInfo(Parse *pParse, Select *p, int nExtra){multiSelectOrderByKeyInfo117727,4252624
static void generateWithRecursiveQuery(generateWithRecursiveQuery117793,4255466
static int multiSelectValues(multiSelectValues117943,4261024
static int multiSelect(multiSelect118006,4262999
SQLITE_PRIVATE void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p){sqlite3SelectWrongNumTermsError118367,4275537
static int generateOutputSubroutine(generateOutputSubroutine118396,4276578
static int multiSelectOrderBy(multiSelectOrderBy118605,4284420
static Expr *substExpr(substExpr118934,4296903
static void substExprList(substExprList118973,4298236
static void substSelect(substSelect118985,4298640
static int flattenSubquery(flattenSubquery119154,4306053
static int pushDownWhereTerms(pushDownWhereTerms119605,4322687
static u8 minMaxQuery(AggInfo *pAggInfo, ExprList **ppMinMax){minMaxQuery119659,4324748
static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){isSimpleCount119695,4325975
SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){sqlite3IndexedByLookup119726,4326893
static int convertCompoundSelectToSubquery(Walker *pWalker, Select *p){convertCompoundSelectToSubquery119765,4328302
static int cannotBeFunction(Parse *pParse, struct SrcList_item *pFrom){cannotBeFunction119820,4329926
static struct Cte *searchWith(searchWith119839,4330583
SQLITE_PRIVATE void sqlite3WithPush(Parse *pParse, With *pWith, u8 bFree){sqlite3WithPush119870,4331677
static int withExpand(withExpand119895,4332663
static void selectPopWith(Walker *pWalker, Select *p){selectPopWith120019,4336741
#define selectPopWith selectPopWith120030,4337026
static int selectExpander(Walker *pWalker, Select *p){selectExpander120057,4338163
SQLITE_PRIVATE int sqlite3ExprWalkNoop(Walker *NotUsed, Expr *NotUsed2){sqlite3ExprWalkNoop120336,4348251
static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){sqlite3SelectExpand120354,4348959
static void selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){selectAddSubqueryTypeInfo120383,4349920
static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){sqlite3SelectAddTypeInfo120417,4350855
SQLITE_PRIVATE void sqlite3SelectPrep(sqlite3SelectPrep120441,4351665
static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){resetAccumulator120466,4352492
static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){finalizeAggFunctions120507,4353958
static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){updateAccumulator120523,4354486
static void explainSimpleCount(explainSimpleCount120606,4357363
# define explainSimpleCount(explainSimpleCount120624,4357987
SQLITE_PRIVATE int sqlite3Select(sqlite3Select120640,4358488
typedef struct TabResult {TabResult121539,4394475
  char **azResult;   /* Accumulated output */azResult121540,4394502
  char *zErrMsg;     /* Error message text, if an error occurs */zErrMsg121541,4394548
  u32 nAlloc;        /* Slots allocated for azResult[] */nAlloc121542,4394614
  u32 nRow;          /* Number of rows in the result */nRow121543,4394672
  u32 nColumn;       /* Number of columns in the result */nColumn121544,4394728
  u32 nData;         /* Slots used in azResult[].  (nRow+1)*nColumn */nData121545,4394787
  int rc;            /* Return code from sqlite3_exec() */rc121546,4394858
} TabResult;TabResult121547,4394917
static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){sqlite3_get_table_cb121554,4395106
SQLITE_API int sqlite3_get_table(sqlite3_get_table121628,4397286
SQLITE_API void sqlite3_free_table(sqlite3_free_table121697,4399400
SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){sqlite3DeleteTriggerStep121732,4400458
SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){sqlite3TriggerList121760,4401519
SQLITE_PRIVATE void sqlite3BeginTrigger(sqlite3BeginTrigger121793,4402663
SQLITE_PRIVATE void sqlite3FinishTrigger(sqlite3FinishTrigger121981,4409603
SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){sqlite3TriggerSelectStep122061,4412372
static TriggerStep *triggerStepAllocate(triggerStepAllocate122079,4412967
SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep(sqlite3TriggerInsertStep122104,4413681
SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep(sqlite3TriggerUpdateStep122133,4414721
SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep(sqlite3TriggerDeleteStep122158,4415712
SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){sqlite3DeleteTrigger122177,4416279
SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){sqlite3DropTrigger122195,4416958
static Table *tableOfTrigger(Trigger *pTrigger){tableOfTrigger122237,4418163
SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){sqlite3DropTriggerPtr122245,4418349
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){sqlite3UnlinkAndDeleteTrigger122285,4419574
static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){checkColumnOverlap122313,4420594
SQLITE_PRIVATE Trigger *sqlite3TriggersExist(sqlite3TriggersExist122328,4421119
static SrcList *targetSrcList(targetSrcList122364,4422310
static int codeTriggerProgram(codeTriggerProgram122391,4423115
static const char *onErrorText(int onError){onErrorText122468,4425626
static void transferParseError(Parse *pTo, Parse *pFrom){transferParseError122486,4426133
static TriggerPrg *codeRowTrigger(codeRowTrigger122502,4426590
static TriggerPrg *getRowTrigger(getRowTrigger122615,4430894
SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect(sqlite3CodeRowTriggerDirect122649,4432105
SQLITE_PRIVATE void sqlite3CodeRowTrigger(sqlite3CodeRowTrigger122721,4435559
SQLITE_PRIVATE u32 sqlite3TriggerColmask(sqlite3TriggerColmask122783,4438428
SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){sqlite3ColumnDefault122876,4442250
SQLITE_PRIVATE void sqlite3Update(sqlite3Update122904,4443146
# undef isViewisView122990,4447410
# define isView isView122991,4447425
 #undef isViewisView123552,4467230
 #undef pTriggerpTrigger123555,4467268
static void updateVirtualTable(updateVirtualTable123580,4468150
static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){execSql123717,4473483
static int execSqlF(sqlite3 *db, char **pzErrMsg, const char *zSql, ...){execSqlF123741,4474221
SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse, Token *pNm){sqlite3Vacuum123784,4476081
SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb){sqlite3RunVacuum123797,4476438
struct VtabCtx {VtabCtx124063,4486883
  VTable *pVTable;    /* The virtual table being constructed */pVTable124064,4486900
  Table *pTab;        /* The Table object to which the virtual table belongs */pTab124065,4486964
  VtabCtx *pPrior;    /* Parent context (if any) */pPrior124066,4487044
  int bDeclared;      /* True after sqlite3_declare_vtab() is called */bDeclared124067,4487096
SQLITE_PRIVATE Module *sqlite3VtabCreateModule(sqlite3VtabCreateModule124075,4487383
static int createModule(createModule124110,4488561
SQLITE_API int sqlite3_create_module(sqlite3_create_module124135,4489372
SQLITE_API int sqlite3_create_module_v2(sqlite3_create_module_v2124150,4489947
SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){sqlite3VtabLock124171,4490846
SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){sqlite3GetVTable124181,4491138
SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){sqlite3VtabUnlock124192,4491490
static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){vtabDisconnectAll124216,4492196
SQLITE_PRIVATE void sqlite3VtabDisconnect(sqlite3 *db, Table *p){sqlite3VtabDisconnect124256,4493522
SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){sqlite3VtabUnlockList124294,4494900
SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){sqlite3VtabClear124325,4495944
static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){addModuleArgument124342,4496430
SQLITE_PRIVATE void sqlite3VtabBeginParse(sqlite3VtabBeginParse124361,4497054
static void addArgumentToVtab(Parse *pParse){addArgumentToVtab124411,4499008
SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){sqlite3VtabFinishParse124424,4499398
SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){sqlite3VtabArgInit124508,4502352
SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){sqlite3VtabArgExtend124518,4502633
static int vtabCallConstructor(vtabCallConstructor124534,4503051
SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){sqlite3VtabCallConnect124663,4506947
static int growVTrans(sqlite3 *db){growVTrans124697,4507879
static void addToVTrans(sqlite3 *db, VTable *pVTab){addToVTrans124719,4508507
SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){sqlite3VtabCallCreate124733,4509011
SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){sqlite3_declare_vtab124774,4510385
SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){sqlite3VtabCallDestroy124859,4512708
static void callFinaliser(sqlite3 *db, int offset){callFinaliser124897,4513901
SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, Vdbe *p){sqlite3VtabSync124925,4514685
SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){sqlite3VtabRollback124947,4515238
SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){sqlite3VtabCommit124956,4515491
SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){sqlite3VtabBegin124969,4515920
SQLITE_PRIVATE int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){sqlite3VtabSavepoint125029,4517878
SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction(sqlite3VtabOverloadFunction125075,4519399
SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){sqlite3VtabMakeWritable125141,4521524
SQLITE_PRIVATE int sqlite3VtabEponymousTableInit(Parse *pParse, Module *pMod){sqlite3VtabEponymousTableInit125174,4522792
SQLITE_PRIVATE void sqlite3VtabEponymousTableClear(sqlite3 *db, Module *pMod){sqlite3VtabEponymousTableClear125212,4523962
SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *db){sqlite3_vtab_on_conflict125231,4524577
SQLITE_API int sqlite3_vtab_config(sqlite3 *db, int op, ...){sqlite3_vtab_config125249,4525243
/***/ int sqlite3WhereTrace;sqlite3WhereTrace125327,4527783
# define WHERETRACE(WHERETRACE125331,4527914
# define WHERETRACE_ENABLED WHERETRACE_ENABLED125332,4527987
# define WHERETRACE(WHERETRACE125334,4528023
typedef struct WhereClause WhereClause;WhereClause125339,4528081
typedef struct WhereMaskSet WhereMaskSet;WhereMaskSet125340,4528121
typedef struct WhereOrInfo WhereOrInfo;WhereOrInfo125341,4528163
typedef struct WhereAndInfo WhereAndInfo;WhereAndInfo125342,4528203
typedef struct WhereLevel WhereLevel;WhereLevel125343,4528245
typedef struct WhereLoop WhereLoop;WhereLoop125344,4528283
typedef struct WherePath WherePath;WherePath125345,4528319
typedef struct WhereTerm WhereTerm;WhereTerm125346,4528355
typedef struct WhereLoopBuilder WhereLoopBuilder;WhereLoopBuilder125347,4528391
typedef struct WhereScan WhereScan;WhereScan125348,4528441
typedef struct WhereOrCost WhereOrCost;WhereOrCost125349,4528477
typedef struct WhereOrSet WhereOrSet;WhereOrSet125350,4528517
struct WhereLevel {WhereLevel125367,4529228
  int iLeftJoin;        /* Memory cell used to implement LEFT OUTER JOIN */iLeftJoin125368,4529248
  int iTabCur;          /* The VDBE cursor used to access the table */iTabCur125369,4529324
  int iIdxCur;          /* The VDBE cursor used to access pIdx */iIdxCur125370,4529395
  int addrBrk;          /* Jump here to break out of the loop */addrBrk125371,4529461
  int addrNxt;          /* Jump here to start the next IN combination */addrNxt125372,4529526
  int addrSkip;         /* Jump here for next iteration of skip-scan */addrSkip125373,4529599
  int addrCont;         /* Jump here to continue with the next loop cycle */addrCont125374,4529671
  int addrFirst;        /* First instruction of interior of the loop */addrFirst125375,4529748
  int addrBody;         /* Beginning of the body of this loop */addrBody125376,4529820
  u32 iLikeRepCntr;     /* LIKE range processing counter register (times 2) */iLikeRepCntr125378,4529924
  int addrLikeRep;      /* LIKE range processing address */addrLikeRep125379,4530003
  u8 iFrom;             /* Which entry in the FROM clause */iFrom125381,4530070
  u8 op, p3, p5;        /* Opcode, P3 & P5 of the opcode that ends the loop */op125382,4530131
  u8 op, p3, p5;        /* Opcode, P3 & P5 of the opcode that ends the loop */p3125382,4530131
  u8 op, p3, p5;        /* Opcode, P3 & P5 of the opcode that ends the loop */p5125382,4530131
  int p1, p2;           /* Operands of the opcode used to ends the loop */p1125383,4530210
  int p1, p2;           /* Operands of the opcode used to ends the loop */p2125383,4530210
      int nIn;              /* Number of entries in aInLoop[] */nIn125386,4530372
      struct InLoop {InLoop125387,4530437
        int iCur;              /* The VDBE cursor used by this IN operator */iCur125388,4530459
        int addrInTop;         /* Top of the IN loop */addrInTop125389,4530537
        u8 eEndLoopOp;         /* IN Loop terminator. OP_Next or OP_Prev */eEndLoopOp125390,4530593
      } *aInLoop;           /* Information about each nested IN operator */aInLoop125391,4530669
    } in;                 /* Used when pWLoop->wsFlags&WHERE_IN_ABLE */in125392,4530745
    Index *pCovidx;       /* Possible covering index for WHERE_MULTI_OR */pCovidx125393,4530817
  } u;u125394,4530892
  struct WhereLoop *pWLoop;  /* The selected WhereLoop object */pWLoop125395,4530899
  Bitmask notReady;          /* FROM entries not usable at this level */notReady125396,4530964
  int addrVisit;        /* Address at which row is visited */addrVisit125398,4531074
struct WhereLoop {WhereLoop125416,4531913
  Bitmask prereq;       /* Bitmask of other loops that must run first */prereq125417,4531932
  Bitmask maskSelf;     /* Bitmask identifying table iTab */maskSelf125418,4532005
  char cId;             /* Symbolic ID of this loop for debugging use */cId125420,4532086
  u8 iTab;              /* Position in FROM clause of table for this loop */iTab125422,4532166
  u8 iSortIdx;          /* Sorting index number.  0==None */iSortIdx125423,4532243
  LogEst rSetup;        /* One-time setup cost (ex: create transient index) */rSetup125424,4532304
  LogEst rRun;          /* Cost of running each loop */rRun125425,4532383
  LogEst nOut;          /* Estimated number of output rows */nOut125426,4532439
      u16 nEq;               /* Number of equality constraints */nEq125429,4532582
      u16 nBtm;              /* Size of BTM vector */nBtm125430,4532648
      u16 nTop;              /* Size of TOP vector */nTop125431,4532702
      Index *pIndex;         /* Index used, or NULL */pIndex125432,4532756
    } btree;btree125433,4532811
      int idxNum;            /* Index number */idxNum125435,4532888
      u8 needFree;           /* True if sqlite3_free(idxStr) is needed */needFree125436,4532936
      i8 isOrdered;          /* True if satisfies ORDER BY */isOrdered125437,4533010
      u16 omitMask;          /* Terms that may be omitted */omitMask125438,4533072
      char *idxStr;          /* Index identifier string */idxStr125439,4533133
    } vtab;vtab125440,4533192
  } u;u125441,4533204
  u32 wsFlags;          /* WHERE_* flags describing the plan */wsFlags125442,4533211
  u16 nLTerm;           /* Number of entries in aLTerm[] */nLTerm125443,4533275
  u16 nSkip;            /* Number of NULL aLTerm[] entries */nSkip125444,4533335
# define WHERE_LOOP_XFER_SZ WHERE_LOOP_XFER_SZ125446,4533466
  u16 nLSlot;           /* Number of slots allocated for aLTerm[] */nLSlot125447,4533521
  WhereTerm **aLTerm;   /* WhereTerms used */aLTerm125448,4533590
  WhereLoop *pNextLoop; /* Next WhereLoop object in the WhereClause */pNextLoop125449,4533636
  WhereTerm *aLTermSpace[3];  /* Initial aLTerm[] space */aLTermSpace125450,4533707
struct WhereOrCost {WhereOrCost125457,4533950
  Bitmask prereq;     /* Prerequisites */prereq125458,4533971
  LogEst rRun;        /* Cost of running this subquery */rRun125459,4534013
  LogEst nOut;        /* Number of outputs for this subquery */nOut125460,4534071
#define N_OR_COST N_OR_COST125467,4534318
struct WhereOrSet {WhereOrSet125468,4534338
  u16 n;                      /* Number of valid a[] entries */n125469,4534358
  WhereOrCost a[N_OR_COST];   /* Set of best costs */a125470,4534422
struct WherePath {WherePath125491,4535410
  Bitmask maskLoop;     /* Bitmask of all WhereLoop objects in this path */maskLoop125492,4535429
  Bitmask revLoop;      /* aLoop[]s that should be reversed for ORDER BY */revLoop125493,4535505
  LogEst nRow;          /* Estimated number of rows generated by this path */nRow125494,4535581
  LogEst rCost;         /* Total cost of this path */rCost125495,4535659
  LogEst rUnsorted;     /* Total cost of this path ignoring sorting costs */rUnsorted125496,4535713
  i8 isOrdered;         /* No. of ORDER BY terms satisfied. -1 for unknown */isOrdered125497,4535790
  WhereLoop **aLoop;    /* Array of WhereLoop objects implementing this path */aLoop125498,4535868
struct WhereTerm {WhereTerm125552,4538458
  Expr *pExpr;            /* Pointer to the subexpression that is this term */pExpr125553,4538477
  WhereClause *pWC;       /* The clause this term is part of */pWC125554,4538556
  LogEst truthProb;       /* Probability of truth for this expression */truthProb125555,4538620
  u16 wtFlags;            /* TERM_xxx bit flags.  See below */wtFlags125556,4538693
  u16 eOperator;          /* A WO_xx value describing <op> */eOperator125557,4538756
  u8 nChild;              /* Number of children that must disable us */nChild125558,4538818
  u8 eMatchOp;            /* Op for vtab MATCH/LIKE/GLOB/REGEXP terms */eMatchOp125559,4538890
  int iParent;            /* Disable pWC->a[iParent] when this term disabled */iParent125560,4538963
  int leftCursor;         /* Cursor number of X in "X <op> <expr>" */leftCursor125561,4539043
  int iField;             /* Field in (?,?,?) IN (SELECT...) vector */iField125562,4539113
    int leftColumn;         /* Column number of X in "X <op> <expr>" */leftColumn125564,4539194
    WhereOrInfo *pOrInfo;   /* Extra information if (eOperator & WO_OR)!=0 */pOrInfo125565,4539266
    WhereAndInfo *pAndInfo; /* Extra information if (eOperator& WO_AND)!=0 */pAndInfo125566,4539344
  } u;u125567,4539422
  Bitmask prereqRight;    /* Bitmask of tables used by pExpr->pRight */prereqRight125568,4539429
  Bitmask prereqAll;      /* Bitmask of tables referenced by pExpr */prereqAll125569,4539501
#define TERM_DYNAMIC TERM_DYNAMIC125575,4539620
#define TERM_VIRTUAL TERM_VIRTUAL125576,4539699
#define TERM_CODED TERM_CODED125577,4539773
#define TERM_COPIED TERM_COPIED125578,4539837
#define TERM_ORINFO TERM_ORINFO125579,4539886
#define TERM_ANDINFO TERM_ANDINFO125580,4539967
#define TERM_OR_OK TERM_OR_OK125581,4540046
#  define TERM_VNULL TERM_VNULL125583,4540152
#  define TERM_VNULL TERM_VNULL125585,4540231
#define TERM_LIKEOPT TERM_LIKEOPT125587,4540303
#define TERM_LIKECOND TERM_LIKECOND125588,4540381
#define TERM_LIKE TERM_LIKE125589,4540456
#define TERM_IS TERM_IS125590,4540520
struct WhereScan {WhereScan125596,4540735
  WhereClause *pOrigWC;      /* Original, innermost WhereClause */pOrigWC125597,4540754
  WhereClause *pWC;          /* WhereClause currently being scanned */pWC125598,4540821
  const char *zCollName;     /* Required collating sequence, if not NULL */zCollName125599,4540892
  Expr *pIdxExpr;            /* Search for this index expression */pIdxExpr125600,4540968
  char idxaff;               /* Must match this affinity, if zCollName!=NULL */idxaff125601,4541036
  unsigned char nEquiv;      /* Number of entries in aEquiv[] */nEquiv125602,4541116
  unsigned char iEquiv;      /* Next unused slot in aEquiv[] */iEquiv125603,4541181
  u32 opMask;                /* Acceptable operators */opMask125604,4541245
  int k;                     /* Resume scanning at this->pWC->a[this->k] */k125605,4541301
  int aiCur[11];             /* Cursors in the equivalence class */aiCur125606,4541377
  i16 aiColumn[11];          /* Corresponding column number in the eq-class */aiColumn125607,4541445
struct WhereClause {WhereClause125622,4542008
  WhereInfo *pWInfo;       /* WHERE clause processing context */pWInfo125623,4542029
  WhereClause *pOuter;     /* Outer conjunction */pOuter125624,4542094
  u8 op;                   /* Split operator.  TK_AND or TK_OR */op125625,4542145
  int nTerm;               /* Number of terms */nTerm125626,4542211
  int nSlot;               /* Number of entries in a[] */nSlot125627,4542260
  WhereTerm *a;            /* Each a[] describes a term of the WHERE cluase */a125628,4542318
  WhereTerm aStatic[1];    /* Initial static space for a[] */aStatic125630,4542429
  WhereTerm aStatic[8];    /* Initial static space for a[] */aStatic125632,4542497
struct WhereOrInfo {WhereOrInfo125640,4542710
  WhereClause wc;          /* Decomposition into subterms */wc125641,4542731
  Bitmask indexable;       /* Bitmask of all indexable tables in the clause */indexable125642,4542792
struct WhereAndInfo {WhereAndInfo125649,4543017
  WhereClause wc;          /* The subexpression broken out */wc125650,4543039
struct WhereMaskSet {WhereMaskSet125679,4544370
  int n;                        /* Number of assigned cursor values */n125680,4544392
  int ix[BMS];                  /* Cursor assigned to each bit */ix125681,4544463
#define initMaskSet(initMaskSet125687,4544575
struct WhereLoopBuilder {WhereLoopBuilder125693,4544744
  WhereInfo *pWInfo;        /* Information about this WHERE */pWInfo125694,4544770
  WhereClause *pWC;         /* WHERE clause terms */pWC125695,4544833
  ExprList *pOrderBy;       /* ORDER BY clause */pOrderBy125696,4544886
  WhereLoop *pNew;          /* Template WhereLoop */pNew125697,4544936
  WhereOrSet *pOrSet;       /* Record best loops here, if not NULL */pOrSet125698,4544989
  UnpackedRecord *pRec;     /* Probe for stat4 (if required) */pRec125700,4545095
  int nRecValid;            /* Number of valid fields currently in pRec */nRecValid125701,4545159
struct WhereInfo {WhereInfo125715,4545621
  Parse *pParse;            /* Parsing and code generating context */pParse125716,4545640
  SrcList *pTabList;        /* List of tables in the join */pTabList125717,4545710
  ExprList *pOrderBy;       /* The ORDER BY clause or NULL */pOrderBy125718,4545771
  ExprList *pDistinctSet;   /* DISTINCT over all these values */pDistinctSet125719,4545833
  LogEst iLimit;            /* LIMIT if wctrlFlags has WHERE_USE_LIMIT */iLimit125720,4545898
  int aiCurOnePass[2];      /* OP_OpenWrite cursors for the ONEPASS opt */aiCurOnePass125721,4545972
  int iContinue;            /* Jump here to continue with next record */iContinue125722,4546047
  int iBreak;               /* Jump here to break out of the loop */iBreak125723,4546120
  int savedNQueryLoop;      /* pParse->nQueryLoop outside the WHERE loop */savedNQueryLoop125724,4546189
  u16 wctrlFlags;           /* Flags originally passed to sqlite3WhereBegin() */wctrlFlags125725,4546265
  u8 nLevel;                /* Number of nested loop */nLevel125726,4546346
  i8 nOBSat;                /* Number of ORDER BY terms satisfied by indices */nOBSat125727,4546402
  u8 sorted;                /* True if really sorted (not just grouped) */sorted125728,4546482
  u8 eOnePass;              /* ONEPASS_OFF, or _SINGLE, or _MULTI */eOnePass125729,4546557
  u8 untestedTerms;         /* Not all WHERE terms resolved by outer loop */untestedTerms125730,4546626
  u8 eDistinct;             /* One of the WHERE_DISTINCT_* values */eDistinct125731,4546703
  u8 bOrderedInnerLoop;     /* True if only the inner-most loop is ordered */bOrderedInnerLoop125732,4546772
  int iTop;                 /* The very beginning of the WHERE loop */iTop125733,4546850
  WhereLoop *pLoops;        /* List of all WhereLoop objects */pLoops125734,4546921
  Bitmask revMask;          /* Mask of ORDER BY terms that need reversing */revMask125735,4546985
  LogEst nRowOut;           /* Estimated number of output rows */nRowOut125736,4547062
  WhereClause sWC;          /* Decomposition of the WHERE clause */sWC125737,4547128
  WhereMaskSet sMaskSet;    /* Map cursor numbers to bitmasks */sMaskSet125738,4547196
  WhereLevel a[1];          /* Information about each nest loop in WHERE */a125739,4547261
# define sqlite3WhereExplainOneScan(sqlite3WhereExplainOneScan125771,4548546
# define sqlite3WhereAddScanStatus(sqlite3WhereAddScanStatus125781,4549013
#define WO_IN WO_IN125816,4550413
#define WO_EQ WO_EQ125817,4550438
#define WO_LT WO_LT125818,4550463
#define WO_LE WO_LE125819,4550504
#define WO_GT WO_GT125820,4550545
#define WO_GE WO_GE125821,4550586
#define WO_MATCH WO_MATCH125822,4550627
#define WO_IS WO_IS125823,4550652
#define WO_ISNULL WO_ISNULL125824,4550677
#define WO_OR WO_OR125825,4550702
#define WO_AND WO_AND125826,4550770
#define WO_EQUIV WO_EQUIV125827,4550839
#define WO_NOOP WO_NOOP125828,4550907
#define WO_ALL WO_ALL125830,4550986
#define WO_SINGLE WO_SINGLE125831,4551056
#define WHERE_COLUMN_EQ WHERE_COLUMN_EQ125838,4551320
#define WHERE_COLUMN_RANGE WHERE_COLUMN_RANGE125839,4551372
#define WHERE_COLUMN_IN WHERE_COLUMN_IN125840,4551438
#define WHERE_COLUMN_NULL WHERE_COLUMN_NULL125841,4551494
#define WHERE_CONSTRAINT WHERE_CONSTRAINT125842,4551549
#define WHERE_TOP_LIMIT WHERE_TOP_LIMIT125843,4551629
#define WHERE_BTM_LIMIT WHERE_BTM_LIMIT125844,4551703
#define WHERE_BOTH_LIMIT WHERE_BOTH_LIMIT125845,4551777
#define WHERE_IDX_ONLY WHERE_IDX_ONLY125846,4551845
#define WHERE_IPK WHERE_IPK125847,4551918
#define WHERE_INDEXED WHERE_INDEXED125848,4551992
#define WHERE_VIRTUALTABLE WHERE_VIRTUALTABLE125849,4552071
#define WHERE_IN_ABLE WHERE_IN_ABLE125850,4552142
#define WHERE_ONEROW WHERE_ONEROW125851,4552218
#define WHERE_MULTI_OR WHERE_MULTI_OR125852,4552292
#define WHERE_AUTO_INDEX WHERE_AUTO_INDEX125853,4552363
#define WHERE_SKIPSCAN WHERE_SKIPSCAN125854,4552432
#define WHERE_UNQ_WANTED WHERE_UNQ_WANTED125855,4552506
#define WHERE_PARTIALIDX WHERE_PARTIALIDX125856,4552587
static const char *explainIndexColumnName(Index *pIdx, int i){explainIndexColumnName125866,4552917
static void explainAppendTerm(explainAppendTerm125881,4553425
static void explainIndexRange(StrAccum *pStr, WhereLoop *pLoop){explainIndexRange125925,4554859
SQLITE_PRIVATE int sqlite3WhereExplainOneScan(sqlite3WhereExplainOneScan125959,4556087
SQLITE_PRIVATE void sqlite3WhereAddScanStatus(sqlite3WhereAddScanStatus126071,4560456
static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){disableTerm126133,4563196
static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){codeApplyAffinity126164,4564206
static void updateRangeAffinityStr(updateRangeAffinityStr126201,4565329
static int codeEqualityTerm(codeEqualityTerm126232,4566570
static int codeAllEqualityTerms(codeAllEqualityTerms126442,4574686
static void whereLikeOptimizationStringFixup(whereLikeOptimizationStringFixup126562,4579549
# define whereLikeOptimizationStringFixup(whereLikeOptimizationStringFixup126579,4580215
struct CCurHint {CCurHint126588,4580473
  int iTabCur;    /* Cursor for the main table */iTabCur126589,4580491
  int iIdxCur;    /* Cursor for the index, if pIdx!=0.  Unused otherwise */iIdxCur126590,4580541
  Index *pIdx;    /* The index used to access the table */pIdx126591,4580617
static int codeCursorHintCheckExpr(Walker *pWalker, Expr *pExpr){codeCursorHintCheckExpr126600,4580984
static int codeCursorHintIsOrFunction(Walker *pWalker, Expr *pExpr){codeCursorHintIsOrFunction126627,4581836
static int codeCursorHintFixExpr(Walker *pWalker, Expr *pExpr){codeCursorHintFixExpr126662,4583037
static void codeCursorHint(codeCursorHint126695,4584327
# define codeCursorHint(codeCursorHint126796,4588056
static void codeDeferredSeek(codeDeferredSeek126817,4588981
static void codeExprOrVector(Parse *pParse, Expr *p, int iReg, int nReg){codeExprOrVector126856,4590364
SQLITE_PRIVATE Bitmask sqlite3WhereCodeOneLoopStart(sqlite3WhereCodeOneLoopStart126884,4591112
static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){whereOrInfoDelete127911,4634230
static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){whereAndInfoDelete127919,4634422
static int whereClauseInsert(WhereClause *pWC, Expr *p, u16 wtFlags){whereClauseInsert127943,4635519
static int allowedOp(int op){allowedOp127984,4636780
static void exprCommute(Parse *pParse, Expr *pExpr){exprCommute128004,4637585
static u16 operatorMask(int op){operatorMask128035,4638718
static int isLikeOrGlob(isLikeOrGlob128073,4639904
static int isMatchOfColumn(isMatchOfColumn128173,4643470
static void transferJoinMarkings(Expr *pDerived, Expr *pBase){transferJoinMarkings128215,4644585
static void markTermAsChild(WhereClause *pWC, int iChild, int iParent){markTermAsChild128225,4644839
static WhereTerm *whereNthSubterm(WhereTerm *pTerm, int N){whereNthSubterm128236,4645230
static void whereCombineDisjuncts(whereCombineDisjuncts128266,4646073
static void exprAnalyzeOrTerm(exprAnalyzeOrTerm128392,4651201
static int termIsEquivalence(Parse *pParse, Expr *pExpr){termIsEquivalence128655,4662080
static Bitmask exprSelectUsage(WhereMaskSet *pMaskSet, Select *pS){exprSelectUsage128683,4663115
static int exprMightBeIndexed(exprMightBeIndexed128717,4664469
static void exprAnalyze(exprAnalyze128780,4666981
SQLITE_PRIVATE void sqlite3WhereSplit(WhereClause *pWC, Expr *pExpr, u8 op){sqlite3WhereSplit129187,4682401
SQLITE_PRIVATE void sqlite3WhereClauseInit(sqlite3WhereClauseInit129202,4682784
SQLITE_PRIVATE void sqlite3WhereClauseClear(WhereClause *pWC){sqlite3WhereClauseClear129218,4683246
SQLITE_PRIVATE Bitmask sqlite3WhereExprUsage(WhereMaskSet *pMaskSet, Expr *p){sqlite3WhereExprUsage129243,4683901
SQLITE_PRIVATE Bitmask sqlite3WhereExprListUsage(WhereMaskSet *pMaskSet, ExprList *pList){sqlite3WhereExprListUsage129260,4684506
SQLITE_PRIVATE void sqlite3WhereExprAnalyze(sqlite3WhereExprAnalyze129280,4685084
SQLITE_PRIVATE void sqlite3WhereTabFuncArgs(sqlite3WhereTabFuncArgs129297,4685544
/***/ int sqlite3WhereTrace = 0;sqlite3WhereTrace129358,4687875
SQLITE_PRIVATE LogEst sqlite3WhereOutputRowCount(WhereInfo *pWInfo){sqlite3WhereOutputRowCount129365,4687989
SQLITE_PRIVATE int sqlite3WhereIsDistinct(WhereInfo *pWInfo){sqlite3WhereIsDistinct129373,4688220
SQLITE_PRIVATE int sqlite3WhereIsOrdered(WhereInfo *pWInfo){sqlite3WhereIsOrdered129381,4688436
SQLITE_PRIVATE int sqlite3WhereOrderedInnerLoop(WhereInfo *pWInfo){sqlite3WhereOrderedInnerLoop129393,4688851
SQLITE_PRIVATE int sqlite3WhereContinueLabel(WhereInfo *pWInfo){sqlite3WhereContinueLabel129401,4689084
SQLITE_PRIVATE int sqlite3WhereBreakLabel(WhereInfo *pWInfo){sqlite3WhereBreakLabel129410,4689309
SQLITE_PRIVATE int sqlite3WhereOkOnePass(WhereInfo *pWInfo, int *aiCur){sqlite3WhereOkOnePass129431,4690243
static void whereOrMove(WhereOrSet *pDest, WhereOrSet *pSrc){whereOrMove129446,4690698
static int whereOrInsert(whereOrInsert129458,4691126
SQLITE_PRIVATE Bitmask sqlite3WhereGetMask(WhereMaskSet *pMaskSet, int iCursor){sqlite3WhereGetMask129495,4692093
static void createMask(WhereMaskSet *pMaskSet, int iCursor){createMask129514,4692629
static WhereTerm *whereScanNext(WhereScan *pScan){whereScanNext129524,4692993
static WhereTerm *whereScanInit(whereScanInit129624,4696712
SQLITE_PRIVATE WhereTerm *sqlite3WhereFindTerm(sqlite3WhereFindTerm129686,4699274
static int findIndexCol(findIndexCol129720,4700342
static int indexColumnNotNull(Index *pIdx, int iCol){indexColumnNotNull129749,4701191
static int isDistinctRedundant(isDistinctRedundant129772,4701791
static LogEst estLog(LogEst N){estLog129833,4703978
static void translateColumnToCopy(translateColumnToCopy129849,4704579
static void TRACE_IDX_INPUTS(sqlite3_index_info *p){TRACE_IDX_INPUTS129887,4705879
static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){TRACE_IDX_OUTPUTS129905,4706406
#define TRACE_IDX_INPUTS(TRACE_IDX_INPUTS129921,4706997
#define TRACE_IDX_OUTPUTS(TRACE_IDX_OUTPUTS129922,4707025
static int termCanDriveIndex(termCanDriveIndex129931,4707261
static void constructAutomaticIndex(constructAutomaticIndex129955,4708115
static sqlite3_index_info *allocateIndexInfo(allocateIndexInfo130160,4716412
static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){vtabBestIndex130300,4721693
static int whereKeyStats(whereKeyStats130349,4723225
static LogEst whereRangeAdjust(WhereTerm *pTerm, LogEst nNew){whereRangeAdjust130541,4730514
SQLITE_PRIVATE char sqlite3IndexColumnAffinity(sqlite3 *db, Index *pIdx, int iCol){sqlite3IndexColumnAffinity130558,4730911
static int whereRangeSkipScanEst(whereRangeSkipScanEst130604,4732745
static int whereRangeScanEst(whereRangeScanEst130716,4737097
static int whereEqualScanEst(whereEqualScanEst130895,4744260
static int whereInScanEst(whereInScanEst130959,4746362
static void whereTermPrint(WhereTerm *pTerm, int iTerm){whereTermPrint130996,4747562
SQLITE_PRIVATE void sqlite3WhereClausePrint(WhereClause *pWC){sqlite3WhereClausePrint131033,4748840
static void whereLoopPrint(WhereLoop *p, WhereClause *pWC){whereLoopPrint131045,4749075
static void whereLoopInit(WhereLoop *p){whereLoopInit131097,4750826
static void whereLoopClearUnion(sqlite3 *db, WhereLoop *p){whereLoopClearUnion131107,4751046
static void whereLoopClear(sqlite3 *db, WhereLoop *p){whereLoopClear131124,4751610
static int whereLoopResize(sqlite3 *db, WhereLoop *p, int n){whereLoopResize131133,4751860
static int whereLoopXfer(sqlite3 *db, WhereLoop *pTo, WhereLoop *pFrom){whereLoopXfer131149,4752350
static void whereLoopDelete(sqlite3 *db, WhereLoop *p){whereLoopDelete131168,4752918
static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){whereInfoFree131176,4753062
static int whereLoopCheaperProperSubset(whereLoopCheaperProperSubset131212,4754261
static void whereLoopAdjustCost(const WhereLoop *p, WhereLoop *pTemplate){whereLoopAdjustCost131249,4755517
static WhereLoop **whereLoopFindLesser(whereLoopFindLesser131285,4757049
static int whereLoopInsert(WhereLoopBuilder *pBuilder, WhereLoop *pTemplate){whereLoopInsert131373,4760834
static void whereLoopOutputAdjust(whereLoopOutputAdjust131499,4765179
static int whereRangeVectorLen(whereRangeVectorLen131562,4767349
# define ApplyCostMultiplier(ApplyCostMultiplier131616,4769346
# define ApplyCostMultiplier(ApplyCostMultiplier131618,4769394
static int whereLoopAddBtreeIndex(whereLoopAddBtreeIndex131633,4769878
static int indexMightHelpWithOrderBy(indexMightHelpWithOrderBy131954,4782851
static Bitmask columnsInIndex(Index *pIdx){columnsInIndex131988,4783841
static int whereUsablePartialIndex(int iTab, WhereClause *pWC, Expr *pWhere){whereUsablePartialIndex132005,4784253
static int whereLoopAddBtree(whereLoopAddBtree132059,4786493
static int whereLoopAddVirtualOne(whereLoopAddVirtualOne132303,4796236
static int whereLoopAddVirtual(whereLoopAddVirtual132457,4802140
static int whereLoopAddOr(whereLoopAddOr132578,4806914
static int whereLoopAddAll(WhereLoopBuilder *pBuilder){whereLoopAddAll132701,4810940
static i8 wherePathSatisfiesOrderBy(wherePathSatisfiesOrderBy132769,4813488
SQLITE_PRIVATE int sqlite3WhereIsSorted(WhereInfo *pWInfo){sqlite3WhereIsSorted133079,4826002
static const char *wherePathName(WherePath *pPath, int nLoop, WhereLoop *pLast){wherePathName133087,4826246
static LogEst whereSortingCost(whereSortingCost133102,4826659
static int wherePathSolver(WhereInfo *pWInfo, LogEst nRowEst){wherePathSolver133147,4828109
static int whereShortCut(WhereLoopBuilder *pBuilder){whereShortCut133515,4843377
SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin(sqlite3WhereBegin133681,4849714
SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){sqlite3WhereEnd134143,4866740
#define YYNOERRORRECOVERY YYNOERRORRECOVERY134336,4873606
#define yytestcase(yytestcase134341,4873685
#define YYPARSEFREENEVERNULL YYPARSEFREENEVERNULL134347,4873808
# define sqlite3Parser_ENGINEALWAYSONSTACK sqlite3Parser_ENGINEALWAYSONSTACK134359,4874302
#define YYMALLOCARGTYPE YYMALLOCARGTYPE134366,4874487
struct LimitVal {LimitVal134372,4874623
  Expr *pLimit;    /* The LIMIT expression.  NULL if there is no limit */pLimit134373,4874641
  Expr *pOffset;   /* The OFFSET expression.  NULL if there is none */pOffset134374,4874715
struct TrigEvent { int a; IdList * b; };TrigEvent134386,4875067
struct TrigEvent { int a; IdList * b; };a134386,4875067
struct TrigEvent { int a; IdList * b; };b134386,4875067
static void disableLookaside(Parse *pParse){disableLookaside134392,4875219
  static void parserDoubleLinkSelect(Parse *pParse, Select *p){parserDoubleLinkSelect134403,4875525
  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){spanSet134424,4876273
  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token t){spanExpr134433,4876593
  static void spanBinaryExpr(spanBinaryExpr134459,4877386
  static void exprNot(Parse *pParse, int doNot, ExprSpan *pSpan){exprNot134472,4877865
  static void spanUnaryPostfix(spanUnaryPostfix134480,4878095
  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){binaryToUnaryIfNull134492,4878640
  static void spanUnaryPrefix(spanUnaryPrefix134503,4878951
  static ExprList *parserAddExprIdListTerm(parserAddExprIdListTerm134520,4879662
# define INTERFACE INTERFACE134592,4883796
#define YYCODETYPE YYCODETYPE134595,4883905
#define YYNOCODE YYNOCODE134596,4883938
#define YYACTIONTYPE YYACTIONTYPE134597,4883959
#define YYWILDCARD YYWILDCARD134598,4883999
#define sqlite3ParserTOKENTYPE sqlite3ParserTOKENTYPE134599,4884021
  int yyinit;yyinit134601,4884074
  sqlite3ParserTOKENTYPE yy0;yy0134602,4884088
  Expr* yy72;yy72134603,4884118
  TriggerStep* yy145;yy145134604,4884132
  ExprList* yy148;yy148134605,4884154
  SrcList* yy185;yy185134606,4884173
  ExprSpan yy190;yy190134607,4884191
  int yy194;yy194134608,4884209
  Select* yy243;yy243134609,4884222
  IdList* yy254;yy254134610,4884239
  With* yy285;yy285134611,4884256
  struct TrigEvent yy332;yy332134612,4884271
  struct LimitVal yy354;yy354134613,4884297
  struct {int value; int mask;} yy497;value134614,4884322
  struct {int value; int mask;} yy497;mask134614,4884322
  struct {int value; int mask;} yy497;yy497134614,4884322
} YYMINORTYPE;YYMINORTYPE134615,4884361
#define YYSTACKDEPTH YYSTACKDEPTH134617,4884397
#define sqlite3ParserARG_SDECL sqlite3ParserARG_SDECL134619,4884429
#define sqlite3ParserARG_PDECL sqlite3ParserARG_PDECL134620,4884475
#define sqlite3ParserARG_FETCH sqlite3ParserARG_FETCH134621,4884521
#define sqlite3ParserARG_STORE sqlite3ParserARG_STORE134622,4884586
#define YYFALLBACK YYFALLBACK134623,4884644
#define YYNSTATE YYNSTATE134624,4884665
#define YYNRULE YYNRULE134625,4884698
#define YY_MAX_SHIFT YY_MAX_SHIFT134626,4884731
#define YY_MIN_SHIFTREDUCE YY_MIN_SHIFTREDUCE134627,4884764
#define YY_MAX_SHIFTREDUCE YY_MAX_SHIFTREDUCE134628,4884797
#define YY_MIN_REDUCE YY_MIN_REDUCE134629,4884830
#define YY_MAX_REDUCE YY_MAX_REDUCE134630,4884864
#define YY_ERROR_ACTION YY_ERROR_ACTION134631,4884898
#define YY_ACCEPT_ACTION YY_ACCEPT_ACTION134632,4884932
#define YY_NO_ACTION YY_NO_ACTION134633,4884966
# define yytestcase(yytestcase134645,4885429
#define YY_ACTTAB_COUNT YY_ACTTAB_COUNT134705,4888129
static const YYACTIONTYPE yy_action[] = {yy_action134706,4888160
static const YYCODETYPE yy_lookahead[] = {yy_lookahead134865,4899805
#define YY_SHIFT_USE_DFLT YY_SHIFT_USE_DFLT135024,4911451
#define YY_SHIFT_COUNT YY_SHIFT_COUNT135025,4911484
#define YY_SHIFT_MIN YY_SHIFT_MIN135026,4911516
#define YY_SHIFT_MAX YY_SHIFT_MAX135027,4911548
static const short yy_shift_ofst[] = {yy_shift_ofst135028,4911581
#define YY_REDUCE_USE_DFLT YY_REDUCE_USE_DFLT135076,4915003
#define YY_REDUCE_COUNT YY_REDUCE_COUNT135077,4915037
#define YY_REDUCE_MIN YY_REDUCE_MIN135078,4915067
#define YY_REDUCE_MAX YY_REDUCE_MAX135079,4915098
static const short yy_reduce_ofst[] = {yy_reduce_ofst135080,4915129
static const YYACTIONTYPE yy_default[] = {yy_default135115,4917584
static const YYCODETYPE yyFallback[] = {yyFallback135180,4921698
struct yyStackEntry {yyStackEntry135296,4925594
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */stateno135297,4925616
  YYCODETYPE major;      /* The major token value.  This is the codemajor135298,4925697
  YYMINORTYPE minor;     /* The user-supplied minor token value.  Thisminor135300,4925838
typedef struct yyStackEntry yyStackEntry;yyStackEntry135303,4925970
struct yyParser {yyParser135307,4926112
  yyStackEntry *yytos;          /* Pointer to top element of the stack */yytos135308,4926130
  int yyhwm;                    /* High-water mark of the stack */yyhwm135310,4926232
  int yyerrcnt;                 /* Shifts left before out of the error */yyerrcnt135313,4926332
  int yystksz;                  /* Current side of the stack */yystksz135317,4926511
  yyStackEntry *yystack;        /* The parser's stack */yystack135318,4926575
  yyStackEntry yystk0;          /* First stack entry */yystk0135319,4926632
typedef struct yyParser yyParser;yyParser135324,4926768
static FILE *yyTraceFILE = 0;yyTraceFILE135328,4926843
static char *yyTracePrompt = 0;yyTracePrompt135329,4926873
SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){sqlite3ParserTrace135350,4927417
static const char *const yyTokenName[] = { yyTokenName135361,4927809
static const char *const yyRuleName[] = {yyRuleName135431,4932342
static int yyGrowStack(yyParser *p){yyGrowStack135773,4946666
# define YYMALLOCARGTYPE YYMALLOCARGTYPE135807,4947568
SQLITE_PRIVATE void sqlite3ParserInit(void *yypParser){sqlite3ParserInit135812,4947671
SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(YYMALLOCARGTYPE)){sqlite3ParserAlloc135847,4948559
static void yy_destructor(yy_destructor135863,4949225
static void yy_pop_parser_stack(yyParser *pParser){yy_pop_parser_stack135965,4952068
SQLITE_PRIVATE void sqlite3ParserFinalize(void *p){sqlite3ParserFinalize135983,4952515
SQLITE_PRIVATE void sqlite3ParserFree(sqlite3ParserFree136000,4953130
SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){sqlite3ParserStackPeak136016,4953540
static unsigned int yy_find_shift_action(yy_find_shift_action136026,4953764
static int yy_find_reduce_action(yy_find_reduce_action136089,4955535
static void yyStackOverflow(yyParser *yypParser){yyStackOverflow136119,4956258
static void yyTraceShift(yyParser *yypParser, int yyNewState){yyTraceShift136140,4956989
# define yyTraceShift(yyTraceShift136153,4957382
static void yy_shift(yy_shift136159,4957450
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */lhs136202,4958749
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */nrhs136203,4958822
} yyRuleInfo[] = {yyRuleInfo136204,4958900
static void yy_reduce(yy_reduce136545,4963727
static void yy_parse_failed(yy_parse_failed137854,5021745
static void yy_syntax_error(yy_syntax_error137875,5022468
#define TOKEN TOKEN137881,5022730
static void yy_accept(yy_accept137894,5023264
SQLITE_PRIVATE void sqlite3Parser(sqlite3Parser137933,5024540
#define CC_X CC_X138120,5030939
#define CC_KYWD CC_KYWD138121,5031013
#define CC_ID CC_ID138122,5031087
#define CC_DIGIT CC_DIGIT138123,5031153
#define CC_DOLLAR CC_DOLLAR138124,5031193
#define CC_VARALPHA CC_VARALPHA138125,5031230
#define CC_VARNUM CC_VARNUM138126,5031304
#define CC_SPACE CC_SPACE138127,5031365
#define CC_QUOTE CC_QUOTE138128,5031415
#define CC_QUOTE2 CC_QUOTE2138129,5031496
#define CC_PIPE CC_PIPE138130,5031559
#define CC_MINUS CC_MINUS138131,5031625
#define CC_LT CC_LT138132,5031691
#define CC_GT CC_GT138133,5031752
#define CC_EQ CC_EQ138134,5031807
#define CC_BANG CC_BANG138135,5031862
#define CC_SLASH CC_SLASH138136,5031912
#define CC_LP CC_LP138137,5031972
#define CC_RP CC_RP138138,5032009
#define CC_SEMI CC_SEMI138139,5032046
#define CC_PLUS CC_PLUS138140,5032083
#define CC_STAR CC_STAR138141,5032120
#define CC_PERCENT CC_PERCENT138142,5032157
#define CC_COMMA CC_COMMA138143,5032194
#define CC_AND CC_AND138144,5032231
#define CC_TILDA CC_TILDA138145,5032268
#define CC_DOT CC_DOT138146,5032305
#define CC_ILLEGAL CC_ILLEGAL138147,5032342
static const unsigned char aiClass[] = {aiClass138149,5032394
# define charMap(charMap138200,5035434
# define charMap(charMap138203,5035520
const unsigned char ebcdicToAscii[] = {ebcdicToAscii138204,5035572
static int keywordCode(const char *z, int n, int *pType){keywordCode138252,5038173
SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){sqlite3KeywordCode138517,5051577
#define SQLITE_N_KEYWORD SQLITE_N_KEYWORD138522,5051713
#define IdChar(IdChar138545,5052490
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {sqlite3IsEbcdicIdChar138548,5052583
#define IdChar(IdChar138563,5053438
SQLITE_PRIVATE int sqlite3IsIdChar(u8 c){ return IdChar(c); }sqlite3IsIdChar138568,5053609
SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){sqlite3GetToken138576,5053809
SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){sqlite3RunParser138856,5060805
#define IdChar(IdChar139025,5066203
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];sqlite3IsEbcdicIdChar139028,5066296
#define IdChar(IdChar139029,5066347
#define tkSEMI tkSEMI139038,5066592
#define tkWS tkWS139039,5066612
#define tkOTHER tkOTHER139040,5066632
#define tkEXPLAIN tkEXPLAIN139042,5066680
#define tkCREATE tkCREATE139043,5066700
#define tkTEMP tkTEMP139044,5066720
#define tkTRIGGER tkTRIGGER139045,5066740
#define tkEND tkEND139046,5066760
SQLITE_API int sqlite3_complete(const char *zSql){sqlite3_complete139102,5068994
SQLITE_API int sqlite3_complete16(const void *zSql){sqlite3_complete16139267,5074085
SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;sqlite3_version139421,5078911
SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }sqlite3_libversion139427,5079121
SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }sqlite3_sourceid139433,5079384
SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }sqlite3_libversion_number139438,5079593
SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }sqlite3_threadsafe139444,5079893
#   define SQLITE_DEBUG_OS_TRACE SQLITE_DEBUG_OS_TRACE139453,5080207
  int sqlite3OSTrace = SQLITE_DEBUG_OS_TRACE;sqlite3OSTrace139455,5080250
SQLITE_API void (SQLITE_CDECL *sqlite3IoTrace)(const char*, ...) = 0;sqlite3IoTrace139465,5080602
SQLITE_API char *sqlite3_temp_directory = 0;sqlite3_temp_directory139475,5080902
SQLITE_API char *sqlite3_data_directory = 0;sqlite3_data_directory139484,5081208
SQLITE_API int sqlite3_initialize(void){sqlite3_initialize139517,5082590
SQLITE_API int sqlite3_shutdown(void){sqlite3_shutdown139683,5088480
SQLITE_API int sqlite3_config(int op, ...){sqlite3_config139737,5090149
static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){setupLookaside140043,5102238
SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){sqlite3_db_mutex140102,5103889
SQLITE_API int sqlite3_db_release_memory(sqlite3 *db){sqlite3_db_release_memory140116,5104171
SQLITE_API int sqlite3_db_cacheflush(sqlite3 *db){sqlite3_db_cacheflush140140,5104736
SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){sqlite3_db_config140169,5105497
static int allSpaces(const char *z, int n){allSpaces140230,5107374
static int binCollFunc(binCollFunc140242,5107703
static int nocaseCollatingFunc(nocaseCollatingFunc140279,5108863
SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){sqlite3_last_insert_rowid140296,5109216
SQLITE_API int sqlite3_changes(sqlite3 *db){sqlite3_changes140309,5109509
SQLITE_API int sqlite3_total_changes(sqlite3 *db){sqlite3_total_changes140322,5109776
SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){sqlite3CloseSavepoints140337,5110166
static void functionDestroy(sqlite3 *db, FuncDef *p){functionDestroy140354,5110707
static void disconnectAllVtab(sqlite3 *db){disconnectAllVtab140369,5111120
static int connectionIsBusy(sqlite3 *db){connectionIsBusy140400,5111971
static int sqlite3Close(sqlite3 *db, int forceZombie){sqlite3Close140414,5112271
SQLITE_API int sqlite3_close(sqlite3 *db){ return sqlite3Close(db,0); }sqlite3_close140473,5114426
SQLITE_API int sqlite3_close_v2(sqlite3 *db){ return sqlite3Close(db,1); }sqlite3_close_v2140474,5114498
SQLITE_PRIVATE void sqlite3LeaveMutexAndCloseZombie(sqlite3 *db){sqlite3LeaveMutexAndCloseZombie140485,5114891
SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db, int tripCode){sqlite3RollbackAll140608,5118945
SQLITE_PRIVATE const char *sqlite3ErrName(int rc){sqlite3ErrName140658,5120567
SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){sqlite3ErrStr140766,5127888
static int sqliteDefaultBusyCallback(sqliteDefaultBusyCallback140819,5130025
# define NDELAY NDELAY140828,5130393
SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){sqlite3InvokeBusyHandler140865,5131290
SQLITE_API int sqlite3_busy_handler(sqlite3_busy_handler140881,5131663
SQLITE_API void sqlite3_progress_handler(sqlite3_progress_handler140904,5132294
SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){sqlite3_busy_timeout140935,5132938
SQLITE_API void sqlite3_interrupt(sqlite3 *db){sqlite3_interrupt140951,5133349
SQLITE_PRIVATE int sqlite3CreateFunc(sqlite3CreateFunc140968,5133868
SQLITE_API int sqlite3_create_function(sqlite3_create_function141067,5136925
SQLITE_API int sqlite3_create_function_v2(sqlite3_create_function_v2141081,5137313
SQLITE_API int sqlite3_create_function16(sqlite3_create_function16141124,5138319
SQLITE_API int sqlite3_overload_function(sqlite3_overload_function141164,5139567
SQLITE_API void *sqlite3_trace(sqlite3 *db, void(*xTrace)(void*,const char*), void *pArg){sqlite3_trace141196,5140442
SQLITE_API int sqlite3_trace_v2(sqlite3_trace_v2141217,5141005
SQLITE_API void *sqlite3_profile(sqlite3_profile141247,5141986
SQLITE_API void *sqlite3_commit_hook(sqlite3_commit_hook141275,5142627
SQLITE_API void *sqlite3_update_hook(sqlite3_update_hook141300,5143295
SQLITE_API void *sqlite3_rollback_hook(sqlite3_rollback_hook141325,5143954
SQLITE_API void *sqlite3_preupdate_hook(sqlite3_preupdate_hook141351,5144650
SQLITE_PRIVATE int sqlite3WalDefaultHook(sqlite3WalDefaultHook141374,5145472
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){sqlite3_wal_autocheckpoint141400,5146419
SQLITE_API void *sqlite3_wal_hook(sqlite3_wal_hook141421,5146971
SQLITE_API int sqlite3_wal_checkpoint_v2(sqlite3_wal_checkpoint_v2141448,5147595
SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){sqlite3_wal_checkpoint141510,5149507
SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){sqlite3Checkpoint141536,5150700
SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){sqlite3TempInMemory141580,5152581
SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){sqlite3_errmsg141601,5153017
SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){sqlite3_errmsg16141629,5153685
SQLITE_API int sqlite3_errcode(sqlite3 *db){sqlite3_errcode141674,5155092
SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){sqlite3_extended_errcode141683,5155324
SQLITE_API int sqlite3_system_errno(sqlite3 *db){sqlite3_system_errno141692,5155551
SQLITE_API const char *sqlite3_errstr(int rc){sqlite3_errstr141701,5155797
static int createCollation(createCollation141709,5155982
static const int aHardLimit[] = {aHardLimit141786,5158304
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){sqlite3_limit141849,5160198
SQLITE_PRIVATE int sqlite3ParseUri(sqlite3ParseUri141917,5163342
static int openDatabase(openDatabase142153,5171186
SQLITE_API int sqlite3_open(sqlite3_open142485,5181734
SQLITE_API int sqlite3_open_v2(sqlite3_open_v2142492,5181921
SQLITE_API int sqlite3_open16(sqlite3_open16142505,5182296
SQLITE_API int sqlite3_create_collation(sqlite3_create_collation142544,5183371
SQLITE_API int sqlite3_create_collation_v2(sqlite3_create_collation_v2142557,5183683
SQLITE_API int sqlite3_create_collation16(sqlite3_create_collation16142582,5184304
SQLITE_API int sqlite3_collation_needed(sqlite3_collation_needed142612,5185125
SQLITE_API int sqlite3_collation_needed16(sqlite3_collation_needed16142633,5185734
SQLITE_API int sqlite3_global_recover(void){sqlite3_global_recover142655,5186380
SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){sqlite3_get_autocommit142666,5186713
static int reportError(int iErr, int lineno, const char *zType){reportError142687,5187357
SQLITE_PRIVATE int sqlite3CorruptError(int lineno){sqlite3CorruptError142692,5187540
SQLITE_PRIVATE int sqlite3MisuseError(int lineno){sqlite3MisuseError142696,5187706
SQLITE_PRIVATE int sqlite3CantopenError(int lineno){sqlite3CantopenError142700,5187857
SQLITE_PRIVATE int sqlite3NomemError(int lineno){sqlite3NomemError142705,5188042
SQLITE_PRIVATE int sqlite3IoerrnomemError(int lineno){sqlite3IoerrnomemError142709,5188188
SQLITE_API void sqlite3_thread_cleanup(void){sqlite3_thread_cleanup142723,5188650
SQLITE_API int sqlite3_table_column_metadata(sqlite3_table_column_metadata142731,5188839
SQLITE_API int sqlite3_sleep(int ms){sqlite3_sleep142849,5192430
SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){sqlite3_extended_result_codes142865,5192794
SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){sqlite3_file_control142878,5193163
SQLITE_API int sqlite3_test_control(int op, ...){sqlite3_test_control142918,5194284
SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){sqlite3_uri_parameter143272,5207043
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){sqlite3_uri_boolean143287,5207492
SQLITE_API sqlite3_int64 sqlite3_uri_int64(sqlite3_uri_int64143296,5207777
SQLITE_PRIVATE Btree *sqlite3DbNameToBtree(sqlite3 *db, const char *zDbName){sqlite3DbNameToBtree143312,5208260
SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName){sqlite3_db_filename143321,5208525
SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName){sqlite3_db_readonly143337,5208938
SQLITE_API int sqlite3_snapshot_get(sqlite3_snapshot_get143354,5209375
SQLITE_API int sqlite3_snapshot_open(sqlite3_snapshot_open143390,5210185
SQLITE_API int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb){sqlite3_snapshot_recover143428,5211107
SQLITE_API void sqlite3_snapshot_free(sqlite3_snapshot *pSnapshot){sqlite3_snapshot_free143459,5211861
#define assertMutexHeld(assertMutexHeld143496,5212977
static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;sqlite3BlockedList143505,5213329
static void checkListProperties(sqlite3 *db){checkListProperties143522,5213967
# define checkListProperties(checkListProperties143541,5214539
static void removeFromBlockedList(sqlite3 *db){removeFromBlockedList143548,5214727
static void addToBlockedList(sqlite3 *db){addToBlockedList143563,5215073
static void enterMutex(void){enterMutex143578,5215357
static void leaveMutex(void){leaveMutex143586,5215528
SQLITE_API int sqlite3_unlock_notify(sqlite3_unlock_notify143613,5216458
SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){sqlite3ConnectionBlocked143663,5217859
SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){sqlite3ConnectionUnlocked143691,5218827
SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){sqlite3ConnectionClosed143790,5222670
#define _FTSINT_H_FTSINT_H144107,5236169
# define NDEBUG NDEBUG144110,5236236
# undef SQLITE_ENABLE_FTS3SQLITE_ENABLE_FTS3144115,5236333
# undef SQLITE_ENABLE_FTS4SQLITE_ENABLE_FTS4144116,5236360
# define SQLITE_ENABLE_FTS3SQLITE_ENABLE_FTS3144125,5236674
#define _FTS3_TOKENIZER_H__FTS3_TOKENIZER_H_144159,5237787
typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;sqlite3_tokenizer_module144186,5239000
typedef struct sqlite3_tokenizer sqlite3_tokenizer;sqlite3_tokenizer144187,5239066
typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;sqlite3_tokenizer_cursor144188,5239118
struct sqlite3_tokenizer_module {sqlite3_tokenizer_module144190,5239185
  int iVersion;iVersion144195,5239286
  int (*xCreate)(xCreate144214,5240069
  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);xDestroy144224,5240437
  int (*xOpen)(xOpen144231,5240700
  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);xClose144241,5241066
  int (*xNext)(xNext144267,5242352
  int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid);xLanguageid144282,5242958
struct sqlite3_tokenizer {sqlite3_tokenizer144285,5243029
  const sqlite3_tokenizer_module *pModule;  /* The module for this tokenizer */pModule144286,5243056
struct sqlite3_tokenizer_cursor {sqlite3_tokenizer_cursor144290,5243211
  sqlite3_tokenizer *pTokenizer;       /* Tokenizer for this cursor. */pTokenizer144291,5243245
#define _FTS3_HASH_H__FTS3_HASH_H_144322,5244442
typedef struct Fts3Hash Fts3Hash;Fts3Hash144325,5244507
typedef struct Fts3HashElem Fts3HashElem;Fts3HashElem144326,5244541
struct Fts3Hash {Fts3Hash144336,5245040
  char keyClass;          /* HASH_INT, _POINTER, _STRING, _BINARY */keyClass144337,5245058
  char copyKey;           /* True if copy of key made on insert */copyKey144338,5245127
  int count;              /* Number of entries in this table */count144339,5245194
  Fts3HashElem *first;    /* The first element of the array */first144340,5245258
  int htsize;             /* Number of buckets in the hash table */htsize144341,5245321
  struct _fts3ht {        /* the hash table */_fts3ht144342,5245389
    int count;               /* Number of entries with this hash */count144343,5245436
    Fts3HashElem *chain;     /* Pointer to first entry with this hash */chain144344,5245504
  } *ht;ht144345,5245577
struct Fts3HashElem {Fts3HashElem144354,5245848
  Fts3HashElem *next, *prev; /* Next and previous elements in the table */next144355,5245870
  Fts3HashElem *next, *prev; /* Next and previous elements in the table */prev144355,5245870
  void *data;                /* Data associated with this element */data144356,5245945
  void *pKey; int nKey;      /* Key associated with this element */pKey144357,5246014
  void *pKey; int nKey;      /* Key associated with this element */nKey144357,5246014
#define FTS3_HASH_STRING FTS3_HASH_STRING144372,5246589
#define FTS3_HASH_BINARY FTS3_HASH_BINARY144373,5246619
#define fts3HashInit fts3HashInit144387,5247168
#define fts3HashInsert fts3HashInsert144388,5247213
#define fts3HashFind fts3HashFind144389,5247260
#define fts3HashClear fts3HashClear144390,5247305
#define fts3HashFindElem fts3HashFindElem144391,5247351
#define fts3HashFirst(fts3HashFirst144405,5247684
#define fts3HashNext(fts3HashNext144406,5247723
#define fts3HashData(fts3HashData144407,5247761
#define fts3HashKey(fts3HashKey144408,5247799
#define fts3HashKeysize(fts3HashKeysize144409,5247837
#define fts3HashCount(fts3HashCount144414,5247920
# define SQLITE_FTS3_MAX_EXPR_DEPTH SQLITE_FTS3_MAX_EXPR_DEPTH144429,5248530
#define FTS3_MERGE_COUNT FTS3_MERGE_COUNT144438,5248752
#define FTS3_MAX_PENDING_DATA FTS3_MAX_PENDING_DATA144448,5249197
#define SizeofArray(SizeofArray144455,5249448
# define MIN(MIN144459,5249517
# define MAX(MAX144462,5249572
#define FTS3_VARINT_MAX FTS3_VARINT_MAX144469,5249765
#define FTS3_SEGDIR_MAXLEVEL FTS3_SEGDIR_MAXLEVEL144486,5250596
#define FTS3_SEGDIR_MAXLEVEL_STR FTS3_SEGDIR_MAXLEVEL_STR144487,5250635
# define testcase(testcase144494,5250792
#define POS_COLUMN POS_COLUMN144500,5250885
#define POS_END POS_END144501,5250942
# define ALWAYS(ALWAYS144514,5251266
# define NEVER(NEVER144515,5251289
# define ALWAYS(ALWAYS144517,5251340
# define NEVER(NEVER144518,5251385
# define ALWAYS(ALWAYS144522,5251523
# define NEVER(NEVER144523,5251546
typedef unsigned char u8;         /* 1-byte (or larger) unsigned integer */u8144529,5251617
typedef short int i16;            /* 2-byte (or larger) signed integer */i16144530,5251693
typedef unsigned int u32;         /* 4-byte unsigned integer */u32144531,5251767
typedef sqlite3_uint64 u64;       /* 8-byte unsigned integer */u64144532,5251831
typedef sqlite3_int64 i64;        /* 8-byte signed integer */i64144533,5251895
#define UNUSED_PARAMETER(UNUSED_PARAMETER144538,5252031
# define NDEBUG NDEBUG144544,5252177
# define TESTONLY(TESTONLY144553,5252439
# define TESTONLY(TESTONLY144555,5252469
# define FTS_CORRUPT_VTAB FTS_CORRUPT_VTAB144562,5252597
# define FTS_CORRUPT_VTAB FTS_CORRUPT_VTAB144564,5252650
typedef struct Fts3Table Fts3Table;Fts3Table144567,5252704
typedef struct Fts3Cursor Fts3Cursor;Fts3Cursor144568,5252740
typedef struct Fts3Expr Fts3Expr;Fts3Expr144569,5252778
typedef struct Fts3Phrase Fts3Phrase;Fts3Phrase144570,5252812
typedef struct Fts3PhraseToken Fts3PhraseToken;Fts3PhraseToken144571,5252850
typedef struct Fts3Doclist Fts3Doclist;Fts3Doclist144573,5252899
typedef struct Fts3SegFilter Fts3SegFilter;Fts3SegFilter144574,5252939
typedef struct Fts3DeferredToken Fts3DeferredToken;Fts3DeferredToken144575,5252983
typedef struct Fts3SegReader Fts3SegReader;Fts3SegReader144576,5253035
typedef struct Fts3MultiSegReader Fts3MultiSegReader;Fts3MultiSegReader144577,5253079
typedef struct MatchinfoBuffer MatchinfoBuffer;MatchinfoBuffer144579,5253134
struct Fts3Table {Fts3Table144588,5253479
  sqlite3_vtab base;              /* Base class used by SQLite core */base144589,5253498
  sqlite3 *db;                    /* The database connection */db144590,5253569
  const char *zDb;                /* logical database name */zDb144591,5253633
  const char *zName;              /* virtual table name */zName144592,5253695
  int nColumn;                    /* number of named columns in virtual table */nColumn144593,5253754
  char **azColumn;                /* column names.  malloced */azColumn144594,5253835
  u8 *abNotindexed;               /* True for 'notindexed' columns */abNotindexed144595,5253899
  sqlite3_tokenizer *pTokenizer;  /* tokenizer for inserts and queries */pTokenizer144596,5253969
  char *zContentTbl;              /* content=xxx option, or NULL */zContentTbl144597,5254043
  char *zLanguageid;              /* languageid=xxx option, or NULL */zLanguageid144598,5254111
  int nAutoincrmerge;             /* Value configured by 'automerge' */nAutoincrmerge144599,5254182
  u32 nLeafAdd;                   /* Number of leaf blocks added this trans */nLeafAdd144600,5254254
  sqlite3_stmt *aStmt[40];aStmt144605,5254484
  sqlite3_stmt *pSeekStmt;        /* Cache for fts3CursorSeekStmt() */pSeekStmt144606,5254511
  char *zReadExprlist;zReadExprlist144608,5254583
  char *zWriteExprlist;zWriteExprlist144609,5254606
  int nNodeSize;                  /* Soft limit for node size */nNodeSize144611,5254631
  u8 bFts4;                       /* True for FTS4, false for FTS3 */bFts4144612,5254696
  u8 bHasStat;                    /* True if %_stat table exists (2==unknown) */bHasStat144613,5254766
  u8 bHasDocsize;                 /* True if %_docsize table exists */bHasDocsize144614,5254847
  u8 bDescIdx;                    /* True if doclists are in reverse order */bDescIdx144615,5254918
  u8 bIgnoreSavepoint;            /* True to ignore xSavepoint invocations */bIgnoreSavepoint144616,5254996
  int nPgsz;                      /* Page size for host database */nPgsz144617,5255074
  char *zSegmentsTbl;             /* Name of %_segments table */zSegmentsTbl144618,5255142
  sqlite3_blob *pSegments;        /* Blob handle open on %_segments table */pSegments144619,5255207
  int nIndex;                     /* Size of aIndex[] */nIndex144638,5256214
  struct Fts3Index {Fts3Index144639,5256271
    int nPrefix;                  /* Prefix length (0 for main terms index) */nPrefix144640,5256292
    Fts3Hash hPending;            /* Pending terms table for this index */hPending144641,5256371
  } *aIndex;aIndex144642,5256446
  int nMaxPendingData;            /* Max pending data before flush to disk */nMaxPendingData144643,5256459
  int nPendingData;               /* Current bytes of pending data */nPendingData144644,5256537
  sqlite_int64 iPrevDocid;        /* Docid of most recently inserted document */iPrevDocid144645,5256607
  int iPrevLangid;                /* Langid of recently inserted document */iPrevLangid144646,5256688
  int bPrevDelete;                /* True if last operation was a delete */bPrevDelete144647,5256765
  int inTransaction;     /* True after xBegin but before xCommit/xRollback */inTransaction144655,5257169
  int mxSavepoint;       /* Largest valid xSavepoint integer */mxSavepoint144656,5257247
  int bNoIncrDoclist;bNoIncrDoclist144662,5257474
struct Fts3Cursor {Fts3Cursor144671,5257720
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base144672,5257740
  i16 eSearch;                    /* Search strategy (see below) */eSearch144673,5257811
  u8 isEof;                       /* True if at End Of Results */isEof144674,5257879
  u8 isRequireSeek;               /* True if must seek pStmt to %_content row */isRequireSeek144675,5257945
  u8 bSeekStmt;                   /* True if pStmt is a seek */bSeekStmt144676,5258026
  sqlite3_stmt *pStmt;            /* Prepared statement in use by the cursor */pStmt144677,5258090
  Fts3Expr *pExpr;                /* Parsed MATCH query string */pExpr144678,5258170
  int iLangid;                    /* Language being queried for */iLangid144679,5258236
  int nPhrase;                    /* Number of matchable phrases in query */nPhrase144680,5258303
  Fts3DeferredToken *pDeferred;   /* Deferred search tokens, if any */pDeferred144681,5258380
  sqlite3_int64 iPrevId;          /* Previous id read from aDoclist */iPrevId144682,5258451
  char *pNextId;                  /* Pointer into the body of aDoclist */pNextId144683,5258522
  char *aDoclist;                 /* List of docids for full-text queries */aDoclist144684,5258596
  int nDoclist;                   /* Size of buffer at aDoclist */nDoclist144685,5258673
  u8 bDesc;                       /* True to sort in descending order */bDesc144686,5258740
  int eEvalmode;                  /* An FTS3_EVAL_XX constant */eEvalmode144687,5258813
  int nRowAvg;                    /* Average size of database rows, in pages */nRowAvg144688,5258878
  sqlite3_int64 nDoc;             /* Documents in table */nDoc144689,5258958
  i64 iMinDocid;                  /* Minimum docid to return */iMinDocid144690,5259017
  i64 iMaxDocid;                  /* Maximum docid to return */iMaxDocid144691,5259081
  int isMatchinfoNeeded;          /* True when aMatchinfo[] needs filling in */isMatchinfoNeeded144692,5259145
  MatchinfoBuffer *pMIBuffer;     /* Buffer for matchinfo data */pMIBuffer144693,5259225
#define FTS3_EVAL_FILTER FTS3_EVAL_FILTER144696,5259295
#define FTS3_EVAL_NEXT FTS3_EVAL_NEXT144697,5259325
#define FTS3_EVAL_MATCHINFO FTS3_EVAL_MATCHINFO144698,5259355
#define FTS3_FULLSCAN_SEARCH FTS3_FULLSCAN_SEARCH144715,5260078
#define FTS3_DOCID_SEARCH FTS3_DOCID_SEARCH144716,5260149
#define FTS3_FULLTEXT_SEARCH FTS3_FULLTEXT_SEARCH144717,5260224
#define FTS3_HAVE_LANGID FTS3_HAVE_LANGID144725,5260570
#define FTS3_HAVE_DOCID_GE FTS3_HAVE_DOCID_GE144726,5260633
#define FTS3_HAVE_DOCID_LE FTS3_HAVE_DOCID_LE144727,5260692
struct Fts3Doclist {Fts3Doclist144729,5260752
  char *aAll;                    /* Array containing doclist (or NULL) */aAll144730,5260773
  int nAll;                      /* Size of a[] in bytes */nAll144731,5260847
  char *pNextDocid;              /* Pointer to next docid */pNextDocid144732,5260907
  sqlite3_int64 iDocid;          /* Current docid (if pList!=0) */iDocid144734,5260969
  int bFreeList;                 /* True if pList should be sqlite3_free()d */bFreeList144735,5261036
  char *pList;                   /* Pointer to position list following iDocid */pList144736,5261115
  int nList;                     /* Length of position list */nList144737,5261196
struct Fts3PhraseToken {Fts3PhraseToken144746,5261542
  char *z;                        /* Text of the token */z144747,5261567
  int n;                          /* Number of bytes in buffer z */n144748,5261625
  int isPrefix;                   /* True if token ends with a "*" character */isPrefix144749,5261693
  int bFirst;                     /* True if token must appear at position 0 */bFirst144750,5261773
  Fts3DeferredToken *pDeferred;   /* Deferred token object for this token */pDeferred144755,5262041
  Fts3MultiSegReader *pSegcsr;    /* Segment-reader for this token */pSegcsr144756,5262118
struct Fts3Phrase {Fts3Phrase144759,5262192
  Fts3Doclist doclist;doclist144761,5262254
  int bIncr;                 /* True if doclist is loaded incrementally */bIncr144762,5262277
  int iDoclistToken;iDoclistToken144763,5262352
  char *pOrPoslist;pOrPoslist144767,5262471
  i64 iOrDocid;iOrDocid144768,5262491
  int nToken;                /* Number of tokens in the phrase */nToken144773,5262664
  int iColumn;               /* Index of column this phrase must match */iColumn144774,5262730
  Fts3PhraseToken aToken[1]; /* One entry for each token in the phrase */aToken144775,5262804
struct Fts3Expr {Fts3Expr144799,5263778
  int eType;                 /* One of the FTSQUERY_XXX values defined below */eType144800,5263796
  int nNear;                 /* Valid if eType==FTSQUERY_NEAR */nNear144801,5263876
  Fts3Expr *pParent;         /* pParent->pLeft==this or pParent->pRight==this */pParent144802,5263941
  Fts3Expr *pLeft;           /* Left operand */pLeft144803,5264022
  Fts3Expr *pRight;          /* Right operand */pRight144804,5264070
  Fts3Phrase *pPhrase;       /* Valid if eType==FTSQUERY_PHRASE */pPhrase144805,5264119
  sqlite3_int64 iDocid;      /* Current docid */iDocid144808,5264245
  u8 bEof;                   /* True this expression is at EOF already */bEof144809,5264294
  u8 bStart;                 /* True if iDocid is valid */bStart144810,5264368
  u8 bDeferred;              /* True if this expression is entirely deferred */bDeferred144811,5264427
  int iPhrase;               /* Index of this phrase in matchinfo() results */iPhrase144814,5264569
  u32 *aMI;                  /* See above */aMI144815,5264648
#define FTSQUERY_NEAR FTSQUERY_NEAR144829,5264978
#define FTSQUERY_NOT FTSQUERY_NOT144830,5265004
#define FTSQUERY_AND FTSQUERY_AND144831,5265030
#define FTSQUERY_OR FTSQUERY_OR144832,5265056
#define FTSQUERY_PHRASE FTSQUERY_PHRASE144833,5265082
# define sqlite3Fts3FreeDeferredTokens(sqlite3Fts3FreeDeferredTokens144859,5266455
# define sqlite3Fts3DeferToken(sqlite3Fts3DeferToken144860,5266497
# define sqlite3Fts3CacheDeferredDoclists(sqlite3Fts3CacheDeferredDoclists144861,5266545
# define sqlite3Fts3FreeDeferredDoclists(sqlite3Fts3FreeDeferredDoclists144862,5266600
# define sqlite3Fts3DeferredTokenList(sqlite3Fts3DeferredTokenList144863,5266644
#define FTS3_SEGCURSOR_PENDING FTS3_SEGCURSOR_PENDING144870,5266888
#define FTS3_SEGCURSOR_ALL FTS3_SEGCURSOR_ALL144871,5266929
#define FTS3_SEGMENT_REQUIRE_POS FTS3_SEGMENT_REQUIRE_POS144881,5267423
#define FTS3_SEGMENT_IGNORE_EMPTY FTS3_SEGMENT_IGNORE_EMPTY144882,5267469
#define FTS3_SEGMENT_COLUMN_FILTER FTS3_SEGMENT_COLUMN_FILTER144883,5267515
#define FTS3_SEGMENT_PREFIX FTS3_SEGMENT_PREFIX144884,5267561
#define FTS3_SEGMENT_SCAN FTS3_SEGMENT_SCAN144885,5267607
#define FTS3_SEGMENT_FIRST FTS3_SEGMENT_FIRST144886,5267653
struct Fts3SegFilter {Fts3SegFilter144889,5267760
  const char *zTerm;zTerm144890,5267783
  int nTerm;nTerm144891,5267804
  int iCol;iCol144892,5267817
  int flags;flags144893,5267829
struct Fts3MultiSegReader {Fts3MultiSegReader144896,5267846
  Fts3SegReader **apSegment;      /* Array of Fts3SegReader objects */apSegment144898,5267933
  int nSegment;                   /* Size of apSegment array */nSegment144899,5268004
  int nAdvance;                   /* How many seg-readers to advance */nAdvance144900,5268068
  Fts3SegFilter *pFilter;         /* Pointer to filter object */pFilter144901,5268140
  char *aBuffer;                  /* Buffer to merge doclists in */aBuffer144902,5268205
  int nBuffer;                    /* Allocated size of aBuffer[] in bytes */nBuffer144903,5268273
  int iColFilter;                 /* If >=0, filter for this column */iColFilter144905,5268351
  int bRestart;bRestart144906,5268422
  int nCost;                      /* Cost of running iterator */nCost144909,5268468
  int bLookup;                    /* True if a lookup of a single entry. */bLookup144910,5268533
  char *zTerm;                    /* Pointer to term buffer */zTerm144913,5268690
  int nTerm;                      /* Size of zTerm in bytes */nTerm144914,5268753
  char *aDoclist;                 /* Pointer to doclist buffer */aDoclist144915,5268816
  int nDoclist;                   /* Size of aDoclist[] in bytes */nDoclist144916,5268882
#define fts3GetVarint32(fts3GetVarint32144921,5269016
# define SQLITE_CORE SQLITE_CORE144999,5272452
SQLITE_PRIVATE int sqlite3Fts3Always(int b) { assert( b ); return b; }sqlite3Fts3Always145022,5272993
SQLITE_PRIVATE int sqlite3Fts3Never(int b)  { assert( !b ); return b; }sqlite3Fts3Never145023,5273064
SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){sqlite3Fts3PutVarint145032,5273348
#define GETVARINT_STEP(GETVARINT_STEP145044,5273723
#define GETVARINT_INIT(GETVARINT_INIT145047,5273898
SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *p, sqlite_int64 *v){sqlite3Fts3GetVarint145056,5274233
SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){sqlite3Fts3GetVarint32145081,5274892
SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){sqlite3Fts3VarintLen145102,5275417
SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){sqlite3Fts3Dequote145125,5275913
static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){fts3GetDeltaVarint145154,5276765
static void fts3GetReverseVarint(fts3GetReverseVarint145169,5277277
static int fts3DisconnectMethod(sqlite3_vtab *pVtab){fts3DisconnectMethod145191,5277742
SQLITE_PRIVATE void sqlite3Fts3ErrMsg(char **pzErr, const char *zFormat, ...){sqlite3Fts3ErrMsg145219,5278430
static void fts3DbExec(fts3DbExec145234,5278853
static int fts3DestroyMethod(sqlite3_vtab *pVtab){fts3DestroyMethod145257,5279399
static void fts3DeclareVtab(int *pRc, Fts3Table *p){fts3DeclareVtab145289,5280735
SQLITE_PRIVATE void sqlite3Fts3CreateStatTable(int *pRc, Fts3Table *p){sqlite3Fts3CreateStatTable145326,5281921
static int fts3CreateTables(Fts3Table *p){fts3CreateTables145344,5282559
static void fts3DatabasePageSize(int *pRc, Fts3Table *p){fts3DatabasePageSize145409,5284535
static int fts3IsSpecialColumn(fts3IsSpecialColumn145443,5285554
static void fts3Appendf(fts3Appendf145468,5285990
static char *fts3QuoteId(char const *zInput){fts3QuoteId145501,5286985
static char *fts3ReadExprList(Fts3Table *p, const char *zFunc, int *pRc){fts3ReadExprList145543,5288443
static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){fts3WriteExprList145600,5290318
static int fts3GobbleInt(const char **pp, int *pnOut){fts3GobbleInt145635,5291304
static int fts3PrefixParameter(fts3PrefixParameter145670,5292593
static int fts3ContentColumns(fts3ContentColumns145739,5294872
static int fts3InitVtab(fts3InitVtab145814,5297389
static int fts3ConnectMethod(fts3ConnectMethod146191,5310033
static int fts3CreateMethod(fts3CreateMethod146201,5310553
static void fts3SetEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){fts3SetEstimatedRows146217,5311280
static void fts3SetUniqueFlag(sqlite3_index_info *pIdxInfo){fts3SetUniqueFlag146230,5311703
static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){fts3BestIndexMethod146246,5312198
static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts3OpenMethod146371,5316439
static void fts3CursorFinalizeStmt(Fts3Cursor *pCsr){fts3CursorFinalizeStmt146395,5317237
static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){fts3CloseMethod146412,5317688
static int fts3CursorSeekStmt(Fts3Cursor *pCsr){fts3CursorSeekStmt146434,5318454
static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){fts3CursorSeek146458,5319146
static int fts3ScanInteriorNode(fts3ScanInteriorNode146501,5320663
static int fts3SelectLeaf(fts3SelectLeaf146622,5325538
static void fts3PutDeltaVarint(fts3PutDeltaVarint146670,5327243
static void fts3PoslistCopy(char **pp, char **ppPoslist){fts3PoslistCopy146694,5328269
static void fts3ColumnlistCopy(char **pp, char **ppPoslist){fts3ColumnlistCopy146741,5329997
#define POSITION_LIST_END POSITION_LIST_END146766,5330607
static void fts3ReadNextPos(fts3ReadNextPos146786,5331535
static int fts3PutColNumber(char **pp, int iCol){fts3PutColNumber146807,5332182
static void fts3PoslistMerge(fts3PoslistMerge146825,5332793
static int fts3PoslistPhraseMerge(fts3PoslistPhraseMerge146915,5335938
static int fts3PoslistNearMerge(fts3PoslistNearMerge147039,5339514
typedef struct TermSelect TermSelect;TermSelect147078,5340672
struct TermSelect {TermSelect147079,5340710
  char *aaOutput[16];             /* Malloc'd output buffers */aaOutput147080,5340730
  int anOutput[16];               /* Size each output buffer in bytes */anOutput147081,5340794
static void fts3GetDeltaVarint3(fts3GetDeltaVarint3147097,5341494
static void fts3PutDeltaVarint3(fts3PutDeltaVarint3147131,5342583
#define DOCID_CMP(DOCID_CMP147161,5343640
static int fts3DoclistOrMerge(fts3DoclistOrMerge147177,5344348
static int fts3DoclistPhraseMerge(fts3DoclistPhraseMerge147269,5347997
SQLITE_PRIVATE int sqlite3Fts3FirstFilter(sqlite3Fts3FirstFilter147340,5350152
static int fts3TermSelectFinishMerge(Fts3Table *p, TermSelect *pTS){fts3TermSelectFinishMerge147392,5351631
static int fts3TermSelectMerge(fts3TermSelectMerge147446,5353164
static int fts3SegReaderCursorAppend(fts3SegReaderCursorAppend147518,5355650
static int fts3SegReaderCursor(fts3SegReaderCursor147543,5356310
SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor(sqlite3Fts3SegReaderCursor147617,5359316
static int fts3SegReaderCursorAddZero(fts3SegReaderCursorAddZero147649,5360632
static int fts3TermSegReaderCursor(fts3TermSegReaderCursor147674,5361641
static void fts3SegReaderCursorFree(Fts3MultiSegReader *pSegcsr){fts3SegReaderCursorFree147731,5363415
static int fts3TermSelect(fts3TermSelect147740,5363655
static int fts3DoclistCountDocids(char *aList, int nList){fts3DoclistCountDocids147797,5365613
static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){fts3NextMethod147823,5366551
# define LARGEST_INT64 LARGEST_INT64147849,5367332
# define SMALLEST_INT64 SMALLEST_INT64147850,5367403
static sqlite3_int64 fts3DocidRange(sqlite3_value *pVal, i64 iDefault){fts3DocidRange147858,5367652
static int fts3FilterMethod(fts3FilterMethod147884,5368486
static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){fts3EofMethod148001,5372448
static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){fts3RowidMethod148011,5372795
static int fts3ColumnMethod(fts3ColumnMethod148028,5373354
static int fts3UpdateMethod(fts3UpdateMethod148078,5375225
static int fts3SyncMethod(sqlite3_vtab *pVtab){fts3SyncMethod148091,5375697
static int fts3SetHasStat(Fts3Table *p){fts3SetHasStat148140,5377818
static int fts3BeginMethod(sqlite3_vtab *pVtab){fts3BeginMethod148164,5378470
static int fts3CommitMethod(sqlite3_vtab *pVtab){fts3CommitMethod148181,5378976
static int fts3RollbackMethod(sqlite3_vtab *pVtab){fts3RollbackMethod148196,5379444
static void fts3ReversePoslist(char *pStart, char **ppPoslist){fts3ReversePoslist148211,5379948
static int fts3FunctionArg(fts3FunctionArg148254,5381619
static void fts3SnippetFunc(fts3SnippetFunc148277,5382367
static void fts3OffsetsFunc(fts3OffsetsFunc148320,5383923
static void fts3OptimizeFunc(fts3OptimizeFunc148346,5384714
static void fts3MatchinfoFunc(fts3MatchinfoFunc148380,5385721
static int fts3FindFunctionMethod(fts3FindFunctionMethod148400,5386383
static int fts3RenameMethod(fts3RenameMethod148436,5387457
static int fts3SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){fts3SavepointMethod148494,5389128
static int fts3ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){fts3ReleaseMethod148511,5389580
static int fts3RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){fts3RollbackToMethod148526,5389984
static const sqlite3_module fts3Module = {fts3Module148536,5390295
static void hashDestroy(void *p){hashDestroy148567,5391449
SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){sqlite3Fts3Init148598,5392764
static void fts3EvalAllocateReaders(fts3EvalAllocateReaders148708,5396179
static int fts3EvalPhraseMergeToken(fts3EvalPhraseMergeToken148750,5397736
static int fts3EvalPhraseLoad(fts3EvalPhraseLoad148814,5399349
static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){fts3EvalDeferredPhrase148850,5400551
#define MAX_INCR_PHRASE_TOKENS MAX_INCR_PHRASE_TOKENS148948,5403313
static int fts3EvalPhraseStart(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p){fts3EvalPhraseStart148962,5403899
SQLITE_PRIVATE void sqlite3Fts3DoclistPrev(sqlite3Fts3DoclistPrev149019,5406015
SQLITE_PRIVATE void sqlite3Fts3DoclistNext(sqlite3Fts3DoclistNext149075,5407574
static void fts3EvalDlPhraseNext(fts3EvalDlPhraseNext149112,5408654
typedef struct TokenDoclist TokenDoclist;TokenDoclist149158,5410031
struct TokenDoclist {TokenDoclist149159,5410073
  int bIgnore;bIgnore149160,5410095
  sqlite3_int64 iDocid;iDocid149161,5410110
  char *pList;pList149162,5410134
  int nList;nList149163,5410149
static int incrPhraseTokenNext(incrPhraseTokenNext149175,5410538
static int fts3EvalIncrPhraseNext(fts3EvalIncrPhraseNext149227,5412251
static int fts3EvalPhraseNext(fts3EvalPhraseNext149327,5415592
static void fts3EvalStartReaders(fts3EvalStartReaders149366,5417053
typedef struct Fts3TokenAndCost Fts3TokenAndCost;Fts3TokenAndCost149402,5418448
struct Fts3TokenAndCost {Fts3TokenAndCost149403,5418498
  Fts3Phrase *pPhrase;            /* The phrase the token belongs to */pPhrase149404,5418524
  int iToken;                     /* Position of token in phrase */iToken149405,5418596
  Fts3PhraseToken *pToken;        /* The token itself */pToken149406,5418664
  Fts3Expr *pRoot;                /* Root of NEAR/AND cluster */pRoot149407,5418721
  int nOvfl;                      /* Number of overflow pages to load doclist */nOvfl149408,5418786
  int iCol;                       /* The column the token must match */iCol149409,5418867
static void fts3EvalTokenCosts(fts3EvalTokenCosts149419,5419190
static int fts3EvalAverageDocsize(Fts3Cursor *pCsr, int *pnPage){fts3EvalAverageDocsize149473,5421250
static int fts3EvalSelectDeferred(fts3EvalSelectDeferred149534,5423323
static int fts3EvalStart(Fts3Cursor *pCsr){fts3EvalStart149667,5428718
static void fts3EvalInvalidatePoslist(Fts3Phrase *pPhrase){fts3EvalInvalidatePoslist149717,5430044
static int fts3EvalNearTrim(fts3EvalNearTrim149748,5431278
static void fts3EvalNextRow(fts3EvalNextRow149822,5434493
static int fts3EvalNearTest(Fts3Expr *pExpr, int *pRc){fts3EvalNearTest149963,5439645
static int fts3EvalTestExpr(fts3EvalTestExpr150049,5442515
SQLITE_PRIVATE int sqlite3Fts3EvalTestDeferred(Fts3Cursor *pCsr, int *pRc){sqlite3Fts3EvalTestDeferred150160,5446281
static int fts3EvalNext(Fts3Cursor *pCsr){fts3EvalNext150190,5447251
static void fts3EvalRestart(fts3EvalRestart150231,5448563
static void fts3EvalUpdateCounts(Fts3Expr *pExpr){fts3EvalUpdateCounts150274,5449807
static int fts3EvalGatherStats(fts3EvalGatherStats150317,5451128
SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats(sqlite3Fts3EvalPhraseStats150428,5454918
SQLITE_PRIVATE int sqlite3Fts3EvalPhrasePoslist(sqlite3Fts3EvalPhrasePoslist150476,5456586
SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *pPhrase){sqlite3Fts3EvalPhraseCleanup150610,5460969
SQLITE_PRIVATE int sqlite3Fts3Corrupt(){sqlite3Fts3Corrupt150628,5461410
__declspec(dllexport)__declspec150638,5461574
typedef struct Fts3auxTable Fts3auxTable;Fts3auxTable150673,5462467
typedef struct Fts3auxCursor Fts3auxCursor;Fts3auxCursor150674,5462509
struct Fts3auxTable {Fts3auxTable150676,5462554
  sqlite3_vtab base;              /* Base class used by SQLite core */base150677,5462576
  Fts3Table *pFts3Tab;pFts3Tab150678,5462647
struct Fts3auxCursor {Fts3auxCursor150681,5462674
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base150682,5462697
  Fts3MultiSegReader csr;        /* Must be right after "base" */csr150683,5462768
  Fts3SegFilter filter;filter150684,5462834
  char *zStop;zStop150685,5462858
  int nStop;                      /* Byte-length of string zStop */nStop150686,5462873
  int iLangid;                    /* Language id to query */iLangid150687,5462941
  int isEof;                      /* True if cursor is at EOF */isEof150688,5463002
  sqlite3_int64 iRowid;           /* Current rowid */iRowid150689,5463067
  int iCol;                       /* Current value of 'col' column */iCol150691,5463122
  int nStat;                      /* Size of aStat[] array */nStat150692,5463192
  struct Fts3auxColstats {Fts3auxColstats150693,5463254
    sqlite3_int64 nDoc;           /* 'documents' values for current csr row */nDoc150694,5463281
    sqlite3_int64 nOcc;           /* 'occurrences' values for current csr row */nOcc150695,5463360
  } *aStat;aStat150696,5463441
#define FTS3_AUX_SCHEMA FTS3_AUX_SCHEMA150702,5463493
static int fts3auxConnectMethod(fts3auxConnectMethod150710,5463794
static int fts3auxDisconnectMethod(sqlite3_vtab *pVtab){fts3auxDisconnectMethod150781,5466223
#define FTS4AUX_EQ_CONSTRAINT FTS4AUX_EQ_CONSTRAINT150795,5466577
#define FTS4AUX_GE_CONSTRAINT FTS4AUX_GE_CONSTRAINT150796,5466609
#define FTS4AUX_LE_CONSTRAINT FTS4AUX_LE_CONSTRAINT150797,5466641
static int fts3auxBestIndexMethod(fts3auxBestIndexMethod150802,5466733
static int fts3auxOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts3auxOpenMethod150872,5468606
static int fts3auxCloseMethod(sqlite3_vtab_cursor *pCursor){fts3auxCloseMethod150888,5469030
static int fts3auxGrowStatArray(Fts3auxCursor *pCsr, int nSize){fts3auxGrowStatArray150901,5469431
static int fts3auxNextMethod(sqlite3_vtab_cursor *pCursor){fts3auxNextMethod150920,5469959
static int fts3auxFilterMethod(fts3auxFilterMethod151014,5472704
static int fts3auxEofMethod(sqlite3_vtab_cursor *pCursor){fts3auxEofMethod151109,5475931
static int fts3auxColumnMethod(fts3auxColumnMethod151117,5476107
static int fts3auxRowidMethod(fts3auxRowidMethod151158,5477156
SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db){sqlite3Fts3InitAux151171,5477567
SQLITE_API int sqlite3_fts3_enable_parentheses = 0;sqlite3_fts3_enable_parentheses151273,5481678
#  define sqlite3_fts3_enable_parentheses sqlite3_fts3_enable_parentheses151276,5481776
#  define sqlite3_fts3_enable_parentheses sqlite3_fts3_enable_parentheses151278,5481827
#define SQLITE_FTS3_DEFAULT_NEAR_PARAM SQLITE_FTS3_DEFAULT_NEAR_PARAM151285,5481929
typedef struct ParseContext ParseContext;ParseContext151298,5482348
struct ParseContext {ParseContext151299,5482390
  sqlite3_tokenizer *pTokenizer;      /* Tokenizer module */pTokenizer151300,5482412
  int iLangid;                        /* Language id used with tokenizer */iLangid151301,5482473
  const char **azCol;                 /* Array of column names for fts3 table */azCol151302,5482549
  int bFts4;                          /* True to allow FTS4-only syntax */bFts4151303,5482630
  int nCol;                           /* Number of entries in azCol[] */nCol151304,5482705
  int iDefaultCol;                    /* Default column to query */iDefaultCol151305,5482778
  int isNot;                          /* True if getNextNode() sees a unary - */isNot151306,5482846
  sqlite3_context *pCtx;              /* Write error message here */pCtx151307,5482927
  int nNest;                          /* Number of nested brackets */nNest151308,5482996
static int fts3isspace(char c){fts3isspace151322,5483616
static void *fts3MallocZero(int nByte){fts3MallocZero151331,5483889
SQLITE_PRIVATE int sqlite3Fts3OpenTokenizer(sqlite3Fts3OpenTokenizer151337,5484022
static int getNextToken(getNextToken151382,5485466
static void *fts3ReallocOrFree(void *pOrig, int nNew){fts3ReallocOrFree151461,5487915
static int getNextString(getNextString151481,5488650
static int getNextNode(getNextNode151599,5492434
static int opPrecedence(Fts3Expr *p){opPrecedence151765,5497933
static void insertBinaryOperator(insertBinaryOperator151786,5498687
static int fts3ExprParse(fts3ExprParse151817,5499815
static int fts3ExprCheckDepth(Fts3Expr *p, int nMaxDepth){fts3ExprCheckDepth151966,5504228
static int fts3ExprBalance(Fts3Expr **pp, int nMaxDepth){fts3ExprBalance151992,5504978
static int fts3ExprParseUnbalanced(fts3ExprParseUnbalanced152166,5510162
SQLITE_PRIVATE int sqlite3Fts3ExprParse(sqlite3Fts3ExprParse152229,5512700
static void fts3FreeExprNode(Fts3Expr *p){fts3FreeExprNode152273,5514268
SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *pDel){sqlite3Fts3ExprFree152287,5514720
static int queryTestTokenizer(queryTestTokenizer152320,5515701
static char *exprToString(Fts3Expr *pExpr, char *zBuf){exprToString152355,5516735
static void fts3ExprTest(fts3ExprTest152412,5518507
SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){sqlite3Fts3ExprInitTestInterface152502,5520839
static void *fts3HashMalloc(int n){fts3HashMalloc152556,5522502
static void fts3HashFree(void *p){fts3HashFree152563,5522619
SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){sqlite3Fts3HashInit152577,5523144
SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){sqlite3Fts3HashClear152592,5523611
static int fts3StrHash(const void *pKey, int nKey){fts3StrHash152615,5524136
static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){fts3StrCompare152625,5524383
static int fts3BinHash(const void *pKey, int nKey){fts3BinHash152633,5524625
static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){fts3BinCompare152641,5524811
static int (*ftsHashFunction(int keyClass))(const void*,int){ftsHashFunction152658,5525526
static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){ftsCompareFunction152673,5525941
static void fts3HashInsertElement(fts3HashInsertElement152684,5526214
static int fts3Rehash(Fts3Hash *pH, int new_size){fts3Rehash152714,5527123
static Fts3HashElem *fts3FindElementByHash(fts3FindElementByHash152738,5528045
static void fts3RemoveElementByHash(fts3RemoveElementByHash152766,5528933
SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem(sqlite3Fts3HashFindElem152800,5529711
SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){sqlite3Fts3HashFind152821,5530359
SQLITE_PRIVATE void *sqlite3Fts3HashInsert(sqlite3Fts3HashInsert152843,5531264
typedef struct porter_tokenizer {porter_tokenizer152942,5534283
  sqlite3_tokenizer base;      /* Base class */base152943,5534317
} porter_tokenizer;porter_tokenizer152944,5534365
typedef struct porter_tokenizer_cursor {porter_tokenizer_cursor152949,5534439
  sqlite3_tokenizer_cursor base;base152950,5534480
  const char *zInput;          /* input we are tokenizing */zInput152951,5534513
  int nInput;                  /* size of the input */nInput152952,5534574
  int iOffset;                 /* current position in zInput */iOffset152953,5534629
  int iToken;                  /* index of next token to be returned */iToken152954,5534693
  char *zToken;                /* storage for current token */zToken152955,5534765
  int nAllocated;              /* space allocated to zToken buffer */nAllocated152956,5534828
} porter_tokenizer_cursor;porter_tokenizer_cursor152957,5534898
static int porterCreate(porterCreate152963,5534969
static int porterDestroy(sqlite3_tokenizer *pTokenizer){porterDestroy152982,5535345
static int porterOpen(porterOpen152993,5535658
static int porterClose(sqlite3_tokenizer_cursor *pCursor){porterClose153026,5536525
static const char cType[] = {cType153035,5536748
static int isConsonant(const char *z){isConsonant153054,5537373
static int isVowel(const char *z){isVowel153063,5537569
static int m_gt_0(const char *z){m_gt_0153092,5538481
static int m_eq_1(const char *z){m_eq_1153102,5538705
static int m_gt_1(const char *z){m_gt_1153116,5539039
static int hasVowel(const char *z){hasVowel153130,5539359
static int doubleConsonant(const char *z){doubleConsonant153141,5539606
static int star_oh(const char *z){star_oh153153,5539970
static int stem(stem153173,5540525
static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){copy_stemmer153198,5541405
static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){porter_stemmer153245,5542901
static const char porterIdChar[] = {porterIdChar153484,5548213
#define isDelim(isDelim153492,5548617
static int porterNext(porterNext153498,5548825
static const sqlite3_tokenizer_module porterTokenizerModule = {porterTokenizerModule153546,5550357
SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule(sqlite3Fts3PorterTokenizerModule153560,5550607
static int fts3TokenizerEnabled(sqlite3_context *context){fts3TokenizerEnabled153606,5552102
static void fts3TokenizerFunc(fts3TokenizerFunc153633,5553233
SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){sqlite3Fts3IsIdChar153681,5554494
SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){sqlite3Fts3NextToken153695,5555144
SQLITE_PRIVATE int sqlite3Fts3InitTokenizer(sqlite3Fts3InitTokenizer153732,5555904
static void testFunc(testFunc153828,5558747
int registerTokenizer(registerTokenizer153920,5560929
int queryTokenizer(queryTokenizer153943,5561392
static void intTestFunc(intTestFunc153988,5562741
SQLITE_PRIVATE int sqlite3Fts3InitHashTable(sqlite3Fts3InitHashTable154042,5564506
typedef struct simple_tokenizer {simple_tokenizer154123,5566658
  sqlite3_tokenizer base;base154124,5566692
  char delim[128];             /* flag ASCII delimiters */delim154125,5566718
} simple_tokenizer;simple_tokenizer154126,5566777
typedef struct simple_tokenizer_cursor {simple_tokenizer_cursor154128,5566798
  sqlite3_tokenizer_cursor base;base154129,5566839
  const char *pInput;          /* input we are tokenizing */pInput154130,5566872
  int nBytes;                  /* size of the input */nBytes154131,5566933
  int iOffset;                 /* current position in pInput */iOffset154132,5566988
  int iToken;                  /* index of next token to be returned */iToken154133,5567052
  char *pToken;                /* storage for current token */pToken154134,5567124
  int nTokenAllocated;         /* space allocated to zToken buffer */nTokenAllocated154135,5567187
} simple_tokenizer_cursor;simple_tokenizer_cursor154136,5567257
static int simpleDelim(simple_tokenizer *t, unsigned char c){simpleDelim154139,5567286
static int fts3_isalnum(int x){fts3_isalnum154142,5567382
static int simpleCreate(simpleCreate154149,5567532
static int simpleDestroy(sqlite3_tokenizer *pTokenizer){simpleDestroy154190,5568573
static int simpleOpen(simpleOpen154201,5568886
static int simpleClose(sqlite3_tokenizer_cursor *pCursor){simpleClose154234,5569758
static int simpleNext(simpleNext154245,5570084
static const sqlite3_tokenizer_module simpleTokenizerModule = {simpleTokenizerModule154302,5571933
SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule(sqlite3Fts3SimpleTokenizerModule154316,5572184
typedef struct Fts3tokTable Fts3tokTable;Fts3tokTable154372,5574068
typedef struct Fts3tokCursor Fts3tokCursor;Fts3tokCursor154373,5574110
struct Fts3tokTable {Fts3tokTable154378,5574189
  sqlite3_vtab base;              /* Base class used by SQLite core */base154379,5574211
  const sqlite3_tokenizer_module *pMod;pMod154380,5574282
  sqlite3_tokenizer *pTok;pTok154381,5574322
struct Fts3tokCursor {Fts3tokCursor154387,5574394
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base154388,5574417
  char *zInput;                   /* Input string */zInput154389,5574488
  sqlite3_tokenizer_cursor *pCsr; /* Cursor to iterate through zInput */pCsr154390,5574541
  int iRowid;                     /* Current 'rowid' value */iRowid154391,5574614
  const char *zToken;             /* Current 'token' value */zToken154392,5574676
  int nToken;                     /* Size of zToken in bytes */nToken154393,5574738
  int iStart;                     /* Current 'start' value */iStart154394,5574802
  int iEnd;                       /* Current 'end' value */iEnd154395,5574864
  int iPos;                       /* Current 'pos' value */iPos154396,5574924
static int fts3tokQueryTokenizer(fts3tokQueryTokenizer154402,5575053
static int fts3tokDequoteArray(fts3tokDequoteArray154433,5576060
#define FTS3_TOK_SCHEMA FTS3_TOK_SCHEMA154471,5576952
static int fts3tokConnectMethod(fts3tokConnectMethod154483,5577360
static int fts3tokDisconnectMethod(sqlite3_vtab *pVtab){fts3tokDisconnectMethod154547,5579150
static int fts3tokBestIndexMethod(fts3tokBestIndexMethod154558,5579394
static int fts3tokOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts3tokOpenMethod154587,5580013
static void fts3tokResetCursor(Fts3tokCursor *pCsr){fts3tokResetCursor154605,5580485
static int fts3tokCloseMethod(sqlite3_vtab_cursor *pCursor){fts3tokCloseMethod154624,5580882
static int fts3tokNextMethod(sqlite3_vtab_cursor *pCursor){fts3tokNextMethod154635,5581128
static int fts3tokFilterMethod(fts3tokFilterMethod154657,5581681
static int fts3tokEofMethod(sqlite3_vtab_cursor *pCursor){fts3tokEofMethod154694,5582873
static int fts3tokColumnMethod(fts3tokColumnMethod154702,5583055
static int fts3tokRowidMethod(fts3tokRowidMethod154734,5583961
SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3 *db, Fts3Hash *pHash){sqlite3Fts3InitTok154747,5584387
#define FTS_MAX_APPENDABLE_HEIGHT FTS_MAX_APPENDABLE_HEIGHT154810,5586980
#define FTS3_NODE_PADDING FTS3_NODE_PADDING154822,5587489
int test_fts3_node_chunksize = (4*1024);test_fts3_node_chunksize154842,5588438
int test_fts3_node_chunk_threshold = (4*1024)*4;test_fts3_node_chunk_threshold154843,5588479
# define FTS3_NODE_CHUNKSIZE FTS3_NODE_CHUNKSIZE154844,5588528
# define FTS3_NODE_CHUNK_THRESHOLD FTS3_NODE_CHUNK_THRESHOLD154845,5588588
# define FTS3_NODE_CHUNKSIZE FTS3_NODE_CHUNKSIZE154847,5588660
# define FTS3_NODE_CHUNK_THRESHOLD FTS3_NODE_CHUNK_THRESHOLD154848,5588699
#define FTS_STAT_DOCTOTAL FTS_STAT_DOCTOTAL154855,5588896
#define FTS_STAT_INCRMERGEHINT FTS_STAT_INCRMERGEHINT154856,5588929
#define FTS_STAT_AUTOINCRMERGE FTS_STAT_AUTOINCRMERGE154857,5588962
static void fts3LogMerge(int nMerge, sqlite3_int64 iAbsLevel){fts3LogMerge154866,5589257
#define fts3LogMerge(fts3LogMerge154870,5589408
typedef struct PendingList PendingList;PendingList154874,5589444
typedef struct SegmentNode SegmentNode;SegmentNode154875,5589484
typedef struct SegmentWriter SegmentWriter;SegmentWriter154876,5589524
struct PendingList {PendingList154882,5589716
  int nData;nData154883,5589737
  char *aData;aData154884,5589750
  int nSpace;nSpace154885,5589765
  sqlite3_int64 iLastDocid;iLastDocid154886,5589779
  sqlite3_int64 iLastCol;iLastCol154887,5589807
  sqlite3_int64 iLastPos;iLastPos154888,5589833
struct Fts3DeferredToken {Fts3DeferredToken154895,5589946
  Fts3PhraseToken *pToken;        /* Pointer to corresponding expr token */pToken154896,5589973
  int iCol;                       /* Column token must occur in */iCol154897,5590049
  Fts3DeferredToken *pNext;       /* Next in list of deferred tokens */pNext154898,5590116
  PendingList *pList;             /* Doclist is assembled here */pList154899,5590188
struct Fts3SegReader {Fts3SegReader154919,5590872
  int iIdx;                       /* Index within level, or 0x7FFFFFFF for PT */iIdx154920,5590895
  u8 bLookup;                     /* True for a lookup only */bLookup154921,5590976
  u8 rootOnly;                    /* True for a root-only reader */rootOnly154922,5591039
  sqlite3_int64 iStartBlock;      /* Rowid of first leaf block to traverse */iStartBlock154924,5591108
  sqlite3_int64 iLeafEndBlock;    /* Rowid of final leaf block to traverse */iLeafEndBlock154925,5591186
  sqlite3_int64 iEndBlock;        /* Rowid of final block in segment (or 0) */iEndBlock154926,5591264
  sqlite3_int64 iCurrentBlock;    /* Current leaf block (or 0) */iCurrentBlock154927,5591343
  char *aNode;                    /* Pointer to node data (or NULL) */aNode154929,5591410
  int nNode;                      /* Size of buffer at aNode (or 0) */nNode154930,5591481
  int nPopulate;                  /* If >0, bytes of buffer aNode[] loaded */nPopulate154931,5591552
  sqlite3_blob *pBlob;            /* If not NULL, blob handle to read node */pBlob154932,5591630
  Fts3HashElem **ppNextElem;ppNextElem154934,5591709
  int nTerm;                      /* Number of bytes in current term */nTerm154941,5591985
  char *zTerm;                    /* Pointer to current term */zTerm154942,5592057
  int nTermAlloc;                 /* Allocated size of zTerm buffer */nTermAlloc154943,5592121
  char *aDoclist;                 /* Pointer to doclist of current entry */aDoclist154944,5592192
  int nDoclist;                   /* Size of doclist in current entry */nDoclist154945,5592268
  char *pOffsetList;pOffsetList154950,5592479
  int nOffsetList;                /* For descending pending seg-readers only */nOffsetList154951,5592500
  sqlite3_int64 iDocid;iDocid154952,5592580
#define fts3SegReaderIsPending(fts3SegReaderIsPending154955,5592608
#define fts3SegReaderIsRootOnly(fts3SegReaderIsRootOnly154956,5592663
struct SegmentWriter {SegmentWriter154967,5592973
  SegmentNode *pTree;             /* Pointer to interior tree structure */pTree154968,5592996
  sqlite3_int64 iFirst;           /* First slot in %_segments written */iFirst154969,5593071
  sqlite3_int64 iFree;            /* Next free slot in %_segments */iFree154970,5593144
  char *zTerm;                    /* Pointer to previous term buffer */zTerm154971,5593213
  int nTerm;                      /* Number of bytes in zTerm */nTerm154972,5593285
  int nMalloc;                    /* Size of malloc'd buffer at zMalloc */nMalloc154973,5593350
  char *zMalloc;                  /* Malloc'd space (possibly) used for zTerm */zMalloc154974,5593425
  int nSize;                      /* Size of allocation at aData */nSize154975,5593506
  int nData;                      /* Bytes of data in aData */nData154976,5593574
  char *aData;                    /* Pointer to block from malloc() */aData154977,5593637
  i64 nLeafData;                  /* Number of bytes of leaf data written */nLeafData154978,5593708
struct SegmentNode {SegmentNode154999,5594621
  SegmentNode *pParent;           /* Parent node (or NULL for root node) */pParent155000,5594642
  SegmentNode *pRight;            /* Pointer to right-sibling */pRight155001,5594718
  SegmentNode *pLeftmost;         /* Pointer to left-most node of this depth */pLeftmost155002,5594783
  int nEntry;                     /* Number of terms written to node so far */nEntry155003,5594863
  char *zTerm;                    /* Pointer to previous term buffer */zTerm155004,5594942
  int nTerm;                      /* Number of bytes in zTerm */nTerm155005,5595014
  int nMalloc;                    /* Size of malloc'd buffer at zMalloc */nMalloc155006,5595079
  char *zMalloc;                  /* Malloc'd space (possibly) used for zTerm */zMalloc155007,5595154
  int nData;                      /* Bytes of valid data so far */nData155008,5595235
  char *aData;                    /* Node data */aData155009,5595302
#define SQL_DELETE_CONTENT SQL_DELETE_CONTENT155015,5595420
#define SQL_IS_EMPTY SQL_IS_EMPTY155016,5595461
#define SQL_DELETE_ALL_CONTENT SQL_DELETE_ALL_CONTENT155017,5595502
#define SQL_DELETE_ALL_SEGMENTS SQL_DELETE_ALL_SEGMENTS155018,5595544
#define SQL_DELETE_ALL_SEGDIR SQL_DELETE_ALL_SEGDIR155019,5595585
#define SQL_DELETE_ALL_DOCSIZE SQL_DELETE_ALL_DOCSIZE155020,5595626
#define SQL_DELETE_ALL_STAT SQL_DELETE_ALL_STAT155021,5595667
#define SQL_SELECT_CONTENT_BY_ROWID SQL_SELECT_CONTENT_BY_ROWID155022,5595708
#define SQL_NEXT_SEGMENT_INDEX SQL_NEXT_SEGMENT_INDEX155023,5595749
#define SQL_INSERT_SEGMENTS SQL_INSERT_SEGMENTS155024,5595790
#define SQL_NEXT_SEGMENTS_ID SQL_NEXT_SEGMENTS_ID155025,5595831
#define SQL_INSERT_SEGDIR SQL_INSERT_SEGDIR155026,5595872
#define SQL_SELECT_LEVEL SQL_SELECT_LEVEL155027,5595913
#define SQL_SELECT_LEVEL_RANGE SQL_SELECT_LEVEL_RANGE155028,5595954
#define SQL_SELECT_LEVEL_COUNT SQL_SELECT_LEVEL_COUNT155029,5595995
#define SQL_SELECT_SEGDIR_MAX_LEVEL SQL_SELECT_SEGDIR_MAX_LEVEL155030,5596036
#define SQL_DELETE_SEGDIR_LEVEL SQL_DELETE_SEGDIR_LEVEL155031,5596077
#define SQL_DELETE_SEGMENTS_RANGE SQL_DELETE_SEGMENTS_RANGE155032,5596118
#define SQL_CONTENT_INSERT SQL_CONTENT_INSERT155033,5596159
#define SQL_DELETE_DOCSIZE SQL_DELETE_DOCSIZE155034,5596200
#define SQL_REPLACE_DOCSIZE SQL_REPLACE_DOCSIZE155035,5596241
#define SQL_SELECT_DOCSIZE SQL_SELECT_DOCSIZE155036,5596282
#define SQL_SELECT_STAT SQL_SELECT_STAT155037,5596323
#define SQL_REPLACE_STAT SQL_REPLACE_STAT155038,5596364
#define SQL_SELECT_ALL_PREFIX_LEVEL SQL_SELECT_ALL_PREFIX_LEVEL155040,5596406
#define SQL_DELETE_ALL_TERMS_SEGDIR SQL_DELETE_ALL_TERMS_SEGDIR155041,5596447
#define SQL_DELETE_SEGDIR_RANGE SQL_DELETE_SEGDIR_RANGE155042,5596488
#define SQL_SELECT_ALL_LANGID SQL_SELECT_ALL_LANGID155043,5596529
#define SQL_FIND_MERGE_LEVEL SQL_FIND_MERGE_LEVEL155044,5596570
#define SQL_MAX_LEAF_NODE_ESTIMATE SQL_MAX_LEAF_NODE_ESTIMATE155045,5596611
#define SQL_DELETE_SEGDIR_ENTRY SQL_DELETE_SEGDIR_ENTRY155046,5596652
#define SQL_SHIFT_SEGDIR_ENTRY SQL_SHIFT_SEGDIR_ENTRY155047,5596693
#define SQL_SELECT_SEGDIR SQL_SELECT_SEGDIR155048,5596734
#define SQL_CHOMP_SEGDIR SQL_CHOMP_SEGDIR155049,5596775
#define SQL_SEGMENT_IS_APPENDABLE SQL_SEGMENT_IS_APPENDABLE155050,5596816
#define SQL_SELECT_INDEXES SQL_SELECT_INDEXES155051,5596857
#define SQL_SELECT_MXLEVEL SQL_SELECT_MXLEVEL155052,5596898
#define SQL_SELECT_LEVEL_RANGE2 SQL_SELECT_LEVEL_RANGE2155054,5596940
#define SQL_UPDATE_LEVEL_IDX SQL_UPDATE_LEVEL_IDX155055,5596981
#define SQL_UPDATE_LEVEL SQL_UPDATE_LEVEL155056,5597022
static int fts3SqlStmt(fts3SqlStmt155069,5597577
static int fts3SelectDocsize(fts3SelectDocsize155210,5603371
SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal(sqlite3Fts3SelectDoctotal155235,5604135
SQLITE_PRIVATE int sqlite3Fts3SelectDocsize(sqlite3Fts3SelectDocsize155256,5604711
static void fts3SqlExec(fts3SqlExec155272,5605269
static int fts3Writelock(Fts3Table *p){fts3Writelock155304,5606444
static sqlite3_int64 getAbsoluteLevel(getAbsoluteLevel155343,5608006
SQLITE_PRIVATE int sqlite3Fts3AllSegdirs(sqlite3Fts3AllSegdirs155375,5609073
static int fts3PendingListAppendVarint(fts3PendingListAppendVarint155422,5610667
static int fts3PendingListAppend(fts3PendingListAppend155466,5611926
static void fts3PendingListDelete(PendingList *pList){fts3PendingListDelete155521,5613408
static int fts3PendingTermsAddOne(fts3PendingTermsAddOne155528,5613552
static int fts3PendingTermsAdd(fts3PendingTermsAdd155566,5614739
static int fts3PendingTermsDocid(fts3PendingTermsDocid155644,5617069
SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){sqlite3Fts3PendingTermsClear155676,5618162
static int fts3InsertTerms(fts3InsertTerms155698,5618885
static int fts3InsertData(fts3InsertData155733,5620019
static int fts3DeleteAll(Fts3Table *p, int bContent){fts3DeleteAll155807,5622400
static int langidFromSelect(Fts3Table *p, sqlite3_stmt *pSelect){langidFromSelect155831,5623103
static void fts3DeleteTerms( fts3DeleteTerms155842,5623457
static int fts3AllocateSegdirIdx(fts3AllocateSegdirIdx155904,5625552
SQLITE_PRIVATE int sqlite3Fts3ReadBlock(sqlite3Fts3ReadBlock155975,5628391
SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){sqlite3Fts3SegmentsClose156029,5630037
static int fts3SegReaderIncrRead(Fts3SegReader *pReader){fts3SegReaderIncrRead156034,5630160
static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){fts3SegReaderRequire156058,5630841
static void fts3SegReaderSetEof(Fts3SegReader *pSeg){fts3SegReaderSetEof156074,5631274
static int fts3SegReaderNext(fts3SegReaderNext156088,5631688
static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){fts3SegReaderFirstDocid156200,5635282
static int fts3SegReaderNextDocid(fts3SegReaderNextDocid156232,5636440
SQLITE_PRIVATE int sqlite3Fts3MsrOvfl(sqlite3Fts3MsrOvfl156321,5639337
SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){sqlite3Fts3SegReaderFree156359,5640232
SQLITE_PRIVATE int sqlite3Fts3SegReaderNew(sqlite3Fts3SegReaderNew156375,5640606
static int SQLITE_CDECL fts3CompareElemByTerm(fts3CompareElemByTerm156423,5642346
SQLITE_PRIVATE int sqlite3Fts3SegReaderPending(sqlite3Fts3SegReaderPending156459,5643485
static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){fts3SegReaderCmp156555,5646658
static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){fts3SegReaderDoclistCmp156588,5647525
static int fts3SegReaderDoclistCmpRev(Fts3SegReader *pLhs, Fts3SegReader *pRhs){fts3SegReaderDoclistCmpRev156600,5647877
static int fts3SegReaderTermCmp(fts3SegReaderTermCmp156621,5648596
static void fts3SegReaderSort(fts3SegReaderSort156646,5649361
static int fts3WriteSegment(fts3WriteSegment156679,5650318
SQLITE_PRIVATE int sqlite3Fts3MaxLevel(Fts3Table *p, int *pnMax){sqlite3Fts3MaxLevel156701,5651110
static int fts3WriteSegdir(fts3WriteSegdir156720,5651527
static int fts3PrefixCompress(fts3PrefixCompress156760,5653157
static int fts3NodeAddTerm(fts3NodeAddTerm156776,5653701
static int fts3TreeFinishNode(fts3TreeFinishNode156887,5657515
static int fts3NodeWrite(fts3NodeWrite156913,5658425
static void fts3NodeFree(SegmentNode *pTree){fts3NodeFree156957,5659945
static int fts3SegWriterAdd(fts3SegWriterAdd156982,5660712
static int fts3SegWriterFlush(fts3SegWriterFlush157124,5666145
static void fts3SegWriterFree(SegmentWriter *pWriter){fts3SegWriterFree157160,5667582
static int fts3IsEmpty(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty){fts3IsEmpty157179,5668275
static int fts3SegmentMaxLevel(fts3SegmentMaxLevel157206,5669011
static int fts3SegmentIsMaxLevel(Fts3Table *p, i64 iAbsLevel, int *pbMax){fts3SegmentIsMaxLevel157242,5670191
static int fts3DeleteSegment(fts3DeleteSegment157270,5671073
static int fts3DeleteSegdir(fts3DeleteSegdir157302,5672199
static void fts3ColumnFilter(fts3ColumnFilter157359,5674193
static int fts3MsrBufferData(fts3MsrBufferData157404,5675365
SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext(sqlite3Fts3MsrIncrNext157421,5675763
static int fts3SegReaderStart(fts3SegReaderStart157489,5677586
SQLITE_PRIVATE int sqlite3Fts3SegReaderStart(sqlite3Fts3SegReaderStart157521,5678717
SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart(sqlite3Fts3MsrIncrStart157530,5679056
SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr){sqlite3Fts3MsrIncrRestart157585,5680863
SQLITE_PRIVATE int sqlite3Fts3SegReaderStep(sqlite3Fts3SegReaderStep157605,5681361
SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish(sqlite3Fts3SegReaderFinish157783,5687224
static void fts3ReadEndBlockField(fts3ReadEndBlockField157810,5688093
static int fts3PromoteSegments(fts3PromoteSegments157843,5688854
static int fts3SegmentMerge(fts3SegmentMerge157945,5692578
SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){sqlite3Fts3PendingTermsFlush158042,5696161
static void fts3EncodeIntArray(fts3EncodeIntArray158078,5697216
static void fts3DecodeIntArray(fts3DecodeIntArray158094,5697642
static void fts3InsertDocsize(fts3InsertDocsize158115,5698238
static void fts3UpdateDocTotals(fts3UpdateDocTotals158159,5699781
static int fts3DoOptimize(Fts3Table *p, int bReturnDone){fts3DoOptimize158234,5701880
static int fts3DoRebuild(Fts3Table *p){fts3DoRebuild158275,5703159
static int fts3IncrmergeCsr(fts3IncrmergeCsr158355,5705377
typedef struct IncrmergeWriter IncrmergeWriter;IncrmergeWriter158399,5706992
typedef struct NodeWriter NodeWriter;NodeWriter158400,5707040
typedef struct Blob Blob;Blob158401,5707078
typedef struct NodeReader NodeReader;NodeReader158402,5707104
struct Blob {Blob158410,5707337
  char *a;                        /* Pointer to allocation */a158411,5707351
  int n;                          /* Number of valid bytes of data in a[] */n158412,5707413
  int nAlloc;                     /* Allocated size of a[] (nAlloc>=n) */nAlloc158413,5707490
struct NodeWriter {NodeWriter158420,5707666
  sqlite3_int64 iBlock;           /* Current block id */iBlock158421,5707686
  Blob key;                       /* Last key written to the current block */key158422,5707743
  Blob block;                     /* Current block image */block158423,5707821
struct IncrmergeWriter {IncrmergeWriter158430,5708001
  int nLeafEst;                   /* Space allocated for leaf blocks */nLeafEst158431,5708026
  int nWork;                      /* Number of leaf pages flushed */nWork158432,5708098
  sqlite3_int64 iAbsLevel;        /* Absolute level of input segments */iAbsLevel158433,5708167
  int iIdx;                       /* Index of *output* segment in iAbsLevel+1 */iIdx158434,5708240
  sqlite3_int64 iStart;           /* Block number of first allocated block */iStart158435,5708321
  sqlite3_int64 iEnd;             /* Block number of last allocated block */iEnd158436,5708399
  sqlite3_int64 nLeafData;        /* Bytes of leaf page data so far */nLeafData158437,5708476
  u8 bNoLeafData;                 /* If true, store 0 for segment size */bNoLeafData158438,5708547
  NodeWriter aNodeWriter[FTS_MAX_APPENDABLE_HEIGHT];aNodeWriter158439,5708621
struct NodeReader {NodeReader158450,5708882
  const char *aNode;aNode158451,5708902
  int nNode;nNode158452,5708923
  int iOff;                       /* Current offset within aNode[] */iOff158453,5708936
  sqlite3_int64 iChild;           /* Pointer to child node */iChild158456,5709068
  Blob term;                      /* Current term */term158457,5709130
  const char *aDoclist;           /* Pointer to doclist */aDoclist158458,5709183
  int nDoclist;                   /* Size of doclist in bytes */nDoclist158459,5709242
static void blobGrowBuffer(Blob *pBlob, int nMin, int *pRc){blobGrowBuffer158471,5709713
static int nodeReaderNext(NodeReader *p){nodeReaderNext158494,5710457
static void nodeReaderRelease(NodeReader *p){nodeReaderRelease158532,5711564
static int nodeReaderInit(NodeReader *p, const char *aNode, int nNode){nodeReaderInit158543,5711896
static int fts3IncrmergePush(fts3IncrmergePush158569,5712734
static int fts3AppendToNode(fts3AppendToNode158670,5716520
static int fts3IncrmergeAppend(fts3IncrmergeAppend158720,5718350
static void fts3IncrmergeRelease(fts3IncrmergeRelease158805,5721465
static int fts3TermCmp(fts3TermCmp158895,5725042
static int fts3IsAppendable(Fts3Table *p, sqlite3_int64 iEnd, int *pbRes){fts3IsAppendable158921,5725832
static int fts3IncrmergeLoad(fts3IncrmergeLoad158952,5727001
static int fts3IncrmergeOutputIdx( fts3IncrmergeOutputIdx159084,5731952
static int fts3IncrmergeWriter( fts3IncrmergeWriter159129,5733590
static int fts3RemoveSegdirEntry(fts3RemoveSegdirEntry159194,5736092
static int fts3RepackSegdirLevel(fts3RepackSegdirLevel159218,5736912
static void fts3StartNode(Blob *pNode, int iHeight, sqlite3_int64 iChild){fts3StartNode159274,5738601
static int fts3TruncateNode(fts3TruncateNode159293,5739272
static int fts3TruncateSegment(fts3TruncateSegment159348,5741206
static int fts3IncrmergeChomp(fts3IncrmergeChomp159433,5744306
static int fts3IncrmergeHintStore(Fts3Table *p, Blob *pHint){fts3IncrmergeHintStore159484,5745878
static int fts3IncrmergeHintLoad(Fts3Table *p, Blob *pHint){fts3IncrmergeHintLoad159507,5746629
static void fts3IncrmergeHintPush(fts3IncrmergeHintPush159543,5747727
static int fts3IncrmergeHintPop(Blob *pHint, i64 *piAbsLevel, int *pnInput){fts3IncrmergeHintPop159564,5748593
SQLITE_PRIVATE int sqlite3Fts3Incrmerge(Fts3Table *p, int nMerge, int nMin){sqlite3Fts3Incrmerge159590,5749409
static int fts3Getint(const char **pz){fts3Getint159742,5755293
static int fts3DoIncrmerge(fts3DoIncrmerge159759,5755749
static int fts3DoAutoincrmerge(fts3DoAutoincrmerge159802,5756776
static u64 fts3ChecksumEntry(fts3ChecksumEntry159830,5757609
static u64 fts3ChecksumIndex(fts3ChecksumIndex159860,5758712
static int fts3IntegrityCheck(Fts3Table *p, int *pbOk){fts3IntegrityCheck159934,5760876
static int fts3DoIntegrityCheck(fts3DoIntegrityCheck160048,5765080
static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){fts3SpecialInsert160066,5765525
SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){sqlite3Fts3FreeDeferredDoclists160106,5766956
SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){sqlite3Fts3FreeDeferredTokens160118,5767296
SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){sqlite3Fts3CacheDeferredDoclists160137,5767895
SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList(sqlite3Fts3DeferredTokenList160190,5769956
SQLITE_PRIVATE int sqlite3Fts3DeferToken(sqlite3Fts3DeferToken160220,5770537
static int fts3DeleteByRowid(fts3DeleteByRowid160248,5771376
SQLITE_PRIVATE int sqlite3Fts3UpdateMethod(sqlite3Fts3UpdateMethod160297,5772808
SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){sqlite3Fts3Optimize160443,5778135
#define FTS3_MATCHINFO_NPHRASE FTS3_MATCHINFO_NPHRASE160486,5779386
#define FTS3_MATCHINFO_NCOL FTS3_MATCHINFO_NCOL160487,5779444
#define FTS3_MATCHINFO_NDOC FTS3_MATCHINFO_NDOC160488,5779502
#define FTS3_MATCHINFO_AVGLENGTH FTS3_MATCHINFO_AVGLENGTH160489,5779560
#define FTS3_MATCHINFO_LENGTH FTS3_MATCHINFO_LENGTH160490,5779622
#define FTS3_MATCHINFO_LCS FTS3_MATCHINFO_LCS160491,5779684
#define FTS3_MATCHINFO_HITS FTS3_MATCHINFO_HITS160492,5779746
#define FTS3_MATCHINFO_LHITS FTS3_MATCHINFO_LHITS160493,5779818
#define FTS3_MATCHINFO_LHITS_BM FTS3_MATCHINFO_LHITS_BM160494,5779888
#define FTS3_MATCHINFO_DEFAULT FTS3_MATCHINFO_DEFAULT160499,5780027
typedef struct LoadDoclistCtx LoadDoclistCtx;LoadDoclistCtx160506,5780179
struct LoadDoclistCtx {LoadDoclistCtx160507,5780225
  Fts3Cursor *pCsr;               /* FTS3 Cursor */pCsr160508,5780249
  int nPhrase;                    /* Number of phrases seen so far */nPhrase160509,5780301
  int nToken;                     /* Number of tokens seen so far */nToken160510,5780371
typedef struct SnippetIter SnippetIter;SnippetIter160517,5780550
typedef struct SnippetPhrase SnippetPhrase;SnippetPhrase160518,5780590
typedef struct SnippetFragment SnippetFragment;SnippetFragment160519,5780634
struct SnippetIter {SnippetIter160521,5780683
  Fts3Cursor *pCsr;               /* Cursor snippet is being generated from */pCsr160522,5780704
  int iCol;                       /* Extract snippet from this column */iCol160523,5780783
  int nSnippet;                   /* Requested snippet length (in tokens) */nSnippet160524,5780856
  int nPhrase;                    /* Number of phrases in query */nPhrase160525,5780933
  SnippetPhrase *aPhrase;         /* Array of size nPhrase */aPhrase160526,5781000
  int iCurrent;                   /* First token of current snippet */iCurrent160527,5781062
struct SnippetPhrase {SnippetPhrase160530,5781137
  int nToken;                     /* Number of tokens in phrase */nToken160531,5781160
  char *pList;                    /* Pointer to start of phrase position list */pList160532,5781227
  int iHead;                      /* Next value in position list */iHead160533,5781308
  char *pHead;                    /* Position list data following iHead */pHead160534,5781376
  int iTail;                      /* Next value in trailing position list */iTail160535,5781451
  char *pTail;                    /* Position list data following iTail */pTail160536,5781528
struct SnippetFragment {SnippetFragment160539,5781607
  int iCol;                       /* Column snippet is extracted from */iCol160540,5781632
  int iPos;                       /* Index of first token in snippet */iPos160541,5781705
  u64 covered;                    /* Mask of query phrases covered */covered160542,5781777
  u64 hlmask;                     /* Mask of snippet terms to highlight */hlmask160543,5781847
typedef struct MatchInfo MatchInfo;MatchInfo160550,5782062
struct MatchInfo {MatchInfo160551,5782098
  Fts3Cursor *pCursor;            /* FTS3 Cursor */pCursor160552,5782117
  int nCol;                       /* Number of columns in table */nCol160553,5782169
  int nPhrase;                    /* Number of matchable phrases in query */nPhrase160554,5782236
  sqlite3_int64 nDoc;             /* Number of docs in database */nDoc160555,5782313
  char flag;flag160556,5782380
  u32 *aMatchinfo;                /* Pre-allocated buffer */aMatchinfo160557,5782393
struct MatchinfoBuffer {MatchinfoBuffer160565,5782630
  u8 aRef[3];aRef160566,5782655
  int nElem;nElem160567,5782669
  int bGlobal;                    /* Set if global data is loaded */bGlobal160568,5782682
  char *zMatchinfo;zMatchinfo160569,5782751
  u32 aMatchinfo[1];aMatchinfo160570,5782771
typedef struct StrBuffer StrBuffer;StrBuffer160579,5783018
struct StrBuffer {StrBuffer160580,5783054
  char *z;                        /* Pointer to buffer containing string */z160581,5783073
  int n;                          /* Length of z in bytes (excl. nul-term) */n160582,5783149
  int nAlloc;                     /* Allocated size of buffer z in bytes */nAlloc160583,5783227
static MatchinfoBuffer *fts3MIBufferNew(int nElem, const char *zMatchinfo){fts3MIBufferNew160594,5783474
static void fts3MIBufferFree(void *p){fts3MIBufferFree160613,5784077
static void (*fts3MIBufferAlloc(MatchinfoBuffer *p, u32 **paOut))(void*){fts3MIBufferAlloc160630,5784482
static void fts3MIBufferSetGlobal(MatchinfoBuffer *p){fts3MIBufferSetGlobal160655,5785056
SQLITE_PRIVATE void sqlite3Fts3MIBufferFree(MatchinfoBuffer *p){sqlite3Fts3MIBufferFree160663,5785284
static void fts3GetDeltaPosition(char **pp, int *piPos){fts3GetDeltaPosition160698,5786335
static int fts3ExprIterate2(fts3ExprIterate2160707,5786527
static int fts3ExprIterate(fts3ExprIterate160739,5787781
static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3ExprLoadDoclistsCb160754,5788343
static int fts3ExprLoadDoclists(fts3ExprLoadDoclists160777,5789048
static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3ExprPhraseCountCb160791,5789614
static int fts3ExprPhraseCount(Fts3Expr *pExpr){fts3ExprPhraseCount160796,5789758
static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){fts3SnippetAdvance160807,5790102
static int fts3SnippetNextCandidate(SnippetIter *pIter){fts3SnippetNextCandidate160829,5790528
static void fts3SnippetDetails(fts3SnippetDetails160875,5791869
static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3SnippetFindPositions160928,5793657
static int fts3BestSnippet(fts3BestSnippet160970,5795015
static int fts3StringAppend(fts3StringAppend161056,5797884
static int fts3SnippetShift(fts3SnippetShift161108,5799744
static int fts3SnippetText(fts3SnippetText161172,5802403
static int fts3ColumnlistCount(char **ppCollist){fts3ColumnlistCount161300,5807983
static void fts3ExprLHits(fts3ExprLHits161318,5808347
static void fts3ExprLHitGather(fts3ExprLHitGather161354,5809421
static int fts3ExprGlobalHitsCb(fts3ExprGlobalHitsCb161396,5810941
static int fts3ExprLocalHitsCb(fts3ExprLocalHitsCb161412,5811539
static int fts3MatchinfoCheck(fts3MatchinfoCheck161435,5812150
static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){fts3MatchinfoSize161456,5812732
static int fts3MatchinfoSelectDoctotal(fts3MatchinfoSelectDoctotal161489,5813477
typedef struct LcsIterator LcsIterator;LcsIterator161521,5814309
struct LcsIterator {LcsIterator161522,5814349
  Fts3Expr *pExpr;                /* Pointer to phrase expression */pExpr161523,5814370
  int iPosOffset;                 /* Tokens count up to end of this phrase */iPosOffset161524,5814439
  char *pRead;                    /* Cursor used to iterate through aDoclist */pRead161525,5814517
  int iPos;                       /* Current position */iPos161526,5814597
#define LCS_ITERATOR_FINISHED LCS_ITERATOR_FINISHED161533,5814795
static int fts3MatchinfoLcsCb(fts3MatchinfoLcsCb161535,5814838
static int fts3LcsIteratorAdvance(LcsIterator *pIter){fts3LcsIteratorAdvance161550,5815370
static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){fts3MatchinfoLcs161578,5816148
static int fts3MatchinfoValues(fts3MatchinfoValues161662,5819036
static void fts3GetMatchinfo(fts3GetMatchinfo161774,5822530
SQLITE_PRIVATE void sqlite3Fts3Snippet(sqlite3Fts3Snippet161859,5825213
typedef struct TermOffset TermOffset;TermOffset161958,5828777
typedef struct TermOffsetCtx TermOffsetCtx;TermOffsetCtx161959,5828815
struct TermOffset {TermOffset161961,5828860
  char *pList;                    /* Position-list */pList161962,5828880
  int iPos;                       /* Position just read from pList */iPos161963,5828934
  int iOff;                       /* Offset of this term from read positions */iOff161964,5829004
struct TermOffsetCtx {TermOffsetCtx161967,5829088
  Fts3Cursor *pCsr;pCsr161968,5829111
  int iCol;                       /* Column of table to populate aTerm for */iCol161969,5829131
  int iTerm;iTerm161970,5829209
  sqlite3_int64 iDocid;iDocid161971,5829222
  TermOffset *aTerm;aTerm161972,5829246
static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3ExprTermOffsetInit161978,5829357
SQLITE_PRIVATE void sqlite3Fts3Offsets(sqlite3Fts3Offsets162007,5830222
SQLITE_PRIVATE void sqlite3Fts3Matchinfo(sqlite3Fts3Matchinfo162145,5834776
static const unsigned char sqlite3Utf8Trans1[] = {sqlite3Utf8Trans1162207,5836505
#define READ_UTF8(READ_UTF8162218,5836960
#define WRITE_UTF8(WRITE_UTF8162230,5837575
typedef struct unicode_tokenizer unicode_tokenizer;unicode_tokenizer162252,5838645
typedef struct unicode_cursor unicode_cursor;unicode_cursor162253,5838697
struct unicode_tokenizer {unicode_tokenizer162255,5838744
  sqlite3_tokenizer base;base162256,5838771
  int bRemoveDiacritic;bRemoveDiacritic162257,5838797
  int nException;nException162258,5838821
  int *aiException;aiException162259,5838839
struct unicode_cursor {unicode_cursor162262,5838863
  sqlite3_tokenizer_cursor base;base162263,5838887
  const unsigned char *aInput;    /* Input text being tokenized */aInput162264,5838920
  int nInput;                     /* Size of aInput[] in bytes */nInput162265,5838987
  int iOff;                       /* Current offset within aInput[] */iOff162266,5839053
  int iToken;                     /* Index of next token to be returned */iToken162267,5839124
  char *zToken;                   /* storage for current token */zToken162268,5839199
  int nAlloc;                     /* space allocated at zToken */nAlloc162269,5839265
static int unicodeDestroy(sqlite3_tokenizer *pTokenizer){unicodeDestroy162276,5839395
static int unicodeAddExceptions(unicodeAddExceptions162303,5840542
static int unicodeIsException(unicode_tokenizer *p, int iCode){unicodeIsException162357,5842120
static int unicodeIsAlnum(unicode_tokenizer *p, int iCode){unicodeIsAlnum162382,5842648
static int unicodeCreate(unicodeCreate162390,5842889
static int unicodeOpen(unicodeOpen162440,5844367
static int unicodeClose(sqlite3_tokenizer_cursor *pCursor){unicodeClose162472,5845169
static int unicodeNext(unicodeNext162483,5845487
SQLITE_PRIVATE void sqlite3Fts3UnicodeTokenizer(sqlite3_tokenizer_module const **ppModule){sqlite3Fts3UnicodeTokenizer162551,5847729
SQLITE_PRIVATE int sqlite3FtsUnicodeIsalnum(int c){sqlite3FtsUnicodeIsalnum162598,5849065
static int remove_diacritic(int c){remove_diacritic162730,5856062
SQLITE_PRIVATE int sqlite3FtsUnicodeIsdiacritic(int c){sqlite3FtsUnicodeIsdiacritic162780,5858103
SQLITE_PRIVATE int sqlite3FtsUnicodeFold(int c, int bRemoveDiacritic){sqlite3FtsUnicodeFold162799,5858696
typedef sqlite3_int64 i64;i64163006,5867757
typedef sqlite3_uint64 u64;u64163007,5867784
typedef unsigned char u8;u8163008,5867812
typedef unsigned short u16;u16163009,5867838
typedef unsigned int u32;u32163010,5867866
# define UNUSED_PARAMETER(UNUSED_PARAMETER163016,5867991
typedef struct Rtree Rtree;Rtree163019,5868038
typedef struct RtreeCursor RtreeCursor;RtreeCursor163020,5868066
typedef struct RtreeNode RtreeNode;RtreeNode163021,5868106
typedef struct RtreeCell RtreeCell;RtreeCell163022,5868142
typedef struct RtreeConstraint RtreeConstraint;RtreeConstraint163023,5868178
typedef struct RtreeMatchArg RtreeMatchArg;RtreeMatchArg163024,5868226
typedef struct RtreeGeomCallback RtreeGeomCallback;RtreeGeomCallback163025,5868270
typedef union RtreeCoord RtreeCoord;RtreeCoord163026,5868322
typedef struct RtreeSearchPoint RtreeSearchPoint;RtreeSearchPoint163027,5868359
#define RTREE_MAX_DIMENSIONS RTREE_MAX_DIMENSIONS163030,5868482
#define HASHSIZE HASHSIZE163036,5868664
#define RTREE_DEFAULT_ROWEST RTREE_DEFAULT_ROWEST163045,5869051
#define RTREE_MIN_ROWEST RTREE_MIN_ROWEST163046,5869088
struct Rtree {Rtree163051,5869167
  sqlite3_vtab base;          /* Base class.  Must be first */base163052,5869182
  sqlite3 *db;                /* Host database connection */db163053,5869245
  int iNodeSize;              /* Size in bytes of each node in the node table */iNodeSize163054,5869306
  u8 nDim;                    /* Number of dimensions */nDim163055,5869387
  u8 nDim2;                   /* Twice the number of dimensions */nDim2163056,5869444
  u8 eCoordType;              /* RTREE_COORD_REAL32 or RTREE_COORD_INT32 */eCoordType163057,5869511
  u8 nBytesPerCell;           /* Bytes consumed per cell */nBytesPerCell163058,5869587
  u8 inWrTrans;               /* True if inside write transaction */inWrTrans163059,5869647
  int iDepth;                 /* Current depth of the r-tree structure */iDepth163060,5869716
  char *zDb;                  /* Name of database containing r-tree table */zDb163061,5869790
  char *zName;                /* Name of r-tree table */ zName163062,5869867
  u32 nBusy;                  /* Current number of users of this structure */nBusy163063,5869925
  i64 nRowEst;                /* Estimated number of rows in this table */nRowEst163064,5870003
  u32 nCursor;                /* Number of open cursors */nCursor163065,5870078
  RtreeNode *pDeleted;pDeleted163072,5870414
  int iReinsertHeight;        /* Height of sub-trees Reinsert() has run on */iReinsertHeight163073,5870437
  sqlite3_blob *pNodeBlob;pNodeBlob163076,5870545
  sqlite3_stmt *pWriteNode;pWriteNode163079,5870636
  sqlite3_stmt *pDeleteNode;pDeleteNode163080,5870664
  sqlite3_stmt *pReadRowid;pReadRowid163083,5870758
  sqlite3_stmt *pWriteRowid;pWriteRowid163084,5870786
  sqlite3_stmt *pDeleteRowid;pDeleteRowid163085,5870815
  sqlite3_stmt *pReadParent;pReadParent163088,5870911
  sqlite3_stmt *pWriteParent;pWriteParent163089,5870940
  sqlite3_stmt *pDeleteParent;pDeleteParent163090,5870970
  RtreeNode *aHash[HASHSIZE]; /* Hash table of in-memory nodes. */ aHash163092,5871002
#define RTREE_COORD_REAL32 RTREE_COORD_REAL32163096,5871118
#define RTREE_COORD_INT32 RTREE_COORD_INT32163097,5871147
  typedef sqlite3_int64 RtreeDValue;       /* High accuracy coordinate */RtreeDValue163105,5871367
  typedef int RtreeValue;                  /* Low accuracy coordinate */RtreeValue163106,5871441
# define RTREE_ZERO RTREE_ZERO163107,5871514
  typedef double RtreeDValue;              /* High accuracy coordinate */RtreeDValue163109,5871542
  typedef float RtreeValue;                /* Low accuracy coordinate */RtreeValue163110,5871616
# define RTREE_ZERO RTREE_ZERO163111,5871689
struct RtreeSearchPoint {RtreeSearchPoint163123,5872125
  RtreeDValue rScore;    /* The score for this node.  Smallest goes first. */rScore163124,5872151
  sqlite3_int64 id;      /* Node ID */id163125,5872229
  u8 iLevel;             /* 0=entries.  1=leaf node.  2+ for higher */iLevel163126,5872268
  u8 eWithin;            /* PARTLY_WITHIN or FULLY_WITHIN */eWithin163127,5872339
  u8 iCell;              /* Cell index within the node */iCell163128,5872400
#define RTREE_MINCELLS(RTREE_MINCELLS163140,5872736
#define RTREE_REINSERT(RTREE_REINSERT163141,5872806
#define RTREE_MAXCELLS RTREE_MAXCELLS163142,5872850
#define RTREE_MAX_DEPTH RTREE_MAX_DEPTH163151,5873193
#define RTREE_CACHE_SZ RTREE_CACHE_SZ163159,5873447
struct RtreeCursor {RtreeCursor163164,5873508
  sqlite3_vtab_cursor base;         /* Base class.  Must be first */base163165,5873529
  u8 atEOF;                         /* True if at end of search */atEOF163166,5873598
  u8 bPoint;                        /* True if sPoint is valid */bPoint163167,5873665
  int iStrategy;                    /* Copy of idxNum search parameter */iStrategy163168,5873731
  int nConstraint;                  /* Number of entries in aConstraint */nConstraint163169,5873805
  RtreeConstraint *aConstraint;     /* Search constraints. */aConstraint163170,5873880
  int nPointAlloc;                  /* Number of slots allocated for aPoint[] */nPointAlloc163171,5873942
  int nPoint;                       /* Number of slots used in aPoint[] */nPoint163172,5874023
  int mxLevel;                      /* iLevel value for root of the tree */mxLevel163173,5874098
  RtreeSearchPoint *aPoint;         /* Priority queue for search points */aPoint163174,5874174
  RtreeSearchPoint sPoint;          /* Cached next search point */sPoint163175,5874249
  RtreeNode *aNode[RTREE_CACHE_SZ]; /* Rtree node cache */aNode163176,5874316
  u32 anQueue[RTREE_MAX_DEPTH+1];   /* Number of queued entries by iLevel */anQueue163177,5874375
#define RTREE_OF_CURSOR(RTREE_OF_CURSOR163181,5874496
union RtreeCoord {RtreeCoord163187,5874700
  RtreeValue f;      /* Floating point value */f163188,5874719
  int i;             /* Integer value */i163189,5874767
  u32 u;             /* Unsigned for byte-order conversions */u163190,5874808
# define DCOORD(DCOORD163200,5875153
# define DCOORD(DCOORD163202,5875205
struct RtreeConstraint {RtreeConstraint163212,5875462
  int iCoord;                     /* Index of constrained coordinate */iCoord163213,5875487
  int op;                         /* Constraining operation */op163214,5875559
    RtreeDValue rValue;             /* Constraint value. */rValue163216,5875632
    int (*xGeom)(sqlite3_rtree_geometry*,int,RtreeDValue*,int*);xGeom163217,5875692
    int (*xQueryFunc)(sqlite3_rtree_query_info*);xQueryFunc163218,5875757
  } u;u163219,5875807
  sqlite3_rtree_query_info *pInfo;  /* xGeom and xQueryFunc argument */pInfo163220,5875814
#define RTREE_EQ RTREE_EQ163224,5875935
#define RTREE_LE RTREE_LE163225,5875969
#define RTREE_LT RTREE_LT163226,5876003
#define RTREE_GE RTREE_GE163227,5876037
#define RTREE_GT RTREE_GT163228,5876071
#define RTREE_MATCH RTREE_MATCH163229,5876105
#define RTREE_QUERY RTREE_QUERY163230,5876184
struct RtreeNode {RtreeNode163236,5876297
  RtreeNode *pParent;         /* Parent node */pParent163237,5876316
  i64 iNode;                  /* The node number */iNode163238,5876364
  int nRef;                   /* Number of references to this node */nRef163239,5876416
  int isDirty;                /* True if the node needs to be written to disk */isDirty163240,5876486
  u8 *zData;                  /* Content of the node, as should be on disk */zData163241,5876567
  RtreeNode *pNext;           /* Next node in this hash collision chain */pNext163242,5876645
#define NCELL(NCELL163246,5876768
struct RtreeCell {RtreeCell163251,5876870
  i64 iRowid;                                 /* Node or entry ID */iRowid163252,5876889
  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];  /* Bounding box coordinates */aCoord163253,5876958
struct RtreeGeomCallback {RtreeGeomCallback163271,5877649
  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);xGeom163272,5877676
  int (*xQueryFunc)(sqlite3_rtree_query_info*);xQueryFunc163273,5877742
  void (*xDestructor)(void*);xDestructor163274,5877790
  void *pContext;pContext163275,5877820
#define RTREE_GEOMETRY_MAGIC RTREE_GEOMETRY_MAGIC163284,5878066
struct RtreeMatchArg {RtreeMatchArg163292,5878368
  u32 magic;                  /* Always RTREE_GEOMETRY_MAGIC */magic163293,5878391
  RtreeGeomCallback cb;       /* Info about the callback functions */cb163294,5878455
  int nParam;                 /* Number of parameters to the SQL function */nParam163295,5878525
  sqlite3_value **apSqlParam; /* Original SQL parameter values */apSqlParam163296,5878602
  RtreeDValue aParam[1];      /* Values for parameters to the SQL function */aParam163297,5878668
# define MAX(MAX163301,5878762
# define MIN(MIN163304,5878823
# define GCC_VERSION GCC_VERSION163310,5879025
# define GCC_VERSION GCC_VERSION163312,5879111
# define CLANG_VERSION CLANG_VERSION163319,5879328
# define CLANG_VERSION CLANG_VERSION163322,5879439
# define testcase(testcase163330,5879616
# define SQLITE_BYTEORDER SQLITE_BYTEORDER163347,5880278
# define SQLITE_BYTEORDER SQLITE_BYTEORDER163349,5880356
# define SQLITE_BYTEORDER SQLITE_BYTEORDER163351,5880396
# define MSVC_VERSION MSVC_VERSION163359,5880642
# define MSVC_VERSION MSVC_VERSION163361,5880679
static int readInt16(u8 *p){readInt16163369,5880848
static void readCoord(u8 *p, RtreeCoord *pCoord){readCoord163372,5880906
static i64 readInt64(u8 *p){readInt64163389,5881442
static void writeInt16(u8 *p, int i){writeInt16163421,5882247
static int writeCoord(u8 *p, RtreeCoord *pCoord){writeCoord163425,5882333
static int writeInt64(u8 *p, i64 i){writeInt64163448,5882975
static void nodeReference(RtreeNode *p){nodeReference163473,5883568
static void nodeZero(Rtree *pRtree, RtreeNode *p){nodeZero163482,5883704
static int nodeHash(i64 iNode){nodeHash163491,5883925
static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){nodeHashLookup163499,5884097
static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){nodeHashInsert163508,5884311
static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){nodeHashDelete163519,5884575
static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){nodeNew163535,5885096
static void nodeBlobReset(Rtree *pRtree){nodeBlobReset163552,5885536
static int nodeAcquire(nodeAcquire163563,5885808
static void nodeOverwriteCell(nodeOverwriteCell163667,5888999
static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){nodeDeleteCell163685,5889575
static int nodeInsertCell(nodeInsertCell163700,5890100
static int nodeWrite(Rtree *pRtree, RtreeNode *pNode){nodeWrite163724,5890813
static int nodeRelease(Rtree *pRtree, RtreeNode *pNode){nodeRelease163749,5891535
static i64 nodeGetRowid(nodeGetRowid163776,5892225
static void nodeGetCoord(nodeGetCoord163788,5892609
static void nodeGetCell(nodeGetCell163802,5893177
static int rtreeCreate(rtreeCreate163833,5894095
static int rtreeConnect(rtreeConnect163846,5894344
static void rtreeReference(Rtree *pRtree){rtreeReference163859,5894587
static void rtreeRelease(Rtree *pRtree){rtreeRelease163867,5894766
static int rtreeDisconnect(sqlite3_vtab *pVtab){rtreeDisconnect163888,5895367
static int rtreeDestroy(sqlite3_vtab *pVtab){rtreeDestroy163896,5895525
static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){rtreeOpen163924,5896136
static void freeCursorConstraints(RtreeCursor *pCsr){freeCursorConstraints163945,5896615
static int rtreeClose(sqlite3_vtab_cursor *cur){rtreeClose163963,5897131
static int rtreeEof(sqlite3_vtab_cursor *cur){rtreeEof163983,5897714
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD164000,5898413
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD164006,5898760
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD164012,5899055
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD164020,5899482
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD164026,5899754
static int rtreeCallbackConstraint(rtreeCallbackConstraint164038,5900205
static void rtreeNonleafConstraint(rtreeNonleafConstraint164114,5903527
static void rtreeLeafConstraint(rtreeLeafConstraint164159,5905276
static int nodeRowidIndex(nodeRowidIndex164186,5906396
static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){nodeParentIndex164208,5906852
static int rtreeSearchPointCompare(rtreeSearchPointCompare164227,5907595
static void rtreeSearchPointSwap(RtreeCursor *p, int i, int j){rtreeSearchPointSwap164241,5907924
static RtreeSearchPoint *rtreeSearchPointFirst(RtreeCursor *pCur){rtreeSearchPointFirst164262,5908421
static RtreeNode *rtreeNodeOfFirstSearchPoint(RtreeCursor *pCur, int *pRC){rtreeNodeOfFirstSearchPoint164269,5908635
static RtreeSearchPoint *rtreeEnqueue(rtreeEnqueue164285,5909089
static RtreeSearchPoint *rtreeSearchPointNew(rtreeSearchPointNew164320,5910056
# define RTREE_QUEUE_TRACE(RTREE_QUEUE_TRACE164382,5911831
static void rtreeSearchPointPop(RtreeCursor *p){rtreeSearchPointPop164387,5911946
static int rtreeStepToLeaf(RtreeCursor *pCur){rtreeStepToLeaf164435,5913182
static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){rtreeNext164505,5915287
static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){rtreeRowid164519,5915653
static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){rtreeColumn164533,5916087
static int findLeafNode(findLeafNode164567,5917193
static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){deserializeGeometry164593,5918076
static int rtreeFilter(rtreeFilter164639,5919647
static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){rtreeBestIndex164774,5924209
static RtreeDValue cellArea(Rtree *pRtree, RtreeCell *p){cellArea164859,5927197
static RtreeDValue cellMargin(Rtree *pRtree, RtreeCell *p){cellMargin164889,5928203
static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){cellUnion164902,5928493
static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){cellContains164923,5929131
static RtreeDValue cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){cellGrowth164941,5929623
static RtreeDValue cellOverlap(cellOverlap164950,5929891
static int ChooseLeaf(ChooseLeaf164982,5930599
static int AdjustTree(AdjustTree165042,5932225
static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){rowidWrite165071,5932963
static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){parentWrite165081,5933302
static void SortByDistance(SortByDistance165108,5934206
static void SortByDimension(SortByDimension165174,5935891
static int splitNodeStartree(splitNodeStartree165233,5937526
static int updateMapping(updateMapping165331,5940167
static int SplitNode(SplitNode165350,5940641
static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){fixLeafParent165497,5944629
static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){removeNode165529,5945921
static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){fixBoundingBox165578,5947178
static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){deleteCell165605,5947971
static int Reinsert(Reinsert165636,5948811
static int rtreeInsertCell(rtreeInsertCell165741,5951749
static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){reinsertNodeContent165776,5952630
static int newRowid(Rtree *pRtree, i64 *piRowid){newRowid165805,5953388
static int rtreeDeleteRowid(Rtree *pRtree, sqlite3_int64 iDelete){rtreeDeleteRowid165818,5953758
#define RNDTOWARDS RNDTOWARDS165902,5956292
#define RNDAWAY RNDAWAY165903,5956360
static RtreeValue rtreeValueDown(sqlite3_value *v){rtreeValueDown165910,5956614
static RtreeValue rtreeValueUp(sqlite3_value *v){rtreeValueUp165918,5956806
static int rtreeConstraintError(Rtree *pRtree, int iCol){rtreeConstraintError165941,5957636
static int rtreeUpdate(rtreeUpdate165979,5958629
static int rtreeBeginTransaction(sqlite3_vtab *pVtab){rtreeBeginTransaction166110,5962763
static int rtreeEndTransaction(sqlite3_vtab *pVtab){rtreeEndTransaction166121,5963070
static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){rtreeRename166131,5963291
static int rtreeQueryStat1(sqlite3 *db, Rtree *pRtree){rtreeQueryStat1166155,5964080
static sqlite3_module rtreeModule = {rtreeModule166194,5965061
static int rtreeSqlInit(rtreeSqlInit166220,5966489
  #define N_STATEMENT N_STATEMENT166229,5966633
static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){getIntFromStmt166299,5969011
static int getNodeSize(getNodeSize166329,5970154
static int rtreeInit(rtreeInit166373,5971479
static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){rtreenode166481,5975227
static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){rtreedepth166536,5976906
SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){sqlite3RtreeInit166553,5977460
static void rtreeFreeCallback(void *p){rtreeFreeCallback166584,5978463
static void rtreeMatchArgFree(void *pArg){rtreeMatchArgFree166593,5978714
static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){geomCallback166616,5979518
SQLITE_API int sqlite3_rtree_geometry_callback(sqlite3_rtree_geometry_callback166654,5980669
SQLITE_API int sqlite3_rtree_query_callback(sqlite3_rtree_query_callback166678,5981619
__declspec(dllexport)__declspec166701,5982558
# define SQLITE_MAX_LIKE_PATTERN_LENGTH SQLITE_MAX_LIKE_PATTERN_LENGTH166769,5984453
static void xFree(void *p){xFree166775,5984584
static const unsigned char icuUtf8Trans1[] = {icuUtf8Trans1166784,5984792
#define SQLITE_ICU_READ_UTF8(SQLITE_ICU_READ_UTF8166795,5985243
#define SQLITE_ICU_SKIP_UTF8(SQLITE_ICU_SKIP_UTF8166804,5985675
static int icuLikeCompare(icuLikeCompare166816,5986101
static void icuLikeFunc(icuLikeFunc166904,5988575
static void icuFunctionError(icuFunctionError166950,5989905
static void icuRegexpDelete(void *p){icuRegexpDelete166965,5990427
static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){icuRegexpFunc166989,5991186
static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){icuCaseFunc16167072,5993728
static void icuCollationDel(void *pCtx){icuCollationDel167130,5995476
static int icuCollationColl(icuCollationColl167139,5995715
static void icuLoadCollation(icuLoadCollation167171,5996629
SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){sqlite3IcuInit167211,5997779
__declspec(dllexport)__declspec167250,5999527
typedef struct IcuTokenizer IcuTokenizer;IcuTokenizer167292,6000662
typedef struct IcuCursor IcuCursor;IcuCursor167293,6000704
struct IcuTokenizer {IcuTokenizer167295,6000741
  sqlite3_tokenizer base;base167296,6000763
  char *zLocale;zLocale167297,6000789
struct IcuCursor {IcuCursor167300,6000810
  sqlite3_tokenizer_cursor base;base167301,6000829
  UBreakIterator *pIter;      /* ICU break-iterator object */pIter167303,6000863
  int nChar;                  /* Number of UChar elements in pInput */nChar167304,6000925
  UChar *aChar;               /* Copy of input using utf-16 encoding */aChar167305,6000996
  int *aOffset;               /* Offsets of each character in utf-8 input */aOffset167306,6001068
  int nBuffer;nBuffer167308,6001146
  char *zBuffer;zBuffer167309,6001161
  int iToken;iToken167311,6001179
static int icuCreate(icuCreate167317,6001239
static int icuDestroy(sqlite3_tokenizer *pTokenizer){icuDestroy167347,6001879
static int icuOpen(icuOpen167359,6002228
static int icuClose(sqlite3_tokenizer_cursor *pCursor){icuClose167431,6004040
static int icuNext(icuNext167442,6004301
static const sqlite3_tokenizer_module icuTokenizerModule = {icuTokenizerModule167507,6006029
SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule(sqlite3Fts3IcuTokenizerModule167520,6006513
#define _SQLITE3RBU_H_SQLITE3RBU_H167889,6023518
typedef struct sqlite3rbu sqlite3rbu;sqlite3rbu167897,6023651
#define SQLITE_RBU_STATE_OAL SQLITE_RBU_STATE_OAL168134,6034568
#define SQLITE_RBU_STATE_MOVE SQLITE_RBU_STATE_MOVE168135,6034606
#define SQLITE_RBU_STATE_CHECKPOINT SQLITE_RBU_STATE_CHECKPOINT168136,6034644
#define SQLITE_RBU_STATE_DONE SQLITE_RBU_STATE_DONE168137,6034682
#define SQLITE_RBU_STATE_ERROR SQLITE_RBU_STATE_ERROR168138,6034720
#define SQLITE_RBU_UPDATE_CACHESIZE SQLITE_RBU_UPDATE_CACHESIZE168210,6037608
# define SWAP(SWAP168216,6037722
#define RBU_STATE_STAGE RBU_STATE_STAGE168263,6039378
#define RBU_STATE_TBL RBU_STATE_TBL168264,6039411
#define RBU_STATE_IDX RBU_STATE_IDX168265,6039444
#define RBU_STATE_ROW RBU_STATE_ROW168266,6039477
#define RBU_STATE_PROGRESS RBU_STATE_PROGRESS168267,6039510
#define RBU_STATE_CKPT RBU_STATE_CKPT168268,6039543
#define RBU_STATE_COOKIE RBU_STATE_COOKIE168269,6039576
#define RBU_STATE_OALSZ RBU_STATE_OALSZ168270,6039609
#define RBU_STATE_PHASEONESTEP RBU_STATE_PHASEONESTEP168271,6039642
#define RBU_STAGE_OAL RBU_STAGE_OAL168273,6039676
#define RBU_STAGE_MOVE RBU_STAGE_MOVE168274,6039708
#define RBU_STAGE_CAPTURE RBU_STAGE_CAPTURE168275,6039740
#define RBU_STAGE_CKPT RBU_STAGE_CKPT168276,6039772
#define RBU_STAGE_DONE RBU_STAGE_DONE168277,6039804
#define RBU_CREATE_STATE RBU_CREATE_STATE168280,6039838
typedef struct RbuFrame RbuFrame;RbuFrame168283,6039936
typedef struct RbuObjIter RbuObjIter;RbuObjIter168284,6039970
typedef struct RbuState RbuState;RbuState168285,6040008
typedef struct rbu_vfs rbu_vfs;rbu_vfs168286,6040042
typedef struct rbu_file rbu_file;rbu_file168287,6040074
typedef struct RbuUpdateStmt RbuUpdateStmt;RbuUpdateStmt168288,6040108
typedef unsigned int u32;u32168291,6040187
typedef unsigned short u16;u16168292,6040213
typedef unsigned char u8;u8168293,6040241
typedef sqlite3_int64 i64;i64168294,6040267
#define WAL_LOCK_WRITE WAL_LOCK_WRITE168302,6040467
#define WAL_LOCK_CKPT WAL_LOCK_CKPT168303,6040493
#define WAL_LOCK_READ0 WAL_LOCK_READ0168304,6040519
#define SQLITE_FCNTL_RBUCNT SQLITE_FCNTL_RBUCNT168306,6040546
struct RbuState {RbuState168311,6040664
  int eStage;eStage168312,6040682
  char *zTbl;zTbl168313,6040696
  char *zIdx;zIdx168314,6040710
  i64 iWalCksum;iWalCksum168315,6040724
  int nRow;nRow168316,6040741
  i64 nProgress;nProgress168317,6040753
  u32 iCookie;iCookie168318,6040770
  i64 iOalSz;iOalSz168319,6040785
  i64 nPhaseOneStep;nPhaseOneStep168320,6040799
struct RbuUpdateStmt {RbuUpdateStmt168323,6040824
  char *zMask;                    /* Copy of update mask used with pUpdate */zMask168324,6040847
  sqlite3_stmt *pUpdate;          /* Last update statement (or NULL) */pUpdate168325,6040925
  RbuUpdateStmt *pNext;pNext168326,6040997
struct RbuObjIter {RbuObjIter168345,6041623
  sqlite3_stmt *pTblIter;         /* Iterate through tables */pTblIter168346,6041643
  sqlite3_stmt *pIdxIter;         /* Index iterator */pIdxIter168347,6041706
  int nTblCol;                    /* Size of azTblCol[] array */nTblCol168348,6041761
  char **azTblCol;                /* Array of unquoted target column names */azTblCol168349,6041826
  char **azTblType;               /* Array of target column types */azTblType168350,6041904
  int *aiSrcOrder;                /* src table col -> target table col */aiSrcOrder168351,6041973
  u8 *abTblPk;                    /* Array of flags, set on target PK columns */abTblPk168352,6042047
  u8 *abNotNull;                  /* Array of flags, set on NOT NULL columns */abNotNull168353,6042128
  u8 *abIndexed;                  /* Array of flags, set on indexed & PK cols */abIndexed168354,6042208
  int eType;                      /* Table type - an RBU_PK_XXX value */eType168355,6042289
  int bCleanup;                   /* True in "cleanup" state */bCleanup168358,6042410
  const char *zTbl;               /* Name of target db table */zTbl168359,6042474
  const char *zDataTbl;           /* Name of rbu db table (or null) */zDataTbl168360,6042538
  const char *zIdx;               /* Name of target db index (or null) */zIdx168361,6042609
  int iTnum;                      /* Root page of current object */iTnum168362,6042683
  int iPkTnum;                    /* If eType==EXTERNAL, root of PK index */iPkTnum168363,6042751
  int bUnique;                    /* Current index is unique */bUnique168364,6042828
  int nIndex;                     /* Number of aux. indexes on table zTbl */nIndex168365,6042892
  int nCol;                       /* Number of columns in current object */nCol168368,6043023
  sqlite3_stmt *pSelect;          /* Source data */pSelect168369,6043099
  sqlite3_stmt *pInsert;          /* Statement for INSERT operations */pInsert168370,6043151
  sqlite3_stmt *pDelete;          /* Statement for DELETE ops */pDelete168371,6043223
  sqlite3_stmt *pTmpInsert;       /* Insert into rbu_tmp_$zDataTbl */pTmpInsert168372,6043288
  RbuUpdateStmt *pRbuUpdate;pRbuUpdate168375,6043423
#define RBU_PK_NOTABLE RBU_PK_NOTABLE168388,6043730
#define RBU_PK_NONE RBU_PK_NONE168389,6043762
#define RBU_PK_IPK RBU_PK_IPK168390,6043794
#define RBU_PK_EXTERNAL RBU_PK_EXTERNAL168391,6043826
#define RBU_PK_WITHOUT_ROWID RBU_PK_WITHOUT_ROWID168392,6043858
#define RBU_PK_VTAB RBU_PK_VTAB168393,6043890
#define RBU_INSERT RBU_INSERT168400,6044041
#define RBU_DELETE RBU_DELETE168401,6044111
#define RBU_REPLACE RBU_REPLACE168402,6044189
#define RBU_IDX_DELETE RBU_IDX_DELETE168403,6044258
#define RBU_IDX_INSERT RBU_IDX_INSERT168404,6044337
#define RBU_UPDATE RBU_UPDATE168406,6044409
struct RbuFrame {RbuFrame168412,6044630
  u32 iDbPage;iDbPage168413,6044648
  u32 iWalFrame;iWalFrame168414,6044663
struct sqlite3rbu {sqlite3rbu168457,6046377
  int eStage;                     /* Value of RBU_STATE_STAGE field */eStage168458,6046397
  sqlite3 *dbMain;                /* target database handle */dbMain168459,6046468
  sqlite3 *dbRbu;                 /* rbu database handle */dbRbu168460,6046531
  char *zTarget;                  /* Path to target db */zTarget168461,6046591
  char *zRbu;                     /* Path to rbu db */zRbu168462,6046649
  char *zState;                   /* Path to state db (or NULL if zRbu) */zState168463,6046704
  char zStateDb[5];               /* Db name for state ("stat" or "main") */zStateDb168464,6046779
  int rc;                         /* Value returned by last rbu_step() call */rc168465,6046856
  char *zErrmsg;                  /* Error message if rc!=SQLITE_OK */zErrmsg168466,6046935
  int nStep;                      /* Rows processed for current object */nStep168467,6047006
  int nProgress;                  /* Rows processed for all objects */nProgress168468,6047080
  RbuObjIter objiter;             /* Iterator for skipping through tbl/idx */objiter168469,6047151
  const char *zVfsName;           /* Name of automatically created rbu vfs */zVfsName168470,6047229
  rbu_file *pTargetFd;            /* File handle open on target db */pTargetFd168471,6047307
  i64 iOalSz;iOalSz168472,6047377
  i64 nPhaseOneStep;nPhaseOneStep168473,6047391
  u32 iMaxFrame;                  /* Largest iWalFrame value in aFrame[] */iMaxFrame168478,6047609
  u32 mLock;mLock168479,6047685
  int nFrame;                     /* Entries in aFrame[] array */nFrame168480,6047698
  int nFrameAlloc;                /* Allocated size of aFrame[] array */nFrameAlloc168481,6047764
  RbuFrame *aFrame;aFrame168482,6047837
  int pgsz;pgsz168483,6047857
  u8 *aBuf;aBuf168484,6047869
  i64 iWalCksum;iWalCksum168485,6047881
  int nRbu;                       /* Number of RBU VFS in the stack */nRbu168488,6047936
  rbu_file *pRbuFd;               /* Fd for main db of dbRbu */pRbuFd168489,6048007
struct rbu_vfs {rbu_vfs168495,6048147
  sqlite3_vfs base;               /* rbu VFS shim methods */base168496,6048164
  sqlite3_vfs *pRealVfs;          /* Underlying VFS */pRealVfs168497,6048225
  sqlite3_mutex *mutex;           /* Mutex to protect pMain */mutex168498,6048280
  rbu_file *pMain;                /* Linked list of main db files */pMain168499,6048343
struct rbu_file {rbu_file168506,6048517
  sqlite3_file base;              /* sqlite3_file methods */base168507,6048535
  sqlite3_file *pReal;            /* Underlying file handle */pReal168508,6048596
  rbu_vfs *pRbuVfs;               /* Pointer to the rbu_vfs object */pRbuVfs168509,6048659
  sqlite3rbu *pRbu;               /* Pointer to rbu object (rbu target only) */pRbu168510,6048729
  int openFlags;                  /* Flags this file was opened with */openFlags168512,6048810
  u32 iCookie;                    /* Cookie value for main db files */iCookie168513,6048882
  u8 iWriteVer;                   /* "write-version" value for main db files */iWriteVer168514,6048953
  u8 bNolock;                     /* True to fail EXCLUSIVE locks */bNolock168515,6049033
  int nShm;                       /* Number of entries in apShm[] array */nShm168517,6049103
  char **apShm;                   /* Array of mmap'd *-shm regions */apShm168518,6049178
  char *zDel;                     /* Delete this when closing file */zDel168519,6049248
  const char *zWal;               /* Wal filename for this main db file */zWal168521,6049319
  rbu_file *pWalFd;               /* Wal file descriptor for this main db */pWalFd168522,6049394
  rbu_file *pMainNext;            /* Next MAIN_DB file */pMainNext168523,6049471
#define rbuIsVacuum(rbuIsVacuum168529,6049593
static unsigned int rbuDeltaGetInt(const char **pz, int *pLen){rbuDeltaGetInt168549,6050261
static unsigned int rbuDeltaChecksum(const char *zIn, size_t N){rbuDeltaChecksum168576,6051238
static int rbuDeltaApply(rbuDeltaApply168628,6052820
static int rbuDeltaOutputSize(const char *zDelta, int lenDelta){rbuDeltaOutputSize168714,6055168
static void rbuFossilDeltaFunc(rbuFossilDeltaFunc168736,6055833
static int prepareAndCollectError(prepareAndCollectError168788,6057227
static int resetAndCollectError(sqlite3_stmt *pStmt, char **pzErrmsg){resetAndCollectError168810,6057840
static int prepareFreeAndCollectError(prepareFreeAndCollectError168833,6058814
static void rbuObjIterFreeCols(RbuObjIter *pIter){rbuObjIterFreeCols168855,6059271
static void rbuObjIterClearStatements(RbuObjIter *pIter){rbuObjIterClearStatements168875,6059798
static void rbuObjIterFinalize(RbuObjIter *pIter){rbuObjIterFinalize168902,6060432
static int rbuObjIterNext(sqlite3rbu *p, RbuObjIter *pIter){rbuObjIterNext168918,6060961
static void rbuTargetNameFunc(rbuTargetNameFunc168998,6063668
static int rbuObjIterFirst(sqlite3rbu *p, RbuObjIter *pIter){rbuObjIterFirst169033,6064656
static char *rbuMPrintf(sqlite3rbu *p, const char *zFmt, ...){rbuMPrintf169068,6065913
static int rbuMPrintfExec(sqlite3rbu *p, sqlite3 *db, const char *zFmt, ...){rbuMPrintfExec169093,6066649
static void *rbuMalloc(sqlite3rbu *p, int nByte){rbuMalloc169120,6067419
static void rbuAllocateIterArrays(sqlite3rbu *p, RbuObjIter *pIter, int nCol){rbuAllocateIterArrays169140,6067901
static char *rbuStrndup(const char *zStr, int *pRc){rbuStrndup169165,6068863
static void rbuFinalize(sqlite3rbu *p, sqlite3_stmt *pStmt){rbuFinalize169189,6069412
static void rbuTableType(rbuTableType169237,6071234
static void rbuObjIterCacheIndexedCols(sqlite3rbu *p, RbuObjIter *pIter){rbuObjIterCacheIndexedCols169321,6073688
static int rbuObjIterCacheTableInfo(sqlite3rbu *p, RbuObjIter *pIter){rbuObjIterCacheTableInfo169368,6075228
static char *rbuObjIterGetCollist(rbuObjIterGetCollist169477,6079263
static char *rbuObjIterGetIndexCols(rbuObjIterGetIndexCols169516,6080521
static char *rbuObjIterGetOldlist(rbuObjIterGetOldlist169620,6084020
static char *rbuObjIterGetWhere(rbuObjIterGetWhere169661,6085071
static void rbuBadControlError(sqlite3rbu *p){rbuBadControlError169702,6086298
static char *rbuObjIterGetSetlist(rbuObjIterGetSetlist169725,6087298
static char *rbuObjIterGetBindlist(sqlite3rbu *p, int nBind){rbuObjIterGetBindlist169779,6088995
static char *rbuWithoutRowidPK(sqlite3rbu *p, RbuObjIter *pIter){rbuWithoutRowidPK169806,6089676
static void rbuCreateImposterTable2(sqlite3rbu *p, RbuObjIter *pIter){rbuCreateImposterTable2169865,6091869
static void rbuCreateImposterTable(sqlite3rbu *p, RbuObjIter *pIter){rbuCreateImposterTable169939,6095184
static void rbuObjIterPrepareTmpInsert(rbuObjIterPrepareTmpInsert169995,6097160
static void rbuTmpInsertFunc(rbuTmpInsertFunc170013,6097756
static int rbuObjIterPrepareAll(rbuObjIterPrepareAll170048,6098629
static int rbuGetUpdateStmt(rbuGetUpdateStmt170270,6106642
static sqlite3 *rbuOpenDbhandle(rbuOpenDbhandle170338,6108611
static void rbuFreeState(RbuState *p){rbuFreeState170359,6109107
static RbuState *rbuLoadState(sqlite3rbu *p){rbuLoadState170376,6109564
static void rbuOpenDatabase(sqlite3rbu *p, int *pbRetry){rbuOpenDatabase170449,6111450
static void rbuFileSuffix3(const char *zBase, char *z){rbuFileSuffix3170628,6116753
static i64 rbuShmChecksum(sqlite3rbu *p){rbuShmChecksum170649,6117327
static void rbuSetupCheckpoint(sqlite3rbu *p, RbuState *pState){rbuSetupCheckpoint170678,6118430
static int rbuCaptureWalRead(sqlite3rbu *pRbu, i64 iOff, int iAmt){rbuCaptureWalRead170745,6121007
static int rbuCaptureDbWrite(sqlite3rbu *pRbu, i64 iOff){rbuCaptureDbWrite170777,6122025
static void rbuCheckpointFrame(sqlite3rbu *p, RbuFrame *pFrame){rbuCheckpointFrame170787,6122362
static void rbuLockDatabase(sqlite3rbu *p){rbuLockDatabase170805,6122880
static LPWSTR rbuWinUtf8ToUnicode(const char *zFilename){rbuWinUtf8ToUnicode170815,6123183
static void rbuMoveOalFile(sqlite3rbu *p){rbuMoveOalFile170845,6124096
static int rbuStepType(sqlite3rbu *p, const char **pzMask){rbuStepType170936,6126694
static void assertColumnName(sqlite3_stmt *pStmt, int iCol, const char *zName){assertColumnName170979,6127733
# define assertColumnName(assertColumnName170984,6127921
static void rbuStepOneOp(sqlite3rbu *p, int eType){rbuStepOneOp170992,6128178
static int rbuStep(sqlite3rbu *p){rbuStep171075,6130891
static void rbuIncrSchemaCookie(sqlite3rbu *p){rbuIncrSchemaCookie171140,6133010
static void rbuSaveState(sqlite3rbu *p, int eStage){rbuSaveState171171,6134163
static void rbuCopyPragma(sqlite3rbu *p, const char *zPragma){rbuCopyPragma171230,6135921
static void rbuCreateTargetSchema(sqlite3rbu *p){rbuCreateTargetSchema171250,6136612
SQLITE_API int sqlite3rbu_step(sqlite3rbu *p){sqlite3rbu_step171302,6138098
static int rbuStrCompare(const char *z1, const char *z2){rbuStrCompare171414,6141450
static void rbuSetupOal(sqlite3rbu *p, RbuState *pState){rbuSetupOal171430,6142071
static void rbuDeleteOalFile(sqlite3rbu *p){rbuDeleteOalFile171462,6142947
static void rbuCreateVfs(sqlite3rbu *p){rbuCreateVfs171478,6143454
static void rbuDeleteVfs(sqlite3rbu *p){rbuDeleteVfs171497,6143964
static void rbuIndexCntFunc(rbuIndexCntFunc171509,6144298
static void rbuInitPhaseOneSteps(sqlite3rbu *p){rbuInitPhaseOneSteps171558,6145834
static sqlite3rbu *openRbuHandle(openRbuHandle171599,6147051
static sqlite3rbu *rbuMisuseError(void){rbuMisuseError171755,6152027
SQLITE_API sqlite3rbu *sqlite3rbu_open(sqlite3rbu_open171768,6152286
SQLITE_API sqlite3rbu *sqlite3rbu_vacuum(sqlite3rbu_vacuum171781,6152624
SQLITE_API sqlite3 *sqlite3rbu_db(sqlite3rbu *pRbu, int bRbu){sqlite3rbu_db171793,6152911
static void rbuEditErrmsg(sqlite3rbu *p){rbuEditErrmsg171807,6153264
SQLITE_API int sqlite3rbu_close(sqlite3rbu *p, char **pzErrmsg){sqlite3rbu_close171825,6153756
SQLITE_API sqlite3_int64 sqlite3rbu_progress(sqlite3rbu *pRbu){sqlite3rbu_progress171877,6155363
SQLITE_API void sqlite3rbu_bp_progress(sqlite3rbu *p, int *pnOne, int *pnTwo){sqlite3rbu_bp_progress171885,6155551
SQLITE_API int sqlite3rbu_state(sqlite3rbu *p){sqlite3rbu_state171920,6156329
SQLITE_API int sqlite3rbu_savestate(sqlite3rbu *p){sqlite3rbu_savestate171948,6157214
static void rbuUnlockShm(rbu_file *p){rbuUnlockShm172032,6161093
static int rbuVfsClose(sqlite3_file *pFile){rbuVfsClose172048,6161461
static u32 rbuGetU32(u8 *aBuf){rbuGetU32172081,6162289
static void rbuPutU32(u8 *aBuf, u32 iVal){rbuPutU32172092,6162527
static void rbuPutU16(u8 *aBuf, u16 iVal){rbuPutU16172099,6162705
static int rbuVfsRead(rbuVfsRead172107,6162857
static int rbuVfsWrite(rbuVfsWrite172173,6165096
static int rbuVfsTruncate(sqlite3_file *pFile, sqlite_int64 size){rbuVfsTruncate172208,6166052
static int rbuVfsSync(sqlite3_file *pFile, int flags){rbuVfsSync172216,6166242
static int rbuVfsFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){rbuVfsFileSize172230,6166608
static int rbuVfsLock(sqlite3_file *pFile, int eLock){rbuVfsLock172251,6167205
static int rbuVfsUnlock(sqlite3_file *pFile, int eLock){rbuVfsUnlock172273,6167805
static int rbuVfsCheckReservedLock(sqlite3_file *pFile, int *pResOut){rbuVfsCheckReservedLock172281,6168034
static int rbuVfsFileControl(sqlite3_file *pFile, int op, void *pArg){rbuVfsFileControl172289,6168282
static int rbuVfsSectorSize(sqlite3_file *pFile){rbuVfsSectorSize172344,6170012
static int rbuVfsDeviceCharacteristics(sqlite3_file *pFile){rbuVfsDeviceCharacteristics172352,6170229
static int rbuVfsShmLock(sqlite3_file *pFile, int ofst, int n, int flags){rbuVfsShmLock172360,6170438
static int rbuVfsShmMap(rbuVfsShmMap172399,6171684
static void rbuVfsShmBarrier(sqlite3_file *pFile){rbuVfsShmBarrier172453,6173069
static int rbuVfsShmUnmap(sqlite3_file *pFile, int delFlag){rbuVfsShmUnmap172461,6173234
static rbu_file *rbuFindMaindb(rbu_vfs *pRbuVfs, const char *zWal){rbuFindMaindb172483,6173950
static const char *rbuMainToWal(const char *zName, int flags){rbuMainToWal172498,6174526
static int rbuVfsOpen(rbuVfsOpen172521,6174937
static int rbuVfsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){rbuVfsDelete172634,6178919
static int rbuVfsAccess(rbuVfsAccess172643,6179221
static int rbuVfsFullPathname(rbuVfsFullPathname172688,6180657
static void *rbuVfsDlOpen(sqlite3_vfs *pVfs, const char *zPath){rbuVfsDlOpen172702,6180988
static void rbuVfsDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){rbuVfsDlError172712,6181333
static void (*rbuVfsDlSym(rbuVfsDlSym172720,6181590
static void rbuVfsDlClose(sqlite3_vfs *pVfs, void *pHandle){rbuVfsDlClose172732,6181840
static int rbuVfsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){rbuVfsRandomness172742,6182127
static int rbuVfsSleep(sqlite3_vfs *pVfs, int nMicro){rbuVfsSleep172751,6182410
static int rbuVfsCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){rbuVfsCurrentTime172759,6182637
static int rbuVfsGetLastError(sqlite3_vfs *pVfs, int a, char *b){rbuVfsGetLastError172767,6182830
SQLITE_API void sqlite3rbu_destroy_vfs(const char *zName){sqlite3rbu_destroy_vfs172775,6183012
SQLITE_API int sqlite3rbu_create_vfs(const char *zName, const char *zParent){sqlite3rbu_create_vfs172789,6183465
#define VTAB_SCHEMA VTAB_SCHEMA172929,6188620
typedef struct StatTable StatTable;StatTable172945,6189643
typedef struct StatCursor StatCursor;StatCursor172946,6189679
typedef struct StatPage StatPage;StatPage172947,6189717
typedef struct StatCell StatCell;StatCell172948,6189751
struct StatCell {StatCell172950,6189786
  int nLocal;                     /* Bytes of local payload */nLocal172951,6189804
  u32 iChildPg;                   /* Child node (or 0 if this is a leaf) */iChildPg172952,6189867
  int nOvfl;                      /* Entries in aOvfl[] */nOvfl172953,6189943
  u32 *aOvfl;                     /* Array of overflow page numbers */aOvfl172954,6190002
  int nLastOvfl;                  /* Bytes of payload on final overflow page */nLastOvfl172955,6190073
  int iOvfl;                      /* Iterates through aOvfl[] */iOvfl172956,6190153
struct StatPage {StatPage172959,6190222
  u32 iPgno;iPgno172960,6190240
  DbPage *pPg;pPg172961,6190253
  int iCell;iCell172962,6190268
  char *zPath;                    /* Path to this page */zPath172964,6190282
  u8 flags;                       /* Copy of flags byte */flags172967,6190390
  int nCell;                      /* Number of cells on page */nCell172968,6190449
  int nUnused;                    /* Number of unused bytes on page */nUnused172969,6190513
  StatCell *aCell;                /* Array of parsed cells */aCell172970,6190584
  u32 iRightChildPg;              /* Right-child page number (or 0) */iRightChildPg172971,6190646
  int nMxPayload;                 /* Largest payload of any cell on this page */nMxPayload172972,6190717
struct StatCursor {StatCursor172975,6190802
  sqlite3_vtab_cursor base;base172976,6190822
  sqlite3_stmt *pStmt;            /* Iterates through set of root pages */pStmt172977,6190850
  int isEof;                      /* After pStmt has returned SQLITE_DONE */isEof172978,6190925
  int iDb;                        /* Schema used for this query */iDb172979,6191002
  StatPage aPage[32];aPage172981,6191070
  int iPage;                      /* Current entry in aPage[] */iPage172982,6191092
  char *zName;                    /* Value of 'name' column */zName172985,6191184
  char *zPath;                    /* Value of 'path' column */zPath172986,6191247
  u32 iPageno;                    /* Value of 'pageno' column */iPageno172987,6191310
  char *zPagetype;                /* Value of 'pagetype' column */zPagetype172988,6191375
  int nCell;                      /* Value of 'ncell' column */nCell172989,6191442
  int nPayload;                   /* Value of 'payload' column */nPayload172990,6191506
  int nUnused;                    /* Value of 'unused' column */nUnused172991,6191572
  int nMxPayload;                 /* Value of 'mx_payload' column */nMxPayload172992,6191637
  i64 iOffset;                    /* Value of 'pgOffset' column */iOffset172993,6191706
  int szPage;                     /* Value of 'pgSize' column */szPage172994,6191773
struct StatTable {StatTable172997,6191842
  sqlite3_vtab base;base172998,6191861
  sqlite3 *db;db172999,6191882
  int iDb;                        /* Index of database to analyze */iDb173000,6191897
# define get2byte(get2byte173004,6191987
static int statConnect(statConnect173010,6192094
static int statDisconnect(sqlite3_vtab *pVtab){statDisconnect173052,6192965
static int statBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){statBestIndex173064,6193337
static int statOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){statOpen173110,6194735
static void statClearPage(StatPage *p){statClearPage173127,6195156
static void statResetCsr(StatCursor *pCsr){statResetCsr173140,6195423
static int statClose(sqlite3_vtab_cursor *pCursor){statClose173155,6195711
static void getLocalPayload(getLocalPayload173163,6195907
static int statDecodePage(Btree *pBt, StatPage *p){statDecodePage173186,6196671
static void statSizeAndOffset(StatCursor *pCsr){statSizeAndOffset173281,6199742
static int statNext(sqlite3_vtab_cursor *pCursor){statNext173306,6200522
static int statEof(sqlite3_vtab_cursor *pCursor){statEof173439,6204438
static int statFilter(statFilter173444,6204557
static int statColumn(statColumn173489,6205867
static int statRowid(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){statRowid173536,6207277
SQLITE_PRIVATE int sqlite3DbstatRegister(sqlite3 *db){sqlite3DbstatRegister173545,6207520
SQLITE_PRIVATE int sqlite3DbstatRegister(sqlite3 *db){ return SQLITE_OK; }sqlite3DbstatRegister173571,6208823
typedef struct SessionTable SessionTable;SessionTable173587,6209356
typedef struct SessionChange SessionChange;SessionChange173588,6209398
typedef struct SessionBuffer SessionBuffer;SessionBuffer173589,6209442
typedef struct SessionInput SessionInput;SessionInput173590,6209486
#   define SESSIONS_STRM_CHUNK_SIZE SESSIONS_STRM_CHUNK_SIZE173597,6209651
#   define SESSIONS_STRM_CHUNK_SIZE SESSIONS_STRM_CHUNK_SIZE173599,6209697
typedef struct SessionHook SessionHook;SessionHook173603,6209754
struct SessionHook {SessionHook173604,6209794
  void *pCtx;pCtx173605,6209815
  int (*xOld)(void*,int,sqlite3_value**);xOld173606,6209829
  int (*xNew)(void*,int,sqlite3_value**);xNew173607,6209871
  int (*xCount)(void*);xCount173608,6209913
  int (*xDepth)(void*);xDepth173609,6209937
struct sqlite3_session {sqlite3_session173615,6210000
  sqlite3 *db;                    /* Database handle session is attached to */db173616,6210025
  char *zDb;                      /* Name of database session is attached to */zDb173617,6210104
  int bEnable;                    /* True if currently recording */bEnable173618,6210184
  int bIndirect;                  /* True if all changes are indirect */bIndirect173619,6210252
  int bAutoAttach;                /* True to auto-attach tables */bAutoAttach173620,6210325
  int rc;                         /* Non-zero if an error has occurred */rc173621,6210392
  void *pFilterCtx;               /* First argument to pass to xTableFilter */pFilterCtx173622,6210466
  int (*xTableFilter)(void *pCtx, const char *zTab);xTableFilter173623,6210545
  sqlite3_session *pNext;         /* Next session object on same db. */pNext173624,6210598
  SessionTable *pTable;           /* List of attached tables */pTable173625,6210670
  SessionHook hook;               /* APIs to grab new and old data with */hook173626,6210734
struct SessionBuffer {SessionBuffer173632,6210895
  u8 *aBuf;                       /* Pointer to changeset buffer */aBuf173633,6210918
  int nBuf;                       /* Size of buffer aBuf */nBuf173634,6210986
  int nAlloc;                     /* Size of allocation containing aBuf */nAlloc173635,6211046
struct SessionInput {SessionInput173644,6211377
  int bNoDiscard;                 /* If true, discard no data */bNoDiscard173645,6211399
  int iCurrent;                   /* Offset in aData[] of current change */iCurrent173646,6211464
  int iNext;                      /* Offset in aData[] of next change */iNext173647,6211540
  u8 *aData;                      /* Pointer to buffer containing changeset */aData173648,6211613
  int nData;                      /* Number of bytes in aData */nData173649,6211692
  SessionBuffer buf;              /* Current read buffer */buf173651,6211758
  int (*xInput)(void*, void*, int*);        /* Input stream call (or NULL) */xInput173652,6211818
  void *pIn;                                /* First argument to xInput */pIn173653,6211896
  int bEof;                       /* Set to true after xInput finished */bEof173654,6211971
struct sqlite3_changeset_iter {sqlite3_changeset_iter173660,6212093
  SessionInput in;                /* Input buffer or stream */in173661,6212125
  SessionBuffer tblhdr;           /* Buffer to hold apValue/zTab/abPK/ */tblhdr173662,6212188
  int bPatchset;                  /* True if this is a patchset */bPatchset173663,6212262
  int rc;                         /* Iterator error code */rc173664,6212329
  sqlite3_stmt *pConflict;        /* Points to conflicting row, if any */pConflict173665,6212389
  char *zTab;                     /* Current table */zTab173666,6212463
  int nCol;                       /* Number of columns in zTab */nCol173667,6212517
  int op;                         /* Current operation */op173668,6212583
  int bIndirect;                  /* True if current change was indirect */bIndirect173669,6212641
  u8 *abPK;                       /* Primary key array */abPK173670,6212717
  sqlite3_value **apValue;        /* old.* and new.* values */apValue173671,6212775
struct SessionTable {SessionTable173687,6213439
  SessionTable *pNext;pNext173688,6213461
  char *zName;                    /* Local name of table */zName173689,6213484
  int nCol;                       /* Number of columns in table zName */nCol173690,6213544
  const char **azCol;             /* Column names */azCol173691,6213617
  u8 *abPK;                       /* Array of primary key flags */abPK173692,6213670
  int nEntry;                     /* Total number of entries in hash table */nEntry173693,6213737
  int nChange;                    /* Size of apChange[] array */nChange173694,6213815
  SessionChange **apChange;       /* Hash table buckets */apChange173695,6213880
struct SessionChange {SessionChange173825,6219410
  int op;                         /* One of UPDATE, DELETE, INSERT */op173826,6219433
  int bIndirect;                  /* True if this change is "indirect" */bIndirect173827,6219503
  int nRecord;                    /* Number of bytes in buffer aRecord[] */nRecord173828,6219577
  u8 *aRecord;                    /* Buffer containing old.* record */aRecord173829,6219653
  SessionChange *pNext;           /* For hash-table collisions */pNext173830,6219724
static int sessionVarintPut(u8 *aBuf, int iVal){sessionVarintPut173837,6219899
static int sessionVarintLen(int iVal){sessionVarintLen173844,6220063
static int sessionVarintGet(u8 *aBuf, int *piVal){sessionVarintGet173852,6220229
#define SESSION_UINT32(SESSION_UINT32173857,6220371
static sqlite3_int64 sessionGetI64(u8 *aRec){sessionGetI64173863,6220544
static void sessionPutI64(u8 *aBuf, sqlite3_int64 i){sessionPutI64173873,6220776
static int sessionSerializeValue(sessionSerializeValue173897,6221588
#define HASH_APPEND(HASH_APPEND173984,6224186
static unsigned int sessionHashAppendI64(unsigned int h, i64 i){sessionHashAppendI64173990,6224417
static unsigned int sessionHashAppendBlob(unsigned int h, int n, const u8 *z){sessionHashAppendBlob173999,6224725
static unsigned int sessionHashAppendType(unsigned int h, int eType){sessionHashAppendType174009,6225024
static int sessionPreupdateHash(sessionPreupdateHash174024,6225696
static int sessionSerialLen(u8 *a){sessionSerialLen174088,6227799
static unsigned int sessionChangeHash(sessionChangeHash174106,6228413
static int sessionChangeEqual(sessionChangeEqual174155,6230100
static void sessionMergeRecord(sessionMergeRecord174198,6231713
static u8 *sessionMergeValue(sessionMergeValue174244,6233134
static int sessionMergeUpdate(sessionMergeUpdate174278,6233817
static int sessionPreupdateEqual(sessionPreupdateEqual174355,6235955
static int sessionGrowHash(int bPatchset, SessionTable *pTab){sessionGrowHash174435,6239086
static int sessionTableInfo(sessionTableInfo174499,6241277
static int sessionInitTable(sqlite3_session *pSession, SessionTable *pTab){sessionInitTable174599,6244220
static void sessionPreupdateOneChange(sessionPreupdateOneChange174627,6245089
static int sessionFindTable(sessionFindTable174748,6249257
static void xPreUpdate(xPreUpdate174784,6250259
static int sessionPreupdateOld(void *pCtx, int iVal, sqlite3_value **ppVal){sessionPreupdateOld174822,6251658
static int sessionPreupdateNew(void *pCtx, int iVal, sqlite3_value **ppVal){sessionPreupdateNew174825,6251798
static int sessionPreupdateCount(void *pCtx){sessionPreupdateCount174828,6251938
static int sessionPreupdateDepth(void *pCtx){sessionPreupdateDepth174831,6252036
static void sessionPreupdateHooks(sessionPreupdateHooks174839,6252227
typedef struct SessionDiffCtx SessionDiffCtx;SessionDiffCtx174849,6252529
struct SessionDiffCtx {SessionDiffCtx174850,6252575
  sqlite3_stmt *pStmt;pStmt174851,6252599
  int nOldOff;nOldOff174852,6252622
static int sessionDiffOld(void *pCtx, int iVal, sqlite3_value **ppVal){sessionDiffOld174858,6252681
static int sessionDiffNew(void *pCtx, int iVal, sqlite3_value **ppVal){sessionDiffNew174863,6252880
static int sessionDiffCount(void *pCtx){sessionDiffCount174868,6253069
static int sessionDiffDepth(void *pCtx){sessionDiffDepth174872,6253224
static void sessionDiffHooks(sessionDiffHooks174880,6253366
static char *sessionExprComparePK(sessionExprComparePK174891,6253667
static char *sessionExprCompareOther(sessionExprCompareOther174914,6254134
static char *sessionSelectFindNew(sessionSelectFindNew174945,6254737
static int sessionDiffFindNew(sessionDiffFindNew174961,6255161
static int sessionDiffFindModified(sessionDiffFindModified174992,6255906
SQLITE_API int sqlite3session_diff(sqlite3session_diff175032,6256970
SQLITE_API int sqlite3session_create(sqlite3session_create175126,6259418
static void sessionDeleteTable(SessionTable *pList){sessionDeleteTable175164,6260817
SQLITE_API void sqlite3session_delete(sqlite3_session *pSession){sqlite3session_delete175188,6261426
SQLITE_API void sqlite3session_table_filter(sqlite3session_table_filter175217,6262321
SQLITE_API int sqlite3session_attach(sqlite3session_attach175235,6262905
static int sessionBufferGrow(SessionBuffer *p, int nByte, int *pRc){sessionBufferGrow175287,6264757
static void sessionAppendValue(SessionBuffer *p, sqlite3_value *pVal, int *pRc){sessionAppendValue175314,6265451
static void sessionAppendByte(SessionBuffer *p, u8 v, int *pRc){sessionAppendByte175336,6266055
static void sessionAppendVarint(SessionBuffer *p, int v, int *pRc){sessionAppendVarint175349,6266423
static void sessionAppendBlob(sessionAppendBlob175362,6266820
static void sessionAppendStr(sessionAppendStr175382,6267368
static void sessionAppendInteger(sessionAppendInteger175402,6267890
static void sessionAppendIdent(sessionAppendIdent175421,6268566
static void sessionAppendCol(sessionAppendCol175446,6269379
static int sessionAppendUpdate(sessionAppendUpdate175508,6271601
static int sessionAppendDelete(sessionAppendDelete175607,6274705
static int sessionSelectStmt(sessionSelectStmt175662,6276104
static int sessionSelectBind(sessionSelectBind175705,6277575
static void sessionAppendTableHdr(sessionAppendTableHdr175776,6279324
static int sessionGenerateChangeset(sessionGenerateChangeset175799,6280337
SQLITE_API int sqlite3session_changeset(sqlite3session_changeset175925,6284848
SQLITE_API int sqlite3session_changeset_strm(sqlite3session_changeset_strm175936,6285237
SQLITE_API int sqlite3session_patchset_strm(sqlite3session_patchset_strm175947,6285517
SQLITE_API int sqlite3session_patchset(sqlite3session_patchset175962,6285962
SQLITE_API int sqlite3session_enable(sqlite3_session *pSession, int bEnable){sqlite3session_enable175973,6286366
SQLITE_API int sqlite3session_indirect(sqlite3_session *pSession, int bIndirect){sqlite3session_indirect175987,6286742
SQLITE_API int sqlite3session_isempty(sqlite3_session *pSession){sqlite3session_isempty176002,6287188
static int sessionChangesetStart(sessionChangesetStart176018,6287595
SQLITE_API int sqlite3changeset_start(sqlite3changeset_start176052,6288767
SQLITE_API int sqlite3changeset_start_strm(sqlite3changeset_start_strm176063,6289159
static void sessionDiscardData(SessionInput *pIn){sessionDiscardData176075,6289550
static int sessionInputBuffer(SessionInput *pIn, int nByte){sessionInputBuffer176095,6290185
static void sessionSkipRecord(sessionSkipRecord176123,6291028
static int sessionValueSetStr(sessionValueSetStr176149,6291765
static int sessionReadRecord(sessionReadRecord176190,6293734
static int sessionChangesetBufferTblhdr(SessionInput *pIn, int *pnByte){sessionChangesetBufferTblhdr176255,6295846
static int sessionChangesetBufferRecord(sessionChangesetBufferRecord176287,6296861
static int sessionChangesetReadTblhdr(sqlite3_changeset_iter *p){sessionChangesetReadTblhdr176331,6298366
static int sessionChangesetNext(sessionChangesetNext176377,6299915
SQLITE_API int sqlite3changeset_next(sqlite3_changeset_iter *p){sqlite3changeset_next176484,6303566
SQLITE_API int sqlite3changeset_op(sqlite3changeset_op176493,6303852
SQLITE_API int sqlite3changeset_pk(sqlite3changeset_pk176513,6304615
SQLITE_API int sqlite3changeset_old(sqlite3changeset_old176536,6305551
SQLITE_API int sqlite3changeset_new(sqlite3changeset_new176564,6306587
#define sessionChangesetNew(sessionChangesetNew176584,6307292
#define sessionChangesetOld(sessionChangesetOld176585,6307372
SQLITE_API int sqlite3changeset_conflict(sqlite3changeset_conflict176598,6307915
SQLITE_API int sqlite3changeset_fk_conflicts(sqlite3changeset_fk_conflicts176621,6308719
SQLITE_API int sqlite3changeset_finalize(sqlite3_changeset_iter *p){sqlite3changeset_finalize176639,6309203
static int sessionChangesetInvert(sessionChangesetInvert176654,6309601
SQLITE_API int sqlite3changeset_invert(sqlite3changeset_invert176813,6314616
SQLITE_API int sqlite3changeset_invert_strm(sqlite3changeset_invert_strm176832,6315224
typedef struct SessionApplyCtx SessionApplyCtx;SessionApplyCtx176851,6315679
struct SessionApplyCtx {SessionApplyCtx176852,6315727
  sqlite3 *db;db176853,6315752
  sqlite3_stmt *pDelete;          /* DELETE statement */pDelete176854,6315767
  sqlite3_stmt *pUpdate;          /* UPDATE statement */pUpdate176855,6315824
  sqlite3_stmt *pInsert;          /* INSERT statement */pInsert176856,6315881
  sqlite3_stmt *pSelect;          /* SELECT statement */pSelect176857,6315938
  int nCol;                       /* Size of azCol[] and abPK[] arrays */nCol176858,6315995
  const char **azCol;             /* Array of column names */azCol176859,6316069
  u8 *abPK;                       /* Boolean array - true if column is in PK */abPK176860,6316131
  int bDeferConstraints;          /* True to defer constraints */bDeferConstraints176862,6316212
  SessionBuffer constraints;      /* Deferred constraints are stored here */constraints176863,6316278
static int sessionDeleteRow(sessionDeleteRow176883,6317012
static int sessionUpdateRow(sessionUpdateRow176966,6319582
static int sessionSelectRow(sessionSelectRow177044,6322008
static int sessionInsertRow(sessionInsertRow177062,6322609
static int sessionBindValue(sessionBindValue177096,6323580
static int sessionBindRow(sessionBindRow177129,6325123
static int sessionSeekToRow(sessionSeekToRow177172,6326962
static int sessionConflictHandler(sessionConflictHandler177232,6329545
static int sessionApplyOneOp(sessionApplyOneOp177327,6333031
static int sessionApplyOneWithRetry(sessionApplyOneWithRetry177447,6337281
static int sessionRetryConstraints(sessionRetryConstraints177504,6339536
static int sessionChangesetApply(sessionChangesetApply177558,6341354
SQLITE_API int sqlite3changeset_apply(sqlite3changeset_apply177727,6347003
SQLITE_API int sqlite3changeset_apply_strm(sqlite3changeset_apply_strm177755,6348183
struct sqlite3_changegroup {sqlite3_changegroup177781,6349220
  int rc;                         /* Error code */rc177782,6349249
  int bPatch;                     /* True to accumulate patchsets */bPatch177783,6349300
  SessionTable *pList;            /* List of tables in current patch */pList177784,6349369
static int sessionChangeMerge(sessionChangeMerge177792,6349652
static int sessionChangesetToHash(sessionChangesetToHash177915,6353911
static int sessionChangegroupOutput(sessionChangegroupOutput178038,6357774
SQLITE_API int sqlite3changegroup_new(sqlite3_changegroup **pp){sqlite3changegroup_new178090,6359121
SQLITE_API int sqlite3changegroup_add(sqlite3_changegroup *pGrp, int nData, void *pData){sqlite3changegroup_add178107,6359590
SQLITE_API int sqlite3changegroup_output(sqlite3changegroup_output178123,6360109
SQLITE_API int sqlite3changegroup_add_strm(sqlite3changegroup_add_strm178134,6360336
SQLITE_API int sqlite3changegroup_output_strm(sqlite3changegroup_output_strm178153,6360837
SQLITE_API void sqlite3changegroup_delete(sqlite3_changegroup *pGrp){sqlite3changegroup_delete178164,6361093
SQLITE_API int sqlite3changeset_concat(sqlite3changeset_concat178174,6361288
SQLITE_API int sqlite3changeset_concat_strm(sqlite3changeset_concat_strm178203,6362180
# define UNUSED_PARAM(UNUSED_PARAM178269,6364295
# define LARGEST_INT64 LARGEST_INT64178273,6364361
# define SMALLEST_INT64 SMALLEST_INT64178274,6364432
#  define safe_isdigit(safe_isdigit178284,6364726
#  define safe_isalnum(safe_isalnum178285,6364771
#  define safe_isxdigit(safe_isxdigit178286,6364816
static const char jsonIsSpace[] = {jsonIsSpace178300,6365357
#define safe_isspace(safe_isspace178318,6366260
  typedef sqlite3_uint64 u64;u64178323,6366495
  typedef unsigned int u32;u32178324,6366525
  typedef unsigned char u8;u8178325,6366553
typedef struct JsonString JsonString;JsonString178329,6366603
typedef struct JsonNode JsonNode;JsonNode178330,6366641
typedef struct JsonParse JsonParse;JsonParse178331,6366675
struct JsonString {JsonString178337,6366901
  sqlite3_context *pCtx;   /* Function context - put error messages here */pCtx178338,6366921
  char *zBuf;              /* Append JSON content here */zBuf178339,6366997
  u64 nAlloc;              /* Bytes of storage available in zBuf[] */nAlloc178340,6367055
  u64 nUsed;               /* Bytes of zBuf[] currently used */nUsed178341,6367125
  u8 bStatic;              /* True if zBuf is static space */bStatic178342,6367189
  u8 bErr;                 /* True if an error has been encountered */bErr178343,6367251
  char zSpace[100];        /* Initial static space */zSpace178344,6367322
#define JSON_NULL JSON_NULL178349,6367403
#define JSON_TRUE JSON_TRUE178350,6367427
#define JSON_FALSE JSON_FALSE178351,6367451
#define JSON_INT JSON_INT178352,6367475
#define JSON_REAL JSON_REAL178353,6367499
#define JSON_STRING JSON_STRING178354,6367523
#define JSON_ARRAY JSON_ARRAY178355,6367547
#define JSON_OBJECT JSON_OBJECT178356,6367571
#define JSON_SUBTYPE JSON_SUBTYPE178359,6367636
static const char * const jsonType[] = {jsonType178364,6367727
#define JNODE_RAW JNODE_RAW178370,6367891
#define JNODE_ESCAPE JNODE_ESCAPE178371,6367965
#define JNODE_REMOVE JNODE_REMOVE178372,6368037
#define JNODE_REPLACE JNODE_REPLACE178373,6368092
#define JNODE_APPEND JNODE_APPEND178374,6368160
#define JNODE_LABEL JNODE_LABEL178375,6368240
struct JsonNode {JsonNode178380,6368342
  u8 eType;              /* One of the JSON_ type values */eType178381,6368360
  u8 jnFlags;            /* JNODE flags */jnFlags178382,6368420
  u8 iVal;               /* Replacement value when JNODE_REPLACE */iVal178383,6368463
  u32 n;                 /* Bytes of content, or number of sub-nodes */n178384,6368531
    const char *zJContent; /* Content for INT, REAL, and STRING */zJContent178386,6368613
    u32 iAppend;           /* More terms for ARRAY and OBJECT */iAppend178387,6368680
    u32 iKey;              /* Key for ARRAY objects in json_tree() */iKey178388,6368745
  } u;u178389,6368815
struct JsonParse {JsonParse178394,6368864
  u32 nNode;         /* Number of slots of aNode[] used */nNode178395,6368883
  u32 nAlloc;        /* Number of slots of aNode[] allocated */nAlloc178396,6368942
  JsonNode *aNode;   /* Array of nodes containing the parse */aNode178397,6369006
  const char *zJson; /* Original JSON string */zJson178398,6369069
  u32 *aUp;          /* Index of parent of each node */aUp178399,6369117
  u8 oom;            /* Set to true if out of memory */oom178400,6369173
  u8 nErr;           /* Number of errors seen */nErr178401,6369229
static void jsonZero(JsonString *p){jsonZero178410,6369542
static void jsonInit(JsonString *p, sqlite3_context *pCtx){jsonInit178419,6369711
static void jsonReset(JsonString *p){jsonReset178429,6369917
static void jsonOom(JsonString *p){jsonOom178437,6370064
static int jsonGrow(JsonString *p, u32 N){jsonGrow178446,6370302
static void jsonAppendRaw(JsonString *p, const char *zIn, u32 N){jsonAppendRaw178473,6370922
static void jsonPrintf(int N, JsonString *p, const char *zFormat, ...){jsonPrintf178481,6371177
static void jsonAppendChar(JsonString *p, char c){jsonAppendChar178492,6371499
static void jsonAppendSeparator(JsonString *p){jsonAppendSeparator178500,6371737
static void jsonAppendString(JsonString *p, const char *zIn, u32 N){jsonAppendString178512,6372116
static void jsonAppendValue(jsonAppendValue178555,6373521
static void jsonResult(JsonString *p){jsonResult178595,6374550
static u32 jsonNodeSize(JsonNode *pNode){jsonNodeSize178618,6375402
static void jsonParseReset(JsonParse *pParse){jsonParseReset178626,6375611
static void jsonRenderNode(jsonRenderNode178640,6375982
static void jsonReturnJson(jsonReturnJson178724,6378332
static void jsonReturn(jsonReturn178739,6378750
#  define JSON_NOINLINE JSON_NOINLINE178886,6383041
#  define JSON_NOINLINE JSON_NOINLINE178888,6383134
#  define JSON_NOINLINEJSON_NOINLINE178890,6383186
static JSON_NOINLINE int jsonParseAddNodeExpand(jsonParseAddNodeExpand178894,6383219
static int jsonParseAddNode(jsonParseAddNode178921,6384095
static int jsonIs4Hex(const char *z){jsonIs4Hex178943,6384699
static int jsonParseValue(JsonParse *pParse, u32 i){jsonParseValue178957,6385146
static int jsonParse(jsonParse179103,6389391
static void jsonParseFillInParentage(JsonParse *pParse, u32 i, u32 iParent){jsonParseFillInParentage179135,6390228
static int jsonParseFindParents(JsonParse *pParse){jsonParseFindParents179162,6390865
static int jsonLabelCompare(JsonNode *pNode, const char *zKey, u32 nKey){jsonLabelCompare179178,6391245
static JsonNode *jsonLookupStep(jsonLookupStep179200,6392004
static JsonNode *jsonLookupAppend(jsonLookupAppend179313,6395196
static char *jsonPathSyntaxError(const char *zErr){jsonPathSyntaxError179339,6396031
static JsonNode *jsonLookup(jsonLookup179353,6396475
static void jsonWrongNumArgs(jsonWrongNumArgs179390,6397345
static void jsonParseFunc(jsonParseFunc179411,6397999
static void jsonTest1Func(jsonTest1Func179449,6399065
static void jsonQuoteFunc(jsonQuoteFunc179469,6399724
static void jsonArrayFunc(jsonArrayFunc179488,6400157
static void jsonArrayLengthFunc(jsonArrayLengthFunc179515,6400704
static void jsonExtractFunc(jsonExtractFunc179553,6401699
static void jsonObjectFunc(jsonObjectFunc179597,6402820
static void jsonRemoveFunc(jsonRemoveFunc179639,6403848
static void jsonReplaceFunc(jsonReplaceFunc179672,6404725
static void jsonSetFunc(jsonSetFunc179719,6405965
static void jsonTypeFunc(jsonTypeFunc179768,6407183
static void jsonValidFunc(jsonValidFunc179797,6407839
static void jsonArrayStep(jsonArrayStep179822,6408447
static void jsonArrayFinal(sqlite3_context *ctx){jsonArrayFinal179841,6408862
static void jsonObjectStep(jsonObjectStep179866,6409571
static void jsonObjectFinal(sqlite3_context *ctx){jsonObjectFinal179891,6410171
typedef struct JsonEachCursor JsonEachCursor;JsonEachCursor179915,6410966
struct JsonEachCursor {JsonEachCursor179916,6411012
  sqlite3_vtab_cursor base;  /* Base class - must be first */base179917,6411036
  u32 iRowid;                /* The rowid */iRowid179918,6411098
  u32 iBegin;                /* The first node of the scan */iBegin179919,6411143
  u32 i;                     /* Index in sParse.aNode[] of current row */i179920,6411205
  u32 iEnd;                  /* EOF when i equals or exceeds this value */iEnd179921,6411279
  u8 eType;                  /* Type of top-level element */eType179922,6411354
  u8 bRecursive;             /* True for json_tree().  False for json_each() */bRecursive179923,6411415
  char *zJson;               /* Input JSON */zJson179924,6411495
  char *zRoot;               /* Path by which to filter zJson */zRoot179925,6411541
  JsonParse sParse;          /* Parse of the input JSON */sParse179926,6411606
static int jsonEachConnect(jsonEachConnect179930,6411719
#define JEACH_KEY JEACH_KEY179941,6411909
#define JEACH_VALUE JEACH_VALUE179942,6411933
#define JEACH_TYPE JEACH_TYPE179943,6411957
#define JEACH_ATOM JEACH_ATOM179944,6411981
#define JEACH_ID JEACH_ID179945,6412005
#define JEACH_PARENT JEACH_PARENT179946,6412029
#define JEACH_FULLKEY JEACH_FULLKEY179947,6412053
#define JEACH_PATH JEACH_PATH179948,6412077
#define JEACH_JSON JEACH_JSON179949,6412101
#define JEACH_ROOT JEACH_ROOT179950,6412125
static int jsonEachDisconnect(sqlite3_vtab *pVtab){jsonEachDisconnect179968,6412604
static int jsonEachOpenEach(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){jsonEachOpenEach179974,6412765
static int jsonEachOpenTree(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){jsonEachOpenTree179986,6413113
static void jsonEachCursorReset(JsonEachCursor *p){jsonEachCursorReset179997,6413440
static int jsonEachClose(sqlite3_vtab_cursor *cur){jsonEachClose180010,6413714
static int jsonEachEof(sqlite3_vtab_cursor *cur){jsonEachEof180019,6413979
static int jsonEachNext(sqlite3_vtab_cursor *cur){jsonEachNext180025,6414163
static void jsonEachComputePath(jsonEachComputePath180066,6415100
static int jsonEachColumn(jsonEachColumn180093,6415893
static int jsonEachRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){jsonEachRowid180191,6418631
static int jsonEachBestIndex(jsonEachBestIndex180202,6419040
static int jsonEachFilter(jsonEachFilter180241,6420145
static sqlite3_module jsonEachModule = {jsonEachModule180320,6422475
static sqlite3_module jsonTreeModule = {jsonTreeModule180347,6423700
SQLITE_PRIVATE int sqlite3Json1Init(sqlite3 *db){sqlite3Json1Init180380,6425284
__declspec(dllexport)__declspec180450,6428018
# define NDEBUG NDEBUG180471,6428606
# undef NDEBUGNDEBUG180474,6428676
#define _FTS5_H_FTS5_H180498,6429273
typedef struct Fts5ExtensionApi Fts5ExtensionApi;Fts5ExtensionApi180513,6429579
typedef struct Fts5Context Fts5Context;Fts5Context180514,6429629
typedef struct Fts5PhraseIter Fts5PhraseIter;Fts5PhraseIter180515,6429669
typedef void (*fts5_extension_function)(fts5_extension_function180517,6429716
struct Fts5PhraseIter {Fts5PhraseIter180525,6430129
  const unsigned char *a;a180526,6430153
  const unsigned char *b;b180527,6430179
struct Fts5ExtensionApi {Fts5ExtensionApi180745,6439840
  int iVersion;                   /* Currently always set to 3 */iVersion180746,6439866
  void *(*xUserData)(Fts5Context*);xUserData180748,6439933
  int (*xColumnCount)(Fts5Context*);xColumnCount180750,6439970
  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);xRowCount180751,6440007
  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);xColumnTotalSize180752,6440063
  int (*xTokenize)(Fts5Context*, xTokenize180754,6440139
  int (*xPhraseCount)(Fts5Context*);xPhraseCount180760,6440382
  int (*xPhraseSize)(Fts5Context*, int iPhrase);xPhraseSize180761,6440419
  int (*xInstCount)(Fts5Context*, int *pnInst);xInstCount180763,6440469
  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);xInst180764,6440517
  sqlite3_int64 (*xRowid)(Fts5Context*);xRowid180766,6440597
  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);xColumnText180767,6440638
  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);xColumnSize180768,6440710
  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,xQueryPhrase180770,6440771
  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));xSetAuxdata180773,6440897
  void *(*xGetAuxdata)(Fts5Context*, int bClear);xGetAuxdata180774,6440968
  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);xPhraseFirst180776,6441019
  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);xPhraseNext180777,6441098
  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);xPhraseFirstColumn180779,6441177
  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);xPhraseNextColumn180780,6441256
typedef struct Fts5Tokenizer Fts5Tokenizer;Fts5Tokenizer180979,6451555
typedef struct fts5_tokenizer fts5_tokenizer;fts5_tokenizer180980,6451599
struct fts5_tokenizer {fts5_tokenizer180981,6451645
  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);xCreate180982,6451669
  void (*xDelete)(Fts5Tokenizer*);xDelete180983,6451747
  int (*xTokenize)(Fts5Tokenizer*, xTokenize180984,6451782
#define FTS5_TOKENIZE_QUERY FTS5_TOKENIZE_QUERY181000,6452453
#define FTS5_TOKENIZE_PREFIX FTS5_TOKENIZE_PREFIX181001,6452492
#define FTS5_TOKENIZE_DOCUMENT FTS5_TOKENIZE_DOCUMENT181002,6452531
#define FTS5_TOKENIZE_AUX FTS5_TOKENIZE_AUX181003,6452570
#define FTS5_TOKEN_COLOCATED FTS5_TOKEN_COLOCATED181007,6452744
typedef struct fts5_api fts5_api;fts5_api181016,6453044
struct fts5_api {fts5_api181017,6453078
  int iVersion;                   /* Currently always set to 2 */iVersion181018,6453096
  int (*xCreateTokenizer)(xCreateTokenizer181021,6453194
  int (*xFindTokenizer)(xFindTokenizer181030,6453385
  int (*xCreateFunction)(xCreateFunction181038,6453552
#define _FTS5INT_H_FTS5INT_H181071,6454297
typedef unsigned char  u8;u8181082,6454477
typedef unsigned int   u32;u32181083,6454504
typedef unsigned short u16;u16181084,6454532
typedef short i16;i16181085,6454560
typedef sqlite3_int64 i64;i64181086,6454579
typedef sqlite3_uint64 u64;u64181087,6454606
#define ArraySize(ArraySize181089,6454635
#define testcase(testcase181091,6454691
#define ALWAYS(ALWAYS181092,6454711
#define NEVER(NEVER181093,6454731
#define MIN(MIN181095,6454751
#define MAX(MAX181096,6454794
# define LARGEST_INT64 LARGEST_INT64181101,6454919
# define SMALLEST_INT64 SMALLEST_INT64181102,6454980
#define FTS5_MAX_TOKEN_SIZE FTS5_MAX_TOKEN_SIZE181109,6455254
#define FTS5_MAX_PREFIX_INDEXES FTS5_MAX_PREFIX_INDEXES181116,6455494
#define FTS5_DEFAULT_NEARDIST FTS5_DEFAULT_NEARDIST181118,6455530
#define FTS5_DEFAULT_RANK FTS5_DEFAULT_RANK181119,6455563
#define FTS5_RANK_NAME FTS5_RANK_NAME181122,6455638
#define FTS5_ROWID_NAME FTS5_ROWID_NAME181123,6455668
# define FTS5_CORRUPT FTS5_CORRUPT181126,6455721
# define FTS5_CORRUPT FTS5_CORRUPT181129,6455807
# define assert_nc(assert_nc181139,6456123
# define assert_nc(assert_nc181141,6456194
# define UNUSED_PARAM(UNUSED_PARAM181147,6456341
# define UNUSED_PARAM2(UNUSED_PARAM2181151,6456407
typedef struct Fts5Global Fts5Global;Fts5Global181154,6456466
typedef struct Fts5Colset Fts5Colset;Fts5Colset181155,6456504
struct Fts5Colset {Fts5Colset181163,6456825
  int nCol;nCol181164,6456845
  int aiCol[1];aiCol181165,6456857
typedef struct Fts5Config Fts5Config;Fts5Config181175,6457107
struct Fts5Config {Fts5Config181212,6458315
  sqlite3 *db;                    /* Database handle */db181213,6458335
  char *zDb;                      /* Database holding FTS index (e.g. "main") */zDb181214,6458391
  char *zName;                    /* Name of FTS index */zName181215,6458472
  int nCol;                       /* Number of columns */nCol181216,6458530
  char **azCol;                   /* Column names */azCol181217,6458588
  u8 *abUnindexed;                /* True for unindexed columns */abUnindexed181218,6458641
  int nPrefix;                    /* Number of prefix indexes */nPrefix181219,6458708
  int *aPrefix;                   /* Sizes in bytes of nPrefix prefix indexes */aPrefix181220,6458773
  int eContent;                   /* An FTS5_CONTENT value */eContent181221,6458854
  char *zContent;                 /* content table */ zContent181222,6458916
  char *zContentRowid;            /* "content_rowid=" option value */ zContentRowid181223,6458971
  int bColumnsize;                /* "columnsize=" option value (dflt==1) */bColumnsize181224,6459042
  int eDetail;                    /* FTS5_DETAIL_XXX value */eDetail181225,6459119
  char *zContentExprlist;zContentExprlist181226,6459181
  Fts5Tokenizer *pTok;pTok181227,6459207
  fts5_tokenizer *pTokApi;pTokApi181228,6459230
  int iCookie;                    /* Incremented when %_config is modified */iCookie181231,6459304
  int pgsz;                       /* Approximate page size used in %_data */pgsz181232,6459382
  int nAutomerge;                 /* 'automerge' setting */nAutomerge181233,6459459
  int nCrisisMerge;               /* Maximum allowed segments per level */nCrisisMerge181234,6459519
  int nUsermerge;                 /* 'usermerge' setting */nUsermerge181235,6459594
  int nHashSize;                  /* Bytes of memory for in-memory hash */nHashSize181236,6459654
  char *zRank;                    /* Name of rank function */zRank181237,6459729
  char *zRankArgs;                /* Arguments to rank function */zRankArgs181238,6459791
  char **pzErrmsg;pzErrmsg181241,6459929
  int bPrefixIndex;               /* True to use prefix-indexes */bPrefixIndex181244,6459969
#define FTS5_CURRENT_VERSION FTS5_CURRENT_VERSION181249,6460110
#define FTS5_CONTENT_NORMAL FTS5_CONTENT_NORMAL181251,6460142
#define FTS5_CONTENT_NONE FTS5_CONTENT_NONE181252,6460174
#define FTS5_CONTENT_EXTERNAL FTS5_CONTENT_EXTERNAL181253,6460206
#define FTS5_DETAIL_FULL FTS5_DETAIL_FULL181255,6460239
#define FTS5_DETAIL_NONE FTS5_DETAIL_NONE181256,6460269
#define FTS5_DETAIL_COLUMNS FTS5_DETAIL_COLUMNS181257,6460299
typedef struct Fts5Buffer Fts5Buffer;Fts5Buffer181297,6461571
struct Fts5Buffer {Fts5Buffer181298,6461609
  u8 *p;p181299,6461629
  int n;n181300,6461638
  int nSpace;nSpace181301,6461647
#define fts5BufferZero(fts5BufferZero181315,6462255
#define fts5BufferAppendVarint(fts5BufferAppendVarint181316,6462318
#define fts5BufferFree(fts5BufferFree181317,6462393
#define fts5BufferAppendBlob(fts5BufferAppendBlob181318,6462456
#define fts5BufferSet(fts5BufferSet181319,6462531
#define fts5BufferGrow(fts5BufferGrow181321,6462600
#define FTS5_POS2COLUMN(FTS5_POS2COLUMN181330,6462901
#define FTS5_POS2OFFSET(FTS5_POS2OFFSET181331,6462949
typedef struct Fts5PoslistReader Fts5PoslistReader;Fts5PoslistReader181333,6463005
struct Fts5PoslistReader {Fts5PoslistReader181334,6463057
  const u8 *a;                    /* Position list to iterate through */a181336,6463154
  int n;                          /* Size of buffer at a[] in bytes */n181337,6463227
  int i;                          /* Current offset in a[] */i181338,6463298
  u8 bFlag;                       /* For client use (any custom purpose) */bFlag181340,6463361
  u8 bEof;                        /* Set to true at EOF */bEof181343,6463463
  i64 iPos;                       /* (iCol<<32) + iPos */iPos181344,6463522
typedef struct Fts5PoslistWriter Fts5PoslistWriter;Fts5PoslistWriter181352,6463833
struct Fts5PoslistWriter {Fts5PoslistWriter181353,6463885
  i64 iPrev;iPrev181354,6463912
typedef struct Fts5Termset Fts5Termset;Fts5Termset181374,6464639
typedef struct Fts5Index Fts5Index;Fts5Index181388,6465196
typedef struct Fts5IndexIter Fts5IndexIter;Fts5IndexIter181389,6465232
struct Fts5IndexIter {Fts5IndexIter181391,6465277
  i64 iRowid;iRowid181392,6465300
  const u8 *pData;pData181393,6465314
  int nData;nData181394,6465333
  u8 bEof;bEof181395,6465346
#define sqlite3Fts5IterEof(sqlite3Fts5IterEof181398,6465361
#define FTS5INDEX_QUERY_PREFIX FTS5INDEX_QUERY_PREFIX181403,6465479
#define FTS5INDEX_QUERY_DESC FTS5INDEX_QUERY_DESC181404,6465542
#define FTS5INDEX_QUERY_TEST_NOIDX FTS5INDEX_QUERY_TEST_NOIDX181405,6465623
#define FTS5INDEX_QUERY_SCAN FTS5INDEX_QUERY_SCAN181406,6465697
#define FTS5INDEX_QUERY_SKIPEMPTY FTS5INDEX_QUERY_SKIPEMPTY181411,6465929
#define FTS5INDEX_QUERY_NOOUTPUT FTS5INDEX_QUERY_NOOUTPUT181412,6465971
#define fts5GetVarint32(fts5GetVarint32181559,6470755
#define fts5GetVarint fts5GetVarint181560,6470819
#define fts5FastGetVarint32(fts5FastGetVarint32181562,6470866
typedef struct Fts5Hash Fts5Hash;Fts5Hash181598,6471881
#define FTS5_STMT_SCAN_ASC FTS5_STMT_SCAN_ASC181649,6473675
#define FTS5_STMT_SCAN_DESC FTS5_STMT_SCAN_DESC181650,6473755
#define FTS5_STMT_LOOKUP FTS5_STMT_LOOKUP181651,6473836
typedef struct Fts5Storage Fts5Storage;Fts5Storage181653,6473916
typedef struct Fts5Expr Fts5Expr;Fts5Expr181696,6475733
typedef struct Fts5ExprNode Fts5ExprNode;Fts5ExprNode181697,6475767
typedef struct Fts5Parse Fts5Parse;Fts5Parse181698,6475809
typedef struct Fts5Token Fts5Token;Fts5Token181699,6475845
typedef struct Fts5ExprPhrase Fts5ExprPhrase;Fts5ExprPhrase181700,6475881
typedef struct Fts5ExprNearset Fts5ExprNearset;Fts5ExprNearset181701,6475927
struct Fts5Token {Fts5Token181703,6475976
  const char *p;                  /* Token text (not NULL terminated) */p181704,6475995
  int n;                          /* Size of buffer p in bytes */n181705,6476068
typedef struct Fts5PoslistPopulator Fts5PoslistPopulator;Fts5PoslistPopulator181739,6477118
#define FTS5_OR FTS5_OR181847,6480491
#define FTS5_AND FTS5_AND181848,6480539
#define FTS5_NOT FTS5_NOT181849,6480587
#define FTS5_TERM FTS5_TERM181850,6480635
#define FTS5_COLON FTS5_COLON181851,6480683
#define FTS5_LP FTS5_LP181852,6480731
#define FTS5_RP FTS5_RP181853,6480779
#define FTS5_MINUS FTS5_MINUS181854,6480827
#define FTS5_LCP FTS5_LCP181855,6480875
#define FTS5_RCP FTS5_RCP181856,6480923
#define FTS5_STRING FTS5_STRING181857,6480971
#define FTS5_COMMA FTS5_COMMA181858,6481019
#define FTS5_PLUS FTS5_PLUS181859,6481067
#define FTS5_STAR FTS5_STAR181860,6481115
#define fts5YYNOERRORRECOVERY fts5YYNOERRORRECOVERY181896,6482402
#define fts5yytestcase(fts5yytestcase181901,6482489
#define fts5YYPARSEFREENOTNULL fts5YYPARSEFREENOTNULL181907,6482616
#define fts5YYMALLOCARGTYPE fts5YYMALLOCARGTYPE181913,6482782
# define INTERFACE INTERFACE181970,6486566
#define fts5YYCODETYPE fts5YYCODETYPE181973,6486675
#define fts5YYNOCODE fts5YYNOCODE181974,6486712
#define fts5YYACTIONTYPE fts5YYACTIONTYPE181975,6486736
#define sqlite3Fts5ParserFTS5TOKENTYPE sqlite3Fts5ParserFTS5TOKENTYPE181976,6486775
  int fts5yyinit;fts5yyinit181978,6486840
  sqlite3Fts5ParserFTS5TOKENTYPE fts5yy0;fts5yy0181979,6486858
  int fts5yy4;fts5yy4181980,6486900
  Fts5Colset* fts5yy11;fts5yy11181981,6486915
  Fts5ExprNode* fts5yy24;fts5yy24181982,6486939
  Fts5ExprNearset* fts5yy46;fts5yy46181983,6486965
  Fts5ExprPhrase* fts5yy53;fts5yy53181984,6486994
} fts5YYMINORTYPE;fts5YYMINORTYPE181985,6487022
#define fts5YYSTACKDEPTH fts5YYSTACKDEPTH181987,6487066
#define sqlite3Fts5ParserARG_SDECL sqlite3Fts5ParserARG_SDECL181989,6487102
#define sqlite3Fts5ParserARG_PDECL sqlite3Fts5ParserARG_PDECL181990,6487156
#define sqlite3Fts5ParserARG_FETCH sqlite3Fts5ParserARG_FETCH181991,6487210
#define sqlite3Fts5ParserARG_STORE sqlite3Fts5ParserARG_STORE181992,6487287
#define fts5YYNSTATE fts5YYNSTATE181993,6487353
#define fts5YYNRULE fts5YYNRULE181994,6487389
#define fts5YY_MAX_SHIFT fts5YY_MAX_SHIFT181995,6487425
#define fts5YY_MIN_SHIFTREDUCE fts5YY_MIN_SHIFTREDUCE181996,6487461
#define fts5YY_MAX_SHIFTREDUCE fts5YY_MAX_SHIFTREDUCE181997,6487497
#define fts5YY_MIN_REDUCE fts5YY_MIN_REDUCE181998,6487533
#define fts5YY_MAX_REDUCE fts5YY_MAX_REDUCE181999,6487569
#define fts5YY_ERROR_ACTION fts5YY_ERROR_ACTION182000,6487605
#define fts5YY_ACCEPT_ACTION fts5YY_ACCEPT_ACTION182001,6487641
#define fts5YY_NO_ACTION fts5YY_NO_ACTION182002,6487677
# define fts5yytestcase(fts5yytestcase182014,6488158
#define fts5YY_ACTTAB_COUNT fts5YY_ACTTAB_COUNT182074,6490998
static const fts5YYACTIONTYPE fts5yy_action[] = {fts5yy_action182075,6491031
static const fts5YYCODETYPE fts5yy_lookahead[] = {fts5yy_lookahead182086,6491720
#define fts5YY_SHIFT_USE_DFLT fts5YY_SHIFT_USE_DFLT182097,6492410
#define fts5YY_SHIFT_COUNT fts5YY_SHIFT_COUNT182098,6492445
#define fts5YY_SHIFT_MIN fts5YY_SHIFT_MIN182099,6492480
#define fts5YY_SHIFT_MAX fts5YY_SHIFT_MAX182100,6492514
static const unsigned char fts5yy_shift_ofst[] = {fts5yy_shift_ofst182101,6492549
#define fts5YY_REDUCE_USE_DFLT fts5YY_REDUCE_USE_DFLT182106,6492819
#define fts5YY_REDUCE_COUNT fts5YY_REDUCE_COUNT182107,6492856
#define fts5YY_REDUCE_MIN fts5YY_REDUCE_MIN182108,6492889
#define fts5YY_REDUCE_MAX fts5YY_REDUCE_MAX182109,6492923
static const signed char fts5yy_reduce_ofst[] = {fts5yy_reduce_ofst182110,6492956
static const fts5YYACTIONTYPE fts5yy_default[] = {fts5yy_default182114,6493127
static const fts5YYCODETYPE fts5yyFallback[] = {fts5yyFallback182136,6494089
struct fts5yyStackEntry {fts5yyStackEntry182156,6494815
  fts5YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */stateno182157,6494841
  fts5YYCODETYPE major;      /* The major token value.  This is the codemajor182158,6494926
  fts5YYMINORTYPE minor;     /* The user-supplied minor token value.  Thisminor182160,6495071
typedef struct fts5yyStackEntry fts5yyStackEntry;fts5yyStackEntry182163,6495207
struct fts5yyParser {fts5yyParser182167,6495357
  fts5yyStackEntry *fts5yytos;          /* Pointer to top element of the stack */fts5yytos182168,6495379
  int fts5yyhwm;                    /* High-water mark of the stack */fts5yyhwm182170,6495493
  int fts5yyerrcnt;                 /* Shifts left before out of the error */fts5yyerrcnt182173,6495601
  int fts5yystksz;                  /* Current side of the stack */fts5yystksz182177,6495792
  fts5yyStackEntry *fts5yystack;        /* The parser's stack */fts5yystack182178,6495860
  fts5yyStackEntry fts5yystk0;          /* First stack entry */fts5yystk0182179,6495925
typedef struct fts5yyParser fts5yyParser;fts5yyParser182184,6496081
static FILE *fts5yyTraceFILE = 0;fts5yyTraceFILE182188,6496164
static char *fts5yyTracePrompt = 0;fts5yyTracePrompt182189,6496198
static void sqlite3Fts5ParserTrace(FILE *TraceFILE, char *zTracePrompt){sqlite3Fts5ParserTrace182210,6496746
static const char *const fts5yyTokenName[] = { fts5yyTokenName182221,6497158
static const char *const fts5yyRuleName[] = {fts5yyRuleName182235,6497782
static int fts5yyGrowStack(fts5yyParser *p){fts5yyGrowStack182271,6499014
# define fts5YYMALLOCARGTYPE fts5YYMALLOCARGTYPE182305,6500000
static void sqlite3Fts5ParserInit(void *fts5yypParser){sqlite3Fts5ParserInit182310,6500107
static void *sqlite3Fts5ParserAlloc(void *(*mallocProc)(fts5YYMALLOCARGTYPE)){sqlite3Fts5ParserAlloc182345,6501083
static void fts5yy_destructor(fts5yy_destructor182361,6501781
static void fts5yy_pop_parser_stack(fts5yyParser *pParser){fts5yy_pop_parser_stack182419,6503483
static void sqlite3Fts5ParserFinalize(void *p){sqlite3Fts5ParserFinalize182437,6503998
static void sqlite3Fts5ParserFree(sqlite3Fts5ParserFree182454,6504653
static int sqlite3Fts5ParserStackPeak(void *p){sqlite3Fts5ParserStackPeak182470,6505075
static unsigned int fts5yy_find_shift_action(fts5yy_find_shift_action182480,6505307
static int fts5yy_find_reduce_action(fts5yy_find_reduce_action182543,6507242
static void fts5yyStackOverflow(fts5yyParser *fts5yypParser){fts5yyStackOverflow182573,6508029
static void fts5yyTraceShift(fts5yyParser *fts5yypParser, int fts5yyNewState){fts5yyTraceShift182594,6508828
# define fts5yyTraceShift(fts5yyTraceShift182607,6509293
static void fts5yy_shift(fts5yy_shift182613,6509365
  fts5YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */lhs182656,6510940
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */nrhs182657,6511017
} fts5yyRuleInfo[] = {fts5yyRuleInfo182658,6511095
static void fts5yy_reduce(fts5yy_reduce182693,6511621
static void fts5yy_parse_failed(fts5yy_parse_failed182903,6520081
static void fts5yy_syntax_error(fts5yy_syntax_error182924,6520864
#define FTS5TOKEN FTS5TOKEN182930,6521158
static void fts5yy_accept(fts5yy_accept182944,6521667
static void sqlite3Fts5Parser(sqlite3Fts5Parser182983,6523007
typedef struct CInstIter CInstIter;CInstIter183176,6530121
struct CInstIter {CInstIter183177,6530157
  const Fts5ExtensionApi *pApi;   /* API offered by current FTS version */pApi183178,6530176
  Fts5Context *pFts;              /* First arg to pass to pApi functions */pFts183179,6530251
  int iCol;                       /* Column to search */iCol183180,6530327
  int iInst;                      /* Next phrase instance index */iInst183181,6530384
  int nInst;                      /* Total number of phrase instances */nInst183182,6530451
  int iStart;                     /* First token in coalesced phrase instance */iStart183185,6530550
  int iEnd;                       /* Last token in coalesced phrase instance */iEnd183186,6530631
static int fts5CInstIterNext(CInstIter *pIter){fts5CInstIterNext183193,6530859
static int fts5CInstIterInit(fts5CInstIterInit183224,6531670
typedef struct HighlightContext HighlightContext;HighlightContext183250,6532149
struct HighlightContext {HighlightContext183251,6532199
  CInstIter iter;                 /* Coalesced Instance Iterator */iter183252,6532225
  int iPos;                       /* Current token offset in zIn[] */iPos183253,6532293
  int iRangeStart;                /* First token to include */iRangeStart183254,6532363
  int iRangeEnd;                  /* If non-zero, last token to include */iRangeEnd183255,6532426
  const char *zOpen;              /* Opening highlight */zOpen183256,6532501
  const char *zClose;             /* Closing highlight */zClose183257,6532559
  const char *zIn;                /* Input text */zIn183258,6532617
  int nIn;                        /* Size of input text in bytes */nIn183259,6532668
  int iOff;                       /* Current offset within zIn[] */iOff183260,6532736
  char *zOut;                     /* Output value */zOut183261,6532804
static void fts5HighlightAppend(fts5HighlightAppend183273,6533294
static int fts5HighlightCb(fts5HighlightCb183288,6533630
static void fts5HighlightFunction(fts5HighlightFunction183342,6535273
typedef struct Fts5SFinder Fts5SFinder;Fts5SFinder183391,6536832
struct Fts5SFinder {Fts5SFinder183392,6536872
  int iPos;                       /* Current token position */iPos183393,6536893
  int nFirstAlloc;                /* Allocated size of aFirst[] */nFirstAlloc183394,6536956
  int nFirst;                     /* Number of entries in aFirst[] */nFirst183395,6537023
  int *aFirst;                    /* Array of first token in each sentence */aFirst183396,6537093
  const char *zDoc;               /* Document being tokenized */zDoc183397,6537171
static int fts5SentenceFinderAdd(Fts5SFinder *p, int iAdd){fts5SentenceFinderAdd183405,6537400
static int fts5SentenceFinderCb(fts5SentenceFinderCb183424,6538009
static int fts5SnippetScore(fts5SnippetScore183457,6538987
static void fts5SnippetFunction(fts5SnippetFunction183503,6540367
typedef struct Fts5Bm25Data Fts5Bm25Data;Fts5Bm25Data183659,6545654
struct Fts5Bm25Data {Fts5Bm25Data183660,6545696
  int nPhrase;                    /* Number of phrases in query */nPhrase183661,6545718
  double avgdl;                   /* Average number of tokens in each row */avgdl183662,6545785
  double *aIDF;                   /* IDF for each phrase */aIDF183663,6545862
  double *aFreq;                  /* Array used to calculate phrase freq. */aFreq183664,6545922
static int fts5CountCb(fts5CountCb183671,6546143
static int fts5Bm25GetData(fts5Bm25GetData183687,6546573
static void fts5Bm25Function(fts5Bm25Function183759,6549094
static int sqlite3Fts5AuxInit(fts5_api *pApi){sqlite3Fts5AuxInit183817,6551331
static int sqlite3Fts5BufferSize(int *pRc, Fts5Buffer *pBuf, u32 nByte){sqlite3Fts5BufferSize183862,6552591
static void sqlite3Fts5BufferAppendVarint(int *pRc, Fts5Buffer *pBuf, i64 iVal){sqlite3Fts5BufferAppendVarint183886,6553145
static void sqlite3Fts5Put32(u8 *aBuf, int iVal){sqlite3Fts5Put32183891,6553334
static int sqlite3Fts5Get32(const u8 *aBuf){sqlite3Fts5Get32183898,6553519
static void sqlite3Fts5BufferAppendBlob(sqlite3Fts5BufferAppendBlob183907,6553823
static void sqlite3Fts5BufferAppendString(sqlite3Fts5BufferAppendString183924,6554292
static void sqlite3Fts5BufferAppendPrintf(sqlite3Fts5BufferAppendPrintf183942,6554851
static char *sqlite3Fts5Mprintf(int *pRc, const char *zFmt, ...){sqlite3Fts5Mprintf183963,6555235
static void sqlite3Fts5BufferFree(Fts5Buffer *pBuf){sqlite3Fts5BufferFree183981,6555597
static void sqlite3Fts5BufferZero(Fts5Buffer *pBuf){sqlite3Fts5BufferZero183990,6555820
static void sqlite3Fts5BufferSet(sqlite3Fts5BufferSet183999,6556077
static int sqlite3Fts5PoslistNext64(sqlite3Fts5PoslistNext64184009,6556253
static int sqlite3Fts5PoslistReaderNext(Fts5PoslistReader *pIter){sqlite3Fts5PoslistReaderNext184039,6556977
static int sqlite3Fts5PoslistReaderInit(sqlite3Fts5PoslistReaderInit184046,6557173
static void sqlite3Fts5PoslistSafeAppend(sqlite3Fts5PoslistSafeAppend184063,6557743
static int sqlite3Fts5PoslistWriterAppend(sqlite3Fts5PoslistWriterAppend184078,6558166
static void *sqlite3Fts5MallocZero(int *pRc, int nByte){sqlite3Fts5MallocZero184089,6558490
static char *sqlite3Fts5Strndup(int *pRc, const char *pIn, int nIn){sqlite3Fts5Strndup184110,6559114
static int sqlite3Fts5IsBareword(char t){sqlite3Fts5IsBareword184138,6559819
typedef struct Fts5TermsetEntry Fts5TermsetEntry;Fts5TermsetEntry184156,6560623
struct Fts5TermsetEntry {Fts5TermsetEntry184157,6560673
  char *pTerm;pTerm184158,6560699
  int nTerm;nTerm184159,6560714
  int iIdx;                       /* Index (main or aPrefix[] entry) */iIdx184160,6560727
  Fts5TermsetEntry *pNext;pNext184161,6560799
struct Fts5Termset {Fts5Termset184164,6560830
  Fts5TermsetEntry *apHash[512];apHash184165,6560851
static int sqlite3Fts5TermsetNew(Fts5Termset **pp){sqlite3Fts5TermsetNew184168,6560888
static int sqlite3Fts5TermsetAdd(sqlite3Fts5TermsetAdd184174,6561035
static void sqlite3Fts5TermsetFree(Fts5Termset *p){sqlite3Fts5TermsetFree184223,6562338
#define FTS5_DEFAULT_PAGE_SIZE FTS5_DEFAULT_PAGE_SIZE184256,6563137
#define FTS5_DEFAULT_AUTOMERGE FTS5_DEFAULT_AUTOMERGE184257,6563175
#define FTS5_DEFAULT_USERMERGE FTS5_DEFAULT_USERMERGE184258,6563213
#define FTS5_DEFAULT_CRISISMERGE FTS5_DEFAULT_CRISISMERGE184259,6563251
#define FTS5_DEFAULT_HASHSIZE FTS5_DEFAULT_HASHSIZE184260,6563289
#define FTS5_MAX_PAGE_SIZE FTS5_MAX_PAGE_SIZE184263,6563367
static int fts5_iswhitespace(char x){fts5_iswhitespace184265,6563406
static int fts5_isopenquote(char x){fts5_isopenquote184269,6563466
static const char *fts5ConfigSkipWhitespace(const char *pIn){fts5ConfigSkipWhitespace184278,6563755
static const char *fts5ConfigSkipBareword(const char *pIn){fts5ConfigSkipBareword184291,6564111
static int fts5_isdigit(char a){fts5_isdigit184298,6564274
static const char *fts5ConfigSkipLiteral(const char *pIn){fts5ConfigSkipLiteral184304,6564341
static int fts5Dequote(char *z){fts5Dequote184380,6566186
static void sqlite3Fts5Dequote(char *z){sqlite3Fts5Dequote184425,6567250
struct Fts5Enum {Fts5Enum184436,6567505
  const char *zName;zName184437,6567523
  int eVal;eVal184438,6567544
typedef struct Fts5Enum Fts5Enum;Fts5Enum184440,6567559
static int fts5ConfigSetEnum(fts5ConfigSetEnum184442,6567594
static int fts5ConfigParseSpecial(fts5ConfigParseSpecial184471,6568384
static int fts5ConfigDefaultTokenizer(Fts5Global *pGlobal, Fts5Config *pConfig){fts5ConfigDefaultTokenizer184635,6573064
static const char *fts5ConfigGobbleWord(fts5ConfigGobbleWord184657,6574032
static int fts5ConfigParseColumn(fts5ConfigParseColumn184697,6574935
static int fts5ConfigMakeExprlist(Fts5Config *p){fts5ConfigMakeExprlist184725,6575578
static int sqlite3Fts5ConfigParse(sqlite3Fts5ConfigParse184758,6576718
static void sqlite3Fts5ConfigFree(Fts5Config *pConfig){sqlite3Fts5ConfigFree184877,6580087
static int sqlite3Fts5ConfigDeclareVtab(Fts5Config *pConfig){sqlite3Fts5ConfigDeclareVtab184904,6580895
static int sqlite3Fts5Tokenize(sqlite3Fts5Tokenize184950,6582633
static const char *fts5ConfigSkipArgs(const char *pIn){fts5ConfigSkipArgs184969,6583388
static int sqlite3Fts5ConfigParseRank(sqlite3Fts5ConfigParseRank184996,6583952
static int sqlite3Fts5ConfigSetValue(sqlite3Fts5ConfigSetValue185055,6585277
static int sqlite3Fts5ConfigLoad(Fts5Config *pConfig, int iCookie){sqlite3Fts5ConfigLoad185148,6587625
#define FTS5_EOF FTS5_EOF185222,6589657
#define FTS5_LARGEST_INT64 FTS5_LARGEST_INT64185224,6589677
typedef struct Fts5ExprTerm Fts5ExprTerm;Fts5ExprTerm185226,6589743
struct Fts5Expr {Fts5Expr185240,6590137
  Fts5Index *pIndex;pIndex185241,6590155
  Fts5Config *pConfig;pConfig185242,6590176
  Fts5ExprNode *pRoot;pRoot185243,6590199
  int bDesc;                      /* Iterate in descending rowid order */bDesc185244,6590222
  int nPhrase;                    /* Number of phrases in expression */nPhrase185245,6590296
  Fts5ExprPhrase **apExprPhrase;  /* Pointers to phrase objects */apExprPhrase185246,6590368
struct Fts5ExprNode {Fts5ExprNode185259,6590770
  int eType;                      /* Node type */eType185260,6590792
  int bEof;                       /* True at EOF */bEof185261,6590842
  int bNomatch;                   /* True if entry is not a match */bNomatch185262,6590894
  int (*xNext)(Fts5Expr*, Fts5ExprNode*, int, i64);xNext185265,6590999
  i64 iRowid;                     /* Current rowid */iRowid185267,6591052
  Fts5ExprNearset *pNear;         /* For FTS5_STRING - cluster of phrases */pNear185268,6591106
  int nChild;                     /* Number of child nodes */nChild185272,6591318
  Fts5ExprNode *apChild[1];       /* Array of child nodes */apChild185273,6591380
#define Fts5NodeIsString(Fts5NodeIsString185276,6591445
#define fts5ExprNodeNext(fts5ExprNodeNext185282,6591681
struct Fts5ExprTerm {Fts5ExprTerm185288,6591846
  int bPrefix;                    /* True for a prefix term */bPrefix185289,6591868
  char *zTerm;                    /* nul-terminated term */zTerm185290,6591931
  Fts5IndexIter *pIter;           /* Iterator for this term */pIter185291,6591991
  Fts5ExprTerm *pSynonym;         /* Pointer to first in list of synonyms */pSynonym185292,6592054
struct Fts5ExprPhrase {Fts5ExprPhrase185299,6592252
  Fts5ExprNode *pNode;            /* FTS5_STRING node this phrase is part of */pNode185300,6592276
  Fts5Buffer poslist;             /* Current position list */poslist185301,6592356
  int nTerm;                      /* Number of entries in aTerm[] */nTerm185302,6592418
  Fts5ExprTerm aTerm[1];          /* Terms that make up this phrase */aTerm185303,6592487
struct Fts5ExprNearset {Fts5ExprNearset185310,6592688
  int nNear;                      /* NEAR parameter */nNear185311,6592713
  Fts5Colset *pColset;            /* Columns to search (NULL -> all columns) */pColset185312,6592768
  int nPhrase;                    /* Number of entries in aPhrase[] array */nPhrase185313,6592848
  Fts5ExprPhrase *apPhrase[1];    /* Array of phrase pointers */apPhrase185314,6592925
struct Fts5Parse {Fts5Parse185321,6593019
  Fts5Config *pConfig;pConfig185322,6593038
  char *zErr;zErr185323,6593061
  int rc;rc185324,6593075
  int nPhrase;                    /* Size of apPhrase array */nPhrase185325,6593085
  Fts5ExprPhrase **apPhrase;      /* Array of all phrases */apPhrase185326,6593148
  Fts5ExprNode *pExpr;            /* Result of a successful parse */pExpr185327,6593209
static void sqlite3Fts5ParseError(Fts5Parse *pParse, const char *zFmt, ...){sqlite3Fts5ParseError185330,6593282
static int fts5ExprIsspace(char t){fts5ExprIsspace185340,6593525
static int fts5ExprGetToken(fts5ExprGetToken185347,6593683
static void *fts5ParseAlloc(u64 t){ return sqlite3_malloc((int)t); }fts5ParseAlloc185410,6595341
static void fts5ParseFree(void *p){ sqlite3_free(p); }fts5ParseFree185411,6595410
static int sqlite3Fts5ExprNew(sqlite3Fts5ExprNew185413,6595466
static void sqlite3Fts5ParseNodeFree(Fts5ExprNode *p){sqlite3Fts5ParseNodeFree185473,6597104
static void sqlite3Fts5ExprFree(Fts5Expr *p){sqlite3Fts5ExprFree185487,6597402
static i64 fts5ExprSynonymRowid(Fts5ExprTerm *pTerm, int bDesc, int *pbEof){fts5ExprSynonymRowid185499,6597661
static int fts5ExprSynonymList(fts5ExprSynonymList185523,6598201
static int fts5ExprPhraseIsMatch(fts5ExprPhraseIsMatch185606,6600637
typedef struct Fts5LookaheadReader Fts5LookaheadReader;Fts5LookaheadReader185687,6603064
struct Fts5LookaheadReader {Fts5LookaheadReader185688,6603120
  const u8 *a;                    /* Buffer containing position list */a185689,6603149
  int n;                          /* Size of buffer a[] in bytes */n185690,6603221
  int i;                          /* Current offset in position list */i185691,6603289
  i64 iPos;                       /* Current position */iPos185692,6603361
  i64 iLookahead;                 /* Next position */iLookahead185693,6603418
#define FTS5_LOOKAHEAD_EOF FTS5_LOOKAHEAD_EOF185696,6603476
static int fts5LookaheadReaderNext(Fts5LookaheadReader *p){fts5LookaheadReaderNext185698,6603521
static int fts5LookaheadReaderInit(fts5LookaheadReaderInit185706,6603764
typedef struct Fts5NearTrimmer Fts5NearTrimmer;Fts5NearTrimmer185717,6604086
struct Fts5NearTrimmer {Fts5NearTrimmer185718,6604134
  Fts5LookaheadReader reader;     /* Input iterator */reader185719,6604159
  Fts5PoslistWriter writer;       /* Writer context */writer185720,6604214
  Fts5Buffer *pOut;               /* Output poslist */pOut185721,6604269
static int fts5ExprNearIsMatch(int *pRc, Fts5ExprNearset *pNear){fts5ExprNearIsMatch185741,6605189
static int fts5ExprAdvanceto(fts5ExprAdvanceto185840,6608409
static int fts5ExprSynonymAdvanceto(fts5ExprSynonymAdvanceto185866,6609190
static int fts5ExprNearTest(fts5ExprNearTest185896,6609992
static int fts5ExprNearInitAll(fts5ExprNearInitAll185953,6611848
static int fts5RowidCmp(fts5RowidCmp186015,6613326
static void fts5ExprSetEof(Fts5ExprNode *pNode){fts5ExprSetEof186030,6613599
static void fts5ExprNodeZeroPoslist(Fts5ExprNode *pNode){fts5ExprNodeZeroPoslist186039,6613779
static int fts5NodeCompare(fts5NodeCompare186069,6614628
static int fts5ExprNodeTest_STRING(fts5ExprNodeTest_STRING186090,6615292
static int fts5ExprNodeNext_STRING(fts5ExprNodeNext_STRING186159,6617638
static int fts5ExprNodeTest_TERM(fts5ExprNodeTest_TERM186224,6619388
static int fts5ExprNodeNext_TERM(fts5ExprNodeNext_TERM186252,6620419
static void fts5ExprNodeTest_OR(fts5ExprNodeTest_OR186276,6620930
static int fts5ExprNodeNext_OR(fts5ExprNodeNext_OR186295,6621478
static int fts5ExprNodeTest_AND(fts5ExprNodeTest_AND186324,6622128
static int fts5ExprNodeNext_AND(fts5ExprNodeNext_AND186373,6623577
static int fts5ExprNodeTest_NOT(fts5ExprNodeTest_NOT186386,6623848
static int fts5ExprNodeNext_NOT(fts5ExprNodeNext_NOT186414,6624646
static int fts5ExprNodeTest(fts5ExprNodeTest186432,6625103
static int fts5ExprNodeFirst(Fts5Expr *pExpr, Fts5ExprNode *pNode){fts5ExprNodeFirst186477,6626168
static int sqlite3Fts5ExprFirst(Fts5Expr *p, Fts5Index *pIdx, i64 iFirst, int bDesc){sqlite3Fts5ExprFirst186536,6627966
static int sqlite3Fts5ExprNext(Fts5Expr *p, i64 iLast){sqlite3Fts5ExprNext186567,6628896
static int sqlite3Fts5ExprEof(Fts5Expr *p){sqlite3Fts5ExprEof186581,6629286
static i64 sqlite3Fts5ExprRowid(Fts5Expr *p){sqlite3Fts5ExprRowid186585,6629358
static int fts5ParseStringFromToken(Fts5Token *pToken, char **pz){fts5ParseStringFromToken186589,6629434
static void fts5ExprPhraseFree(Fts5ExprPhrase *pPhrase){fts5ExprPhraseFree186598,6629655
static Fts5ExprNearset *sqlite3Fts5ParseNearset(sqlite3Fts5ParseNearset186627,6630573
typedef struct TokenCtx TokenCtx;TokenCtx186685,6632220
struct TokenCtx {TokenCtx186686,6632254
  Fts5ExprPhrase *pPhrase;pPhrase186687,6632272
  int rc;rc186688,6632299
static int fts5ParseTokenize(fts5ParseTokenize186694,6632373
static void sqlite3Fts5ParsePhraseFree(Fts5ExprPhrase *pPhrase){sqlite3Fts5ParsePhraseFree186759,6634495
static void sqlite3Fts5ParseNearsetFree(Fts5ExprNearset *pNear){sqlite3Fts5ParseNearsetFree186766,6634657
static void sqlite3Fts5ParseFinished(Fts5Parse *pParse, Fts5ExprNode *p){sqlite3Fts5ParseFinished186777,6634903
static Fts5ExprPhrase *sqlite3Fts5ParseTerm(sqlite3Fts5ParseTerm186787,6635231
static int sqlite3Fts5ExprClonePhrase(sqlite3Fts5ExprClonePhrase186848,6637213
static void sqlite3Fts5ParseNear(Fts5Parse *pParse, Fts5Token *pTok){sqlite3Fts5ParseNear186938,6640184
static void sqlite3Fts5ParseSetDistance(sqlite3Fts5ParseSetDistance186946,6640414
static Fts5Colset *fts5ParseColset(fts5ParseColset186981,6641347
static Fts5Colset *sqlite3Fts5ParseColsetInvert(Fts5Parse *pParse, Fts5Colset *p){sqlite3Fts5ParseColsetInvert187022,6642604
static Fts5Colset *sqlite3Fts5ParseColset(sqlite3Fts5ParseColset187045,6643093
static void sqlite3Fts5ParseSetColset(sqlite3Fts5ParseSetColset187077,6643954
static void fts5ExprAssignXNext(Fts5ExprNode *pNode){fts5ExprAssignXNext187098,6644387
static void fts5ExprAddChildren(Fts5ExprNode *p, Fts5ExprNode *pSub){fts5ExprAddChildren187130,6645114
static Fts5ExprNode *sqlite3Fts5ParseNode(sqlite3Fts5ParseNode187145,6645601
static Fts5ExprNode *sqlite3Fts5ParseImplicitAnd(sqlite3Fts5ParseImplicitAnd187220,6648045
static char *fts5ExprTermPrint(Fts5ExprTerm *pTerm){fts5ExprTermPrint187284,6649748
static char *fts5PrintfAppend(char *zApp, const char *zFmt, ...){fts5PrintfAppend187316,6650473
static char *fts5ExprPrintTcl(fts5ExprPrintTcl187337,6651038
static char *fts5ExprPrint(Fts5Config *pConfig, Fts5ExprNode *pExpr){fts5ExprPrint187416,6653136
static void fts5ExprFunction(fts5ExprFunction187498,6655244
static void fts5ExprFunctionHr(fts5ExprFunctionHr187581,6657462
static void fts5ExprFunctionTcl(fts5ExprFunctionTcl187588,6657717
static void fts5ExprIsAlnum(fts5ExprIsAlnum187601,6658173
static void fts5ExprFold(fts5ExprFold187617,6658635
static int sqlite3Fts5ExprInit(Fts5Global *pGlobal, sqlite3 *db){sqlite3Fts5ExprInit187639,6659359
static int sqlite3Fts5ExprPhraseCount(Fts5Expr *pExpr){sqlite3Fts5ExprPhraseCount187669,6660160
static int sqlite3Fts5ExprPhraseSize(Fts5Expr *pExpr, int iPhrase){sqlite3Fts5ExprPhraseSize187676,6660329
static int sqlite3Fts5ExprPoslist(Fts5Expr *pExpr, int iPhrase, const u8 **pa){sqlite3Fts5ExprPoslist187685,6660591
struct Fts5PoslistPopulator {Fts5PoslistPopulator187699,6660963
  Fts5PoslistWriter writer;writer187700,6660993
  int bOk;                        /* True if ok to populate */bOk187701,6661021
  int bMiss;bMiss187702,6661084
static Fts5PoslistPopulator *sqlite3Fts5ExprClearPoslists(Fts5Expr *pExpr, int bLive){sqlite3Fts5ExprClearPoslists187705,6661101
struct Fts5ExprCtx {Fts5ExprCtx187727,6661787
  Fts5Expr *pExpr;pExpr187728,6661808
  Fts5PoslistPopulator *aPopulator;aPopulator187729,6661827
  i64 iOff;iOff187730,6661863
typedef struct Fts5ExprCtx Fts5ExprCtx;Fts5ExprCtx187732,6661878
static int fts5ExprColsetTest(Fts5Colset *pColset, int iCol){fts5ExprColsetTest187737,6661960
static int fts5ExprPopulatePoslistsCb(fts5ExprPopulatePoslistsCb187745,6662128
static int sqlite3Fts5ExprPopulatePoslists(sqlite3Fts5ExprPopulatePoslists187780,6663395
static void fts5ExprClearPoslists(Fts5ExprNode *pNode){fts5ExprClearPoslists187810,6664119
static int fts5ExprCheckPoslists(Fts5ExprNode *pNode, i64 iRowid){fts5ExprCheckPoslists187821,6664400
static void sqlite3Fts5ExprCheckPoslists(Fts5Expr *pExpr, i64 iRowid){sqlite3Fts5ExprCheckPoslists187865,6665387
static int sqlite3Fts5ExprPhraseCollist(sqlite3Fts5ExprPhraseCollist187872,6665574
typedef struct Fts5HashEntry Fts5HashEntry;Fts5HashEntry187926,6666865
struct Fts5Hash {Fts5Hash187935,6667080
  int eDetail;                    /* Copy of Fts5Config.eDetail */eDetail187936,6667098
  int *pnByte;                    /* Pointer to bytes counter */pnByte187937,6667165
  int nEntry;                     /* Number of entries currently in hash */nEntry187938,6667230
  int nSlot;                      /* Size of aSlot[] array */nSlot187939,6667306
  Fts5HashEntry *pScan;           /* Current ordered scan item */pScan187940,6667368
  Fts5HashEntry **aSlot;          /* Array of hash slots */aSlot187941,6667434
struct Fts5HashEntry {Fts5HashEntry187965,6668218
  Fts5HashEntry *pHashNext;       /* Next hash entry with same hash-key */pHashNext187966,6668241
  Fts5HashEntry *pScanNext;       /* Next entry in sorted order */pScanNext187967,6668316
  int nAlloc;                     /* Total size of allocation */nAlloc187969,6668386
  int iSzPoslist;                 /* Offset of space for 4-byte poslist size */iSzPoslist187970,6668451
  int nData;                      /* Total bytes of data (incl. structure) */nData187971,6668531
  int nKey;                       /* Length of zKey[] in bytes */nKey187972,6668609
  u8 bDel;                        /* Set delete-flag @ iSzPoslist */bDel187973,6668675
  u8 bContent;                    /* Set content-flag (detail=none mode) */bContent187974,6668744
  i16 iCol;                       /* Column of last value written */iCol187975,6668820
  int iPos;                       /* Position of last value written */iPos187976,6668889
  i64 iRowid;                     /* Rowid of last value written */iRowid187977,6668960
  char zKey[8];                   /* Nul-terminated entry key */zKey187978,6669028
#define FTS5_HASHENTRYSIZE FTS5_HASHENTRYSIZE187984,6669154
static int sqlite3Fts5HashNew(Fts5Config *pConfig, Fts5Hash **ppNew, int *pnByte){sqlite3Fts5HashNew187991,6669246
static void sqlite3Fts5HashFree(Fts5Hash *pHash){sqlite3Fts5HashFree188021,6669938
static void sqlite3Fts5HashClear(Fts5Hash *pHash){sqlite3Fts5HashClear188032,6670149
static unsigned int fts5HashKey(int nSlot, const u8 *p, int n){fts5HashKey188046,6670505
static unsigned int fts5HashKey2(int nSlot, u8 b, const u8 *p, int n){fts5HashKey2188055,6670684
static int fts5HashResize(Fts5Hash *pHash){fts5HashResize188068,6670958
static void fts5HashAddPoslistSize(Fts5Hash *pHash, Fts5HashEntry *p){fts5HashAddPoslistSize188095,6671635
static int sqlite3Fts5HashWrite(sqlite3Fts5HashWrite188135,6672823
static Fts5HashEntry *fts5HashEntryMerge(fts5HashEntryMerge188285,6677633
static int fts5HashEntrySort(fts5HashEntrySort188329,6678610
static int sqlite3Fts5HashQuery(sqlite3Fts5HashQuery188374,6679700
static int sqlite3Fts5HashScanInit(sqlite3Fts5HashScanInit188399,6680447
static void sqlite3Fts5HashScanNext(Fts5Hash *p){sqlite3Fts5HashScanNext188406,6680658
static int sqlite3Fts5HashScanEof(Fts5Hash *p){sqlite3Fts5HashScanEof188411,6680785
static void sqlite3Fts5HashScanEntry(sqlite3Fts5HashScanEntry188415,6680860
#define FTS5_OPT_WORK_UNIT FTS5_OPT_WORK_UNIT188481,6683090
#define FTS5_WORK_UNIT FTS5_WORK_UNIT188482,6683169
#define FTS5_MIN_DLIDX_SIZE FTS5_MIN_DLIDX_SIZE188484,6683247
#define FTS5_MAIN_PREFIX FTS5_MAIN_PREFIX188486,6683323
#define FTS5_AVERAGES_ROWID FTS5_AVERAGES_ROWID188648,6688859
#define FTS5_STRUCTURE_ROWID FTS5_STRUCTURE_ROWID188649,6688937
#define FTS5_DATA_ID_B FTS5_DATA_ID_B188662,6689418
#define FTS5_DATA_DLI_B FTS5_DATA_DLI_B188663,6689482
#define FTS5_DATA_HEIGHT_B FTS5_DATA_HEIGHT_B188664,6689549
#define FTS5_DATA_PAGE_B FTS5_DATA_PAGE_B188665,6689617
#define fts5_dri(fts5_dri188667,6689688
#define FTS5_SEGMENT_ROWID(FTS5_SEGMENT_ROWID188674,6690096
#define FTS5_DLIDX_ROWID(FTS5_DLIDX_ROWID188675,6690170
#define FTS5_MAX_SEGMENT FTS5_MAX_SEGMENT188680,6690305
static int sqlite3Fts5Corrupt() { return SQLITE_CORRUPT_VTAB; }sqlite3Fts5Corrupt188683,6690356
#define FTS5_DATA_ZERO_PADDING FTS5_DATA_ZERO_PADDING188692,6690638
#define FTS5_DATA_PADDING FTS5_DATA_PADDING188693,6690671
typedef struct Fts5Data Fts5Data;Fts5Data188695,6690701
typedef struct Fts5DlidxIter Fts5DlidxIter;Fts5DlidxIter188696,6690735
typedef struct Fts5DlidxLvl Fts5DlidxLvl;Fts5DlidxLvl188697,6690779
typedef struct Fts5DlidxWriter Fts5DlidxWriter;Fts5DlidxWriter188698,6690821
typedef struct Fts5Iter Fts5Iter;Fts5Iter188699,6690869
typedef struct Fts5PageWriter Fts5PageWriter;Fts5PageWriter188700,6690903
typedef struct Fts5SegIter Fts5SegIter;Fts5SegIter188701,6690949
typedef struct Fts5DoclistIter Fts5DoclistIter;Fts5DoclistIter188702,6690989
typedef struct Fts5SegWriter Fts5SegWriter;Fts5SegWriter188703,6691037
typedef struct Fts5Structure Fts5Structure;Fts5Structure188704,6691081
typedef struct Fts5StructureLevel Fts5StructureLevel;Fts5StructureLevel188705,6691125
typedef struct Fts5StructureSegment Fts5StructureSegment;Fts5StructureSegment188706,6691179
struct Fts5Data {Fts5Data188708,6691238
  u8 *p;                          /* Pointer to buffer containing record */p188709,6691256
  int nn;                         /* Size of record in bytes */nn188710,6691332
  int szLeaf;                     /* Size of leaf without page-index */szLeaf188711,6691396
struct Fts5Index {Fts5Index188717,6691510
  Fts5Config *pConfig;            /* Virtual table configuration */pConfig188718,6691529
  char *zDataTbl;                 /* Name of %_data table */zDataTbl188719,6691597
  int nWorkUnit;                  /* Leaf pages in a "unit" of work */nWorkUnit188720,6691658
  Fts5Hash *pHash;                /* Hash table for in-memory data */pHash188726,6691877
  int nPendingData;               /* Current bytes of pending data */nPendingData188727,6691947
  i64 iWriteRowid;                /* Rowid for current doc being written */iWriteRowid188728,6692017
  int bDelete;                    /* Current write is a delete */bDelete188729,6692093
  int rc;                         /* Current error code */rc188732,6692181
  sqlite3_blob *pReader;          /* RO incr-blob open on %_data table */pReader188735,6692292
  sqlite3_stmt *pWriter;          /* "INSERT ... %_data VALUES(?,?)" */pWriter188736,6692366
  sqlite3_stmt *pDeleter;         /* "DELETE FROM %_data ... id>=? AND id<=?" */pDeleter188737,6692438
  sqlite3_stmt *pIdxWriter;       /* "INSERT ... %_idx VALUES(?,?,?,?)" */pIdxWriter188738,6692519
  sqlite3_stmt *pIdxDeleter;      /* "DELETE FROM %_idx WHERE segid=? */pIdxDeleter188739,6692594
  sqlite3_stmt *pIdxSelect;pIdxSelect188740,6692667
  int nRead;                      /* Total number of blocks read */nRead188741,6692695
  sqlite3_stmt *pDataVersion;pDataVersion188743,6692764
  i64 iStructVersion;             /* data_version when pStruct read */iStructVersion188744,6692794
  Fts5Structure *pStruct;         /* Current db structure (or NULL) */pStruct188745,6692865
struct Fts5DoclistIter {Fts5DoclistIter188748,6692940
  u8 *aEof;                       /* Pointer to 1 byte past end of doclist */aEof188749,6692965
  i64 iRowid;iRowid188752,6693089
  u8 *aPoslist;aPoslist188753,6693103
  int nPoslist;nPoslist188754,6693119
  int nSize;nSize188755,6693135
struct Fts5StructureSegment {Fts5StructureSegment188763,6693351
  int iSegid;                     /* Segment id */iSegid188764,6693381
  int pgnoFirst;                  /* First leaf page number in segment */pgnoFirst188765,6693432
  int pgnoLast;                   /* Last leaf page number in segment */pgnoLast188766,6693506
struct Fts5StructureLevel {Fts5StructureLevel188768,6693582
  int nMerge;                     /* Number of segments in incr-merge */nMerge188769,6693610
  int nSeg;                       /* Total number of segments on level */nSeg188770,6693683
  Fts5StructureSegment *aSeg;     /* Array of segments. aSeg[0] is oldest. */aSeg188771,6693757
struct Fts5Structure {Fts5Structure188773,6693838
  int nRef;                       /* Object reference count */nRef188774,6693861
  u64 nWriteCounter;              /* Total leaves written to level 0 */nWriteCounter188775,6693924
  int nSegment;                   /* Total segments in this structure */nSegment188776,6693996
  int nLevel;                     /* Number of levels in this index */nLevel188777,6694069
  Fts5StructureLevel aLevel[1];   /* Array of nLevel level objects */aLevel188778,6694140
struct Fts5PageWriter {Fts5PageWriter188784,6694285
  int pgno;                       /* Page number for this page */pgno188785,6694309
  int iPrevPgidx;                 /* Previous value written into pgidx */iPrevPgidx188786,6694375
  Fts5Buffer buf;                 /* Buffer containing leaf data */buf188787,6694449
  Fts5Buffer pgidx;               /* Buffer containing page-index */pgidx188788,6694517
  Fts5Buffer term;                /* Buffer containing previous term on page */term188789,6694586
struct Fts5DlidxWriter {Fts5DlidxWriter188791,6694669
  int pgno;                       /* Page number for this page */pgno188792,6694694
  int bPrevValid;                 /* True if iPrev is valid */bPrevValid188793,6694760
  i64 iPrev;                      /* Previous rowid value written to page */iPrev188794,6694823
  Fts5Buffer buf;                 /* Buffer containing page data */buf188795,6694900
struct Fts5SegWriter {Fts5SegWriter188797,6694971
  int iSegid;                     /* Segid to write to */iSegid188798,6694994
  Fts5PageWriter writer;          /* PageWriter object */writer188799,6695052
  i64 iPrevRowid;                 /* Previous rowid written to current leaf */iPrevRowid188800,6695110
  u8 bFirstRowidInDoclist;        /* True if next rowid is first in doclist */bFirstRowidInDoclist188801,6695189
  u8 bFirstRowidInPage;           /* True if next rowid is first in page */bFirstRowidInPage188802,6695268
  u8 bFirstTermInPage;            /* True if next term will be first in leaf */bFirstTermInPage188804,6695415
  int nLeafWritten;               /* Number of leaf pages written */nLeafWritten188805,6695495
  int nEmpty;                     /* Number of contiguous term-less nodes */nEmpty188806,6695564
  int nDlidx;                     /* Allocated size of aDlidx[] array */nDlidx188808,6695642
  Fts5DlidxWriter *aDlidx;        /* Array of Fts5DlidxWriter objects */aDlidx188809,6695715
  Fts5Buffer btterm;              /* Next term to insert into %_idx table */btterm188812,6695835
  int iBtPage;                    /* Page number corresponding to btterm */iBtPage188813,6695912
typedef struct Fts5CResult Fts5CResult;Fts5CResult188816,6695992
struct Fts5CResult {Fts5CResult188817,6696032
  u16 iFirst;                     /* aSeg[] index of firstest iterator */iFirst188818,6696053
  u8 bTermEq;                     /* True if the terms are equal */bTermEq188819,6696127
struct Fts5SegIter {Fts5SegIter188868,6697873
  Fts5StructureSegment *pSeg;     /* Segment to iterate through */pSeg188869,6697894
  int flags;                      /* Mask of configuration flags */flags188870,6697961
  int iLeafPgno;                  /* Current leaf page number */iLeafPgno188871,6698029
  Fts5Data *pLeaf;                /* Current leaf data */pLeaf188872,6698094
  Fts5Data *pNextLeaf;            /* Leaf page (iLeafPgno+1) */pNextLeaf188873,6698152
  int iLeafOffset;                /* Byte offset within current leaf */iLeafOffset188874,6698216
  void (*xNext)(Fts5Index*, Fts5SegIter*, int*);xNext188877,6698309
  int iTermLeafPgno;iTermLeafPgno188881,6698500
  int iTermLeafOffset;iTermLeafOffset188882,6698521
  int iPgidxOff;                  /* Next offset in pgidx */iPgidxOff188884,6698545
  int iEndofDoclist;iEndofDoclist188885,6698606
  int iRowidOffset;               /* Current entry in aRowidOffset[] */iRowidOffset188888,6698705
  int nRowidOffset;               /* Allocated size of aRowidOffset[] array */nRowidOffset188889,6698777
  int *aRowidOffset;              /* Array of offset to rowid fields */aRowidOffset188890,6698856
  Fts5DlidxIter *pDlidx;          /* If there is a doclist-index */pDlidx188892,6698929
  Fts5Buffer term;                /* Current term */term188895,6699050
  i64 iRowid;                     /* Current rowid */iRowid188896,6699103
  int nPos;                       /* Number of bytes in current position list */nPos188897,6699157
  u8 bDel;                        /* True if the delete flag is set */bDel188898,6699238
#define ASSERT_SZLEAF_OK(ASSERT_SZLEAF_OK188905,6699400
#define FTS5_SEGITER_ONETERM FTS5_SEGITER_ONETERM188909,6699507
#define FTS5_SEGITER_REVERSE FTS5_SEGITER_REVERSE188910,6699541
#define fts5LeafIsTermless(fts5LeafIsTermless188917,6699769
#define fts5LeafTermOff(fts5LeafTermOff188919,6699825
#define fts5LeafFirstRowidOff(fts5LeafFirstRowidOff188921,6699899
struct Fts5Iter {Fts5Iter188946,6701028
  Fts5IndexIter base;             /* Base class containing output vars */base188947,6701046
  Fts5Index *pIndex;              /* Index that owns this iterator */pIndex188949,6701121
  Fts5Structure *pStruct;         /* Database structure for this iterator */pStruct188950,6701191
  Fts5Buffer poslist;             /* Buffer containing current poslist */poslist188951,6701268
  Fts5Colset *pColset;            /* Restrict matches to these columns */pColset188952,6701342
  void (*xSetOutputs)(Fts5Iter*, Fts5SegIter*);xSetOutputs188955,6701458
  int nSeg;                       /* Size of aSeg[] array */nSeg188957,6701507
  int bRev;                       /* True to iterate in reverse order */bRev188958,6701568
  u8 bSkipEmpty;                  /* True to skip deleted entries */bSkipEmpty188959,6701641
  i64 iSwitchRowid;               /* Firstest rowid of other than aFirst[1] */iSwitchRowid188961,6701711
  Fts5CResult *aFirst;            /* Current merge state (see above) */aFirst188962,6701790
  Fts5SegIter aSeg[1];            /* Array of segment iterators */aSeg188963,6701862
struct Fts5DlidxLvl {Fts5DlidxLvl188980,6702231
  Fts5Data *pData;              /* Data for current page of this level */pData188981,6702253
  int iOff;                     /* Current offset into pData */iOff188982,6702327
  int bEof;                     /* At EOF already */bEof188983,6702391
  int iFirstOff;                /* Used by reverse iterators */iFirstOff188984,6702444
  int iLeafPgno;                /* Page number of current leaf page */iLeafPgno188987,6702534
  i64 iRowid;                   /* First rowid on leaf iLeafPgno */iRowid188988,6702605
struct Fts5DlidxIter {Fts5DlidxIter188990,6702676
  int nLvl;nLvl188991,6702699
  int iSegid;iSegid188992,6702711
  Fts5DlidxLvl aLvl[1];aLvl188993,6702725
static void fts5PutU16(u8 *aOut, u16 iVal){fts5PutU16188996,6702753
static u16 fts5GetU16(const u8 *aIn){fts5GetU16189001,6702848
static void *fts5IdxMalloc(Fts5Index *p, int nByte){fts5IdxMalloc189011,6703126
static int fts5BufferCompareBlob(fts5BufferCompareBlob189024,6703490
static int fts5BufferCompare(Fts5Buffer *pLeft, Fts5Buffer *pRight){fts5BufferCompare189043,6704102
static int fts5LeafFirstTermOff(Fts5Data *pLeaf){fts5LeafFirstTermOff189049,6704310
static void fts5CloseReader(Fts5Index *p){fts5CloseReader189058,6704495
static Fts5Data *fts5DataRead(Fts5Index *p, i64 iRowid){fts5DataRead189073,6704799
static void fts5DataRelease(Fts5Data *pData){fts5DataRelease189144,6706953
static Fts5Data *fts5LeafRead(Fts5Index *p, i64 iRowid){fts5LeafRead189148,6707025
static int fts5IndexPrepareStmt(fts5IndexPrepareStmt189160,6707274
static void fts5DataWrite(Fts5Index *p, i64 iRowid, const u8 *pData, int nData){fts5DataWrite189180,6707627
static void fts5DataDelete(Fts5Index *p, i64 iFirst, i64 iLast){fts5DataDelete189203,6708281
static void fts5DataRemoveSegment(Fts5Index *p, int iSegid){fts5DataRemoveSegment189234,6709042
static void fts5StructureRelease(Fts5Structure *pStruct){fts5StructureRelease189256,6709761
static void fts5StructureRef(Fts5Structure *pStruct){fts5StructureRef189267,6710026
static int fts5StructureDecode(fts5StructureDecode189283,6710559
static void fts5StructureAddLevel(int *pRc, Fts5Structure **ppStruct){fts5StructureAddLevel189359,6712802
static void fts5StructureExtendLevel(fts5StructureExtendLevel189383,6713465
static Fts5Structure *fts5StructureReadUncached(Fts5Index *p){fts5StructureReadUncached189412,6714215
static i64 fts5IndexDataVersion(Fts5Index *p){fts5IndexDataVersion189436,6714952
static Fts5Structure *fts5StructureRead(Fts5Index *p){fts5StructureRead189467,6715829
static void fts5StructureInvalidate(Fts5Index *p){fts5StructureInvalidate189506,6717002
static int fts5StructureCountSegments(Fts5Structure *pStruct){fts5StructureCountSegments189518,6717298
#define fts5BufferSafeAppendBlob(fts5BufferSafeAppendBlob189531,6717647
#define fts5BufferSafeAppendVarint(fts5BufferSafeAppendVarint189537,6717894
static void fts5StructureWrite(Fts5Index *p, Fts5Structure *pStruct){fts5StructureWrite189549,6718288
# define fts5PrintStructure(fts5PrintStructure189601,6720194
static int fts5SegmentSize(Fts5StructureSegment *pSeg){fts5SegmentSize189604,6720235
static void fts5StructurePromoteTo(fts5StructurePromoteTo189613,6720500
static void fts5StructurePromote(fts5StructurePromote189656,6721931
static int fts5DlidxLvlNext(Fts5DlidxLvl *pLvl){fts5DlidxLvlNext189707,6723597
static int fts5DlidxIterNextR(Fts5Index *p, Fts5DlidxIter *pIter, int iLvl){fts5DlidxIterNextR189739,6724375
static int fts5DlidxIterNext(Fts5Index *p, Fts5DlidxIter *pIter){fts5DlidxIterNext189759,6724970
static int fts5DlidxIterFirst(Fts5DlidxIter *pIter){fts5DlidxIterFirst189774,6725476
static int fts5DlidxIterEof(Fts5Index *p, Fts5DlidxIter *pIter){fts5DlidxIterEof189783,6725647
static void fts5DlidxIterLast(Fts5Index *p, Fts5DlidxIter *pIter){fts5DlidxIterLast189787,6725765
static int fts5DlidxLvlPrev(Fts5DlidxLvl *pLvl){fts5DlidxLvlPrev189810,6726405
static int fts5DlidxIterPrevR(Fts5Index *p, Fts5DlidxIter *pIter, int iLvl){fts5DlidxIterPrevR189859,6727811
static int fts5DlidxIterPrev(Fts5Index *p, Fts5DlidxIter *pIter){fts5DlidxIterPrev189882,6728465
static void fts5DlidxIterFree(Fts5DlidxIter *pIter){fts5DlidxIterFree189889,6728656
static Fts5DlidxIter *fts5DlidxIterInit(fts5DlidxIterInit189899,6728852
static i64 fts5DlidxIterRowid(Fts5DlidxIter *pIter){fts5DlidxIterRowid189946,6730056
static int fts5DlidxIterPgno(Fts5DlidxIter *pIter){fts5DlidxIterPgno189949,6730143
static void fts5SegIterNextPage(fts5SegIterNextPage189956,6730293
static int fts5GetPoslistSize(const u8 *p, int *pnSz, int *pbDel){fts5GetPoslistSize189994,6731455
static void fts5SegIterLoadNPos(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterLoadNPos190015,6731987
static void fts5SegIterLoadRowid(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterLoadRowid190044,6732811
static void fts5SegIterLoadTerm(Fts5Index *p, Fts5SegIter *pIter, int nKeep){fts5SegIterLoadTerm190077,6733827
static void fts5SegIterSetNext(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterSetNext190109,6734879
static void fts5SegIterInit(fts5SegIterInit190127,6735516
static void fts5SegIterReverseInitPage(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterReverseInitPage190175,6737369
static void fts5SegIterReverseNewPage(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterReverseNewPage190228,6738642
static int fts5MultiIterIsEmpty(Fts5Index *p, Fts5Iter *pIter){fts5MultiIterIsEmpty190280,6740270
static void fts5SegIterNext_Reverse(fts5SegIterNext_Reverse190290,6740585
static void fts5SegIterNext_None(fts5SegIterNext_None190324,6741540
static void fts5SegIterNext(fts5SegIterNext190396,6743708
#define SWAPVAL(SWAPVAL190520,6747471
#define fts5IndexSkipVarint(fts5IndexSkipVarint190522,6747527
static void fts5SegIterReverse(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterReverse190532,6747856
static void fts5SegIterLoadDlidx(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterLoadDlidx190618,6750895
static void fts5LeafSeek(fts5LeafSeek190652,6752173
static sqlite3_stmt *fts5IdxSelectStmt(Fts5Index *p){fts5IdxSelectStmt190775,6755068
static void fts5SegIterSeekInit(fts5SegIterSeekInit190794,6755750
static void fts5SegIterHashInit(fts5SegIterHashInit190876,6758477
static void fts5SegIterClear(Fts5SegIter *pIter){fts5SegIterClear190926,6759933
static void fts5AssertComparisonResult(fts5AssertComparisonResult190943,6760476
static void fts5AssertMultiIterSetup(Fts5Index *p, Fts5Iter *pIter){fts5AssertMultiIterSetup190985,6761563
# define fts5AssertMultiIterSetup(fts5AssertMultiIterSetup191019,6762700
static int fts5MultiIterDoCompare(Fts5Iter *pIter, int iOut){fts5MultiIterDoCompare191030,6763071
static void fts5SegIterGotoPage(fts5SegIterGotoPage191084,6764543
static void fts5SegIterNextFrom(fts5SegIterNextFrom191122,6765610
static void fts5MultiIterFree(Fts5Iter *pIter){fts5MultiIterFree191176,6767223
static void fts5MultiIterAdvanced(fts5MultiIterAdvanced191188,6767489
static int fts5MultiIterAdvanceRowid(fts5MultiIterAdvanceRowid191216,6768620
static void fts5MultiIterSetEof(Fts5Iter *pIter){fts5MultiIterSetEof191259,6769928
static void fts5MultiIterNext(fts5MultiIterNext191272,6770355
static void fts5MultiIterNext2(fts5MultiIterNext2191310,6771454
static void fts5IterSetOutputs_Noop(Fts5Iter *pUnused1, Fts5SegIter *pUnused2){fts5IterSetOutputs_Noop191339,6772212
static Fts5Iter *fts5MultiIterAlloc(fts5MultiIterAlloc191343,6772332
static void fts5PoslistCallback(fts5PoslistCallback191365,6772970
typedef struct PoslistCallbackCtx PoslistCallbackCtx;PoslistCallbackCtx191377,6773224
struct PoslistCallbackCtx {PoslistCallbackCtx191378,6773278
  Fts5Buffer *pBuf;               /* Append to this buffer */pBuf191379,6773306
  Fts5Colset *pColset;            /* Restrict matches to this column */pColset191380,6773368
  int eState;                     /* See above */eState191381,6773440
typedef struct PoslistOffsetsCtx PoslistOffsetsCtx;PoslistOffsetsCtx191384,6773494
struct PoslistOffsetsCtx {PoslistOffsetsCtx191385,6773546
  Fts5Buffer *pBuf;               /* Append to this buffer */pBuf191386,6773573
  Fts5Colset *pColset;            /* Restrict matches to this column */pColset191387,6773635
  int iRead;iRead191388,6773707
  int iWrite;iWrite191389,6773720
static int fts5IndexColsetTest(Fts5Colset *pColset, int iCol){fts5IndexColsetTest191395,6773779
static void fts5PoslistOffsetsCallback(fts5PoslistOffsetsCallback191403,6773948
static void fts5PoslistFilterCallback(fts5PoslistFilterCallback191426,6774525
static void fts5ChunkIterate(fts5ChunkIterate191478,6775859
static void fts5SegiterPoslist(fts5SegiterPoslist191525,6777285
static int fts5IndexExtractCol(fts5IndexExtractCol191560,6778458
static int fts5IndexExtractColset (fts5IndexExtractColset191597,6779651
static void fts5IterSetOutputs_None(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_None191619,6780194
static void fts5IterSetOutputs_Nocolset(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_Nocolset191629,6780517
static void fts5IterSetOutputs_ZeroColset(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_ZeroColset191654,6781454
static void fts5IterSetOutputs_Col(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_Col191664,6781805
static void fts5IterSetOutputs_Col100(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_Col100191682,6782350
static void fts5IterSetOutputs_Full(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_Full191722,6783402
static void fts5IterSetOutputCb(int *pRc, Fts5Iter *pIter){fts5IterSetOutputCb191753,6784614
static void fts5MultiIterNew(fts5MultiIterNew191796,6785855
static void fts5MultiIterNew2(fts5MultiIterNew2191897,6789445
static int fts5MultiIterEof(Fts5Index *p, Fts5Iter *pIter){fts5MultiIterEof191937,6790534
static i64 fts5MultiIterRowid(Fts5Iter *pIter){fts5MultiIterRowid191949,6790905
static void fts5MultiIterNextFrom(fts5MultiIterNextFrom191957,6791139
static const u8 *fts5MultiIterTerm(Fts5Iter *pIter, int *pn){fts5MultiIterTerm191976,6791619
static int fts5AllocateSegid(Fts5Index *p, Fts5Structure *pStruct){fts5AllocateSegid191991,6792130
static void fts5IndexDiscardData(Fts5Index *p){fts5IndexDiscardData192047,6793788
static int fts5PrefixCompress(int nOld, const u8 *pOld, const u8 *pNew){fts5PrefixCompress192062,6794182
static void fts5WriteDlidxClear(fts5WriteDlidxClear192070,6794342
static int fts5WriteDlidxGrow(fts5WriteDlidxGrow192096,6795095
static int fts5WriteFlushDlidx(Fts5Index *p, Fts5SegWriter *pWriter){fts5WriteFlushDlidx192122,6795796
static void fts5WriteFlushBtree(Fts5Index *p, Fts5SegWriter *pWriter){fts5WriteFlushBtree192146,6796644
static void fts5WriteBtreeTerm(fts5WriteBtreeTerm192174,6797770
static void fts5WriteBtreeNoTerm(fts5WriteBtreeNoTerm192188,6798221
static i64 fts5DlidxExtractFirstRowid(Fts5Buffer *pBuf){fts5DlidxExtractFirstRowid192204,6798825
static void fts5WriteDlidxAppend(fts5WriteDlidxAppend192218,6799212
static void fts5WriteFlushLeaf(Fts5Index *p, Fts5SegWriter *pWriter){fts5WriteFlushLeaf192278,6801222
static void fts5WriteAppendTerm(fts5WriteAppendTerm192327,6802723
static void fts5WriteAppendRowid(fts5WriteAppendRowid192405,6805539
static void fts5WriteAppendPoslistData(fts5WriteAppendPoslistData192438,6806579
static void fts5WriteFinish(fts5WriteFinish192472,6807422
static void fts5WriteInit(fts5WriteInit192500,6808144
static void fts5TrimSegments(Fts5Index *p, Fts5Iter *pIter){fts5TrimSegments192547,6809663
static void fts5MergeChunkCallback(fts5MergeChunkCallback192604,6811739
static void fts5IndexMergeLevel(fts5IndexMergeLevel192616,6811960
static int fts5IndexMerge(fts5IndexMerge192760,6816692
static void fts5IndexAutomerge(fts5IndexAutomerge192819,6818617
static void fts5IndexCrisismerge(fts5IndexCrisismerge192840,6819524
static int fts5IndexReturn(Fts5Index *p){fts5IndexReturn192858,6820113
typedef struct Fts5FlushCtx Fts5FlushCtx;Fts5FlushCtx192864,6820210
struct Fts5FlushCtx {Fts5FlushCtx192865,6820252
  Fts5Index *pIdx;pIdx192866,6820274
  Fts5SegWriter writer; writer192867,6820293
static int fts5PoslistPrefix(const u8 *aBuf, int nMax){fts5PoslistPrefix192875,6820504
static void fts5FlushOneHash(Fts5Index *p){fts5FlushOneHash192896,6821052
static void fts5IndexFlush(Fts5Index *p){fts5IndexFlush193048,6826743
static Fts5Structure *fts5IndexOptimizeStruct(fts5IndexOptimizeStruct193057,6826948
static int sqlite3Fts5IndexOptimize(Fts5Index *p){sqlite3Fts5IndexOptimize193119,6828922
static int sqlite3Fts5IndexMerge(Fts5Index *p, int nMerge){sqlite3Fts5IndexMerge193153,6829721
static void fts5AppendRowid(fts5AppendRowid193175,6830328
static void fts5AppendPoslist(fts5AppendPoslist193185,6830506
static void fts5DoclistIterNext(Fts5DoclistIter *pIter){fts5DoclistIterNext193201,6830900
static void fts5DoclistIterInit(fts5DoclistIterInit193227,6831467
#define fts5MergeAppendDocid(fts5MergeAppendDocid193255,6832189
static void fts5BufferSwap(Fts5Buffer *p1, Fts5Buffer *p2){fts5BufferSwap193264,6832511
static void fts5NextRowid(Fts5Buffer *pBuf, int *piOff, i64 *piRowid){fts5NextRowid193270,6832624
static void fts5MergeRowidLists(fts5MergeRowidLists193285,6833017
static void fts5MergePrefixLists(fts5MergePrefixLists193332,6834358
static void fts5SetupPrefixIter(fts5SetupPrefixIter193445,6838149
static int sqlite3Fts5IndexBeginWrite(Fts5Index *p, int bDelete, i64 iRowid){sqlite3Fts5IndexBeginWrite193545,6841193
static int sqlite3Fts5IndexSync(Fts5Index *p, int bCommit){sqlite3Fts5IndexSync193569,6841791
static int sqlite3Fts5IndexRollback(Fts5Index *p){sqlite3Fts5IndexRollback193582,6842224
static int sqlite3Fts5IndexReinit(Fts5Index *p){sqlite3Fts5IndexReinit193595,6842642
static int sqlite3Fts5IndexOpen(sqlite3Fts5IndexOpen193611,6843166
static int sqlite3Fts5IndexClose(Fts5Index *p){sqlite3Fts5IndexClose193652,6844191
static int sqlite3Fts5IndexCharlenToBytelen(sqlite3Fts5IndexCharlenToBytelen193675,6844880
static int fts5IndexCharlen(const char *pIn, int nIn){fts5IndexCharlen193695,6845319
static int sqlite3Fts5IndexWrite(sqlite3Fts5IndexWrite193717,6846000
static int sqlite3Fts5IndexQuery(sqlite3Fts5IndexQuery193753,6847179
static int sqlite3Fts5IterNext(Fts5IndexIter *pIndexIter){sqlite3Fts5IterNext193835,6850116
static int sqlite3Fts5IterNextScan(Fts5IndexIter *pIndexIter){sqlite3Fts5IterNextScan193845,6850430
static int sqlite3Fts5IterNextFrom(Fts5IndexIter *pIndexIter, i64 iMatch){sqlite3Fts5IterNextFrom193869,6851135
static const char *sqlite3Fts5IterTerm(Fts5IndexIter *pIndexIter, int *pn){sqlite3Fts5IterTerm193878,6851386
static void sqlite3Fts5IterClose(Fts5IndexIter *pIndexIter){sqlite3Fts5IterClose193888,6851661
static int sqlite3Fts5IndexGetAverages(Fts5Index *p, i64 *pnRow, i64 *anSize){sqlite3Fts5IndexGetAverages193903,6852089
static int sqlite3Fts5IndexSetAverages(Fts5Index *p, const u8 *pData, int nData){sqlite3Fts5IndexSetAverages193927,6852738
static int sqlite3Fts5IndexReads(Fts5Index *p){sqlite3Fts5IndexReads193937,6853048
static int sqlite3Fts5IndexSetCookie(Fts5Index *p, int iNew){sqlite3Fts5IndexSetCookie193948,6853333
static int sqlite3Fts5IndexLoadConfig(Fts5Index *p){sqlite3Fts5IndexLoadConfig193968,6853931
static u64 sqlite3Fts5IndexEntryCksum(sqlite3Fts5IndexEntryCksum193985,6854412
static void fts5TestDlidxReverse(fts5TestDlidxReverse194011,6855121
static int fts5QueryCksum(fts5QueryCksum194047,6856133
static void fts5TestTerm(fts5TestTerm194091,6857521
# define fts5TestDlidxReverse(fts5TestDlidxReverse194154,6859690
# define fts5TestTerm(fts5TestTerm194155,6859727
static void fts5IndexIntegrityCheckEmpty(fts5IndexIntegrityCheckEmpty194166,6860001
static void fts5IntegrityCheckPgidx(Fts5Index *p, Fts5Data *pLeaf){fts5IntegrityCheckPgidx194187,6860634
static void fts5IndexIntegrityCheckSegment(fts5IndexIntegrityCheckSegment194237,6861901
static int sqlite3Fts5IndexIntegrityCheck(Fts5Index *p, u64 cksum){sqlite3Fts5IndexIntegrityCheck194381,6867019
static void fts5DecodeRowid(fts5DecodeRowid194472,6870562
static void fts5DebugRowid(int *pRc, Fts5Buffer *pBuf, i64 iKey){fts5DebugRowid194491,6871211
static void fts5DebugStructure(fts5DebugStructure194509,6871760
static void fts5DecodeStructure(fts5DecodeStructure194538,6872730
static void fts5DecodeAverages(fts5DecodeAverages194563,6873396
static int fts5DecodePoslist(int *pRc, Fts5Buffer *pBuf, const u8 *a, int n){fts5DecodePoslist194586,6874057
static int fts5DecodeDoclist(int *pRc, Fts5Buffer *pBuf, const u8 *a, int n){fts5DecodeDoclist194604,6874618
static void fts5DecodeRowidList(fts5DecodeRowidList194642,6875886
static void fts5DecodeFunction(fts5DecodeFunction194673,6876605
static void fts5RowidFunction(fts5RowidFunction194860,6881970
static int sqlite3Fts5IndexInit(sqlite3 *db){sqlite3Fts5IndexInit194899,6883202
static int sqlite3Fts5IndexReset(Fts5Index *p){sqlite3Fts5IndexReset194920,6883676
SQLITE_API int sqlite3_fts5_may_be_corrupt = 1;sqlite3_fts5_may_be_corrupt194952,6884668
typedef struct Fts5Auxdata Fts5Auxdata;Fts5Auxdata194955,6884718
typedef struct Fts5Auxiliary Fts5Auxiliary;Fts5Auxiliary194956,6884758
typedef struct Fts5Cursor Fts5Cursor;Fts5Cursor194957,6884802
typedef struct Fts5Sorter Fts5Sorter;Fts5Sorter194958,6884840
typedef struct Fts5Table Fts5Table;Fts5Table194959,6884878
typedef struct Fts5TokenizerModule Fts5TokenizerModule;Fts5TokenizerModule194960,6884914
struct Fts5TransactionState {Fts5TransactionState194993,6886236
  int eState;                     /* 0==closed, 1==open, 2==synced */eState194994,6886266
  int iSavepoint;                 /* Number of open savepoints (0 -> none) */iSavepoint194995,6886336
struct Fts5Global {Fts5Global195003,6886636
  fts5_api api;                   /* User visible part of object (see fts5.h) */api195004,6886656
  sqlite3 *db;                    /* Associated database connection */ db195005,6886737
  i64 iNextId;                    /* Used to allocate unique cursor ids */iNextId195006,6886809
  Fts5Auxiliary *pAux;            /* First in list of all aux. functions */pAux195007,6886884
  Fts5TokenizerModule *pTok;      /* First in list of all tokenizer modules */pTok195008,6886960
  Fts5TokenizerModule *pDfltTok;  /* Default tokenizer module */pDfltTok195009,6887039
  Fts5Cursor *pCsr;               /* First in list of all open cursors */pCsr195010,6887104
struct Fts5Auxiliary {Fts5Auxiliary195018,6887369
  Fts5Global *pGlobal;            /* Global context for this function */pGlobal195019,6887392
  char *zFunc;                    /* Function name (nul-terminated) */zFunc195020,6887465
  void *pUserData;                /* User-data pointer */pUserData195021,6887536
  fts5_extension_function xFunc;  /* Callback function */xFunc195022,6887594
  void (*xDestroy)(void*);        /* Destructor function */xDestroy195023,6887652
  Fts5Auxiliary *pNext;           /* Next registered auxiliary function */pNext195024,6887712
struct Fts5TokenizerModule {Fts5TokenizerModule195032,6887976
  char *zName;                    /* Name of tokenizer */zName195033,6888005
  void *pUserData;                /* User pointer passed to xCreate() */pUserData195034,6888063
  fts5_tokenizer x;               /* Tokenizer functions */x195035,6888136
  void (*xDestroy)(void*);        /* Destructor function */xDestroy195036,6888196
  Fts5TokenizerModule *pNext;     /* Next registered tokenizer module */pNext195037,6888256
struct Fts5Table {Fts5Table195043,6888364
  sqlite3_vtab base;              /* Base class used by SQLite core */base195044,6888383
  Fts5Config *pConfig;            /* Virtual table configuration */pConfig195045,6888454
  Fts5Index *pIndex;              /* Full-text index */pIndex195046,6888522
  Fts5Storage *pStorage;          /* Document store */pStorage195047,6888578
  Fts5Global *pGlobal;            /* Global (connection wide) data */pGlobal195048,6888633
  Fts5Cursor *pSortCsr;           /* Sort data from this cursor */pSortCsr195049,6888703
  struct Fts5TransactionState ts;ts195051,6888790
struct Fts5MatchPhrase {Fts5MatchPhrase195055,6888835
  Fts5Buffer *pPoslist;           /* Pointer to current poslist */pPoslist195056,6888860
  int nTerm;                      /* Size of phrase in terms */nTerm195057,6888927
struct Fts5Sorter {Fts5Sorter195069,6889288
  sqlite3_stmt *pStmt;pStmt195070,6889308
  i64 iRowid;                     /* Current rowid */iRowid195071,6889331
  const u8 *aPoslist;             /* Position lists for current row */aPoslist195072,6889385
  int nIdx;                       /* Number of entries in aIdx[] */nIdx195073,6889456
  int aIdx[1];                    /* Offsets into aPoslist for current row */aIdx195074,6889524
struct Fts5Cursor {Fts5Cursor195097,6890351
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base195098,6890371
  Fts5Cursor *pNext;              /* Next cursor in Fts5Cursor.pCsr list */pNext195099,6890442
  int *aColumnSize;               /* Values for xColumnSize() */aColumnSize195100,6890518
  i64 iCsrId;                     /* Cursor id */iCsrId195101,6890583
  int ePlan;                      /* FTS5_PLAN_XXX value */ePlan195104,6890687
  int bDesc;                      /* True for "ORDER BY rowid DESC" queries */bDesc195105,6890747
  i64 iFirstRowid;                /* Return no rowids earlier than this */iFirstRowid195106,6890826
  i64 iLastRowid;                 /* Return no rowids later than this */iLastRowid195107,6890901
  sqlite3_stmt *pStmt;            /* Statement used to read %_content */pStmt195108,6890974
  Fts5Expr *pExpr;                /* Expression for MATCH queries */pExpr195109,6891047
  Fts5Sorter *pSorter;            /* Sorter for "ORDER BY rank" queries */pSorter195110,6891116
  int csrflags;                   /* Mask of cursor flags (see below) */csrflags195111,6891191
  i64 iSpecial;                   /* Result of special query */iSpecial195112,6891264
  char *zRank;                    /* Custom rank function */zRank195115,6891395
  char *zRankArgs;                /* Custom rank function args */zRankArgs195116,6891456
  Fts5Auxiliary *pRank;           /* Rank callback (or NULL) */pRank195117,6891522
  int nRankArg;                   /* Number of trailing arguments for rank() */nRankArg195118,6891586
  sqlite3_value **apRankArg;      /* Array of trailing arguments */apRankArg195119,6891666
  sqlite3_stmt *pRankArgStmt;     /* Origin of objects in apRankArg[] */pRankArgStmt195120,6891734
  Fts5Auxiliary *pAux;            /* Currently executing extension function */pAux195123,6891839
  Fts5Auxdata *pAuxdata;          /* First in linked list of saved aux-data */pAuxdata195124,6891918
  Fts5PoslistReader *aInstIter;   /* One for each phrase */aInstIter195127,6892065
  int nInstAlloc;                 /* Size of aInst[] array (entries / 3) */nInstAlloc195128,6892125
  int nInstCount;                 /* Number of phrase instances */nInstCount195129,6892201
  int *aInst;                     /* 3 integers per phrase instance */aInst195130,6892268
#define FTS5_BI_MATCH FTS5_BI_MATCH195137,6892445
#define FTS5_BI_RANK FTS5_BI_RANK195138,6892509
#define FTS5_BI_ROWID_EQ FTS5_BI_ROWID_EQ195139,6892572
#define FTS5_BI_ROWID_LE FTS5_BI_ROWID_LE195140,6892633
#define FTS5_BI_ROWID_GE FTS5_BI_ROWID_GE195141,6892694
#define FTS5_BI_ORDER_RANK FTS5_BI_ORDER_RANK195143,6892756
#define FTS5_BI_ORDER_ROWID FTS5_BI_ORDER_ROWID195144,6892792
#define FTS5_BI_ORDER_DESC FTS5_BI_ORDER_DESC195145,6892828
#define FTS5CSR_EOF FTS5CSR_EOF195150,6892905
#define FTS5CSR_REQUIRE_CONTENT FTS5CSR_REQUIRE_CONTENT195151,6892944
#define FTS5CSR_REQUIRE_DOCSIZE FTS5CSR_REQUIRE_DOCSIZE195152,6892983
#define FTS5CSR_REQUIRE_INST FTS5CSR_REQUIRE_INST195153,6893022
#define FTS5CSR_FREE_ZRANK FTS5CSR_FREE_ZRANK195154,6893061
#define FTS5CSR_REQUIRE_RESEEK FTS5CSR_REQUIRE_RESEEK195155,6893100
#define FTS5CSR_REQUIRE_POSLIST FTS5CSR_REQUIRE_POSLIST195156,6893139
#define BitFlagAllTest(BitFlagAllTest195158,6893179
#define BitFlagTest(BitFlagTest195159,6893226
#define CsrFlagSet(CsrFlagSet195165,6893332
#define CsrFlagClear(CsrFlagClear195166,6893394
#define CsrFlagTest(CsrFlagTest195167,6893457
struct Fts5Auxdata {Fts5Auxdata195169,6893519
  Fts5Auxiliary *pAux;            /* Extension to which this belongs */pAux195170,6893540
  void *pPtr;                     /* Pointer value */pPtr195171,6893612
  void(*xDelete)(void*);          /* Destructor */xDelete195172,6893666
  Fts5Auxdata *pNext;             /* Next object in linked list */pNext195173,6893717
#define FTS5_BEGIN FTS5_BEGIN195177,6893808
#define FTS5_SYNC FTS5_SYNC195178,6893834
#define FTS5_COMMIT FTS5_COMMIT195179,6893860
#define FTS5_ROLLBACK FTS5_ROLLBACK195180,6893886
#define FTS5_SAVEPOINT FTS5_SAVEPOINT195181,6893912
#define FTS5_RELEASE FTS5_RELEASE195182,6893938
#define FTS5_ROLLBACKTO FTS5_ROLLBACKTO195183,6893964
static void fts5CheckTransactionState(Fts5Table *p, int op, int iSavepoint){fts5CheckTransactionState195184,6893990
# define fts5CheckTransactionState(fts5CheckTransactionState195230,6895096
static int fts5IsContentless(Fts5Table *pTab){fts5IsContentless195236,6895199
static void fts5FreeVtab(Fts5Table *pTab){fts5FreeVtab195243,6895371
static int fts5DisconnectMethod(sqlite3_vtab *pVtab){fts5DisconnectMethod195255,6895636
static int fts5DestroyMethod(sqlite3_vtab *pVtab){fts5DestroyMethod195263,6895794
static int fts5InitVtab(fts5InitVtab195283,6896343
static int fts5ConnectMethod(fts5ConnectMethod195349,6898523
static int fts5CreateMethod(fts5CreateMethod195359,6899043
#define FTS5_PLAN_MATCH FTS5_PLAN_MATCH195373,6899599
#define FTS5_PLAN_SOURCE FTS5_PLAN_SOURCE195374,6899662
#define FTS5_PLAN_SPECIAL FTS5_PLAN_SPECIAL195375,6899742
#define FTS5_PLAN_SORTED_MATCH FTS5_PLAN_SORTED_MATCH195376,6899807
#define FTS5_PLAN_SCAN FTS5_PLAN_SCAN195377,6899884
#define FTS5_PLAN_ROWID FTS5_PLAN_ROWID195378,6899952
static void fts5SetUniqueFlag(sqlite3_index_info *pIdxInfo){fts5SetUniqueFlag195385,6900230
static int fts5BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){fts5BestIndexMethod195433,6901800
static int fts5NewTransaction(Fts5Table *pTab){fts5NewTransaction195527,6905350
static int fts5OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts5OpenMethod195538,6905639
static int fts5StmtType(Fts5Cursor *pCsr){fts5StmtType195564,6906473
static void fts5CsrNewrow(Fts5Cursor *pCsr){fts5CsrNewrow195576,6906863
static void fts5FreeCursorComponents(Fts5Cursor *pCsr){fts5FreeCursorComponents195585,6907057
static int fts5CloseMethod(sqlite3_vtab_cursor *pCursor){fts5CloseMethod195628,6908189
static int fts5SorterNext(Fts5Cursor *pCsr){fts5SorterNext195644,6908617
static void fts5TripCursors(Fts5Table *pTab){fts5TripCursors195687,6909583
static int fts5CursorReseek(Fts5Cursor *pCsr, int *pbSkip){fts5CursorReseek195710,6910399
static int fts5NextMethod(sqlite3_vtab_cursor *pCursor){fts5NextMethod195742,6911354
static int fts5PrepareStatement(fts5PrepareStatement195786,6912390
static int fts5CursorFirstSorted(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){fts5CursorFirstSorted195814,6912925
static int fts5CursorFirst(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){fts5CursorFirst195862,6914448
static int fts5SpecialMatch(fts5SpecialMatch195879,6914992
static Fts5Auxiliary *fts5FindAuxiliary(Fts5Table *pTab, const char *zName){fts5FindAuxiliary195914,6916011
static int fts5FindRankFunction(Fts5Cursor *pCsr){fts5FindRankFunction195926,6916315
static int fts5CursorParseRank(fts5CursorParseRank195976,6917771
static i64 fts5GetRowidLimit(sqlite3_value *pVal, i64 iDefault){fts5GetRowidLimit196013,6918700
static int fts5FilterMethod(fts5FilterMethod196034,6919238
static int fts5EofMethod(sqlite3_vtab_cursor *pCursor){fts5EofMethod196172,6924856
static i64 fts5CursorRowid(Fts5Cursor *pCsr){fts5CursorRowid196180,6925072
static int fts5RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){fts5RowidMethod196198,6925617
static int fts5SeekCursor(Fts5Cursor *pCsr, int bErrormsg){fts5SeekCursor196229,6926411
static void fts5SetVtabError(Fts5Table *p, const char *zFormat, ...){fts5SetVtabError196261,6927385
static int fts5SpecialInsert(fts5SpecialInsert196284,6928240
static int fts5SpecialDelete(fts5SpecialDelete196339,6930064
static void fts5StorageInsert(fts5StorageInsert196352,6930384
static int fts5UpdateMethod(fts5UpdateMethod196382,6931215
static int fts5SyncMethod(sqlite3_vtab *pVtab){fts5SyncMethod196503,6935371
static int fts5BeginMethod(sqlite3_vtab *pVtab){fts5BeginMethod196517,6935733
static int fts5CommitMethod(sqlite3_vtab *pVtab){fts5CommitMethod196528,6936087
static int fts5RollbackMethod(sqlite3_vtab *pVtab){fts5RollbackMethod196538,6936448
static void *fts5ApiUserData(Fts5Context *pCtx){fts5ApiUserData196548,6936733
static int fts5ApiColumnCount(Fts5Context *pCtx){fts5ApiColumnCount196553,6936857
static int fts5ApiColumnTotalSize(fts5ApiColumnTotalSize196558,6937008
static int fts5ApiRowCount(Fts5Context *pCtx, i64 *pnRow){fts5ApiRowCount196568,6937265
static int fts5ApiTokenize(fts5ApiTokenize196574,6937479
static int fts5ApiPhraseCount(Fts5Context *pCtx){fts5ApiPhraseCount196587,6937842
static int fts5ApiPhraseSize(Fts5Context *pCtx, int iPhrase){fts5ApiPhraseSize196592,6937985
static int fts5ApiColumnText(fts5ApiColumnText196597,6938148
static int fts5CsrPoslist(fts5CsrPoslist196618,6938609
static int fts5CacheInstArray(Fts5Cursor *pCsr){fts5CacheInstArray196670,6940118
static int fts5ApiInstCount(Fts5Context *pCtx, int *pnInst){fts5ApiInstCount196737,6941960
static int fts5ApiInst(fts5ApiInst196747,6942237
static sqlite3_int64 fts5ApiRowid(Fts5Context *pCtx){fts5ApiRowid196776,6942912
static int fts5ColumnSizeCb(fts5ColumnSizeCb196780,6943014
static int fts5ApiColumnSize(Fts5Context *pCtx, int iCol, int *pnToken){fts5ApiColumnSize196797,6943552
static int fts5ApiSetAuxdata(fts5ApiSetAuxdata196850,6945031
static void *fts5ApiGetAuxdata(Fts5Context *pCtx, int bClear){fts5ApiGetAuxdata196885,6945999
static void fts5ApiPhraseNext(fts5ApiPhraseNext196905,6946380
static int fts5ApiPhraseFirst(fts5ApiPhraseFirst196927,6946846
static void fts5ApiPhraseNextColumn(fts5ApiPhraseNextColumn196945,6947229
static int fts5ApiPhraseFirstColumn(fts5ApiPhraseFirstColumn196975,6947931
static const Fts5ExtensionApi sFts5Api = {sFts5Api197023,6949119
static int fts5ApiQueryPhrase(fts5ApiQueryPhrase197049,6949672
static void fts5ApiInvoke(fts5ApiInvoke197086,6950708
static Fts5Cursor *fts5CursorFromCsrid(Fts5Global *pGlobal, i64 iCsrId){fts5CursorFromCsrid197099,6950980
static void fts5ApiCallback(fts5ApiCallback197107,6951184
static Fts5Index *sqlite3Fts5IndexFromCsrid(sqlite3Fts5IndexFromCsrid197139,6951963
static int fts5PoslistBlob(sqlite3_context *pCtx, Fts5Cursor *pCsr){fts5PoslistBlob197169,6953124
static int fts5ColumnMethod(fts5ColumnMethod197226,6954785
static int fts5FindFunctionMethod(fts5FindFunctionMethod197277,6956433
static int fts5RenameMethod(fts5RenameMethod197302,6957175
static int fts5SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){fts5SavepointMethod197315,6957521
static int fts5ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){fts5ReleaseMethod197328,6957902
static int fts5RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){fts5RollbackToMethod197341,6958314
static int fts5CreateAux(fts5CreateAux197352,6958715
static int fts5CreateTokenizer(fts5CreateTokenizer197391,6959998
static Fts5TokenizerModule *fts5LocateTokenizer(fts5LocateTokenizer197426,6961123
static int fts5FindTokenizer(fts5FindTokenizer197447,6961549
static int sqlite3Fts5GetTokenizer(sqlite3Fts5GetTokenizer197468,6962088
static void fts5ModuleDestroy(void *pCtx){fts5ModuleDestroy197500,6962799
static void fts5Fts5Func(fts5Fts5Func197520,6963314
static void fts5SourceIdFunc(fts5SourceIdFunc197537,6963867
static int fts5Init(sqlite3 *db){fts5Init197547,6964254
__declspec(dllexport)__declspec197630,6967267
__declspec(dllexport)__declspec197643,6967515
SQLITE_PRIVATE int sqlite3Fts5Init(sqlite3 *db){sqlite3Fts5Init197655,6967755
struct Fts5Storage {Fts5Storage197678,6968248
  Fts5Config *pConfig;pConfig197679,6968269
  Fts5Index *pIndex;pIndex197680,6968292
  int bTotalsValid;               /* True if nTotalRow/aTotalSize[] are valid */bTotalsValid197681,6968313
  i64 nTotalRow;                  /* Total number of rows in FTS table */nTotalRow197682,6968394
  i64 *aTotalSize;                /* Total sizes of each column */ aTotalSize197683,6968468
  sqlite3_stmt *aStmt[11];aStmt197684,6968536
#define FTS5_STMT_INSERT_CONTENT FTS5_STMT_INSERT_CONTENT197698,6968785
#define FTS5_STMT_REPLACE_CONTENT FTS5_STMT_REPLACE_CONTENT197699,6968821
#define FTS5_STMT_DELETE_CONTENT FTS5_STMT_DELETE_CONTENT197700,6968857
#define FTS5_STMT_REPLACE_DOCSIZE FTS5_STMT_REPLACE_DOCSIZE197701,6968893
#define FTS5_STMT_DELETE_DOCSIZE FTS5_STMT_DELETE_DOCSIZE197702,6968930
#define FTS5_STMT_LOOKUP_DOCSIZE FTS5_STMT_LOOKUP_DOCSIZE197703,6968966
#define FTS5_STMT_REPLACE_CONFIG FTS5_STMT_REPLACE_CONFIG197704,6969002
#define FTS5_STMT_SCAN FTS5_STMT_SCAN197705,6969037
static int fts5StorageGetStmt(fts5StorageGetStmt197713,6969294
static int fts5ExecPrintf(fts5ExecPrintf197812,6972433
static int sqlite3Fts5DropAll(Fts5Config *pConfig){sqlite3Fts5DropAll197840,6972931
static void fts5StorageRenameOne(fts5StorageRenameOne197864,6973673
static int sqlite3Fts5StorageRename(Fts5Storage *pStorage, const char *zName){sqlite3Fts5StorageRename197878,6974173
static int sqlite3Fts5CreateTable(sqlite3Fts5CreateTable197898,6974861
static int sqlite3Fts5StorageOpen(sqlite3Fts5StorageOpen197933,6975924
static int sqlite3Fts5StorageClose(Fts5Storage *p){sqlite3Fts5StorageClose197999,6977792
typedef struct Fts5InsertCtx Fts5InsertCtx;Fts5InsertCtx198014,6978054
struct Fts5InsertCtx {Fts5InsertCtx198015,6978098
  Fts5Storage *pStorage;pStorage198016,6978121
  int iCol;iCol198017,6978146
  int szCol;                      /* Size of column value in tokens */szCol198018,6978158
static int fts5StorageInsertCallback(fts5StorageInsertCallback198024,6978311
static int fts5StorageDeleteFromIndex(fts5StorageDeleteFromIndex198047,6979253
static int fts5StorageInsertDocsize(fts5StorageInsertDocsize198105,6980972
static int fts5StorageLoadTotals(Fts5Storage *p, int bCache){fts5StorageLoadTotals198134,6981953
static int fts5StorageSaveTotals(Fts5Storage *p){fts5StorageSaveTotals198150,6982403
static int sqlite3Fts5StorageDelete(Fts5Storage *p, i64 iDel, sqlite3_value **apVal){sqlite3Fts5StorageDelete198172,6982889
static int sqlite3Fts5StorageDeleteAll(Fts5Storage *p){sqlite3Fts5StorageDeleteAll198218,6984029
static int sqlite3Fts5StorageRebuild(Fts5Storage *p){sqlite3Fts5StorageRebuild198247,6984855
static int sqlite3Fts5StorageOptimize(Fts5Storage *p){sqlite3Fts5StorageOptimize198299,6986270
static int sqlite3Fts5StorageMerge(Fts5Storage *p, int nMerge){sqlite3Fts5StorageMerge198303,6986374
static int sqlite3Fts5StorageReset(Fts5Storage *p){sqlite3Fts5StorageReset198307,6986492
static int fts5StorageNewRowid(Fts5Storage *p, i64 *piRowid){fts5StorageNewRowid198320,6986983
static int sqlite3Fts5StorageContentInsert(sqlite3Fts5StorageContentInsert198341,6987549
static int sqlite3Fts5StorageIndexInsert(sqlite3Fts5StorageIndexInsert198376,6988547
static int fts5StorageCount(Fts5Storage *p, const char *zSuffix, i64 *pnRow){fts5StorageCount198423,6989852
typedef struct Fts5IntegrityCtx Fts5IntegrityCtx;Fts5IntegrityCtx198451,6990512
struct Fts5IntegrityCtx {Fts5IntegrityCtx198452,6990562
  i64 iRowid;iRowid198453,6990588
  int iCol;iCol198454,6990602
  int szCol;szCol198455,6990614
  u64 cksum;cksum198456,6990627
  Fts5Termset *pTermset;pTermset198457,6990640
  Fts5Config *pConfig;pConfig198458,6990665
static int fts5StorageIntegrityCallback(fts5StorageIntegrityCallback198465,6990749
static int sqlite3Fts5StorageIntegrity(Fts5Storage *p){sqlite3Fts5StorageIntegrity198535,6992745
static int sqlite3Fts5StorageStmt(sqlite3Fts5StorageStmt198636,6996200
static void sqlite3Fts5StorageStmtRelease(sqlite3Fts5StorageStmtRelease198660,6996802
static int fts5StorageDecodeSizeArray(fts5StorageDecodeSizeArray198677,6997143
static int sqlite3Fts5StorageDocsize(Fts5Storage *p, i64 iRowid, int *aCol){sqlite3Fts5StorageDocsize198698,6997770
static int sqlite3Fts5StorageSize(Fts5Storage *p, int iCol, i64 *pnToken){sqlite3Fts5StorageSize198724,6998617
static int sqlite3Fts5StorageRowCount(Fts5Storage *p, i64 *pnRow){sqlite3Fts5StorageRowCount198742,6999030
static int sqlite3Fts5StorageSync(Fts5Storage *p, int bCommit){sqlite3Fts5StorageSync198753,6999265
static int sqlite3Fts5StorageRollback(Fts5Storage *p){sqlite3Fts5StorageRollback198762,6999522
static int sqlite3Fts5StorageConfigValue(sqlite3Fts5StorageConfigValue198767,6999649
static unsigned char aAsciiTokenChar[128] = {aAsciiTokenChar198819,7001023
typedef struct AsciiTokenizer AsciiTokenizer;AsciiTokenizer198830,7001641
struct AsciiTokenizer {AsciiTokenizer198831,7001687
  unsigned char aTokenChar[128];aTokenChar198832,7001711
static void fts5AsciiAddExceptions(fts5AsciiAddExceptions198835,7001748
static void fts5AsciiDelete(Fts5Tokenizer *p){fts5AsciiDelete198851,7002028
static int fts5AsciiCreate(fts5AsciiCreate198858,7002135
static void asciiFold(char *aOut, const char *aIn, int nByte){asciiFold198899,7003110
static int fts5AsciiTokenize(fts5AsciiTokenize198911,7003344
static const unsigned char sqlite3Utf8Trans1[] = {sqlite3Utf8Trans1198980,7004990
#define READ_UTF8(READ_UTF8198991,7005445
#define WRITE_UTF8(WRITE_UTF8199004,7006061
typedef struct Unicode61Tokenizer Unicode61Tokenizer;Unicode61Tokenizer199026,7007131
struct Unicode61Tokenizer {Unicode61Tokenizer199027,7007185
  unsigned char aTokenChar[128];  /* ASCII range token characters */aTokenChar199028,7007213
  char *aFold;                    /* Buffer to fold text into */aFold199029,7007282
  int nFold;                      /* Size of aFold[] in bytes */nFold199030,7007347
  int bRemoveDiacritic;           /* True if remove_diacritics=1 is set */bRemoveDiacritic199031,7007412
  int nException;nException199032,7007487
  int *aiException;aiException199033,7007505
static int fts5UnicodeAddExceptions(fts5UnicodeAddExceptions199036,7007529
static int fts5UnicodeIsException(Unicode61Tokenizer *p, int iCode){fts5UnicodeIsException199085,7008998
static void fts5UnicodeDelete(Fts5Tokenizer *pTok){fts5UnicodeDelete199109,7009443
static int fts5UnicodeCreate(fts5UnicodeCreate199122,7009705
static int fts5UnicodeIsAlnum(Unicode61Tokenizer *p, int iCode){fts5UnicodeIsAlnum199180,7011363
static int fts5UnicodeTokenize(fts5UnicodeTokenize199185,7011573
#define FTS5_PORTER_MAX_TOKEN FTS5_PORTER_MAX_TOKEN199295,7014805
typedef struct PorterTokenizer PorterTokenizer;PorterTokenizer199297,7014839
struct PorterTokenizer {PorterTokenizer199298,7014887
  fts5_tokenizer tokenizer;       /* Parent tokenizer module */tokenizer199299,7014912
  Fts5Tokenizer *pTokenizer;      /* Parent tokenizer instance */pTokenizer199300,7014976
  char aBuf[FTS5_PORTER_MAX_TOKEN + 64];aBuf199301,7015042
static void fts5PorterDelete(Fts5Tokenizer *pTok){fts5PorterDelete199307,7015125
static int fts5PorterCreate(fts5PorterCreate199320,7015379
typedef struct PorterContext PorterContext;PorterContext199356,7016236
struct PorterContext {PorterContext199357,7016280
  void *pCtx;pCtx199358,7016303
  int (*xToken)(void*, int, const char*, int, int, int);xToken199359,7016317
  char *aBuf;aBuf199360,7016374
typedef struct PorterRule PorterRule;PorterRule199363,7016392
struct PorterRule {PorterRule199364,7016430
  const char *zSuffix;zSuffix199365,7016450
  int nSuffix;nSuffix199366,7016473
  int (*xCond)(char *zStem, int nStem);xCond199367,7016488
  const char *zOutput;zOutput199368,7016528
  int nOutput;nOutput199369,7016551
static int fts5PorterIsVowel(char c, int bYIsVowel){fts5PorterIsVowel199398,7017193
static int fts5PorterGobbleVC(char *zStem, int nStem, int bPrevCons){fts5PorterGobbleVC199404,7017343
static int fts5Porter_MGt0(char *zStem, int nStem){fts5Porter_MGt0199421,7017749
static int fts5Porter_MGt1(char *zStem, int nStem){fts5Porter_MGt1199426,7017889
static int fts5Porter_MEq1(char *zStem, int nStem){fts5Porter_MEq1199436,7018119
static int fts5Porter_Ostar(char *zStem, int nStem){fts5Porter_Ostar199446,7018349
static int fts5Porter_MGt1_and_S_or_T(char *zStem, int nStem){fts5Porter_MGt1_and_S_or_T199463,7018802
static int fts5Porter_Vowel(char *zStem, int nStem){fts5Porter_Vowel199470,7019019
static int fts5PorterStep4(char *aBuf, int *pnBuf){fts5PorterStep4199486,7019399
static int fts5PorterStep1B2(char *aBuf, int *pnBuf){fts5PorterStep1B2199620,7022764
static int fts5PorterStep2(char *aBuf, int *pnBuf){fts5PorterStep2199654,7023464
static int fts5PorterStep3(char *aBuf, int *pnBuf){fts5PorterStep3199801,7028008
static int fts5PorterStep1B(char *aBuf, int *pnBuf){fts5PorterStep1B199867,7029579
static void fts5PorterStep1A(char *aBuf, int *pnBuf){fts5PorterStep1A199904,7030522
static int fts5PorterCb(fts5PorterCb199922,7030912
static int fts5PorterTokenize(fts5PorterTokenize199991,7032414
static int sqlite3Fts5TokenizerInit(fts5_api *pApi){sqlite3Fts5TokenizerInit200011,7032916
static int sqlite3Fts5UnicodeIsalnum(int c){sqlite3Fts5UnicodeIsalnum200065,7034325
static int fts5_remove_diacritic(int c){fts5_remove_diacritic200197,7041343
static int sqlite3Fts5UnicodeIsdiacritic(int c){sqlite3Fts5UnicodeIsdiacritic200247,7043389
static int sqlite3Fts5UnicodeFold(int c, int bRemoveDiacritic){sqlite3Fts5UnicodeFold200266,7043975
static int sqlite3Fts5GetVarint32(const unsigned char *p, u32 *v){sqlite3Fts5GetVarint32200422,7050831
#define SLOT_2_0 SLOT_2_0200493,7052376
#define SLOT_4_2_0 SLOT_4_2_0200494,7052408
static u8 sqlite3Fts5GetVarint(const unsigned char *p, u64 *v){sqlite3Fts5GetVarint200500,7052582
# define FTS5_NOINLINE FTS5_NOINLINE200679,7055755
# define FTS5_NOINLINEFTS5_NOINLINE200681,7055800
static int FTS5_NOINLINE fts5PutVarint64(unsigned char *p, u64 v){fts5PutVarint64200694,7056255
static int sqlite3Fts5PutVarint(unsigned char *p, u64 v){sqlite3Fts5PutVarint200719,7056720
static int sqlite3Fts5GetVarintLen(u32 iVal){sqlite3Fts5GetVarintLen200733,7056954
typedef struct Fts5VocabTable Fts5VocabTable;Fts5VocabTable200782,7058463
typedef struct Fts5VocabCursor Fts5VocabCursor;Fts5VocabCursor200783,7058509
struct Fts5VocabTable {Fts5VocabTable200785,7058558
  sqlite3_vtab base;base200786,7058582
  char *zFts5Tbl;                 /* Name of fts5 table */zFts5Tbl200787,7058603
  char *zFts5Db;                  /* Db containing fts5 table */zFts5Db200788,7058662
  sqlite3 *db;                    /* Database handle */db200789,7058727
  Fts5Global *pGlobal;            /* FTS5 global object for this database */pGlobal200790,7058783
  int eType;                      /* FTS5_VOCAB_COL or ROW */eType200791,7058860
struct Fts5VocabCursor {Fts5VocabCursor200794,7058926
  sqlite3_vtab_cursor base;base200795,7058951
  sqlite3_stmt *pStmt;            /* Statement holding lock on pIndex */pStmt200796,7058979
  Fts5Index *pIndex;              /* Associated FTS5 index */pIndex200797,7059052
  int bEof;                       /* True if this cursor is at EOF */bEof200799,7059115
  Fts5IndexIter *pIter;           /* Term/rowid iterator object */pIter200800,7059185
  int nLeTerm;                    /* Size of zLeTerm in bytes */nLeTerm200802,7059253
  char *zLeTerm;                  /* (term <= $zLeTerm) paramater, or NULL */zLeTerm200803,7059318
  Fts5Config *pConfig;            /* Fts5 table configuration */pConfig200806,7059441
  int iCol;iCol200807,7059506
  i64 *aCnt;aCnt200808,7059518
  i64 *aDoc;aDoc200809,7059531
  i64 rowid;                      /* This table's current rowid value */rowid200812,7059598
  Fts5Buffer term;                /* Current value of 'term' column */term200813,7059671
#define FTS5_VOCAB_COL FTS5_VOCAB_COL200816,7059746
#define FTS5_VOCAB_ROW FTS5_VOCAB_ROW200817,7059774
#define FTS5_VOCAB_COL_SCHEMA FTS5_VOCAB_COL_SCHEMA200819,7059803
#define FTS5_VOCAB_ROW_SCHEMA FTS5_VOCAB_ROW_SCHEMA200820,7059856
#define FTS5_VOCAB_TERM_EQ FTS5_VOCAB_TERM_EQ200825,7059980
#define FTS5_VOCAB_TERM_GE FTS5_VOCAB_TERM_GE200826,7060012
#define FTS5_VOCAB_TERM_LE FTS5_VOCAB_TERM_LE200827,7060044
static int fts5VocabTableType(const char *zType, char **pzErr, int *peType){fts5VocabTableType200836,7060318
static int fts5VocabDisconnectMethod(sqlite3_vtab *pVtab){fts5VocabDisconnectMethod200862,7060905
static int fts5VocabDestroyMethod(sqlite3_vtab *pVtab){fts5VocabDestroyMethod200871,7061104
static int fts5VocabInitVtab(fts5VocabInitVtab200898,7061795
static int fts5VocabConnectMethod(fts5VocabConnectMethod200959,7063834
static int fts5VocabCreateMethod(fts5VocabCreateMethod200969,7064361
static int fts5VocabBestIndexMethod(fts5VocabBestIndexMethod200983,7064939
static int fts5VocabOpenMethod(fts5VocabOpenMethod201045,7066754
static void fts5VocabResetCursor(Fts5VocabCursor *pCsr){fts5VocabResetCursor201103,7068261
static int fts5VocabCloseMethod(sqlite3_vtab_cursor *pCursor){fts5VocabCloseMethod201116,7068603
static int fts5VocabNextMethod(sqlite3_vtab_cursor *pCursor){fts5VocabNextMethod201129,7068924
static int fts5VocabFilterMethod(fts5VocabFilterMethod201245,7072473
static int fts5VocabEofMethod(sqlite3_vtab_cursor *pCursor){fts5VocabEofMethod201307,7074204
static int fts5VocabColumnMethod(fts5VocabColumnMethod201312,7074342
static int fts5VocabRowidMethod(fts5VocabRowidMethod201356,7075662
static int sqlite3Fts5VocabInit(Fts5Global *pGlobal, sqlite3 *db){sqlite3Fts5VocabInit201365,7075855

cli-args.h,37
#define CLI_ARGS_H_CLI_ARGS_H_4,89

main.h,874
#define MAIN_H_MAIN_H_28,944
char *dbfile = "";  /* path and name of acronyms database filename */dbfile40,1283
sqlite3 *db = NULL; /* handle to the database */db41,1353
int rc = 0;         /* returned result codes from calling SQLite functions */rc42,1402
const char *data = NULL;     /* data returned from SQL stmt run */data43,1480
sqlite3_stmt *stmt = NULL;   /* preprepared SQL query statement */stmt44,1547
char appversion[] = "0.4.5"; /* set the version of the app here */appversion45,1614
int help = 0;        /* control help outputs request 0 == off | 1 == on */help46,1681
char *findme = NULL; /* string request on command line for acronym search */findme47,1756
int recordid = -1;   /* database record id (rowid) used to delete records */recordid48,1833
int newrec = 0;      /* request to add a new record 0 == off | 1 == on */newrec49,1910

Makefile,1082
SRC=amt-db-funcs.c cli-args.c main.c sqlite3.cSRC12,447
OUTNAME=amtOUTNAME13,495
CC=gccCC16,536
ARCH=32ARCH18,575
CFLAGS=$(CFLAGS_$(ARCH))CFLAGS20,652
EXE_END=.exeEXE_END22,769
CFLAGS_32=-g -Wall -m32 -pg -std=gnu11CFLAGS_3226,886
CFLAGS_64=-g -Wall -m64 -pg -std=gnu11CFLAGS_6428,990
N-CFLAGS_32=-m32 -mfpmath=sse -flto -funroll-loops -Wall -std=gnu11N-CFLAGS_3232,1118
N-CFLAGS_64=-m64 -flto -funroll-loops -Wall -std=gnu11N-CFLAGS_6433,1187
OPT-CFLAGS_32=-m32 -mfpmath=sse -flto -march=native -funroll-loops -Wall -std=gnu11OPT-CFLAGS_3235,1323
OPT-CFLAGS_64=-flto -funroll-loops -march=native -Wall -m64 -std=gnu11OPT-CFLAGS_6436,1408
LIBFLAGS=-lpthread -ldl -lreadlineLIBFLAGS38,1500
RM = delRM41,1588
uname_S := $(shell sh -c 'uname -s 2>/dev/null || echo not')uname_S45,1710
	RM = rmRM50,1899
	ARCH := $(shell getconf LONG_BIT)ARCH52,1953
	CFLAGS=$(CFLAGS_$(ARCH))CFLAGS54,2050
	EXE_END=EXE_END56,2140
	RM = rmRM61,2289
	ARCH := $(shell getconf LONG_BIT)ARCH63,2343
	CFLAGS=$(CFLAGS_$(ARCH))CFLAGS65,2440
	EXE_END=EXE_END67,2533

amt-db-funcs.h,45
#define AMT_DB_FUNCS_H_AMT_DB_FUNCS_H_4,88

main.c,198
int main(int argc, char **argv)main12,325
void exit_cleanup(void)exit_cleanup83,2310
void print_start_screen(char *prog_name)print_start_screen110,3049
void show_help(void)show_help120,3391

cli-args.c,61
void get_cli_args(int argc, char **argv)get_cli_args16,402

sqlite3.h,44755
#define SQLITE3_HSQLITE3_H34,1510
# define SQLITE_EXTERN SQLITE_EXTERN49,1787
# define SQLITE_APISQLITE_API52,1843
# define SQLITE_CDECLSQLITE_CDECL55,1891
# define SQLITE_APICALLSQLITE_APICALL58,1943
# define SQLITE_STDCALL SQLITE_STDCALL61,1997
# define SQLITE_CALLBACKSQLITE_CALLBACK64,2067
# define SQLITE_SYSAPISQLITE_SYSAPI67,2121
#define SQLITE_DEPRECATEDSQLITE_DEPRECATED83,2791
#define SQLITE_EXPERIMENTALSQLITE_EXPERIMENTAL84,2817
# undef SQLITE_VERSIONSQLITE_VERSION90,2945
# undef SQLITE_VERSION_NUMBERSQLITE_VERSION_NUMBER93,3004
#define SQLITE_VERSION SQLITE_VERSION124,4428
#define SQLITE_VERSION_NUMBER SQLITE_VERSION_NUMBER125,4467
#define SQLITE_SOURCE_ID SQLITE_SOURCE_ID126,4505
SQLITE_API SQLITE_EXTERN const char sqlite3_version[];sqlite3_version158,6083
typedef struct sqlite3 sqlite3;sqlite3242,9936
  typedef SQLITE_INT64_TYPE sqlite_int64;sqlite_int64261,10659
    typedef SQLITE_UINT64_TYPE sqlite_uint64;sqlite_uint64263,10728
    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;sqlite_uint64265,10783
  typedef __int64 sqlite_int64;sqlite_int64268,10894
  typedef unsigned __int64 sqlite_uint64;sqlite_uint64269,10926
  typedef long long int sqlite_int64;sqlite_int64271,10974
  typedef unsigned long long int sqlite_uint64;sqlite_uint64272,11012
typedef sqlite_int64 sqlite3_int64;sqlite3_int64274,11067
typedef sqlite_uint64 sqlite3_uint64;sqlite3_uint64275,11103
# define double double282,11291
typedef int (*sqlite3_callback)(void*,int,char**, char**);sqlite3_callback335,13705
#define SQLITE_OK SQLITE_OK418,17653
#define SQLITE_ERROR SQLITE_ERROR420,17740
#define SQLITE_INTERNAL SQLITE_INTERNAL421,17808
#define SQLITE_PERM SQLITE_PERM422,17877
#define SQLITE_ABORT SQLITE_ABORT423,17940
#define SQLITE_BUSY SQLITE_BUSY424,18014
#define SQLITE_LOCKED SQLITE_LOCKED425,18080
#define SQLITE_NOMEM SQLITE_NOMEM426,18152
#define SQLITE_READONLY SQLITE_READONLY427,18208
#define SQLITE_INTERRUPT SQLITE_INTERRUPT428,18283
#define SQLITE_IOERR SQLITE_IOERR429,18364
#define SQLITE_CORRUPT SQLITE_CORRUPT430,18439
#define SQLITE_NOTFOUND SQLITE_NOTFOUND431,18514
#define SQLITE_FULL SQLITE_FULL432,18593
#define SQLITE_CANTOPEN SQLITE_CANTOPEN433,18673
#define SQLITE_PROTOCOL SQLITE_PROTOCOL434,18744
#define SQLITE_EMPTY SQLITE_EMPTY435,18811
#define SQLITE_SCHEMA SQLITE_SCHEMA436,18867
#define SQLITE_TOOBIG SQLITE_TOOBIG437,18933
#define SQLITE_CONSTRAINT SQLITE_CONSTRAINT438,19005
#define SQLITE_MISMATCH SQLITE_MISMATCH439,19077
#define SQLITE_MISUSE SQLITE_MISUSE440,19134
#define SQLITE_NOLFS SQLITE_NOLFS441,19197
#define SQLITE_AUTH SQLITE_AUTH442,19274
#define SQLITE_FORMAT SQLITE_FORMAT443,19333
#define SQLITE_RANGE SQLITE_RANGE444,19403
#define SQLITE_NOTADB SQLITE_NOTADB445,19484
#define SQLITE_NOTICE SQLITE_NOTICE446,19562
#define SQLITE_WARNING SQLITE_WARNING447,19633
#define SQLITE_ROW SQLITE_ROW448,19699
#define SQLITE_DONE SQLITE_DONE449,19774
#define SQLITE_IOERR_READ SQLITE_IOERR_READ469,20698
#define SQLITE_IOERR_SHORT_READ SQLITE_IOERR_SHORT_READ470,20761
#define SQLITE_IOERR_WRITE SQLITE_IOERR_WRITE471,20824
#define SQLITE_IOERR_FSYNC SQLITE_IOERR_FSYNC472,20887
#define SQLITE_IOERR_DIR_FSYNC SQLITE_IOERR_DIR_FSYNC473,20950
#define SQLITE_IOERR_TRUNCATE SQLITE_IOERR_TRUNCATE474,21013
#define SQLITE_IOERR_FSTAT SQLITE_IOERR_FSTAT475,21076
#define SQLITE_IOERR_UNLOCK SQLITE_IOERR_UNLOCK476,21139
#define SQLITE_IOERR_RDLOCK SQLITE_IOERR_RDLOCK477,21202
#define SQLITE_IOERR_DELETE SQLITE_IOERR_DELETE478,21265
#define SQLITE_IOERR_BLOCKED SQLITE_IOERR_BLOCKED479,21329
#define SQLITE_IOERR_NOMEM SQLITE_IOERR_NOMEM480,21393
#define SQLITE_IOERR_ACCESS SQLITE_IOERR_ACCESS481,21457
#define SQLITE_IOERR_CHECKRESERVEDLOCK SQLITE_IOERR_CHECKRESERVEDLOCK482,21521
#define SQLITE_IOERR_LOCK SQLITE_IOERR_LOCK483,21585
#define SQLITE_IOERR_CLOSE SQLITE_IOERR_CLOSE484,21649
#define SQLITE_IOERR_DIR_CLOSE SQLITE_IOERR_DIR_CLOSE485,21713
#define SQLITE_IOERR_SHMOPEN SQLITE_IOERR_SHMOPEN486,21777
#define SQLITE_IOERR_SHMSIZE SQLITE_IOERR_SHMSIZE487,21841
#define SQLITE_IOERR_SHMLOCK SQLITE_IOERR_SHMLOCK488,21905
#define SQLITE_IOERR_SHMMAP SQLITE_IOERR_SHMMAP489,21969
#define SQLITE_IOERR_SEEK SQLITE_IOERR_SEEK490,22033
#define SQLITE_IOERR_DELETE_NOENT SQLITE_IOERR_DELETE_NOENT491,22097
#define SQLITE_IOERR_MMAP SQLITE_IOERR_MMAP492,22161
#define SQLITE_IOERR_GETTEMPPATH SQLITE_IOERR_GETTEMPPATH493,22225
#define SQLITE_IOERR_CONVPATH SQLITE_IOERR_CONVPATH494,22289
#define SQLITE_IOERR_VNODE SQLITE_IOERR_VNODE495,22353
#define SQLITE_IOERR_AUTH SQLITE_IOERR_AUTH496,22417
#define SQLITE_LOCKED_SHAREDCACHE SQLITE_LOCKED_SHAREDCACHE497,22481
#define SQLITE_BUSY_RECOVERY SQLITE_BUSY_RECOVERY498,22546
#define SQLITE_BUSY_SNAPSHOT SQLITE_BUSY_SNAPSHOT499,22611
#define SQLITE_CANTOPEN_NOTEMPDIR SQLITE_CANTOPEN_NOTEMPDIR500,22676
#define SQLITE_CANTOPEN_ISDIR SQLITE_CANTOPEN_ISDIR501,22742
#define SQLITE_CANTOPEN_FULLPATH SQLITE_CANTOPEN_FULLPATH502,22808
#define SQLITE_CANTOPEN_CONVPATH SQLITE_CANTOPEN_CONVPATH503,22874
#define SQLITE_CORRUPT_VTAB SQLITE_CORRUPT_VTAB504,22940
#define SQLITE_READONLY_RECOVERY SQLITE_READONLY_RECOVERY505,23005
#define SQLITE_READONLY_CANTLOCK SQLITE_READONLY_CANTLOCK506,23071
#define SQLITE_READONLY_ROLLBACK SQLITE_READONLY_ROLLBACK507,23137
#define SQLITE_READONLY_DBMOVED SQLITE_READONLY_DBMOVED508,23203
#define SQLITE_ABORT_ROLLBACK SQLITE_ABORT_ROLLBACK509,23269
#define SQLITE_CONSTRAINT_CHECK SQLITE_CONSTRAINT_CHECK510,23332
#define SQLITE_CONSTRAINT_COMMITHOOK SQLITE_CONSTRAINT_COMMITHOOK511,23400
#define SQLITE_CONSTRAINT_FOREIGNKEY SQLITE_CONSTRAINT_FOREIGNKEY512,23468
#define SQLITE_CONSTRAINT_FUNCTION SQLITE_CONSTRAINT_FUNCTION513,23536
#define SQLITE_CONSTRAINT_NOTNULL SQLITE_CONSTRAINT_NOTNULL514,23604
#define SQLITE_CONSTRAINT_PRIMARYKEY SQLITE_CONSTRAINT_PRIMARYKEY515,23672
#define SQLITE_CONSTRAINT_TRIGGER SQLITE_CONSTRAINT_TRIGGER516,23740
#define SQLITE_CONSTRAINT_UNIQUE SQLITE_CONSTRAINT_UNIQUE517,23808
#define SQLITE_CONSTRAINT_VTAB SQLITE_CONSTRAINT_VTAB518,23876
#define SQLITE_CONSTRAINT_ROWID SQLITE_CONSTRAINT_ROWID519,23944
#define SQLITE_NOTICE_RECOVER_WAL SQLITE_NOTICE_RECOVER_WAL520,24012
#define SQLITE_NOTICE_RECOVER_ROLLBACK SQLITE_NOTICE_RECOVER_ROLLBACK521,24076
#define SQLITE_WARNING_AUTOINDEX SQLITE_WARNING_AUTOINDEX522,24140
#define SQLITE_AUTH_USER SQLITE_AUTH_USER523,24205
#define SQLITE_OK_LOAD_PERMANENTLY SQLITE_OK_LOAD_PERMANENTLY524,24267
#define SQLITE_OPEN_READONLY SQLITE_OPEN_READONLY533,24546
#define SQLITE_OPEN_READWRITE SQLITE_OPEN_READWRITE534,24626
#define SQLITE_OPEN_CREATE SQLITE_OPEN_CREATE535,24706
#define SQLITE_OPEN_DELETEONCLOSE SQLITE_OPEN_DELETEONCLOSE536,24786
#define SQLITE_OPEN_EXCLUSIVE SQLITE_OPEN_EXCLUSIVE537,24850
#define SQLITE_OPEN_AUTOPROXY SQLITE_OPEN_AUTOPROXY538,24914
#define SQLITE_OPEN_URI SQLITE_OPEN_URI539,24978
#define SQLITE_OPEN_MEMORY SQLITE_OPEN_MEMORY540,25058
#define SQLITE_OPEN_MAIN_DB SQLITE_OPEN_MAIN_DB541,25138
#define SQLITE_OPEN_TEMP_DB SQLITE_OPEN_TEMP_DB542,25202
#define SQLITE_OPEN_TRANSIENT_DB SQLITE_OPEN_TRANSIENT_DB543,25266
#define SQLITE_OPEN_MAIN_JOURNAL SQLITE_OPEN_MAIN_JOURNAL544,25330
#define SQLITE_OPEN_TEMP_JOURNAL SQLITE_OPEN_TEMP_JOURNAL545,25394
#define SQLITE_OPEN_SUBJOURNAL SQLITE_OPEN_SUBJOURNAL546,25458
#define SQLITE_OPEN_MASTER_JOURNAL SQLITE_OPEN_MASTER_JOURNAL547,25522
#define SQLITE_OPEN_NOMUTEX SQLITE_OPEN_NOMUTEX548,25586
#define SQLITE_OPEN_FULLMUTEX SQLITE_OPEN_FULLMUTEX549,25666
#define SQLITE_OPEN_SHAREDCACHE SQLITE_OPEN_SHAREDCACHE550,25746
#define SQLITE_OPEN_PRIVATECACHE SQLITE_OPEN_PRIVATECACHE551,25826
#define SQLITE_OPEN_WAL SQLITE_OPEN_WAL552,25906
#define SQLITE_IOCAP_ATOMIC SQLITE_IOCAP_ATOMIC584,27448
#define SQLITE_IOCAP_ATOMIC512 SQLITE_IOCAP_ATOMIC512585,27503
#define SQLITE_IOCAP_ATOMIC1K SQLITE_IOCAP_ATOMIC1K586,27558
#define SQLITE_IOCAP_ATOMIC2K SQLITE_IOCAP_ATOMIC2K587,27613
#define SQLITE_IOCAP_ATOMIC4K SQLITE_IOCAP_ATOMIC4K588,27668
#define SQLITE_IOCAP_ATOMIC8K SQLITE_IOCAP_ATOMIC8K589,27723
#define SQLITE_IOCAP_ATOMIC16K SQLITE_IOCAP_ATOMIC16K590,27778
#define SQLITE_IOCAP_ATOMIC32K SQLITE_IOCAP_ATOMIC32K591,27833
#define SQLITE_IOCAP_ATOMIC64K SQLITE_IOCAP_ATOMIC64K592,27888
#define SQLITE_IOCAP_SAFE_APPEND SQLITE_IOCAP_SAFE_APPEND593,27943
#define SQLITE_IOCAP_SEQUENTIAL SQLITE_IOCAP_SEQUENTIAL594,27998
#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN595,28053
#define SQLITE_IOCAP_POWERSAFE_OVERWRITE SQLITE_IOCAP_POWERSAFE_OVERWRITE596,28108
#define SQLITE_IOCAP_IMMUTABLE SQLITE_IOCAP_IMMUTABLE597,28163
#define SQLITE_LOCK_NONE SQLITE_LOCK_NONE606,28423
#define SQLITE_LOCK_SHARED SQLITE_LOCK_SHARED607,28459
#define SQLITE_LOCK_RESERVED SQLITE_LOCK_RESERVED608,28495
#define SQLITE_LOCK_PENDING SQLITE_LOCK_PENDING609,28531
#define SQLITE_LOCK_EXCLUSIVE SQLITE_LOCK_EXCLUSIVE610,28567
#define SQLITE_SYNC_NORMAL SQLITE_SYNC_NORMAL638,29906
#define SQLITE_SYNC_FULL SQLITE_SYNC_FULL639,29948
#define SQLITE_SYNC_DATAONLY SQLITE_SYNC_DATAONLY640,29990
typedef struct sqlite3_file sqlite3_file;sqlite3_file653,30460
struct sqlite3_file {sqlite3_file654,30502
  const struct sqlite3_io_methods *pMethods;  /* Methods for an open file */pMethods655,30524
typedef struct sqlite3_io_methods sqlite3_io_methods;sqlite3_io_methods751,34934
struct sqlite3_io_methods {sqlite3_io_methods752,34988
  int iVersion;iVersion753,35016
  int (*xClose)(sqlite3_file*);xClose754,35032
  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);xRead755,35064
  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);xWrite756,35133
  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);xTruncate757,35209
  int (*xSync)(sqlite3_file*, int flags);xSync758,35264
  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);xFileSize759,35306
  int (*xLock)(sqlite3_file*, int);xLock760,35363
  int (*xUnlock)(sqlite3_file*, int);xUnlock761,35399
  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);xCheckReservedLock762,35437
  int (*xFileControl)(sqlite3_file*, int op, void *pArg);xFileControl763,35495
  int (*xSectorSize)(sqlite3_file*);xSectorSize764,35553
  int (*xDeviceCharacteristics)(sqlite3_file*);xDeviceCharacteristics765,35590
  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);xShmMap767,35684
  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);xShmLock768,35758
  void (*xShmBarrier)(sqlite3_file*);xShmBarrier769,35822
  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);xShmUnmap770,35860
  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);xFetch772,35957
  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);xUnfetch773,36031
#define SQLITE_FCNTL_LOCKSTATE SQLITE_FCNTL_LOCKSTATE1017,49537
#define SQLITE_FCNTL_GET_LOCKPROXYFILE SQLITE_FCNTL_GET_LOCKPROXYFILE1018,49584
#define SQLITE_FCNTL_SET_LOCKPROXYFILE SQLITE_FCNTL_SET_LOCKPROXYFILE1019,49631
#define SQLITE_FCNTL_LAST_ERRNO SQLITE_FCNTL_LAST_ERRNO1020,49678
#define SQLITE_FCNTL_SIZE_HINT SQLITE_FCNTL_SIZE_HINT1021,49725
#define SQLITE_FCNTL_CHUNK_SIZE SQLITE_FCNTL_CHUNK_SIZE1022,49772
#define SQLITE_FCNTL_FILE_POINTER SQLITE_FCNTL_FILE_POINTER1023,49819
#define SQLITE_FCNTL_SYNC_OMITTED SQLITE_FCNTL_SYNC_OMITTED1024,49866
#define SQLITE_FCNTL_WIN32_AV_RETRY SQLITE_FCNTL_WIN32_AV_RETRY1025,49913
#define SQLITE_FCNTL_PERSIST_WAL SQLITE_FCNTL_PERSIST_WAL1026,49960
#define SQLITE_FCNTL_OVERWRITE SQLITE_FCNTL_OVERWRITE1027,50007
#define SQLITE_FCNTL_VFSNAME SQLITE_FCNTL_VFSNAME1028,50054
#define SQLITE_FCNTL_POWERSAFE_OVERWRITE SQLITE_FCNTL_POWERSAFE_OVERWRITE1029,50101
#define SQLITE_FCNTL_PRAGMA SQLITE_FCNTL_PRAGMA1030,50148
#define SQLITE_FCNTL_BUSYHANDLER SQLITE_FCNTL_BUSYHANDLER1031,50195
#define SQLITE_FCNTL_TEMPFILENAME SQLITE_FCNTL_TEMPFILENAME1032,50242
#define SQLITE_FCNTL_MMAP_SIZE SQLITE_FCNTL_MMAP_SIZE1033,50289
#define SQLITE_FCNTL_TRACE SQLITE_FCNTL_TRACE1034,50336
#define SQLITE_FCNTL_HAS_MOVED SQLITE_FCNTL_HAS_MOVED1035,50383
#define SQLITE_FCNTL_SYNC SQLITE_FCNTL_SYNC1036,50430
#define SQLITE_FCNTL_COMMIT_PHASETWO SQLITE_FCNTL_COMMIT_PHASETWO1037,50477
#define SQLITE_FCNTL_WIN32_SET_HANDLE SQLITE_FCNTL_WIN32_SET_HANDLE1038,50524
#define SQLITE_FCNTL_WAL_BLOCK SQLITE_FCNTL_WAL_BLOCK1039,50571
#define SQLITE_FCNTL_ZIPVFS SQLITE_FCNTL_ZIPVFS1040,50618
#define SQLITE_FCNTL_RBU SQLITE_FCNTL_RBU1041,50665
#define SQLITE_FCNTL_VFS_POINTER SQLITE_FCNTL_VFS_POINTER1042,50712
#define SQLITE_FCNTL_JOURNAL_POINTER SQLITE_FCNTL_JOURNAL_POINTER1043,50759
#define SQLITE_FCNTL_WIN32_GET_HANDLE SQLITE_FCNTL_WIN32_GET_HANDLE1044,50806
#define SQLITE_FCNTL_PDB SQLITE_FCNTL_PDB1045,50853
#define SQLITE_GET_LOCKPROXYFILE SQLITE_GET_LOCKPROXYFILE1048,50924
#define SQLITE_SET_LOCKPROXYFILE SQLITE_SET_LOCKPROXYFILE1049,50993
#define SQLITE_LAST_ERRNO SQLITE_LAST_ERRNO1050,51062
typedef struct sqlite3_mutex sqlite3_mutex;sqlite3_mutex1063,51471
typedef struct sqlite3_api_routines sqlite3_api_routines;sqlite3_api_routines1073,51800
typedef struct sqlite3_vfs sqlite3_vfs;sqlite3_vfs1232,59705
typedef void (*sqlite3_syscall_ptr)(void);sqlite3_syscall_ptr1233,59745
struct sqlite3_vfs {sqlite3_vfs1234,59788
  int iVersion;            /* Structure version number (currently 3) */iVersion1235,59809
  int szOsFile;            /* Size of subclassed sqlite3_file */szOsFile1236,59881
  int mxPathname;          /* Maximum file pathname length */mxPathname1237,59946
  sqlite3_vfs *pNext;      /* Next registered VFS */pNext1238,60008
  const char *zName;       /* Name of this virtual file system */zName1239,60061
  void *pAppData;          /* Pointer to application-specific data */pAppData1240,60127
  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,xOpen1241,60197
  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);xDelete1243,60303
  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);xAccess1244,60367
  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);xFullPathname1245,60443
  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);xDlOpen1246,60522
  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);xDlError1247,60579
  void (*xDlClose)(sqlite3_vfs*, void*);xDlClose1249,60707
  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);xRandomness1250,60748
  int (*xSleep)(sqlite3_vfs*, int microseconds);xSleep1251,60807
  int (*xCurrentTime)(sqlite3_vfs*, double*);xCurrentTime1252,60856
  int (*xGetLastError)(sqlite3_vfs*, int, char *);xGetLastError1253,60902
  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);xCurrentTimeInt641258,61096
  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);xSetSystemCall1263,61285
  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);xGetSystemCall1264,61364
  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);xNextSystemCall1265,61438
#define SQLITE_ACCESS_EXISTS SQLITE_ACCESS_EXISTS1293,62627
#define SQLITE_ACCESS_READWRITE SQLITE_ACCESS_READWRITE1294,62661
#define SQLITE_ACCESS_READ SQLITE_ACCESS_READ1295,62739
#define SQLITE_SHM_UNLOCK SQLITE_SHM_UNLOCK1319,63545
#define SQLITE_SHM_LOCK SQLITE_SHM_LOCK1320,63579
#define SQLITE_SHM_SHARED SQLITE_SHM_SHARED1321,63613
#define SQLITE_SHM_EXCLUSIVE SQLITE_SHM_EXCLUSIVE1322,63647
#define SQLITE_SHM_NLOCK SQLITE_SHM_NLOCK1332,63941
typedef struct sqlite3_mem_methods sqlite3_mem_methods;sqlite3_mem_methods1530,73794
struct sqlite3_mem_methods {sqlite3_mem_methods1531,73850
  void *(*xMalloc)(int);         /* Memory allocation function */xMalloc1532,73879
  void (*xFree)(void*);          /* Free a prior allocation */xFree1533,73945
  void *(*xRealloc)(void*,int);  /* Resize an allocation */xRealloc1534,74008
  int (*xSize)(void*);           /* Return the size of an allocation */xSize1535,74068
  int (*xRoundup)(int);          /* Round up request size to allocation size */xRoundup1536,74140
  int (*xInit)(void*);           /* Initialize the memory allocator */xInit1537,74220
  void (*xShutdown)(void*);      /* Deinitialize the memory allocator */xShutdown1538,74291
  void *pAppData;                /* Argument to xInit() and xShutdown() */pAppData1539,74364
#define SQLITE_CONFIG_SINGLETHREAD SQLITE_CONFIG_SINGLETHREAD1876,93407
#define SQLITE_CONFIG_MULTITHREAD SQLITE_CONFIG_MULTITHREAD1877,93456
#define SQLITE_CONFIG_SERIALIZED SQLITE_CONFIG_SERIALIZED1878,93505
#define SQLITE_CONFIG_MALLOC SQLITE_CONFIG_MALLOC1879,93554
#define SQLITE_CONFIG_GETMALLOC SQLITE_CONFIG_GETMALLOC1880,93620
#define SQLITE_CONFIG_SCRATCH SQLITE_CONFIG_SCRATCH1881,93686
#define SQLITE_CONFIG_PAGECACHE SQLITE_CONFIG_PAGECACHE1882,93752
#define SQLITE_CONFIG_HEAP SQLITE_CONFIG_HEAP1883,93818
#define SQLITE_CONFIG_MEMSTATUS SQLITE_CONFIG_MEMSTATUS1884,93889
#define SQLITE_CONFIG_MUTEX SQLITE_CONFIG_MUTEX1885,93942
#define SQLITE_CONFIG_GETMUTEX SQLITE_CONFIG_GETMUTEX1886,94010
#define SQLITE_CONFIG_LOOKASIDE SQLITE_CONFIG_LOOKASIDE1888,94145
#define SQLITE_CONFIG_PCACHE SQLITE_CONFIG_PCACHE1889,94198
#define SQLITE_CONFIG_GETPCACHE SQLITE_CONFIG_GETPCACHE1890,94249
#define SQLITE_CONFIG_LOG SQLITE_CONFIG_LOG1891,94300
#define SQLITE_CONFIG_URI SQLITE_CONFIG_URI1892,94358
#define SQLITE_CONFIG_PCACHE2 SQLITE_CONFIG_PCACHE21893,94407
#define SQLITE_CONFIG_GETPCACHE2 SQLITE_CONFIG_GETPCACHE21894,94477
#define SQLITE_CONFIG_COVERING_INDEX_SCAN SQLITE_CONFIG_COVERING_INDEX_SCAN1895,94547
#define SQLITE_CONFIG_SQLLOG SQLITE_CONFIG_SQLLOG1896,94603
#define SQLITE_CONFIG_MMAP_SIZE SQLITE_CONFIG_MMAP_SIZE1897,94663
#define SQLITE_CONFIG_WIN32_HEAPSIZE SQLITE_CONFIG_WIN32_HEAPSIZE1898,94737
#define SQLITE_CONFIG_PCACHE_HDRSZ SQLITE_CONFIG_PCACHE_HDRSZ1899,94799
#define SQLITE_CONFIG_PMASZ SQLITE_CONFIG_PMASZ1900,94860
#define SQLITE_CONFIG_STMTJRNL_SPILL SQLITE_CONFIG_STMTJRNL_SPILL1901,94931
#define SQLITE_DBCONFIG_MAINDBNAME SQLITE_DBCONFIG_MAINDBNAME2012,101128
#define SQLITE_DBCONFIG_LOOKASIDE SQLITE_DBCONFIG_LOOKASIDE2013,101197
#define SQLITE_DBCONFIG_ENABLE_FKEY SQLITE_DBCONFIG_ENABLE_FKEY2014,101268
#define SQLITE_DBCONFIG_ENABLE_TRIGGER SQLITE_DBCONFIG_ENABLE_TRIGGER2015,101334
#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER2016,101400
#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION2017,101466
#define SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE2018,101532
#define SQLITE_DENY SQLITE_DENY2755,136074
#define SQLITE_IGNORE SQLITE_IGNORE2756,136144
#define SQLITE_CREATE_INDEX SQLITE_CREATE_INDEX2778,137269
#define SQLITE_CREATE_TABLE SQLITE_CREATE_TABLE2779,137348
#define SQLITE_CREATE_TEMP_INDEX SQLITE_CREATE_TEMP_INDEX2780,137427
#define SQLITE_CREATE_TEMP_TABLE SQLITE_CREATE_TEMP_TABLE2781,137506
#define SQLITE_CREATE_TEMP_TRIGGER SQLITE_CREATE_TEMP_TRIGGER2782,137585
#define SQLITE_CREATE_TEMP_VIEW SQLITE_CREATE_TEMP_VIEW2783,137664
#define SQLITE_CREATE_TRIGGER SQLITE_CREATE_TRIGGER2784,137743
#define SQLITE_CREATE_VIEW SQLITE_CREATE_VIEW2785,137822
#define SQLITE_DELETE SQLITE_DELETE2786,137901
#define SQLITE_DROP_INDEX SQLITE_DROP_INDEX2787,137980
#define SQLITE_DROP_TABLE SQLITE_DROP_TABLE2788,138059
#define SQLITE_DROP_TEMP_INDEX SQLITE_DROP_TEMP_INDEX2789,138138
#define SQLITE_DROP_TEMP_TABLE SQLITE_DROP_TEMP_TABLE2790,138217
#define SQLITE_DROP_TEMP_TRIGGER SQLITE_DROP_TEMP_TRIGGER2791,138296
#define SQLITE_DROP_TEMP_VIEW SQLITE_DROP_TEMP_VIEW2792,138375
#define SQLITE_DROP_TRIGGER SQLITE_DROP_TRIGGER2793,138454
#define SQLITE_DROP_VIEW SQLITE_DROP_VIEW2794,138533
#define SQLITE_INSERT SQLITE_INSERT2795,138612
#define SQLITE_PRAGMA SQLITE_PRAGMA2796,138691
#define SQLITE_READ SQLITE_READ2797,138770
#define SQLITE_SELECT SQLITE_SELECT2798,138849
#define SQLITE_TRANSACTION SQLITE_TRANSACTION2799,138928
#define SQLITE_UPDATE SQLITE_UPDATE2800,139007
#define SQLITE_ATTACH SQLITE_ATTACH2801,139086
#define SQLITE_DETACH SQLITE_DETACH2802,139165
#define SQLITE_ALTER_TABLE SQLITE_ALTER_TABLE2803,139244
#define SQLITE_REINDEX SQLITE_REINDEX2804,139323
#define SQLITE_ANALYZE SQLITE_ANALYZE2805,139402
#define SQLITE_CREATE_VTABLE SQLITE_CREATE_VTABLE2806,139481
#define SQLITE_DROP_VTABLE SQLITE_DROP_VTABLE2807,139560
#define SQLITE_FUNCTION SQLITE_FUNCTION2808,139639
#define SQLITE_SAVEPOINT SQLITE_SAVEPOINT2809,139718
#define SQLITE_COPY SQLITE_COPY2810,139797
#define SQLITE_RECURSIVE SQLITE_RECURSIVE2811,139859
#define SQLITE_TRACE_STMT SQLITE_TRACE_STMT2902,144267
#define SQLITE_TRACE_PROFILE SQLITE_TRACE_PROFILE2903,144304
#define SQLITE_TRACE_ROW SQLITE_TRACE_ROW2904,144341
#define SQLITE_TRACE_CLOSE SQLITE_TRACE_CLOSE2905,144378
typedef struct sqlite3_stmt sqlite3_stmt;sqlite3_stmt3334,165932
#define SQLITE_LIMIT_LENGTH SQLITE_LIMIT_LENGTH3434,170431
#define SQLITE_LIMIT_SQL_LENGTH SQLITE_LIMIT_SQL_LENGTH3435,170480
#define SQLITE_LIMIT_COLUMN SQLITE_LIMIT_COLUMN3436,170529
#define SQLITE_LIMIT_EXPR_DEPTH SQLITE_LIMIT_EXPR_DEPTH3437,170578
#define SQLITE_LIMIT_COMPOUND_SELECT SQLITE_LIMIT_COMPOUND_SELECT3438,170627
#define SQLITE_LIMIT_VDBE_OP SQLITE_LIMIT_VDBE_OP3439,170676
#define SQLITE_LIMIT_FUNCTION_ARG SQLITE_LIMIT_FUNCTION_ARG3440,170725
#define SQLITE_LIMIT_ATTACHED SQLITE_LIMIT_ATTACHED3441,170774
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH SQLITE_LIMIT_LIKE_PATTERN_LENGTH3442,170823
#define SQLITE_LIMIT_VARIABLE_NUMBER SQLITE_LIMIT_VARIABLE_NUMBER3443,170872
#define SQLITE_LIMIT_TRIGGER_DEPTH SQLITE_LIMIT_TRIGGER_DEPTH3444,170921
#define SQLITE_LIMIT_WORKER_THREADS SQLITE_LIMIT_WORKER_THREADS3445,170970
typedef struct Mem sqlite3_value;sqlite3_value3687,182726
typedef struct sqlite3_context sqlite3_context;sqlite3_context3701,183308
#define SQLITE_INTEGER SQLITE_INTEGER4156,204640
#define SQLITE_FLOAT SQLITE_FLOAT4157,204666
#define SQLITE_BLOB SQLITE_BLOB4158,204692
#define SQLITE_NULL SQLITE_NULL4159,204718
# undef SQLITE_TEXTSQLITE_TEXT4161,204763
# define SQLITE_TEXT SQLITE_TEXT4163,204789
#define SQLITE3_TEXT SQLITE3_TEXT4165,204823
#define SQLITE_UTF8 SQLITE_UTF84525,222480
#define SQLITE_UTF16LE SQLITE_UTF16LE4526,222540
#define SQLITE_UTF16BE SQLITE_UTF16BE4527,222600
#define SQLITE_UTF16 SQLITE_UTF164528,222660
#define SQLITE_ANY SQLITE_ANY4529,222723
#define SQLITE_UTF16_ALIGNED SQLITE_UTF16_ALIGNED4530,222775
#define SQLITE_DETERMINISTIC SQLITE_DETERMINISTIC4540,223104
typedef void (*sqlite3_destructor_type)(void*);sqlite3_destructor_type4796,234955
#define SQLITE_STATIC SQLITE_STATIC4797,235003
#define SQLITE_TRANSIENT SQLITE_TRANSIENT4798,235059
SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;sqlite3_temp_directory5223,254732
SQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;sqlite3_data_directory5260,256568
typedef struct sqlite3_vtab sqlite3_vtab;sqlite3_vtab5806,280786
typedef struct sqlite3_index_info sqlite3_index_info;sqlite3_index_info5807,280828
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;sqlite3_vtab_cursor5808,280882
typedef struct sqlite3_module sqlite3_module;sqlite3_module5809,280938
struct sqlite3_module {sqlite3_module5827,281690
  int iVersion;iVersion5828,281714
  int (*xCreate)(sqlite3*, void *pAux,xCreate5829,281730
  int (*xConnect)(sqlite3*, void *pAux,xConnect5832,281865
  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);xBestIndex5835,282001
  int (*xDisconnect)(sqlite3_vtab *pVTab);xDisconnect5836,282064
  int (*xDestroy)(sqlite3_vtab *pVTab);xDestroy5837,282107
  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);xOpen5838,282147
  int (*xClose)(sqlite3_vtab_cursor*);xClose5839,282216
  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,xFilter5840,282255
  int (*xNext)(sqlite3_vtab_cursor*);xNext5842,282375
  int (*xEof)(sqlite3_vtab_cursor*);xEof5843,282413
  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);xColumn5844,282450
  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);xRowid5845,282513
  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);xUpdate5846,282575
  int (*xBegin)(sqlite3_vtab *pVTab);xBegin5847,282649
  int (*xSync)(sqlite3_vtab *pVTab);xSync5848,282687
  int (*xCommit)(sqlite3_vtab *pVTab);xCommit5849,282724
  int (*xRollback)(sqlite3_vtab *pVTab);xRollback5850,282763
  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,xFindFunction5851,282804
  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);xRename5854,282993
  int (*xSavepoint)(sqlite3_vtab *pVTab, int);xSavepoint5857,283171
  int (*xRelease)(sqlite3_vtab *pVTab, int);xRelease5858,283218
  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);xRollbackTo5859,283263
struct sqlite3_index_info {sqlite3_index_info5958,288409
  int nConstraint;           /* Number of entries in aConstraint */nConstraint5960,288452
  struct sqlite3_index_constraint {sqlite3_index_constraint5961,288520
     int iColumn;              /* Column constrained.  -1 for ROWID */iColumn5962,288556
     unsigned char op;         /* Constraint operator */op5963,288627
     unsigned char usable;     /* True if this constraint is usable */usable5964,288684
     int iTermOffset;          /* Used internally - xBestIndex should ignore */iTermOffset5965,288755
  } *aConstraint;            /* Table of WHERE clause constraints */aConstraint5966,288835
  int nOrderBy;              /* Number of terms in the ORDER BY clause */nOrderBy5967,288904
  struct sqlite3_index_orderby {sqlite3_index_orderby5968,288978
     int iColumn;              /* Column number */iColumn5969,289011
     unsigned char desc;       /* True for DESC.  False for ASC. */desc5970,289062
  } *aOrderBy;               /* The ORDER BY clause */aOrderBy5971,289130
  struct sqlite3_index_constraint_usage {sqlite3_index_constraint_usage5973,289201
    int argvIndex;           /* if >0, constraint is part of argv to xFilter */argvIndex5974,289243
    unsigned char omit;      /* Do not code a test for this constraint */omit5975,289323
  } *aConstraintUsage;aConstraintUsage5976,289397
  int idxNum;                /* Number used to identify the index */idxNum5977,289420
  char *idxStr;              /* String, possibly obtained from sqlite3_malloc */idxStr5978,289489
  int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */needToFreeIdxStr5979,289570
  int orderByConsumed;       /* True if output is already ordered */orderByConsumed5980,289646
  double estimatedCost;           /* Estimated cost of using this index */estimatedCost5981,289715
  sqlite3_int64 estimatedRows;    /* Estimated number of rows returned */estimatedRows5983,289856
  int idxFlags;              /* Mask of SQLITE_INDEX_SCAN_* flags */idxFlags5985,289996
  sqlite3_uint64 colUsed;    /* Input: Mask of columns used by statement */colUsed5987,290132
#define SQLITE_INDEX_SCAN_UNIQUE SQLITE_INDEX_SCAN_UNIQUE5993,290256
#define SQLITE_INDEX_CONSTRAINT_EQ SQLITE_INDEX_CONSTRAINT_EQ6003,290629
#define SQLITE_INDEX_CONSTRAINT_GT SQLITE_INDEX_CONSTRAINT_GT6004,290671
#define SQLITE_INDEX_CONSTRAINT_LE SQLITE_INDEX_CONSTRAINT_LE6005,290713
#define SQLITE_INDEX_CONSTRAINT_LT SQLITE_INDEX_CONSTRAINT_LT6006,290755
#define SQLITE_INDEX_CONSTRAINT_GE SQLITE_INDEX_CONSTRAINT_GE6007,290797
#define SQLITE_INDEX_CONSTRAINT_MATCH SQLITE_INDEX_CONSTRAINT_MATCH6008,290839
#define SQLITE_INDEX_CONSTRAINT_LIKE SQLITE_INDEX_CONSTRAINT_LIKE6009,290881
#define SQLITE_INDEX_CONSTRAINT_GLOB SQLITE_INDEX_CONSTRAINT_GLOB6010,290923
#define SQLITE_INDEX_CONSTRAINT_REGEXP SQLITE_INDEX_CONSTRAINT_REGEXP6011,290965
struct sqlite3_vtab {sqlite3_vtab6071,293782
  const sqlite3_module *pModule;  /* The module for this virtual table */pModule6072,293804
  int nRef;                       /* Number of open cursors */nRef6073,293878
  char *zErrMsg;                  /* Error message from sqlite3_mprintf() */zErrMsg6074,293941
struct sqlite3_vtab_cursor {sqlite3_vtab_cursor6095,294879
  sqlite3_vtab *pVtab;      /* Virtual table of this cursor */pVtab6096,294908
typedef struct sqlite3_blob sqlite3_blob;sqlite3_blob6151,297189
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;sqlite3_mutex_methods6599,317896
struct sqlite3_mutex_methods {sqlite3_mutex_methods6600,317956
  int (*xMutexInit)(void);xMutexInit6601,317987
  int (*xMutexEnd)(void);xMutexEnd6602,318014
  sqlite3_mutex *(*xMutexAlloc)(int);xMutexAlloc6603,318040
  void (*xMutexFree)(sqlite3_mutex *);xMutexFree6604,318078
  void (*xMutexEnter)(sqlite3_mutex *);xMutexEnter6605,318117
  int (*xMutexTry)(sqlite3_mutex *);xMutexTry6606,318157
  void (*xMutexLeave)(sqlite3_mutex *);xMutexLeave6607,318194
  int (*xMutexHeld)(sqlite3_mutex *);xMutexHeld6608,318234
  int (*xMutexNotheld)(sqlite3_mutex *);xMutexNotheld6609,318272
#define SQLITE_MUTEX_FAST SQLITE_MUTEX_FAST6656,320295
#define SQLITE_MUTEX_RECURSIVE SQLITE_MUTEX_RECURSIVE6657,320335
#define SQLITE_MUTEX_STATIC_MASTER SQLITE_MUTEX_STATIC_MASTER6658,320375
#define SQLITE_MUTEX_STATIC_MEM SQLITE_MUTEX_STATIC_MEM6659,320415
#define SQLITE_MUTEX_STATIC_MEM2 SQLITE_MUTEX_STATIC_MEM26660,320479
#define SQLITE_MUTEX_STATIC_OPEN SQLITE_MUTEX_STATIC_OPEN6661,320535
#define SQLITE_MUTEX_STATIC_PRNG SQLITE_MUTEX_STATIC_PRNG6662,320601
#define SQLITE_MUTEX_STATIC_LRU SQLITE_MUTEX_STATIC_LRU6663,320669
#define SQLITE_MUTEX_STATIC_LRU2 SQLITE_MUTEX_STATIC_LRU26664,320730
#define SQLITE_MUTEX_STATIC_PMEM SQLITE_MUTEX_STATIC_PMEM6665,320786
#define SQLITE_MUTEX_STATIC_APP1 SQLITE_MUTEX_STATIC_APP16666,320853
#define SQLITE_MUTEX_STATIC_APP2 SQLITE_MUTEX_STATIC_APP26667,320923
#define SQLITE_MUTEX_STATIC_APP3 SQLITE_MUTEX_STATIC_APP36668,320993
#define SQLITE_MUTEX_STATIC_VFS1 SQLITE_MUTEX_STATIC_VFS16669,321063
#define SQLITE_MUTEX_STATIC_VFS2 SQLITE_MUTEX_STATIC_VFS26670,321134
#define SQLITE_MUTEX_STATIC_VFS3 SQLITE_MUTEX_STATIC_VFS36671,321206
#define SQLITE_TESTCTRL_FIRST SQLITE_TESTCTRL_FIRST6750,324699
#define SQLITE_TESTCTRL_PRNG_SAVE SQLITE_TESTCTRL_PRNG_SAVE6751,324750
#define SQLITE_TESTCTRL_PRNG_RESTORE SQLITE_TESTCTRL_PRNG_RESTORE6752,324801
#define SQLITE_TESTCTRL_PRNG_RESET SQLITE_TESTCTRL_PRNG_RESET6753,324852
#define SQLITE_TESTCTRL_BITVEC_TEST SQLITE_TESTCTRL_BITVEC_TEST6754,324903
#define SQLITE_TESTCTRL_FAULT_INSTALL SQLITE_TESTCTRL_FAULT_INSTALL6755,324954
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS6756,325005
#define SQLITE_TESTCTRL_PENDING_BYTE SQLITE_TESTCTRL_PENDING_BYTE6757,325056
#define SQLITE_TESTCTRL_ASSERT SQLITE_TESTCTRL_ASSERT6758,325107
#define SQLITE_TESTCTRL_ALWAYS SQLITE_TESTCTRL_ALWAYS6759,325158
#define SQLITE_TESTCTRL_RESERVE SQLITE_TESTCTRL_RESERVE6760,325209
#define SQLITE_TESTCTRL_OPTIMIZATIONS SQLITE_TESTCTRL_OPTIMIZATIONS6761,325260
#define SQLITE_TESTCTRL_ISKEYWORD SQLITE_TESTCTRL_ISKEYWORD6762,325311
#define SQLITE_TESTCTRL_SCRATCHMALLOC SQLITE_TESTCTRL_SCRATCHMALLOC6763,325362
#define SQLITE_TESTCTRL_LOCALTIME_FAULT SQLITE_TESTCTRL_LOCALTIME_FAULT6764,325413
#define SQLITE_TESTCTRL_EXPLAIN_STMT SQLITE_TESTCTRL_EXPLAIN_STMT6765,325464
#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD6766,325531
#define SQLITE_TESTCTRL_NEVER_CORRUPT SQLITE_TESTCTRL_NEVER_CORRUPT6767,325582
#define SQLITE_TESTCTRL_VDBE_COVERAGE SQLITE_TESTCTRL_VDBE_COVERAGE6768,325633
#define SQLITE_TESTCTRL_BYTEORDER SQLITE_TESTCTRL_BYTEORDER6769,325684
#define SQLITE_TESTCTRL_ISINIT SQLITE_TESTCTRL_ISINIT6770,325735
#define SQLITE_TESTCTRL_SORTER_MMAP SQLITE_TESTCTRL_SORTER_MMAP6771,325786
#define SQLITE_TESTCTRL_IMPOSTER SQLITE_TESTCTRL_IMPOSTER6772,325837
#define SQLITE_TESTCTRL_LAST SQLITE_TESTCTRL_LAST6773,325888
#define SQLITE_STATUS_MEMORY_USED SQLITE_STATUS_MEMORY_USED6893,331705
#define SQLITE_STATUS_PAGECACHE_USED SQLITE_STATUS_PAGECACHE_USED6894,331750
#define SQLITE_STATUS_PAGECACHE_OVERFLOW SQLITE_STATUS_PAGECACHE_OVERFLOW6895,331795
#define SQLITE_STATUS_SCRATCH_USED SQLITE_STATUS_SCRATCH_USED6896,331840
#define SQLITE_STATUS_SCRATCH_OVERFLOW SQLITE_STATUS_SCRATCH_OVERFLOW6897,331885
#define SQLITE_STATUS_MALLOC_SIZE SQLITE_STATUS_MALLOC_SIZE6898,331930
#define SQLITE_STATUS_PARSER_STACK SQLITE_STATUS_PARSER_STACK6899,331975
#define SQLITE_STATUS_PAGECACHE_SIZE SQLITE_STATUS_PAGECACHE_SIZE6900,332020
#define SQLITE_STATUS_SCRATCH_SIZE SQLITE_STATUS_SCRATCH_SIZE6901,332065
#define SQLITE_STATUS_MALLOC_COUNT SQLITE_STATUS_MALLOC_COUNT6902,332110
#define SQLITE_DBSTATUS_LOOKASIDE_USED SQLITE_DBSTATUS_LOOKASIDE_USED7031,338313
#define SQLITE_DBSTATUS_CACHE_USED SQLITE_DBSTATUS_CACHE_USED7032,338360
#define SQLITE_DBSTATUS_SCHEMA_USED SQLITE_DBSTATUS_SCHEMA_USED7033,338407
#define SQLITE_DBSTATUS_STMT_USED SQLITE_DBSTATUS_STMT_USED7034,338454
#define SQLITE_DBSTATUS_LOOKASIDE_HIT SQLITE_DBSTATUS_LOOKASIDE_HIT7035,338501
#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE7036,338548
#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL7037,338595
#define SQLITE_DBSTATUS_CACHE_HIT SQLITE_DBSTATUS_CACHE_HIT7038,338642
#define SQLITE_DBSTATUS_CACHE_MISS SQLITE_DBSTATUS_CACHE_MISS7039,338689
#define SQLITE_DBSTATUS_CACHE_WRITE SQLITE_DBSTATUS_CACHE_WRITE7040,338736
#define SQLITE_DBSTATUS_DEFERRED_FKS SQLITE_DBSTATUS_DEFERRED_FKS7041,338783
#define SQLITE_DBSTATUS_CACHE_USED_SHARED SQLITE_DBSTATUS_CACHE_USED_SHARED7042,338830
#define SQLITE_DBSTATUS_MAX SQLITE_DBSTATUS_MAX7043,338877
#define SQLITE_STMTSTATUS_FULLSCAN_STEP SQLITE_STMTSTATUS_FULLSCAN_STEP7109,341920
#define SQLITE_STMTSTATUS_SORT SQLITE_STMTSTATUS_SORT7110,341966
#define SQLITE_STMTSTATUS_AUTOINDEX SQLITE_STMTSTATUS_AUTOINDEX7111,342012
#define SQLITE_STMTSTATUS_VM_STEP SQLITE_STMTSTATUS_VM_STEP7112,342058
typedef struct sqlite3_pcache sqlite3_pcache;sqlite3_pcache7125,342479
typedef struct sqlite3_pcache_page sqlite3_pcache_page;sqlite3_pcache_page7137,342896
struct sqlite3_pcache_page {sqlite3_pcache_page7138,342952
  void *pBuf;        /* The content of the page */pBuf7139,342981
  void *pExtra;      /* Extra information associated with the page */pExtra7140,343032
typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;sqlite3_pcache_methods27302,351260
struct sqlite3_pcache_methods2 {sqlite3_pcache_methods27303,351324
  int iVersion;iVersion7304,351357
  void *pArg;pArg7305,351373
  int (*xInit)(void*);xInit7306,351387
  void (*xShutdown)(void*);xShutdown7307,351410
  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);xCreate7308,351438
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize7309,351509
  int (*xPagecount)(sqlite3_pcache*);xPagecount7310,351564
  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch7311,351602
  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);xUnpin7312,351683
  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, xRekey7313,351753
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate7315,351851
  void (*xDestroy)(sqlite3_pcache*);xDestroy7316,351906
  void (*xShrink)(sqlite3_pcache*);xShrink7317,351943
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;sqlite3_pcache_methods7325,352201
struct sqlite3_pcache_methods {sqlite3_pcache_methods7326,352263
  void *pArg;pArg7327,352295
  int (*xInit)(void*);xInit7328,352309
  void (*xShutdown)(void*);xShutdown7329,352332
  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);xCreate7330,352360
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize7331,352418
  int (*xPagecount)(sqlite3_pcache*);xPagecount7332,352473
  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch7333,352511
  void (*xUnpin)(sqlite3_pcache*, void*, int discard);xUnpin7334,352577
  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);xRekey7335,352632
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate7336,352708
  void (*xDestroy)(sqlite3_pcache*);xDestroy7337,352763
typedef struct sqlite3_backup sqlite3_backup;sqlite3_backup7351,353140
#define SQLITE_CHECKPOINT_PASSIVE SQLITE_CHECKPOINT_PASSIVE7948,383495
#define SQLITE_CHECKPOINT_FULL SQLITE_CHECKPOINT_FULL7949,383575
#define SQLITE_CHECKPOINT_RESTART SQLITE_CHECKPOINT_RESTART7950,383653
#define SQLITE_CHECKPOINT_TRUNCATE SQLITE_CHECKPOINT_TRUNCATE7951,383732
#define SQLITE_VTAB_CONSTRAINT_SUPPORT SQLITE_VTAB_CONSTRAINT_SUPPORT8008,386399
#define SQLITE_ROLLBACK SQLITE_ROLLBACK8034,387429
#define SQLITE_FAIL SQLITE_FAIL8036,387531
#define SQLITE_REPLACE SQLITE_REPLACE8038,387609
#define SQLITE_SCANSTAT_NLOOP SQLITE_SCANSTAT_NLOOP8087,389930
#define SQLITE_SCANSTAT_NVISIT SQLITE_SCANSTAT_NVISIT8088,389965
#define SQLITE_SCANSTAT_EST SQLITE_SCANSTAT_EST8089,390000
#define SQLITE_SCANSTAT_NAME SQLITE_SCANSTAT_NAME8090,390035
#define SQLITE_SCANSTAT_EXPLAIN SQLITE_SCANSTAT_EXPLAIN8091,390070
#define SQLITE_SCANSTAT_SELECTID SQLITE_SCANSTAT_SELECTID8092,390105
typedef struct sqlite3_snapshot {sqlite3_snapshot8315,401000
  unsigned char hidden[48];hidden8316,401034
} sqlite3_snapshot;sqlite3_snapshot8317,401062
# undef doubledouble8473,407542
#define _SQLITE3RTREE_H__SQLITE3RTREE_H_8496,408102
typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;sqlite3_rtree_geometry8503,408169
typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;sqlite3_rtree_query_info8504,408231
  typedef sqlite3_int64 sqlite3_rtree_dbl;sqlite3_rtree_dbl8510,408438
  typedef double sqlite3_rtree_dbl;sqlite3_rtree_dbl8512,408487
struct sqlite3_rtree_geometry {sqlite3_rtree_geometry8533,409053
  void *pContext;                 /* Copy of pContext passed to s_r_g_c() */pContext8534,409085
  int nParam;                     /* Size of array aParam[] */nParam8535,409162
  sqlite3_rtree_dbl *aParam;      /* Parameters passed to SQL geom function */aParam8536,409225
  void *pUser;                    /* Callback implementation user data */pUser8537,409304
  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */xDelUser8538,409378
struct sqlite3_rtree_query_info {sqlite3_rtree_query_info8565,410185
  void *pContext;                   /* pContext from when function registered */pContext8566,410219
  int nParam;                       /* Number of function parameters */nParam8567,410300
  sqlite3_rtree_dbl *aParam;        /* value of function parameters */aParam8568,410372
  void *pUser;                      /* callback can use this, if desired */pUser8569,410443
  void (*xDelUser)(void*);          /* function to free pUser */xDelUser8570,410519
  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check */aCoord8571,410584
  unsigned int *anQueue;            /* Number of pending entries in the queue */anQueue8572,410664
  int nCoord;                       /* Number of coordinates */nCoord8573,410745
  int iLevel;                       /* Level of current node or entry */iLevel8574,410809
  int mxLevel;                      /* The largest iLevel value in the tree */mxLevel8575,410882
  sqlite3_int64 iRowid;             /* Rowid for current entry */iRowid8576,410961
  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */rParentScore8577,411027
  int eParentWithin;                /* Visibility of parent node */eParentWithin8578,411090
  int eWithin;                      /* OUT: Visiblity */eWithin8579,411158
  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */rScore8580,411215
  sqlite3_value **apSqlParam;       /* Original SQL values of parameters */apSqlParam8582,411351
#define NOT_WITHIN NOT_WITHIN8588,411507
#define PARTLY_WITHIN PARTLY_WITHIN8589,411584
#define FULLY_WITHIN FULLY_WITHIN8590,411658
#define __SQLITESESSION_H_ __SQLITESESSION_H_8603,412003
typedef struct sqlite3_session sqlite3_session;sqlite3_session8616,412167
typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;sqlite3_changeset_iter8621,412261
typedef struct sqlite3_changegroup sqlite3_changegroup;sqlite3_changegroup9332,445041
#define SQLITE_CHANGESET_DATA SQLITE_CHANGESET_DATA9696,463056
#define SQLITE_CHANGESET_NOTFOUND SQLITE_CHANGESET_NOTFOUND9697,463095
#define SQLITE_CHANGESET_CONFLICT SQLITE_CHANGESET_CONFLICT9698,463134
#define SQLITE_CHANGESET_CONSTRAINT SQLITE_CHANGESET_CONSTRAINT9699,463173
#define SQLITE_CHANGESET_FOREIGN_KEY SQLITE_CHANGESET_FOREIGN_KEY9700,463212
#define SQLITE_CHANGESET_OMIT SQLITE_CHANGESET_OMIT9733,464649
#define SQLITE_CHANGESET_REPLACE SQLITE_CHANGESET_REPLACE9734,464687
#define SQLITE_CHANGESET_ABORT SQLITE_CHANGESET_ABORT9735,464725
#define _FTS5_H_FTS5_H9912,471744
typedef struct Fts5ExtensionApi Fts5ExtensionApi;Fts5ExtensionApi9926,472036
typedef struct Fts5Context Fts5Context;Fts5Context9927,472086
typedef struct Fts5PhraseIter Fts5PhraseIter;Fts5PhraseIter9928,472126
typedef void (*fts5_extension_function)(fts5_extension_function9930,472173
struct Fts5PhraseIter {Fts5PhraseIter9938,472586
  const unsigned char *a;a9939,472610
  const unsigned char *b;b9940,472636
struct Fts5ExtensionApi {Fts5ExtensionApi10158,482297
  int iVersion;                   /* Currently always set to 3 */iVersion10159,482323
  void *(*xUserData)(Fts5Context*);xUserData10161,482390
  int (*xColumnCount)(Fts5Context*);xColumnCount10163,482427
  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);xRowCount10164,482464
  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);xColumnTotalSize10165,482520
  int (*xTokenize)(Fts5Context*, xTokenize10167,482596
  int (*xPhraseCount)(Fts5Context*);xPhraseCount10173,482839
  int (*xPhraseSize)(Fts5Context*, int iPhrase);xPhraseSize10174,482876
  int (*xInstCount)(Fts5Context*, int *pnInst);xInstCount10176,482926
  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);xInst10177,482974
  sqlite3_int64 (*xRowid)(Fts5Context*);xRowid10179,483054
  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);xColumnText10180,483095
  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);xColumnSize10181,483167
  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,xQueryPhrase10183,483228
  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));xSetAuxdata10186,483354
  void *(*xGetAuxdata)(Fts5Context*, int bClear);xGetAuxdata10187,483425
  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);xPhraseFirst10189,483476
  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);xPhraseNext10190,483555
  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);xPhraseFirstColumn10192,483634
  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);xPhraseNextColumn10193,483713
typedef struct Fts5Tokenizer Fts5Tokenizer;Fts5Tokenizer10392,494012
typedef struct fts5_tokenizer fts5_tokenizer;fts5_tokenizer10393,494056
struct fts5_tokenizer {fts5_tokenizer10394,494102
  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);xCreate10395,494126
  void (*xDelete)(Fts5Tokenizer*);xDelete10396,494204
  int (*xTokenize)(Fts5Tokenizer*, xTokenize10397,494239
#define FTS5_TOKENIZE_QUERY FTS5_TOKENIZE_QUERY10413,494910
#define FTS5_TOKENIZE_PREFIX FTS5_TOKENIZE_PREFIX10414,494949
#define FTS5_TOKENIZE_DOCUMENT FTS5_TOKENIZE_DOCUMENT10415,494988
#define FTS5_TOKENIZE_AUX FTS5_TOKENIZE_AUX10416,495027
#define FTS5_TOKEN_COLOCATED FTS5_TOKEN_COLOCATED10420,495201
typedef struct fts5_api fts5_api;fts5_api10429,495501
struct fts5_api {fts5_api10430,495535
  int iVersion;                   /* Currently always set to 2 */iVersion10431,495553
  int (*xCreateTokenizer)(xCreateTokenizer10434,495651
  int (*xFindTokenizer)(xFindTokenizer10443,495842
  int (*xCreateFunction)(xCreateFunction10451,496009
