
sqlite3.h,44462
#define SQLITE3_HSQLITE3_H34,1510
# define SQLITE_EXTERN SQLITE_EXTERN49,1787
# define SQLITE_APISQLITE_API52,1843
# define SQLITE_CDECLSQLITE_CDECL55,1891
# define SQLITE_APICALLSQLITE_APICALL58,1943
# define SQLITE_STDCALL SQLITE_STDCALL61,1997
# define SQLITE_CALLBACKSQLITE_CALLBACK64,2067
# define SQLITE_SYSAPISQLITE_SYSAPI67,2121
#define SQLITE_DEPRECATEDSQLITE_DEPRECATED83,2791
#define SQLITE_EXPERIMENTALSQLITE_EXPERIMENTAL84,2817
# undef SQLITE_VERSIONSQLITE_VERSION90,2945
# undef SQLITE_VERSION_NUMBERSQLITE_VERSION_NUMBER93,3004
#define SQLITE_VERSION SQLITE_VERSION124,4428
#define SQLITE_VERSION_NUMBER SQLITE_VERSION_NUMBER125,4467
#define SQLITE_SOURCE_ID SQLITE_SOURCE_ID126,4505
SQLITE_API SQLITE_EXTERN const char sqlite3_version[];sqlite3_version158,6084
typedef struct sqlite3 sqlite3;sqlite3242,9937
  typedef SQLITE_INT64_TYPE sqlite_int64;sqlite_int64261,10660
  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;sqlite_uint64262,10702
  typedef __int64 sqlite_int64;sqlite_int64264,10803
  typedef unsigned __int64 sqlite_uint64;sqlite_uint64265,10835
  typedef long long int sqlite_int64;sqlite_int64267,10883
  typedef unsigned long long int sqlite_uint64;sqlite_uint64268,10921
typedef sqlite_int64 sqlite3_int64;sqlite3_int64270,10976
typedef sqlite_uint64 sqlite3_uint64;sqlite3_uint64271,11012
# define double double278,11200
typedef int (*sqlite3_callback)(void*,int,char**, char**);sqlite3_callback331,13614
#define SQLITE_OK SQLITE_OK414,17562
#define SQLITE_ERROR SQLITE_ERROR416,17649
#define SQLITE_INTERNAL SQLITE_INTERNAL417,17717
#define SQLITE_PERM SQLITE_PERM418,17786
#define SQLITE_ABORT SQLITE_ABORT419,17849
#define SQLITE_BUSY SQLITE_BUSY420,17923
#define SQLITE_LOCKED SQLITE_LOCKED421,17989
#define SQLITE_NOMEM SQLITE_NOMEM422,18061
#define SQLITE_READONLY SQLITE_READONLY423,18117
#define SQLITE_INTERRUPT SQLITE_INTERRUPT424,18192
#define SQLITE_IOERR SQLITE_IOERR425,18273
#define SQLITE_CORRUPT SQLITE_CORRUPT426,18348
#define SQLITE_NOTFOUND SQLITE_NOTFOUND427,18423
#define SQLITE_FULL SQLITE_FULL428,18502
#define SQLITE_CANTOPEN SQLITE_CANTOPEN429,18582
#define SQLITE_PROTOCOL SQLITE_PROTOCOL430,18653
#define SQLITE_EMPTY SQLITE_EMPTY431,18720
#define SQLITE_SCHEMA SQLITE_SCHEMA432,18776
#define SQLITE_TOOBIG SQLITE_TOOBIG433,18842
#define SQLITE_CONSTRAINT SQLITE_CONSTRAINT434,18914
#define SQLITE_MISMATCH SQLITE_MISMATCH435,18986
#define SQLITE_MISUSE SQLITE_MISUSE436,19043
#define SQLITE_NOLFS SQLITE_NOLFS437,19106
#define SQLITE_AUTH SQLITE_AUTH438,19183
#define SQLITE_FORMAT SQLITE_FORMAT439,19242
#define SQLITE_RANGE SQLITE_RANGE440,19312
#define SQLITE_NOTADB SQLITE_NOTADB441,19393
#define SQLITE_NOTICE SQLITE_NOTICE442,19471
#define SQLITE_WARNING SQLITE_WARNING443,19542
#define SQLITE_ROW SQLITE_ROW444,19608
#define SQLITE_DONE SQLITE_DONE445,19683
#define SQLITE_IOERR_READ SQLITE_IOERR_READ465,20607
#define SQLITE_IOERR_SHORT_READ SQLITE_IOERR_SHORT_READ466,20670
#define SQLITE_IOERR_WRITE SQLITE_IOERR_WRITE467,20733
#define SQLITE_IOERR_FSYNC SQLITE_IOERR_FSYNC468,20796
#define SQLITE_IOERR_DIR_FSYNC SQLITE_IOERR_DIR_FSYNC469,20859
#define SQLITE_IOERR_TRUNCATE SQLITE_IOERR_TRUNCATE470,20922
#define SQLITE_IOERR_FSTAT SQLITE_IOERR_FSTAT471,20985
#define SQLITE_IOERR_UNLOCK SQLITE_IOERR_UNLOCK472,21048
#define SQLITE_IOERR_RDLOCK SQLITE_IOERR_RDLOCK473,21111
#define SQLITE_IOERR_DELETE SQLITE_IOERR_DELETE474,21174
#define SQLITE_IOERR_BLOCKED SQLITE_IOERR_BLOCKED475,21238
#define SQLITE_IOERR_NOMEM SQLITE_IOERR_NOMEM476,21302
#define SQLITE_IOERR_ACCESS SQLITE_IOERR_ACCESS477,21366
#define SQLITE_IOERR_CHECKRESERVEDLOCK SQLITE_IOERR_CHECKRESERVEDLOCK478,21430
#define SQLITE_IOERR_LOCK SQLITE_IOERR_LOCK479,21494
#define SQLITE_IOERR_CLOSE SQLITE_IOERR_CLOSE480,21558
#define SQLITE_IOERR_DIR_CLOSE SQLITE_IOERR_DIR_CLOSE481,21622
#define SQLITE_IOERR_SHMOPEN SQLITE_IOERR_SHMOPEN482,21686
#define SQLITE_IOERR_SHMSIZE SQLITE_IOERR_SHMSIZE483,21750
#define SQLITE_IOERR_SHMLOCK SQLITE_IOERR_SHMLOCK484,21814
#define SQLITE_IOERR_SHMMAP SQLITE_IOERR_SHMMAP485,21878
#define SQLITE_IOERR_SEEK SQLITE_IOERR_SEEK486,21942
#define SQLITE_IOERR_DELETE_NOENT SQLITE_IOERR_DELETE_NOENT487,22006
#define SQLITE_IOERR_MMAP SQLITE_IOERR_MMAP488,22070
#define SQLITE_IOERR_GETTEMPPATH SQLITE_IOERR_GETTEMPPATH489,22134
#define SQLITE_IOERR_CONVPATH SQLITE_IOERR_CONVPATH490,22198
#define SQLITE_IOERR_VNODE SQLITE_IOERR_VNODE491,22262
#define SQLITE_IOERR_AUTH SQLITE_IOERR_AUTH492,22326
#define SQLITE_LOCKED_SHAREDCACHE SQLITE_LOCKED_SHAREDCACHE493,22390
#define SQLITE_BUSY_RECOVERY SQLITE_BUSY_RECOVERY494,22455
#define SQLITE_BUSY_SNAPSHOT SQLITE_BUSY_SNAPSHOT495,22520
#define SQLITE_CANTOPEN_NOTEMPDIR SQLITE_CANTOPEN_NOTEMPDIR496,22585
#define SQLITE_CANTOPEN_ISDIR SQLITE_CANTOPEN_ISDIR497,22651
#define SQLITE_CANTOPEN_FULLPATH SQLITE_CANTOPEN_FULLPATH498,22717
#define SQLITE_CANTOPEN_CONVPATH SQLITE_CANTOPEN_CONVPATH499,22783
#define SQLITE_CORRUPT_VTAB SQLITE_CORRUPT_VTAB500,22849
#define SQLITE_READONLY_RECOVERY SQLITE_READONLY_RECOVERY501,22914
#define SQLITE_READONLY_CANTLOCK SQLITE_READONLY_CANTLOCK502,22980
#define SQLITE_READONLY_ROLLBACK SQLITE_READONLY_ROLLBACK503,23046
#define SQLITE_READONLY_DBMOVED SQLITE_READONLY_DBMOVED504,23112
#define SQLITE_ABORT_ROLLBACK SQLITE_ABORT_ROLLBACK505,23178
#define SQLITE_CONSTRAINT_CHECK SQLITE_CONSTRAINT_CHECK506,23241
#define SQLITE_CONSTRAINT_COMMITHOOK SQLITE_CONSTRAINT_COMMITHOOK507,23309
#define SQLITE_CONSTRAINT_FOREIGNKEY SQLITE_CONSTRAINT_FOREIGNKEY508,23377
#define SQLITE_CONSTRAINT_FUNCTION SQLITE_CONSTRAINT_FUNCTION509,23445
#define SQLITE_CONSTRAINT_NOTNULL SQLITE_CONSTRAINT_NOTNULL510,23513
#define SQLITE_CONSTRAINT_PRIMARYKEY SQLITE_CONSTRAINT_PRIMARYKEY511,23581
#define SQLITE_CONSTRAINT_TRIGGER SQLITE_CONSTRAINT_TRIGGER512,23649
#define SQLITE_CONSTRAINT_UNIQUE SQLITE_CONSTRAINT_UNIQUE513,23717
#define SQLITE_CONSTRAINT_VTAB SQLITE_CONSTRAINT_VTAB514,23785
#define SQLITE_CONSTRAINT_ROWID SQLITE_CONSTRAINT_ROWID515,23853
#define SQLITE_NOTICE_RECOVER_WAL SQLITE_NOTICE_RECOVER_WAL516,23921
#define SQLITE_NOTICE_RECOVER_ROLLBACK SQLITE_NOTICE_RECOVER_ROLLBACK517,23985
#define SQLITE_WARNING_AUTOINDEX SQLITE_WARNING_AUTOINDEX518,24049
#define SQLITE_AUTH_USER SQLITE_AUTH_USER519,24114
#define SQLITE_OK_LOAD_PERMANENTLY SQLITE_OK_LOAD_PERMANENTLY520,24176
#define SQLITE_OPEN_READONLY SQLITE_OPEN_READONLY529,24455
#define SQLITE_OPEN_READWRITE SQLITE_OPEN_READWRITE530,24535
#define SQLITE_OPEN_CREATE SQLITE_OPEN_CREATE531,24615
#define SQLITE_OPEN_DELETEONCLOSE SQLITE_OPEN_DELETEONCLOSE532,24695
#define SQLITE_OPEN_EXCLUSIVE SQLITE_OPEN_EXCLUSIVE533,24759
#define SQLITE_OPEN_AUTOPROXY SQLITE_OPEN_AUTOPROXY534,24823
#define SQLITE_OPEN_URI SQLITE_OPEN_URI535,24887
#define SQLITE_OPEN_MEMORY SQLITE_OPEN_MEMORY536,24967
#define SQLITE_OPEN_MAIN_DB SQLITE_OPEN_MAIN_DB537,25047
#define SQLITE_OPEN_TEMP_DB SQLITE_OPEN_TEMP_DB538,25111
#define SQLITE_OPEN_TRANSIENT_DB SQLITE_OPEN_TRANSIENT_DB539,25175
#define SQLITE_OPEN_MAIN_JOURNAL SQLITE_OPEN_MAIN_JOURNAL540,25239
#define SQLITE_OPEN_TEMP_JOURNAL SQLITE_OPEN_TEMP_JOURNAL541,25303
#define SQLITE_OPEN_SUBJOURNAL SQLITE_OPEN_SUBJOURNAL542,25367
#define SQLITE_OPEN_MASTER_JOURNAL SQLITE_OPEN_MASTER_JOURNAL543,25431
#define SQLITE_OPEN_NOMUTEX SQLITE_OPEN_NOMUTEX544,25495
#define SQLITE_OPEN_FULLMUTEX SQLITE_OPEN_FULLMUTEX545,25575
#define SQLITE_OPEN_SHAREDCACHE SQLITE_OPEN_SHAREDCACHE546,25655
#define SQLITE_OPEN_PRIVATECACHE SQLITE_OPEN_PRIVATECACHE547,25735
#define SQLITE_OPEN_WAL SQLITE_OPEN_WAL548,25815
#define SQLITE_IOCAP_ATOMIC SQLITE_IOCAP_ATOMIC580,27356
#define SQLITE_IOCAP_ATOMIC512 SQLITE_IOCAP_ATOMIC512581,27411
#define SQLITE_IOCAP_ATOMIC1K SQLITE_IOCAP_ATOMIC1K582,27466
#define SQLITE_IOCAP_ATOMIC2K SQLITE_IOCAP_ATOMIC2K583,27521
#define SQLITE_IOCAP_ATOMIC4K SQLITE_IOCAP_ATOMIC4K584,27576
#define SQLITE_IOCAP_ATOMIC8K SQLITE_IOCAP_ATOMIC8K585,27631
#define SQLITE_IOCAP_ATOMIC16K SQLITE_IOCAP_ATOMIC16K586,27686
#define SQLITE_IOCAP_ATOMIC32K SQLITE_IOCAP_ATOMIC32K587,27741
#define SQLITE_IOCAP_ATOMIC64K SQLITE_IOCAP_ATOMIC64K588,27796
#define SQLITE_IOCAP_SAFE_APPEND SQLITE_IOCAP_SAFE_APPEND589,27851
#define SQLITE_IOCAP_SEQUENTIAL SQLITE_IOCAP_SEQUENTIAL590,27906
#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN591,27961
#define SQLITE_IOCAP_POWERSAFE_OVERWRITE SQLITE_IOCAP_POWERSAFE_OVERWRITE592,28016
#define SQLITE_IOCAP_IMMUTABLE SQLITE_IOCAP_IMMUTABLE593,28071
#define SQLITE_LOCK_NONE SQLITE_LOCK_NONE602,28331
#define SQLITE_LOCK_SHARED SQLITE_LOCK_SHARED603,28367
#define SQLITE_LOCK_RESERVED SQLITE_LOCK_RESERVED604,28403
#define SQLITE_LOCK_PENDING SQLITE_LOCK_PENDING605,28439
#define SQLITE_LOCK_EXCLUSIVE SQLITE_LOCK_EXCLUSIVE606,28475
#define SQLITE_SYNC_NORMAL SQLITE_SYNC_NORMAL634,29814
#define SQLITE_SYNC_FULL SQLITE_SYNC_FULL635,29856
#define SQLITE_SYNC_DATAONLY SQLITE_SYNC_DATAONLY636,29898
typedef struct sqlite3_file sqlite3_file;sqlite3_file649,30368
struct sqlite3_file {sqlite3_file650,30410
  const struct sqlite3_io_methods *pMethods;  /* Methods for an open file */pMethods651,30432
typedef struct sqlite3_io_methods sqlite3_io_methods;sqlite3_io_methods744,34721
struct sqlite3_io_methods {sqlite3_io_methods745,34775
  int iVersion;iVersion746,34803
  int (*xClose)(sqlite3_file*);xClose747,34819
  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);xRead748,34851
  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);xWrite749,34920
  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);xTruncate750,34996
  int (*xSync)(sqlite3_file*, int flags);xSync751,35051
  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);xFileSize752,35093
  int (*xLock)(sqlite3_file*, int);xLock753,35150
  int (*xUnlock)(sqlite3_file*, int);xUnlock754,35186
  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);xCheckReservedLock755,35224
  int (*xFileControl)(sqlite3_file*, int op, void *pArg);xFileControl756,35282
  int (*xSectorSize)(sqlite3_file*);xSectorSize757,35340
  int (*xDeviceCharacteristics)(sqlite3_file*);xDeviceCharacteristics758,35377
  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);xShmMap760,35471
  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);xShmLock761,35545
  void (*xShmBarrier)(sqlite3_file*);xShmBarrier762,35609
  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);xShmUnmap763,35647
  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);xFetch765,35744
  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);xUnfetch766,35818
#define SQLITE_FCNTL_LOCKSTATE SQLITE_FCNTL_LOCKSTATE1010,49324
#define SQLITE_FCNTL_GET_LOCKPROXYFILE SQLITE_FCNTL_GET_LOCKPROXYFILE1011,49371
#define SQLITE_FCNTL_SET_LOCKPROXYFILE SQLITE_FCNTL_SET_LOCKPROXYFILE1012,49418
#define SQLITE_FCNTL_LAST_ERRNO SQLITE_FCNTL_LAST_ERRNO1013,49465
#define SQLITE_FCNTL_SIZE_HINT SQLITE_FCNTL_SIZE_HINT1014,49512
#define SQLITE_FCNTL_CHUNK_SIZE SQLITE_FCNTL_CHUNK_SIZE1015,49559
#define SQLITE_FCNTL_FILE_POINTER SQLITE_FCNTL_FILE_POINTER1016,49606
#define SQLITE_FCNTL_SYNC_OMITTED SQLITE_FCNTL_SYNC_OMITTED1017,49653
#define SQLITE_FCNTL_WIN32_AV_RETRY SQLITE_FCNTL_WIN32_AV_RETRY1018,49700
#define SQLITE_FCNTL_PERSIST_WAL SQLITE_FCNTL_PERSIST_WAL1019,49747
#define SQLITE_FCNTL_OVERWRITE SQLITE_FCNTL_OVERWRITE1020,49794
#define SQLITE_FCNTL_VFSNAME SQLITE_FCNTL_VFSNAME1021,49841
#define SQLITE_FCNTL_POWERSAFE_OVERWRITE SQLITE_FCNTL_POWERSAFE_OVERWRITE1022,49888
#define SQLITE_FCNTL_PRAGMA SQLITE_FCNTL_PRAGMA1023,49935
#define SQLITE_FCNTL_BUSYHANDLER SQLITE_FCNTL_BUSYHANDLER1024,49982
#define SQLITE_FCNTL_TEMPFILENAME SQLITE_FCNTL_TEMPFILENAME1025,50029
#define SQLITE_FCNTL_MMAP_SIZE SQLITE_FCNTL_MMAP_SIZE1026,50076
#define SQLITE_FCNTL_TRACE SQLITE_FCNTL_TRACE1027,50123
#define SQLITE_FCNTL_HAS_MOVED SQLITE_FCNTL_HAS_MOVED1028,50170
#define SQLITE_FCNTL_SYNC SQLITE_FCNTL_SYNC1029,50217
#define SQLITE_FCNTL_COMMIT_PHASETWO SQLITE_FCNTL_COMMIT_PHASETWO1030,50264
#define SQLITE_FCNTL_WIN32_SET_HANDLE SQLITE_FCNTL_WIN32_SET_HANDLE1031,50311
#define SQLITE_FCNTL_WAL_BLOCK SQLITE_FCNTL_WAL_BLOCK1032,50358
#define SQLITE_FCNTL_ZIPVFS SQLITE_FCNTL_ZIPVFS1033,50405
#define SQLITE_FCNTL_RBU SQLITE_FCNTL_RBU1034,50452
#define SQLITE_FCNTL_VFS_POINTER SQLITE_FCNTL_VFS_POINTER1035,50499
#define SQLITE_FCNTL_JOURNAL_POINTER SQLITE_FCNTL_JOURNAL_POINTER1036,50546
#define SQLITE_FCNTL_WIN32_GET_HANDLE SQLITE_FCNTL_WIN32_GET_HANDLE1037,50593
#define SQLITE_GET_LOCKPROXYFILE SQLITE_GET_LOCKPROXYFILE1040,50664
#define SQLITE_SET_LOCKPROXYFILE SQLITE_SET_LOCKPROXYFILE1041,50733
#define SQLITE_LAST_ERRNO SQLITE_LAST_ERRNO1042,50802
typedef struct sqlite3_mutex sqlite3_mutex;sqlite3_mutex1055,51211
typedef struct sqlite3_api_routines sqlite3_api_routines;sqlite3_api_routines1065,51540
typedef struct sqlite3_vfs sqlite3_vfs;sqlite3_vfs1224,59445
typedef void (*sqlite3_syscall_ptr)(void);sqlite3_syscall_ptr1225,59485
struct sqlite3_vfs {sqlite3_vfs1226,59528
  int iVersion;            /* Structure version number (currently 3) */iVersion1227,59549
  int szOsFile;            /* Size of subclassed sqlite3_file */szOsFile1228,59621
  int mxPathname;          /* Maximum file pathname length */mxPathname1229,59686
  sqlite3_vfs *pNext;      /* Next registered VFS */pNext1230,59748
  const char *zName;       /* Name of this virtual file system */zName1231,59801
  void *pAppData;          /* Pointer to application-specific data */pAppData1232,59867
  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,xOpen1233,59937
  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);xDelete1235,60043
  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);xAccess1236,60107
  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);xFullPathname1237,60183
  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);xDlOpen1238,60262
  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);xDlError1239,60319
  void (*xDlClose)(sqlite3_vfs*, void*);xDlClose1241,60447
  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);xRandomness1242,60488
  int (*xSleep)(sqlite3_vfs*, int microseconds);xSleep1243,60547
  int (*xCurrentTime)(sqlite3_vfs*, double*);xCurrentTime1244,60596
  int (*xGetLastError)(sqlite3_vfs*, int, char *);xGetLastError1245,60642
  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);xCurrentTimeInt641250,60836
  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);xSetSystemCall1255,61025
  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);xGetSystemCall1256,61104
  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);xNextSystemCall1257,61178
#define SQLITE_ACCESS_EXISTS SQLITE_ACCESS_EXISTS1285,62367
#define SQLITE_ACCESS_READWRITE SQLITE_ACCESS_READWRITE1286,62401
#define SQLITE_ACCESS_READ SQLITE_ACCESS_READ1287,62479
#define SQLITE_SHM_UNLOCK SQLITE_SHM_UNLOCK1311,63285
#define SQLITE_SHM_LOCK SQLITE_SHM_LOCK1312,63319
#define SQLITE_SHM_SHARED SQLITE_SHM_SHARED1313,63353
#define SQLITE_SHM_EXCLUSIVE SQLITE_SHM_EXCLUSIVE1314,63387
#define SQLITE_SHM_NLOCK SQLITE_SHM_NLOCK1324,63681
typedef struct sqlite3_mem_methods sqlite3_mem_methods;sqlite3_mem_methods1522,73534
struct sqlite3_mem_methods {sqlite3_mem_methods1523,73590
  void *(*xMalloc)(int);         /* Memory allocation function */xMalloc1524,73619
  void (*xFree)(void*);          /* Free a prior allocation */xFree1525,73685
  void *(*xRealloc)(void*,int);  /* Resize an allocation */xRealloc1526,73748
  int (*xSize)(void*);           /* Return the size of an allocation */xSize1527,73808
  int (*xRoundup)(int);          /* Round up request size to allocation size */xRoundup1528,73880
  int (*xInit)(void*);           /* Initialize the memory allocator */xInit1529,73960
  void (*xShutdown)(void*);      /* Deinitialize the memory allocator */xShutdown1530,74031
  void *pAppData;                /* Argument to xInit() and xShutdown() */pAppData1531,74104
#define SQLITE_CONFIG_SINGLETHREAD SQLITE_CONFIG_SINGLETHREAD1868,93147
#define SQLITE_CONFIG_MULTITHREAD SQLITE_CONFIG_MULTITHREAD1869,93196
#define SQLITE_CONFIG_SERIALIZED SQLITE_CONFIG_SERIALIZED1870,93245
#define SQLITE_CONFIG_MALLOC SQLITE_CONFIG_MALLOC1871,93294
#define SQLITE_CONFIG_GETMALLOC SQLITE_CONFIG_GETMALLOC1872,93360
#define SQLITE_CONFIG_SCRATCH SQLITE_CONFIG_SCRATCH1873,93426
#define SQLITE_CONFIG_PAGECACHE SQLITE_CONFIG_PAGECACHE1874,93492
#define SQLITE_CONFIG_HEAP SQLITE_CONFIG_HEAP1875,93558
#define SQLITE_CONFIG_MEMSTATUS SQLITE_CONFIG_MEMSTATUS1876,93629
#define SQLITE_CONFIG_MUTEX SQLITE_CONFIG_MUTEX1877,93682
#define SQLITE_CONFIG_GETMUTEX SQLITE_CONFIG_GETMUTEX1878,93750
#define SQLITE_CONFIG_LOOKASIDE SQLITE_CONFIG_LOOKASIDE1880,93885
#define SQLITE_CONFIG_PCACHE SQLITE_CONFIG_PCACHE1881,93938
#define SQLITE_CONFIG_GETPCACHE SQLITE_CONFIG_GETPCACHE1882,93989
#define SQLITE_CONFIG_LOG SQLITE_CONFIG_LOG1883,94040
#define SQLITE_CONFIG_URI SQLITE_CONFIG_URI1884,94098
#define SQLITE_CONFIG_PCACHE2 SQLITE_CONFIG_PCACHE21885,94147
#define SQLITE_CONFIG_GETPCACHE2 SQLITE_CONFIG_GETPCACHE21886,94217
#define SQLITE_CONFIG_COVERING_INDEX_SCAN SQLITE_CONFIG_COVERING_INDEX_SCAN1887,94287
#define SQLITE_CONFIG_SQLLOG SQLITE_CONFIG_SQLLOG1888,94343
#define SQLITE_CONFIG_MMAP_SIZE SQLITE_CONFIG_MMAP_SIZE1889,94403
#define SQLITE_CONFIG_WIN32_HEAPSIZE SQLITE_CONFIG_WIN32_HEAPSIZE1890,94477
#define SQLITE_CONFIG_PCACHE_HDRSZ SQLITE_CONFIG_PCACHE_HDRSZ1891,94539
#define SQLITE_CONFIG_PMASZ SQLITE_CONFIG_PMASZ1892,94600
#define SQLITE_CONFIG_STMTJRNL_SPILL SQLITE_CONFIG_STMTJRNL_SPILL1893,94671
#define SQLITE_DBCONFIG_MAINDBNAME SQLITE_DBCONFIG_MAINDBNAME1992,100155
#define SQLITE_DBCONFIG_LOOKASIDE SQLITE_DBCONFIG_LOOKASIDE1993,100224
#define SQLITE_DBCONFIG_ENABLE_FKEY SQLITE_DBCONFIG_ENABLE_FKEY1994,100295
#define SQLITE_DBCONFIG_ENABLE_TRIGGER SQLITE_DBCONFIG_ENABLE_TRIGGER1995,100361
#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER1996,100427
#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION1997,100493
#define SQLITE_DENY SQLITE_DENY2734,135035
#define SQLITE_IGNORE SQLITE_IGNORE2735,135105
#define SQLITE_CREATE_INDEX SQLITE_CREATE_INDEX2757,136230
#define SQLITE_CREATE_TABLE SQLITE_CREATE_TABLE2758,136309
#define SQLITE_CREATE_TEMP_INDEX SQLITE_CREATE_TEMP_INDEX2759,136388
#define SQLITE_CREATE_TEMP_TABLE SQLITE_CREATE_TEMP_TABLE2760,136467
#define SQLITE_CREATE_TEMP_TRIGGER SQLITE_CREATE_TEMP_TRIGGER2761,136546
#define SQLITE_CREATE_TEMP_VIEW SQLITE_CREATE_TEMP_VIEW2762,136625
#define SQLITE_CREATE_TRIGGER SQLITE_CREATE_TRIGGER2763,136704
#define SQLITE_CREATE_VIEW SQLITE_CREATE_VIEW2764,136783
#define SQLITE_DELETE SQLITE_DELETE2765,136862
#define SQLITE_DROP_INDEX SQLITE_DROP_INDEX2766,136941
#define SQLITE_DROP_TABLE SQLITE_DROP_TABLE2767,137020
#define SQLITE_DROP_TEMP_INDEX SQLITE_DROP_TEMP_INDEX2768,137099
#define SQLITE_DROP_TEMP_TABLE SQLITE_DROP_TEMP_TABLE2769,137178
#define SQLITE_DROP_TEMP_TRIGGER SQLITE_DROP_TEMP_TRIGGER2770,137257
#define SQLITE_DROP_TEMP_VIEW SQLITE_DROP_TEMP_VIEW2771,137336
#define SQLITE_DROP_TRIGGER SQLITE_DROP_TRIGGER2772,137415
#define SQLITE_DROP_VIEW SQLITE_DROP_VIEW2773,137494
#define SQLITE_INSERT SQLITE_INSERT2774,137573
#define SQLITE_PRAGMA SQLITE_PRAGMA2775,137652
#define SQLITE_READ SQLITE_READ2776,137731
#define SQLITE_SELECT SQLITE_SELECT2777,137810
#define SQLITE_TRANSACTION SQLITE_TRANSACTION2778,137889
#define SQLITE_UPDATE SQLITE_UPDATE2779,137968
#define SQLITE_ATTACH SQLITE_ATTACH2780,138047
#define SQLITE_DETACH SQLITE_DETACH2781,138126
#define SQLITE_ALTER_TABLE SQLITE_ALTER_TABLE2782,138205
#define SQLITE_REINDEX SQLITE_REINDEX2783,138284
#define SQLITE_ANALYZE SQLITE_ANALYZE2784,138363
#define SQLITE_CREATE_VTABLE SQLITE_CREATE_VTABLE2785,138442
#define SQLITE_DROP_VTABLE SQLITE_DROP_VTABLE2786,138521
#define SQLITE_FUNCTION SQLITE_FUNCTION2787,138600
#define SQLITE_SAVEPOINT SQLITE_SAVEPOINT2788,138679
#define SQLITE_COPY SQLITE_COPY2789,138758
#define SQLITE_RECURSIVE SQLITE_RECURSIVE2790,138820
#define SQLITE_TRACE_STMT SQLITE_TRACE_STMT2881,143228
#define SQLITE_TRACE_PROFILE SQLITE_TRACE_PROFILE2882,143265
#define SQLITE_TRACE_ROW SQLITE_TRACE_ROW2883,143302
#define SQLITE_TRACE_CLOSE SQLITE_TRACE_CLOSE2884,143339
typedef struct sqlite3_stmt sqlite3_stmt;sqlite3_stmt3313,164893
#define SQLITE_LIMIT_LENGTH SQLITE_LIMIT_LENGTH3413,169392
#define SQLITE_LIMIT_SQL_LENGTH SQLITE_LIMIT_SQL_LENGTH3414,169441
#define SQLITE_LIMIT_COLUMN SQLITE_LIMIT_COLUMN3415,169490
#define SQLITE_LIMIT_EXPR_DEPTH SQLITE_LIMIT_EXPR_DEPTH3416,169539
#define SQLITE_LIMIT_COMPOUND_SELECT SQLITE_LIMIT_COMPOUND_SELECT3417,169588
#define SQLITE_LIMIT_VDBE_OP SQLITE_LIMIT_VDBE_OP3418,169637
#define SQLITE_LIMIT_FUNCTION_ARG SQLITE_LIMIT_FUNCTION_ARG3419,169686
#define SQLITE_LIMIT_ATTACHED SQLITE_LIMIT_ATTACHED3420,169735
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH SQLITE_LIMIT_LIKE_PATTERN_LENGTH3421,169784
#define SQLITE_LIMIT_VARIABLE_NUMBER SQLITE_LIMIT_VARIABLE_NUMBER3422,169833
#define SQLITE_LIMIT_TRIGGER_DEPTH SQLITE_LIMIT_TRIGGER_DEPTH3423,169882
#define SQLITE_LIMIT_WORKER_THREADS SQLITE_LIMIT_WORKER_THREADS3424,169931
typedef struct Mem sqlite3_value;sqlite3_value3662,181413
typedef struct sqlite3_context sqlite3_context;sqlite3_context3676,181995
#define SQLITE_INTEGER SQLITE_INTEGER4127,203023
#define SQLITE_FLOAT SQLITE_FLOAT4128,203049
#define SQLITE_BLOB SQLITE_BLOB4129,203075
#define SQLITE_NULL SQLITE_NULL4130,203101
# undef SQLITE_TEXTSQLITE_TEXT4132,203146
# define SQLITE_TEXT SQLITE_TEXT4134,203172
#define SQLITE3_TEXT SQLITE3_TEXT4136,203206
#define SQLITE_UTF8 SQLITE_UTF84496,220863
#define SQLITE_UTF16LE SQLITE_UTF16LE4497,220923
#define SQLITE_UTF16BE SQLITE_UTF16BE4498,220983
#define SQLITE_UTF16 SQLITE_UTF164499,221043
#define SQLITE_ANY SQLITE_ANY4500,221106
#define SQLITE_UTF16_ALIGNED SQLITE_UTF16_ALIGNED4501,221158
#define SQLITE_DETERMINISTIC SQLITE_DETERMINISTIC4511,221487
typedef void (*sqlite3_destructor_type)(void*);sqlite3_destructor_type4767,233338
#define SQLITE_STATIC SQLITE_STATIC4768,233386
#define SQLITE_TRANSIENT SQLITE_TRANSIENT4769,233442
SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;sqlite3_temp_directory5194,253115
SQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;sqlite3_data_directory5231,254951
typedef struct sqlite3_vtab sqlite3_vtab;sqlite3_vtab5777,279169
typedef struct sqlite3_index_info sqlite3_index_info;sqlite3_index_info5778,279211
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;sqlite3_vtab_cursor5779,279265
typedef struct sqlite3_module sqlite3_module;sqlite3_module5780,279321
struct sqlite3_module {sqlite3_module5798,280073
  int iVersion;iVersion5799,280097
  int (*xCreate)(sqlite3*, void *pAux,xCreate5800,280113
  int (*xConnect)(sqlite3*, void *pAux,xConnect5803,280248
  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);xBestIndex5806,280384
  int (*xDisconnect)(sqlite3_vtab *pVTab);xDisconnect5807,280447
  int (*xDestroy)(sqlite3_vtab *pVTab);xDestroy5808,280490
  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);xOpen5809,280530
  int (*xClose)(sqlite3_vtab_cursor*);xClose5810,280599
  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,xFilter5811,280638
  int (*xNext)(sqlite3_vtab_cursor*);xNext5813,280758
  int (*xEof)(sqlite3_vtab_cursor*);xEof5814,280796
  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);xColumn5815,280833
  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);xRowid5816,280896
  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);xUpdate5817,280958
  int (*xBegin)(sqlite3_vtab *pVTab);xBegin5818,281032
  int (*xSync)(sqlite3_vtab *pVTab);xSync5819,281070
  int (*xCommit)(sqlite3_vtab *pVTab);xCommit5820,281107
  int (*xRollback)(sqlite3_vtab *pVTab);xRollback5821,281146
  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,xFindFunction5822,281187
  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);xRename5825,281376
  int (*xSavepoint)(sqlite3_vtab *pVTab, int);xSavepoint5828,281554
  int (*xRelease)(sqlite3_vtab *pVTab, int);xRelease5829,281601
  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);xRollbackTo5830,281646
struct sqlite3_index_info {sqlite3_index_info5929,286792
  int nConstraint;           /* Number of entries in aConstraint */nConstraint5931,286835
  struct sqlite3_index_constraint {sqlite3_index_constraint5932,286903
     int iColumn;              /* Column constrained.  -1 for ROWID */iColumn5933,286939
     unsigned char op;         /* Constraint operator */op5934,287010
     unsigned char usable;     /* True if this constraint is usable */usable5935,287067
     int iTermOffset;          /* Used internally - xBestIndex should ignore */iTermOffset5936,287138
  } *aConstraint;            /* Table of WHERE clause constraints */aConstraint5937,287218
  int nOrderBy;              /* Number of terms in the ORDER BY clause */nOrderBy5938,287287
  struct sqlite3_index_orderby {sqlite3_index_orderby5939,287361
     int iColumn;              /* Column number */iColumn5940,287394
     unsigned char desc;       /* True for DESC.  False for ASC. */desc5941,287445
  } *aOrderBy;               /* The ORDER BY clause */aOrderBy5942,287513
  struct sqlite3_index_constraint_usage {sqlite3_index_constraint_usage5944,287584
    int argvIndex;           /* if >0, constraint is part of argv to xFilter */argvIndex5945,287626
    unsigned char omit;      /* Do not code a test for this constraint */omit5946,287706
  } *aConstraintUsage;aConstraintUsage5947,287780
  int idxNum;                /* Number used to identify the index */idxNum5948,287803
  char *idxStr;              /* String, possibly obtained from sqlite3_malloc */idxStr5949,287872
  int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */needToFreeIdxStr5950,287953
  int orderByConsumed;       /* True if output is already ordered */orderByConsumed5951,288029
  double estimatedCost;           /* Estimated cost of using this index */estimatedCost5952,288098
  sqlite3_int64 estimatedRows;    /* Estimated number of rows returned */estimatedRows5954,288239
  int idxFlags;              /* Mask of SQLITE_INDEX_SCAN_* flags */idxFlags5956,288379
  sqlite3_uint64 colUsed;    /* Input: Mask of columns used by statement */colUsed5958,288515
#define SQLITE_INDEX_SCAN_UNIQUE SQLITE_INDEX_SCAN_UNIQUE5964,288639
#define SQLITE_INDEX_CONSTRAINT_EQ SQLITE_INDEX_CONSTRAINT_EQ5974,289012
#define SQLITE_INDEX_CONSTRAINT_GT SQLITE_INDEX_CONSTRAINT_GT5975,289054
#define SQLITE_INDEX_CONSTRAINT_LE SQLITE_INDEX_CONSTRAINT_LE5976,289096
#define SQLITE_INDEX_CONSTRAINT_LT SQLITE_INDEX_CONSTRAINT_LT5977,289138
#define SQLITE_INDEX_CONSTRAINT_GE SQLITE_INDEX_CONSTRAINT_GE5978,289180
#define SQLITE_INDEX_CONSTRAINT_MATCH SQLITE_INDEX_CONSTRAINT_MATCH5979,289222
#define SQLITE_INDEX_CONSTRAINT_LIKE SQLITE_INDEX_CONSTRAINT_LIKE5980,289264
#define SQLITE_INDEX_CONSTRAINT_GLOB SQLITE_INDEX_CONSTRAINT_GLOB5981,289306
#define SQLITE_INDEX_CONSTRAINT_REGEXP SQLITE_INDEX_CONSTRAINT_REGEXP5982,289348
struct sqlite3_vtab {sqlite3_vtab6042,292165
  const sqlite3_module *pModule;  /* The module for this virtual table */pModule6043,292187
  int nRef;                       /* Number of open cursors */nRef6044,292261
  char *zErrMsg;                  /* Error message from sqlite3_mprintf() */zErrMsg6045,292324
struct sqlite3_vtab_cursor {sqlite3_vtab_cursor6066,293262
  sqlite3_vtab *pVtab;      /* Virtual table of this cursor */pVtab6067,293291
typedef struct sqlite3_blob sqlite3_blob;sqlite3_blob6122,295572
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;sqlite3_mutex_methods6560,315751
struct sqlite3_mutex_methods {sqlite3_mutex_methods6561,315811
  int (*xMutexInit)(void);xMutexInit6562,315842
  int (*xMutexEnd)(void);xMutexEnd6563,315869
  sqlite3_mutex *(*xMutexAlloc)(int);xMutexAlloc6564,315895
  void (*xMutexFree)(sqlite3_mutex *);xMutexFree6565,315933
  void (*xMutexEnter)(sqlite3_mutex *);xMutexEnter6566,315972
  int (*xMutexTry)(sqlite3_mutex *);xMutexTry6567,316012
  void (*xMutexLeave)(sqlite3_mutex *);xMutexLeave6568,316049
  int (*xMutexHeld)(sqlite3_mutex *);xMutexHeld6569,316089
  int (*xMutexNotheld)(sqlite3_mutex *);xMutexNotheld6570,316127
#define SQLITE_MUTEX_FAST SQLITE_MUTEX_FAST6617,318150
#define SQLITE_MUTEX_RECURSIVE SQLITE_MUTEX_RECURSIVE6618,318190
#define SQLITE_MUTEX_STATIC_MASTER SQLITE_MUTEX_STATIC_MASTER6619,318230
#define SQLITE_MUTEX_STATIC_MEM SQLITE_MUTEX_STATIC_MEM6620,318270
#define SQLITE_MUTEX_STATIC_MEM2 SQLITE_MUTEX_STATIC_MEM26621,318334
#define SQLITE_MUTEX_STATIC_OPEN SQLITE_MUTEX_STATIC_OPEN6622,318390
#define SQLITE_MUTEX_STATIC_PRNG SQLITE_MUTEX_STATIC_PRNG6623,318456
#define SQLITE_MUTEX_STATIC_LRU SQLITE_MUTEX_STATIC_LRU6624,318524
#define SQLITE_MUTEX_STATIC_LRU2 SQLITE_MUTEX_STATIC_LRU26625,318585
#define SQLITE_MUTEX_STATIC_PMEM SQLITE_MUTEX_STATIC_PMEM6626,318641
#define SQLITE_MUTEX_STATIC_APP1 SQLITE_MUTEX_STATIC_APP16627,318708
#define SQLITE_MUTEX_STATIC_APP2 SQLITE_MUTEX_STATIC_APP26628,318778
#define SQLITE_MUTEX_STATIC_APP3 SQLITE_MUTEX_STATIC_APP36629,318848
#define SQLITE_MUTEX_STATIC_VFS1 SQLITE_MUTEX_STATIC_VFS16630,318918
#define SQLITE_MUTEX_STATIC_VFS2 SQLITE_MUTEX_STATIC_VFS26631,318989
#define SQLITE_MUTEX_STATIC_VFS3 SQLITE_MUTEX_STATIC_VFS36632,319061
#define SQLITE_TESTCTRL_FIRST SQLITE_TESTCTRL_FIRST6711,322554
#define SQLITE_TESTCTRL_PRNG_SAVE SQLITE_TESTCTRL_PRNG_SAVE6712,322605
#define SQLITE_TESTCTRL_PRNG_RESTORE SQLITE_TESTCTRL_PRNG_RESTORE6713,322656
#define SQLITE_TESTCTRL_PRNG_RESET SQLITE_TESTCTRL_PRNG_RESET6714,322707
#define SQLITE_TESTCTRL_BITVEC_TEST SQLITE_TESTCTRL_BITVEC_TEST6715,322758
#define SQLITE_TESTCTRL_FAULT_INSTALL SQLITE_TESTCTRL_FAULT_INSTALL6716,322809
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS6717,322860
#define SQLITE_TESTCTRL_PENDING_BYTE SQLITE_TESTCTRL_PENDING_BYTE6718,322911
#define SQLITE_TESTCTRL_ASSERT SQLITE_TESTCTRL_ASSERT6719,322962
#define SQLITE_TESTCTRL_ALWAYS SQLITE_TESTCTRL_ALWAYS6720,323013
#define SQLITE_TESTCTRL_RESERVE SQLITE_TESTCTRL_RESERVE6721,323064
#define SQLITE_TESTCTRL_OPTIMIZATIONS SQLITE_TESTCTRL_OPTIMIZATIONS6722,323115
#define SQLITE_TESTCTRL_ISKEYWORD SQLITE_TESTCTRL_ISKEYWORD6723,323166
#define SQLITE_TESTCTRL_SCRATCHMALLOC SQLITE_TESTCTRL_SCRATCHMALLOC6724,323217
#define SQLITE_TESTCTRL_LOCALTIME_FAULT SQLITE_TESTCTRL_LOCALTIME_FAULT6725,323268
#define SQLITE_TESTCTRL_EXPLAIN_STMT SQLITE_TESTCTRL_EXPLAIN_STMT6726,323319
#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD6727,323386
#define SQLITE_TESTCTRL_NEVER_CORRUPT SQLITE_TESTCTRL_NEVER_CORRUPT6728,323437
#define SQLITE_TESTCTRL_VDBE_COVERAGE SQLITE_TESTCTRL_VDBE_COVERAGE6729,323488
#define SQLITE_TESTCTRL_BYTEORDER SQLITE_TESTCTRL_BYTEORDER6730,323539
#define SQLITE_TESTCTRL_ISINIT SQLITE_TESTCTRL_ISINIT6731,323590
#define SQLITE_TESTCTRL_SORTER_MMAP SQLITE_TESTCTRL_SORTER_MMAP6732,323641
#define SQLITE_TESTCTRL_IMPOSTER SQLITE_TESTCTRL_IMPOSTER6733,323692
#define SQLITE_TESTCTRL_LAST SQLITE_TESTCTRL_LAST6734,323743
#define SQLITE_STATUS_MEMORY_USED SQLITE_STATUS_MEMORY_USED6854,329560
#define SQLITE_STATUS_PAGECACHE_USED SQLITE_STATUS_PAGECACHE_USED6855,329605
#define SQLITE_STATUS_PAGECACHE_OVERFLOW SQLITE_STATUS_PAGECACHE_OVERFLOW6856,329650
#define SQLITE_STATUS_SCRATCH_USED SQLITE_STATUS_SCRATCH_USED6857,329695
#define SQLITE_STATUS_SCRATCH_OVERFLOW SQLITE_STATUS_SCRATCH_OVERFLOW6858,329740
#define SQLITE_STATUS_MALLOC_SIZE SQLITE_STATUS_MALLOC_SIZE6859,329785
#define SQLITE_STATUS_PARSER_STACK SQLITE_STATUS_PARSER_STACK6860,329830
#define SQLITE_STATUS_PAGECACHE_SIZE SQLITE_STATUS_PAGECACHE_SIZE6861,329875
#define SQLITE_STATUS_SCRATCH_SIZE SQLITE_STATUS_SCRATCH_SIZE6862,329920
#define SQLITE_STATUS_MALLOC_COUNT SQLITE_STATUS_MALLOC_COUNT6863,329965
#define SQLITE_DBSTATUS_LOOKASIDE_USED SQLITE_DBSTATUS_LOOKASIDE_USED6992,336168
#define SQLITE_DBSTATUS_CACHE_USED SQLITE_DBSTATUS_CACHE_USED6993,336215
#define SQLITE_DBSTATUS_SCHEMA_USED SQLITE_DBSTATUS_SCHEMA_USED6994,336262
#define SQLITE_DBSTATUS_STMT_USED SQLITE_DBSTATUS_STMT_USED6995,336309
#define SQLITE_DBSTATUS_LOOKASIDE_HIT SQLITE_DBSTATUS_LOOKASIDE_HIT6996,336356
#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE6997,336403
#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL6998,336450
#define SQLITE_DBSTATUS_CACHE_HIT SQLITE_DBSTATUS_CACHE_HIT6999,336497
#define SQLITE_DBSTATUS_CACHE_MISS SQLITE_DBSTATUS_CACHE_MISS7000,336544
#define SQLITE_DBSTATUS_CACHE_WRITE SQLITE_DBSTATUS_CACHE_WRITE7001,336591
#define SQLITE_DBSTATUS_DEFERRED_FKS SQLITE_DBSTATUS_DEFERRED_FKS7002,336638
#define SQLITE_DBSTATUS_CACHE_USED_SHARED SQLITE_DBSTATUS_CACHE_USED_SHARED7003,336685
#define SQLITE_DBSTATUS_MAX SQLITE_DBSTATUS_MAX7004,336732
#define SQLITE_STMTSTATUS_FULLSCAN_STEP SQLITE_STMTSTATUS_FULLSCAN_STEP7070,339775
#define SQLITE_STMTSTATUS_SORT SQLITE_STMTSTATUS_SORT7071,339821
#define SQLITE_STMTSTATUS_AUTOINDEX SQLITE_STMTSTATUS_AUTOINDEX7072,339867
#define SQLITE_STMTSTATUS_VM_STEP SQLITE_STMTSTATUS_VM_STEP7073,339913
typedef struct sqlite3_pcache sqlite3_pcache;sqlite3_pcache7086,340334
typedef struct sqlite3_pcache_page sqlite3_pcache_page;sqlite3_pcache_page7098,340751
struct sqlite3_pcache_page {sqlite3_pcache_page7099,340807
  void *pBuf;        /* The content of the page */pBuf7100,340836
  void *pExtra;      /* Extra information associated with the page */pExtra7101,340887
typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;sqlite3_pcache_methods27263,349115
struct sqlite3_pcache_methods2 {sqlite3_pcache_methods27264,349179
  int iVersion;iVersion7265,349212
  void *pArg;pArg7266,349228
  int (*xInit)(void*);xInit7267,349242
  void (*xShutdown)(void*);xShutdown7268,349265
  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);xCreate7269,349293
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize7270,349364
  int (*xPagecount)(sqlite3_pcache*);xPagecount7271,349419
  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch7272,349457
  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);xUnpin7273,349538
  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, xRekey7274,349608
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate7276,349706
  void (*xDestroy)(sqlite3_pcache*);xDestroy7277,349761
  void (*xShrink)(sqlite3_pcache*);xShrink7278,349798
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;sqlite3_pcache_methods7286,350056
struct sqlite3_pcache_methods {sqlite3_pcache_methods7287,350118
  void *pArg;pArg7288,350150
  int (*xInit)(void*);xInit7289,350164
  void (*xShutdown)(void*);xShutdown7290,350187
  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);xCreate7291,350215
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize7292,350273
  int (*xPagecount)(sqlite3_pcache*);xPagecount7293,350328
  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch7294,350366
  void (*xUnpin)(sqlite3_pcache*, void*, int discard);xUnpin7295,350432
  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);xRekey7296,350487
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate7297,350563
  void (*xDestroy)(sqlite3_pcache*);xDestroy7298,350618
typedef struct sqlite3_backup sqlite3_backup;sqlite3_backup7312,350995
#define SQLITE_CHECKPOINT_PASSIVE SQLITE_CHECKPOINT_PASSIVE7909,381350
#define SQLITE_CHECKPOINT_FULL SQLITE_CHECKPOINT_FULL7910,381430
#define SQLITE_CHECKPOINT_RESTART SQLITE_CHECKPOINT_RESTART7911,381508
#define SQLITE_CHECKPOINT_TRUNCATE SQLITE_CHECKPOINT_TRUNCATE7912,381587
#define SQLITE_VTAB_CONSTRAINT_SUPPORT SQLITE_VTAB_CONSTRAINT_SUPPORT7969,384254
#define SQLITE_ROLLBACK SQLITE_ROLLBACK7995,385284
#define SQLITE_FAIL SQLITE_FAIL7997,385386
#define SQLITE_REPLACE SQLITE_REPLACE7999,385464
#define SQLITE_SCANSTAT_NLOOP SQLITE_SCANSTAT_NLOOP8048,387785
#define SQLITE_SCANSTAT_NVISIT SQLITE_SCANSTAT_NVISIT8049,387820
#define SQLITE_SCANSTAT_EST SQLITE_SCANSTAT_EST8050,387855
#define SQLITE_SCANSTAT_NAME SQLITE_SCANSTAT_NAME8051,387890
#define SQLITE_SCANSTAT_EXPLAIN SQLITE_SCANSTAT_EXPLAIN8052,387925
#define SQLITE_SCANSTAT_SELECTID SQLITE_SCANSTAT_SELECTID8053,387960
typedef struct sqlite3_snapshot sqlite3_snapshot;sqlite3_snapshot8270,398613
# undef doubledouble8381,403120
#define _SQLITE3RTREE_H__SQLITE3RTREE_H_8404,403680
typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;sqlite3_rtree_geometry8411,403747
typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;sqlite3_rtree_query_info8412,403809
  typedef sqlite3_int64 sqlite3_rtree_dbl;sqlite3_rtree_dbl8418,404016
  typedef double sqlite3_rtree_dbl;sqlite3_rtree_dbl8420,404065
struct sqlite3_rtree_geometry {sqlite3_rtree_geometry8441,404631
  void *pContext;                 /* Copy of pContext passed to s_r_g_c() */pContext8442,404663
  int nParam;                     /* Size of array aParam[] */nParam8443,404740
  sqlite3_rtree_dbl *aParam;      /* Parameters passed to SQL geom function */aParam8444,404803
  void *pUser;                    /* Callback implementation user data */pUser8445,404882
  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */xDelUser8446,404956
struct sqlite3_rtree_query_info {sqlite3_rtree_query_info8473,405763
  void *pContext;                   /* pContext from when function registered */pContext8474,405797
  int nParam;                       /* Number of function parameters */nParam8475,405878
  sqlite3_rtree_dbl *aParam;        /* value of function parameters */aParam8476,405950
  void *pUser;                      /* callback can use this, if desired */pUser8477,406021
  void (*xDelUser)(void*);          /* function to free pUser */xDelUser8478,406097
  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check */aCoord8479,406162
  unsigned int *anQueue;            /* Number of pending entries in the queue */anQueue8480,406242
  int nCoord;                       /* Number of coordinates */nCoord8481,406323
  int iLevel;                       /* Level of current node or entry */iLevel8482,406387
  int mxLevel;                      /* The largest iLevel value in the tree */mxLevel8483,406460
  sqlite3_int64 iRowid;             /* Rowid for current entry */iRowid8484,406539
  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */rParentScore8485,406605
  int eParentWithin;                /* Visibility of parent node */eParentWithin8486,406668
  int eWithin;                      /* OUT: Visiblity */eWithin8487,406736
  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */rScore8488,406793
  sqlite3_value **apSqlParam;       /* Original SQL values of parameters */apSqlParam8490,406929
#define NOT_WITHIN NOT_WITHIN8496,407085
#define PARTLY_WITHIN PARTLY_WITHIN8497,407162
#define FULLY_WITHIN FULLY_WITHIN8498,407236
#define __SQLITESESSION_H_ __SQLITESESSION_H_8511,407581
typedef struct sqlite3_session sqlite3_session;sqlite3_session8524,407745
typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;sqlite3_changeset_iter8529,407839
typedef struct sqlite3_changegroup sqlite3_changegroup;sqlite3_changegroup9239,440365
#define SQLITE_CHANGESET_DATA SQLITE_CHANGESET_DATA9597,457970
#define SQLITE_CHANGESET_NOTFOUND SQLITE_CHANGESET_NOTFOUND9598,458009
#define SQLITE_CHANGESET_CONFLICT SQLITE_CHANGESET_CONFLICT9599,458048
#define SQLITE_CHANGESET_CONSTRAINT SQLITE_CHANGESET_CONSTRAINT9600,458087
#define SQLITE_CHANGESET_FOREIGN_KEY SQLITE_CHANGESET_FOREIGN_KEY9601,458126
#define SQLITE_CHANGESET_OMIT SQLITE_CHANGESET_OMIT9634,459563
#define SQLITE_CHANGESET_REPLACE SQLITE_CHANGESET_REPLACE9635,459601
#define SQLITE_CHANGESET_ABORT SQLITE_CHANGESET_ABORT9636,459639
#define _FTS5_H_FTS5_H9813,466592
typedef struct Fts5ExtensionApi Fts5ExtensionApi;Fts5ExtensionApi9827,466884
typedef struct Fts5Context Fts5Context;Fts5Context9828,466934
typedef struct Fts5PhraseIter Fts5PhraseIter;Fts5PhraseIter9829,466974
typedef void (*fts5_extension_function)(fts5_extension_function9831,467021
struct Fts5PhraseIter {Fts5PhraseIter9839,467434
  const unsigned char *a;a9840,467458
  const unsigned char *b;b9841,467484
struct Fts5ExtensionApi {Fts5ExtensionApi10059,477145
  int iVersion;                   /* Currently always set to 3 */iVersion10060,477171
  void *(*xUserData)(Fts5Context*);xUserData10062,477238
  int (*xColumnCount)(Fts5Context*);xColumnCount10064,477275
  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);xRowCount10065,477312
  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);xColumnTotalSize10066,477368
  int (*xTokenize)(Fts5Context*, xTokenize10068,477444
  int (*xPhraseCount)(Fts5Context*);xPhraseCount10074,477687
  int (*xPhraseSize)(Fts5Context*, int iPhrase);xPhraseSize10075,477724
  int (*xInstCount)(Fts5Context*, int *pnInst);xInstCount10077,477774
  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);xInst10078,477822
  sqlite3_int64 (*xRowid)(Fts5Context*);xRowid10080,477902
  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);xColumnText10081,477943
  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);xColumnSize10082,478015
  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,xQueryPhrase10084,478076
  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));xSetAuxdata10087,478202
  void *(*xGetAuxdata)(Fts5Context*, int bClear);xGetAuxdata10088,478273
  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);xPhraseFirst10090,478324
  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);xPhraseNext10091,478403
  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);xPhraseFirstColumn10093,478482
  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);xPhraseNextColumn10094,478561
typedef struct Fts5Tokenizer Fts5Tokenizer;Fts5Tokenizer10293,488860
typedef struct fts5_tokenizer fts5_tokenizer;fts5_tokenizer10294,488904
struct fts5_tokenizer {fts5_tokenizer10295,488950
  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);xCreate10296,488974
  void (*xDelete)(Fts5Tokenizer*);xDelete10297,489052
  int (*xTokenize)(Fts5Tokenizer*, xTokenize10298,489087
#define FTS5_TOKENIZE_QUERY FTS5_TOKENIZE_QUERY10314,489758
#define FTS5_TOKENIZE_PREFIX FTS5_TOKENIZE_PREFIX10315,489797
#define FTS5_TOKENIZE_DOCUMENT FTS5_TOKENIZE_DOCUMENT10316,489836
#define FTS5_TOKENIZE_AUX FTS5_TOKENIZE_AUX10317,489875
#define FTS5_TOKEN_COLOCATED FTS5_TOKEN_COLOCATED10321,490049
typedef struct fts5_api fts5_api;fts5_api10330,490349
struct fts5_api {fts5_api10331,490383
  int iVersion;                   /* Currently always set to 2 */iVersion10332,490401
  int (*xCreateTokenizer)(xCreateTokenizer10335,490499
  int (*xFindTokenizer)(xFindTokenizer10344,490690
  int (*xCreateFunction)(xCreateFunction10352,490857

amt-db-funcs.h,45
#define AMT_DB_FUNCS_H_AMT_DB_FUNCS_H_4,88

sqlite3.c,816985
#define SQLITE_CORE SQLITE_CORE20,1241
#define SQLITE_AMALGAMATION SQLITE_AMALGAMATION21,1263
# define SQLITE_PRIVATE SQLITE_PRIVATE23,1316
#define SQLITEINT_HSQLITEINT_H41,1881
#  define SQLITE_TCLAPISQLITE_TCLAPI75,3292
#  define _CRT_RAND_S_CRT_RAND_S83,3458
#define SQLITE_MSVC_HSQLITE_MSVC_H109,4374
#define OS_VXWORKS OS_VXWORKS158,5939
#define SQLITE_OS_OTHER SQLITE_OS_OTHER159,5960
#define SQLITE_HOMEGROWN_RECURSIVE_MUTEX SQLITE_HOMEGROWN_RECURSIVE_MUTEX160,5986
#define SQLITE_OMIT_LOAD_EXTENSION SQLITE_OMIT_LOAD_EXTENSION161,6029
#define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE162,6066
#define HAVE_UTIME HAVE_UTIME163,6104
#define OS_VXWORKS OS_VXWORKS166,6158
#define HAVE_FCHOWN HAVE_FCHOWN167,6179
#define HAVE_READLINK HAVE_READLINK168,6201
#define HAVE_LSTAT HAVE_LSTAT169,6225
# define _LARGE_FILE _LARGE_FILE200,7716
#   define _FILE_OFFSET_BITS _FILE_OFFSET_BITS202,7772
# define _LARGEFILE_SOURCE _LARGEFILE_SOURCE204,7812
# define GCC_VERSION GCC_VERSION209,7937
# define GCC_VERSION GCC_VERSION211,8023
# define _GNU_SOURCE_GNU_SOURCE216,8141
# define _BSD_SOURCE_BSD_SOURCE220,8220
# define _USE_32BIT_TIME_T_USE_32BIT_TIME_T252,9608
#define SQLITE3_HSQLITE3_H294,11473
# define SQLITE_EXTERN SQLITE_EXTERN309,11737
# define SQLITE_APISQLITE_API312,11793
# define SQLITE_CDECLSQLITE_CDECL315,11841
# define SQLITE_APICALLSQLITE_APICALL318,11893
# define SQLITE_STDCALL SQLITE_STDCALL321,11947
# define SQLITE_CALLBACKSQLITE_CALLBACK324,12017
# define SQLITE_SYSAPISQLITE_SYSAPI327,12071
#define SQLITE_DEPRECATEDSQLITE_DEPRECATED343,12741
#define SQLITE_EXPERIMENTALSQLITE_EXPERIMENTAL344,12767
# undef SQLITE_VERSIONSQLITE_VERSION350,12895
# undef SQLITE_VERSION_NUMBERSQLITE_VERSION_NUMBER353,12954
#define SQLITE_VERSION SQLITE_VERSION384,14378
#define SQLITE_VERSION_NUMBER SQLITE_VERSION_NUMBER385,14417
#define SQLITE_SOURCE_ID SQLITE_SOURCE_ID386,14455
SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;sqlite3_version418,16034
typedef struct sqlite3 sqlite3;sqlite3502,19890
  typedef SQLITE_INT64_TYPE sqlite_int64;sqlite_int64521,20613
  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;sqlite_uint64522,20655
  typedef __int64 sqlite_int64;sqlite_int64524,20756
  typedef unsigned __int64 sqlite_uint64;sqlite_uint64525,20788
  typedef long long int sqlite_int64;sqlite_int64527,20836
  typedef unsigned long long int sqlite_uint64;sqlite_uint64528,20874
typedef sqlite_int64 sqlite3_int64;sqlite3_int64530,20929
typedef sqlite_uint64 sqlite3_uint64;sqlite3_uint64531,20965
# define double double538,21153
typedef int (*sqlite3_callback)(void*,int,char**, char**);sqlite3_callback591,23567
#define SQLITE_OK SQLITE_OK674,27515
#define SQLITE_ERROR SQLITE_ERROR676,27602
#define SQLITE_INTERNAL SQLITE_INTERNAL677,27670
#define SQLITE_PERM SQLITE_PERM678,27739
#define SQLITE_ABORT SQLITE_ABORT679,27802
#define SQLITE_BUSY SQLITE_BUSY680,27876
#define SQLITE_LOCKED SQLITE_LOCKED681,27942
#define SQLITE_NOMEM SQLITE_NOMEM682,28014
#define SQLITE_READONLY SQLITE_READONLY683,28070
#define SQLITE_INTERRUPT SQLITE_INTERRUPT684,28145
#define SQLITE_IOERR SQLITE_IOERR685,28226
#define SQLITE_CORRUPT SQLITE_CORRUPT686,28301
#define SQLITE_NOTFOUND SQLITE_NOTFOUND687,28376
#define SQLITE_FULL SQLITE_FULL688,28455
#define SQLITE_CANTOPEN SQLITE_CANTOPEN689,28535
#define SQLITE_PROTOCOL SQLITE_PROTOCOL690,28606
#define SQLITE_EMPTY SQLITE_EMPTY691,28673
#define SQLITE_SCHEMA SQLITE_SCHEMA692,28729
#define SQLITE_TOOBIG SQLITE_TOOBIG693,28795
#define SQLITE_CONSTRAINT SQLITE_CONSTRAINT694,28867
#define SQLITE_MISMATCH SQLITE_MISMATCH695,28939
#define SQLITE_MISUSE SQLITE_MISUSE696,28996
#define SQLITE_NOLFS SQLITE_NOLFS697,29059
#define SQLITE_AUTH SQLITE_AUTH698,29136
#define SQLITE_FORMAT SQLITE_FORMAT699,29195
#define SQLITE_RANGE SQLITE_RANGE700,29265
#define SQLITE_NOTADB SQLITE_NOTADB701,29346
#define SQLITE_NOTICE SQLITE_NOTICE702,29424
#define SQLITE_WARNING SQLITE_WARNING703,29495
#define SQLITE_ROW SQLITE_ROW704,29561
#define SQLITE_DONE SQLITE_DONE705,29636
#define SQLITE_IOERR_READ SQLITE_IOERR_READ725,30560
#define SQLITE_IOERR_SHORT_READ SQLITE_IOERR_SHORT_READ726,30623
#define SQLITE_IOERR_WRITE SQLITE_IOERR_WRITE727,30686
#define SQLITE_IOERR_FSYNC SQLITE_IOERR_FSYNC728,30749
#define SQLITE_IOERR_DIR_FSYNC SQLITE_IOERR_DIR_FSYNC729,30812
#define SQLITE_IOERR_TRUNCATE SQLITE_IOERR_TRUNCATE730,30875
#define SQLITE_IOERR_FSTAT SQLITE_IOERR_FSTAT731,30938
#define SQLITE_IOERR_UNLOCK SQLITE_IOERR_UNLOCK732,31001
#define SQLITE_IOERR_RDLOCK SQLITE_IOERR_RDLOCK733,31064
#define SQLITE_IOERR_DELETE SQLITE_IOERR_DELETE734,31127
#define SQLITE_IOERR_BLOCKED SQLITE_IOERR_BLOCKED735,31191
#define SQLITE_IOERR_NOMEM SQLITE_IOERR_NOMEM736,31255
#define SQLITE_IOERR_ACCESS SQLITE_IOERR_ACCESS737,31319
#define SQLITE_IOERR_CHECKRESERVEDLOCK SQLITE_IOERR_CHECKRESERVEDLOCK738,31383
#define SQLITE_IOERR_LOCK SQLITE_IOERR_LOCK739,31447
#define SQLITE_IOERR_CLOSE SQLITE_IOERR_CLOSE740,31511
#define SQLITE_IOERR_DIR_CLOSE SQLITE_IOERR_DIR_CLOSE741,31575
#define SQLITE_IOERR_SHMOPEN SQLITE_IOERR_SHMOPEN742,31639
#define SQLITE_IOERR_SHMSIZE SQLITE_IOERR_SHMSIZE743,31703
#define SQLITE_IOERR_SHMLOCK SQLITE_IOERR_SHMLOCK744,31767
#define SQLITE_IOERR_SHMMAP SQLITE_IOERR_SHMMAP745,31831
#define SQLITE_IOERR_SEEK SQLITE_IOERR_SEEK746,31895
#define SQLITE_IOERR_DELETE_NOENT SQLITE_IOERR_DELETE_NOENT747,31959
#define SQLITE_IOERR_MMAP SQLITE_IOERR_MMAP748,32023
#define SQLITE_IOERR_GETTEMPPATH SQLITE_IOERR_GETTEMPPATH749,32087
#define SQLITE_IOERR_CONVPATH SQLITE_IOERR_CONVPATH750,32151
#define SQLITE_IOERR_VNODE SQLITE_IOERR_VNODE751,32215
#define SQLITE_IOERR_AUTH SQLITE_IOERR_AUTH752,32279
#define SQLITE_LOCKED_SHAREDCACHE SQLITE_LOCKED_SHAREDCACHE753,32343
#define SQLITE_BUSY_RECOVERY SQLITE_BUSY_RECOVERY754,32408
#define SQLITE_BUSY_SNAPSHOT SQLITE_BUSY_SNAPSHOT755,32473
#define SQLITE_CANTOPEN_NOTEMPDIR SQLITE_CANTOPEN_NOTEMPDIR756,32538
#define SQLITE_CANTOPEN_ISDIR SQLITE_CANTOPEN_ISDIR757,32604
#define SQLITE_CANTOPEN_FULLPATH SQLITE_CANTOPEN_FULLPATH758,32670
#define SQLITE_CANTOPEN_CONVPATH SQLITE_CANTOPEN_CONVPATH759,32736
#define SQLITE_CORRUPT_VTAB SQLITE_CORRUPT_VTAB760,32802
#define SQLITE_READONLY_RECOVERY SQLITE_READONLY_RECOVERY761,32867
#define SQLITE_READONLY_CANTLOCK SQLITE_READONLY_CANTLOCK762,32933
#define SQLITE_READONLY_ROLLBACK SQLITE_READONLY_ROLLBACK763,32999
#define SQLITE_READONLY_DBMOVED SQLITE_READONLY_DBMOVED764,33065
#define SQLITE_ABORT_ROLLBACK SQLITE_ABORT_ROLLBACK765,33131
#define SQLITE_CONSTRAINT_CHECK SQLITE_CONSTRAINT_CHECK766,33194
#define SQLITE_CONSTRAINT_COMMITHOOK SQLITE_CONSTRAINT_COMMITHOOK767,33262
#define SQLITE_CONSTRAINT_FOREIGNKEY SQLITE_CONSTRAINT_FOREIGNKEY768,33330
#define SQLITE_CONSTRAINT_FUNCTION SQLITE_CONSTRAINT_FUNCTION769,33398
#define SQLITE_CONSTRAINT_NOTNULL SQLITE_CONSTRAINT_NOTNULL770,33466
#define SQLITE_CONSTRAINT_PRIMARYKEY SQLITE_CONSTRAINT_PRIMARYKEY771,33534
#define SQLITE_CONSTRAINT_TRIGGER SQLITE_CONSTRAINT_TRIGGER772,33602
#define SQLITE_CONSTRAINT_UNIQUE SQLITE_CONSTRAINT_UNIQUE773,33670
#define SQLITE_CONSTRAINT_VTAB SQLITE_CONSTRAINT_VTAB774,33738
#define SQLITE_CONSTRAINT_ROWID SQLITE_CONSTRAINT_ROWID775,33806
#define SQLITE_NOTICE_RECOVER_WAL SQLITE_NOTICE_RECOVER_WAL776,33874
#define SQLITE_NOTICE_RECOVER_ROLLBACK SQLITE_NOTICE_RECOVER_ROLLBACK777,33938
#define SQLITE_WARNING_AUTOINDEX SQLITE_WARNING_AUTOINDEX778,34002
#define SQLITE_AUTH_USER SQLITE_AUTH_USER779,34067
#define SQLITE_OK_LOAD_PERMANENTLY SQLITE_OK_LOAD_PERMANENTLY780,34129
#define SQLITE_OPEN_READONLY SQLITE_OPEN_READONLY789,34408
#define SQLITE_OPEN_READWRITE SQLITE_OPEN_READWRITE790,34488
#define SQLITE_OPEN_CREATE SQLITE_OPEN_CREATE791,34568
#define SQLITE_OPEN_DELETEONCLOSE SQLITE_OPEN_DELETEONCLOSE792,34648
#define SQLITE_OPEN_EXCLUSIVE SQLITE_OPEN_EXCLUSIVE793,34712
#define SQLITE_OPEN_AUTOPROXY SQLITE_OPEN_AUTOPROXY794,34776
#define SQLITE_OPEN_URI SQLITE_OPEN_URI795,34840
#define SQLITE_OPEN_MEMORY SQLITE_OPEN_MEMORY796,34920
#define SQLITE_OPEN_MAIN_DB SQLITE_OPEN_MAIN_DB797,35000
#define SQLITE_OPEN_TEMP_DB SQLITE_OPEN_TEMP_DB798,35064
#define SQLITE_OPEN_TRANSIENT_DB SQLITE_OPEN_TRANSIENT_DB799,35128
#define SQLITE_OPEN_MAIN_JOURNAL SQLITE_OPEN_MAIN_JOURNAL800,35192
#define SQLITE_OPEN_TEMP_JOURNAL SQLITE_OPEN_TEMP_JOURNAL801,35256
#define SQLITE_OPEN_SUBJOURNAL SQLITE_OPEN_SUBJOURNAL802,35320
#define SQLITE_OPEN_MASTER_JOURNAL SQLITE_OPEN_MASTER_JOURNAL803,35384
#define SQLITE_OPEN_NOMUTEX SQLITE_OPEN_NOMUTEX804,35448
#define SQLITE_OPEN_FULLMUTEX SQLITE_OPEN_FULLMUTEX805,35528
#define SQLITE_OPEN_SHAREDCACHE SQLITE_OPEN_SHAREDCACHE806,35608
#define SQLITE_OPEN_PRIVATECACHE SQLITE_OPEN_PRIVATECACHE807,35688
#define SQLITE_OPEN_WAL SQLITE_OPEN_WAL808,35768
#define SQLITE_IOCAP_ATOMIC SQLITE_IOCAP_ATOMIC840,37309
#define SQLITE_IOCAP_ATOMIC512 SQLITE_IOCAP_ATOMIC512841,37364
#define SQLITE_IOCAP_ATOMIC1K SQLITE_IOCAP_ATOMIC1K842,37419
#define SQLITE_IOCAP_ATOMIC2K SQLITE_IOCAP_ATOMIC2K843,37474
#define SQLITE_IOCAP_ATOMIC4K SQLITE_IOCAP_ATOMIC4K844,37529
#define SQLITE_IOCAP_ATOMIC8K SQLITE_IOCAP_ATOMIC8K845,37584
#define SQLITE_IOCAP_ATOMIC16K SQLITE_IOCAP_ATOMIC16K846,37639
#define SQLITE_IOCAP_ATOMIC32K SQLITE_IOCAP_ATOMIC32K847,37694
#define SQLITE_IOCAP_ATOMIC64K SQLITE_IOCAP_ATOMIC64K848,37749
#define SQLITE_IOCAP_SAFE_APPEND SQLITE_IOCAP_SAFE_APPEND849,37804
#define SQLITE_IOCAP_SEQUENTIAL SQLITE_IOCAP_SEQUENTIAL850,37859
#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN851,37914
#define SQLITE_IOCAP_POWERSAFE_OVERWRITE SQLITE_IOCAP_POWERSAFE_OVERWRITE852,37969
#define SQLITE_IOCAP_IMMUTABLE SQLITE_IOCAP_IMMUTABLE853,38024
#define SQLITE_LOCK_NONE SQLITE_LOCK_NONE862,38284
#define SQLITE_LOCK_SHARED SQLITE_LOCK_SHARED863,38320
#define SQLITE_LOCK_RESERVED SQLITE_LOCK_RESERVED864,38356
#define SQLITE_LOCK_PENDING SQLITE_LOCK_PENDING865,38392
#define SQLITE_LOCK_EXCLUSIVE SQLITE_LOCK_EXCLUSIVE866,38428
#define SQLITE_SYNC_NORMAL SQLITE_SYNC_NORMAL894,39767
#define SQLITE_SYNC_FULL SQLITE_SYNC_FULL895,39809
#define SQLITE_SYNC_DATAONLY SQLITE_SYNC_DATAONLY896,39851
typedef struct sqlite3_file sqlite3_file;sqlite3_file909,40321
struct sqlite3_file {sqlite3_file910,40363
  const struct sqlite3_io_methods *pMethods;  /* Methods for an open file */pMethods911,40385
typedef struct sqlite3_io_methods sqlite3_io_methods;sqlite3_io_methods1004,44674
struct sqlite3_io_methods {sqlite3_io_methods1005,44728
  int iVersion;iVersion1006,44756
  int (*xClose)(sqlite3_file*);xClose1007,44772
  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);xRead1008,44804
  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);xWrite1009,44873
  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);xTruncate1010,44949
  int (*xSync)(sqlite3_file*, int flags);xSync1011,45004
  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);xFileSize1012,45046
  int (*xLock)(sqlite3_file*, int);xLock1013,45103
  int (*xUnlock)(sqlite3_file*, int);xUnlock1014,45139
  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);xCheckReservedLock1015,45177
  int (*xFileControl)(sqlite3_file*, int op, void *pArg);xFileControl1016,45235
  int (*xSectorSize)(sqlite3_file*);xSectorSize1017,45293
  int (*xDeviceCharacteristics)(sqlite3_file*);xDeviceCharacteristics1018,45330
  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);xShmMap1020,45424
  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);xShmLock1021,45498
  void (*xShmBarrier)(sqlite3_file*);xShmBarrier1022,45562
  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);xShmUnmap1023,45600
  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);xFetch1025,45697
  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);xUnfetch1026,45771
#define SQLITE_FCNTL_LOCKSTATE SQLITE_FCNTL_LOCKSTATE1270,59277
#define SQLITE_FCNTL_GET_LOCKPROXYFILE SQLITE_FCNTL_GET_LOCKPROXYFILE1271,59324
#define SQLITE_FCNTL_SET_LOCKPROXYFILE SQLITE_FCNTL_SET_LOCKPROXYFILE1272,59371
#define SQLITE_FCNTL_LAST_ERRNO SQLITE_FCNTL_LAST_ERRNO1273,59418
#define SQLITE_FCNTL_SIZE_HINT SQLITE_FCNTL_SIZE_HINT1274,59465
#define SQLITE_FCNTL_CHUNK_SIZE SQLITE_FCNTL_CHUNK_SIZE1275,59512
#define SQLITE_FCNTL_FILE_POINTER SQLITE_FCNTL_FILE_POINTER1276,59559
#define SQLITE_FCNTL_SYNC_OMITTED SQLITE_FCNTL_SYNC_OMITTED1277,59606
#define SQLITE_FCNTL_WIN32_AV_RETRY SQLITE_FCNTL_WIN32_AV_RETRY1278,59653
#define SQLITE_FCNTL_PERSIST_WAL SQLITE_FCNTL_PERSIST_WAL1279,59700
#define SQLITE_FCNTL_OVERWRITE SQLITE_FCNTL_OVERWRITE1280,59747
#define SQLITE_FCNTL_VFSNAME SQLITE_FCNTL_VFSNAME1281,59794
#define SQLITE_FCNTL_POWERSAFE_OVERWRITE SQLITE_FCNTL_POWERSAFE_OVERWRITE1282,59841
#define SQLITE_FCNTL_PRAGMA SQLITE_FCNTL_PRAGMA1283,59888
#define SQLITE_FCNTL_BUSYHANDLER SQLITE_FCNTL_BUSYHANDLER1284,59935
#define SQLITE_FCNTL_TEMPFILENAME SQLITE_FCNTL_TEMPFILENAME1285,59982
#define SQLITE_FCNTL_MMAP_SIZE SQLITE_FCNTL_MMAP_SIZE1286,60029
#define SQLITE_FCNTL_TRACE SQLITE_FCNTL_TRACE1287,60076
#define SQLITE_FCNTL_HAS_MOVED SQLITE_FCNTL_HAS_MOVED1288,60123
#define SQLITE_FCNTL_SYNC SQLITE_FCNTL_SYNC1289,60170
#define SQLITE_FCNTL_COMMIT_PHASETWO SQLITE_FCNTL_COMMIT_PHASETWO1290,60217
#define SQLITE_FCNTL_WIN32_SET_HANDLE SQLITE_FCNTL_WIN32_SET_HANDLE1291,60264
#define SQLITE_FCNTL_WAL_BLOCK SQLITE_FCNTL_WAL_BLOCK1292,60311
#define SQLITE_FCNTL_ZIPVFS SQLITE_FCNTL_ZIPVFS1293,60358
#define SQLITE_FCNTL_RBU SQLITE_FCNTL_RBU1294,60405
#define SQLITE_FCNTL_VFS_POINTER SQLITE_FCNTL_VFS_POINTER1295,60452
#define SQLITE_FCNTL_JOURNAL_POINTER SQLITE_FCNTL_JOURNAL_POINTER1296,60499
#define SQLITE_FCNTL_WIN32_GET_HANDLE SQLITE_FCNTL_WIN32_GET_HANDLE1297,60546
#define SQLITE_GET_LOCKPROXYFILE SQLITE_GET_LOCKPROXYFILE1300,60617
#define SQLITE_SET_LOCKPROXYFILE SQLITE_SET_LOCKPROXYFILE1301,60686
#define SQLITE_LAST_ERRNO SQLITE_LAST_ERRNO1302,60755
typedef struct sqlite3_mutex sqlite3_mutex;sqlite3_mutex1315,61164
typedef struct sqlite3_api_routines sqlite3_api_routines;sqlite3_api_routines1325,61493
typedef struct sqlite3_vfs sqlite3_vfs;sqlite3_vfs1484,69398
typedef void (*sqlite3_syscall_ptr)(void);sqlite3_syscall_ptr1485,69438
struct sqlite3_vfs {sqlite3_vfs1486,69481
  int iVersion;            /* Structure version number (currently 3) */iVersion1487,69502
  int szOsFile;            /* Size of subclassed sqlite3_file */szOsFile1488,69574
  int mxPathname;          /* Maximum file pathname length */mxPathname1489,69639
  sqlite3_vfs *pNext;      /* Next registered VFS */pNext1490,69701
  const char *zName;       /* Name of this virtual file system */zName1491,69754
  void *pAppData;          /* Pointer to application-specific data */pAppData1492,69820
  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,xOpen1493,69890
  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);xDelete1495,69996
  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);xAccess1496,70060
  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);xFullPathname1497,70136
  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);xDlOpen1498,70215
  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);xDlError1499,70272
  void (*xDlClose)(sqlite3_vfs*, void*);xDlClose1501,70400
  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);xRandomness1502,70441
  int (*xSleep)(sqlite3_vfs*, int microseconds);xSleep1503,70500
  int (*xCurrentTime)(sqlite3_vfs*, double*);xCurrentTime1504,70549
  int (*xGetLastError)(sqlite3_vfs*, int, char *);xGetLastError1505,70595
  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);xCurrentTimeInt641510,70789
  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);xSetSystemCall1515,70978
  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);xGetSystemCall1516,71057
  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);xNextSystemCall1517,71131
#define SQLITE_ACCESS_EXISTS SQLITE_ACCESS_EXISTS1545,72320
#define SQLITE_ACCESS_READWRITE SQLITE_ACCESS_READWRITE1546,72354
#define SQLITE_ACCESS_READ SQLITE_ACCESS_READ1547,72432
#define SQLITE_SHM_UNLOCK SQLITE_SHM_UNLOCK1571,73238
#define SQLITE_SHM_LOCK SQLITE_SHM_LOCK1572,73272
#define SQLITE_SHM_SHARED SQLITE_SHM_SHARED1573,73306
#define SQLITE_SHM_EXCLUSIVE SQLITE_SHM_EXCLUSIVE1574,73340
#define SQLITE_SHM_NLOCK SQLITE_SHM_NLOCK1584,73634
typedef struct sqlite3_mem_methods sqlite3_mem_methods;sqlite3_mem_methods1782,83487
struct sqlite3_mem_methods {sqlite3_mem_methods1783,83543
  void *(*xMalloc)(int);         /* Memory allocation function */xMalloc1784,83572
  void (*xFree)(void*);          /* Free a prior allocation */xFree1785,83638
  void *(*xRealloc)(void*,int);  /* Resize an allocation */xRealloc1786,83701
  int (*xSize)(void*);           /* Return the size of an allocation */xSize1787,83761
  int (*xRoundup)(int);          /* Round up request size to allocation size */xRoundup1788,83833
  int (*xInit)(void*);           /* Initialize the memory allocator */xInit1789,83913
  void (*xShutdown)(void*);      /* Deinitialize the memory allocator */xShutdown1790,83984
  void *pAppData;                /* Argument to xInit() and xShutdown() */pAppData1791,84057
#define SQLITE_CONFIG_SINGLETHREAD SQLITE_CONFIG_SINGLETHREAD2128,103100
#define SQLITE_CONFIG_MULTITHREAD SQLITE_CONFIG_MULTITHREAD2129,103149
#define SQLITE_CONFIG_SERIALIZED SQLITE_CONFIG_SERIALIZED2130,103198
#define SQLITE_CONFIG_MALLOC SQLITE_CONFIG_MALLOC2131,103247
#define SQLITE_CONFIG_GETMALLOC SQLITE_CONFIG_GETMALLOC2132,103313
#define SQLITE_CONFIG_SCRATCH SQLITE_CONFIG_SCRATCH2133,103379
#define SQLITE_CONFIG_PAGECACHE SQLITE_CONFIG_PAGECACHE2134,103445
#define SQLITE_CONFIG_HEAP SQLITE_CONFIG_HEAP2135,103511
#define SQLITE_CONFIG_MEMSTATUS SQLITE_CONFIG_MEMSTATUS2136,103582
#define SQLITE_CONFIG_MUTEX SQLITE_CONFIG_MUTEX2137,103635
#define SQLITE_CONFIG_GETMUTEX SQLITE_CONFIG_GETMUTEX2138,103703
#define SQLITE_CONFIG_LOOKASIDE SQLITE_CONFIG_LOOKASIDE2140,103838
#define SQLITE_CONFIG_PCACHE SQLITE_CONFIG_PCACHE2141,103891
#define SQLITE_CONFIG_GETPCACHE SQLITE_CONFIG_GETPCACHE2142,103942
#define SQLITE_CONFIG_LOG SQLITE_CONFIG_LOG2143,103993
#define SQLITE_CONFIG_URI SQLITE_CONFIG_URI2144,104051
#define SQLITE_CONFIG_PCACHE2 SQLITE_CONFIG_PCACHE22145,104100
#define SQLITE_CONFIG_GETPCACHE2 SQLITE_CONFIG_GETPCACHE22146,104170
#define SQLITE_CONFIG_COVERING_INDEX_SCAN SQLITE_CONFIG_COVERING_INDEX_SCAN2147,104240
#define SQLITE_CONFIG_SQLLOG SQLITE_CONFIG_SQLLOG2148,104296
#define SQLITE_CONFIG_MMAP_SIZE SQLITE_CONFIG_MMAP_SIZE2149,104356
#define SQLITE_CONFIG_WIN32_HEAPSIZE SQLITE_CONFIG_WIN32_HEAPSIZE2150,104430
#define SQLITE_CONFIG_PCACHE_HDRSZ SQLITE_CONFIG_PCACHE_HDRSZ2151,104492
#define SQLITE_CONFIG_PMASZ SQLITE_CONFIG_PMASZ2152,104553
#define SQLITE_CONFIG_STMTJRNL_SPILL SQLITE_CONFIG_STMTJRNL_SPILL2153,104624
#define SQLITE_DBCONFIG_MAINDBNAME SQLITE_DBCONFIG_MAINDBNAME2252,110108
#define SQLITE_DBCONFIG_LOOKASIDE SQLITE_DBCONFIG_LOOKASIDE2253,110177
#define SQLITE_DBCONFIG_ENABLE_FKEY SQLITE_DBCONFIG_ENABLE_FKEY2254,110248
#define SQLITE_DBCONFIG_ENABLE_TRIGGER SQLITE_DBCONFIG_ENABLE_TRIGGER2255,110314
#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER2256,110380
#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION2257,110446
#define SQLITE_DENY SQLITE_DENY2994,144988
#define SQLITE_IGNORE SQLITE_IGNORE2995,145058
#define SQLITE_CREATE_INDEX SQLITE_CREATE_INDEX3017,146183
#define SQLITE_CREATE_TABLE SQLITE_CREATE_TABLE3018,146262
#define SQLITE_CREATE_TEMP_INDEX SQLITE_CREATE_TEMP_INDEX3019,146341
#define SQLITE_CREATE_TEMP_TABLE SQLITE_CREATE_TEMP_TABLE3020,146420
#define SQLITE_CREATE_TEMP_TRIGGER SQLITE_CREATE_TEMP_TRIGGER3021,146499
#define SQLITE_CREATE_TEMP_VIEW SQLITE_CREATE_TEMP_VIEW3022,146578
#define SQLITE_CREATE_TRIGGER SQLITE_CREATE_TRIGGER3023,146657
#define SQLITE_CREATE_VIEW SQLITE_CREATE_VIEW3024,146736
#define SQLITE_DELETE SQLITE_DELETE3025,146815
#define SQLITE_DROP_INDEX SQLITE_DROP_INDEX3026,146894
#define SQLITE_DROP_TABLE SQLITE_DROP_TABLE3027,146973
#define SQLITE_DROP_TEMP_INDEX SQLITE_DROP_TEMP_INDEX3028,147052
#define SQLITE_DROP_TEMP_TABLE SQLITE_DROP_TEMP_TABLE3029,147131
#define SQLITE_DROP_TEMP_TRIGGER SQLITE_DROP_TEMP_TRIGGER3030,147210
#define SQLITE_DROP_TEMP_VIEW SQLITE_DROP_TEMP_VIEW3031,147289
#define SQLITE_DROP_TRIGGER SQLITE_DROP_TRIGGER3032,147368
#define SQLITE_DROP_VIEW SQLITE_DROP_VIEW3033,147447
#define SQLITE_INSERT SQLITE_INSERT3034,147526
#define SQLITE_PRAGMA SQLITE_PRAGMA3035,147605
#define SQLITE_READ SQLITE_READ3036,147684
#define SQLITE_SELECT SQLITE_SELECT3037,147763
#define SQLITE_TRANSACTION SQLITE_TRANSACTION3038,147842
#define SQLITE_UPDATE SQLITE_UPDATE3039,147921
#define SQLITE_ATTACH SQLITE_ATTACH3040,148000
#define SQLITE_DETACH SQLITE_DETACH3041,148079
#define SQLITE_ALTER_TABLE SQLITE_ALTER_TABLE3042,148158
#define SQLITE_REINDEX SQLITE_REINDEX3043,148237
#define SQLITE_ANALYZE SQLITE_ANALYZE3044,148316
#define SQLITE_CREATE_VTABLE SQLITE_CREATE_VTABLE3045,148395
#define SQLITE_DROP_VTABLE SQLITE_DROP_VTABLE3046,148474
#define SQLITE_FUNCTION SQLITE_FUNCTION3047,148553
#define SQLITE_SAVEPOINT SQLITE_SAVEPOINT3048,148632
#define SQLITE_COPY SQLITE_COPY3049,148711
#define SQLITE_RECURSIVE SQLITE_RECURSIVE3050,148773
#define SQLITE_TRACE_STMT SQLITE_TRACE_STMT3141,153181
#define SQLITE_TRACE_PROFILE SQLITE_TRACE_PROFILE3142,153218
#define SQLITE_TRACE_ROW SQLITE_TRACE_ROW3143,153255
#define SQLITE_TRACE_CLOSE SQLITE_TRACE_CLOSE3144,153292
typedef struct sqlite3_stmt sqlite3_stmt;sqlite3_stmt3573,174846
#define SQLITE_LIMIT_LENGTH SQLITE_LIMIT_LENGTH3673,179345
#define SQLITE_LIMIT_SQL_LENGTH SQLITE_LIMIT_SQL_LENGTH3674,179394
#define SQLITE_LIMIT_COLUMN SQLITE_LIMIT_COLUMN3675,179443
#define SQLITE_LIMIT_EXPR_DEPTH SQLITE_LIMIT_EXPR_DEPTH3676,179492
#define SQLITE_LIMIT_COMPOUND_SELECT SQLITE_LIMIT_COMPOUND_SELECT3677,179541
#define SQLITE_LIMIT_VDBE_OP SQLITE_LIMIT_VDBE_OP3678,179590
#define SQLITE_LIMIT_FUNCTION_ARG SQLITE_LIMIT_FUNCTION_ARG3679,179639
#define SQLITE_LIMIT_ATTACHED SQLITE_LIMIT_ATTACHED3680,179688
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH SQLITE_LIMIT_LIKE_PATTERN_LENGTH3681,179737
#define SQLITE_LIMIT_VARIABLE_NUMBER SQLITE_LIMIT_VARIABLE_NUMBER3682,179786
#define SQLITE_LIMIT_TRIGGER_DEPTH SQLITE_LIMIT_TRIGGER_DEPTH3683,179835
#define SQLITE_LIMIT_WORKER_THREADS SQLITE_LIMIT_WORKER_THREADS3684,179884
typedef struct Mem sqlite3_value;sqlite3_value3922,191366
typedef struct sqlite3_context sqlite3_context;sqlite3_context3936,191948
#define SQLITE_INTEGER SQLITE_INTEGER4387,212976
#define SQLITE_FLOAT SQLITE_FLOAT4388,213002
#define SQLITE_BLOB SQLITE_BLOB4389,213028
#define SQLITE_NULL SQLITE_NULL4390,213054
# undef SQLITE_TEXTSQLITE_TEXT4392,213099
# define SQLITE_TEXT SQLITE_TEXT4394,213125
#define SQLITE3_TEXT SQLITE3_TEXT4396,213159
#define SQLITE_UTF8 SQLITE_UTF84756,230816
#define SQLITE_UTF16LE SQLITE_UTF16LE4757,230876
#define SQLITE_UTF16BE SQLITE_UTF16BE4758,230936
#define SQLITE_UTF16 SQLITE_UTF164759,230996
#define SQLITE_ANY SQLITE_ANY4760,231059
#define SQLITE_UTF16_ALIGNED SQLITE_UTF16_ALIGNED4761,231111
#define SQLITE_DETERMINISTIC SQLITE_DETERMINISTIC4771,231440
typedef void (*sqlite3_destructor_type)(void*);sqlite3_destructor_type5027,243291
#define SQLITE_STATIC SQLITE_STATIC5028,243339
#define SQLITE_TRANSIENT SQLITE_TRANSIENT5029,243395
SQLITE_API char *sqlite3_temp_directory;sqlite3_temp_directory5454,263068
SQLITE_API char *sqlite3_data_directory;sqlite3_data_directory5491,264890
typedef struct sqlite3_vtab sqlite3_vtab;sqlite3_vtab6037,289094
typedef struct sqlite3_index_info sqlite3_index_info;sqlite3_index_info6038,289136
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;sqlite3_vtab_cursor6039,289190
typedef struct sqlite3_module sqlite3_module;sqlite3_module6040,289246
struct sqlite3_module {sqlite3_module6058,289998
  int iVersion;iVersion6059,290022
  int (*xCreate)(sqlite3*, void *pAux,xCreate6060,290038
  int (*xConnect)(sqlite3*, void *pAux,xConnect6063,290173
  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);xBestIndex6066,290309
  int (*xDisconnect)(sqlite3_vtab *pVTab);xDisconnect6067,290372
  int (*xDestroy)(sqlite3_vtab *pVTab);xDestroy6068,290415
  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);xOpen6069,290455
  int (*xClose)(sqlite3_vtab_cursor*);xClose6070,290524
  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,xFilter6071,290563
  int (*xNext)(sqlite3_vtab_cursor*);xNext6073,290683
  int (*xEof)(sqlite3_vtab_cursor*);xEof6074,290721
  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);xColumn6075,290758
  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);xRowid6076,290821
  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);xUpdate6077,290883
  int (*xBegin)(sqlite3_vtab *pVTab);xBegin6078,290957
  int (*xSync)(sqlite3_vtab *pVTab);xSync6079,290995
  int (*xCommit)(sqlite3_vtab *pVTab);xCommit6080,291032
  int (*xRollback)(sqlite3_vtab *pVTab);xRollback6081,291071
  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,xFindFunction6082,291112
  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);xRename6085,291301
  int (*xSavepoint)(sqlite3_vtab *pVTab, int);xSavepoint6088,291479
  int (*xRelease)(sqlite3_vtab *pVTab, int);xRelease6089,291526
  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);xRollbackTo6090,291571
struct sqlite3_index_info {sqlite3_index_info6189,296717
  int nConstraint;           /* Number of entries in aConstraint */nConstraint6191,296760
  struct sqlite3_index_constraint {sqlite3_index_constraint6192,296828
     int iColumn;              /* Column constrained.  -1 for ROWID */iColumn6193,296864
     unsigned char op;         /* Constraint operator */op6194,296935
     unsigned char usable;     /* True if this constraint is usable */usable6195,296992
     int iTermOffset;          /* Used internally - xBestIndex should ignore */iTermOffset6196,297063
  } *aConstraint;            /* Table of WHERE clause constraints */aConstraint6197,297143
  int nOrderBy;              /* Number of terms in the ORDER BY clause */nOrderBy6198,297212
  struct sqlite3_index_orderby {sqlite3_index_orderby6199,297286
     int iColumn;              /* Column number */iColumn6200,297319
     unsigned char desc;       /* True for DESC.  False for ASC. */desc6201,297370
  } *aOrderBy;               /* The ORDER BY clause */aOrderBy6202,297438
  struct sqlite3_index_constraint_usage {sqlite3_index_constraint_usage6204,297509
    int argvIndex;           /* if >0, constraint is part of argv to xFilter */argvIndex6205,297551
    unsigned char omit;      /* Do not code a test for this constraint */omit6206,297631
  } *aConstraintUsage;aConstraintUsage6207,297705
  int idxNum;                /* Number used to identify the index */idxNum6208,297728
  char *idxStr;              /* String, possibly obtained from sqlite3_malloc */idxStr6209,297797
  int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */needToFreeIdxStr6210,297878
  int orderByConsumed;       /* True if output is already ordered */orderByConsumed6211,297954
  double estimatedCost;           /* Estimated cost of using this index */estimatedCost6212,298023
  sqlite3_int64 estimatedRows;    /* Estimated number of rows returned */estimatedRows6214,298164
  int idxFlags;              /* Mask of SQLITE_INDEX_SCAN_* flags */idxFlags6216,298304
  sqlite3_uint64 colUsed;    /* Input: Mask of columns used by statement */colUsed6218,298440
#define SQLITE_INDEX_SCAN_UNIQUE SQLITE_INDEX_SCAN_UNIQUE6224,298564
#define SQLITE_INDEX_CONSTRAINT_EQ SQLITE_INDEX_CONSTRAINT_EQ6234,298937
#define SQLITE_INDEX_CONSTRAINT_GT SQLITE_INDEX_CONSTRAINT_GT6235,298979
#define SQLITE_INDEX_CONSTRAINT_LE SQLITE_INDEX_CONSTRAINT_LE6236,299021
#define SQLITE_INDEX_CONSTRAINT_LT SQLITE_INDEX_CONSTRAINT_LT6237,299063
#define SQLITE_INDEX_CONSTRAINT_GE SQLITE_INDEX_CONSTRAINT_GE6238,299105
#define SQLITE_INDEX_CONSTRAINT_MATCH SQLITE_INDEX_CONSTRAINT_MATCH6239,299147
#define SQLITE_INDEX_CONSTRAINT_LIKE SQLITE_INDEX_CONSTRAINT_LIKE6240,299189
#define SQLITE_INDEX_CONSTRAINT_GLOB SQLITE_INDEX_CONSTRAINT_GLOB6241,299231
#define SQLITE_INDEX_CONSTRAINT_REGEXP SQLITE_INDEX_CONSTRAINT_REGEXP6242,299273
struct sqlite3_vtab {sqlite3_vtab6302,302090
  const sqlite3_module *pModule;  /* The module for this virtual table */pModule6303,302112
  int nRef;                       /* Number of open cursors */nRef6304,302186
  char *zErrMsg;                  /* Error message from sqlite3_mprintf() */zErrMsg6305,302249
struct sqlite3_vtab_cursor {sqlite3_vtab_cursor6326,303187
  sqlite3_vtab *pVtab;      /* Virtual table of this cursor */pVtab6327,303216
typedef struct sqlite3_blob sqlite3_blob;sqlite3_blob6382,305497
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;sqlite3_mutex_methods6820,325676
struct sqlite3_mutex_methods {sqlite3_mutex_methods6821,325736
  int (*xMutexInit)(void);xMutexInit6822,325767
  int (*xMutexEnd)(void);xMutexEnd6823,325794
  sqlite3_mutex *(*xMutexAlloc)(int);xMutexAlloc6824,325820
  void (*xMutexFree)(sqlite3_mutex *);xMutexFree6825,325858
  void (*xMutexEnter)(sqlite3_mutex *);xMutexEnter6826,325897
  int (*xMutexTry)(sqlite3_mutex *);xMutexTry6827,325937
  void (*xMutexLeave)(sqlite3_mutex *);xMutexLeave6828,325974
  int (*xMutexHeld)(sqlite3_mutex *);xMutexHeld6829,326014
  int (*xMutexNotheld)(sqlite3_mutex *);xMutexNotheld6830,326052
#define SQLITE_MUTEX_FAST SQLITE_MUTEX_FAST6877,328075
#define SQLITE_MUTEX_RECURSIVE SQLITE_MUTEX_RECURSIVE6878,328115
#define SQLITE_MUTEX_STATIC_MASTER SQLITE_MUTEX_STATIC_MASTER6879,328155
#define SQLITE_MUTEX_STATIC_MEM SQLITE_MUTEX_STATIC_MEM6880,328195
#define SQLITE_MUTEX_STATIC_MEM2 SQLITE_MUTEX_STATIC_MEM26881,328259
#define SQLITE_MUTEX_STATIC_OPEN SQLITE_MUTEX_STATIC_OPEN6882,328315
#define SQLITE_MUTEX_STATIC_PRNG SQLITE_MUTEX_STATIC_PRNG6883,328381
#define SQLITE_MUTEX_STATIC_LRU SQLITE_MUTEX_STATIC_LRU6884,328449
#define SQLITE_MUTEX_STATIC_LRU2 SQLITE_MUTEX_STATIC_LRU26885,328510
#define SQLITE_MUTEX_STATIC_PMEM SQLITE_MUTEX_STATIC_PMEM6886,328566
#define SQLITE_MUTEX_STATIC_APP1 SQLITE_MUTEX_STATIC_APP16887,328633
#define SQLITE_MUTEX_STATIC_APP2 SQLITE_MUTEX_STATIC_APP26888,328703
#define SQLITE_MUTEX_STATIC_APP3 SQLITE_MUTEX_STATIC_APP36889,328773
#define SQLITE_MUTEX_STATIC_VFS1 SQLITE_MUTEX_STATIC_VFS16890,328843
#define SQLITE_MUTEX_STATIC_VFS2 SQLITE_MUTEX_STATIC_VFS26891,328914
#define SQLITE_MUTEX_STATIC_VFS3 SQLITE_MUTEX_STATIC_VFS36892,328986
#define SQLITE_TESTCTRL_FIRST SQLITE_TESTCTRL_FIRST6971,332479
#define SQLITE_TESTCTRL_PRNG_SAVE SQLITE_TESTCTRL_PRNG_SAVE6972,332530
#define SQLITE_TESTCTRL_PRNG_RESTORE SQLITE_TESTCTRL_PRNG_RESTORE6973,332581
#define SQLITE_TESTCTRL_PRNG_RESET SQLITE_TESTCTRL_PRNG_RESET6974,332632
#define SQLITE_TESTCTRL_BITVEC_TEST SQLITE_TESTCTRL_BITVEC_TEST6975,332683
#define SQLITE_TESTCTRL_FAULT_INSTALL SQLITE_TESTCTRL_FAULT_INSTALL6976,332734
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS6977,332785
#define SQLITE_TESTCTRL_PENDING_BYTE SQLITE_TESTCTRL_PENDING_BYTE6978,332836
#define SQLITE_TESTCTRL_ASSERT SQLITE_TESTCTRL_ASSERT6979,332887
#define SQLITE_TESTCTRL_ALWAYS SQLITE_TESTCTRL_ALWAYS6980,332938
#define SQLITE_TESTCTRL_RESERVE SQLITE_TESTCTRL_RESERVE6981,332989
#define SQLITE_TESTCTRL_OPTIMIZATIONS SQLITE_TESTCTRL_OPTIMIZATIONS6982,333040
#define SQLITE_TESTCTRL_ISKEYWORD SQLITE_TESTCTRL_ISKEYWORD6983,333091
#define SQLITE_TESTCTRL_SCRATCHMALLOC SQLITE_TESTCTRL_SCRATCHMALLOC6984,333142
#define SQLITE_TESTCTRL_LOCALTIME_FAULT SQLITE_TESTCTRL_LOCALTIME_FAULT6985,333193
#define SQLITE_TESTCTRL_EXPLAIN_STMT SQLITE_TESTCTRL_EXPLAIN_STMT6986,333244
#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD6987,333311
#define SQLITE_TESTCTRL_NEVER_CORRUPT SQLITE_TESTCTRL_NEVER_CORRUPT6988,333362
#define SQLITE_TESTCTRL_VDBE_COVERAGE SQLITE_TESTCTRL_VDBE_COVERAGE6989,333413
#define SQLITE_TESTCTRL_BYTEORDER SQLITE_TESTCTRL_BYTEORDER6990,333464
#define SQLITE_TESTCTRL_ISINIT SQLITE_TESTCTRL_ISINIT6991,333515
#define SQLITE_TESTCTRL_SORTER_MMAP SQLITE_TESTCTRL_SORTER_MMAP6992,333566
#define SQLITE_TESTCTRL_IMPOSTER SQLITE_TESTCTRL_IMPOSTER6993,333617
#define SQLITE_TESTCTRL_LAST SQLITE_TESTCTRL_LAST6994,333668
#define SQLITE_STATUS_MEMORY_USED SQLITE_STATUS_MEMORY_USED7114,339485
#define SQLITE_STATUS_PAGECACHE_USED SQLITE_STATUS_PAGECACHE_USED7115,339530
#define SQLITE_STATUS_PAGECACHE_OVERFLOW SQLITE_STATUS_PAGECACHE_OVERFLOW7116,339575
#define SQLITE_STATUS_SCRATCH_USED SQLITE_STATUS_SCRATCH_USED7117,339620
#define SQLITE_STATUS_SCRATCH_OVERFLOW SQLITE_STATUS_SCRATCH_OVERFLOW7118,339665
#define SQLITE_STATUS_MALLOC_SIZE SQLITE_STATUS_MALLOC_SIZE7119,339710
#define SQLITE_STATUS_PARSER_STACK SQLITE_STATUS_PARSER_STACK7120,339755
#define SQLITE_STATUS_PAGECACHE_SIZE SQLITE_STATUS_PAGECACHE_SIZE7121,339800
#define SQLITE_STATUS_SCRATCH_SIZE SQLITE_STATUS_SCRATCH_SIZE7122,339845
#define SQLITE_STATUS_MALLOC_COUNT SQLITE_STATUS_MALLOC_COUNT7123,339890
#define SQLITE_DBSTATUS_LOOKASIDE_USED SQLITE_DBSTATUS_LOOKASIDE_USED7252,346093
#define SQLITE_DBSTATUS_CACHE_USED SQLITE_DBSTATUS_CACHE_USED7253,346140
#define SQLITE_DBSTATUS_SCHEMA_USED SQLITE_DBSTATUS_SCHEMA_USED7254,346187
#define SQLITE_DBSTATUS_STMT_USED SQLITE_DBSTATUS_STMT_USED7255,346234
#define SQLITE_DBSTATUS_LOOKASIDE_HIT SQLITE_DBSTATUS_LOOKASIDE_HIT7256,346281
#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE7257,346328
#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL7258,346375
#define SQLITE_DBSTATUS_CACHE_HIT SQLITE_DBSTATUS_CACHE_HIT7259,346422
#define SQLITE_DBSTATUS_CACHE_MISS SQLITE_DBSTATUS_CACHE_MISS7260,346469
#define SQLITE_DBSTATUS_CACHE_WRITE SQLITE_DBSTATUS_CACHE_WRITE7261,346516
#define SQLITE_DBSTATUS_DEFERRED_FKS SQLITE_DBSTATUS_DEFERRED_FKS7262,346563
#define SQLITE_DBSTATUS_CACHE_USED_SHARED SQLITE_DBSTATUS_CACHE_USED_SHARED7263,346610
#define SQLITE_DBSTATUS_MAX SQLITE_DBSTATUS_MAX7264,346657
#define SQLITE_STMTSTATUS_FULLSCAN_STEP SQLITE_STMTSTATUS_FULLSCAN_STEP7330,349700
#define SQLITE_STMTSTATUS_SORT SQLITE_STMTSTATUS_SORT7331,349746
#define SQLITE_STMTSTATUS_AUTOINDEX SQLITE_STMTSTATUS_AUTOINDEX7332,349792
#define SQLITE_STMTSTATUS_VM_STEP SQLITE_STMTSTATUS_VM_STEP7333,349838
typedef struct sqlite3_pcache sqlite3_pcache;sqlite3_pcache7346,350259
typedef struct sqlite3_pcache_page sqlite3_pcache_page;sqlite3_pcache_page7358,350676
struct sqlite3_pcache_page {sqlite3_pcache_page7359,350732
  void *pBuf;        /* The content of the page */pBuf7360,350761
  void *pExtra;      /* Extra information associated with the page */pExtra7361,350812
typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;sqlite3_pcache_methods27523,359040
struct sqlite3_pcache_methods2 {sqlite3_pcache_methods27524,359104
  int iVersion;iVersion7525,359137
  void *pArg;pArg7526,359153
  int (*xInit)(void*);xInit7527,359167
  void (*xShutdown)(void*);xShutdown7528,359190
  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);xCreate7529,359218
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize7530,359289
  int (*xPagecount)(sqlite3_pcache*);xPagecount7531,359344
  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch7532,359382
  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);xUnpin7533,359463
  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, xRekey7534,359533
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate7536,359631
  void (*xDestroy)(sqlite3_pcache*);xDestroy7537,359686
  void (*xShrink)(sqlite3_pcache*);xShrink7538,359723
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;sqlite3_pcache_methods7546,359981
struct sqlite3_pcache_methods {sqlite3_pcache_methods7547,360043
  void *pArg;pArg7548,360075
  int (*xInit)(void*);xInit7549,360089
  void (*xShutdown)(void*);xShutdown7550,360112
  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);xCreate7551,360140
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize7552,360198
  int (*xPagecount)(sqlite3_pcache*);xPagecount7553,360253
  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch7554,360291
  void (*xUnpin)(sqlite3_pcache*, void*, int discard);xUnpin7555,360357
  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);xRekey7556,360412
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate7557,360488
  void (*xDestroy)(sqlite3_pcache*);xDestroy7558,360543
typedef struct sqlite3_backup sqlite3_backup;sqlite3_backup7572,360920
#define SQLITE_CHECKPOINT_PASSIVE SQLITE_CHECKPOINT_PASSIVE8169,391275
#define SQLITE_CHECKPOINT_FULL SQLITE_CHECKPOINT_FULL8170,391355
#define SQLITE_CHECKPOINT_RESTART SQLITE_CHECKPOINT_RESTART8171,391433
#define SQLITE_CHECKPOINT_TRUNCATE SQLITE_CHECKPOINT_TRUNCATE8172,391512
#define SQLITE_VTAB_CONSTRAINT_SUPPORT SQLITE_VTAB_CONSTRAINT_SUPPORT8229,394179
#define SQLITE_ROLLBACK SQLITE_ROLLBACK8255,395209
#define SQLITE_FAIL SQLITE_FAIL8257,395311
#define SQLITE_REPLACE SQLITE_REPLACE8259,395389
#define SQLITE_SCANSTAT_NLOOP SQLITE_SCANSTAT_NLOOP8308,397710
#define SQLITE_SCANSTAT_NVISIT SQLITE_SCANSTAT_NVISIT8309,397745
#define SQLITE_SCANSTAT_EST SQLITE_SCANSTAT_EST8310,397780
#define SQLITE_SCANSTAT_NAME SQLITE_SCANSTAT_NAME8311,397815
#define SQLITE_SCANSTAT_EXPLAIN SQLITE_SCANSTAT_EXPLAIN8312,397850
#define SQLITE_SCANSTAT_SELECTID SQLITE_SCANSTAT_SELECTID8313,397885
typedef struct sqlite3_snapshot sqlite3_snapshot;sqlite3_snapshot8530,408538
# undef doubledouble8641,413045
#define _SQLITE3RTREE_H__SQLITE3RTREE_H_8664,413592
typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;sqlite3_rtree_geometry8671,413646
typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;sqlite3_rtree_query_info8672,413708
  typedef sqlite3_int64 sqlite3_rtree_dbl;sqlite3_rtree_dbl8678,413915
  typedef double sqlite3_rtree_dbl;sqlite3_rtree_dbl8680,413964
struct sqlite3_rtree_geometry {sqlite3_rtree_geometry8701,414530
  void *pContext;                 /* Copy of pContext passed to s_r_g_c() */pContext8702,414562
  int nParam;                     /* Size of array aParam[] */nParam8703,414639
  sqlite3_rtree_dbl *aParam;      /* Parameters passed to SQL geom function */aParam8704,414702
  void *pUser;                    /* Callback implementation user data */pUser8705,414781
  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */xDelUser8706,414855
struct sqlite3_rtree_query_info {sqlite3_rtree_query_info8733,415662
  void *pContext;                   /* pContext from when function registered */pContext8734,415696
  int nParam;                       /* Number of function parameters */nParam8735,415777
  sqlite3_rtree_dbl *aParam;        /* value of function parameters */aParam8736,415849
  void *pUser;                      /* callback can use this, if desired */pUser8737,415920
  void (*xDelUser)(void*);          /* function to free pUser */xDelUser8738,415996
  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check */aCoord8739,416061
  unsigned int *anQueue;            /* Number of pending entries in the queue */anQueue8740,416141
  int nCoord;                       /* Number of coordinates */nCoord8741,416222
  int iLevel;                       /* Level of current node or entry */iLevel8742,416286
  int mxLevel;                      /* The largest iLevel value in the tree */mxLevel8743,416359
  sqlite3_int64 iRowid;             /* Rowid for current entry */iRowid8744,416438
  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */rParentScore8745,416504
  int eParentWithin;                /* Visibility of parent node */eParentWithin8746,416567
  int eWithin;                      /* OUT: Visiblity */eWithin8747,416635
  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */rScore8748,416692
  sqlite3_value **apSqlParam;       /* Original SQL values of parameters */apSqlParam8750,416828
#define NOT_WITHIN NOT_WITHIN8756,416984
#define PARTLY_WITHIN PARTLY_WITHIN8757,417061
#define FULLY_WITHIN FULLY_WITHIN8758,417135
#define __SQLITESESSION_H_ __SQLITESESSION_H_8771,417467
typedef struct sqlite3_session sqlite3_session;sqlite3_session8784,417618
typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;sqlite3_changeset_iter8789,417712
typedef struct sqlite3_changegroup sqlite3_changegroup;sqlite3_changegroup9499,450238
#define SQLITE_CHANGESET_DATA SQLITE_CHANGESET_DATA9857,467843
#define SQLITE_CHANGESET_NOTFOUND SQLITE_CHANGESET_NOTFOUND9858,467882
#define SQLITE_CHANGESET_CONFLICT SQLITE_CHANGESET_CONFLICT9859,467921
#define SQLITE_CHANGESET_CONSTRAINT SQLITE_CHANGESET_CONSTRAINT9860,467960
#define SQLITE_CHANGESET_FOREIGN_KEY SQLITE_CHANGESET_FOREIGN_KEY9861,467999
#define SQLITE_CHANGESET_OMIT SQLITE_CHANGESET_OMIT9894,469436
#define SQLITE_CHANGESET_REPLACE SQLITE_CHANGESET_REPLACE9895,469474
#define SQLITE_CHANGESET_ABORT SQLITE_CHANGESET_ABORT9896,469512
#define _FTS5_H_FTS5_H10073,476452
typedef struct Fts5ExtensionApi Fts5ExtensionApi;Fts5ExtensionApi10087,476731
typedef struct Fts5Context Fts5Context;Fts5Context10088,476781
typedef struct Fts5PhraseIter Fts5PhraseIter;Fts5PhraseIter10089,476821
typedef void (*fts5_extension_function)(fts5_extension_function10091,476868
struct Fts5PhraseIter {Fts5PhraseIter10099,477281
  const unsigned char *a;a10100,477305
  const unsigned char *b;b10101,477331
struct Fts5ExtensionApi {Fts5ExtensionApi10319,486992
  int iVersion;                   /* Currently always set to 3 */iVersion10320,487018
  void *(*xUserData)(Fts5Context*);xUserData10322,487085
  int (*xColumnCount)(Fts5Context*);xColumnCount10324,487122
  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);xRowCount10325,487159
  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);xColumnTotalSize10326,487215
  int (*xTokenize)(Fts5Context*, xTokenize10328,487291
  int (*xPhraseCount)(Fts5Context*);xPhraseCount10334,487534
  int (*xPhraseSize)(Fts5Context*, int iPhrase);xPhraseSize10335,487571
  int (*xInstCount)(Fts5Context*, int *pnInst);xInstCount10337,487621
  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);xInst10338,487669
  sqlite3_int64 (*xRowid)(Fts5Context*);xRowid10340,487749
  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);xColumnText10341,487790
  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);xColumnSize10342,487862
  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,xQueryPhrase10344,487923
  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));xSetAuxdata10347,488049
  void *(*xGetAuxdata)(Fts5Context*, int bClear);xGetAuxdata10348,488120
  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);xPhraseFirst10350,488171
  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);xPhraseNext10351,488250
  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);xPhraseFirstColumn10353,488329
  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);xPhraseNextColumn10354,488408
typedef struct Fts5Tokenizer Fts5Tokenizer;Fts5Tokenizer10553,498707
typedef struct fts5_tokenizer fts5_tokenizer;fts5_tokenizer10554,498751
struct fts5_tokenizer {fts5_tokenizer10555,498797
  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);xCreate10556,498821
  void (*xDelete)(Fts5Tokenizer*);xDelete10557,498899
  int (*xTokenize)(Fts5Tokenizer*, xTokenize10558,498934
#define FTS5_TOKENIZE_QUERY FTS5_TOKENIZE_QUERY10574,499605
#define FTS5_TOKENIZE_PREFIX FTS5_TOKENIZE_PREFIX10575,499644
#define FTS5_TOKENIZE_DOCUMENT FTS5_TOKENIZE_DOCUMENT10576,499683
#define FTS5_TOKENIZE_AUX FTS5_TOKENIZE_AUX10577,499722
#define FTS5_TOKEN_COLOCATED FTS5_TOKEN_COLOCATED10581,499896
typedef struct fts5_api fts5_api;fts5_api10590,500196
struct fts5_api {fts5_api10591,500230
  int iVersion;                   /* Currently always set to 2 */iVersion10592,500248
  int (*xCreateTokenizer)(xCreateTokenizer10595,500346
  int (*xFindTokenizer)(xFindTokenizer10604,500537
  int (*xCreateFunction)(xCreateFunction10612,500704
# define SQLITE_MAX_LENGTH SQLITE_MAX_LENGTH10669,502261
# define SQLITE_MAX_COLUMN SQLITE_MAX_COLUMN10690,503027
# define SQLITE_MAX_SQL_LENGTH SQLITE_MAX_SQL_LENGTH10701,503323
# define SQLITE_MAX_EXPR_DEPTH SQLITE_MAX_EXPR_DEPTH10715,503763
# define SQLITE_MAX_COMPOUND_SELECT SQLITE_MAX_COMPOUND_SELECT10727,504226
# define SQLITE_MAX_VDBE_OP SQLITE_MAX_VDBE_OP10735,504386
# define SQLITE_MAX_FUNCTION_ARG SQLITE_MAX_FUNCTION_ARG10742,504521
# define SQLITE_DEFAULT_CACHE_SIZE SQLITE_DEFAULT_CACHE_SIZE10755,505017
# define SQLITE_DEFAULT_WAL_AUTOCHECKPOINT SQLITE_DEFAULT_WAL_AUTOCHECKPOINT10763,505227
# define SQLITE_MAX_ATTACHED SQLITE_MAX_ATTACHED10773,505610
# define SQLITE_MAX_VARIABLE_NUMBER SQLITE_MAX_VARIABLE_NUMBER10781,505761
# undef SQLITE_MAX_PAGE_SIZESQLITE_MAX_PAGE_SIZE10796,506485
#define SQLITE_MAX_PAGE_SIZE SQLITE_MAX_PAGE_SIZE10798,506521
# define SQLITE_DEFAULT_PAGE_SIZE SQLITE_DEFAULT_PAGE_SIZE10805,506637
# undef SQLITE_DEFAULT_PAGE_SIZESQLITE_DEFAULT_PAGE_SIZE10808,506733
# define SQLITE_DEFAULT_PAGE_SIZE SQLITE_DEFAULT_PAGE_SIZE10809,506766
# define SQLITE_MAX_DEFAULT_PAGE_SIZE SQLITE_MAX_DEFAULT_PAGE_SIZE10820,507192
# undef SQLITE_MAX_DEFAULT_PAGE_SIZESQLITE_MAX_DEFAULT_PAGE_SIZE10823,507296
# define SQLITE_MAX_DEFAULT_PAGE_SIZE SQLITE_MAX_DEFAULT_PAGE_SIZE10824,507333
# define SQLITE_MAX_PAGE_COUNT SQLITE_MAX_PAGE_COUNT10836,507654
# define SQLITE_MAX_LIKE_PATTERN_LENGTH SQLITE_MAX_LIKE_PATTERN_LENGTH10844,507824
# define SQLITE_MAX_TRIGGER_DEPTH SQLITE_MAX_TRIGGER_DEPTH10855,508130
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR10897,509661
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT10898,509723
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR10900,509856
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT10901,509911
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR10903,510046
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT10904,510100
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR10906,510231
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT10907,510275
#  define SQLITE_NOINLINE SQLITE_NOINLINE10915,510430
#  define SQLITE_NOINLINE SQLITE_NOINLINE10917,510525
#  define SQLITE_NOINLINESQLITE_NOINLINE10919,510579
#   define SQLITE_THREADSAFE SQLITE_THREADSAFE10953,511675
#   define SQLITE_THREADSAFE SQLITE_THREADSAFE10955,511722
# define SQLITE_POWERSAFE_OVERWRITE SQLITE_POWERSAFE_OVERWRITE10964,511964
# define SQLITE_DEFAULT_MEMSTATUS SQLITE_DEFAULT_MEMSTATUS10973,512269
# define SQLITE_SYSTEM_MALLOC SQLITE_SYSTEM_MALLOC11006,513564
# define SQLITE_MALLOC_SOFT_LIMIT SQLITE_MALLOC_SOFT_LIMIT11014,513778
#  define _XOPEN_SOURCE _XOPEN_SOURCE11024,514111
# define NDEBUG NDEBUG11039,514693
# undef NDEBUGNDEBUG11042,514763
# define SQLITE_ENABLE_EXPLAIN_COMMENTS SQLITE_ENABLE_EXPLAIN_COMMENTS11049,514933
# define testcase(testcase11068,515753
# define testcase(testcase11070,515819
# define TESTONLY(TESTONLY11079,516079
# define TESTONLY(TESTONLY11081,516109
# define VVA_ONLY(VVA_ONLY11093,516589
# define VVA_ONLY(VVA_ONLY11095,516619
# define ALWAYS(ALWAYS11114,517398
# define NEVER(NEVER11115,517426
# define ALWAYS(ALWAYS11117,517477
# define NEVER(NEVER11118,517523
# define ALWAYS(ALWAYS11120,517575
# define NEVER(NEVER11121,517603
# define ONLY_IF_REALLOC_STRESS(ONLY_IF_REALLOC_STRESS11132,518054
# define ONLY_IF_REALLOC_STRESS(ONLY_IF_REALLOC_STRESS11134,518117
# define ONLY_IF_REALLOC_STRESS(ONLY_IF_REALLOC_STRESS11136,518181
# define OSTRACE(OSTRACE11145,518439
# define SQLITE_HAVE_OS_TRACESQLITE_HAVE_OS_TRACE11146,518510
# define OSTRACE(OSTRACE11148,518546
# undef  SQLITE_HAVE_OS_TRACESQLITE_HAVE_OS_TRACE11149,518566
# define SQLITE_NEED_ERR_NAMESQLITE_NEED_ERR_NAME11160,518953
# undef  SQLITE_NEED_ERR_NAMESQLITE_NEED_ERR_NAME11162,518989
# undef SQLITE_ENABLE_EXPLAIN_COMMENTSSQLITE_ENABLE_EXPLAIN_COMMENTS11169,519135
#define IS_BIG_INT(IS_BIG_INT11177,519401
#define likely(likely11186,519769
#define unlikely(unlikely11187,519794
#define SQLITE_HASH_HSQLITE_HASH_H11206,520468
typedef struct Hash Hash;Hash11209,520533
typedef struct HashElem HashElem;HashElem11210,520559
struct Hash {Hash11233,521674
  unsigned int htsize;      /* Number of buckets in the hash table */htsize11234,521688
  unsigned int count;       /* Number of entries in this table */count11235,521758
  HashElem *first;          /* The first element of the array */first11236,521824
  struct _ht {              /* the hash table */_ht11237,521889
    int count;                 /* Number of entries with this hash */count11238,521938
    HashElem *chain;           /* Pointer to first entry with this hash */chain11239,522008
  } *ht;ht11240,522083
struct HashElem {HashElem11249,522354
  HashElem *next, *prev;       /* Next and previous elements in the table */next11250,522372
  HashElem *next, *prev;       /* Next and previous elements in the table */prev11250,522372
  void *data;                  /* Data associated with this element */data11251,522449
  const char *pKey;            /* Key associated with this element */pKey11252,522520
#define sqliteHashFirst(sqliteHashFirst11275,523173
#define sqliteHashNext(sqliteHashNext11276,523214
#define sqliteHashData(sqliteHashData11277,523254
#define TK_SEMI TK_SEMI11292,523864
#define TK_EXPLAIN TK_EXPLAIN11293,523910
#define TK_QUERY TK_QUERY11294,523956
#define TK_PLAN TK_PLAN11295,524002
#define TK_BEGIN TK_BEGIN11296,524048
#define TK_TRANSACTION TK_TRANSACTION11297,524094
#define TK_DEFERRED TK_DEFERRED11298,524140
#define TK_IMMEDIATE TK_IMMEDIATE11299,524186
#define TK_EXCLUSIVE TK_EXCLUSIVE11300,524232
#define TK_COMMIT TK_COMMIT11301,524278
#define TK_END TK_END11302,524324
#define TK_ROLLBACK TK_ROLLBACK11303,524370
#define TK_SAVEPOINT TK_SAVEPOINT11304,524416
#define TK_RELEASE TK_RELEASE11305,524462
#define TK_TO TK_TO11306,524508
#define TK_TABLE TK_TABLE11307,524554
#define TK_CREATE TK_CREATE11308,524600
#define TK_IF TK_IF11309,524646
#define TK_NOT TK_NOT11310,524692
#define TK_EXISTS TK_EXISTS11311,524738
#define TK_TEMP TK_TEMP11312,524784
#define TK_LP TK_LP11313,524830
#define TK_RP TK_RP11314,524876
#define TK_AS TK_AS11315,524922
#define TK_WITHOUT TK_WITHOUT11316,524968
#define TK_COMMA TK_COMMA11317,525014
#define TK_OR TK_OR11318,525060
#define TK_AND TK_AND11319,525106
#define TK_IS TK_IS11320,525152
#define TK_MATCH TK_MATCH11321,525198
#define TK_LIKE_KW TK_LIKE_KW11322,525244
#define TK_BETWEEN TK_BETWEEN11323,525290
#define TK_IN TK_IN11324,525336
#define TK_ISNULL TK_ISNULL11325,525382
#define TK_NOTNULL TK_NOTNULL11326,525428
#define TK_NE TK_NE11327,525474
#define TK_EQ TK_EQ11328,525520
#define TK_GT TK_GT11329,525566
#define TK_LE TK_LE11330,525612
#define TK_LT TK_LT11331,525658
#define TK_GE TK_GE11332,525704
#define TK_ESCAPE TK_ESCAPE11333,525750
#define TK_BITAND TK_BITAND11334,525796
#define TK_BITOR TK_BITOR11335,525842
#define TK_LSHIFT TK_LSHIFT11336,525888
#define TK_RSHIFT TK_RSHIFT11337,525934
#define TK_PLUS TK_PLUS11338,525980
#define TK_MINUS TK_MINUS11339,526026
#define TK_STAR TK_STAR11340,526072
#define TK_SLASH TK_SLASH11341,526118
#define TK_REM TK_REM11342,526164
#define TK_CONCAT TK_CONCAT11343,526210
#define TK_COLLATE TK_COLLATE11344,526256
#define TK_BITNOT TK_BITNOT11345,526302
#define TK_ID TK_ID11346,526348
#define TK_INDEXED TK_INDEXED11347,526394
#define TK_ABORT TK_ABORT11348,526440
#define TK_ACTION TK_ACTION11349,526486
#define TK_AFTER TK_AFTER11350,526532
#define TK_ANALYZE TK_ANALYZE11351,526578
#define TK_ASC TK_ASC11352,526624
#define TK_ATTACH TK_ATTACH11353,526670
#define TK_BEFORE TK_BEFORE11354,526716
#define TK_BY TK_BY11355,526762
#define TK_CASCADE TK_CASCADE11356,526808
#define TK_CAST TK_CAST11357,526854
#define TK_COLUMNKW TK_COLUMNKW11358,526900
#define TK_CONFLICT TK_CONFLICT11359,526946
#define TK_DATABASE TK_DATABASE11360,526992
#define TK_DESC TK_DESC11361,527038
#define TK_DETACH TK_DETACH11362,527084
#define TK_EACH TK_EACH11363,527130
#define TK_FAIL TK_FAIL11364,527176
#define TK_FOR TK_FOR11365,527222
#define TK_IGNORE TK_IGNORE11366,527268
#define TK_INITIALLY TK_INITIALLY11367,527314
#define TK_INSTEAD TK_INSTEAD11368,527360
#define TK_NO TK_NO11369,527406
#define TK_KEY TK_KEY11370,527452
#define TK_OF TK_OF11371,527498
#define TK_OFFSET TK_OFFSET11372,527544
#define TK_PRAGMA TK_PRAGMA11373,527590
#define TK_RAISE TK_RAISE11374,527636
#define TK_RECURSIVE TK_RECURSIVE11375,527682
#define TK_REPLACE TK_REPLACE11376,527728
#define TK_RESTRICT TK_RESTRICT11377,527774
#define TK_ROW TK_ROW11378,527820
#define TK_TRIGGER TK_TRIGGER11379,527866
#define TK_VACUUM TK_VACUUM11380,527912
#define TK_VIEW TK_VIEW11381,527958
#define TK_VIRTUAL TK_VIRTUAL11382,528004
#define TK_WITH TK_WITH11383,528050
#define TK_REINDEX TK_REINDEX11384,528096
#define TK_RENAME TK_RENAME11385,528142
#define TK_CTIME_KW TK_CTIME_KW11386,528188
#define TK_ANY TK_ANY11387,528234
#define TK_STRING TK_STRING11388,528280
#define TK_JOIN_KW TK_JOIN_KW11389,528326
#define TK_CONSTRAINT TK_CONSTRAINT11390,528372
#define TK_DEFAULT TK_DEFAULT11391,528418
#define TK_NULL TK_NULL11392,528464
#define TK_PRIMARY TK_PRIMARY11393,528510
#define TK_UNIQUE TK_UNIQUE11394,528556
#define TK_CHECK TK_CHECK11395,528602
#define TK_REFERENCES TK_REFERENCES11396,528648
#define TK_AUTOINCR TK_AUTOINCR11397,528694
#define TK_ON TK_ON11398,528740
#define TK_INSERT TK_INSERT11399,528786
#define TK_DELETE TK_DELETE11400,528832
#define TK_UPDATE TK_UPDATE11401,528878
#define TK_SET TK_SET11402,528924
#define TK_DEFERRABLE TK_DEFERRABLE11403,528970
#define TK_FOREIGN TK_FOREIGN11404,529016
#define TK_DROP TK_DROP11405,529062
#define TK_UNION TK_UNION11406,529108
#define TK_ALL TK_ALL11407,529154
#define TK_EXCEPT TK_EXCEPT11408,529200
#define TK_INTERSECT TK_INTERSECT11409,529246
#define TK_SELECT TK_SELECT11410,529292
#define TK_VALUES TK_VALUES11411,529338
#define TK_DISTINCT TK_DISTINCT11412,529384
#define TK_DOT TK_DOT11413,529430
#define TK_FROM TK_FROM11414,529476
#define TK_JOIN TK_JOIN11415,529522
#define TK_USING TK_USING11416,529568
#define TK_ORDER TK_ORDER11417,529614
#define TK_GROUP TK_GROUP11418,529660
#define TK_HAVING TK_HAVING11419,529706
#define TK_LIMIT TK_LIMIT11420,529752
#define TK_WHERE TK_WHERE11421,529798
#define TK_INTO TK_INTO11422,529844
#define TK_FLOAT TK_FLOAT11423,529890
#define TK_BLOB TK_BLOB11424,529936
#define TK_INTEGER TK_INTEGER11425,529982
#define TK_VARIABLE TK_VARIABLE11426,530028
#define TK_CASE TK_CASE11427,530074
#define TK_WHEN TK_WHEN11428,530120
#define TK_THEN TK_THEN11429,530166
#define TK_ELSE TK_ELSE11430,530212
#define TK_INDEX TK_INDEX11431,530258
#define TK_ALTER TK_ALTER11432,530304
#define TK_ADD TK_ADD11433,530350
#define TK_TO_TEXT TK_TO_TEXT11434,530396
#define TK_TO_BLOB TK_TO_BLOB11435,530442
#define TK_TO_NUMERIC TK_TO_NUMERIC11436,530488
#define TK_TO_INT TK_TO_INT11437,530534
#define TK_TO_REAL TK_TO_REAL11438,530580
#define TK_ISNOT TK_ISNOT11439,530626
#define TK_END_OF_FILE TK_END_OF_FILE11440,530672
#define TK_UNCLOSED_STRING TK_UNCLOSED_STRING11441,530718
#define TK_FUNCTION TK_FUNCTION11442,530764
#define TK_COLUMN TK_COLUMN11443,530810
#define TK_AGG_FUNCTION TK_AGG_FUNCTION11444,530856
#define TK_AGG_COLUMN TK_AGG_COLUMN11445,530902
#define TK_UMINUS TK_UMINUS11446,530948
#define TK_UPLUS TK_UPLUS11447,530994
#define TK_REGISTER TK_REGISTER11448,531040
#define TK_VECTOR TK_VECTOR11449,531086
#define TK_SELECT_COLUMN TK_SELECT_COLUMN11450,531132
#define TK_ASTERISK TK_ASTERISK11451,531178
#define TK_SPAN TK_SPAN11452,531224
#define TK_SPACE TK_SPACE11453,531270
#define TK_ILLEGAL TK_ILLEGAL11454,531316
#define TKFLG_MASK TKFLG_MASK11457,531414
#define TKFLG_DONTFOLD TKFLG_DONTFOLD11461,531537
# define double double11476,532024
# define float float11477,532053
# define LONGDOUBLE_TYPE LONGDOUBLE_TYPE11478,532081
#   define SQLITE_BIG_DBL SQLITE_BIG_DBL11480,532143
# define SQLITE_OMIT_DATETIME_FUNCS SQLITE_OMIT_DATETIME_FUNCS11482,532202
# define SQLITE_OMIT_TRACE SQLITE_OMIT_TRACE11483,532240
# undef SQLITE_MIXED_ENDIAN_64BIT_FLOATSQLITE_MIXED_ENDIAN_64BIT_FLOAT11484,532269
# undef SQLITE_HAVE_ISNANSQLITE_HAVE_ISNAN11485,532309
# define SQLITE_BIG_DBL SQLITE_BIG_DBL11488,532365
#define OMIT_TEMPDB OMIT_TEMPDB11497,532638
#define OMIT_TEMPDB OMIT_TEMPDB11499,532666
#define SQLITE_MAX_FILE_FORMAT SQLITE_MAX_FILE_FORMAT11508,532948
# define SQLITE_DEFAULT_FILE_FORMAT SQLITE_DEFAULT_FILE_FORMAT11510,533016
# define SQLITE_DEFAULT_RECURSIVE_TRIGGERS SQLITE_DEFAULT_RECURSIVE_TRIGGERS11518,533218
# define SQLITE_TEMP_STORE SQLITE_TEMP_STORE11526,533403
# define SQLITE_TEMP_STORE_xc SQLITE_TEMP_STORE_xc11527,533432
# undef SQLITE_MAX_WORKER_THREADSSQLITE_MAX_WORKER_THREADS11536,533706
# define SQLITE_MAX_WORKER_THREADS SQLITE_MAX_WORKER_THREADS11537,533740
# define SQLITE_MAX_WORKER_THREADS SQLITE_MAX_WORKER_THREADS11540,533818
# define SQLITE_DEFAULT_WORKER_THREADS SQLITE_DEFAULT_WORKER_THREADS11543,533900
# undef SQLITE_MAX_WORKER_THREADSSQLITE_MAX_WORKER_THREADS11546,534008
# define SQLITE_MAX_WORKER_THREADS SQLITE_MAX_WORKER_THREADS11547,534042
# define SQLITE_DEFAULT_PCACHE_INITSZ SQLITE_DEFAULT_PCACHE_INITSZ11557,534451
#define offsetof(offsetof11565,534605
# define MIN(MIN11572,534762
# define MAX(MAX11575,534817
#define SWAP(SWAP11581,534901
# define SQLITE_EBCDIC SQLITE_EBCDIC11588,535098
# define SQLITE_ASCII SQLITE_ASCII11590,535129
#  define UINT32_TYPE UINT32_TYPE11602,535476
#  define UINT32_TYPE UINT32_TYPE11604,535514
#  define UINT16_TYPE UINT16_TYPE11609,535606
#  define UINT16_TYPE UINT16_TYPE11611,535644
#  define INT16_TYPE INT16_TYPE11616,535740
#  define INT16_TYPE INT16_TYPE11618,535776
#  define UINT8_TYPE UINT8_TYPE11623,535862
#  define UINT8_TYPE UINT8_TYPE11625,535898
#  define INT8_TYPE INT8_TYPE11630,535986
#  define INT8_TYPE INT8_TYPE11632,536020
# define LONGDOUBLE_TYPE LONGDOUBLE_TYPE11636,536091
typedef sqlite_int64 i64;          /* 8-byte signed integer */i6411638,536135
typedef sqlite_uint64 u64;         /* 8-byte unsigned integer */u6411639,536198
typedef UINT32_TYPE u32;           /* 4-byte unsigned integer */u3211640,536263
typedef UINT16_TYPE u16;           /* 2-byte unsigned integer */u1611641,536328
typedef INT16_TYPE i16;            /* 2-byte signed integer */i1611642,536393
typedef UINT8_TYPE u8;             /* 1-byte unsigned integer */u811643,536456
typedef INT8_TYPE i8;              /* 1-byte signed integer */i811644,536521
#define SQLITE_MAX_U32 SQLITE_MAX_U3211652,536857
 typedef u64 tRowcnt;    /* 64-bit only if requested at compile-time */tRowcnt11661,537179
 typedef u32 tRowcnt;    /* 32-bit is the default */tRowcnt11663,537257
typedef INT16_TYPE LogEst;LogEst11689,538311
#   define SQLITE_PTRSIZE SQLITE_PTRSIZE11696,538469
#   define SQLITE_PTRSIZE SQLITE_PTRSIZE11699,538656
#   define SQLITE_PTRSIZE SQLITE_PTRSIZE11701,538691
  typedef uintptr_t uptr;uptr11708,538836
  typedef u32 uptr;uptr11710,538886
  typedef u64 uptr;uptr11712,538912
#define SQLITE_WITHIN(SQLITE_WITHIN11723,539258
# define SQLITE_BYTEORDER SQLITE_BYTEORDER11739,539988
# define SQLITE_BIGENDIAN SQLITE_BIGENDIAN11740,540022
# define SQLITE_LITTLEENDIAN SQLITE_LITTLEENDIAN11741,540053
# define SQLITE_UTF16NATIVE SQLITE_UTF16NATIVE11742,540084
# define SQLITE_BYTEORDER SQLITE_BYTEORDER11746,540224
# define SQLITE_BIGENDIAN SQLITE_BIGENDIAN11747,540258
# define SQLITE_LITTLEENDIAN SQLITE_LITTLEENDIAN11748,540289
# define SQLITE_UTF16NATIVE SQLITE_UTF16NATIVE11749,540320
  const int sqlite3one = 1;sqlite3one11753,540430
# define SQLITE_BYTEORDER SQLITE_BYTEORDER11757,540504
# define SQLITE_BIGENDIAN SQLITE_BIGENDIAN11758,540579
# define SQLITE_LITTLEENDIAN SQLITE_LITTLEENDIAN11759,540636
# define SQLITE_UTF16NATIVE SQLITE_UTF16NATIVE11760,540693
#define LARGEST_INT64 LARGEST_INT6411768,540947
#define SMALLEST_INT64 SMALLEST_INT6411769,541007
#define ROUND8(ROUND811775,541188
#define ROUNDDOWN8(ROUNDDOWN811780,541273
# define EIGHT_BYTE_ALIGNMENT(EIGHT_BYTE_ALIGNMENT11792,541716
# define EIGHT_BYTE_ALIGNMENT(EIGHT_BYTE_ALIGNMENT11794,541790
# undef SQLITE_MAX_MMAP_SIZESQLITE_MAX_MMAP_SIZE11801,541979
# define SQLITE_MAX_MMAP_SIZE SQLITE_MAX_MMAP_SIZE11802,542008
#   define SQLITE_MAX_MMAP_SIZE SQLITE_MAX_MMAP_SIZE11818,542387
#   define SQLITE_MAX_MMAP_SIZE SQLITE_MAX_MMAP_SIZE11820,542455
# define SQLITE_MAX_MMAP_SIZE_xc SQLITE_MAX_MMAP_SIZE_xc11822,542497
# define SQLITE_DEFAULT_MMAP_SIZE SQLITE_DEFAULT_MMAP_SIZE11831,542790
# define SQLITE_DEFAULT_MMAP_SIZE_xc SQLITE_DEFAULT_MMAP_SIZE_xc11832,542826
# undef SQLITE_DEFAULT_MMAP_SIZESQLITE_DEFAULT_MMAP_SIZE11835,542950
# define SQLITE_DEFAULT_MMAP_SIZE SQLITE_DEFAULT_MMAP_SIZE11836,542983
# undef SQLITE_ENABLE_STAT3SQLITE_ENABLE_STAT311845,543266
# define SQLITE_ENABLE_STAT3_OR_STAT4 SQLITE_ENABLE_STAT3_OR_STAT411846,543294
# define SQLITE_ENABLE_STAT3_OR_STAT4 SQLITE_ENABLE_STAT3_OR_STAT411848,543360
# undef SQLITE_ENABLE_STAT3_OR_STAT4SQLITE_ENABLE_STAT3_OR_STAT411850,543435
# define SELECTTRACE_ENABLED SELECTTRACE_ENABLED11858,543681
# define SELECTTRACE_ENABLED SELECTTRACE_ENABLED11860,543718
typedef struct BusyHandler BusyHandler;BusyHandler11872,544152
struct BusyHandler {BusyHandler11873,544192
  int (*xFunc)(void *,int);  /* The busy callback */xFunc11874,544213
  void *pArg;                /* First arg to busy callback */pArg11875,544266
  int nBusy;                 /* Incremented with each busy call */nBusy11876,544328
#define MASTER_NAME MASTER_NAME11884,544563
#define TEMP_MASTER_NAME TEMP_MASTER_NAME11885,544605
#define MASTER_ROOT MASTER_ROOT11890,544706
#define SCHEMA_TABLE(SCHEMA_TABLE11895,544774
#define ArraySize(ArraySize11901,544935
#define IsPowerOfTwo(IsPowerOfTwo11906,545045
#define SQLITE_DYNAMIC SQLITE_DYNAMIC11916,545472
  #define SQLITE_WSD SQLITE_WSD11933,546348
  #define GLOBAL(GLOBAL11934,546375
  #define sqlite3GlobalConfig sqlite3GlobalConfig11935,546445
  #define SQLITE_WSDSQLITE_WSD11939,546623
  #define GLOBAL(GLOBAL11940,546644
  #define sqlite3GlobalConfig sqlite3GlobalConfig11941,546668
#define UNUSED_PARAMETER(UNUSED_PARAMETER11960,547646
#define UNUSED_PARAMETER2(UNUSED_PARAMETER211961,547684
typedef struct AggInfo AggInfo;AggInfo11966,547798
typedef struct AuthContext AuthContext;AuthContext11967,547830
typedef struct AutoincInfo AutoincInfo;AutoincInfo11968,547870
typedef struct Bitvec Bitvec;Bitvec11969,547910
typedef struct CollSeq CollSeq;CollSeq11970,547940
typedef struct Column Column;Column11971,547972
typedef struct Db Db;Db11972,548002
typedef struct Schema Schema;Schema11973,548024
typedef struct Expr Expr;Expr11974,548054
typedef struct ExprList ExprList;ExprList11975,548080
typedef struct ExprSpan ExprSpan;ExprSpan11976,548114
typedef struct FKey FKey;FKey11977,548148
typedef struct FuncDestructor FuncDestructor;FuncDestructor11978,548174
typedef struct FuncDef FuncDef;FuncDef11979,548220
typedef struct FuncDefHash FuncDefHash;FuncDefHash11980,548252
typedef struct IdList IdList;IdList11981,548292
typedef struct Index Index;Index11982,548322
typedef struct IndexSample IndexSample;IndexSample11983,548350
typedef struct KeyClass KeyClass;KeyClass11984,548390
typedef struct KeyInfo KeyInfo;KeyInfo11985,548424
typedef struct Lookaside Lookaside;Lookaside11986,548456
typedef struct LookasideSlot LookasideSlot;LookasideSlot11987,548492
typedef struct Module Module;Module11988,548536
typedef struct NameContext NameContext;NameContext11989,548566
typedef struct Parse Parse;Parse11990,548606
typedef struct PreUpdate PreUpdate;PreUpdate11991,548634
typedef struct PrintfArguments PrintfArguments;PrintfArguments11992,548670
typedef struct RowSet RowSet;RowSet11993,548718
typedef struct Savepoint Savepoint;Savepoint11994,548748
typedef struct Select Select;Select11995,548784
typedef struct SQLiteThread SQLiteThread;SQLiteThread11996,548814
typedef struct SelectDest SelectDest;SelectDest11997,548856
typedef struct SrcList SrcList;SrcList11998,548894
typedef struct StrAccum StrAccum;StrAccum11999,548926
typedef struct Table Table;Table12000,548960
typedef struct TableLock TableLock;TableLock12001,548988
typedef struct Token Token;Token12002,549024
typedef struct TreeView TreeView;TreeView12003,549052
typedef struct Trigger Trigger;Trigger12004,549086
typedef struct TriggerPrg TriggerPrg;TriggerPrg12005,549118
typedef struct TriggerStep TriggerStep;TriggerStep12006,549156
typedef struct UnpackedRecord UnpackedRecord;UnpackedRecord12007,549196
typedef struct VTable VTable;VTable12008,549242
typedef struct VtabCtx VtabCtx;VtabCtx12009,549272
typedef struct Walker Walker;Walker12010,549304
typedef struct WhereInfo WhereInfo;WhereInfo12011,549334
typedef struct With With;With12012,549370
#define SQLITE_BTREE_HSQLITE_BTREE_H12037,550325
#define SQLITE_N_BTREE_META SQLITE_N_BTREE_META12042,550449
  #define SQLITE_DEFAULT_AUTOVACUUM SQLITE_DEFAULT_AUTOVACUUM12049,550667
#define BTREE_AUTOVACUUM_NONE BTREE_AUTOVACUUM_NONE12052,550713
#define BTREE_AUTOVACUUM_FULL BTREE_AUTOVACUUM_FULL12053,550780
#define BTREE_AUTOVACUUM_INCR BTREE_AUTOVACUUM_INCR12054,550845
typedef struct Btree Btree;Btree12059,550953
typedef struct BtCursor BtCursor;BtCursor12060,550981
typedef struct BtShared BtShared;BtShared12061,551015
typedef struct BtreePayload BtreePayload;BtreePayload12062,551049
#define BTREE_OMIT_JOURNAL BTREE_OMIT_JOURNAL12080,551664
#define BTREE_MEMORY BTREE_MEMORY12081,551741
#define BTREE_SINGLE BTREE_SINGLE12082,551802
#define BTREE_UNORDERED BTREE_UNORDERED12083,551874
#define BTREE_INTKEY BTREE_INTKEY12134,554427
#define BTREE_BLOBKEY BTREE_BLOBKEY12135,554505
#define BTREE_FREE_PAGE_COUNT BTREE_FREE_PAGE_COUNT12164,555783
#define BTREE_SCHEMA_VERSION BTREE_SCHEMA_VERSION12165,555819
#define BTREE_FILE_FORMAT BTREE_FILE_FORMAT12166,555855
#define BTREE_DEFAULT_CACHE_SIZE BTREE_DEFAULT_CACHE_SIZE12167,555891
#define BTREE_LARGEST_ROOT_PAGE BTREE_LARGEST_ROOT_PAGE12168,555927
#define BTREE_TEXT_ENCODING BTREE_TEXT_ENCODING12169,555963
#define BTREE_USER_VERSION BTREE_USER_VERSION12170,555999
#define BTREE_INCR_VACUUM BTREE_INCR_VACUUM12171,556035
#define BTREE_APPLICATION_ID BTREE_APPLICATION_ID12172,556071
#define BTREE_DATA_VERSION BTREE_DATA_VERSION12173,556107
#define BTREE_HINT_RANGE BTREE_HINT_RANGE12202,557524
#define BTREE_BULKLOAD BTREE_BULKLOAD12217,558123
#define BTREE_SEEK_EQ BTREE_SEEK_EQ12218,558199
#define BTREE_WRCSR BTREE_WRCSR12243,559426
#define BTREE_FORDELETE BTREE_FORDELETE12244,559489
#define BTREE_SAVEPOSITION BTREE_SAVEPOSITION12273,560692
#define BTREE_AUXDELETE BTREE_AUXDELETE12274,560769
struct BtreePayload {BtreePayload12294,561819
  const void *pKey;       /* Key content for indexes.  NULL for tables */pKey12295,561841
  sqlite3_int64 nKey;     /* Size of pKey for indexes.  PRIMARY KEY for tabs */nKey12296,561915
  const void *pData;      /* Data for tables.  NULL for indexes */pData12297,561995
  int nData;              /* Size of pData.  0 if none. */nData12298,562062
  int nZero;              /* Extra zero data appended after pData,nData */nZero12299,562121
# define sqlite3BtreeEnter(sqlite3BtreeEnter12357,564485
# define sqlite3BtreeEnterAll(sqlite3BtreeEnterAll12358,564516
# define sqlite3BtreeSharable(sqlite3BtreeSharable12359,564549
# define sqlite3BtreeEnterCursor(sqlite3BtreeEnterCursor12360,564584
# define sqlite3BtreeConnectionCount(sqlite3BtreeConnectionCount12361,564620
# define sqlite3BtreeLeave(sqlite3BtreeLeave12376,565165
# define sqlite3BtreeLeaveCursor(sqlite3BtreeLeaveCursor12377,565195
# define sqlite3BtreeLeaveAll(sqlite3BtreeLeaveAll12378,565231
# define sqlite3BtreeHoldsMutex(sqlite3BtreeHoldsMutex12380,565265
# define sqlite3BtreeHoldsAllMutexes(sqlite3BtreeHoldsAllMutexes12381,565302
# define sqlite3SchemaMutexHeld(sqlite3SchemaMutexHeld12382,565344
#define SQLITE_VDBE_HSQLITE_VDBE_H12410,566397
typedef struct Vdbe Vdbe;Vdbe12418,566608
typedef struct Mem Mem;Mem12424,566742
typedef struct SubProgram SubProgram;SubProgram12425,566766
struct VdbeOp {VdbeOp12432,566981
  u8 opcode;          /* What operation to perform */opcode12433,566997
  signed char p4type; /* One of the P4_xxx constants for p4 */p4type12434,567051
  u8 notUsed1;notUsed112435,567114
  u8 p5;              /* Fifth parameter is an unsigned character */p512436,567129
  int p1;             /* First operand */p112437,567198
  int p2;             /* Second parameter (often the jump destination) */p212438,567240
  int p3;             /* The third parameter */p312439,567314
  union p4union {     /* fourth parameter */p4union12440,567362
    int i;                 /* Integer value if p4type==P4_INT32 */i12441,567407
    void *p;               /* Generic pointer */p12442,567474
    char *z;               /* Pointer to data for string (char array) types */z12443,567523
    i64 *pI64;             /* Used when p4type is P4_INT64 */pI6412444,567602
    double *pReal;         /* Used when p4type is P4_REAL */pReal12445,567664
    FuncDef *pFunc;        /* Used when p4type is P4_FUNCDEF */pFunc12446,567725
    sqlite3_context *pCtx; /* Used when p4type is P4_FUNCCTX */pCtx12447,567789
    CollSeq *pColl;        /* Used when p4type is P4_COLLSEQ */pColl12448,567853
    Mem *pMem;             /* Used when p4type is P4_MEM */pMem12449,567917
    VTable *pVtab;         /* Used when p4type is P4_VTAB */pVtab12450,567977
    KeyInfo *pKeyInfo;     /* Used when p4type is P4_KEYINFO */pKeyInfo12451,568038
    int *ai;               /* Used when p4type is P4_INTARRAY */ai12452,568102
    SubProgram *pProgram;  /* Used when p4type is P4_SUBPROGRAM */pProgram12453,568167
    Table *pTab;           /* Used when p4type is P4_TABLE */pTab12454,568234
    Expr *pExpr;           /* Used when p4type is P4_EXPR */pExpr12456,568330
    int (*xAdvance)(BtCursor *, int *);xAdvance12458,568398
  } p4;p412459,568438
  char *zComment;          /* Comment to improve readability */zComment12461,568484
  u32 cnt;                 /* Number of times this instruction was executed */cnt12464,568575
  u64 cycles;              /* Total time spent executing this instruction */cycles12465,568654
  int iSrcLine;            /* Source-code line that generated this opcode */iSrcLine12468,568766
typedef struct VdbeOp VdbeOp;VdbeOp12471,568853
struct SubProgram {SubProgram12477,568945
  VdbeOp *aOp;                  /* Array of opcodes for sub-program */aOp12478,568965
  int nOp;                      /* Elements in aOp[] */nOp12479,569036
  int nMem;                     /* Number of memory cells required */nMem12480,569092
  int nCsr;                     /* Number of cursors required */nCsr12481,569162
  void *token;                  /* id that may be used to recursive triggers */token12482,569227
  SubProgram *pNext;            /* Next sub-program already visited */pNext12483,569307
struct VdbeOpList {VdbeOpList12490,569492
  u8 opcode;          /* What operation to perform */opcode12491,569512
  signed char p1;     /* First operand */p112492,569566
  signed char p2;     /* Second parameter (often the jump destination) */p212493,569608
  signed char p3;     /* Third parameter */p312494,569682
typedef struct VdbeOpList VdbeOpList;VdbeOpList12496,569729
#define P4_NOTUSED P4_NOTUSED12501,569809
#define P4_DYNAMIC P4_DYNAMIC12502,569870
#define P4_STATIC P4_STATIC12503,569951
#define P4_COLLSEQ P4_COLLSEQ12504,570010
#define P4_FUNCDEF P4_FUNCDEF12505,570081
#define P4_KEYINFO P4_KEYINFO12506,570152
#define P4_EXPR P4_EXPR12507,570223
#define P4_MEM P4_MEM12508,570287
#define P4_TRANSIENT P4_TRANSIENT12509,570358
#define P4_VTAB P4_VTAB12510,570428
#define P4_MPRINTF P4_MPRINTF12511,570505
#define P4_REAL P4_REAL12512,570584
#define P4_INT64 P4_INT6412513,570652
#define P4_INT32 P4_INT3212514,570714
#define P4_INTARRAY P4_INTARRAY12515,570776
#define P4_SUBPROGRAM P4_SUBPROGRAM12516,570842
#define P4_ADVANCE P4_ADVANCE12517,570919
#define P4_TABLE P4_TABLE12518,570997
#define P4_FUNCCTX P4_FUNCCTX12519,571066
#define P5_ConstraintNotNull P5_ConstraintNotNull12522,571182
#define P5_ConstraintUnique P5_ConstraintUnique12523,571213
#define P5_ConstraintCheck P5_ConstraintCheck12524,571244
#define P5_ConstraintFK P5_ConstraintFK12525,571275
#define COLNAME_NAME COLNAME_NAME12531,571440
#define COLNAME_DECLTYPE COLNAME_DECLTYPE12532,571467
#define COLNAME_DATABASE COLNAME_DATABASE12533,571494
#define COLNAME_TABLE COLNAME_TABLE12534,571521
#define COLNAME_COLUMN COLNAME_COLUMN12535,571548
# define COLNAME_N COLNAME_N12537,571612
#   define COLNAME_N COLNAME_N12540,571716
#   define COLNAME_N COLNAME_N12542,571782
#define ADDR(ADDR12552,572107
#define OP_Savepoint OP_Savepoint12562,572540
#define OP_AutoCommit OP_AutoCommit12563,572569
#define OP_Transaction OP_Transaction12564,572598
#define OP_SorterNext OP_SorterNext12565,572627
#define OP_PrevIfOpen OP_PrevIfOpen12566,572656
#define OP_NextIfOpen OP_NextIfOpen12567,572685
#define OP_Prev OP_Prev12568,572714
#define OP_Next OP_Next12569,572743
#define OP_Checkpoint OP_Checkpoint12570,572772
#define OP_JournalMode OP_JournalMode12571,572801
#define OP_Vacuum OP_Vacuum12572,572830
#define OP_VFilter OP_VFilter12573,572859
#define OP_VUpdate OP_VUpdate12574,572937
#define OP_Goto OP_Goto12575,573015
#define OP_Gosub OP_Gosub12576,573044
#define OP_InitCoroutine OP_InitCoroutine12577,573073
#define OP_Yield OP_Yield12578,573102
#define OP_MustBeInt OP_MustBeInt12579,573131
#define OP_Jump OP_Jump12580,573160
#define OP_Not OP_Not12581,573189
#define OP_Once OP_Once12582,573267
#define OP_If OP_If12583,573296
#define OP_IfNot OP_IfNot12584,573325
#define OP_SeekLT OP_SeekLT12585,573354
#define OP_SeekLE OP_SeekLE12586,573432
#define OP_SeekGE OP_SeekGE12587,573510
#define OP_SeekGT OP_SeekGT12588,573588
#define OP_Or OP_Or12589,573666
#define OP_And OP_And12590,573749
#define OP_NoConflict OP_NoConflict12591,573833
#define OP_NotFound OP_NotFound12592,573911
#define OP_Found OP_Found12593,573989
#define OP_SeekRowid OP_SeekRowid12594,574067
#define OP_NotExists OP_NotExists12595,574145
#define OP_IsNull OP_IsNull12596,574223
#define OP_NotNull OP_NotNull12597,574310
#define OP_Ne OP_Ne12598,574398
#define OP_Eq OP_Eq12599,574476
#define OP_Gt OP_Gt12600,574554
#define OP_Le OP_Le12601,574632
#define OP_Lt OP_Lt12602,574710
#define OP_Ge OP_Ge12603,574788
#define OP_ElseNotEq OP_ElseNotEq12604,574866
#define OP_BitAnd OP_BitAnd12605,574944
#define OP_BitOr OP_BitOr12606,575026
#define OP_ShiftLeft OP_ShiftLeft12607,575107
#define OP_ShiftRight OP_ShiftRight12608,575190
#define OP_Add OP_Add12609,575273
#define OP_Subtract OP_Subtract12610,575353
#define OP_Multiply OP_Multiply12611,575434
#define OP_Divide OP_Divide12612,575514
#define OP_Remainder OP_Remainder12613,575595
#define OP_Concat OP_Concat12614,575674
#define OP_Last OP_Last12615,575756
#define OP_BitNot OP_BitNot12616,575785
#define OP_SorterSort OP_SorterSort12617,575863
#define OP_Sort OP_Sort12618,575892
#define OP_Rewind OP_Rewind12619,575921
#define OP_IdxLE OP_IdxLE12620,575950
#define OP_IdxGT OP_IdxGT12621,576028
#define OP_IdxLT OP_IdxLT12622,576106
#define OP_IdxGE OP_IdxGE12623,576184
#define OP_RowSetRead OP_RowSetRead12624,576262
#define OP_RowSetTest OP_RowSetTest12625,576340
#define OP_Program OP_Program12626,576418
#define OP_FkIfZero OP_FkIfZero12627,576447
#define OP_IfPos OP_IfPos12628,576525
#define OP_IfNotZero OP_IfNotZero12629,576605
#define OP_DecrJumpZero OP_DecrJumpZero12630,576686
#define OP_IncrVacuum OP_IncrVacuum12631,576764
#define OP_VNext OP_VNext12632,576793
#define OP_Init OP_Init12633,576822
#define OP_Return OP_Return12634,576900
#define OP_EndCoroutine OP_EndCoroutine12635,576929
#define OP_HaltIfNull OP_HaltIfNull12636,576958
#define OP_Halt OP_Halt12637,577036
#define OP_Integer OP_Integer12638,577065
#define OP_Int64 OP_Int6412639,577143
#define OP_String OP_String12640,577221
#define OP_Null OP_Null12641,577299
#define OP_SoftNull OP_SoftNull12642,577377
#define OP_Blob OP_Blob12643,577455
#define OP_Variable OP_Variable12644,577533
#define OP_Move OP_Move12645,577611
#define OP_Copy OP_Copy12646,577689
#define OP_SCopy OP_SCopy12647,577767
#define OP_IntCopy OP_IntCopy12648,577845
#define OP_ResultRow OP_ResultRow12649,577923
#define OP_CollSeq OP_CollSeq12650,578001
#define OP_Function0 OP_Function012651,578030
#define OP_Function OP_Function12652,578108
#define OP_AddImm OP_AddImm12653,578186
#define OP_RealAffinity OP_RealAffinity12654,578264
#define OP_Cast OP_Cast12655,578293
#define OP_Permutation OP_Permutation12656,578371
#define OP_Compare OP_Compare12657,578400
#define OP_Column OP_Column12658,578478
#define OP_String8 OP_String812659,578556
#define OP_Affinity OP_Affinity12660,578634
#define OP_MakeRecord OP_MakeRecord12661,578712
#define OP_Count OP_Count12662,578790
#define OP_ReadCookie OP_ReadCookie12663,578868
#define OP_SetCookie OP_SetCookie12664,578897
#define OP_ReopenIdx OP_ReopenIdx12665,578926
#define OP_OpenRead OP_OpenRead12666,579004
#define OP_OpenWrite OP_OpenWrite12667,579082
#define OP_OpenAutoindex OP_OpenAutoindex12668,579160
#define OP_OpenEphemeral OP_OpenEphemeral12669,579238
#define OP_SorterOpen OP_SorterOpen12670,579316
#define OP_SequenceTest OP_SequenceTest12671,579345
#define OP_OpenPseudo OP_OpenPseudo12672,579423
#define OP_Close OP_Close12673,579501
#define OP_ColumnsUsed OP_ColumnsUsed12674,579530
#define OP_Sequence OP_Sequence12675,579559
#define OP_NewRowid OP_NewRowid12676,579637
#define OP_Insert OP_Insert12677,579715
#define OP_InsertInt OP_InsertInt12678,579793
#define OP_Delete OP_Delete12679,579871
#define OP_ResetCount OP_ResetCount12680,579900
#define OP_SorterCompare OP_SorterCompare12681,579929
#define OP_SorterData OP_SorterData12682,580009
#define OP_RowKey OP_RowKey12683,580087
#define OP_RowData OP_RowData12684,580165
#define OP_Rowid OP_Rowid12685,580243
#define OP_NullRow OP_NullRow12686,580321
#define OP_SorterInsert OP_SorterInsert12687,580350
#define OP_IdxInsert OP_IdxInsert12688,580379
#define OP_IdxDelete OP_IdxDelete12689,580457
#define OP_Seek OP_Seek12690,580535
#define OP_IdxRowid OP_IdxRowid12691,580613
#define OP_Destroy OP_Destroy12692,580691
#define OP_Clear OP_Clear12693,580720
#define OP_Real OP_Real12694,580749
#define OP_ResetSorter OP_ResetSorter12695,580827
#define OP_CreateIndex OP_CreateIndex12696,580856
#define OP_CreateTable OP_CreateTable12697,580934
#define OP_ParseSchema OP_ParseSchema12698,581012
#define OP_LoadAnalysis OP_LoadAnalysis12699,581041
#define OP_DropTable OP_DropTable12700,581070
#define OP_DropIndex OP_DropIndex12701,581099
#define OP_DropTrigger OP_DropTrigger12702,581128
#define OP_IntegrityCk OP_IntegrityCk12703,581157
#define OP_RowSetAdd OP_RowSetAdd12704,581186
#define OP_Param OP_Param12705,581264
#define OP_FkCounter OP_FkCounter12706,581293
#define OP_MemMax OP_MemMax12707,581371
#define OP_OffsetLimit OP_OffsetLimit12708,581449
#define OP_AggStep0 OP_AggStep012709,581551
#define OP_AggStep OP_AggStep12710,581629
#define OP_AggFinal OP_AggFinal12711,581707
#define OP_Expire OP_Expire12712,581785
#define OP_TableLock OP_TableLock12713,581814
#define OP_VBegin OP_VBegin12714,581892
#define OP_VCreate OP_VCreate12715,581921
#define OP_VDestroy OP_VDestroy12716,581950
#define OP_VOpen OP_VOpen12717,581979
#define OP_VColumn OP_VColumn12718,582008
#define OP_VRename OP_VRename12719,582086
#define OP_Pagecount OP_Pagecount12720,582115
#define OP_MaxPgcnt OP_MaxPgcnt12721,582144
#define OP_CursorHint OP_CursorHint12722,582173
#define OP_Noop OP_Noop12723,582202
#define OP_Explain OP_Explain12724,582231
#define OPFLG_JUMP OPFLG_JUMP12730,582431
#define OPFLG_IN1 OPFLG_IN112731,582496
#define OPFLG_IN2 OPFLG_IN212732,582556
#define OPFLG_IN3 OPFLG_IN312733,582616
#define OPFLG_OUT2 OPFLG_OUT212734,582676
#define OPFLG_OUT3 OPFLG_OUT312735,582737
#define OPFLG_INITIALIZER OPFLG_INITIALIZER12736,582798
#define SQLITE_MX_JUMP_OPCODE SQLITE_MX_JUMP_OPCODE12765,584342
# define sqlite3VdbeVerifyNoMallocRequired(sqlite3VdbeVerifyNoMallocRequired12789,585581
typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);RecordCompare12839,588337
# define VdbeComment(VdbeComment12855,588936
# define VdbeNoopComment(VdbeNoopComment12857,589053
#   define VdbeModuleComment(VdbeModuleComment12859,589145
#   define VdbeModuleComment(VdbeModuleComment12861,589210
# define VdbeComment(VdbeComment12864,589256
# define VdbeNoopComment(VdbeNoopComment12865,589280
# define VdbeModuleComment(VdbeModuleComment12866,589308
# define VdbeCoverage(VdbeCoverage12893,590518
# define VdbeCoverageIf(VdbeCoverageIf12894,590580
# define VdbeCoverageAlwaysTaken(VdbeCoverageAlwaysTaken12895,590651
# define VdbeCoverageNeverTaken(VdbeCoverageNeverTaken12896,590718
# define VDBE_OFFSET_LINENO(VDBE_OFFSET_LINENO12897,590784
# define VdbeCoverage(VdbeCoverage12899,590834
# define VdbeCoverageIf(VdbeCoverageIf12900,590859
# define VdbeCoverageAlwaysTaken(VdbeCoverageAlwaysTaken12901,590888
# define VdbeCoverageNeverTaken(VdbeCoverageNeverTaken12902,590924
# define VDBE_OFFSET_LINENO(VDBE_OFFSET_LINENO12903,590959
# define sqlite3VdbeScanStatus(sqlite3VdbeScanStatus12909,591129
#define SQLITE_PAGER_HSQLITE_PAGER_H12935,592119
  #define SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT12943,592399
typedef u32 Pgno;Pgno12950,592590
typedef struct Pager Pager;Pager12955,592693
typedef struct PgHdr DbPage;DbPage12960,592754
#define PAGER_MJ_PGNO(PAGER_MJ_PGNO12970,593172
#define PAGER_OMIT_JOURNAL PAGER_OMIT_JOURNAL12977,593392
#define PAGER_MEMORY PAGER_MEMORY12978,593466
#define PAGER_LOCKINGMODE_QUERY PAGER_LOCKINGMODE_QUERY12983,593606
#define PAGER_LOCKINGMODE_NORMAL PAGER_LOCKINGMODE_NORMAL12984,593646
#define PAGER_LOCKINGMODE_EXCLUSIVE PAGER_LOCKINGMODE_EXCLUSIVE12985,593686
#define PAGER_JOURNALMODE_QUERY PAGER_JOURNALMODE_QUERY12994,593988
#define PAGER_JOURNALMODE_DELETE PAGER_JOURNALMODE_DELETE12995,594067
#define PAGER_JOURNALMODE_PERSIST PAGER_JOURNALMODE_PERSIST12996,594147
#define PAGER_JOURNALMODE_OFF PAGER_JOURNALMODE_OFF12997,594228
#define PAGER_JOURNALMODE_TRUNCATE PAGER_JOURNALMODE_TRUNCATE12998,594294
#define PAGER_JOURNALMODE_MEMORY PAGER_JOURNALMODE_MEMORY12999,594371
#define PAGER_JOURNALMODE_WAL PAGER_JOURNALMODE_WAL13000,594442
#define PAGER_GET_NOCONTENT PAGER_GET_NOCONTENT13005,594581
#define PAGER_GET_READONLY PAGER_GET_READONLY13006,594652
#define PAGER_SYNCHRONOUS_OFF PAGER_SYNCHRONOUS_OFF13016,594963
#define PAGER_SYNCHRONOUS_NORMAL PAGER_SYNCHRONOUS_NORMAL13017,595034
#define PAGER_SYNCHRONOUS_FULL PAGER_SYNCHRONOUS_FULL13018,595108
#define PAGER_SYNCHRONOUS_EXTRA PAGER_SYNCHRONOUS_EXTRA13019,595180
#define PAGER_SYNCHRONOUS_MASK PAGER_SYNCHRONOUS_MASK13020,595253
#define PAGER_FULLFSYNC PAGER_FULLFSYNC13021,595328
#define PAGER_CKPT_FULLFSYNC PAGER_CKPT_FULLFSYNC13022,595396
#define PAGER_CACHESPILL PAGER_CACHESPILL13023,595475
#define PAGER_FLAGS_MASK PAGER_FLAGS_MASK13024,595545
# define sqlite3PagerUseWal(sqlite3PagerUseWal13104,599244
# define disable_simulated_io_errors(disable_simulated_io_errors13149,600947
# define enable_simulated_io_errors(enable_simulated_io_errors13150,600986
typedef struct PgHdr PgHdr;PgHdr13176,601861
typedef struct PCache PCache;PCache13177,601889
struct PgHdr {PgHdr13183,602013
  sqlite3_pcache_page *pPage;    /* Pcache object page handle */pPage13184,602028
  void *pData;                   /* Page data */pData13185,602093
  void *pExtra;                  /* Extra content */pExtra13186,602142
  PgHdr *pDirty;                 /* Transient list of dirty sorted by pgno */pDirty13187,602195
  Pager *pPager;                 /* The pager this page is part of */pPager13188,602273
  Pgno pgno;                     /* Page number for this page */pgno13189,602343
  u32 pageHash;                  /* Hash of page content */pageHash13191,602434
  u16 flags;                     /* PGHDR flags defined below */flags13193,602501
  i16 nRef;                      /* Number of users of this page */nRef13199,602769
  PCache *pCache;                /* Cache that owns this page */pCache13200,602837
  PgHdr *pDirtyNext;             /* Next element in list of dirty pages */pDirtyNext13202,602903
  PgHdr *pDirtyPrev;             /* Previous element in list of dirty pages */pDirtyPrev13203,602978
#define PGHDR_CLEAN PGHDR_CLEAN13207,603094
#define PGHDR_DIRTY PGHDR_DIRTY13208,603172
#define PGHDR_WRITEABLE PGHDR_WRITEABLE13209,603249
#define PGHDR_NEED_SYNC PGHDR_NEED_SYNC13210,603322
#define PGHDR_DONT_WRITE PGHDR_DONT_WRITE13212,603473
#define PGHDR_MMAP PGHDR_MMAP13213,603545
#define PGHDR_WAL_APPEND PGHDR_WAL_APPEND13215,603617
#define _SQLITE_OS_H__SQLITE_OS_H_13368,609581
#define SQLITE_OS_SETUP_HSQLITE_OS_SETUP_H13392,610395
#    undef SQLITE_OS_UNIXSQLITE_OS_UNIX13404,610773
#    define SQLITE_OS_UNIX SQLITE_OS_UNIX13405,610799
#    undef SQLITE_OS_WINSQLITE_OS_WIN13406,610828
#    define SQLITE_OS_WIN SQLITE_OS_WIN13407,610853
#    undef SQLITE_OS_OTHERSQLITE_OS_OTHER13409,610889
#  define SQLITE_OS_OTHER SQLITE_OS_OTHER13413,610990
#      define SQLITE_OS_WIN SQLITE_OS_WIN13417,611166
#      define SQLITE_OS_UNIX SQLITE_OS_UNIX13418,611196
#      define SQLITE_OS_WIN SQLITE_OS_WIN13420,611237
#      define SQLITE_OS_UNIX SQLITE_OS_UNIX13421,611267
#    define SQLITE_OS_UNIX SQLITE_OS_UNIX13424,611317
#    define SQLITE_OS_WIN SQLITE_OS_WIN13428,611385
# define SET_FULLSYNC(SET_FULLSYNC13441,611722
# define SQLITE_DEFAULT_SECTOR_SIZE SQLITE_DEFAULT_SECTOR_SIZE13448,611835
# define SQLITE_TEMP_FILE_PREFIX SQLITE_TEMP_FILE_PREFIX13473,613140
#define NO_LOCK NO_LOCK13493,614068
#define SHARED_LOCK SHARED_LOCK13494,614094
#define RESERVED_LOCK RESERVED_LOCK13495,614120
#define PENDING_LOCK PENDING_LOCK13496,614146
#define EXCLUSIVE_LOCK EXCLUSIVE_LOCK13497,614172
# define PENDING_BYTE PENDING_BYTE13555,617265
# define PENDING_BYTE PENDING_BYTE13557,617310
#define RESERVED_BYTE RESERVED_BYTE13559,617363
#define SHARED_FIRST SHARED_FIRST13560,617406
#define SHARED_SIZE SHARED_SIZE13561,617449
#define SQLITE_FCNTL_DB_UNCHANGED SQLITE_FCNTL_DB_UNCHANGED13582,618361
# define SQLITE_MUTEX_OMITSQLITE_MUTEX_OMIT13664,622052
#    define SQLITE_MUTEX_PTHREADSSQLITE_MUTEX_PTHREADS13668,622160
#    define SQLITE_MUTEX_W32SQLITE_MUTEX_W3213670,622216
#    define SQLITE_MUTEX_NOOPSQLITE_MUTEX_NOOP13672,622253
#define sqlite3_mutex_alloc(sqlite3_mutex_alloc13680,622401
#define sqlite3_mutex_free(sqlite3_mutex_free13681,622455
#define sqlite3_mutex_enter(sqlite3_mutex_enter13682,622485
#define sqlite3_mutex_try(sqlite3_mutex_try13683,622520
#define sqlite3_mutex_leave(sqlite3_mutex_leave13684,622564
#define sqlite3_mutex_held(sqlite3_mutex_held13685,622599
#define sqlite3_mutex_notheld(sqlite3_mutex_notheld13686,622647
#define sqlite3MutexAlloc(sqlite3MutexAlloc13687,622695
#define sqlite3MutexInit(sqlite3MutexInit13688,622749
#define sqlite3MutexEnd(sqlite3MutexEnd13689,622793
#define MUTEX_LOGIC(MUTEX_LOGIC13690,622819
#define MUTEX_LOGIC(MUTEX_LOGIC13692,622848
# define SQLITE_DEFAULT_SYNCHRONOUS SQLITE_DEFAULT_SYNCHRONOUS13703,623325
# define SQLITE_DEFAULT_SYNCHRONOUS SQLITE_DEFAULT_SYNCHRONOUS13723,624023
# define SQLITE_DEFAULT_WAL_SYNCHRONOUS SQLITE_DEFAULT_WAL_SYNCHRONOUS13726,624132
struct Db {Db13736,624526
  char *zDbSName;      /* Name of this database. (schema name, not filename) */zDbSName13737,624538
  Btree *pBt;          /* The B*Tree structure for this database file */pBt13738,624618
  u8 safety_level;     /* How aggressive at syncing data to disk */safety_level13739,624691
  u8 bSyncSet;         /* True if "PRAGMA synchronous=N" has been run */bSyncSet13740,624759
  Schema *pSchema;     /* Pointer to database schema (possibly shared) */pSchema13741,624832
struct Schema {Schema13761,625718
  int schema_cookie;   /* Database schema version number for this file */schema_cookie13762,625734
  int iGeneration;     /* Generation counter.  Incremented with each change */iGeneration13763,625808
  Hash tblHash;        /* All tables indexed by name */tblHash13764,625887
  Hash idxHash;        /* All (named) indices indexed by name */idxHash13765,625943
  Hash trigHash;       /* All triggers indexed by name */trigHash13766,626008
  Hash fkeyHash;       /* All foreign keys by referenced table name */fkeyHash13767,626066
  Table *pSeqTab;      /* The sqlite_sequence table used by AUTOINCREMENT */pSeqTab13768,626137
  u8 file_format;      /* Schema format version for this file */file_format13769,626214
  u8 enc;              /* Text encoding used by this database */enc13770,626279
  u16 schemaFlags;     /* Flags associated with this schema */schemaFlags13771,626344
  int cache_size;      /* Number of pages to use in the cache */cache_size13772,626407
#define DbHasProperty(DbHasProperty13779,626573
#define DbHasAnyProperty(DbHasAnyProperty13780,626652
#define DbSetProperty(DbSetProperty13781,626729
#define DbClearProperty(DbClearProperty13782,626800
#define DB_SchemaLoaded DB_SchemaLoaded13794,627236
#define DB_UnresetViews DB_UnresetViews13795,627304
#define DB_Empty DB_Empty13796,627382
#define SQLITE_N_LIMIT SQLITE_N_LIMIT13802,627568
struct Lookaside {Lookaside13824,628658
  u32 bDisable;           /* Only operate the lookaside when zero */bDisable13825,628677
  u16 sz;                 /* Size of each buffer in bytes */sz13826,628746
  u8 bMalloced;           /* True if pStart obtained from sqlite3_malloc() */bMalloced13827,628807
  int nOut;               /* Number of buffers currently checked out */nOut13828,628885
  int mxOut;              /* Highwater mark for nOut */mxOut13829,628957
  int anStat[3];          /* 0: hits.  1: size misses.  2: full misses */anStat13830,629013
  LookasideSlot *pFree;   /* List of available buffers */pFree13831,629087
  void *pStart;           /* First byte of available memory space */pStart13832,629145
  void *pEnd;             /* First byte past end of available space */pEnd13833,629214
struct LookasideSlot {LookasideSlot13835,629288
  LookasideSlot *pNext;    /* Next buffer in the list of free buffers */pNext13836,629311
#define SQLITE_FUNC_HASH_SZ SQLITE_FUNC_HASH_SZ13846,629641
struct FuncDefHash {FuncDefHash13847,629672
  FuncDef *a[SQLITE_FUNC_HASH_SZ];       /* Hash table for functions */a13848,629693
typedef struct sqlite3_userauth sqlite3_userauth;sqlite3_userauth13856,629916
struct sqlite3_userauth {sqlite3_userauth13857,629966
  u8 authLevel;                 /* Current authentication level */authLevel13858,629992
  int nAuthPW;                  /* Size of the zAuthPW in bytes */nAuthPW13859,630059
  char *zAuthPW;                /* Password used to authenticate */zAuthPW13860,630126
  char *zAuthUser;              /* User name used to authenticate */zAuthUser13861,630194
#define UAUTH_Unknown UAUTH_Unknown13865,630319
#define UAUTH_Fail UAUTH_Fail13866,630388
#define UAUTH_User UAUTH_User13867,630453
#define UAUTH_Admin UAUTH_Admin13868,630522
  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,sqlite3_xauth13882,631036
  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,sqlite3_xauth13885,631178
#define SQLITE_TRACE_LEGACY SQLITE_TRACE_LEGACY13893,631449
#define SQLITE_TRACE_LEGACY SQLITE_TRACE_LEGACY13895,631489
struct sqlite3 {sqlite313902,631635
  sqlite3_vfs *pVfs;            /* OS Interface */pVfs13903,631652
  struct Vdbe *pVdbe;           /* List of active virtual machines */pVdbe13904,631703
  CollSeq *pDfltColl;           /* The default collating sequence (BINARY) */pDfltColl13905,631773
  sqlite3_mutex *mutex;         /* Connection mutex */mutex13906,631851
  Db *aDb;                      /* All backends */aDb13907,631906
  int nDb;                      /* Number of backends currently in use */nDb13908,631957
  int flags;                    /* Miscellaneous flags. See below */flags13909,632031
  i64 lastRowid;                /* ROWID of most recent insert (see above) */lastRowid13910,632100
  i64 szMmap;                   /* Default mmap_size setting */szMmap13911,632178
  unsigned int openFlags;       /* Flags passed to sqlite3_vfs.xOpen() */openFlags13912,632242
  int errCode;                  /* Most recent error code (SQLITE_*) */errCode13913,632316
  int errMask;                  /* & result codes with this before returning */errMask13914,632388
  int iSysErrno;                /* Errno value from last system error */iSysErrno13915,632468
  u16 dbOptFlags;               /* Flags to enable/disable optimizations */dbOptFlags13916,632541
  u8 enc;                       /* Text encoding */enc13917,632617
  u8 autoCommit;                /* The auto-commit flag. */autoCommit13918,632669
  u8 temp_store;                /* 1: file 2: memory 0: default */temp_store13919,632729
  u8 mallocFailed;              /* True if we have seen a malloc failure */mallocFailed13920,632796
  u8 bBenignMalloc;             /* Do not require OOMs if true */bBenignMalloc13921,632872
  u8 dfltLockMode;              /* Default locking-mode for attached dbs */dfltLockMode13922,632938
  signed char nextAutovac;      /* Autovac setting after VACUUM if >=0 */nextAutovac13923,633014
  u8 suppressErr;               /* Do not issue error messages if true */suppressErr13924,633088
  u8 vtabOnConflict;            /* Value to return for s3_vtab_on_conflict() */vtabOnConflict13925,633162
  u8 isTransactionSavepoint;    /* True if the outermost savepoint is a TS */isTransactionSavepoint13926,633242
  u8 mTrace;                    /* zero or more SQLITE_TRACE flags */mTrace13927,633320
  int nextPagesize;             /* Pagesize after VACUUM if >0 */nextPagesize13928,633390
  u32 magic;                    /* Magic number for detect library misuse */magic13929,633456
  int nChange;                  /* Value returned by sqlite3_changes() */nChange13930,633533
  int nTotalChange;             /* Value returned by sqlite3_total_changes() */nTotalChange13931,633607
  int aLimit[SQLITE_N_LIMIT];   /* Limits */aLimit13932,633687
  int nMaxSorterMmap;           /* Maximum size of regions mapped by sorter */nMaxSorterMmap13933,633732
  struct sqlite3InitInfo {      /* Information used during initialization */sqlite3InitInfo13934,633811
    int newTnum;                /* Rootpage of table being initialized */newTnum13935,633888
    u8 iDb;                     /* Which db file is being initialized */iDb13936,633962
    u8 busy;                    /* TRUE if currently initializing */busy13937,634035
    u8 orphanTrigger;           /* Last statement is orphaned TEMP trigger */orphanTrigger13938,634104
    u8 imposterTable;           /* Building an imposter table */imposterTable13939,634182
  } init;init13940,634247
  int nVdbeActive;              /* Number of VDBEs currently running */nVdbeActive13941,634257
  int nVdbeRead;                /* Number of active VDBEs that read or write */nVdbeRead13942,634329
  int nVdbeWrite;               /* Number of active VDBEs that read and write */nVdbeWrite13943,634409
  int nVdbeExec;                /* Number of nested calls to VdbeExec() */nVdbeExec13944,634490
  int nVDestroy;                /* Number of active OP_VDestroy operations */nVDestroy13945,634565
  int nExtension;               /* Number of loaded extensions */nExtension13946,634643
  void **aExtension;            /* Array of shared library handles */aExtension13947,634709
  int (*xTrace)(u32,void*,void*,void*);     /* Trace function */xTrace13948,634779
  void *pTraceArg;                          /* Argument to the trace function */pTraceArg13949,634844
  void (*xProfile)(void*,const char*,u64);  /* Profiling function */xProfile13950,634925
  void *pProfileArg;                        /* Argument to profile function */pProfileArg13951,634994
  void *pCommitArg;                 /* Argument to xCommitCallback() */pCommitArg13952,635073
  int (*xCommitCallback)(void*);    /* Invoked at every commit. */xCommitCallback13953,635145
  void *pRollbackArg;               /* Argument to xRollbackCallback() */pRollbackArg13954,635212
  void (*xRollbackCallback)(void*); /* Invoked at every commit. */xRollbackCallback13955,635286
  void *pUpdateArg;pUpdateArg13956,635353
  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);xUpdateCallback13957,635373
  void *pPreUpdateArg;          /* First argument to xPreUpdateCallback */pPreUpdateArg13959,635485
  void (*xPreUpdateCallback)(   /* Registered using sqlite3_preupdate_hook() */xPreUpdateCallback13960,635560
  PreUpdate *pPreUpdate;        /* Context for active pre-update callback */pPreUpdate13963,635720
  int (*xWalCallback)(void *, sqlite3 *, const char *, int);xWalCallback13966,635863
  void *pWalArg;pWalArg13967,635924
  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);xCollNeeded13969,635948
  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);xCollNeeded1613970,636011
  void *pCollNeededArg;pCollNeededArg13971,636076
  sqlite3_value *pErr;          /* Most recent error message */pErr13972,636100
    volatile int isInterrupted; /* True if sqlite3_interrupt has been called */isInterrupted13974,636174
    double notUsed1;            /* Spacer */notUsed113975,636254
  } u1;u113976,636299
  Lookaside lookaside;          /* Lookaside malloc configuration */lookaside13977,636307
  sqlite3_xauth xAuth;          /* Access authorization function */xAuth13979,636410
  void *pAuthArg;               /* 1st argument to the access auth function */pAuthArg13980,636478
  int (*xProgress)(void *);     /* The progress callback */xProgress13983,636602
  void *pProgressArg;           /* Argument to the progress callback */pProgressArg13984,636662
  unsigned nProgressOps;        /* Number of opcodes for progress callback */nProgressOps13985,636734
  int nVTrans;                  /* Allocated size of aVTrans */nVTrans13988,636852
  Hash aModule;                 /* populated by sqlite3_create_module() */aModule13989,636916
  VtabCtx *pVtabCtx;            /* Context for active vtab connect/create */pVtabCtx13990,636991
  VTable **aVTrans;             /* Virtual tables with open transactions */aVTrans13991,637068
  VTable *pDisconnect;    /* Disconnect these in next sqlite3_prepare() */pDisconnect13992,637144
  Hash aFunc;                   /* Hash table of connection functions */aFunc13994,637226
  Hash aCollSeq;                /* All collating sequences */aCollSeq13995,637299
  BusyHandler busyHandler;      /* Busy callback */busyHandler13996,637361
  Db aDbStatic[2];              /* Static space for the 2 default backends */aDbStatic13997,637413
  Savepoint *pSavepoint;        /* List of active savepoints */pSavepoint13998,637491
  int busyTimeout;              /* Busy handler timeout, in msec */busyTimeout13999,637555
  int nSavepoint;               /* Number of non-transaction savepoints */nSavepoint14000,637623
  int nStatement;               /* Number of nested statement-transactions  */nStatement14001,637698
  i64 nDeferredCons;            /* Net deferred constraints this transaction. */nDeferredCons14002,637777
  i64 nDeferredImmCons;         /* Net deferred immediate constraints */nDeferredImmCons14003,637858
  int *pnBytesFreed;            /* If not NULL, increment this in DbFree() */pnBytesFreed14004,637931
  sqlite3 *pBlockingConnection; /* Connection that caused SQLITE_LOCKED */pBlockingConnection14016,638469
  sqlite3 *pUnlockConnection;           /* Connection to watch for unlock */pUnlockConnection14017,638544
  void *pUnlockArg;                     /* Argument to xUnlockNotify */pUnlockArg14018,638621
  void (*xUnlockNotify)(void **, int);  /* Unlock notify callback */xUnlockNotify14019,638693
  sqlite3 *pNextBlocked;        /* Next in list of all blocked connections */pNextBlocked14020,638762
  sqlite3_userauth auth;        /* User authentication information */auth14023,638881
#define SCHEMA_ENC(SCHEMA_ENC14030,639019
#define ENC(ENC14031,639070
#define SQLITE_VdbeTrace SQLITE_VdbeTrace14041,639354
#define SQLITE_InternChanges SQLITE_InternChanges14042,639431
#define SQLITE_FullColNames SQLITE_FullColNames14043,639510
#define SQLITE_FullFSync SQLITE_FullFSync14044,639591
#define SQLITE_CkptFullFSync SQLITE_CkptFullFSync14045,639669
#define SQLITE_CacheSpill SQLITE_CacheSpill14046,639747
#define SQLITE_ShortColNames SQLITE_ShortColNames14047,639819
#define SQLITE_CountRows SQLITE_CountRows14048,639892
#define SQLITE_NullCallback SQLITE_NullCallback14051,640127
#define SQLITE_SqlTrace SQLITE_SqlTrace14053,640277
#define SQLITE_VdbeListing SQLITE_VdbeListing14054,640356
#define SQLITE_WriteSchema SQLITE_WriteSchema14055,640436
#define SQLITE_VdbeAddopTrace SQLITE_VdbeAddopTrace14056,640511
#define SQLITE_IgnoreChecks SQLITE_IgnoreChecks14057,640590
#define SQLITE_ReadUncommitted SQLITE_ReadUncommitted14058,640671
#define SQLITE_LegacyFileFmt SQLITE_LegacyFileFmt14059,640741
#define SQLITE_RecoveryMode SQLITE_RecoveryMode14060,640822
#define SQLITE_ReverseOrder SQLITE_ReverseOrder14061,640891
#define SQLITE_RecTriggers SQLITE_RecTriggers14062,640965
#define SQLITE_ForeignKeys SQLITE_ForeignKeys14063,641039
#define SQLITE_AutoIndex SQLITE_AutoIndex14064,641120
#define SQLITE_PreferBuiltin SQLITE_PreferBuiltin14065,641193
#define SQLITE_LoadExtension SQLITE_LoadExtension14066,641270
#define SQLITE_LoadExtFunc SQLITE_LoadExtFunc14067,641340
#define SQLITE_EnableTrigger SQLITE_EnableTrigger14068,641421
#define SQLITE_DeferFKs SQLITE_DeferFKs14069,641493
#define SQLITE_QueryOnly SQLITE_QueryOnly14070,641566
#define SQLITE_VdbeEQP SQLITE_VdbeEQP14071,641639
#define SQLITE_Vacuum SQLITE_Vacuum14072,641712
#define SQLITE_CellSizeCk SQLITE_CellSizeCk14073,641782
#define SQLITE_Fts3Tokenizer SQLITE_Fts3Tokenizer14074,641861
#define SQLITE_QueryFlattener SQLITE_QueryFlattener14082,642121
#define SQLITE_ColumnCache SQLITE_ColumnCache14083,642183
#define SQLITE_GroupByOrder SQLITE_GroupByOrder14084,642241
#define SQLITE_FactorOutConst SQLITE_FactorOutConst14085,642311
#define SQLITE_DistinctOpt SQLITE_DistinctOpt14087,642445
#define SQLITE_CoverIdxScan SQLITE_CoverIdxScan14088,642513
#define SQLITE_OrderByIdxJoin SQLITE_OrderByIdxJoin14089,642579
#define SQLITE_SubqCoroutine SQLITE_SubqCoroutine14090,642652
#define SQLITE_Transitive SQLITE_Transitive14091,642731
#define SQLITE_OmitNoopJoin SQLITE_OmitNoopJoin14092,642799
#define SQLITE_Stat34 SQLITE_Stat3414093,642872
#define SQLITE_CursorHints SQLITE_CursorHints14094,642941
#define SQLITE_AllOpts SQLITE_AllOpts14095,643012
#define OptimizationDisabled(OptimizationDisabled14101,643191
#define OptimizationEnabled(OptimizationEnabled14102,643262
#define OptimizationDisabled(OptimizationDisabled14104,643339
#define OptimizationEnabled(OptimizationEnabled14105,643381
#define ConstFactorOk(ConstFactorOk14112,643580
#define SQLITE_MAGIC_OPEN SQLITE_MAGIC_OPEN14119,643794
#define SQLITE_MAGIC_CLOSED SQLITE_MAGIC_CLOSED14120,643859
#define SQLITE_MAGIC_SICK SQLITE_MAGIC_SICK14121,643926
#define SQLITE_MAGIC_BUSY SQLITE_MAGIC_BUSY14122,643999
#define SQLITE_MAGIC_ERROR SQLITE_MAGIC_ERROR14123,644073
#define SQLITE_MAGIC_ZOMBIE SQLITE_MAGIC_ZOMBIE14124,644153
struct FuncDef {FuncDef14136,644709
  i8 nArg;             /* Number of arguments.  -1 means unlimited */nArg14137,644726
  u16 funcFlags;       /* Some combination of SQLITE_FUNC_* */funcFlags14138,644796
  void *pUserData;     /* User data parameter */pUserData14139,644859
  FuncDef *pNext;      /* Next function with same name */pNext14140,644908
  void (*xSFunc)(sqlite3_context*,int,sqlite3_value**); /* func or agg-step */xSFunc14141,644966
  void (*xFinalize)(sqlite3_context*);                  /* Agg finalizer */xFinalize14142,645045
  const char *zName;   /* SQL name of the function. */zName14143,645121
    FuncDef *pHash;      /* Next with a different name but the same hash */pHash14145,645186
    FuncDestructor *pDestructor;   /* Reference counted destructor function */pDestructor14146,645262
  } u;u14147,645341
struct FuncDestructor {FuncDestructor14164,646103
  int nRef;nRef14165,646127
  void (*xDestroy)(void *);xDestroy14166,646139
  void *pUserData;pUserData14167,646167
#define SQLITE_FUNC_ENCMASK SQLITE_FUNC_ENCMASK14183,646823
#define SQLITE_FUNC_LIKE SQLITE_FUNC_LIKE14184,646904
#define SQLITE_FUNC_CASE SQLITE_FUNC_CASE14185,646982
#define SQLITE_FUNC_EPHEM SQLITE_FUNC_EPHEM14186,647058
#define SQLITE_FUNC_NEEDCOLL SQLITE_FUNC_NEEDCOLL14187,647129
#define SQLITE_FUNC_LENGTH SQLITE_FUNC_LENGTH14188,647210
#define SQLITE_FUNC_TYPEOF SQLITE_FUNC_TYPEOF14189,647279
#define SQLITE_FUNC_COUNT SQLITE_FUNC_COUNT14190,647348
#define SQLITE_FUNC_COALESCE SQLITE_FUNC_COALESCE14191,647418
#define SQLITE_FUNC_UNLIKELY SQLITE_FUNC_UNLIKELY14192,647492
#define SQLITE_FUNC_CONSTANT SQLITE_FUNC_CONSTANT14193,647563
#define SQLITE_FUNC_MINMAX SQLITE_FUNC_MINMAX14194,647644
#define SQLITE_FUNC_SLOCHNG SQLITE_FUNC_SLOCHNG14195,647722
#define FUNCTION(FUNCTION14232,649524
#define VFUNCTION(VFUNCTION14235,649701
#define DFUNCTION(DFUNCTION14238,649858
#define FUNCTION2(FUNCTION214241,650035
#define STR_FUNCTION(STR_FUNCTION14244,650234
#define LIKEFUNC(LIKEFUNC14247,650391
#define AGGREGATE(AGGREGATE14250,650532
#define AGGREGATE2(AGGREGATE214253,650695
struct Savepoint {Savepoint14263,651124
  char *zName;                        /* Savepoint name (nul-terminated) */zName14264,651143
  i64 nDeferredCons;                  /* Number of deferred fk violations */nDeferredCons14265,651219
  i64 nDeferredImmCons;               /* Number of deferred imm fk. */nDeferredImmCons14266,651296
  Savepoint *pNext;                   /* Parent savepoint (if any) */pNext14267,651367
#define SAVEPOINT_BEGIN SAVEPOINT_BEGIN14274,651579
#define SAVEPOINT_RELEASE SAVEPOINT_RELEASE14275,651610
#define SAVEPOINT_ROLLBACK SAVEPOINT_ROLLBACK14276,651641
struct Module {Module14284,651831
  const sqlite3_module *pModule;       /* Callback pointers */pModule14285,651847
  const char *zName;                   /* Name passed to create_module() */zName14286,651910
  void *pAux;                          /* pAux passed to create_module() */pAux14287,651986
  void (*xDestroy)(void *);            /* Module destructor function */xDestroy14288,652062
  Table *pEpoTab;                      /* Eponymous table for this module */pEpoTab14289,652134
struct Column {Column14296,652315
  char *zName;     /* Name of this column, \000, then the type */zName14297,652331
  Expr *pDflt;     /* Default value of this column */pDflt14298,652397
  char *zColl;     /* Collating sequence.  If NULL, use the default */zColl14299,652451
  u8 notNull;      /* An OE_ code for handling a NOT NULL constraint */notNull14300,652522
  char affinity;   /* One of the SQLITE_AFF_... values */affinity14301,652594
  u8 szEst;        /* Estimated size of value in this column. sizeof(INT)==1 */szEst14302,652652
  u8 colFlags;     /* Boolean properties.  See COLFLAG_ defines below */colFlags14303,652732
#define COLFLAG_PRIMKEY COLFLAG_PRIMKEY14308,652851
#define COLFLAG_HIDDEN COLFLAG_HIDDEN14309,652926
#define COLFLAG_HASTYPE COLFLAG_HASTYPE14310,653002
struct CollSeq {CollSeq14321,653452
  char *zName;          /* Name of the collating sequence, UTF-8 encoded */zName14322,653469
  u8 enc;               /* Text encoding handled by xCmp() */enc14323,653545
  void *pUser;          /* First argument to xCmp() */pUser14324,653607
  int (*xCmp)(void*,int, const void*, int, const void*);xCmp14325,653662
  void (*xDel)(void*);  /* Destructor for pUser */xDel14326,653719
#define SQLITE_SO_ASC SQLITE_SO_ASC14332,653823
#define SQLITE_SO_DESC SQLITE_SO_DESC14333,653884
#define SQLITE_SO_UNDEFINED SQLITE_SO_UNDEFINED14334,653945
#define SQLITE_AFF_BLOB SQLITE_AFF_BLOB14350,654591
#define SQLITE_AFF_TEXT SQLITE_AFF_TEXT14351,654623
#define SQLITE_AFF_NUMERIC SQLITE_AFF_NUMERIC14352,654655
#define SQLITE_AFF_INTEGER SQLITE_AFF_INTEGER14353,654687
#define SQLITE_AFF_REAL SQLITE_AFF_REAL14354,654719
#define sqlite3IsNumericAffinity(sqlite3IsNumericAffinity14356,654752
#define SQLITE_AFF_MASK SQLITE_AFF_MASK14362,654908
#define SQLITE_KEEPNULL SQLITE_KEEPNULL14373,655298
#define SQLITE_JUMPIFNULL SQLITE_JUMPIFNULL14374,655362
#define SQLITE_STOREP2 SQLITE_STOREP214375,655434
#define SQLITE_NULLEQ SQLITE_NULLEQ14376,655515
#define SQLITE_NOTNULL SQLITE_NOTNULL14377,655565
struct VTable {VTable14421,658082
  sqlite3 *db;              /* Database connection associated with this table */db14422,658098
  Module *pMod;             /* Pointer to module implementation */pMod14423,658179
  sqlite3_vtab *pVtab;      /* Pointer to vtab instance */pVtab14424,658246
  int nRef;                 /* Number of pointers to this structure */nRef14425,658305
  u8 bConstraint;           /* True if constraints are supported */bConstraint14426,658376
  int iSavepoint;           /* Depth of the SAVEPOINT stack */iSavepoint14427,658444
  VTable *pNext;            /* Next in linked list (see above) */pNext14428,658507
struct Table {Table14435,658696
  char *zName;         /* Name of the table or view */zName14436,658711
  Column *aCol;        /* Information about each column */aCol14437,658766
  Index *pIndex;       /* List of SQL indexes on this table. */pIndex14438,658825
  Select *pSelect;     /* NULL for tables.  Points to definition if a view. */pSelect14439,658889
  FKey *pFKey;         /* Linked list of all foreign keys in this table */pFKey14440,658968
  char *zColAff;       /* String defining the affinity of each column */zColAff14441,659043
  ExprList *pCheck;    /* All CHECK constraints */pCheck14442,659116
  int tnum;            /* Root BTree page for this table */tnum14444,659242
  i16 iPKey;           /* If not negative, use aCol[iPKey] as the rowid */iPKey14445,659302
  i16 nCol;            /* Number of columns in this table */nCol14446,659377
  u16 nRef;            /* Number of pointers to this Table */nRef14447,659438
  LogEst nRowLogEst;   /* Estimated rows in table - from sqlite_stat1 table */nRowLogEst14448,659500
  LogEst szTabRow;     /* Estimated size of each table row in bytes */szTabRow14449,659579
  LogEst costMult;     /* Cost multiplier for using this table */costMult14451,659680
  u8 tabFlags;         /* Mask of TF_* values */tabFlags14453,659753
  u8 keyConf;          /* What to do in case of uniqueness conflict on iPKey */keyConf14454,659802
  int addColOffset;    /* Offset in CREATE TABLE stmt to add a new column */addColOffset14456,659913
  int nModuleArg;      /* Number of arguments to the module */nModuleArg14459,660030
  char **azModuleArg;  /* 0: module 1: schema 2: vtab name 3...: args */azModuleArg14460,660093
  VTable *pVTable;     /* List of VTable objects. */pVTable14461,660166
  Trigger *pTrigger;   /* List of triggers stored in pSchema */pTrigger14463,660226
  Schema *pSchema;     /* Schema that contains this table */pSchema14464,660290
  Table *pNextZombie;  /* Next on the Parse.pZombieTab list */pNextZombie14465,660351
#define TF_Readonly TF_Readonly14477,660818
#define TF_Ephemeral TF_Ephemeral14478,660882
#define TF_HasPrimaryKey TF_HasPrimaryKey14479,660942
#define TF_Autoincrement TF_Autoincrement14480,661007
#define TF_Virtual TF_Virtual14481,661085
#define TF_WithoutRowid TF_WithoutRowid14482,661145
#define TF_NoVisibleRowid TF_NoVisibleRowid14483,661220
#define TF_OOOHidden TF_OOOHidden14484,661292
#  define IsVirtual(IsVirtual14493,661578
#  define IsVirtual(IsVirtual14495,661646
#  define IsHiddenColumn(IsHiddenColumn14505,661991
#  define IsOrdinaryHiddenColumn(IsOrdinaryHiddenColumn14506,662065
#  define IsHiddenColumn(IsHiddenColumn14508,662180
#  define IsOrdinaryHiddenColumn(IsOrdinaryHiddenColumn14509,662254
#  define IsHiddenColumn(IsHiddenColumn14511,662298
#  define IsOrdinaryHiddenColumn(IsOrdinaryHiddenColumn14512,662336
#define HasRowid(HasRowid14517,662417
#define VisibleRowid(VisibleRowid14518,662480
struct FKey {FKey14548,663595
  Table *pFrom;     /* Table containing the REFERENCES clause (aka: Child) */pFrom14549,663609
  FKey *pNextFrom;  /* Next FKey with the same in pFrom. Next parent of pFrom */pNextFrom14550,663687
  char *zTo;        /* Name of table that the key points to (aka: Parent) */zTo14551,663768
  FKey *pNextTo;    /* Next with the same zTo. Next child of zTo. */pNextTo14552,663845
  FKey *pPrevTo;    /* Previous with the same zTo */pPrevTo14553,663914
  int nCol;         /* Number of columns in this key */nCol14554,663967
  u8 isDeferred;       /* True if constraint checking is deferred till COMMIT */isDeferred14556,664049
  u8 aAction[2];        /* ON DELETE and ON UPDATE actions, respectively */aAction14557,664130
  Trigger *apTrigger[2];/* Triggers for aAction[] actions */apTrigger14558,664206
  struct sColMap {      /* Mapping of columns in pFrom to columns in zTo */sColMap14559,664267
    int iFrom;            /* Index of column in pFrom */iFrom14560,664343
    char *zCol;           /* Name of column in zTo.  If NULL use PRIMARY KEY */zCol14561,664400
  } aCol[1];            /* One entry for each of nCol columns */aCol14562,664480
#define OE_None OE_None14590,665931
#define OE_Rollback OE_Rollback14591,665993
#define OE_Abort OE_Abort14592,666071
#define OE_Fail OE_Fail14593,666149
#define OE_Ignore OE_Ignore14594,666226
#define OE_Replace OE_Replace14595,666305
#define OE_Restrict OE_Restrict14597,666385
#define OE_SetNull OE_SetNull14598,666464
#define OE_SetDflt OE_SetDflt14599,666528
#define OE_Cascade OE_Cascade14600,666599
#define OE_Default OE_Default14602,666650
struct KeyInfo {KeyInfo14614,667054
  u32 nRef;           /* Number of references to this KeyInfo object */nRef14615,667071
  u8 enc;             /* Text encoding - one of the SQLITE_UTF* values */enc14616,667143
  u16 nField;         /* Number of key columns in the index */nField14617,667217
  u16 nXField;        /* Number of columns beyond the key columns */nXField14618,667280
  sqlite3 *db;        /* The database connection */db14619,667349
  u8 *aSortOrder;     /* Sort order for each column. */aSortOrder14620,667401
  CollSeq *aColl[1];  /* Collating sequence for each term of the key */aColl14621,667457
struct UnpackedRecord {UnpackedRecord14659,669266
  KeyInfo *pKeyInfo;  /* Collation and sort-order information */pKeyInfo14660,669290
  Mem *aMem;          /* Values */aMem14661,669355
  u16 nField;         /* Number of entries in apMem[] */nField14662,669390
  i8 default_rc;      /* Comparison result if keys are equal */default_rc14663,669447
  u8 errCode;         /* Error detected by xRecordCompare (CORRUPT or NOMEM) */errCode14664,669511
  i8 r1;              /* Value to return if (lhs > rhs) */r114665,669591
  i8 r2;              /* Value to return if (rhs < lhs) */r214666,669650
  u8 eqSeen;          /* True if an equality comparison has been seen */eqSeen14667,669709
struct Index {Index14705,671493
  char *zName;             /* Name of this index */zName14706,671508
  i16 *aiColumn;           /* Which columns are used by this index.  1st is 0 */aiColumn14707,671560
  LogEst *aiRowLogEst;     /* From ANALYZE: Est. rows selected by each column */aiRowLogEst14708,671641
  Table *pTable;           /* The SQL table being indexed */pTable14709,671722
  char *zColAff;           /* String defining the affinity of each column */zColAff14710,671783
  Index *pNext;            /* The next index associated with the same table */pNext14711,671860
  Schema *pSchema;         /* Schema containing this index */pSchema14712,671939
  u8 *aSortOrder;          /* for each column: True==DESC, False==ASC */aSortOrder14713,672001
  const char **azColl;     /* Array of collation sequence names for index */azColl14714,672074
  Expr *pPartIdxWhere;     /* WHERE clause for partial indices */pPartIdxWhere14715,672151
  ExprList *aColExpr;      /* Column expressions */aColExpr14716,672217
  int tnum;                /* DB Page containing root of this index */tnum14717,672269
  LogEst szIdxRow;         /* Estimated average row size in bytes */szIdxRow14718,672340
  u16 nKeyCol;             /* Number of columns forming the key */nKeyCol14719,672409
  u16 nColumn;             /* Number of columns stored in the index */nColumn14720,672476
  u8 onError;              /* OE_Abort, OE_Ignore, OE_Replace, or OE_None */onError14721,672547
  unsigned idxType:2;      /* 1==UNIQUE, 2==PRIMARY KEY, 0==CREATE INDEX */idxType14722,672624
  unsigned bUnordered:1;   /* Use this index for == or IN queries only */bUnordered14723,672700
  unsigned uniqNotNull:1;  /* True if UNIQUE and NOT NULL for all columns */uniqNotNull14724,672774
  unsigned isResized:1;    /* True if resizeIndexObject() has been called */isResized14725,672851
  unsigned isCovering:1;   /* True if this is a covering index */isCovering14726,672928
  unsigned noSkipScan:1;   /* Do not try to use skip-scan if true */noSkipScan14727,672994
  int nSample;             /* Number of elements in aSample[] */nSample14729,673099
  int nSampleCol;          /* Size of IndexSample.anEq[] and so on */nSampleCol14730,673164
  tRowcnt *aAvgEq;         /* Average nEq values for keys not in aSample */aAvgEq14731,673234
  IndexSample *aSample;    /* Samples of the left-most key */aSample14732,673310
  tRowcnt *aiRowEst;       /* Non-logarithmic stat1 data for this index */aiRowEst14733,673372
  tRowcnt nRowEst0;        /* Non-logarithmic number of rows in the index */nRowEst014734,673447
#define SQLITE_IDXTYPE_APPDEF SQLITE_IDXTYPE_APPDEF14741,673577
#define SQLITE_IDXTYPE_UNIQUE SQLITE_IDXTYPE_UNIQUE14742,673649
#define SQLITE_IDXTYPE_PRIMARYKEY SQLITE_IDXTYPE_PRIMARYKEY14743,673725
#define IsPrimaryKeyIndex(IsPrimaryKeyIndex14746,673856
#define IsUniqueIndex(IsUniqueIndex14749,673976
#define XN_ROWID XN_ROWID14754,674162
#define XN_EXPR XN_EXPR14755,674226
struct IndexSample {IndexSample14762,674499
  void *p;          /* Pointer to sampled record */p14763,674520
  int n;            /* Size of record in bytes */n14764,674572
  tRowcnt *anEq;    /* Est. number of rows where the key equals this sample */anEq14765,674622
  tRowcnt *anLt;    /* Est. number of rows where key is less than this sample */anLt14766,674701
  tRowcnt *anDLt;   /* Est. number of distinct keys less than this sample */anDLt14767,674782
struct Token {Token14778,675169
  const char *z;     /* Text of the token.  Not NULL-terminated! */z14779,675184
  unsigned int n;    /* Number of characters in this token */n14780,675252
struct AggInfo {AggInfo14796,675914
  u8 directMode;          /* Direct rendering mode means take data directlydirectMode14797,675931
  u8 useSortingIdx;       /* In direct mode, reference the sorting index ratheruseSortingIdx14799,676088
  int sortingIdx;         /* Cursor number of the sorting index */sortingIdx14801,676222
  int sortingIdxPTab;     /* Cursor number of pseudo-table */sortingIdxPTab14802,676289
  int nSortingColumn;     /* Number of columns in the sorting index */nSortingColumn14803,676351
  int mnReg, mxReg;       /* Range of registers allocated for aCol and aFunc */mnReg14804,676422
  int mnReg, mxReg;       /* Range of registers allocated for aCol and aFunc */mxReg14804,676422
  ExprList *pGroupBy;     /* The group by clause */pGroupBy14805,676502
  struct AggInfo_col {    /* For each column used in source tables */AggInfo_col14806,676554
    Table *pTab;             /* Source table */pTab14807,676624
    int iTable;              /* Cursor number of the source table */iTable14808,676672
    int iColumn;             /* Column number within the source table */iColumn14809,676741
    int iSorterColumn;       /* Column number in the sorting index */iSorterColumn14810,676814
    int iMem;                /* Memory location that acts as accumulator */iMem14811,676884
    Expr *pExpr;             /* The original expression */pExpr14812,676960
  } *aCol;aCol14813,677019
  int nColumn;            /* Number of used entries in aCol[] */nColumn14814,677030
  int nAccumulator;       /* Number of columns that show through to the output.nAccumulator14815,677095
  struct AggInfo_func {   /* For each aggregate function */AggInfo_func14818,677306
    Expr *pExpr;             /* Expression encoding the function */pExpr14819,677366
    FuncDef *pFunc;          /* The aggregate function implementation */pFunc14820,677434
    int iMem;                /* Memory location that acts as accumulator */iMem14821,677507
    int iDistinct;           /* Ephemeral table used to enforce DISTINCT */iDistinct14822,677583
  } *aFunc;aFunc14823,677659
  int nFunc;              /* Number of entries in aFunc[] */nFunc14824,677671
typedef i16 ynVar;ynVar14838,678320
typedef int ynVar;ynVar14840,678345
struct Expr {Expr14906,681604
  u8 op;                 /* Operation performed by this node */op14907,681618
  char affinity;         /* The affinity of the column or 0 if not a column */affinity14908,681682
  u32 flags;             /* Various flags.  EP_* See below */flags14909,681761
    char *zToken;          /* Token value. Zero terminated and dequoted */zToken14911,681833
    int iValue;            /* Non-negative integer value if EP_IntValue */iValue14912,681908
  } u;u14913,681983
  Expr *pLeft;           /* Left subnode */pLeft14920,682264
  Expr *pRight;          /* Right subnode */pRight14921,682308
    ExprList *pList;     /* op = IN, EXISTS, SELECT, CASE, FUNCTION, BETWEEN */pList14923,682363
    Select *pSelect;     /* EP_xIsSelect and op = IN, EXISTS, SELECT */pSelect14924,682443
  } x;x14925,682515
  int nHeight;           /* Height of the tree headed by this node */nHeight14933,682822
  int iTable;            /* TK_COLUMN: cursor number of table holding columniTable14935,682899
  ynVar iColumn;         /* TK_COLUMN: column index.  -1 for rowid.iColumn14940,683233
  i16 iAgg;              /* Which entry in pAggInfo->aCol[] or ->aFunc[] */iAgg14943,683450
  i16 iRightJoinTable;   /* If EP_FromJoin, the right table of the join */iRightJoinTable14944,683526
  u8 op2;                /* TK_REGISTER: original value of Expr.opop214945,683601
  AggInfo *pAggInfo;     /* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION */pAggInfo14948,683799
  Table *pTab;           /* Table for TK_COLUMN expressions. */pTab14949,683872
#define EP_FromJoin EP_FromJoin14955,684013
#define EP_Agg EP_Agg14956,684093
#define EP_Resolved EP_Resolved14957,684170
#define EP_Error EP_Error14958,684240
#define EP_Distinct EP_Distinct14959,684315
#define EP_VarSelect EP_VarSelect14960,684392
#define EP_DblQuoted EP_DblQuoted14961,684464
#define EP_InfixFunc EP_InfixFunc14962,684532
#define EP_Collate EP_Collate14963,684612
#define EP_Generic EP_Generic14964,684684
#define EP_IntValue EP_IntValue14965,684760
#define EP_xIsSelect EP_xIsSelect14966,684832
#define EP_Skip EP_Skip14967,684910
#define EP_Reduced EP_Reduced14968,684971
#define EP_TokenOnly EP_TokenOnly14969,685047
#define EP_Static EP_Static14970,685125
#define EP_MemToken EP_MemToken14971,685203
#define EP_NoReduce EP_NoReduce14972,685275
#define EP_Unlikely EP_Unlikely14973,685343
#define EP_ConstFunc EP_ConstFunc14974,685415
#define EP_CanBeNull EP_CanBeNull14975,685495
#define EP_Subquery EP_Subquery14976,685571
#define EP_Alias EP_Alias14977,685642
#define EP_Leaf EP_Leaf14978,685714
#define EP_Propagate EP_Propagate14983,685840
#define ExprHasProperty(ExprHasProperty14989,686012
#define ExprHasAllProperty(ExprHasAllProperty14990,686067
#define ExprSetProperty(ExprSetProperty14991,686124
#define ExprClearProperty(ExprClearProperty14992,686173
# define ExprSetVVAProperty(ExprSetVVAProperty14999,686432
# define ExprSetVVAProperty(ExprSetVVAProperty15001,686488
#define EXPR_FULLSIZE EXPR_FULLSIZE15009,686727
#define EXPR_REDUCEDSIZE EXPR_REDUCEDSIZE15010,686798
#define EXPR_TOKENONLYSIZE EXPR_TOKENONLYSIZE15011,686875
#define EXPRDUP_REDUCE EXPRDUP_REDUCE15017,687070
struct ExprList {ExprList15035,688014
  int nExpr;             /* Number of expressions on the list */nExpr15036,688032
  struct ExprList_item { /* For each expression in the list */ExprList_item15037,688097
    Expr *pExpr;            /* The list of expressions */pExpr15038,688160
    char *zName;            /* Token associated with this expression */zName15039,688218
    char *zSpan;            /* Original text of the expression */zSpan15040,688290
    u8 sortOrder;           /* 1 for DESC or 0 for ASC */sortOrder15041,688356
    unsigned done :1;       /* A flag to indicate when processing is finished */done15042,688414
    unsigned bSpanIsTab :1; /* zSpan holds DB.TABLE.COLUMN */bSpanIsTab15043,688495
    unsigned reusable :1;   /* Constant expression is reusable */reusable15044,688557
        u16 iOrderByCol;      /* For ORDER BY, column number in result set */iOrderByCol15047,688650
        u16 iAlias;           /* Index into Parse.aAlias[] for zName */iAlias15048,688728
      } x;x15049,688800
      int iConstExprReg;      /* Register in which Expr value is cached */iConstExprReg15050,688811
    } u;u15051,688886
  } *a;                  /* Alloc a power of two greater or equal to nExpr */a15052,688895
struct ExprSpan {ExprSpan15060,689138
  Expr *pExpr;          /* The expression parse tree */pExpr15061,689156
  const char *zStart;   /* First character of input text */zStart15062,689212
  const char *zEnd;     /* One character past the end of input text */zEnd15063,689272
struct IdList {IdList15081,689882
  struct IdList_item {IdList_item15082,689898
    char *zName;      /* Name of the identifier */zName15083,689921
    int idx;          /* Index in some Table.aCol[] of a column named zName */idx15084,689972
  } *a;a15085,690051
  int nId;         /* Number of identifiers on the list */nId15086,690059
  typedef SQLITE_BITMASK_TYPE Bitmask;Bitmask15097,690411
  typedef u64 Bitmask;Bitmask15099,690456
#define BMS BMS15105,690558
#define MASKBIT(MASKBIT15110,690627
#define MASKBIT32(MASKBIT3215111,690668
#define ALLBITS ALLBITS15112,690714
struct SrcList {SrcList15133,691754
  int nSrc;        /* Number of tables or subqueries in the FROM clause */nSrc15134,691771
  u32 nAlloc;      /* Number of entries allocated in a[] below */nAlloc15135,691846
  struct SrcList_item {SrcList_item15136,691912
    Schema *pSchema;  /* Schema to which this item is fixed */pSchema15137,691936
    char *zDatabase;  /* Name of database holding this table */zDatabase15138,691999
    char *zName;      /* Name of the table */zName15139,692063
    char *zAlias;     /* The "B" part of a "A AS B" phrase.  zName is the "A" */zAlias15140,692109
    Table *pTab;      /* An SQL table corresponding to zName */pTab15141,692190
    Select *pSelect;  /* A SELECT statement used in place of a table name */pSelect15142,692254
    int addrFillSub;  /* Address of subroutine to manifest a subquery */addrFillSub15143,692331
    int regReturn;    /* Register holding return address of addrFillSub */regReturn15144,692404
    int regResult;    /* Registers holding results of a co-routine */regResult15145,692479
      u8 jointype;      /* Type of join between this table and the previous */jointype15147,692562
      unsigned notIndexed :1;    /* True if there is a NOT INDEXED clause */notIndexed15148,692641
      unsigned isIndexedBy :1;   /* True if there is an INDEXED BY clause */isIndexedBy15149,692718
      unsigned isTabFunc :1;     /* True if table-valued-function syntax */isTabFunc15150,692795
      unsigned isCorrelated :1;  /* True if sub-query is correlated */isCorrelated15151,692871
      unsigned viaCoroutine :1;  /* Implemented as a co-routine */viaCoroutine15152,692942
      unsigned isRecursive :1;   /* True for recursive reference in WITH */isRecursive15153,693009
    } fg;fg15154,693085
    u8 iSelectId;     /* If pSelect!=0, the id of the sub-select in EQP */iSelectId15156,693123
    int iCursor;      /* The VDBE cursor number used to access this table */iCursor15158,693205
    Expr *pOn;        /* The ON clause of a join */pOn15159,693282
    IdList *pUsing;   /* The USING clause of a join */pUsing15160,693334
    Bitmask colUsed;  /* Bit N (1<<N) set if column N of pTab is used */colUsed15161,693389
      char *zIndexedBy;    /* Identifier from "INDEXED BY <zIndex>" clause */zIndexedBy15163,693474
      ExprList *pFuncArg;  /* Arguments to table-valued-function */pFuncArg15164,693552
    } u1;u115165,693620
    Index *pIBIndex;  /* Index structure corresponding to u1.zIndexedBy */pIBIndex15166,693630
  } a[1];             /* One entry for each identifier on the list */a15167,693705
#define JT_INNER JT_INNER15173,693837
#define JT_CROSS JT_CROSS15174,693906
#define JT_NATURAL JT_NATURAL15175,693977
#define JT_LEFT JT_LEFT15176,694040
#define JT_RIGHT JT_RIGHT15177,694093
#define JT_OUTER JT_OUTER15178,694147
#define JT_ERROR JT_ERROR15179,694215
#define WHERE_ORDERBY_NORMAL WHERE_ORDERBY_NORMAL15189,694496
#define WHERE_ORDERBY_MIN WHERE_ORDERBY_MIN15190,694546
#define WHERE_ORDERBY_MAX WHERE_ORDERBY_MAX15191,694625
#define WHERE_ONEPASS_DESIRED WHERE_ONEPASS_DESIRED15192,694704
#define WHERE_ONEPASS_MULTIROW WHERE_ONEPASS_MULTIROW15193,694782
#define WHERE_DUPLICATES_OK WHERE_DUPLICATES_OK15194,694859
#define WHERE_OR_SUBCLAUSE WHERE_OR_SUBCLAUSE15195,694937
#define WHERE_GROUPBY WHERE_GROUPBY15197,695077
#define WHERE_DISTINCTBY WHERE_DISTINCTBY15198,695151
#define WHERE_WANT_DISTINCT WHERE_WANT_DISTINCT15199,695232
#define WHERE_SORTBYGROUP WHERE_SORTBYGROUP15200,695308
#define WHERE_SEEK_TABLE WHERE_SEEK_TABLE15201,695383
#define WHERE_ORDERBY_LIMIT WHERE_ORDERBY_LIMIT15202,695460
#define WHERE_USE_LIMIT WHERE_USE_LIMIT15205,695662
#define WHERE_DISTINCT_NOOP WHERE_DISTINCT_NOOP15210,695860
#define WHERE_DISTINCT_UNIQUE WHERE_DISTINCT_UNIQUE15211,695928
#define WHERE_DISTINCT_ORDERED WHERE_DISTINCT_ORDERED15212,695984
#define WHERE_DISTINCT_UNORDERED WHERE_DISTINCT_UNORDERED15213,696054
struct NameContext {NameContext15236,697229
  Parse *pParse;       /* The parser */pParse15237,697250
  SrcList *pSrcList;   /* One or more tables used to resolve names */pSrcList15238,697290
  ExprList *pEList;    /* Optional list of result-set columns */pEList15239,697360
  AggInfo *pAggInfo;   /* Information about aggregates at this level */pAggInfo15240,697425
  NameContext *pNext;  /* Next outer name context.  NULL for outermost */pNext15241,697497
  int nRef;            /* Number of names resolved by this context */nRef15242,697571
  int nErr;            /* Number of errors encountered while resolving names */nErr15243,697641
  u16 ncFlags;         /* Zero or more NC_* flags defined below */ncFlags15244,697721
#define NC_AllowAgg NC_AllowAgg15255,697996
#define NC_PartIdx NC_PartIdx15256,698068
#define NC_IsCheck NC_IsCheck15257,698143
#define NC_InAggFunc NC_InAggFunc15258,698224
#define NC_HasAgg NC_HasAgg15259,698302
#define NC_IdxExpr NC_IdxExpr15260,698374
#define NC_VarSelect NC_VarSelect15261,698451
#define NC_MinMaxAgg NC_MinMaxAgg15262,698522
struct Select {Select15284,699673
  ExprList *pEList;      /* The fields of the result */pEList15285,699689
  u8 op;                 /* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT */op15286,699745
  LogEst nSelectRow;     /* Estimated number of result rows */nSelectRow15287,699823
  u32 selFlags;          /* Various SF_* values */selFlags15288,699886
  int iLimit, iOffset;   /* Memory registers holding LIMIT & OFFSET counters */iLimit15289,699937
  int iLimit, iOffset;   /* Memory registers holding LIMIT & OFFSET counters */iOffset15289,699937
  char zSelName[12];     /* Symbolic name of this SELECT use for debugging */zSelName15291,700041
  int addrOpenEphm[2];   /* OP_OpenEphem opcodes related to this select */addrOpenEphm15293,700126
  SrcList *pSrc;         /* The FROM clause */pSrc15294,700201
  Expr *pWhere;          /* The WHERE clause */pWhere15295,700248
  ExprList *pGroupBy;    /* The GROUP BY clause */pGroupBy15296,700296
  Expr *pHaving;         /* The HAVING clause */pHaving15297,700347
  ExprList *pOrderBy;    /* The ORDER BY clause */pOrderBy15298,700396
  Select *pPrior;        /* Prior select in a compound select statement */pPrior15299,700447
  Select *pNext;         /* Next select to the left in a compound */pNext15300,700522
  Expr *pLimit;          /* LIMIT expression. NULL means not used. */pLimit15301,700591
  Expr *pOffset;         /* OFFSET expression. NULL means not used. */pOffset15302,700661
  With *pWith;           /* WITH clause attached to this select. Or NULL. */pWith15303,700732
#define SF_Distinct SF_Distinct15315,701092
#define SF_All SF_All15316,701159
#define SF_Resolved SF_Resolved15317,701225
#define SF_Aggregate SF_Aggregate15318,701297
#define SF_HasAgg SF_HasAgg15319,701375
#define SF_UsesEphemeral SF_UsesEphemeral15320,701445
#define SF_Expanded SF_Expanded15321,701516
#define SF_HasTypeInfo SF_HasTypeInfo15322,701594
#define SF_Compound SF_Compound15323,701671
#define SF_Values SF_Values15324,701737
#define SF_MultiValue SF_MultiValue15325,701809
#define SF_NestedFrom SF_NestedFrom15326,701888
#define SF_MinMaxAgg SF_MinMaxAgg15327,701965
#define SF_Recursive SF_Recursive15328,702042
#define SF_FixedLimit SF_FixedLimit15329,702121
#define SF_MaybeConvert SF_MaybeConvert15330,702197
#define SF_Converted SF_Converted15331,702277
#define SF_IncludeHidden SF_IncludeHidden15332,702355
#define SRT_Union SRT_Union15399,705678
#define SRT_Except SRT_Except15400,705745
#define SRT_Exists SRT_Exists15401,705812
#define SRT_Discard SRT_Discard15402,705881
#define SRT_Fifo SRT_Fifo15403,705948
#define SRT_DistFifo SRT_DistFifo15404,706027
#define SRT_Queue SRT_Queue15405,706100
#define SRT_DistQueue SRT_DistQueue15406,706159
#define IgnorableOrderby(IgnorableOrderby15409,706292
#define SRT_Output SRT_Output15411,706349
#define SRT_Mem SRT_Mem15412,706409
#define SRT_Set SRT_Set15413,706473
#define SRT_EphemTab SRT_EphemTab15414,706541
#define SRT_Coroutine SRT_Coroutine15415,706621
#define SRT_Table SRT_Table15416,706687
struct SelectDest {SelectDest15422,706867
  u8 eDest;            /* How to dispose of the results.  On of SRT_* above. */eDest15423,706887
  char *zAffSdst;      /* Affinity used when eDest==SRT_Set */zAffSdst15424,706967
  int iSDParm;         /* A parameter used by the eDest disposal method */iSDParm15425,707030
  int iSdst;           /* Base register where results are written */iSdst15426,707105
  int nSdst;           /* Number of registers allocated */nSdst15427,707174
  ExprList *pOrderBy;  /* Key columns for SRT_Queue and SRT_DistQueue */pOrderBy15428,707233
struct AutoincInfo {AutoincInfo15440,707811
  AutoincInfo *pNext;   /* Next info block in a list of them all */pNext15441,707832
  Table *pTab;          /* Table this info block refers to */pTab15442,707900
  int iDb;              /* Index in sqlite3.aDb[] of database holding pTab */iDb15443,707962
  int regCtr;           /* Memory register holding the rowid counter */regCtr15444,708040
# define SQLITE_N_COLCACHE SQLITE_N_COLCACHE15451,708176
struct TriggerPrg {TriggerPrg15472,709102
  Trigger *pTrigger;      /* Trigger this program was coded from */pTrigger15473,709122
  TriggerPrg *pNext;      /* Next entry in Parse.pTriggerPrg list */pNext15474,709190
  SubProgram *pProgram;   /* Program implementing pTrigger/orconf */pProgram15475,709259
  int orconf;             /* Default ON CONFLICT policy */orconf15476,709328
  u32 aColmask[2];        /* Masks of old.*, new.* columns accessed */aColmask15477,709387
  typedef unsigned char yDbMask[(SQLITE_MAX_ATTACHED+9)/8];yDbMask15484,709562
# define DbMaskTest(DbMaskTest15485,709622
# define DbMaskZero(DbMaskZero15486,709681
# define DbMaskSet(DbMaskSet15487,709733
# define DbMaskAllZero(DbMaskAllZero15488,709786
# define DbMaskNonZero(DbMaskNonZero15489,709838
  typedef unsigned int yDbMask;yDbMask15491,709901
# define DbMaskTest(DbMaskTest15492,709933
# define DbMaskZero(DbMaskZero15493,709992
# define DbMaskSet(DbMaskSet15494,710026
# define DbMaskAllZero(DbMaskAllZero15495,710079
# define DbMaskNonZero(DbMaskNonZero15496,710114
struct Parse {Parse15515,710909
  sqlite3 *db;         /* The main database structure */db15516,710924
  char *zErrMsg;       /* An error message */zErrMsg15517,710981
  Vdbe *pVdbe;         /* An engine for executing database bytecode */pVdbe15518,711027
  int rc;              /* Return code from execution */rc15519,711098
  u8 colNamesSet;      /* TRUE after OP_ColumnName has been issued to pVdbe */colNamesSet15520,711154
  u8 checkSchema;      /* Causes schema cookie check after an error */checkSchema15521,711233
  u8 nested;           /* Number of nested calls to the parser/code generator */nested15522,711304
  u8 nTempReg;         /* Number of temporary registers in aTempReg[] */nTempReg15523,711385
  u8 isMultiWrite;     /* True if statement may modify/insert multiple rows */isMultiWrite15524,711458
  u8 mayAbort;         /* True if statement may throw an ABORT exception */mayAbort15525,711537
  u8 hasCompound;      /* Need to invoke convertCompoundSelectToSubquery() */hasCompound15526,711613
  u8 okConstFactor;    /* OK to factor out constants */okConstFactor15527,711691
  u8 disableLookaside; /* Number of times lookaside has been disabled */disableLookaside15528,711747
  u8 nColCache;        /* Number of entries in aColCache[] */nColCache15529,711820
  int nRangeReg;       /* Size of the temporary register block */nRangeReg15530,711882
  int iRangeReg;       /* First register in temporary register block */iRangeReg15531,711948
  int nErr;            /* Number of errors seen */nErr15532,712020
  int nTab;            /* Number of previously allocated VDBE cursors */nTab15533,712071
  int nMem;            /* Number of memory cells used so far */nMem15534,712144
  int nOpAlloc;        /* Number of slots allocated for Vdbe.aOp[] */nOpAlloc15535,712208
  int szOpAlloc;       /* Bytes of memory space allocated for Vdbe.aOp[] */szOpAlloc15536,712278
  int ckBase;          /* Base register of data during check constraints */ckBase15537,712354
  int iSelfTab;        /* Table of an index whose exprs are being coded */iSelfTab15538,712430
  int iCacheLevel;     /* ColCache valid when aColCache[].iLevel<=iCacheLevel */iCacheLevel15539,712505
  int iCacheCnt;       /* Counter used to generate aColCache[].lru values */iCacheCnt15540,712586
  int nLabel;          /* Number of labels used */nLabel15541,712663
  int *aLabel;         /* Space to hold the labels */aLabel15542,712714
  ExprList *pConstExpr;/* Constant expressions */pConstExpr15543,712768
  Token constraintName;/* Name of the constraint currently being parsed */constraintName15544,712818
  yDbMask writeMask;   /* Start a write transaction on these databases */writeMask15545,712893
  yDbMask cookieMask;  /* Bitmask of schema verified databases */cookieMask15546,712967
  int regRowid;        /* Register holding rowid of CREATE TABLE entry */regRowid15547,713033
  int regRoot;         /* Register holding root page number for new objects */regRoot15548,713107
  int nMaxArg;         /* Max args passed to user function by sub-program */nMaxArg15549,713186
  int nSelect;         /* Number of SELECT statements seen */nSelect15551,713287
  int nSelectIndent;   /* How far to indent SELECTTRACE() output */nSelectIndent15552,713349
  int nTableLock;        /* Number of locks in aTableLock */nTableLock15555,713457
  TableLock *aTableLock; /* Required table locks for shared-cache mode */aTableLock15556,713518
  AutoincInfo *pAinc;  /* Information about AUTOINCREMENT counters */pAinc15558,713599
  Parse *pToplevel;    /* Parse structure for main program (or NULL) */pToplevel15559,713669
  Table *pTriggerTab;  /* Table triggers are being coded for */pTriggerTab15560,713741
  int addrCrTab;       /* Address of OP_CreateTable opcode on CREATE TABLE */addrCrTab15561,713805
  u32 nQueryLoop;      /* Est number of iterations of a query (10*log2(N)) */nQueryLoop15562,713883
  u32 oldmask;         /* Mask of old.* columns referenced */oldmask15563,713961
  u32 newmask;         /* Mask of new.* columns referenced */newmask15564,714023
  u8 eTriggerOp;       /* TK_UPDATE, TK_INSERT or TK_DELETE */eTriggerOp15565,714085
  u8 eOrconf;          /* Default ON CONFLICT policy for trigger steps */eOrconf15566,714148
  u8 disableTriggers;  /* True to disable triggers */disableTriggers15567,714222
  struct yColCache {yColCache15576,714696
    int iTable;           /* Table cursor number */iTable15577,714717
    i16 iColumn;          /* Table column number */iColumn15578,714769
    u8 tempReg;           /* iReg is a temp register that needs to be freed */tempReg15579,714821
    int iLevel;           /* Nesting level */iLevel15580,714900
    int iReg;             /* Reg with value of this column. 0 means none. */iReg15581,714946
    int lru;              /* Least recently used entry has the smallest value */lru15582,715023
  } aColCache[SQLITE_N_COLCACHE];  /* One for each column cache entry */aColCache15583,715104
  int aTempReg[8];        /* Holding area for temporary registers */aTempReg15584,715177
  Token sNameToken;       /* Token with unqualified schema object name */sNameToken15585,715246
  Token sLastToken;       /* The last token parsed */sLastToken15594,715741
  ynVar nVar;               /* Number of '?' variables seen in the SQL so far */nVar15595,715795
  int nzVar;                /* Number of available slots in azVar[] */nzVar15596,715876
  u8 iPkSortOrder;          /* ASC or DESC for INTEGER PRIMARY KEY */iPkSortOrder15597,715947
  u8 explain;               /* True if the EXPLAIN flag is found on the query */explain15598,716017
  u8 declareVtab;           /* True if inside sqlite3_declare_vtab() */declareVtab15600,716131
  int nVtabLock;            /* Number of virtual tables to lock */nVtabLock15601,716203
  int nHeight;              /* Expression tree height of current sub-select */nHeight15603,716277
  int iSelectId;            /* ID of current select for EXPLAIN output */iSelectId15605,716384
  int iNextSelectId;        /* Next available select ID for EXPLAIN output */iNextSelectId15606,716458
  char **azVar;             /* Pointers to names of parameters */azVar15608,716543
  Vdbe *pReprepare;         /* VM being reprepared (sqlite3Reprepare()) */pReprepare15609,716609
  const char *zTail;        /* All SQL text past the last semicolon parsed */zTail15610,716684
  Table *pNewTable;         /* A table being constructed by CREATE TABLE */pNewTable15611,716762
  Trigger *pNewTrigger;     /* Trigger under construct by a CREATE TRIGGER */pNewTrigger15612,716838
  const char *zAuthContext; /* The 6th parameter to db->xAuth callbacks */zAuthContext15613,716916
  Token sArg;               /* Complete text of a module argument */sArg15615,717024
  Table **apVtabLock;       /* Pointer to virtual tables needing locking */apVtabLock15616,717093
  Table *pZombieTab;        /* List of Table objects to delete after code gen */pZombieTab15618,717176
  TriggerPrg *pTriggerPrg;  /* Linked list of coded triggers */pTriggerPrg15619,717257
  With *pWith;              /* Current WITH clause, or NULL */pWith15620,717321
  With *pWithToFree;        /* Free this WITH object at the end of the parse */pWithToFree15621,717384
#define PARSE_HDR_SZ PARSE_HDR_SZ15627,717534
#define PARSE_RECURSE_SZ PARSE_RECURSE_SZ15628,717615
#define PARSE_TAIL_SZ PARSE_TAIL_SZ15629,717691
#define PARSE_TAIL(PARSE_TAIL15630,717771
  #define IN_DECLARE_VTAB IN_DECLARE_VTAB15636,717954
  #define IN_DECLARE_VTAB IN_DECLARE_VTAB15638,717988
struct AuthContext {AuthContext15645,718202
  const char *zAuthContext;   /* Put saved Parse.zAuthContext here */zAuthContext15646,718223
  Parse *pParse;              /* The Parse structure */pParse15647,718293
#define OPFLAG_NCHANGE OPFLAG_NCHANGE15662,718780
#define OPFLAG_EPHEM OPFLAG_EPHEM15664,718941
#define OPFLAG_LASTROWID OPFLAG_LASTROWID15665,719018
#define OPFLAG_ISUPDATE OPFLAG_ISUPDATE15666,719089
#define OPFLAG_APPEND OPFLAG_APPEND15667,719164
#define OPFLAG_USESEEKRESULT OPFLAG_USESEEKRESULT15668,719238
#define OPFLAG_ISNOOP OPFLAG_ISNOOP15670,719354
#define OPFLAG_LENGTHARG OPFLAG_LENGTHARG15672,719440
#define OPFLAG_TYPEOFARG OPFLAG_TYPEOFARG15673,719516
#define OPFLAG_BULKCSR OPFLAG_BULKCSR15674,719592
#define OPFLAG_SEEKEQ OPFLAG_SEEKEQ15675,719670
#define OPFLAG_FORDELETE OPFLAG_FORDELETE15676,719748
#define OPFLAG_P2ISREG OPFLAG_P2ISREG15677,719826
#define OPFLAG_PERMUTE OPFLAG_PERMUTE15678,719906
#define OPFLAG_SAVEPOSITION OPFLAG_SAVEPOSITION15679,719981
#define OPFLAG_AUXDELETE OPFLAG_AUXDELETE15680,720056
struct Trigger {Trigger15697,720841
  char *zName;            /* The name of the trigger                        */zName15698,720858
  char *table;            /* The table or view to which the trigger applies */table15699,720937
  u8 op;                  /* One of TK_DELETE, TK_UPDATE, TK_INSERT         */op15700,721016
  u8 tr_tm;               /* One of TRIGGER_BEFORE, TRIGGER_AFTER */tr_tm15701,721095
  Expr *pWhen;            /* The WHEN clause of the expression (may be NULL) */pWhen15702,721164
  IdList *pColumns;       /* If this is an UPDATE OF <column-list> trigger,pColumns15703,721244
  Schema *pSchema;        /* Schema containing the trigger */pSchema15705,721385
  Schema *pTabSchema;     /* Schema containing the table */pTabSchema15706,721447
  TriggerStep *step_list; /* Link list of trigger program steps             */step_list15707,721507
  Trigger *pNext;         /* Next trigger associated with the table */pNext15708,721586
#define TRIGGER_BEFORE TRIGGER_BEFORE15718,721904
#define TRIGGER_AFTER TRIGGER_AFTER15719,721930
struct TriggerStep {TriggerStep15759,723702
  u8 op;               /* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT */op15760,723723
  u8 orconf;           /* OE_Rollback etc. */orconf15761,723802
  Trigger *pTrig;      /* The trigger that this step is a part of */pTrig15762,723848
  Select *pSelect;     /* SELECT statement or RHS of INSERT INTO SELECT ... */pSelect15763,723917
  char *zTarget;       /* Target table for DELETE, UPDATE, INSERT */zTarget15764,723996
  Expr *pWhere;        /* The WHERE clause for DELETE or UPDATE steps */pWhere15765,724065
  ExprList *pExprList; /* SET clause for UPDATE. */pExprList15766,724138
  IdList *pIdList;     /* Column names for INSERT */pIdList15767,724190
  TriggerStep *pNext;  /* Next in the link-list */pNext15768,724243
  TriggerStep *pLast;  /* Last element in link-list. Valid for 1st elem only */pLast15769,724294
typedef struct DbFixer DbFixer;DbFixer15777,724538
struct DbFixer {DbFixer15778,724570
  Parse *pParse;      /* The parsing context.  Error messages written here */pParse15779,724587
  Schema *pSchema;    /* Fix items to this schema */pSchema15780,724665
  int bVarOnly;       /* Check for variable references only */bVarOnly15781,724718
  const char *zDb;    /* Make sure all objects are contained in this database */zDb15782,724781
  const char *zType;  /* Type of the container - used for error messages */zType15783,724862
  const Token *pName; /* Name of the container - used for error messages */pName15784,724938
struct StrAccum {StrAccum15791,725154
  sqlite3 *db;         /* Optional database for lookaside.  Can be NULL */db15792,725172
  char *zBase;         /* A base allocation.  Not from malloc. */zBase15793,725247
  char *zText;         /* The string collected so far */zText15794,725313
  u32  nChar;          /* Length of the string so far */nChar15795,725370
  u32  nAlloc;         /* Amount of space allocated in zText */nAlloc15796,725427
  u32  mxAlloc;        /* Maximum allowed allocation.  0 for no malloc usage */mxAlloc15797,725491
  u8   accError;       /* STRACCUM_NOMEM or STRACCUM_TOOBIG */accError15798,725571
  u8   printfFlags;    /* SQLITE_PRINTF flags below */printfFlags15799,725634
#define STRACCUM_NOMEM STRACCUM_NOMEM15801,725692
#define STRACCUM_TOOBIG STRACCUM_TOOBIG15802,725719
#define SQLITE_PRINTF_INTERNAL SQLITE_PRINTF_INTERNAL15803,725746
#define SQLITE_PRINTF_SQLFUNC SQLITE_PRINTF_SQLFUNC15804,725826
#define SQLITE_PRINTF_MALLOCED SQLITE_PRINTF_MALLOCED15805,725904
#define isMalloced(isMalloced15807,725981
  sqlite3 *db;        /* The database being initialized */db15815,726213
  char **pzErrMsg;    /* Error message stored here */pzErrMsg15816,726272
  int iDb;            /* 0 for main database.  1 for TEMP, 2.. for ATTACHed */iDb15817,726326
  int rc;             /* Result code stored here */rc15818,726405
} InitData;InitData15819,726457
struct Sqlite3Config {Sqlite3Config15826,726609
  int bMemstat;                     /* True to enable memory status */bMemstat15827,726632
  int bCoreMutex;                   /* True to enable core mutexing */bCoreMutex15828,726703
  int bFullMutex;                   /* True to enable full mutexing */bFullMutex15829,726774
  int bOpenUri;                     /* True to interpret filenames as URIs */bOpenUri15830,726845
  int bUseCis;                      /* Use covering indices for full-scans */bUseCis15831,726923
  int mxStrlen;                     /* Maximum string length */mxStrlen15832,727001
  int neverCorrupt;                 /* Database is always well-formed */neverCorrupt15833,727065
  int szLookaside;                  /* Default lookaside buffer size */szLookaside15834,727138
  int nLookaside;                   /* Default lookaside buffer count */nLookaside15835,727210
  int nStmtSpill;                   /* Stmt-journal spill-to-disk threshold */nStmtSpill15836,727283
  sqlite3_mem_methods m;            /* Low-level memory allocation interface */m15837,727362
  sqlite3_mutex_methods mutex;      /* Low-level mutex interface */mutex15838,727442
  sqlite3_pcache_methods2 pcache2;  /* Low-level page-cache interface */pcache215839,727510
  void *pHeap;                      /* Heap storage space */pHeap15840,727583
  int nHeap;                        /* Size of pHeap[] */nHeap15841,727644
  int mnReq, mxReq;                 /* Min and max heap requests sizes */mnReq15842,727702
  int mnReq, mxReq;                 /* Min and max heap requests sizes */mxReq15842,727702
  sqlite3_int64 szMmap;             /* mmap() space per open file */szMmap15843,727776
  sqlite3_int64 mxMmap;             /* Maximum value for szMmap */mxMmap15844,727845
  void *pScratch;                   /* Scratch memory */pScratch15845,727912
  int szScratch;                    /* Size of each scratch buffer */szScratch15846,727969
  int nScratch;                     /* Number of scratch buffers */nScratch15847,728039
  void *pPage;                      /* Page cache memory */pPage15848,728107
  int szPage;                       /* Size of each page in pPage[] */szPage15849,728167
  int nPage;                        /* Number of pages in pPage[] */nPage15850,728238
  int mxParserStack;                /* maximum depth of the parser stack */mxParserStack15851,728307
  int sharedCacheEnabled;           /* true if shared-cache mode enabled */sharedCacheEnabled15852,728383
  u32 szPma;                        /* Maximum Sorter PMA size */szPma15853,728459
  int isInit;                       /* True after initialization has finished */isInit15856,728640
  int inProgress;                   /* True while initialization in progress */inProgress15857,728721
  int isMutexInit;                  /* True after mutexes are initialized */isMutexInit15858,728801
  int isMallocInit;                 /* True after malloc is initialized */isMallocInit15859,728878
  int isPCacheInit;                 /* True after malloc is initialized */isPCacheInit15860,728953
  int nRefInitMutex;                /* Number of users of pInitMutex */nRefInitMutex15861,729028
  sqlite3_mutex *pInitMutex;        /* Mutex used by sqlite3_initialize() */pInitMutex15862,729100
  void (*xLog)(void*,int,const char*); /* Function for logging */xLog15863,729177
  void *pLogArg;                       /* First argument to xLog() */pLogArg15864,729243
  void(*xSqllog)(void*,sqlite3*,const char*, int);xSqllog15866,729341
  void *pSqllogArg;pSqllogArg15867,729392
  void (*xVdbeBranch)(void*,int iSrcLine,u8 eThis,u8 eMx);  /* Callback */xVdbeBranch15873,729597
  void *pVdbeBranchArg;                                     /* 1st argument */pVdbeBranchArg15874,729672
  int (*xTestCallback)(int);        /* Invoked by sqlite3FaultSim() */xTestCallback15877,729791
  int bLocaltimeFault;              /* True to fail localtime() calls */bLocaltimeFault15879,729869
  int iOnceResetThreshold;          /* When to reset OP_Once counters */iOnceResetThreshold15880,729942
#define CORRUPT_DB CORRUPT_DB15899,730590
struct Walker {Walker15904,730703
  Parse *pParse;                            /* Parser context.  */pParse15905,730719
  int (*xExprCallback)(Walker*, Expr*);     /* Callback for expressions */xExprCallback15906,730786
  int (*xSelectCallback)(Walker*,Select*);  /* Callback for SELECTs */xSelectCallback15907,730861
  void (*xSelectCallback2)(Walker*,Select*);/* Second callback for SELECTs */xSelectCallback215908,730932
  int walkerDepth;                          /* Number of subqueries */walkerDepth15909,731010
  u8 eCode;                                 /* A small processing code */eCode15910,731081
    NameContext *pNC;                          /* Naming context */pNC15912,731229
    int n;                                     /* A counter */n15913,731297
    int iCur;                                  /* A cursor number */iCur15914,731360
    SrcList *pSrcList;                         /* FROM clause */pSrcList15915,731429
    struct SrcCount *pSrcCount;                /* Counting column references */pSrcCount15916,731494
    struct CCurHint *pCCurHint;                /* Used by codeCursorHint() */pCCurHint15917,731574
    int *aiCol;                                /* array of column indexes */aiCol15918,731652
    struct IdxCover *pIdxCover;                /* Check for index coverage */pIdxCover15919,731729
  } u;u15920,731807
#define WRC_Continue WRC_Continue15935,732274
#define WRC_Prune WRC_Prune15936,732336
#define WRC_Abort WRC_Abort15937,732414
struct With {With15943,732610
  int nCte;                       /* Number of CTEs in the WITH clause */nCte15944,732624
  With *pOuter;                   /* Containing WITH clause, or NULL */pOuter15945,732698
  struct Cte {                    /* For each CTE in the WITH clause.... */Cte15946,732770
    char *zName;                    /* Name of this CTE */zName15947,732846
    ExprList *pCols;                /* List of explicit column names, or NULL */pCols15948,732905
    Select *pSelect;                /* The definition of this CTE */pSelect15949,732986
    const char *zCteErr;            /* Error message for circular references */zCteErr15950,733055
  } a[1];a15951,733135
struct TreeView {TreeView15959,733316
  int iLevel;             /* Which level of the tree we are on */iLevel15960,733334
  u8  bLine[100];         /* Draw vertical in column i if bLine[i] is true */bLine15961,733400
#define SQLITE_SKIP_UTF8(SQLITE_SKIP_UTF815969,733648
#define SQLITE_CORRUPT_BKPT SQLITE_CORRUPT_BKPT15985,734330
#define SQLITE_MISUSE_BKPT SQLITE_MISUSE_BKPT15986,734388
#define SQLITE_CANTOPEN_BKPT SQLITE_CANTOPEN_BKPT15987,734444
# define SQLITE_NOMEM_BKPT SQLITE_NOMEM_BKPT15991,734619
# define SQLITE_IOERR_NOMEM_BKPT SQLITE_IOERR_NOMEM_BKPT15992,734674
# define SQLITE_NOMEM_BKPT SQLITE_NOMEM_BKPT15994,734746
# define SQLITE_IOERR_NOMEM_BKPT SQLITE_IOERR_NOMEM_BKPT15995,734786
# undef SQLITE_ENABLE_FTS3SQLITE_ENABLE_FTS316002,734942
# undef SQLITE_ENABLE_FTS4SQLITE_ENABLE_FTS416003,734969
# define SQLITE_ENABLE_FTS3 SQLITE_ENABLE_FTS316012,735283
# define sqlite3Toupper(sqlite3Toupper16030,735821
# define sqlite3Isspace(sqlite3Isspace16031,735899
# define sqlite3Isalnum(sqlite3Isalnum16032,735971
# define sqlite3Isalpha(sqlite3Isalpha16033,736043
# define sqlite3Isdigit(sqlite3Isdigit16034,736115
# define sqlite3Isxdigit(sqlite3Isxdigit16035,736187
# define sqlite3Tolower(sqlite3Tolower16036,736259
# define sqlite3Isquote(sqlite3Isquote16037,736330
# define sqlite3Toupper(sqlite3Toupper16039,736408
# define sqlite3Isspace(sqlite3Isspace16040,736465
# define sqlite3Isalnum(sqlite3Isalnum16041,736522
# define sqlite3Isalpha(sqlite3Isalpha16042,736579
# define sqlite3Isdigit(sqlite3Isdigit16043,736636
# define sqlite3Isxdigit(sqlite3Isxdigit16044,736693
# define sqlite3Tolower(sqlite3Tolower16045,736751
# define sqlite3Isquote(sqlite3Isquote16046,736808
#define sqlite3StrNICmp sqlite3StrNICmp16058,737176
# define sqlite3StackAllocRaw(sqlite3StackAllocRaw16094,738772
# define sqlite3StackAllocZero(sqlite3StackAllocZero16095,738819
# define sqlite3StackFree(sqlite3StackFree16096,738880
# define sqlite3StackAllocRaw(sqlite3StackAllocRaw16098,738917
# define sqlite3StackAllocZero(sqlite3StackAllocZero16099,738978
# define sqlite3StackFree(sqlite3StackFree16100,739040
#undef SQLITE_ENABLE_MEMSYS3SQLITE_ENABLE_MEMSYS316108,739304
# define sqlite3MemoryBarrier(sqlite3MemoryBarrier16125,739888
# define sqlite3IsNaN(sqlite3IsNaN16140,740380
struct PrintfArguments {PrintfArguments16147,740565
  int nArg;                /* Total number of arguments */nArg16148,740590
  int nUsed;               /* Number of arguments used so far */nUsed16149,740649
  sqlite3_value **apArg;   /* The argument values */apArg16150,740714
# define sqlite3ColumnPropertiesFromName(sqlite3ColumnPropertiesFromName16222,744616
# define sqlite3FaultSim(sqlite3FaultSim16236,745346
# define sqlite3ViewGetColumnNames(sqlite3ViewGetColumnNames16263,746435
# define sqlite3AutoincrementBegin(sqlite3AutoincrementBegin16276,746929
# define sqlite3AutoincrementEnd(sqlite3AutoincrementEnd16277,746967
#define ONEPASS_OFF ONEPASS_OFF16320,749740
#define ONEPASS_SINGLE ONEPASS_SINGLE16321,749807
#define ONEPASS_MULTI ONEPASS_MULTI16322,749885
#define SQLITE_ECEL_DUP SQLITE_ECEL_DUP16342,751217
#define SQLITE_ECEL_FACTOR SQLITE_ECEL_FACTOR16343,751283
#define SQLITE_ECEL_REF SQLITE_ECEL_REF16344,751350
#define LOCATE_VIEW LOCATE_VIEW16349,751692
#define LOCATE_NOERR LOCATE_NOERR16350,751720
# define sqlite3SelectSetName(sqlite3SelectSetName16414,755500
# define sqlite3ParseToplevel(sqlite3ParseToplevel16450,757688
# define sqlite3IsToplevel(sqlite3IsToplevel16451,757761
# define sqlite3TriggersExist(sqlite3TriggersExist16453,757817
# define sqlite3DeleteTrigger(sqlite3DeleteTrigger16454,757860
# define sqlite3DropTriggerPtr(sqlite3DropTriggerPtr16455,757895
# define sqlite3UnlinkAndDeleteTrigger(sqlite3UnlinkAndDeleteTrigger16456,757931
# define sqlite3CodeRowTrigger(sqlite3CodeRowTrigger16457,757977
# define sqlite3CodeRowTriggerDirect(sqlite3CodeRowTriggerDirect16458,758027
# define sqlite3TriggerList(sqlite3TriggerList16459,758077
# define sqlite3ParseToplevel(sqlite3ParseToplevel16460,758113
# define sqlite3IsToplevel(sqlite3IsToplevel16461,758148
# define sqlite3TriggerColmask(sqlite3TriggerColmask16462,758180
# define sqlite3AuthRead(sqlite3AuthRead16475,758871
# define sqlite3AuthCheck(sqlite3AuthCheck16476,758905
# define sqlite3AuthContextPush(sqlite3AuthContextPush16477,758955
# define sqlite3AuthContextPop(sqlite3AuthContextPop16478,758994
#define getVarint32(getVarint3216520,760861
#define putVarint32(putVarint3216522,760967
#define getVarint getVarint16525,761082
#define putVarint putVarint16526,761120
# define sqlite3FileSuffix3(sqlite3FileSuffix316566,763134
SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];sqlite3OpcodeProperty16581,763897
SQLITE_PRIVATE const char sqlite3StrBINARY[];sqlite3StrBINARY16582,763957
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];sqlite3UpperToLower16583,764003
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];sqlite3CtypeMap16584,764061
SQLITE_PRIVATE const Token sqlite3IntTokens[];sqlite3IntTokens16585,764115
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;sqlite3Config16586,764162
SQLITE_PRIVATE FuncDefHash sqlite3BuiltinFunctions;sqlite3BuiltinFunctions16587,764224
SQLITE_PRIVATE int sqlite3PendingByte;sqlite3PendingByte16589,764300
# define sqlite3ExprCheckIN(sqlite3ExprCheckIN16657,768059
# define sqlite3CloseExtensions(sqlite3CloseExtensions16684,769084
  #define sqlite3TableLock(sqlite3TableLock16690,769243
#  define sqlite3VtabClear(sqlite3VtabClear16698,769401
#  define sqlite3VtabSync(sqlite3VtabSync16699,769431
#  define sqlite3VtabRollback(sqlite3VtabRollback16700,769472
#  define sqlite3VtabCommit(sqlite3VtabCommit16701,769505
#  define sqlite3VtabInSync(sqlite3VtabInSync16702,769536
#  define sqlite3VtabLock(sqlite3VtabLock16703,769570
#  define sqlite3VtabUnlock(sqlite3VtabUnlock16704,769599
#  define sqlite3VtabUnlockList(sqlite3VtabUnlockList16705,769630
#  define sqlite3VtabSavepoint(sqlite3VtabSavepoint16706,769665
#  define sqlite3GetVTable(sqlite3GetVTable16707,769715
#  define sqlite3VtabInSync(sqlite3VtabInSync16720,770422
#define sqlite3WithPush(sqlite3WithPush16753,772364
#define sqlite3WithDelete(sqlite3WithDelete16754,772395
  #define sqlite3FkActions(sqlite3FkActions16772,773341
  #define sqlite3FkCheck(sqlite3FkCheck16773,773381
  #define sqlite3FkDropTable(sqlite3FkDropTable16774,773419
  #define sqlite3FkOldmask(sqlite3FkOldmask16775,773455
  #define sqlite3FkRequired(sqlite3FkRequired16776,773497
  #define sqlite3FkDelete(sqlite3FkDelete16782,773720
  #define sqlite3FkLocateIndex(sqlite3FkLocateIndex16783,773751
#define SQLITE_FAULTINJECTOR_MALLOC SQLITE_FAULTINJECTOR_MALLOC16790,773876
#define SQLITE_FAULTINJECTOR_COUNT SQLITE_FAULTINJECTOR_COUNT16791,773918
  #define sqlite3BeginBenignMalloc(sqlite3BeginBenignMalloc16802,774270
  #define sqlite3EndBenignMalloc(sqlite3EndBenignMalloc16803,774307
#define IN_INDEX_ROWID IN_INDEX_ROWID16809,774407
#define IN_INDEX_EPH IN_INDEX_EPH16810,774477
#define IN_INDEX_INDEX_ASC IN_INDEX_INDEX_ASC16811,774544
#define IN_INDEX_INDEX_DESC IN_INDEX_INDEX_DESC16812,774609
#define IN_INDEX_NOOP IN_INDEX_NOOP16813,774675
#define IN_INDEX_NOOP_OK IN_INDEX_NOOP_OK16817,774821
#define IN_INDEX_MEMBERSHIP IN_INDEX_MEMBERSHIP16818,774891
#define IN_INDEX_LOOP IN_INDEX_LOOP16819,774971
  #define sqlite3SelectExprHeight(sqlite3SelectExprHeight16836,775708
  #define sqlite3ExprCheckHeight(sqlite3ExprCheckHeight16837,775747
  #define sqlite3ConnectionBlocked(sqlite3ConnectionBlocked16848,776121
  #define sqlite3ConnectionUnlocked(sqlite3ConnectionUnlocked16849,776161
  #define sqlite3ConnectionClosed(sqlite3ConnectionClosed16850,776200
# define IOTRACE(IOTRACE16863,776524
SQLITE_API SQLITE_EXTERN void (SQLITE_CDECL *sqlite3IoTrace)(const char*,...);sqlite3IoTrace16865,776639
# define IOTRACE(IOTRACE16867,776724
# define sqlite3VdbeIOTraceSql(sqlite3VdbeIOTraceSql16868,776744
# define sqlite3MemdebugSetType(sqlite3MemdebugSetType16904,778389
# define sqlite3MemdebugHasType(sqlite3MemdebugHasType16905,778439
# define sqlite3MemdebugNoType(sqlite3MemdebugNoType16906,778479
#define MEMTYPE_HEAP MEMTYPE_HEAP16908,778526
#define MEMTYPE_LOOKASIDE MEMTYPE_LOOKASIDE16909,778590
#define MEMTYPE_SCRATCH MEMTYPE_SCRATCH16910,778665
#define MEMTYPE_PCACHE MEMTYPE_PCACHE16911,778724
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {sqlite3UpperToLower16957,780315
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {sqlite3CtypeMap17024,784002
# define  SQLITE_USE_URI SQLITE_USE_URI17075,787015
# define SQLITE_ALLOW_COVERING_INDEX_SCAN SQLITE_ALLOW_COVERING_INDEX_SCAN17083,787276
# define SQLITE_SORTER_PMASZ SQLITE_SORTER_PMASZ17090,787454
# define SQLITE_STMTJRNL_SPILL SQLITE_STMTJRNL_SPILL17102,787979
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {sqlite3Config17109,788122
SQLITE_PRIVATE FuncDefHash sqlite3BuiltinFunctions;sqlite3BuiltinFunctions17167,790500
SQLITE_PRIVATE const Token sqlite3IntTokens[] = {sqlite3IntTokens17172,790598
SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;sqlite3PendingByte17197,791584
SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;sqlite3OpcodeProperty17207,791888
SQLITE_PRIVATE const char sqlite3StrBINARY[] = "BINARY";sqlite3StrBINARY17212,792017
#define CTIMEOPT_VAL_(CTIMEOPT_VAL_17248,793252
#define CTIMEOPT_VAL(CTIMEOPT_VAL17249,793284
static const char * const azCompileOpt[] = {azCompileOpt17244,793080
SQLITE_API int sqlite3_compileoption_used(const char *zOptName){sqlite3_compileoption_used17631,801029
SQLITE_API const char *sqlite3_compileoption_get(int N){sqlite3_compileoption_get17659,801756
#define SQLITE_VDBEINT_HSQLITE_VDBEINT_H17706,803475
# define SQLITE_MAX_SCHEMA_RETRY SQLITE_MAX_SCHEMA_RETRY17713,803663
# define VDBE_DISPLAY_P4 VDBE_DISPLAY_P417722,803934
# define VDBE_DISPLAY_P4 VDBE_DISPLAY_P417724,803967
typedef struct VdbeOp Op;Op17732,804165
typedef unsigned Bool;Bool17737,804216
typedef struct VdbeSorter VdbeSorter;VdbeSorter17740,804285
typedef struct AuxData AuxData;AuxData17743,804375
#define CURTYPE_BTREE CURTYPE_BTREE17746,804436
#define CURTYPE_SORTER CURTYPE_SORTER17747,804466
#define CURTYPE_VTAB CURTYPE_VTAB17748,804496
#define CURTYPE_PSEUDO CURTYPE_PSEUDO17749,804526
typedef struct VdbeCursor VdbeCursor;VdbeCursor17761,804881
struct VdbeCursor {VdbeCursor17762,804919
  u8 eCurType;          /* One of the CURTYPE_* values above */eCurType17763,804939
  i8 iDb;               /* Index of cursor database in db->aDb[] (or -1) */iDb17764,805003
  u8 nullRow;           /* True if pointing to a row with no data */nullRow17765,805079
  u8 deferredMoveto;    /* A call to sqlite3BtreeMoveto() is needed */deferredMoveto17766,805148
  u8 isTable;           /* True for rowid tables.  False for indexes */isTable17767,805219
  u8 seekOp;            /* Most recent seek operation on this cursor */seekOp17769,805311
  u8 wrFlag;            /* The wrFlag argument to sqlite3BtreeCursor() */wrFlag17770,805383
  Bool isEphemeral:1;   /* True for an ephemeral table */isEphemeral17772,805464
  Bool useRandomRowid:1;/* Generate new record numbers semi-randomly */useRandomRowid17773,805522
  Bool isOrdered:1;     /* True if the table is not BTREE_UNORDERED */isOrdered17774,805594
  Pgno pgnoRoot;        /* Root page of the open btree cursor */pgnoRoot17775,805665
  i16 nField;           /* Number of fields in the header */nField17776,805730
  u16 nHdrParsed;       /* Number of header fields parsed so far */nHdrParsed17777,805791
    BtCursor *pCursor;          /* CURTYPE_BTREE.  Btree cursor */pCursor17779,805869
    sqlite3_vtab_cursor *pVCur; /* CURTYPE_VTAB.   Vtab cursor */pVCur17780,805936
    int pseudoTableReg;         /* CURTYPE_PSEUDO. Reg holding content. */pseudoTableReg17781,806002
    VdbeSorter *pSorter;        /* CURTYPE_SORTER. Sorter object */pSorter17782,806077
  } uc;uc17783,806145
  Btree *pBt;           /* Separate file holding temporary table */pBt17784,806153
  KeyInfo *pKeyInfo;    /* Info about index keys needed by index cursors */pKeyInfo17785,806221
  int seekResult;       /* Result of previous sqlite3BtreeMoveto() */seekResult17786,806297
  i64 seqCount;         /* Sequence counter */seqCount17787,806367
  i64 movetoTarget;     /* Argument to the deferred sqlite3BtreeMoveto() */movetoTarget17788,806414
  VdbeCursor *pAltCursor; /* Associated index cursor from which to read */pAltCursor17789,806490
  int *aAltMap;           /* Mapping from table to index column numbers */aAltMap17790,806565
  u64 maskUsed;         /* Mask of columns used by this cursor */maskUsed17792,806678
  u32 cacheStatus;      /* Cache is valid if this matches Vdbe.cacheCtr */cacheStatus17804,807164
  u32 payloadSize;      /* Total number of bytes in the record */payloadSize17805,807239
  u32 szRow;            /* Byte available in aRow */szRow17806,807305
  u32 iHdrOffset;       /* Offset to next unparsed byte of the header */iHdrOffset17807,807358
  const u8 *aRow;       /* Data for the current row, if all on one page */aRow17808,807431
  u32 *aOffset;         /* Pointer to aType[nField] */aOffset17809,807506
  u32 aType[1];         /* Type values for all entries in the record */aType17810,807561
#define CACHE_STALE CACHE_STALE17820,807927
typedef struct VdbeFrame VdbeFrame;VdbeFrame17843,809114
struct VdbeFrame {VdbeFrame17844,809150
  Vdbe *v;                /* VM this frame belongs to */v17845,809169
  VdbeFrame *pParent;     /* Parent of this frame, or NULL if parent is main */pParent17846,809226
  Op *aOp;                /* Program instructions for parent frame */aOp17847,809306
  i64 *anExec;            /* Event counters from parent frame */anExec17848,809376
  Mem *aMem;              /* Array of memory cells for parent frame */aMem17849,809441
  VdbeCursor **apCsr;     /* Array of Vdbe cursors for parent frame */apCsr17850,809512
  void *token;            /* Copy of SubProgram.token */token17851,809583
  i64 lastRowid;          /* Last insert rowid (sqlite3.lastRowid) */lastRowid17852,809640
  AuxData *pAuxData;      /* Linked list of auxdata allocations */pAuxData17853,809710
  int nCursor;            /* Number of entries in apCsr */nCursor17854,809777
  int pc;                 /* Program Counter in parent (calling) frame */pc17855,809836
  int nOp;                /* Size of aOp array */nOp17856,809910
  int nMem;               /* Number of entries in aMem */nMem17857,809960
  int nChildMem;          /* Number of memory cells for child frame */nChildMem17858,810018
  int nChildCsr;          /* Number of cursors for child frame */nChildCsr17859,810089
  int nChange;            /* Statement changes (Vdbe.nChange)     */nChange17860,810155
  int nDbChange;          /* Value of db->nChange */nDbChange17861,810224
#define VdbeFrameMem(VdbeFrameMem17864,810281
struct Mem {Mem17871,810535
  union MemValue {MemValue17872,810548
    double r;           /* Real value used when MEM_Real is set in flags */r17873,810567
    i64 i;              /* Integer value used when MEM_Int is set in flags */i17874,810643
    int nZero;          /* Used when bit MEM_Zero is set in flags */nZero17875,810721
    FuncDef *pDef;      /* Used only when flags==MEM_Agg */pDef17876,810790
    RowSet *pRowSet;    /* Used only when flags==MEM_RowSet */pRowSet17877,810850
    VdbeFrame *pFrame;  /* Used when flags==MEM_Frame */pFrame17878,810913
  } u;u17879,810970
  u16 flags;          /* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. */flags17880,810977
  u8  enc;            /* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE */enc17881,811058
  u8  eSubtype;       /* Subtype for this value */eSubtype17882,811130
  int n;              /* Number of characters in string value, excluding '\0' */n17883,811181
  char *z;            /* String or BLOB value */z17884,811262
  char *zMalloc;      /* Space to hold MEM_Str or MEM_Blob if szMalloc>0 */zMalloc17886,811372
  int szMalloc;       /* Size of the zMalloc allocation */szMalloc17887,811448
  u32 uTemp;          /* Transient storage for serial_type in OP_MakeRecord */uTemp17888,811507
  sqlite3 *db;        /* The associated database connection */db17889,811586
  void (*xDel)(void*);/* Destructor for Mem.z - only valid if MEM_Dyn */xDel17890,811649
  Mem *pScopyFrom;    /* This Mem is a shallow copy of pScopyFrom */pScopyFrom17892,811742
  void *pFiller;      /* So that sizeof(Mem) is a multiple of 8 */pFiller17893,811811
#define MEMCELLSIZE MEMCELLSIZE17901,811983
#define MEM_Null MEM_Null17915,812601
#define MEM_Str MEM_Str17916,812652
#define MEM_Int MEM_Int17917,812707
#define MEM_Real MEM_Real17918,812764
#define MEM_Blob MEM_Blob17919,812824
#define MEM_AffMask MEM_AffMask17920,812877
#define MEM_RowSet MEM_RowSet17921,812936
#define MEM_Frame MEM_Frame17922,812998
#define MEM_Undefined MEM_Undefined17923,813063
#define MEM_Cleared MEM_Cleared17924,813119
#define MEM_TypeMask MEM_TypeMask17925,813191
#define MEM_Term MEM_Term17933,813499
#define MEM_Dyn MEM_Dyn17934,813565
#define MEM_Static MEM_Static17935,813635
#define MEM_Ephem MEM_Ephem17936,813704
#define MEM_Agg MEM_Agg17937,813777
#define MEM_Zero MEM_Zero17938,813854
#define MEM_Subtype MEM_Subtype17939,813935
  #undef MEM_ZeroMEM_Zero17941,814022
  #define MEM_Zero MEM_Zero17942,814040
#define VdbeMemDynamic(VdbeMemDynamic17948,814200
#define MemSetTypeFlag(MemSetTypeFlag17954,814363
#define memIsValid(memIsValid17962,814596
struct AuxData {AuxData17972,814990
  int iOp;                        /* Instruction number of OP_Function opcode */iOp17973,815007
  int iArg;                       /* Index of function argument. */iArg17974,815088
  void *pAux;                     /* Aux data pointer */pAux17975,815156
  void (*xDelete)(void *);        /* Destructor for the aux data */xDelete17976,815213
  AuxData *pNext;                 /* Next element in list */pNext17977,815281
struct sqlite3_context {sqlite3_context17993,815896
  Mem *pOut;              /* The return value is stored here */pOut17994,815921
  FuncDef *pFunc;         /* Pointer to function information */pFunc17995,815985
  Mem *pMem;              /* Memory cell used to store aggregate context */pMem17996,816049
  Vdbe *pVdbe;            /* The VM that owns this context */pVdbe17997,816125
  int iOp;                /* Instruction number of OP_Function */iOp17998,816187
  int isError;            /* Error code returned by the function. */isError17999,816253
  u8 skipFlag;            /* Skip accumulator loading if true */skipFlag18000,816322
  u8 fErrorOrAux;         /* isError!=0 or pVdbe->pAuxData modified */fErrorOrAux18001,816387
  u8 argc;                /* Number of arguments */argc18002,816458
  sqlite3_value *argv[1]; /* Argument set */argv18003,816510
typedef unsigned bft;  /* Bit Field Type */bft18009,816668
typedef struct ScanStatus ScanStatus;ScanStatus18011,816713
struct ScanStatus {ScanStatus18012,816751
  int addrExplain;                /* OP_Explain for loop */addrExplain18013,816771
  int addrLoop;                   /* Address of "loops" counter */addrLoop18014,816831
  int addrVisit;                  /* Address of "rows visited" counter */addrVisit18015,816898
  int iSelectID;                  /* The "Select-ID" for this loop */iSelectID18016,816972
  LogEst nEst;                    /* Estimated output rows per loop */nEst18017,817042
  char *zName;                    /* Name of table or index */zName18018,817113
struct Vdbe {Vdbe18028,817434
  sqlite3 *db;            /* The database connection that owns this statement */db18029,817448
  Vdbe *pPrev,*pNext;     /* Linked list of VDBEs with the same Vdbe.db */pPrev18030,817529
  Vdbe *pPrev,*pNext;     /* Linked list of VDBEs with the same Vdbe.db */pNext18030,817529
  Parse *pParse;          /* Parsing context used to create this Vdbe */pParse18031,817604
  ynVar nVar;             /* Number of entries in aVar[] */nVar18032,817677
  ynVar nzVar;            /* Number of entries in azVar[] */nzVar18033,817737
  u32 magic;              /* Magic number for sanity checking */magic18034,817798
  int nMem;               /* Number of memory locations currently allocated */nMem18035,817863
  int nCursor;            /* Number of slots in apCsr[] */nCursor18036,817942
  u32 cacheCtr;           /* VdbeCursor row cache generation counter */cacheCtr18037,818001
  int pc;                 /* The program counter */pc18038,818073
  int rc;                 /* Value to return */rc18039,818125
  int nChange;            /* Number of db changes made since last reset */nChange18040,818173
  int iStatement;         /* Statement number (or 0 if has not opened stmt) */iStatement18041,818248
  i64 iCurrentTime;       /* Value of julianday('now') for this statement */iCurrentTime18042,818327
  i64 nFkConstraint;      /* Number of imm. FK constraints this VM */nFkConstraint18043,818404
  i64 nStmtDefCons;       /* Number of def. constraints when stmt started */nStmtDefCons18044,818474
  i64 nStmtDefImmCons;    /* Number of def. imm constraints when stmt started */nStmtDefImmCons18045,818551
  Op *aOp;                /* Space to hold the virtual machine's program */aOp18050,818744
  Mem *aMem;              /* The memory locations */aMem18051,818820
  Mem **apArg;            /* Arguments to currently executing user function */apArg18052,818873
  Mem *aColName;          /* Column names to return */aColName18053,818952
  Mem *pResultSet;        /* Pointer to an array of results */pResultSet18054,819007
  char *zErrMsg;          /* Error message written here */zErrMsg18055,819070
  VdbeCursor **apCsr;     /* One element of this array for each open cursor */apCsr18056,819129
  Mem *aVar;              /* Values for the OP_Variable opcode. */aVar18057,819208
  char **azVar;           /* Name of variables */azVar18058,819275
  i64 startTime;          /* Time when query started - used for profiling */startTime18060,819351
  int nOp;                /* Number of instructions in the program */nOp18062,819435
  int rcApp;              /* errcode set by sqlite3_result_error_code() */rcApp18064,819525
  u16 nResColumn;         /* Number of columns in one row of the result set */nResColumn18066,819607
  u8 errorAction;         /* Recovery action to do in case of an error */errorAction18067,819686
  u8 minWriteFileFormat;  /* Minimum file format for writable database files */minWriteFileFormat18068,819760
  bft expired:1;          /* True if the VM needs to be recompiled */expired18069,819840
  bft doingRerun:1;       /* True if rerunning after an auto-reprepare */doingRerun18070,819910
  bft explain:2;          /* True if EXPLAIN present on SQL command */explain18071,819984
  bft changeCntOn:1;      /* True to update the change-counter */changeCntOn18072,820055
  bft runOnlyOnce:1;      /* Automatically expire on reset */runOnlyOnce18073,820121
  bft usesStmtJournal:1;  /* True if uses a statement journal */usesStmtJournal18074,820183
  bft readOnly:1;         /* True for statements that do not write */readOnly18075,820248
  bft bIsReader:1;        /* True for statements that read */bIsReader18076,820318
  bft isPrepareV2:1;      /* True if prepared with prepare_v2() */isPrepareV218077,820380
  yDbMask btreeMask;      /* Bitmask of db->aDb[] entries referenced */btreeMask18078,820447
  yDbMask lockMask;       /* Subset of btreeMask that requires a lock */lockMask18079,820519
  u32 aCounter[5];        /* Counters used by sqlite3_stmt_status() */aCounter18080,820592
  char *zSql;             /* Text of the SQL statement that generated this */zSql18081,820663
  void *pFree;            /* Free this when deleting the vdbe */pFree18082,820741
  VdbeFrame *pFrame;      /* Parent frame */pFrame18083,820806
  VdbeFrame *pDelFrame;   /* List of frame objects to free on VM reset */pDelFrame18084,820851
  int nFrame;             /* Number of frames in pFrame list */nFrame18085,820925
  u32 expmask;            /* Binding to these vars invalidates VM */expmask18086,820989
  SubProgram *pProgram;   /* Linked list of all sub-programs used by VM */pProgram18087,821058
  AuxData *pAuxData;      /* Linked list of auxdata allocations */pAuxData18088,821133
  i64 *anExec;            /* Number of times each op has been executed */anExec18090,821237
  int nScan;              /* Entries in aScan[] */nScan18091,821311
  ScanStatus *aScan;      /* Scan definitions for sqlite3_stmt_scanstatus() */aScan18092,821362
#define VDBE_MAGIC_INIT VDBE_MAGIC_INIT18099,821509
#define VDBE_MAGIC_RUN VDBE_MAGIC_RUN18100,821581
#define VDBE_MAGIC_HALT VDBE_MAGIC_HALT18101,821654
#define VDBE_MAGIC_RESET VDBE_MAGIC_RESET18102,821731
#define VDBE_MAGIC_DEAD VDBE_MAGIC_DEAD18103,821808
struct PreUpdate {PreUpdate18109,821989
  Vdbe *v;v18110,822008
  VdbeCursor *pCsr;               /* Cursor to read old values from */pCsr18111,822019
  int op;                         /* One of SQLITE_INSERT, UPDATE, DELETE */op18112,822090
  u8 *aRecord;                    /* old.* database record */aRecord18113,822167
  KeyInfo keyinfo;keyinfo18114,822229
  UnpackedRecord *pUnpacked;      /* Unpacked version of aRecord[] */pUnpacked18115,822248
  UnpackedRecord *pNewUnpacked;   /* Unpacked version of new.* record */pNewUnpacked18116,822318
  int iNewReg;                    /* Register for new.* values */iNewReg18117,822391
  i64 iKey1;                      /* First key value passed to hook */iKey118118,822457
  i64 iKey2;                      /* Second key value passed to hook */iKey218119,822528
  Mem *aNew;                      /* Array of new.* values */aNew18120,822600
  Table *pTab;                    /* Schema object being upated */          pTab18121,822662
# define sqlite3VdbeMemSetDouble sqlite3VdbeMemSetDouble18157,824423
# define sqlite3VdbeEnter(sqlite3VdbeEnter18200,826648
# define sqlite3VdbeLeave(sqlite3VdbeLeave18206,826800
# define sqlite3VdbeCheckFk(sqlite3VdbeCheckFk18217,827072
  #define ExpandBlob(ExpandBlob18229,827457
  #define sqlite3VdbeMemExpandBlob(sqlite3VdbeMemExpandBlob18231,827541
  #define ExpandBlob(ExpandBlob18232,827589
typedef sqlite3_int64 sqlite3StatValueType;sqlite3StatValueType18244,827912
typedef u32 sqlite3StatValueType;sqlite3StatValueType18246,827962
typedef struct sqlite3StatType sqlite3StatType;sqlite3StatType18248,828003
static SQLITE_WSD struct sqlite3StatType {sqlite3StatType18249,828051
  sqlite3StatValueType nowValue[10];  /* Current value */nowValue18250,828094
  sqlite3StatValueType mxValue[10];   /* Maximum value */mxValue18251,828152
} sqlite3Stat = { {0,}, {0,} };sqlite3Stat18252,828210
static const char statMutex[] = {statMutex18258,828397
# define wsdStatInit wsdStatInit18279,829198
# define wsdStat wsdStat18280,829278
# define wsdStatInitwsdStatInit18282,829306
# define wsdStat wsdStat18283,829327
SQLITE_PRIVATE sqlite3_int64 sqlite3StatusValue(int op){sqlite3StatusValue18290,829475
SQLITE_PRIVATE void sqlite3StatusUp(int op, int N){sqlite3StatusUp18310,830272
SQLITE_PRIVATE void sqlite3StatusDown(int op, int N){sqlite3StatusDown18321,830708
SQLITE_PRIVATE void sqlite3StatusHighwater(int op, int X){sqlite3StatusHighwater18335,831159
SQLITE_API int sqlite3_status64(sqlite3_status6418356,831851
SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){sqlite3_status18381,832560
SQLITE_API int sqlite3_db_status(sqlite3_db_status18398,833009
typedef struct DateTime DateTime;DateTime18641,841210
struct DateTime {DateTime18642,841244
  sqlite3_int64 iJD; /* The julian day number times 86400000 */iJD18643,841262
  int Y, M, D;       /* Year, month, and day */Y18644,841326
  int Y, M, D;       /* Year, month, and day */M18644,841326
  int Y, M, D;       /* Year, month, and day */D18644,841326
  int h, m;          /* Hour and minutes */h18645,841374
  int h, m;          /* Hour and minutes */m18645,841374
  int tz;            /* Timezone offset in minutes */tz18646,841418
  double s;          /* Seconds */s18647,841472
  char validYMD;     /* True (1) if Y,M,D are valid */validYMD18648,841507
  char validHMS;     /* True (1) if h,m,s are valid */validHMS18649,841562
  char validJD;      /* True (1) if iJD is valid */validJD18650,841617
  char validTZ;      /* True (1) if tz is valid */validTZ18651,841669
  char tzSet;        /* Timezone was set explicitly */tzSet18652,841720
static int getDigits(const char *zDate, const char *zFormat, ...){getDigits18683,842805
static int parseTimezone(const char *zDate, DateTime *p){parseTimezone18737,844089
static int parseHhMmSs(const char *zDate, DateTime *p){parseHhMmSs18773,844884
static void computeJD(DateTime *p){computeJD18815,845772
static int parseYyyyMmDd(const char *zDate, DateTime *p){parseYyyyMmDd18861,846731
static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){setDateTimeToCurrent18898,847412
static int parseDateOrTime(parseDateOrTime18924,848161
static void computeYMD(DateTime *p){computeYMD18947,848710
static void computeHMS(DateTime *p){computeHMS18973,849328
static void computeYMD_HMS(DateTime *p){computeYMD_HMS18991,849641
static void clearYMD_HMS_TZ(DateTime *p){clearYMD_HMS_TZ18999,849761
#undef  HAVE_LOCALTIME_SHAVE_LOCALTIME_S19020,850480
#define HAVE_LOCALTIME_S HAVE_LOCALTIME_S19021,850505
static int osLocaltime(time_t *t, struct tm *pTm){osLocaltime19037,851044
static sqlite3_int64 localtimeOffset(localtimeOffset19076,852136
static int parseModifier(sqlite3_context *pCtx, const char *zMod, DateTime *p){parseModifier19155,854201
static int isDate(isDate19365,859963
static void juliandayFunc(juliandayFunc19406,860901
static void datetimeFunc(datetimeFunc19423,861214
static void timeFunc(timeFunc19443,861677
static void dateFunc(dateFunc19462,862081
static void strftimeFunc(strftimeFunc19495,862878
static void ctimeFunc(ctimeFunc19633,866544
static void cdateFunc(cdateFunc19647,866793
static void ctimestampFunc(ctimestampFunc19661,867051
static void currentTimeFunc(currentTimeFunc19683,867810
SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){sqlite3RegisterDateTimeFunctions19721,868758
SQLITE_API int sqlite3_io_error_hit = 0;            /* Total number of I/O Errors */sqlite3_io_error_hit19766,870578
SQLITE_API int sqlite3_io_error_hardhit = 0;        /* Number of non-benign errors */sqlite3_io_error_hardhit19767,870663
SQLITE_API int sqlite3_io_error_pending = 0;        /* Count down to first I/O error */sqlite3_io_error_pending19768,870749
SQLITE_API int sqlite3_io_error_persist = 0;        /* True if I/O errors persist */sqlite3_io_error_persist19769,870837
SQLITE_API int sqlite3_io_error_benign = 0;         /* True if errors are benign */sqlite3_io_error_benign19770,870922
SQLITE_API int sqlite3_diskfull_pending = 0;sqlite3_diskfull_pending19771,871006
SQLITE_API int sqlite3_diskfull = 0;sqlite3_diskfull19772,871051
SQLITE_API int sqlite3_open_file_count = 0;sqlite3_open_file_count19779,871218
SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;sqlite3_memdebug_vfs_oom_test19807,872076
  #define DO_OS_MALLOC_TEST(DO_OS_MALLOC_TEST19808,872126
  #define DO_OS_MALLOC_TEST(DO_OS_MALLOC_TEST19815,872501
SQLITE_PRIVATE void sqlite3OsClose(sqlite3_file *pId){sqlite3OsClose19824,872784
SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){sqlite3OsRead19830,872923
SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){sqlite3OsWrite19834,873088
SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){sqlite3OsTruncate19838,873261
SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){sqlite3OsSync19841,873373
SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){sqlite3OsFileSize19845,873504
SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){sqlite3OsLock19849,873644
SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){sqlite3OsUnlock19853,873781
SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){sqlite3OsCheckReservedLock19856,873897
SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){sqlite3OsFileControl19869,874518
SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){sqlite3OsFileControlHint19887,875342
SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){sqlite3OsSectorSize19891,875479
SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){sqlite3OsDeviceCharacteristics19895,875675
SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){sqlite3OsShmLock19898,875797
SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){sqlite3OsShmBarrier19901,875939
SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){sqlite3OsShmUnmap19904,876033
SQLITE_PRIVATE int sqlite3OsShmMap(sqlite3OsShmMap19907,876157
SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){sqlite3OsFetch19920,876589
SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){sqlite3OsUnfetch19924,876751
SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){sqlite3OsFetch19929,876939
SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){sqlite3OsUnfetch19933,877056
SQLITE_PRIVATE int sqlite3OsOpen(sqlite3OsOpen19942,877248
SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){sqlite3OsDelete19959,877788
SQLITE_PRIVATE int sqlite3OsAccess(sqlite3OsAccess19964,877985
SQLITE_PRIVATE int sqlite3OsFullPathname(sqlite3OsFullPathname19973,878173
SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){sqlite3OsDlOpen19984,878436
SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){sqlite3OsDlError19987,878551
SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){sqlite3OsDlSym19990,878676
SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){sqlite3OsDlClose19993,878815
SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){sqlite3OsRandomness19997,878962
SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){sqlite3OsSleep20000,879099
SQLITE_PRIVATE int sqlite3OsGetLastError(sqlite3_vfs *pVfs){sqlite3OsGetLastError20003,879204
SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){sqlite3OsCurrentTimeInt6420006,879335
SQLITE_PRIVATE int sqlite3OsOpenMalloc(sqlite3OsOpenMalloc20024,879982
SQLITE_PRIVATE void sqlite3OsCloseFree(sqlite3_file *pFile){sqlite3OsCloseFree20046,880441
SQLITE_PRIVATE int sqlite3OsInit(void){sqlite3OsInit20058,880849
static sqlite3_vfs * SQLITE_WSD vfsList = 0;vfsList20068,881067
#define vfsList vfsList20069,881112
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){sqlite3_vfs_find20075,881257
static void vfsUnlink(sqlite3_vfs *pVfs){vfsUnlink20099,881814
SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){sqlite3_vfs_register20121,882371
SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){sqlite3_vfs_unregister20149,883059
typedef struct BenignMallocHooks BenignMallocHooks;BenignMallocHooks20194,884649
static SQLITE_WSD struct BenignMallocHooks {BenignMallocHooks20195,884701
  void (*xBenignBegin)(void);xBenignBegin20196,884746
  void (*xBenignEnd)(void);xBenignEnd20197,884776
} sqlite3Hooks = { 0, 0 };sqlite3Hooks20198,884804
# define wsdHooksInit wsdHooksInit20207,885203
# define wsdHooks wsdHooks20209,885292
# define wsdHooksInitwsdHooksInit20211,885321
# define wsdHooks wsdHooks20212,885343
SQLITE_PRIVATE void sqlite3BenignMallocHooks(sqlite3BenignMallocHooks20220,885505
SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){sqlite3BeginBenignMalloc20234,885927
SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){sqlite3EndBenignMalloc20240,886061
static void *sqlite3MemMalloc(int nByte){ return 0; }sqlite3MemMalloc20281,887372
static void sqlite3MemFree(void *pPrior){ return; }sqlite3MemFree20282,887426
static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }sqlite3MemRealloc20283,887478
static int sqlite3MemSize(void *pPrior){ return 0; }sqlite3MemSize20284,887547
static int sqlite3MemRoundup(int n){ return n; }sqlite3MemRoundup20285,887600
static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }sqlite3MemInit20286,887649
static void sqlite3MemShutdown(void *NotUsed){ return; }sqlite3MemShutdown20287,887711
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault20295,887984
static malloc_zone_t* _sqliteZone_;_sqliteZone_20373,890987
#define SQLITE_MALLOC(SQLITE_MALLOC20374,891023
#define SQLITE_FREE(SQLITE_FREE20375,891086
#define SQLITE_REALLOC(SQLITE_REALLOC20376,891146
#define SQLITE_MALLOCSIZE(SQLITE_MALLOCSIZE20377,891218
#define SQLITE_MALLOC(SQLITE_MALLOC20386,891500
#define SQLITE_FREE(SQLITE_FREE20387,891547
#define SQLITE_REALLOC(SQLITE_REALLOC20388,891592
#  define SQLITE_USE_MALLOC_H SQLITE_USE_MALLOC_H20395,891803
#  define SQLITE_USE_MALLOC_USABLE_SIZE SQLITE_USE_MALLOC_USABLE_SIZE20396,891835
#  define SQLITE_USE_MALLOC_HSQLITE_USE_MALLOC_H20404,892183
#  define SQLITE_USE_MSIZESQLITE_USE_MSIZE20405,892213
#      define SQLITE_MALLOCSIZE(SQLITE_MALLOCSIZE20419,892746
#      define SQLITE_MALLOCSIZE SQLITE_MALLOCSIZE20423,892886
static void *sqlite3MemMalloc(int nByte){sqlite3MemMalloc20438,893312
static void sqlite3MemFree(void *pPrior){sqlite3MemFree20470,894151
static int sqlite3MemSize(void *pPrior){sqlite3MemSize20485,894436
static void *sqlite3MemRealloc(void *pPrior, int nByte){sqlite3MemRealloc20508,895090
static int sqlite3MemRoundup(int n){sqlite3MemRoundup20540,895897
static int sqlite3MemInit(void *NotUsed){sqlite3MemInit20547,895990
static void sqlite3MemShutdown(void *NotUsed){sqlite3MemShutdown20583,897063
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault20594,897367
# define backtrace(backtrace20648,899065
# define backtrace_symbols_fd(backtrace_symbols_fd20649,899091
struct MemBlockHdr {MemBlockHdr20666,899745
  i64 iSize;                          /* Size of this allocation */iSize20667,899766
  struct MemBlockHdr *pNext, *pPrev;  /* Linked list of all unfreed memory */pNext20668,899834
  struct MemBlockHdr *pNext, *pPrev;  /* Linked list of all unfreed memory */pPrev20668,899834
  char nBacktrace;                    /* Number of backtraces on this alloc */nBacktrace20669,899912
  char nBacktraceSlots;               /* Available backtrace slots */nBacktraceSlots20670,899991
  u8 nTitle;                          /* Bytes of title; includes '\0' */nTitle20671,900061
  u8 eType;                           /* Allocation type code */eType20672,900135
  int iForeGuard;                     /* Guard word for sanity */iForeGuard20673,900200
#define FOREGUARD FOREGUARD20679,900291
#define REARGUARD REARGUARD20680,900320
#define NCSIZE NCSIZE20685,900402
  sqlite3_mutex *mutex;mutex20698,900778
  struct MemBlockHdr *pFirst;pFirst20703,900880
  struct MemBlockHdr *pLast;pLast20704,900910
  int nBacktrace;nBacktrace20709,901019
  void (*xBacktrace)(int, int, void **);xBacktrace20710,901037
  int nTitle;        /* Bytes of zTitle to save.  Includes '\0' and padding */nTitle20715,901138
  char zTitle[100];  /* The title text */zTitle20716,901217
  int disallow; /* Do not allow memory allocation */disallow20722,901375
  int nAlloc[NCSIZE];      /* Total number of allocations */nAlloc20730,901658
  int nCurrent[NCSIZE];    /* Current number of allocations */nCurrent20731,901719
  int mxCurrent[NCSIZE];   /* Highwater mark for nCurrent */mxCurrent20732,901782
} mem;mem20734,901844
static void adjustStats(int iSize, int increment){adjustStats20740,901893
static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){sqlite3MemsysGetHeader20763,902427
static int sqlite3MemSize(void *p){sqlite3MemSize20787,903093
static int sqlite3MemInit(void *NotUsed){sqlite3MemInit20799,903306
static void sqlite3MemShutdown(void *NotUsed){sqlite3MemShutdown20813,903754
static int sqlite3MemRoundup(int n){sqlite3MemRoundup20821,903918
static void randomFill(char *pBuf, int nByte){randomFill20830,904192
static void *sqlite3MemMalloc(int nByte){sqlite3MemMalloc20853,904668
static void sqlite3MemFree(void *pPrior){sqlite3MemFree20912,906190
static void *sqlite3MemRealloc(void *pPrior, int nByte){sqlite3MemRealloc20954,907465
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault20975,908131
SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){sqlite3MemdebugSetType20992,908506
SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){sqlite3MemdebugHasType21010,909079
SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){sqlite3MemdebugNoType21032,909756
SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){sqlite3MemdebugBacktrace21050,910280
SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){sqlite3MemdebugBacktraceCallback21057,910454
SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){sqlite3MemdebugSettitle21064,910639
SQLITE_PRIVATE void sqlite3MemdebugSync(){sqlite3MemdebugSync21074,910959
SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){sqlite3MemdebugDump21087,911319
SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){sqlite3MemdebugMallocCount21129,912571
#define MX_SMALL MX_SMALL21182,914332
#define N_HASH N_HASH21188,914393
typedef struct Mem3Block Mem3Block;Mem3Block21222,916013
struct Mem3Block {Mem3Block21223,916049
      u32 prevSize;   /* Size of previous chunk in Mem3Block elements */prevSize21226,916091
      u32 size4x;     /* 4x the size of current chunk in Mem3Block elements */size4x21227,916164
    } hdr;hdr21228,916243
      u32 next;       /* Index in mem3.aPool[] of next free chunk */next21230,916267
      u32 prev;       /* Index in mem3.aPool[] of previous free chunk */prev21231,916336
    } list;list21232,916409
  } u;u21233,916421
static SQLITE_WSD struct Mem3Global {Mem3Global21242,916693
  u32 nPool;nPool21247,916859
  Mem3Block *aPool;aPool21248,916872
  int alarmBusy;alarmBusy21253,916961
  sqlite3_mutex *mutex;mutex21258,917056
  u32 mnMaster;mnMaster21263,917150
  u32 iMaster;iMaster21271,917452
  u32 szMaster;szMaster21272,917467
  u32 aiSmall[MX_SMALL-1];   /* For sizes 2 through MX_SMALL, inclusive */aiSmall21279,917635
  u32 aiHash[N_HASH];        /* For sizes MX_SMALL+1 and larger */aiHash21280,917710
} mem3 = { 97535575 };mem321281,917777
#define mem3 mem321283,917801
static void memsys3UnlinkFromList(u32 i, u32 *pRoot){memsys3UnlinkFromList21289,917966
static void memsys3Unlink(u32 i){memsys3Unlink21309,918448
static void memsys3LinkIntoList(u32 i, u32 *pRoot){memsys3LinkIntoList21329,918986
static void memsys3Link(u32 i){memsys3Link21343,919350
static void memsys3Enter(void){memsys3Enter21364,919975
static void memsys3Leave(void){memsys3Leave21370,920167
static void memsys3OutOfMemory(int nByte){memsys3OutOfMemory21377,920308
static void *memsys3Checkout(u32 i, u32 nBlock){memsys3Checkout21394,920749
static void *memsys3FromMaster(u32 nBlock){memsys3FromMaster21412,921365
static void memsys3Merge(u32 *pRoot){memsys3Merge21457,923144
static void *memsys3MallocUnsafe(int nByte){memsys3MallocUnsafe21496,924222
static void memsys3FreeUnsafe(void *pOld){memsys3FreeUnsafe21578,926414
static int memsys3Size(void *p){memsys3Size21619,928010
static int memsys3Roundup(int n){memsys3Roundup21630,928268
static void *memsys3Malloc(int nBytes){memsys3Malloc21641,928412
static void memsys3Free(void *pPrior){memsys3Free21653,928662
static void *memsys3Realloc(void *pPrior, int nBytes){memsys3Realloc21663,928847
static int memsys3Init(void *NotUsed){memsys3Init21694,929410
static void memsys3Shutdown(void *NotUsed){memsys3Shutdown21719,930103
SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){sqlite3Memsys3Dump21731,930311
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){sqlite3MemGetMemsys321815,932853
typedef struct Mem5Link Mem5Link;Mem5Link21899,935954
struct Mem5Link {Mem5Link21900,935988
  int next;       /* Index of next free chunk */next21901,936006
  int prev;       /* Index of previous free chunk */prev21902,936055
#define LOGMAX LOGMAX21910,936306
#define CTRL_LOGSIZE CTRL_LOGSIZE21915,936372
#define CTRL_FREE CTRL_FREE21916,936432
static SQLITE_WSD struct Mem5Global {Mem5Global21924,936754
  int szAtom;      /* Smallest possible allocation in bytes */szAtom21928,936839
  int nBlock;      /* Number of szAtom sized blocks in zPool */nBlock21929,936902
  u8 *zPool;       /* Memory available to be allocated */zPool21930,936966
  sqlite3_mutex *mutex;mutex21935,937102
  u64 nAlloc;         /* Total number of calls to malloc */nAlloc21941,937215
  u64 totalAlloc;     /* Total of all malloc calls - includes internal frag */totalAlloc21942,937275
  u64 totalExcess;    /* Total internal fragmentation */totalExcess21943,937354
  u32 currentOut;     /* Current checkout, including internal fragmentation */currentOut21944,937411
  u32 currentCount;   /* Current number of distinct checkouts */currentCount21945,937490
  u32 maxOut;         /* Maximum instantaneous currentOut */maxOut21946,937555
  u32 maxCount;       /* Maximum instantaneous currentCount */maxCount21947,937616
  u32 maxRequest;     /* Largest allocation (exclusive of internal frag) */maxRequest21948,937679
  int aiFreelist[LOGMAX+1];aiFreelist21956,937984
  u8 *aCtrl;aCtrl21962,938130
} mem5;mem521964,938144
#define mem5 mem521969,938226
#define MEM5LINK(MEM5LINK21975,938398
static void memsys5Unlink(int i, int iLogsize){memsys5Unlink21981,938594
static void memsys5Link(int i, int iLogsize){memsys5Link22003,939090
static void memsys5Enter(void){memsys5Enter22022,939591
static void memsys5Leave(void){memsys5Leave22025,939660
static int memsys5Size(void *p){memsys5Size22033,939857
static void *memsys5MallocUnsafe(int nByte){memsys5MallocUnsafe22052,940423
static void memsys5FreeUnsafe(void *pOld){memsys5FreeUnsafe22122,942610
static void *memsys5Malloc(int nBytes){memsys5Malloc22188,944502
static void memsys5Free(void *pPrior){memsys5Free22204,944808
static void *memsys5Realloc(void *pPrior, int nBytes){memsys5Realloc22223,945404
static int memsys5Roundup(int n){memsys5Roundup22253,946137
static int memsys5Log(int iValue){memsys5Log22270,946563
static int memsys5Init(void *NotUsed){memsys5Init22282,946883
static void memsys5Shutdown(void *NotUsed){memsys5Shutdown22340,948592
SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){sqlite3Memsys5Dump22351,948817
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){sqlite3MemGetMemsys522394,950194
static SQLITE_WSD int mutexIsInit = 0;mutexIsInit22435,951502
SQLITE_PRIVATE int sqlite3MutexInit(void){ sqlite3MutexInit22443,951664
SQLITE_PRIVATE int sqlite3MutexEnd(void){sqlite3MutexEnd22484,952986
SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){sqlite3_mutex_alloc22500,953301
SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){sqlite3MutexAlloc22509,953633
SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){sqlite3_mutex_free22521,953924
SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){sqlite3_mutex_enter22532,954201
SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){sqlite3_mutex_try22543,954530
SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){sqlite3_mutex_leave22558,954987
SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){sqlite3_mutex_held22570,955296
SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){sqlite3_mutex_notheld22574,955467
static int noopMutexInit(void){ return SQLITE_OK; }noopMutexInit22621,957009
static int noopMutexEnd(void){ return SQLITE_OK; }noopMutexEnd22622,957061
static sqlite3_mutex *noopMutexAlloc(int id){ noopMutexAlloc22623,957112
static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }noopMutexFree22627,957214
static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }noopMutexEnter22628,957290
static int noopMutexTry(sqlite3_mutex *p){noopMutexTry22629,957367
static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }noopMutexLeave22633,957455
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){sqlite3NoopMutex22635,957533
typedef struct sqlite3_debug_mutex {sqlite3_debug_mutex22663,958057
  int id;     /* The mutex type */id22664,958094
  int cnt;    /* Number of entries without a matching leave */cnt22665,958129
} sqlite3_debug_mutex;sqlite3_debug_mutex22666,958192
static int debugMutexHeld(sqlite3_mutex *pX){debugMutexHeld22672,958338
static int debugMutexNotheld(sqlite3_mutex *pX){debugMutexNotheld22676,958466
static int debugMutexInit(void){ return SQLITE_OK; }debugMutexInit22684,958657
static int debugMutexEnd(void){ return SQLITE_OK; }debugMutexEnd22685,958710
static sqlite3_mutex *debugMutexAlloc(int id){debugMutexAlloc22692,958932
static void debugMutexFree(sqlite3_mutex *pX){debugMutexFree22723,959625
static void debugMutexEnter(sqlite3_mutex *pX){debugMutexEnter22746,960541
static int debugMutexTry(sqlite3_mutex *pX){debugMutexTry22751,960724
static void debugMutexLeave(sqlite3_mutex *pX){debugMutexLeave22764,961165
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){sqlite3NoopMutex22771,961381
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){sqlite3DefaultMutex22794,961900
# define SQLITE_MUTEX_NREF SQLITE_MUTEX_NREF22834,963283
# define SQLITE_MUTEX_NREF SQLITE_MUTEX_NREF22836,963318
struct sqlite3_mutex {sqlite3_mutex22842,963428
  pthread_mutex_t mutex;     /* Mutex controlling the lock */mutex22843,963451
  int id;                    /* Mutex type */id22845,963571
  volatile int nRef;         /* Number of entrances */nRef22848,963646
  volatile pthread_t owner;  /* Thread that is within this mutex */owner22849,963701
  int trace;                 /* True to trace changes */trace22850,963769
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER22854,963858
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER22856,963978
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER22858,964051
static int pthreadMutexHeld(sqlite3_mutex *p){pthreadMutexHeld22878,964989
static int pthreadMutexNotheld(sqlite3_mutex *p){pthreadMutexNotheld22881,965104
SQLITE_PRIVATE void sqlite3MemoryBarrier(void){sqlite3MemoryBarrier22891,965424
static int pthreadMutexInit(void){ return SQLITE_OK; }pthreadMutexInit22902,965672
static int pthreadMutexEnd(void){ return SQLITE_OK; }pthreadMutexEnd22903,965727
static sqlite3_mutex *pthreadMutexAlloc(int iType){pthreadMutexAlloc22953,967912
static void pthreadMutexFree(sqlite3_mutex *p){pthreadMutexFree23018,969701
static void pthreadMutexEnter(sqlite3_mutex *p){pthreadMutexEnter23045,970645
static int pthreadMutexTry(sqlite3_mutex *p){pthreadMutexTry23087,971993
static void pthreadMutexLeave(sqlite3_mutex *p){pthreadMutexLeave23144,973736
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){sqlite3DefaultMutex23167,974225
#define _OS_COMMON_H__OS_COMMON_H_23233,976192
#define SQLITE_HWTIME_HSQLITE_HWTIME_H23272,977441
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime23285,977838
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec23293,978046
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime23304,978261
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime23312,978456
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime23336,979198
static sqlite_uint64 g_start;g_start23345,979489
static sqlite_uint64 g_elapsed;g_elapsed23346,979519
#define TIMER_START TIMER_START23347,979551
#define TIMER_END TIMER_END23348,979601
#define TIMER_ELAPSED TIMER_ELAPSED23349,979661
#define TIMER_STARTTIMER_START23351,979703
#define TIMER_ENDTIMER_END23352,979723
#define TIMER_ELAPSED TIMER_ELAPSED23353,979741
#define SimulateIOErrorBenign(SimulateIOErrorBenign23369,980341
#define SimulateIOError(SimulateIOError23370,980402
static void local_ioerr(){local_ioerr23374,980580
#define SimulateDiskfullError(SimulateDiskfullError23379,980720
#define SimulateIOErrorBenign(SimulateIOErrorBenign23391,981015
#define SimulateIOError(SimulateIOError23392,981048
#define SimulateDiskfullError(SimulateDiskfullError23393,981075
#define OpenCounter(OpenCounter23401,981280
#define OpenCounter(OpenCounter23403,981339
#define SQLITE_OS_WIN_HSQLITE_OS_WIN_H23431,982275
# define SQLITE_OS_WINNT SQLITE_OS_WINNT23461,983080
# define SQLITE_OS_WINCE SQLITE_OS_WINCE23469,983227
# define SQLITE_OS_WINCE SQLITE_OS_WINCE23471,983260
# define SQLITE_OS_WINRT SQLITE_OS_WINRT23479,983429
# define SQLITE_WIN32_VOLATILESQLITE_WIN32_VOLATILE23487,983578
# define SQLITE_WIN32_VOLATILE SQLITE_WIN32_VOLATILE23489,983615
# define SQLITE_OS_WIN_THREADS SQLITE_OS_WIN_THREADS23498,983926
# define SQLITE_OS_WIN_THREADS SQLITE_OS_WIN_THREADS23500,983965
struct sqlite3_mutex {sqlite3_mutex23518,984402
  CRITICAL_SECTION mutex;    /* Mutex controlling the lock */mutex23519,984425
  int id;                    /* Mutex type */id23520,984487
  volatile int nRef;         /* Number of enterances */nRef23522,984553
  volatile DWORD owner;      /* Thread holding this mutex */owner23523,984609
  volatile int trace;        /* True to trace changes */trace23524,984670
#define SQLITE_W32_MUTEX_INITIALIZER SQLITE_W32_MUTEX_INITIALIZER23533,984916
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER23536,984980
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER23539,985111
static int winMutexHeld(sqlite3_mutex *p){winMutexHeld23547,985336
static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){winMutexNotheld223551,985437
static int winMutexNotheld(sqlite3_mutex *p){winMutexNotheld23555,985536
SQLITE_PRIVATE void sqlite3MemoryBarrier(void){sqlite3MemoryBarrier23566,985866
static sqlite3_mutex winMutex_staticMutexes[] = {winMutex_staticMutexes23582,986249
static int winMutex_isInit = 0;winMutex_isInit23597,986650
static int winMutex_isNt = -1; /* <0 means "need to query" */winMutex_isNt23598,986682
static LONG SQLITE_WIN32_VOLATILE winMutex_lock = 0;winMutex_lock23604,986959
static int winMutexInit(void){winMutexInit23609,987143
static int winMutexEnd(void){winMutexEnd23631,987761
static sqlite3_mutex *winMutexAlloc(int iType){winMutexAlloc23694,990317
static void winMutexFree(sqlite3_mutex *p){winMutexFree23742,991318
static void winMutexEnter(sqlite3_mutex *p){winMutexEnter23766,992247
static int winMutexTry(sqlite3_mutex *p){winMutexTry23789,992811
static void winMutexLeave(sqlite3_mutex *p){winMutexLeave23839,994424
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){sqlite3DefaultMutex23861,994980
SQLITE_API int sqlite3_release_memory(int n){sqlite3_release_memory23907,996222
typedef struct ScratchFreeslot {ScratchFreeslot23923,996676
  struct ScratchFreeslot *pNext;   /* Next unused scratch buffer */pNext23924,996709
} ScratchFreeslot;ScratchFreeslot23925,996777
static SQLITE_WSD struct Mem0Global {Mem0Global23930,996866
  sqlite3_mutex *mutex;         /* Mutex to serialize access */mutex23931,996904
  sqlite3_int64 alarmThreshold; /* The soft heap limit */alarmThreshold23932,996968
  void *pScratchEnd;pScratchEnd23940,997269
  ScratchFreeslot *pScratchFree;pScratchFree23941,997290
  u32 nScratchFree;nScratchFree23942,997323
  int nearlyFull;nearlyFull23948,997460
} mem0 = { 0, 0, 0, 0, 0, 0 };mem023949,997478
#define mem0 mem023951,997510
SQLITE_PRIVATE sqlite3_mutex *sqlite3MallocMutex(void){sqlite3MallocMutex23956,997627
SQLITE_API int sqlite3_memory_alarm(sqlite3_memory_alarm23966,997889
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){sqlite3_soft_heap_limit6423982,998223
SQLITE_API void sqlite3_soft_heap_limit(int n){sqlite3_soft_heap_limit24004,998894
SQLITE_PRIVATE int sqlite3MallocInit(void){sqlite3MallocInit24012,999049
SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){sqlite3HeapNearlyFull24056,1000512
SQLITE_PRIVATE void sqlite3MallocEnd(void){sqlite3MallocEnd24063,1000644
SQLITE_API sqlite3_int64 sqlite3_memory_used(void){sqlite3_memory_used24073,1000899
SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){sqlite3_memory_highwater24084,1001211
static void sqlite3MallocAlarm(int nByte){sqlite3MallocAlarm24093,1001415
static int mallocWithAlarm(int n, void **pp){mallocWithAlarm24104,1001700
SQLITE_PRIVATE void *sqlite3Malloc(u64 n){sqlite3Malloc24139,1002713
SQLITE_API void *sqlite3_malloc(int n){sqlite3_malloc24164,1003635
SQLITE_API void *sqlite3_malloc64(sqlite3_uint64 n){sqlite3_malloc6424170,1003790
static int scratchAllocOut = 0;scratchAllocOut24184,1004255
SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){sqlite3ScratchMalloc24196,1004646
SQLITE_PRIVATE void sqlite3ScratchFree(void *p){sqlite3ScratchFree24233,1005742
static int isLookaside(sqlite3 *db, void *p){isLookaside24280,1007476
#define isLookaside(isLookaside24284,1007599
SQLITE_PRIVATE int sqlite3MallocSize(void *p){sqlite3MallocSize24291,1007747
SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){sqlite3DbMallocSize24295,1007890
SQLITE_API sqlite3_uint64 sqlite3_msize(void *p){sqlite3_msize24313,1008473
SQLITE_API void sqlite3_free(void *p){sqlite3_free24322,1008748
static SQLITE_NOINLINE void measureAllocationSize(sqlite3 *db, void *p){measureAllocationSize24341,1009355
SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){sqlite3DbFree24349,1009569
SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, u64 nBytes){sqlite3Realloc24379,1010459
SQLITE_API void *sqlite3_realloc(void *pOld, int n){sqlite3_realloc24431,1012210
SQLITE_API void *sqlite3_realloc64(void *pOld, sqlite3_uint64 n){sqlite3_realloc6424438,1012419
SQLITE_PRIVATE void *sqlite3MallocZero(u64 n){sqlite3MallocZero24449,1012634
SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, u64 n){sqlite3DbMallocZero24461,1012888
static SQLITE_NOINLINE void *dbMallocRawFinish(sqlite3 *db, u64 n){dbMallocRawFinish24473,1013204
SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, u64 n){sqlite3DbMallocRaw24505,1014362
SQLITE_PRIVATE void *sqlite3DbMallocRawNN(sqlite3 *db, u64 n){sqlite3DbMallocRawNN24512,1014562
SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, u64 n){sqlite3DbRealloc24554,1015725
static SQLITE_NOINLINE void *dbReallocFinish(sqlite3 *db, void *p, u64 n){dbReallocFinish24561,1016001
SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, u64 n){sqlite3DbReallocOrFree24591,1016916
SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){sqlite3DbStrDup24607,1017435
SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, u64 n){sqlite3DbStrNDup24621,1017720
SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zNew){sqlite3SetString24639,1018090
SQLITE_PRIVATE void sqlite3OomFault(sqlite3 *db){sqlite3OomFault24650,1018471
SQLITE_PRIVATE void sqlite3OomClear(sqlite3 *db){sqlite3OomClear24667,1018886
static SQLITE_NOINLINE int apiOomError(sqlite3 *db){apiOomError24679,1019188
SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){sqlite3ApiExit24697,1019823
#define etRADIX etRADIX24729,1020931
#define etFLOAT etFLOAT24730,1021002
#define etEXP etEXP24731,1021052
#define etGENERIC etGENERIC24732,1021116
#define etSIZE etSIZE24733,1021197
#define etSTRING etSTRING24734,1021276
#define etDYNSTRING etDYNSTRING24735,1021318
#define etPERCENT etPERCENT24736,1021382
#define etCHARX etCHARX24737,1021431
#define etSQLESCAPE etSQLESCAPE24739,1021538
#define etSQLESCAPE2 etSQLESCAPE224740,1021599
#define etTOKEN etTOKEN24742,1021741
#define etSRCLIST etSRCLIST24743,1021802
#define etPOINTER etPOINTER24744,1021855
#define etSQLESCAPE3 etSQLESCAPE324745,1021903
#define etORDINAL etORDINAL24746,1021965
#define etINVALID etINVALID24748,1022041
typedef unsigned char etByte;etByte24754,1022155
typedef struct et_info {   /* Information about each format field */et_info24760,1022309
  char fmttype;            /* The format field code letter */fmttype24761,1022378
  etByte base;             /* The base for radix conversion */base24762,1022440
  etByte flags;            /* One or more of FLAG_ constants below */flags24763,1022503
  etByte type;             /* Conversion paradigm */type24764,1022573
  etByte charset;          /* Offset into aDigits[] of the digits string */charset24765,1022626
  etByte prefix;           /* Offset into aPrefix[] of the prefix string */prefix24766,1022702
} et_info;et_info24767,1022778
#define FLAG_SIGNED FLAG_SIGNED24772,1022832
#define FLAG_INTERN FLAG_INTERN24773,1022904
#define FLAG_STRING FLAG_STRING24774,1022967
static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";aDigits24781,1023151
static const char aPrefix[] = "-x0\000X0";aPrefix24782,1023217
static const et_info fmtinfo[] = {fmtinfo24783,1023260
static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){et_getdigit24832,1024916
static void setStrAccumError(StrAccum *p, u8 eError){setStrAccumError24848,1025241
static sqlite3_int64 getIntArg(PrintfArguments *p){getIntArg24857,1025463
static double getDoubleArg(PrintfArguments *p){getDoubleArg24861,1025605
static char *getTextArg(PrintfArguments *p){getTextArg24865,1025746
# define SQLITE_PRINT_BUF_SIZE SQLITE_PRINT_BUF_SIZE24876,1026048
#define etBUFSIZE etBUFSIZE24878,1026089
SQLITE_PRIVATE void sqlite3VXPrintf(sqlite3VXPrintf24883,1026229
static int sqlite3StrAccumEnlarge(StrAccum *p, int N){sqlite3StrAccumEnlarge25466,1045802
SQLITE_PRIVATE void sqlite3AppendChar(StrAccum *p, int N, char c){sqlite3AppendChar25518,1047321
static void SQLITE_NOINLINE enlargeAndAppend(StrAccum *p, const char *z, int N){enlargeAndAppend25535,1047960
SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){sqlite3StrAccumAppend25548,1048357
SQLITE_PRIVATE void sqlite3StrAccumAppendAll(StrAccum *p, const char *z){sqlite3StrAccumAppendAll25565,1048821
SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){sqlite3StrAccumFinish25575,1049126
SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){sqlite3StrAccumReset25595,1049663
SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, sqlite3 *db, char *zBase, int n, int mx){sqlite3StrAccumInit25618,1050510
SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){sqlite3VMPrintf25632,1050849
SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){sqlite3MPrintf25652,1051428
SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){sqlite3_vmprintf25665,1051729
SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){sqlite3_mprintf25689,1052314
SQLITE_API char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){sqlite3_vsnprintf25714,1053092
SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){sqlite3_snprintf25728,1053493
static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){renderLogMsg25751,1054351
SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){sqlite3_log25764,1054848
SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){sqlite3DebugPrintf25779,1055362
SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, const char *zFormat, ...){sqlite3XPrintf25798,1055850
static TreeView *sqlite3TreeViewPush(TreeView *p, u8 moreToFollow){sqlite3TreeViewPush25833,1056971
static void sqlite3TreeViewPop(TreeView *p){sqlite3TreeViewPop25849,1057357
static void sqlite3TreeViewLine(TreeView *p, const char *zFormat, ...){sqlite3TreeViewLine25859,1057596
static void sqlite3TreeViewItem(TreeView *p, const char *zLabel,u8 moreFollows){sqlite3TreeViewItem25883,1058302
SQLITE_PRIVATE void sqlite3TreeViewWith(TreeView *pView, const With *pWith, u8 moreToFollow){sqlite3TreeViewWith25891,1058534
SQLITE_PRIVATE void sqlite3TreeViewSelect(TreeView *pView, const Select *p, u8 moreToFollow){sqlite3TreeViewSelect25931,1059753
SQLITE_PRIVATE void sqlite3TreeViewExpr(TreeView *pView, const Expr *pExpr, u8 moreToFollow){sqlite3TreeViewExpr26039,1063256
SQLITE_PRIVATE void sqlite3TreeViewBareExprList(sqlite3TreeViewBareExprList26289,1071154
SQLITE_PRIVATE void sqlite3TreeViewExprList(sqlite3TreeViewExprList26311,1071781
static SQLITE_WSD struct sqlite3PrngType {sqlite3PrngType26349,1072995
  unsigned char isInit;          /* True if initialized */isInit26350,1073038
  unsigned char i, j;            /* State variables */i26351,1073097
  unsigned char i, j;            /* State variables */j26351,1073097
  unsigned char s[256];          /* State variables */s26352,1073152
} sqlite3Prng;sqlite3Prng26353,1073207
SQLITE_API void sqlite3_randomness(int N, void *pBuf){sqlite3_randomness26358,1073255
# define wsdPrng wsdPrng26370,1073820
static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;sqlite3SavedPrng26444,1075718
SQLITE_PRIVATE void sqlite3PrngSaveState(void){sqlite3PrngSaveState26445,1075777
SQLITE_PRIVATE void sqlite3PrngRestoreState(void){sqlite3PrngRestoreState26452,1075971
#define SQLITE_THREADS_IMPLEMENTED SQLITE_THREADS_IMPLEMENTED26500,1077775
struct SQLiteThread {SQLiteThread26504,1077907
  pthread_t tid;                 /* Thread ID */tid26505,1077929
  int done;                      /* Set to true when thread finishes */done26506,1077978
  void *pOut;                    /* Result returned by the thread */pOut26507,1078050
  void *(*xTask)(void*);         /* The thread routine */xTask26508,1078119
  void *pIn;                     /* Argument to the thread */pIn26509,1078177
SQLITE_PRIVATE int sqlite3ThreadCreate(sqlite3ThreadCreate26513,1078269
SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){sqlite3ThreadJoin26550,1079339
#define SQLITE_THREADS_IMPLEMENTED SQLITE_THREADS_IMPLEMENTED26572,1079908
struct SQLiteThread {SQLiteThread26576,1080034
  void *tid;               /* The thread handle */tid26577,1080056
  unsigned id;             /* The thread identifier */id26578,1080107
  void *(*xTask)(void*);   /* The routine to run as a thread */xTask26579,1080162
  void *pIn;               /* Argument to xTask */pIn26580,1080226
  void *pResult;           /* Result of xTask */pResult26581,1080277
static unsigned __stdcall sqlite3ThreadProc(sqlite3ThreadProc26585,1080378
SQLITE_PRIVATE int sqlite3ThreadCreate(sqlite3ThreadCreate26608,1080971
SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){sqlite3ThreadJoin26646,1082193
struct SQLiteThread {SQLiteThread26681,1083242
  void *(*xTask)(void*);   /* The routine to run as a thread */xTask26682,1083264
  void *pIn;               /* Argument to xTask */pIn26683,1083328
  void *pResult;           /* Result of xTask */pResult26684,1083379
SQLITE_PRIVATE int sqlite3ThreadCreate(sqlite3ThreadCreate26688,1083458
SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){sqlite3ThreadJoin26712,1084071
SQLITE_PRIVATE const int sqlite3one = 1;sqlite3one26784,1086285
static const unsigned char sqlite3Utf8Trans1[] = {sqlite3Utf8Trans126791,1086483
#define WRITE_UTF8(WRITE_UTF826803,1086939
#define WRITE_UTF16LE(WRITE_UTF16LE26823,1087968
#define WRITE_UTF16BE(WRITE_UTF16BE26835,1088671
#define READ_UTF16LE(READ_UTF16LE26847,1089374
#define READ_UTF16BE(READ_UTF16BE26857,1089953
#define READ_UTF8(READ_UTF826894,1091635
SQLITE_PRIVATE u32 sqlite3Utf8Read(sqlite3Utf8Read26905,1092249
SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){sqlite3VdbeMemTranslate26941,1093219
SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){sqlite3VdbeMemHandleBom27084,1097432
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){sqlite3Utf8CharLen27122,1098421
SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){sqlite3Utf8To827152,1099152
SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){sqlite3Utf16to827176,1099736
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){sqlite3Utf16ByteLen27197,1100403
SQLITE_PRIVATE void sqlite3UtfSelfTest(void){sqlite3UtfSelfTest27222,1101002
SQLITE_PRIVATE void sqlite3Coverage(int x){sqlite3Coverage27300,1102966
SQLITE_PRIVATE int sqlite3FaultSim(int iTest){sqlite3FaultSim27318,1103529
SQLITE_PRIVATE int sqlite3IsNaN(double x){sqlite3IsNaN27331,1103958
SQLITE_PRIVATE int sqlite3Strlen30(const char *z){sqlite3Strlen3027379,1105768
SQLITE_PRIVATE char *sqlite3ColumnType(Column *pCol, char *zDflt){sqlite3ColumnType27391,1106131
static SQLITE_NOINLINE void  sqlite3ErrorFinish(sqlite3 *db, int err_code){sqlite3ErrorFinish27401,1106476
SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code){sqlite3Error27411,1106827
SQLITE_PRIVATE void sqlite3SystemError(sqlite3 *db, int rc){sqlite3SystemError27421,1107120
SQLITE_PRIVATE void sqlite3ErrorWithMsg(sqlite3 *db, int err_code, const char *zFormat, ...){sqlite3ErrorWithMsg27450,1108091
SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){sqlite3ErrorMsg27483,1109314
SQLITE_PRIVATE void sqlite3Dequote(char *z){sqlite3Dequote27517,1110358
SQLITE_PRIVATE void sqlite3TokenInit(Token *p, char *z){sqlite3TokenInit27543,1110807
#define UpperToLower UpperToLower27549,1110936
SQLITE_API int sqlite3_stricmp(const char *zLeft, const char *zRight){sqlite3_stricmp27561,1111439
SQLITE_PRIVATE int sqlite3StrICmp(const char *zLeft, const char *zRight){sqlite3StrICmp27569,1111641
SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){sqlite3_strnicmp27582,1111939
SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){sqlite3AtoF27617,1113157
static int compare2pow63(const char *zNum, int incr){compare2pow6327807,1118761
SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){sqlite3Atoi6427843,1119896
SQLITE_PRIVATE int sqlite3DecOrHexToI64(const char *z, i64 *pOut){sqlite3DecOrHexToI6427929,1122591
SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){sqlite3GetInt3227959,1123468
SQLITE_PRIVATE int sqlite3Atoi(const char *z){sqlite3Atoi28017,1124690
static int SQLITE_NOINLINE putVarint64(unsigned char *p, u64 v){putVarint6428052,1125630
SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){sqlite3PutVarint28076,1126092
#define SLOT_2_0 SLOT_2_028098,1126634
#define SLOT_4_2_0 SLOT_4_2_028099,1126666
SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){sqlite3GetVarint28106,1126841
SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){sqlite3GetVarint3228277,1130063
SQLITE_PRIVATE int sqlite3VarintLen(u64 v){sqlite3VarintLen28400,1132610
SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){sqlite3Get4byte28410,1132789
SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){sqlite3Put4byte28430,1133351
SQLITE_PRIVATE u8 sqlite3HexToInt(int h){sqlite3HexToInt28456,1134032
SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){sqlite3HexToBlob28474,1134576
static void logBadConnection(const char *zType){logBadConnection28495,1135179
SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){sqlite3SafetyCheckOk28516,1136049
SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){sqlite3SafetyCheckSickOrOk28533,1136408
SQLITE_PRIVATE int sqlite3AddInt64(i64 *pA, i64 iB){sqlite3AddInt6428553,1136998
SQLITE_PRIVATE int sqlite3SubInt64(i64 *pA, i64 iB){sqlite3SubInt6428569,1137533
SQLITE_PRIVATE int sqlite3MulInt64(i64 *pA, i64 iB){sqlite3MulInt6428580,1137811
SQLITE_PRIVATE int sqlite3AbsInt32(int x){sqlite3AbsInt3228602,1138389
SQLITE_PRIVATE void sqlite3FileSuffix3(const char *zBaseFilename, char *z){sqlite3FileSuffix328626,1139199
SQLITE_PRIVATE LogEst sqlite3LogEstAdd(LogEst a, LogEst b){sqlite3LogEstAdd28645,1139720
SQLITE_PRIVATE LogEst sqlite3LogEst(u64 x){sqlite3LogEst28672,1140547
SQLITE_PRIVATE LogEst sqlite3LogEstFromDouble(double x){sqlite3LogEstFromDouble28690,1141015
SQLITE_PRIVATE u64 sqlite3LogEstToInt(LogEst x){sqlite3LogEstToInt28711,1141609
SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){sqlite3HashInit28753,1142987
SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){sqlite3HashClear28765,1143291
static unsigned int strHash(const char *z){strHash28785,1143683
static void insertElement(insertElement28802,1144236
static int rehash(Hash *pH, unsigned int new_size){rehash28836,1145213
static HashElem *findElementWithHash(findElementWithHash28876,1146784
static void removeElementGivenHash(removeElementGivenHash28910,1147726
SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey){sqlite3HashFind28945,1148602
SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){sqlite3HashInsert28969,1149478
# define OpHelp(OpHelp29011,1150870
# define OpHelp(OpHelp29013,1150902
SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){sqlite3OpcodeName29015,1150928
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE29254,1162971
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE29256,1163021
# define HAVE_PREAD HAVE_PREAD29262,1163156
# define HAVE_PWRITE HAVE_PWRITE29263,1163178
# undef USE_PREADUSE_PREAD29266,1163260
# define USE_PREAD64 USE_PREAD6429267,1163278
# undef USE_PREAD64USE_PREAD6429269,1163351
# define USE_PREAD USE_PREAD29270,1163371
#    define HAVE_GETHOSTUUID HAVE_GETHOSTUUID29297,1164101
#define SQLITE_FSFLAGS_IS_MSDOS SQLITE_FSFLAGS_IS_MSDOS29321,1164491
# define SQLITE_UNIX_THREADS SQLITE_UNIX_THREADS29329,1164693
# define SQLITE_DEFAULT_FILE_PERMISSIONS SQLITE_DEFAULT_FILE_PERMISSIONS29336,1164826
# define SQLITE_DEFAULT_PROXYDIR_PERMISSIONS SQLITE_DEFAULT_PROXYDIR_PERMISSIONS29343,1164982
#define MAX_PATHNAME MAX_PATHNAME29349,1165080
#define SQLITE_MAX_SYMLINKS SQLITE_MAX_SYMLINKS29354,1165148
#define osGetpid(osGetpid29358,1165277
#define IS_LOCK_ERROR(IS_LOCK_ERROR29364,1165450
typedef struct unixShm unixShm;               /* Connection shared memory */unixShm29367,1165543
typedef struct unixShmNode unixShmNode;       /* Shared memory instance */unixShmNode29368,1165620
typedef struct unixInodeInfo unixInodeInfo;   /* An i-node */unixInodeInfo29369,1165695
typedef struct UnixUnusedFd UnixUnusedFd;     /* An unused file descriptor */UnixUnusedFd29370,1165757
struct UnixUnusedFd {UnixUnusedFd29378,1166109
  int fd;                   /* File descriptor to close */fd29379,1166131
  int flags;                /* Flags this file descriptor was opened with */flags29380,1166190
  UnixUnusedFd *pNext;      /* Next unused file descriptor on same file */pNext29381,1166267
typedef struct unixFile unixFile;unixFile29388,1166451
struct unixFile {unixFile29389,1166485
  sqlite3_io_methods const *pMethod;  /* Always the first entry */pMethod29390,1166503
  sqlite3_vfs *pVfs;                  /* The VFS that created this unixFile */pVfs29391,1166570
  unixInodeInfo *pInode;              /* Info about locks on this inode */pInode29392,1166649
  int h;                              /* The file descriptor */h29393,1166724
  unsigned char eFileLock;            /* The type of lock held on this fd */eFileLock29394,1166788
  unsigned short int ctrlFlags;       /* Behavioral bits.  UNIXFILE_* flags */ctrlFlags29395,1166865
  int lastErrno;                      /* The unix errno from last I/O error */lastErrno29396,1166944
  void *lockingContext;               /* Locking style specific state */lockingContext29397,1167023
  UnixUnusedFd *pUnused;              /* Pre-allocated UnixUnusedFd */pUnused29398,1167096
  const char *zPath;                  /* Name of the file */zPath29399,1167167
  unixShm *pShm;                      /* Shared memory segment information */pShm29400,1167228
  int szChunk;                        /* Configured by FCNTL_CHUNK_SIZE */szChunk29401,1167306
  int nFetchOut;                      /* Number of outstanding xFetch refs */nFetchOut29403,1167408
  sqlite3_int64 mmapSize;             /* Usable size of mapping at pMapRegion */mmapSize29404,1167486
  sqlite3_int64 mmapSizeActual;       /* Actual size of mapping at pMapRegion */mmapSizeActual29405,1167567
  sqlite3_int64 mmapSizeMax;          /* Configured FCNTL_MMAP_SIZE value */mmapSizeMax29406,1167648
  void *pMapRegion;                   /* Memory mapped region */pMapRegion29407,1167725
  int sectorSize;                     /* Device sector size */sectorSize29410,1167815
  int deviceCharacteristics;          /* Precomputed device characteristics */deviceCharacteristics29411,1167878
  int openFlags;                      /* The flags specified at open() */openFlags29414,1167996
  unsigned fsFlags;                   /* cached details from statfs() */fsFlags29417,1168131
  struct vxworksFileId *pId;          /* Unique file ID */pId29420,1168226
  unsigned char transCntrChng;   /* True if the transaction counter changed */transCntrChng29430,1168707
  unsigned char dbUpdate;        /* True if any part of database file changed */dbUpdate29431,1168786
  unsigned char inNormalWrite;   /* True if in a normal write operation */inNormalWrite29432,1168867
  char aPadding[32];aPadding29440,1169109
static pid_t randomnessPid = 0;randomnessPid29448,1169355
#define UNIXFILE_EXCL UNIXFILE_EXCL29453,1169448
#define UNIXFILE_RDONLY UNIXFILE_RDONLY29454,1169526
#define UNIXFILE_PERSIST_WAL UNIXFILE_PERSIST_WAL29455,1169594
# define UNIXFILE_DIRSYNC UNIXFILE_DIRSYNC29457,1169689
# define UNIXFILE_DIRSYNC UNIXFILE_DIRSYNC29459,1169761
#define UNIXFILE_PSOW UNIXFILE_PSOW29461,1169802
#define UNIXFILE_DELETE UNIXFILE_DELETE29462,1169879
#define UNIXFILE_URI UNIXFILE_URI29463,1169939
#define UNIXFILE_NOLOCK UNIXFILE_NOLOCK29464,1170020
#define _OS_COMMON_H__OS_COMMON_H_29491,1170967
#define SQLITE_HWTIME_HSQLITE_HWTIME_H29530,1172216
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime29543,1172613
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec29551,1172821
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime29562,1173036
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime29570,1173231
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime29594,1173973
static sqlite_uint64 g_start;g_start29603,1174264
static sqlite_uint64 g_elapsed;g_elapsed29604,1174294
#define TIMER_START TIMER_START29605,1174326
#define TIMER_END TIMER_END29606,1174376
#define TIMER_ELAPSED TIMER_ELAPSED29607,1174436
#define TIMER_STARTTIMER_START29609,1174478
#define TIMER_ENDTIMER_END29610,1174498
#define TIMER_ELAPSED TIMER_ELAPSED29611,1174516
#define SimulateIOErrorBenign(SimulateIOErrorBenign29627,1175116
#define SimulateIOError(SimulateIOError29628,1175177
static void local_ioerr(){local_ioerr29632,1175355
#define SimulateDiskfullError(SimulateDiskfullError29637,1175495
#define SimulateIOErrorBenign(SimulateIOErrorBenign29649,1175790
#define SimulateIOError(SimulateIOError29650,1175823
#define SimulateDiskfullError(SimulateDiskfullError29651,1175850
#define OpenCounter(OpenCounter29659,1176055
#define OpenCounter(OpenCounter29661,1176114
# define O_LARGEFILE O_LARGEFILE29673,1176458
# undef O_LARGEFILEO_LARGEFILE29676,1176514
# define O_LARGEFILE O_LARGEFILE29677,1176534
# define O_NOFOLLOW O_NOFOLLOW29680,1176583
# define O_BINARY O_BINARY29683,1176629
#define threadid threadid29691,1176783
#define threadid threadid29693,1176821
#  define HAVE_MREMAP HAVE_MREMAP29701,1176996
#  define HAVE_MREMAP HAVE_MREMAP29703,1177027
# define lseek lseek29712,1177239
static int posixOpen(const char *zFile, int flags, int mode){posixOpen29723,1177616
static struct unix_syscall {unix_syscall29737,1178085
  const char *zName;            /* Name of the system call */zName29738,1178114
  sqlite3_syscall_ptr pCurrent; /* Current value of the system call */pCurrent29739,1178176
  sqlite3_syscall_ptr pDefault; /* Default value */pDefault29740,1178247
#define osOpen osOpen29743,1178375
#define osClose osClose29746,1178507
#define osAccess osAccess29749,1178623
#define osGetcwd osGetcwd29752,1178751
#define osStat osStat29755,1178878
#define osFstat(osFstat29765,1179279
#define osFtruncate osFtruncate29772,1179513
#define osFcntl osFcntl29775,1179635
#define osRead osRead29778,1179759
#define osPread osPread29785,1180018
#define osPread64 osPread6429792,1180254
#define osWrite osWrite29795,1180394
#define osPwrite osPwrite29802,1180660
#define osPwrite64 osPwrite6429810,1180925
#define osFchmod osFchmod29814,1181100
#define osFallocate osFallocate29821,1181364
#define osUnlink osUnlink29824,1181498
#define osOpenDirectory osOpenDirectory29827,1181634
#define osMkdir osMkdir29830,1181772
#define osRmdir osRmdir29833,1181908
#define osFchown osFchown29840,1182138
#define osGeteuid osGeteuid29843,1182271
#define osMmap osMmap29850,1182527
#define osMunmap osMunmap29857,1182804
#define osMremap osMremap29864,1183082
#define osGetpagesize osGetpagesize29871,1183358
#define osReadlink osReadlink29878,1183585
#define osLstat osLstat29885,1183830
} aSyscall[] = {aSyscall29741,1178299
static int robustFchown(int fd, uid_t uid, gid_t gid){robustFchown29895,1184145
static int unixSetSystemCall(unixSetSystemCall29909,1184542
static sqlite3_syscall_ptr unixGetSystemCall(unixGetSystemCall29952,1185827
static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){unixNextSystemCall29971,1186354
# define SQLITE_MINIMUM_FILE_DESCRIPTOR SQLITE_MINIMUM_FILE_DESCRIPTOR29992,1186945
static int robust_open(const char *z, int f, mode_t m){robust_open30012,1187824
static void unixEnterMutex(void){unixEnterMutex30063,1189198
static void unixLeaveMutex(void){unixLeaveMutex30066,1189302
static int unixMutexHeld(void) {unixMutexHeld30070,1189426
static const char *azFileLock(int eFileLock){azFileLock30082,1189737
static int lockTrace(int fd, int op, struct flock *p){lockTrace30103,1190337
#undef osFcntlosFcntl30150,1191589
#define osFcntl osFcntl30151,1191604
static int robust_ftruncate(int h, sqlite3_int64 sz){robust_ftruncate30161,1191895
static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {sqliteErrorFromPosixError30186,1192813
struct vxworksFileId {vxworksFileId30228,1194334
  struct vxworksFileId *pNext;  /* Next in a list of them all */pNext30229,1194357
  int nRef;                     /* Number of references to this one */nRef30230,1194422
  int nName;                    /* Length of the zCanonicalName[] string */nName30231,1194493
  char *zCanonicalName;         /* Canonical filename */zCanonicalName30232,1194569
static struct vxworksFileId *vxworksFileList = 0;vxworksFileList30240,1194730
static int vxworksSimplifyName(char *z, int n){vxworksSimplifyName30255,1195174
static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){vxworksFindFileId30289,1196067
static void vxworksReleaseFileId(struct vxworksFileId *pId){vxworksReleaseFileId30331,1197467
struct unixFileId {unixFileId30443,1203033
  dev_t dev;                  /* Device number */dev30444,1203053
  struct vxworksFileId *pId;  /* Unique file ID for vxworks. */pId30446,1203118
  ino_t ino;                  /* Inode number */ino30448,1203188
struct unixInodeInfo {unixInodeInfo30461,1203640
  struct unixFileId fileId;       /* The lookup key */fileId30462,1203663
  int nShared;                    /* Number of SHARED locks held */nShared30463,1203718
  unsigned char eFileLock;        /* One of SHARED_LOCK, RESERVED_LOCK etc. */eFileLock30464,1203786
  unsigned char bProcessLock;     /* An exclusive process lock is held */bProcessLock30465,1203865
  int nRef;                       /* Number of pointers to this structure */nRef30466,1203939
  unixShmNode *pShmNode;          /* Shared memory associated with this inode */pShmNode30467,1204016
  int nLock;                      /* Number of outstanding file locks */nLock30468,1204097
  UnixUnusedFd *pUnused;          /* Unused file descriptors to close */pUnused30469,1204170
  unixInodeInfo *pNext;           /* List of all unixInodeInfo objects */pNext30470,1204243
  unixInodeInfo *pPrev;           /*    .... doubly linked */pPrev30471,1204317
  unsigned long long sharedByte;  /* for AFP simulated shared lock */sharedByte30473,1204411
  sem_t *pSem;                    /* Named POSIX semaphore */pSem30476,1204503
  char aSemName[MAX_PATHNAME+2];  /* Name of that semaphore */aSemName30477,1204565
static unixInodeInfo *inodeList = 0;inodeList30484,1204686
#define unixLogError(unixLogError30502,1205385
static int unixLogErrorAtLine(unixLogErrorAtLine30503,1205452
static void robust_close(unixFile *pFile, int h, int lineno){robust_close30568,1207902
static void storeLastErrno(unixFile *pFile, int error){storeLastErrno30579,1208221
static void closePendingFds(unixFile *pFile){closePendingFds30586,1208392
static void releaseInodeInfo(unixFile *pFile){releaseInodeInfo30604,1208864
static int findInodeInfo(findInodeInfo30638,1209851
static int fileHasMoved(unixFile *pFile){fileHasMoved30721,1212556
static void verifyDbFile(unixFile *pFile){verifyDbFile30741,1213115
static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){unixCheckReservedLock30774,1214105
static int unixFileLock(unixFile *pFile, struct flock *pLock){unixFileLock30834,1216055
static int unixLock(sqlite3_file *id, int eFileLock){unixLock30884,1217557
static void setPendingFd(unixFile *pFile){setPendingFd31111,1225339
static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){posixUnlock31133,1226184
static int unixUnlock(sqlite3_file *id, int eFileLock){unixUnlock31293,1231599
static int closeUnixFile(sqlite3_file *id){closeUnixFile31315,1232329
static int unixClose(sqlite3_file *id){unixClose31350,1233111
static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){nolockCheckReservedLock31395,1234980
static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){nolockLock31400,1235120
static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){nolockUnlock31404,1235242
static int nolockClose(sqlite3_file *id) {nolockClose31412,1235392
#define DOTLOCK_SUFFIX DOTLOCK_SUFFIX31445,1236810
static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {dotlockCheckReservedLock31457,1237350
static int dotlockLock(sqlite3_file *id, int eFileLock) {dotlockLock31498,1238689
static int dotlockUnlock(sqlite3_file *id, int eFileLock) {dotlockUnlock31548,1240039
static int dotlockClose(sqlite3_file *id) {dotlockClose31591,1241132
static int robust_flock(int fd, int op){robust_flock31621,1242270
# define robust_flock(robust_flock31627,1242399
static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){flockCheckReservedLock31637,1242753
static int flockLock(sqlite3_file *id, int eFileLock) {flockLock31717,1245163
static int flockUnlock(sqlite3_file *id, int eFileLock) {flockUnlock31761,1246418
static int flockClose(sqlite3_file *id) {flockClose31795,1247243
static int semXCheckReservedLock(sqlite3_file *id, int *pResOut) {semXCheckReservedLock31824,1248386
static int semXLock(sqlite3_file *id, int eFileLock) {semXLock31891,1250443
static int semXUnlock(sqlite3_file *id, int eFileLock) {semXUnlock31924,1251318
static int semXClose(sqlite3_file *id) {semXClose31961,1252213
typedef struct afpLockingContext afpLockingContext;afpLockingContext31996,1253246
struct afpLockingContext {afpLockingContext31997,1253298
  int reserved;reserved31998,1253325
  const char *dbPath;             /* Name of the open file */dbPath31999,1253341
struct ByteRangeLockPB2ByteRangeLockPB232002,1253407
  unsigned long long offset;        /* offset to first byte to lock */offset32004,1253433
  unsigned long long length;        /* nbr of bytes to lock */length32005,1253504
  unsigned long long retRangeStart; /* nbr of 1st byte locked if successful */retRangeStart32006,1253567
  unsigned char unLockFlag;         /* 1 = unlock, 0 = lock */unLockFlag32007,1253646
  unsigned char startEndFlag;       /* 1=rel to end of fork, 0=rel to start */startEndFlag32008,1253709
  int fd;                           /* file desc to assoc this lock with */fd32009,1253788
#define afpfsByteRangeLock2FSCTL afpfsByteRangeLock2FSCTL32012,1253868
static int afpSetLock(afpSetLock32020,1254102
static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){afpCheckReservedLock32066,1255679
static int afpLock(sqlite3_file *id, int eFileLock){afpLock32136,1257758
static int afpUnlock(sqlite3_file *id, int eFileLock) {afpUnlock32318,1263964
static int afpClose(sqlite3_file *id) {afpClose32421,1267319
static int nfsUnlock(sqlite3_file *id, int eFileLock){nfsUnlock32463,1268894
static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){seekAndRead32499,1270416
static int unixRead(unixRead32548,1271709
static int seekAndWriteFd(seekAndWriteFd32607,1273395
static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){seekAndWrite32653,1274779
static int unixWrite(unixWrite32662,1275044
SQLITE_API int sqlite3_sync_count = 0;sqlite3_sync_count32747,1277509
SQLITE_API int sqlite3_fullsync_count = 0;sqlite3_fullsync_count32748,1277548
# define fdatasync fdatasync32758,1277937
# define HAVE_FULLFSYNC HAVE_FULLFSYNC32767,1278176
# define HAVE_FULLFSYNC HAVE_FULLFSYNC32769,1278208
static int full_fsync(int fd, int fullSync, int dataOnly){full_fsync32797,1279532
static int openDirectory(const char *zFilename, int *pFd){openDirectory32893,1282752
static int unixSync(sqlite3_file *id, int flags){unixSync32930,1284095
static int unixTruncate(sqlite3_file *id, i64 nByte){unixTruncate32980,1285633
static int unixFileSize(sqlite3_file *id, i64 *pSize){unixFileSize33030,1287236
static int fcntlSizeHint(unixFile *pFile, i64 nByte){fcntlSizeHint33068,1288376
static void unixModeBit(unixFile *pFile, unsigned char mask, int *pArg){unixModeBit33137,1290832
static int unixFileControl(sqlite3_file *id, int op, void *pArg){unixFileControl33153,1291201
static int unixSectorSize(sqlite3_file *NotUsed){unixSectorSize33249,1294144
static int unixSectorSize(sqlite3_file *id){unixSectorSize33261,1294412
static int unixDeviceCharacteristics(sqlite3_file *id){unixDeviceCharacteristics33348,1298467
static int unixGetpagesize(void){unixGetpagesize33369,1299006
struct unixShmNode {unixShmNode33412,1300404
  unixInodeInfo *pInode;     /* unixInodeInfo that owns this SHM node */pInode33413,1300425
  sqlite3_mutex *mutex;      /* Mutex to access this object */mutex33414,1300498
  char *zFilename;           /* Name of the mmapped file */zFilename33415,1300561
  int h;                     /* Open file descriptor */h33416,1300621
  int szRegion;              /* Size of shared-memory regions */szRegion33417,1300677
  u16 nRegion;               /* Size of array apRegion */nRegion33418,1300742
  u8 isReadonly;             /* True if read-only */isReadonly33419,1300800
  char **apRegion;           /* Array of mapped shared-memory regions */apRegion33420,1300853
  int nRef;                  /* Number of unixShm objects pointing to this */nRef33421,1300926
  unixShm *pFirst;           /* All unixShm objects pointing to this */pFirst33422,1301004
  u8 exclMask;               /* Mask of exclusive locks held */exclMask33424,1301096
  u8 sharedMask;             /* Mask of shared locks held */sharedMask33425,1301160
  u8 nextShmId;              /* Next available unixShm.id value */nextShmId33426,1301221
struct unixShm {unixShm33443,1301670
  unixShmNode *pShmNode;     /* The underlying unixShmNode object */pShmNode33444,1301687
  unixShm *pNext;            /* Next unixShm with the same unixShmNode */pNext33445,1301756
  u8 hasMutex;               /* True if holding the unixShmNode mutex */hasMutex33446,1301830
  u8 id;                     /* Id of this connection within its unixShmNode */id33447,1301903
  u16 sharedMask;            /* Mask of shared locks held */sharedMask33448,1301983
  u16 exclMask;              /* Mask of exclusive locks held */exclMask33449,1302044
#define UNIX_SHM_BASE UNIX_SHM_BASE33455,1302148
#define UNIX_SHM_DMS UNIX_SHM_DMS33456,1302228
static int unixShmSystemLock(unixShmSystemLock33464,1302473
static int unixShmRegionPerMap(void){unixShmRegionPerMap33543,1304966
static void unixShmPurge(unixFile *pFd){unixShmPurge33557,1305431
static int unixOpenSharedMemory(unixFile *pDbFd){unixOpenSharedMemory33617,1308079
static int unixShmMap(unixShmMap33766,1313534
static int unixShmLock(unixShmLock33904,1318287
static void unixShmBarrier(unixShmBarrier34016,1322188
static int unixShmUnmap(unixShmUnmap34032,1322697
# define unixShmMap unixShmMap34078,1324017
# define unixShmLock unixShmLock34079,1324043
# define unixShmBarrier unixShmBarrier34080,1324069
# define unixShmUnmap unixShmUnmap34081,1324095
static void unixUnmapfile(unixFile *pFd){unixUnmapfile34088,1324245
static void unixRemapfile(unixRemapfile34113,1324997
static int unixMapfile(unixFile *pFd, i64 nMap){unixMapfile34205,1328026
static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){unixFetch34242,1329209
static int unixUnfetch(sqlite3_file *fd, i64 iOff, void *p){unixUnfetch34273,1330183
#define IOMETHODS(IOMETHODS34341,1332560
static const sqlite3_io_methods *autolockIoFinderImpl(autolockIoFinderImpl34493,1339747
  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;autolockIoFinder34547,1341362
static const sqlite3_io_methods *vxworksIoFinderImpl(vxworksIoFinderImpl34557,1341719
  *(*const vxworksIoFinder)(const char*,unixFile*) = vxworksIoFinderImpl;vxworksIoFinder34583,1342466
typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);finder_type34590,1342639
static int fillInUnixFile(fillInUnixFile34603,1343041
static const char *unixTempFileDir(void){unixTempFileDir34790,1349080
static int unixGetTempname(int nBuf, char *zBuf){unixGetTempname34824,1349834
static UnixUnusedFd *findReusableFd(const char *zPath, int flags){findReusableFd34874,1351636
static int getFileMode(getFileMode34919,1353237
static int findCreateFileMode(findCreateFileMode34958,1354866
static int unixOpen(unixOpen35040,1357857
static int unixDelete(unixDelete35296,1366855
static int unixAccess(unixAccess35344,1368174
static int mkFullPathname(mkFullPathname35370,1368965
static int unixFullPathname(unixFullPathname35403,1370028
static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){unixDlOpen35493,1372642
static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){unixDlError35505,1373107
static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){unixDlSym35515,1373357
static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){unixDlClose35538,1374437
  #define unixDlOpen unixDlOpen35543,1374604
  #define unixDlError unixDlError35544,1374628
  #define unixDlSym unixDlSym35545,1374652
  #define unixDlClose unixDlClose35546,1374676
static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){unixRandomness35552,1374778
static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){unixSleep35599,1376526
SQLITE_API int sqlite3_current_time = 0;  /* Fake system time in seconds since 1970. */sqlite3_current_time35626,1377251
static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){unixCurrentTimeInt6435639,1377786
static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){unixCurrentTime35671,1378803
# define unixCurrentTime unixCurrentTime35680,1379012
static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){unixGetLastError35689,1379260
typedef struct proxyLockingContext proxyLockingContext;proxyLockingContext35860,1386648
struct proxyLockingContext {proxyLockingContext35861,1386704
  unixFile *conchFile;         /* Open conch file */conchFile35862,1386733
  char *conchFilePath;         /* Name of the conch file */conchFilePath35863,1386786
  unixFile *lockProxy;         /* Open proxy lock file */lockProxy35864,1386846
  char *lockProxyPath;         /* Name of the proxy lock file */lockProxyPath35865,1386904
  char *dbPath;                /* Name of the open file */dbPath35866,1386969
  int conchHeld;               /* 1 if the conch is held, -1 if lockless */conchHeld35867,1387028
  int nFails;                  /* Number of conch taking failures */nFails35868,1387104
  void *oldLockingContext;     /* Original lockingcontext to restore on close */oldLockingContext35869,1387173
  sqlite3_io_methods const *pOldMethod;     /* Original I/O methods for close */pOldMethod35870,1387254
static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){proxyGetLockPath35878,1387519
static int proxyCreateLockPath(const char *lockPath){proxyCreateLockPath35919,1388566
static int proxyCreateUnixFile(proxyCreateUnixFile35959,1389917
SQLITE_API int sqlite3_hostid_num = 0;sqlite3_hostid_num36043,1392203
#define PROXY_HOSTIDLEN PROXY_HOSTIDLEN36046,1392250
static int proxyGetHostID(unsigned char *pHostID, int *pError){proxyGetHostID36056,1392577
#define PROXY_CONCHVERSION PROXY_CONCHVERSION36085,1393305
#define PROXY_HEADERLEN PROXY_HEADERLEN36086,1393379
#define PROXY_PATHINDEX PROXY_PATHINDEX36087,1393441
#define PROXY_MAXCONCHLEN PROXY_MAXCONCHLEN36088,1393502
static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){proxyBreakConchLock36096,1393849
static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){proxyConchLock36156,1395816
static int proxyTakeConch(unixFile *pFile){proxyTakeConch36234,1398540
static int proxyReleaseConch(unixFile *pFile){proxyReleaseConch36456,1406778
static int proxyCreateConchPathname(char *dbPath, char **pConchPath){proxyCreateConchPathname36486,1407943
static int switchLockProxyPath(unixFile *pFile, const char *path) {switchLockProxyPath36523,1408987
static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){proxyGetDbPathForUnixFile36559,1410062
static int proxyTransformUnixFile(unixFile *pFile, const char *path) {proxyTransformUnixFile36590,1411309
static int proxyFileControl(sqlite3_file *id, int op, void *pArg){proxyFileControl36677,1414000
static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {proxyCheckReservedLock36750,1416485
static int proxyLock(sqlite3_file *id, int eFileLock) {proxyLock36789,1417763
static int proxyUnlock(sqlite3_file *id, int eFileLock) {proxyUnlock36813,1418500
static int proxyClose(sqlite3_file *id) {proxyClose36832,1419030
SQLITE_API int sqlite3_os_init(void){ sqlite3_os_init36894,1421151
  #define UNIXVFS(UNIXVFS36915,1422289
SQLITE_API int sqlite3_os_end(void){ sqlite3_os_end36993,1425433
#define _OS_COMMON_H__OS_COMMON_H_37043,1427107
#define SQLITE_HWTIME_HSQLITE_HWTIME_H37082,1428356
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime37095,1428753
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec37103,1428961
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime37114,1429176
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime37122,1429371
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime37146,1430113
static sqlite_uint64 g_start;g_start37155,1430404
static sqlite_uint64 g_elapsed;g_elapsed37156,1430434
#define TIMER_START TIMER_START37157,1430466
#define TIMER_END TIMER_END37158,1430516
#define TIMER_ELAPSED TIMER_ELAPSED37159,1430576
#define TIMER_STARTTIMER_START37161,1430618
#define TIMER_ENDTIMER_END37162,1430638
#define TIMER_ELAPSED TIMER_ELAPSED37163,1430656
#define SimulateIOErrorBenign(SimulateIOErrorBenign37179,1431256
#define SimulateIOError(SimulateIOError37180,1431317
static void local_ioerr(){local_ioerr37184,1431495
#define SimulateDiskfullError(SimulateDiskfullError37189,1431635
#define SimulateIOErrorBenign(SimulateIOErrorBenign37201,1431930
#define SimulateIOError(SimulateIOError37202,1431963
#define SimulateDiskfullError(SimulateDiskfullError37203,1431990
#define OpenCounter(OpenCounter37211,1432195
#define OpenCounter(OpenCounter37213,1432254
#  define SQLITE_WIN32_HAS_ANSISQLITE_WIN32_HAS_ANSI37245,1433235
#  define SQLITE_WIN32_HAS_WIDESQLITE_WIN32_HAS_WIDE37254,1433490
#  define NTDDI_WIN8 NTDDI_WIN837270,1433883
#  define NTDDI_WINBLUE NTDDI_WINBLUE37274,1433968
#  define NTDDI_WINTHRESHOLD NTDDI_WINTHRESHOLD37278,1434058
#    define SQLITE_WIN32_GETVERSIONEX SQLITE_WIN32_GETVERSIONEX37287,1434360
#    define SQLITE_WIN32_GETVERSIONEX SQLITE_WIN32_GETVERSIONEX37289,1434447
#    define SQLITE_WIN32_CREATEFILEMAPPINGA SQLITE_WIN32_CREATEFILEMAPPINGA37300,1434870
#    define SQLITE_WIN32_CREATEFILEMAPPINGA SQLITE_WIN32_CREATEFILEMAPPINGA37302,1434926
#  define MAX_PATH MAX_PATH37310,1435087
#  define SQLITE_WIN32_MAX_PATH_CHARS SQLITE_WIN32_MAX_PATH_CHARS37318,1435270
#  define UNICODE_STRING_MAX_CHARS UNICODE_STRING_MAX_CHARS37325,1435440
#  define SQLITE_WINNT_MAX_PATH_CHARS SQLITE_WINNT_MAX_PATH_CHARS37333,1435641
#  define SQLITE_WIN32_MAX_PATH_BYTES SQLITE_WIN32_MAX_PATH_BYTES37342,1435943
#  define SQLITE_WINNT_MAX_PATH_BYTES SQLITE_WINNT_MAX_PATH_BYTES37350,1436184
#  define SQLITE_WIN32_MAX_ERRMSG_CHARS SQLITE_WIN32_MAX_ERRMSG_CHARS37358,1436406
#  define winIsDirSep(winIsDirSep37366,1436571
#  define UNUSED_VARIABLE_VALUE(UNUSED_VARIABLE_VALUE37374,1436829
#  define winGetDirSep(winGetDirSep37381,1436987
# define INVALID_FILE_ATTRIBUTES INVALID_FILE_ATTRIBUTES37426,1438490
# define FILE_FLAG_MASK FILE_FLAG_MASK37430,1438566
# define FILE_ATTRIBUTE_MASK FILE_ATTRIBUTE_MASK37434,1438648
typedef struct winShm winShm;           /* A connection to shared-memory */winShm37439,1438778
typedef struct winShmNode winShmNode;   /* A region of shared-memory */winShmNode37440,1438854
typedef struct winceLock {winceLock37448,1439059
  int nReaders;       /* Number of reader locks obtained */nReaders37449,1439086
  BOOL bPending;      /* Indicates a pending lock has been obtained */bPending37450,1439146
  BOOL bReserved;     /* Indicates a reserved lock has been obtained */bReserved37451,1439217
  BOOL bExclusive;    /* Indicates an exclusive lock has been obtained */bExclusive37452,1439289
} winceLock;winceLock37453,1439363
typedef struct winFile winFile;winFile37460,1439490
struct winFile {winFile37461,1439522
  const sqlite3_io_methods *pMethod; /*** Must be first ***/pMethod37462,1439539
  sqlite3_vfs *pVfs;      /* The VFS used to open this file */pVfs37463,1439600
  HANDLE h;               /* Handle for accessing the file */h37464,1439663
  u8 locktype;            /* Type of lock currently held on this file */locktype37465,1439725
  short sharedLockByte;   /* Randomly chosen byte used as a shared lock */sharedLockByte37466,1439798
  u8 ctrlFlags;           /* Flags.  See WINFILE_* below */ctrlFlags37467,1439873
  DWORD lastErrno;        /* The Windows errno from the last I/O error */lastErrno37468,1439933
  winShm *pShm;           /* Instance of shared memory on this file */pShm37470,1440031
  const char *zPath;      /* Full pathname of this file */zPath37472,1440109
  int szChunk;            /* Chunk size configured by FCNTL_CHUNK_SIZE */szChunk37473,1440168
  LPWSTR zDeleteOnClose;  /* Name of file to delete when closing */zDeleteOnClose37475,1440262
  HANDLE hMutex;          /* Mutex used to control access to shared lock */hMutex37476,1440330
  HANDLE hShared;         /* Shared memory segment used for locking */hShared37477,1440406
  winceLock local;        /* Locks obtained by this instance of winFile */local37478,1440477
  winceLock *shared;      /* Global shared lock memory for the file  */shared37479,1440552
  int nFetchOut;                /* Number of outstanding xFetch references */nFetchOut37482,1440658
  HANDLE hMap;                  /* Handle for accessing memory mapping */hMap37483,1440736
  void *pMapRegion;             /* Area memory mapped */pMapRegion37484,1440810
  sqlite3_int64 mmapSize;       /* Usable size of mapped region */mmapSize37485,1440867
  sqlite3_int64 mmapSizeActual; /* Actual size of mapped region */mmapSizeActual37486,1440934
  sqlite3_int64 mmapSizeMax;    /* Configured FCNTL_MMAP_SIZE value */mmapSizeMax37487,1441001
typedef struct winVfsAppData winVfsAppData;winVfsAppData37495,1441190
struct winVfsAppData {winVfsAppData37496,1441234
  const sqlite3_io_methods *pMethod; /* The file I/O methods to use. */pMethod37497,1441257
  void *pAppData;                    /* The extra pAppData, if any. */pAppData37498,1441329
  BOOL bNoLock;                      /* Non-zero if locking is disabled. */bNoLock37499,1441400
#define WINFILE_RDONLY WINFILE_RDONLY37505,1441526
#define WINFILE_PERSIST_WAL WINFILE_PERSIST_WAL37506,1441595
#define WINFILE_PSOW WINFILE_PSOW37507,1441660
#  define SQLITE_WIN32_DBG_BUF_SIZE SQLITE_WIN32_DBG_BUF_SIZE37513,1441843
#  define SQLITE_WIN32_DATA_DIRECTORY_TYPE SQLITE_WIN32_DATA_DIRECTORY_TYPE37521,1442075
#  define SQLITE_WIN32_TEMP_DIRECTORY_TYPE SQLITE_WIN32_TEMP_DIRECTORY_TYPE37529,1442293
#  define SQLITE_WIN32_HEAP_CREATE SQLITE_WIN32_HEAP_CREATE37553,1443408
#    define SQLITE_WIN32_CACHE_SIZE SQLITE_WIN32_CACHE_SIZE37562,1443656
#    define SQLITE_WIN32_CACHE_SIZE SQLITE_WIN32_CACHE_SIZE37564,1443728
#  define SQLITE_WIN32_HEAP_INIT_SIZE SQLITE_WIN32_HEAP_INIT_SIZE37572,1443928
#  define SQLITE_WIN32_HEAP_MAX_SIZE SQLITE_WIN32_HEAP_MAX_SIZE37580,1444197
#  define SQLITE_WIN32_HEAP_FLAGS SQLITE_WIN32_HEAP_FLAGS37588,1444398
typedef struct winMemData winMemData;winMemData37596,1444572
struct winMemData {winMemData37597,1444610
  u32 magic1;   /* Magic number to detect structure corruption. */magic137599,1444645
  HANDLE hHeap; /* The handle to our heap. */hHeap37601,1444719
  BOOL bOwned;  /* Do we own the heap (i.e. destroy it on shutdown)? */bOwned37602,1444765
  u32 magic2;   /* Magic number to detect structure corruption. */magic237604,1444852
#define WINMEM_MAGIC1 WINMEM_MAGIC137609,1444945
#define WINMEM_MAGIC2 WINMEM_MAGIC237610,1444982
static struct winMemData win_mem_data = {win_mem_data37613,1445027
#define winMemAssertMagic1(winMemAssertMagic137624,1445180
#define winMemAssertMagic2(winMemAssertMagic237625,1445254
#define winMemAssertMagic(winMemAssertMagic37626,1445328
#define winMemAssertMagic(winMemAssertMagic37628,1445407
#define winMemGetDataPtr(winMemGetDataPtr37631,1445443
#define winMemGetHeap(winMemGetHeap37632,1445485
#define winMemGetOwned(winMemGetOwned37633,1445532
SQLITE_API LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;sqlite3_os_type37659,1446376
static LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;sqlite3_os_type37661,1446441
#  define SYSCALL SYSCALL37665,1446520
#  define osAreFileApisANSI(osAreFileApisANSI37673,1446671
static struct win_syscall {win_syscall37682,1446982
  const char *zName;            /* Name of the system call */zName37683,1447010
  sqlite3_syscall_ptr pCurrent; /* Current value of the system call */pCurrent37684,1447072
  sqlite3_syscall_ptr pDefault; /* Default value */pDefault37685,1447143
#define osAreFileApisANSI osAreFileApisANSI37694,1447433
#define osCharLowerW osCharLowerW37703,1447719
#define osCharUpperW osCharUpperW37711,1447997
#define osCloseHandle osCloseHandle37715,1448138
#define osCreateFileA osCreateFileA37723,1448396
#define osCreateFileW osCreateFileW37732,1448740
#define osCreateFileMappingA osCreateFileMappingA37743,1449197
#define osCreateFileMappingW osCreateFileMappingW37753,1449630
#define osCreateMutexW osCreateMutexW37762,1449976
#define osDeleteFileA osDeleteFileA37771,1450276
#define osDeleteFileW osDeleteFileW37779,1450534
#define osFileTimeToLocalFileTime osFileTimeToLocalFileTime37787,1450779
#define osFileTimeToSystemTime osFileTimeToSystemTime37796,1451066
#define osFlushFileBuffers osFlushFileBuffers37801,1451249
#define osFormatMessageA osFormatMessageA37809,1451513
#define osFormatMessageW osFormatMessageW37818,1451827
#define osFreeLibrary osFreeLibrary37827,1452148
#define osGetCurrentProcessId osGetCurrentProcessId37831,1452290
#define osGetDiskFreeSpaceA osGetDiskFreeSpaceA37839,1452576
#define osGetDiskFreeSpaceW osGetDiskFreeSpaceW37848,1452924
#define osGetFileAttributesA osGetFileAttributesA37857,1453233
#define osGetFileAttributesW osGetFileAttributesW37865,1453520
#define osGetFileAttributesExW osGetFileAttributesExW37873,1453788
#define osGetFileSize osGetFileSize37882,1454084
#define osGetFullPathNameA osGetFullPathNameA37890,1454372
#define osGetFullPathNameW osGetFullPathNameW37899,1454707
#define osGetLastError osGetLastError37904,1454887
#define osGetProcAddressA osGetProcAddressA37919,1455449
#define osGetSystemInfo osGetSystemInfo37928,1455720
#define osGetSystemTime osGetSystemTime37932,1455870
#define osGetSystemTimeAsFileTime osGetSystemTimeAsFileTime37940,1456123
#define osGetTempPathA osGetTempPathA37949,1456409
#define osGetTempPathW osGetTempPathW37957,1456695
#define osGetTickCount osGetTickCount37965,1456948
#define osGetVersionExA osGetVersionExA37973,1457236
#define osGetVersionExW osGetVersionExW37983,1457577
#define osHeapAlloc osHeapAlloc37988,1457741
#define osHeapCreate osHeapCreate37997,1458010
#define osHeapDestroy osHeapDestroy38006,1458280
#define osHeapFree osHeapFree38010,1458421
#define osHeapReAlloc osHeapReAlloc38014,1458572
#define osHeapSize osHeapSize38019,1458746
#define osHeapValidate osHeapValidate38028,1459015
#define osHeapCompact osHeapCompact38037,1459306
#define osLoadLibraryA osLoadLibraryA38045,1459611
#define osLoadLibraryW osLoadLibraryW38054,1459944
#define osLocalFree osLocalFree38062,1460194
#define osLockFile osLockFile38071,1460478
#define osLockFileEx osLockFileEx38082,1460783
#define osMapViewOfFile osMapViewOfFile38093,1461170
#define osMultiByteToWideChar osMultiByteToWideChar38098,1461351
#define osQueryPerformanceCounter osQueryPerformanceCounter38103,1461536
#define osReadFile osReadFile38108,1461708
#define osSetEndOfFile osSetEndOfFile38113,1461891
#define osSetFilePointer osSetFilePointer38121,1462137
#define osSleep osSleep38130,1462414
#define osSystemTimeToFileTime osSystemTimeToFileTime38134,1462548
#define osUnlockFile osUnlockFile38144,1462876
#define osUnlockFileEx osUnlockFileEx38154,1463162
#define osUnmapViewOfFile osUnmapViewOfFile38163,1463504
#define osWideCharToMultiByte osWideCharToMultiByte38167,1463650
#define osWriteFile osWriteFile38172,1463849
#define osCreateEventExW osCreateEventExW38181,1464137
#define osWaitForSingleObject osWaitForSingleObject38190,1464433
#define osWaitForSingleObjectEx osWaitForSingleObjectEx38199,1464704
#define osSetFilePointerEx osSetFilePointerEx38208,1464981
#define osGetFileInformationByHandleEx osGetFileInformationByHandleEx38217,1465286
#define osMapViewOfFileFromApp osMapViewOfFileFromApp38226,1465654
#define osCreateFile2 osCreateFile238235,1465941
#define osLoadPackagedLibrary osLoadPackagedLibrary38244,1466291
#define osGetTickCount64 osGetTickCount6438253,1466564
#define osGetNativeSystemInfo osGetNativeSystemInfo38261,1466814
#define osOutputDebugStringA osOutputDebugStringA38270,1467099
#define osOutputDebugStringW osOutputDebugStringW38278,1467365
#define osGetProcessHeap osGetProcessHeap38282,1467514
#define osCreateFileMappingFromApp osCreateFileMappingFromApp38290,1467820
#define osInterlockedCompareExchange osInterlockedCompareExchange38301,1468295
#define osUuidCreate osUuidCreate38315,1468838
#define osUuidCreateSequential osUuidCreateSequential38323,1469135
#define osFlushViewOfFile osFlushViewOfFile38332,1469441
} aSyscall[] = {aSyscall37686,1447195
static int winSetSystemCall(winSetSystemCall38343,1469821
static sqlite3_syscall_ptr winGetSystemCall(winGetSystemCall38386,1471105
static const char *winNextSystemCall(sqlite3_vfs *p, const char *zName){winNextSystemCall38405,1471631
SQLITE_API int sqlite3_win32_compact_heap(LPUINT pnLargest){sqlite3_win32_compact_heap38428,1472380
SQLITE_API int sqlite3_win32_reset_heap(){sqlite3_win32_reset_heap38468,1473733
SQLITE_API void sqlite3_win32_write_debug(const char *zBuf, int nBuf){sqlite3_win32_write_debug38513,1475384
static HANDLE sleepObj = NULL;sleepObj38556,1476699
SQLITE_API void sqlite3_win32_sleep(DWORD milliseconds){sqlite3_win32_sleep38559,1476738
SQLITE_PRIVATE DWORD sqlite3Win32Wait(HANDLE hObject){sqlite3Win32Wait38574,1477193
# define osIsNT(osIsNT38595,1477960
# define osIsNT(osIsNT38597,1478059
# define osIsNT(osIsNT38599,1478120
# define osIsNT(osIsNT38601,1478149
SQLITE_API int sqlite3_win32_is_nt(void){sqlite3_win32_is_nt38608,1478332
static void *winMemMalloc(int nBytes){winMemMalloc38647,1479521
static void winMemFree(void *pPrior){winMemFree38670,1480113
static void *winMemRealloc(void *pPrior, int nBytes){winMemRealloc38690,1480746
static int winMemSize(void *p){winMemSize38718,1481556
static int winMemRoundup(int n){winMemRoundup38742,1482193
static int winMemInit(void *pAppData){winMemInit38749,1482274
static void winMemShutdown(void *pAppData){winMemShutdown38798,1483909
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetWin32(void){sqlite3MemGetWin3238829,1484986
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault38843,1485282
static LPWSTR winUtf8ToUnicode(const char *zText){winUtf8ToUnicode38853,1485557
static char *winUnicodeToUtf8(LPCWSTR zWideText){winUnicodeToUtf838879,1486167
static LPWSTR winMbcsToUnicode(const char *zText, int useAnsi){winMbcsToUnicode38906,1486790
static char *winUnicodeToMbcs(LPCWSTR zWideText, int useAnsi){winUnicodeToMbcs38935,1487567
static char *winMbcsToUtf8(const char *zText, int useAnsi){winMbcsToUtf838962,1488218
static char *winUtf8ToMbcs(const char *zText, int useAnsi){winUtf8ToMbcs38980,1488635
SQLITE_API LPWSTR sqlite3_win32_utf8_to_unicode(const char *zText){sqlite3_win32_utf8_to_unicode38996,1488982
SQLITE_API char *sqlite3_win32_unicode_to_utf8(LPCWSTR zWideText){sqlite3_win32_unicode_to_utf839012,1489335
SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zText){sqlite3_win32_mbcs_to_utf839028,1489692
SQLITE_API char *sqlite3_win32_mbcs_to_utf8_v2(const char *zText, int useAnsi){sqlite3_win32_mbcs_to_utf8_v239044,1490056
SQLITE_API char *sqlite3_win32_utf8_to_mbcs(const char *zText){sqlite3_win32_utf8_to_mbcs39060,1490424
SQLITE_API char *sqlite3_win32_utf8_to_mbcs_v2(const char *zText, int useAnsi){sqlite3_win32_utf8_to_mbcs_v239076,1490788
SQLITE_API int sqlite3_win32_set_directory(DWORD type, LPCWSTR zValue){sqlite3_win32_set_directory39096,1491426
static int winGetLastErrorMsg(DWORD lastErrno, int nBuf, char *zBuf){winGetLastErrorMsg39131,1492480
#define winLogError(winLogError39221,1495608
static int winLogErrorAtLine(winLogErrorAtLine39222,1495675
# define SQLITE_WIN32_IOERR_RETRY SQLITE_WIN32_IOERR_RETRY39253,1496802
# define SQLITE_WIN32_IOERR_RETRY_DELAY SQLITE_WIN32_IOERR_RETRY_DELAY39256,1496885
static int winIoerrRetry = SQLITE_WIN32_IOERR_RETRY;winIoerrRetry39258,1496935
static int winIoerrRetryDelay = SQLITE_WIN32_IOERR_RETRY_DELAY;winIoerrRetryDelay39259,1496988
#define winIoerrCanRetry1(winIoerrCanRetry139278,1498022
static int winRetryIoerr(int *pnRetry, DWORD *pError){winRetryIoerr39292,1498683
static void winLogIoerr(int nRetry, int lineno){winLogIoerr39321,1499241
struct tm *__cdecl localtime(const time_t *t)localtime39341,1499851
#define HANDLE_TO_WINFILE(HANDLE_TO_WINFILE39368,1500558
static void winceMutexAcquire(HANDLE h){winceMutexAcquire39373,1500677
#define winceMutexRelease(winceMutexRelease39382,1500913
static int winceCreateLock(const char *zFilename, winFile *pFile){winceCreateLock39388,1501052
static void winceDestroyLock(winFile *pFile){winceDestroyLock39482,1503878
static BOOL winceLockFile(winceLockFile39516,1504801
static BOOL winceUnlockFile(winceUnlockFile39582,1506570
static BOOL winLockFile(winLockFile39651,1508444
static BOOL winUnlockFile(winUnlockFile39683,1509210
# define INVALID_SET_FILE_POINTER INVALID_SET_FILE_POINTER39720,1510288
static int winSeekFile(winFile *pFile, sqlite3_int64 iOffset){winSeekFile39728,1510544
#define MX_CLOSE_ATTEMPT MX_CLOSE_ATTEMPT39800,1513144
static int winClose(sqlite3_file *id){winClose39801,1513171
#define WINCE_DELETION_ATTEMPTS WINCE_DELETION_ATTEMPTS39822,1513764
static int winRead(winRead39857,1514799
static int winWrite(winWrite39937,1517891
static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){winTruncate40046,1521832
SQLITE_API int sqlite3_sync_count = 0;sqlite3_sync_count40096,1523755
SQLITE_API int sqlite3_fullsync_count = 0;sqlite3_fullsync_count40097,1523794
static int winSync(sqlite3_file *id, int flags){winSync40103,1523919
static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){winFileSize40188,1526475
# define LOCKFILE_FAIL_IMMEDIATELY LOCKFILE_FAIL_IMMEDIATELY40234,1527832
# define LOCKFILE_EXCLUSIVE_LOCK LOCKFILE_EXCLUSIVE_LOCK40238,1527909
# define SQLITE_LOCKFILE_FLAGS SQLITE_LOCKFILE_FLAGS40249,1528369
# define SQLITE_LOCKFILEEX_FLAGS SQLITE_LOCKFILEEX_FLAGS40258,1528675
static int winGetReadLock(winFile *pFile){winGetReadLock40266,1528868
static int winUnlockReadLock(winFile *pFile){winUnlockReadLock40301,1529852
static int winLock(sqlite3_file *id, int locktype){winLock40348,1531471
static int winCheckReservedLock(sqlite3_file *id, int *pResOut){winCheckReservedLock40491,1536037
static int winUnlock(sqlite3_file *id, int locktype){winUnlock40527,1537271
static int winNolockLock(sqlite3_file *id, int locktype){winNolockLock40577,1539284
static int winNolockCheckReservedLock(sqlite3_file *id, int *pResOut){winNolockCheckReservedLock40583,1539419
static int winNolockUnlock(sqlite3_file *id, int locktype){winNolockUnlock40589,1539566
static void winModeBit(winFile *pFile, unsigned char mask, int *pArg){winModeBit40604,1540093
static int winFileControl(sqlite3_file *id, int op, void *pArg){winFileControl40622,1540589
static int winSectorSize(sqlite3_file *id){winSectorSize40749,1544676
static int winDeviceCharacteristics(sqlite3_file *id){winDeviceCharacteristics40757,1544824
static SYSTEM_INFO winSysInfo;winSysInfo40769,1545225
static void winShmEnterMutex(void){winShmEnterMutex40786,1545739
static void winShmLeaveMutex(void){winShmLeaveMutex40789,1545845
static int winShmMutexHeld(void) {winShmMutexHeld40793,1545966
struct winShmNode {winShmNode40821,1546838
  sqlite3_mutex *mutex;      /* Mutex to access this object */mutex40822,1546858
  char *zFilename;           /* Name of the file */zFilename40823,1546921
  winFile hFile;             /* File handle from winOpen */hFile40824,1546973
  int szRegion;              /* Size of shared-memory regions */szRegion40826,1547034
  int nRegion;               /* Size of array apRegion */nRegion40827,1547099
  struct ShmRegion {ShmRegion40828,1547157
    HANDLE hMap;             /* File handle from CreateFileMapping */hMap40829,1547178
    void *pMap;pMap40830,1547248
  } *aRegion;aRegion40831,1547264
  DWORD lastErrno;           /* The Windows errno from the last I/O error */lastErrno40832,1547278
  int nRef;                  /* Number of winShm objects pointing to this */nRef40834,1547356
  winShm *pFirst;            /* All winShm objects pointing to this */pFirst40835,1547433
  winShmNode *pNext;         /* Next in list of all winShmNode objects */pNext40836,1547504
  u8 nextShmId;              /* Next available winShm.id value */nextShmId40838,1547637
static winShmNode *winShmNodeList = 0;winShmNodeList40847,1547842
struct winShm {winShm40862,1548256
  winShmNode *pShmNode;      /* The underlying winShmNode object */pShmNode40863,1548272
  winShm *pNext;             /* Next winShm with the same winShmNode */pNext40864,1548340
  u8 hasMutex;               /* True if holding the winShmNode mutex */hasMutex40865,1548412
  u16 sharedMask;            /* Mask of shared locks held */sharedMask40866,1548484
  u16 exclMask;              /* Mask of exclusive locks held */exclMask40867,1548545
  u8 id;                     /* Id of this connection with its winShmNode */id40869,1548668
#define WIN_SHM_BASE WIN_SHM_BASE40876,1548792
#define WIN_SHM_DMS WIN_SHM_DMS40877,1548870
#define WINSHM_UNLCK WINSHM_UNLCK40882,1549013
#define WINSHM_RDLCK WINSHM_RDLCK40883,1549037
#define WINSHM_WRLCK WINSHM_WRLCK40884,1549061
static int winShmSystemLock(winShmSystemLock40885,1549085
static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){winShmPurge40933,1550786
static int winOpenSharedMemory(winFile *pDbFd){winOpenSharedMemory40982,1552456
static int winShmUnmap(winShmUnmap41095,1556437
static int winShmLock(winShmLock41136,1557607
static void winShmBarrier(winShmBarrier41245,1561346
static int winShmMap(winShmMap41273,1562559
# define winShmMap winShmMap41403,1567119
# define winShmLock winShmLock41404,1567144
# define winShmBarrier winShmBarrier41405,1567169
# define winShmUnmap winShmUnmap41406,1567194
static int winUnmapfile(winFile *pFile){winUnmapfile41413,1567352
static int winMapfile(winFile *pFd, sqlite3_int64 nByte){winMapfile41463,1569542
static int winFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){winFetch41562,1573099
static int winUnfetch(sqlite3_file *fd, i64 iOff, void *p){winUnfetch41603,1574452
static const sqlite3_io_methods winIoMethod = {winIoMethod41646,1575852
static const sqlite3_io_methods winIoNolockMethod = {winIoNolockMethod41672,1576981
static winVfsAppData winAppData = {winAppData41694,1577990
static winVfsAppData winNolockAppData = {winNolockAppData41700,1578139
static char *winConvertToUtf8Filename(const void *zFilename){winConvertToUtf8Filename41719,1578775
static void *winConvertFromUtf8Filename(const char *zFilename){winConvertFromUtf8Filename41740,1579320
static int winMakeEndInDirSep(int nBuf, char *zBuf){winMakeEndInDirSep41759,1579815
static int winGetTempname(sqlite3_vfs *pVfs, char **pzBuf){winGetTempname41779,1580292
static int winIsDir(const void *zConverted){winIsDir42010,1588087
static int winOpen(winOpen42037,1588790
static int winDelete(winDelete42334,1598860
static int winAccess(winAccess42442,1601901
static BOOL winIsDriveLetterAndColon(winIsDriveLetterAndColon42520,1604319
static BOOL winIsVerbatimPathname(winIsVerbatimPathname42532,1604751
static int winFullPathname(winFullPathname42568,1605935
static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){winDlOpen42752,1612491
static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){winDlError42793,1613615
static void (*winDlSym(sqlite3_vfs *pVfs,void *pH,const char *zSym))(void){winDlSym42797,1613766
static void winDlClose(sqlite3_vfs *pVfs, void *pHandle){winDlClose42805,1614060
  #define winDlOpen winDlOpen42811,1614286
  #define winDlError winDlError42812,1614309
  #define winDlSym winDlSym42813,1614332
  #define winDlClose winDlClose42814,1614355
typedef struct EntropyGatherer EntropyGatherer;EntropyGatherer42818,1614439
struct EntropyGatherer {EntropyGatherer42819,1614487
  unsigned char *a;   /* Gather entropy into this buffer */a42820,1614512
  int na;             /* Size of a[] in bytes */na42821,1614572
  int i;              /* XOR next input into a[i] */i42822,1614621
  int nXor;           /* Number of XOR operations done */nXor42823,1614674
static void xorMemory(EntropyGatherer *p, unsigned char *x, int sz){xorMemory42828,1614836
static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){winRandomness42842,1615161
static int winSleep(sqlite3_vfs *pVfs, int microsec){winSleep42902,1616861
SQLITE_API int sqlite3_current_time = 0;  /* Fake system time in seconds since 1970. */sqlite3_current_time42914,1617234
static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){winCurrentTimeInt6442927,1617768
static int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){winCurrentTime42970,1619163
static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){winGetLastError43010,1620635
SQLITE_API int sqlite3_os_init(void){sqlite3_os_init43020,1620894
SQLITE_API int sqlite3_os_end(void){sqlite3_os_end43151,1625758
#define BITVEC_SZ BITVEC_SZ43204,1627868
#define BITVEC_USIZE BITVEC_USIZE43208,1628029
#define BITVEC_TELEM BITVEC_TELEM43215,1628344
#define BITVEC_SZELEM BITVEC_SZELEM43217,1628416
#define BITVEC_NELEM BITVEC_NELEM43219,1628487
#define BITVEC_NBIT BITVEC_NBIT43221,1628590
#define BITVEC_NINT BITVEC_NINT43224,1628687
#define BITVEC_MXHASH BITVEC_MXHASH43227,1628825
#define BITVEC_HASH(BITVEC_HASH43232,1629068
#define BITVEC_NPTR BITVEC_NPTR43234,1629116
struct Bitvec {Bitvec43258,1630092
  u32 iSize;      /* Maximum bit index.  Max iSize is 4,294,967,296. */iSize43259,1630108
  u32 nSet;       /* Number of bits that are set - only valid for aHashnSet43260,1630180
  u32 iDivisor;   /* Number of bits handled by each apSub[] entry. */iDivisor43263,1630369
    BITVEC_TELEM aBitmap[BITVEC_NELEM];    /* Bitmap representation */aBitmap43268,1630646
    u32 aHash[BITVEC_NINT];      /* Hash table representation */aHash43269,1630717
    Bitvec *apSub[BITVEC_NPTR];  /* Recursive representation */apSub43270,1630782
  } u;u43271,1630846
SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){sqlite3BitvecCreate43279,1631019
SQLITE_PRIVATE int sqlite3BitvecTestNotNull(Bitvec *p, u32 i){sqlite3BitvecTestNotNull43294,1631382
SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){sqlite3BitvecTest43317,1631912
SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){sqlite3BitvecSet43333,1632488
SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){sqlite3BitvecClear43404,1634587
SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){sqlite3BitvecDestroy43441,1635470
SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){sqlite3BitvecSize43456,1635784
#define SETBIT(SETBIT43467,1636116
#define CLEARBIT(CLEARBIT43468,1636163
#define TESTBIT(TESTBIT43469,1636211
SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){sqlite3BitvecBuiltinTest43501,1637596
struct PCache {PCache43619,1641341
  PgHdr *pDirty, *pDirtyTail;         /* List of dirty pages in LRU order */pDirty43620,1641357
  PgHdr *pDirty, *pDirtyTail;         /* List of dirty pages in LRU order */pDirtyTail43620,1641357
  PgHdr *pSynced;                     /* Last synced page in dirty page list */pSynced43621,1641434
  int nRefSum;                        /* Sum of ref counts over all pages */nRefSum43622,1641514
  int szCache;                        /* Configured cache size */szCache43623,1641591
  int szSpill;                        /* Size before spilling occurs */szSpill43624,1641657
  int szPage;                         /* Size of every page in this cache */szPage43625,1641729
  int szExtra;                        /* Size of extra space for each page */szExtra43626,1641806
  u8 bPurgeable;                      /* True if pages are on backing store */bPurgeable43627,1641884
  u8 eCreate;                         /* eCreate value for for xFetch() */eCreate43628,1641963
  int (*xStress)(void*,PgHdr*);       /* Call to try make a page clean */xStress43629,1642038
  void *pStress;                      /* Argument to xStress */pStress43630,1642112
  sqlite3_pcache *pCache;             /* Pluggable cache module */pCache43631,1642176
  int sqlite3PcacheTrace = 2;       /* 0: off  1: simple  2: cache dumps */sqlite3PcacheTrace43644,1642670
  int sqlite3PcacheMxDump = 9999;   /* Max cache entries for pcacheDump() */sqlite3PcacheMxDump43645,1642746
# define pcacheTrace(pcacheTrace43646,1642823
  void pcacheDump(PCache *pCache){pcacheDump43647,1642893
# define pcacheTrace(pcacheTrace43672,1643681
# define pcacheDump(pcacheDump43673,1643705
SQLITE_PRIVATE int sqlite3PcachePageSanity(PgHdr *pPg){sqlite3PcachePageSanity43686,1644015
#define PCACHE_DIRTYLIST_REMOVE PCACHE_DIRTYLIST_REMOVE43726,1645802
#define PCACHE_DIRTYLIST_ADD PCACHE_DIRTYLIST_ADD43727,1645876
#define PCACHE_DIRTYLIST_FRONT PCACHE_DIRTYLIST_FRONT43728,1645949
static void pcacheManageDirtyList(PgHdr *pPage, u8 addRemove){pcacheManageDirtyList43736,1646328
static void pcacheUnpin(PgHdr *p){pcacheUnpin43809,1648822
static int numberOfCachePages(PCache *p){numberOfCachePages43821,1649189
SQLITE_PRIVATE int sqlite3PcacheInitialize(void){sqlite3PcacheInitialize43839,1649848
SQLITE_PRIVATE void sqlite3PcacheShutdown(void){sqlite3PcacheShutdown43848,1650239
SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }sqlite3PcacheSize43858,1650552
SQLITE_PRIVATE int sqlite3PcacheOpen(sqlite3PcacheOpen43866,1650855
SQLITE_PRIVATE int sqlite3PcacheSetPageSize(PCache *pCache, int szPage){sqlite3PcacheSetPageSize43891,1651777
SQLITE_PRIVATE sqlite3_pcache_page *sqlite3PcacheFetch(sqlite3PcacheFetch43935,1653573
SQLITE_PRIVATE int sqlite3PcacheFetchStress(sqlite3PcacheFetchStress43977,1655379
static SQLITE_NOINLINE PgHdr *pcacheFetchFinishWithInit(pcacheFetchFinishWithInit44033,1657533
SQLITE_PRIVATE PgHdr *sqlite3PcacheFetchFinish(sqlite3PcacheFetchFinish44059,1658475
SQLITE_PRIVATE void SQLITE_NOINLINE sqlite3PcacheRelease(PgHdr *p){sqlite3PcacheRelease44082,1659146
SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){sqlite3PcacheRef44101,1659774
SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){sqlite3PcacheDrop44113,1660110
SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){sqlite3PcacheMakeDirty44127,1660499
SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){sqlite3PcacheMakeClean44146,1661134
SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){sqlite3PcacheCleanAll44164,1661662
SQLITE_PRIVATE void sqlite3PcacheClearWritable(PCache *pCache){sqlite3PcacheClearWritable44175,1661931
SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){sqlite3PcacheClearSyncFlags44187,1662261
SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){sqlite3PcacheMove44198,1662519
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){sqlite3PcacheTruncate44220,1663386
SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){sqlite3PcacheClose44253,1664411
SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){sqlite3PcacheClear44262,1664640
static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){pcacheMergeDirtyList44270,1664857
#define N_SORT_BUCKET N_SORT_BUCKET44306,1665773
static PgHdr *pcacheSortDirtyList(PgHdr *pIn){pcacheSortDirtyList44307,1665799
SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){sqlite3PcacheDirtyList44342,1666611
SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){sqlite3PcacheRefCount44356,1667003
SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){sqlite3PcachePageRefcount44363,1667168
SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){sqlite3PcachePagecount44370,1667302
SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){sqlite3PcacheGetCachesize44379,1667524
SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){sqlite3PcacheSetCachesize44387,1667678
SQLITE_PRIVATE int sqlite3PcacheSetSpillsize(PCache *p, int mxPage){sqlite3PcacheSetSpillsize44399,1668132
SQLITE_PRIVATE void sqlite3PcacheShrink(PCache *pCache){sqlite3PcacheShrink44416,1668530
SQLITE_PRIVATE int sqlite3HeaderSizePcache(void){ return ROUND8(sizeof(PgHdr)); }sqlite3HeaderSizePcache44425,1668778
SQLITE_PRIVATE int sqlite3PCachePercentDirty(PCache *pCache){sqlite3PCachePercentDirty44431,1668976
SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){sqlite3PcacheIterateDirty44445,1669461
typedef struct PCache1 PCache1;PCache144539,1673825
typedef struct PgHdr1 PgHdr1;PgHdr144540,1673857
typedef struct PgFreeslot PgFreeslot;PgFreeslot44541,1673887
typedef struct PGroup PGroup;PGroup44542,1673925
struct PgHdr1 {PgHdr144550,1674195
  sqlite3_pcache_page page;      /* Base class. Must be first. pBuf & pExtra */page44551,1674211
  unsigned int iKey;             /* Key value (page number) */iKey44552,1674291
  u8 isPinned;                   /* Page in use, not on the LRU list */isPinned44553,1674354
  u8 isBulkLocal;                /* This page from bulk local storage */isBulkLocal44554,1674426
  u8 isAnchor;                   /* This is the PGroup.lru element */isAnchor44555,1674499
  PgHdr1 *pNext;                 /* Next in hash table chain */pNext44556,1674569
  PCache1 *pCache;               /* Cache that currently owns this page */pCache44557,1674633
  PgHdr1 *pLruNext;              /* Next in LRU list of unpinned pages */pLruNext44558,1674708
  PgHdr1 *pLruPrev;              /* Previous in LRU list of unpinned pages */pLruPrev44559,1674782
struct PGroup {PGroup44584,1675820
  sqlite3_mutex *mutex;          /* MUTEX_STATIC_LRU or NULL */mutex44585,1675836
  unsigned int nMaxPage;         /* Sum of nMax for purgeable caches */nMaxPage44586,1675900
  unsigned int nMinPage;         /* Sum of nMin for purgeable caches */nMinPage44587,1675972
  unsigned int mxPinned;         /* nMaxpage + 10 - nMinPage */mxPinned44588,1676044
  unsigned int nCurrentPage;     /* Number of purgeable pages allocated */nCurrentPage44589,1676108
  PgHdr1 lru;                    /* The beginning and end of the LRU list */lru44590,1676183
struct PCache1 {PCache144601,1676602
  PGroup *pGroup;                     /* PGroup this cache belongs to */pGroup44607,1676895
  int szPage;                         /* Size of database content section */szPage44608,1676968
  int szExtra;                        /* sizeof(MemPage)+sizeof(PgHdr) */szExtra44609,1677045
  int szAlloc;                        /* Total size of one pcache line */szAlloc44610,1677119
  int bPurgeable;                     /* True if cache is purgeable */bPurgeable44611,1677193
  unsigned int nMin;                  /* Minimum number of pages reserved */nMin44612,1677264
  unsigned int nMax;                  /* Configured "cache_size" value */nMax44613,1677341
  unsigned int n90pct;                /* nMax*9/10 */n90pct44614,1677415
  unsigned int iMaxKey;               /* Largest key seen since xTruncate() */iMaxKey44615,1677469
  unsigned int nRecyclable;           /* Number of pages in the LRU list */nRecyclable44620,1677681
  unsigned int nPage;                 /* Total number of pages in apHash */nPage44621,1677757
  unsigned int nHash;                 /* Number of slots in apHash[] */nHash44622,1677833
  PgHdr1 **apHash;                    /* Hash table for fast lookup by key */apHash44623,1677905
  PgHdr1 *pFree;                      /* List of unused pcache-local pages */pFree44624,1677983
  void *pBulk;                        /* Bulk memory used by pcache-local */pBulk44625,1678061
struct PgFreeslot {PgFreeslot44632,1678283
  PgFreeslot *pNext;  /* Next free slot */pNext44633,1678303
static SQLITE_WSD struct PCacheGlobal {PCacheGlobal44639,1678391
  PGroup grp;                    /* The global PGroup for mode (2) */grp44640,1678431
  int isInit;                    /* True if initialized */isInit44647,1678784
  int separateCache;             /* Use a new PGroup for each PCache */separateCache44648,1678843
  int nInitPage;                 /* Initial bulk allocation size */   nInitPage44649,1678915
  int szSlot;                    /* Size of each free slot */szSlot44650,1678986
  int nSlot;                     /* The number of pcache slots */nSlot44651,1679048
  int nReserve;                  /* Try to keep nFreeSlot above this */nReserve44652,1679114
  void *pStart, *pEnd;           /* Bounds of global page cache memory */pStart44653,1679186
  void *pStart, *pEnd;           /* Bounds of global page cache memory */pEnd44653,1679186
  sqlite3_mutex *mutex;          /* Mutex for accessing the following: */mutex44655,1679336
  PgFreeslot *pFree;             /* Free page blocks */pFree44656,1679410
  int nFreeSlot;                 /* Number of unused pcache slots */nFreeSlot44657,1679466
  int bUnderPressure;            /* True if low on PAGECACHE memory */bUnderPressure44662,1679805
} pcache1_g;pcache1_g44663,1679876
#define pcache1 pcache144670,1680094
# define pcache1EnterMutex(pcache1EnterMutex44676,1680279
# define pcache1LeaveMutex(pcache1LeaveMutex44677,1680332
# define PCACHE1_MIGHT_USE_GROUP_MUTEX PCACHE1_MIGHT_USE_GROUP_MUTEX44678,1680385
# define pcache1EnterMutex(pcache1EnterMutex44680,1680432
# define pcache1LeaveMutex(pcache1LeaveMutex44681,1680494
# define PCACHE1_MIGHT_USE_GROUP_MUTEX PCACHE1_MIGHT_USE_GROUP_MUTEX44682,1680556
SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){sqlite3PCacheBufferSetup44698,1681199
static int pcache1InitBulk(PCache1 *pCache){pcache1InitBulk44723,1681896
static void *pcache1Alloc(int nByte){pcache1Alloc44766,1683264
static void pcache1Free(void *p){pcache1Free44804,1684452
static int pcache1MemSize(void *p){pcache1MemSize44837,1685452
static PgHdr1 *pcache1AllocPage(PCache1 *pCache, int benignMalloc){pcache1AllocPage44854,1685913
static void pcache1FreePage(PgHdr1 *p){pcache1FreePage44904,1687367
SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){sqlite3PageMalloc44928,1687995
SQLITE_PRIVATE void sqlite3PageFree(void *p){sqlite3PageFree44935,1688142
static int pcache1UnderMemoryPressure(PCache1 *pCache){pcache1UnderMemoryPressure44956,1688880
static void pcache1ResizeHash(PCache1 *p){pcache1ResizeHash44973,1689434
static PgHdr1 *pcache1PinPage(PgHdr1 *pPage){pcache1PinPage45014,1690493
static void pcache1RemoveFromHash(PgHdr1 *pPage, int freeFlag){pcache1RemoveFromHash45042,1691278
static void pcache1EnforceMaxPage(PCache1 *pCache){pcache1EnforceMaxPage45060,1691785
static void pcache1TruncateUnsafe(pcache1TruncateUnsafe45085,1692548
static int pcache1Init(void *NotUsed){pcache1Init45136,1694310
static void pcache1Shutdown(void *NotUsed){pcache1Shutdown45189,1695970
static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){pcache1Create45203,1696281
static void pcache1Cachesize(sqlite3_pcache *p, int nMax){pcache1Cachesize45250,1697791
static void pcache1Shrink(sqlite3_pcache *p){pcache1Shrink45269,1698335
static int pcache1Pagecount(sqlite3_pcache *p){pcache1Pagecount45286,1698771
static SQLITE_NOINLINE PgHdr1 *pcache1FetchStage2(pcache1FetchStage245304,1699319
static PgHdr1 *pcache1FetchNoMutex(pcache1FetchNoMutex45432,1703783
static PgHdr1 *pcache1FetchWithMutex(pcache1FetchWithMutex45462,1704692
static sqlite3_pcache_page *pcache1Fetch(pcache1Fetch45477,1705044
static void pcache1Unpin(pcache1Unpin45508,1705898
static void pcache1Rekey(pcache1Rekey45544,1706831
static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){pcache1Truncate45584,1707773
static void pcache1Destroy(sqlite3_pcache *p){pcache1Destroy45599,1708184
SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){sqlite3PCacheSetDefault45622,1709026
SQLITE_PRIVATE int sqlite3HeaderSizePcache1(void){ return ROUND8(sizeof(PgHdr1)); }sqlite3HeaderSizePcache145644,1709847
SQLITE_PRIVATE sqlite3_mutex *sqlite3Pcache1Mutex(void){sqlite3Pcache1Mutex45650,1710062
SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){sqlite3PcacheReleaseMemory45664,1710573
SQLITE_PRIVATE void sqlite3PcacheStats(sqlite3PcacheStats45694,1711400
#define ROWSET_ALLOCATION_SIZE ROWSET_ALLOCATION_SIZE45784,1714907
#define ROWSET_ENTRY_PER_CHUNK ROWSET_ENTRY_PER_CHUNK45789,1715004
struct RowSetEntry {            RowSetEntry45800,1715468
  i64 v;                        /* ROWID value for this entry */v45801,1715501
  struct RowSetEntry *pRight;   /* Right subtree (larger entries) or list */pRight45802,1715566
  struct RowSetEntry *pLeft;    /* Left subtree (smaller entries) */pLeft45803,1715643
struct RowSetChunk {RowSetChunk45812,1715961
  struct RowSetChunk *pNextChunk;        /* Next chunk on list of them all */pNextChunk45813,1715982
  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; /* Allocated entries */aEntry45814,1716060
struct RowSet {RowSet45822,1716261
  struct RowSetChunk *pChunk;    /* List of all chunk allocations */pChunk45823,1716277
  sqlite3 *db;                   /* The database connection */db45824,1716346
  struct RowSetEntry *pEntry;    /* List of entries using pRight */pEntry45825,1716409
  struct RowSetEntry *pLast;     /* Last entry on the pEntry list */pLast45826,1716477
  struct RowSetEntry *pFresh;    /* Source of new entry objects */pFresh45827,1716546
  struct RowSetEntry *pForest;   /* List of binary trees of entries */pForest45828,1716613
  u16 nFresh;                    /* Number of objects on pFresh */nFresh45829,1716684
  u16 rsFlags;                   /* Various flags */rsFlags45830,1716751
  int iBatch;                    /* Current insert batch */iBatch45831,1716804
#define ROWSET_SORTED ROWSET_SORTED45837,1716911
#define ROWSET_NEXT ROWSET_NEXT45838,1716979
SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){sqlite3RowSetInit45852,1717521
SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){sqlite3RowSetClear45873,1718128
static struct RowSetEntry *rowSetEntryAlloc(RowSet *p){rowSetEntryAlloc45895,1718729
SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){sqlite3RowSetInsert45920,1719434
static struct RowSetEntry *rowSetEntryMerge(rowSetEntryMerge45951,1720322
static struct RowSetEntry *rowSetEntrySort(struct RowSetEntry *pIn){rowSetEntrySort45986,1721158
static void rowSetTreeToList(rowSetTreeToList46015,1721957
static struct RowSetEntry *rowSetNDeepTree(rowSetNDeepTree46050,1723094
static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){rowSetListToTree46086,1724236
SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){sqlite3RowSetNext46118,1725209
SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, int iBatch, sqlite3_int64 iRowid){sqlite3RowSetTest46152,1726319
#define SQLITE_WAL_HSQLITE_WAL_H46257,1729996
#define WAL_SYNC_TRANSACTIONS WAL_SYNC_TRANSACTIONS46264,1730143
#define SQLITE_SYNC_MASK SQLITE_SYNC_MASK46265,1730223
# define sqlite3WalOpen(sqlite3WalOpen46268,1730325
# define sqlite3WalLimit(sqlite3WalLimit46269,1730376
# define sqlite3WalClose(sqlite3WalClose46270,1730406
# define sqlite3WalBeginReadTransaction(sqlite3WalBeginReadTransaction46271,1730457
# define sqlite3WalEndReadTransaction(sqlite3WalEndReadTransaction46272,1730508
# define sqlite3WalDbsize(sqlite3WalDbsize46273,1730549
# define sqlite3WalBeginWriteTransaction(sqlite3WalBeginWriteTransaction46274,1730600
# define sqlite3WalEndWriteTransaction(sqlite3WalEndWriteTransaction46275,1730651
# define sqlite3WalUndo(sqlite3WalUndo46276,1730702
# define sqlite3WalSavepoint(sqlite3WalSavepoint46277,1730753
# define sqlite3WalSavepointUndo(sqlite3WalSavepointUndo46278,1730787
# define sqlite3WalFrames(sqlite3WalFrames46279,1730838
# define sqlite3WalCheckpoint(sqlite3WalCheckpoint46280,1730889
# define sqlite3WalCallback(sqlite3WalCallback46281,1730940
# define sqlite3WalExclusiveMode(sqlite3WalExclusiveMode46282,1730991
# define sqlite3WalHeapMemory(sqlite3WalHeapMemory46283,1731042
# define sqlite3WalFramesize(sqlite3WalFramesize46284,1731093
# define sqlite3WalFindFrame(sqlite3WalFindFrame46285,1731144
# define sqlite3WalFile(sqlite3WalFile46286,1731195
#define WAL_SAVEPOINT_NDATA WAL_SAVEPOINT_NDATA46289,1731253
typedef struct Wal Wal;Wal46294,1731388
#define PAGERTRACE(PAGERTRACE46485,1739871
#define PAGERID(PAGERID46496,1740194
#define FILEHANDLEID(FILEHANDLEID46497,1740228
#define PAGER_OPEN PAGER_OPEN46716,1750777
#define PAGER_READER PAGER_READER46717,1750815
#define PAGER_WRITER_LOCKED PAGER_WRITER_LOCKED46718,1750853
#define PAGER_WRITER_CACHEMOD PAGER_WRITER_CACHEMOD46719,1750891
#define PAGER_WRITER_DBMOD PAGER_WRITER_DBMOD46720,1750929
#define PAGER_WRITER_FINISHED PAGER_WRITER_FINISHED46721,1750967
#define PAGER_ERROR PAGER_ERROR46722,1751005
#define UNKNOWN_LOCK UNKNOWN_LOCK46772,1753792
# define CODEC1(CODEC146778,1753933
# define CODEC2(CODEC246780,1754021
# define CODEC1(CODEC146784,1754161
# define CODEC2(CODEC246785,1754202
#define MAX_SECTOR_SIZE MAX_SECTOR_SIZE46794,1754534
typedef struct PagerSavepoint PagerSavepoint;PagerSavepoint46810,1755228
struct PagerSavepoint {PagerSavepoint46811,1755274
  i64 iOffset;                 /* Starting offset in main journal */iOffset46812,1755298
  i64 iHdrOffset;              /* See above */iHdrOffset46813,1755367
  Bitvec *pInSavepoint;        /* Set of pages in this savepoint */pInSavepoint46814,1755414
  Pgno nOrig;                  /* Original number of pages in file */nOrig46815,1755482
  Pgno iSubRec;                /* Index of first record in sub-journal */iSubRec46816,1755552
  u32 aWalData[WAL_SAVEPOINT_NDATA];        /* WAL savepoint context */aWalData46818,1755650
#define SPILLFLAG_OFF SPILLFLAG_OFF46825,1755809
#define SPILLFLAG_ROLLBACK SPILLFLAG_ROLLBACK46826,1755885
#define SPILLFLAG_NOSYNC SPILLFLAG_NOSYNC46827,1755964
struct Pager {Pager46985,1763653
  sqlite3_vfs *pVfs;          /* OS functions to use for IO */pVfs46986,1763668
  u8 exclusiveMode;           /* Boolean. True if locking_mode==EXCLUSIVE */exclusiveMode46987,1763731
  u8 journalMode;             /* One of the PAGER_JOURNALMODE_* values */journalMode46988,1763808
  u8 useJournal;              /* Use a rollback journal on this file */useJournal46989,1763882
  u8 noSync;                  /* Do not sync the journal if true */noSync46990,1763954
  u8 fullSync;                /* Do extra syncs of the journal for robustness */fullSync46991,1764022
  u8 extraSync;               /* sync directory after journal delete */extraSync46992,1764103
  u8 ckptSyncFlags;           /* SYNC_NORMAL or SYNC_FULL for checkpoint */ckptSyncFlags46993,1764175
  u8 walSyncFlags;            /* SYNC_NORMAL or SYNC_FULL for wal writes */walSyncFlags46994,1764251
  u8 syncFlags;               /* SYNC_NORMAL or SYNC_FULL otherwise */syncFlags46995,1764327
  u8 tempFile;                /* zFilename is a temporary or immutable file */tempFile46996,1764398
  u8 noLock;                  /* Do not lock (except in WAL mode) */noLock46997,1764477
  u8 readOnly;                /* True for a read-only database */readOnly46998,1764546
  u8 memDb;                   /* True to inhibit all file I/O */memDb46999,1764612
  u8 eState;                  /* Pager state (OPEN, READER, WRITER_LOCKED..) */eState47010,1765238
  u8 eLock;                   /* Current lock held on database file */eLock47011,1765318
  u8 changeCountDone;         /* Set after incrementing the change-counter */changeCountDone47012,1765389
  u8 setMaster;               /* True if a m-j name has been written to jrnl */setMaster47013,1765467
  u8 doNotSpill;              /* Do not spill the cache when non-zero */doNotSpill47014,1765547
  u8 subjInMemory;            /* True to use in-memory sub-journals */subjInMemory47015,1765620
  u8 bUseFetch;               /* True to use xFetch() */bUseFetch47016,1765691
  u8 hasHeldSharedLock;       /* True if a shared lock has ever been held */hasHeldSharedLock47017,1765748
  Pgno dbSize;                /* Number of pages in the database */dbSize47018,1765825
  Pgno dbOrigSize;            /* dbSize before the current transaction */dbOrigSize47019,1765893
  Pgno dbFileSize;            /* Number of pages in the database file */dbFileSize47020,1765967
  Pgno dbHintSize;            /* Value passed to FCNTL_SIZE_HINT call */dbHintSize47021,1766040
  int errCode;                /* One of several kinds of errors */errCode47022,1766113
  int nRec;                   /* Pages journalled since last j-header written */nRec47023,1766180
  u32 cksumInit;              /* Quasi-random value added to every checksum */cksumInit47024,1766261
  u32 nSubRec;                /* Number of records written to sub-journal */nSubRec47025,1766340
  Bitvec *pInJournal;         /* One bit for each page in the database file */pInJournal47026,1766417
  sqlite3_file *fd;           /* File descriptor for database */fd47027,1766496
  sqlite3_file *jfd;          /* File descriptor for main journal */jfd47028,1766561
  sqlite3_file *sjfd;         /* File descriptor for sub-journal */sjfd47029,1766630
  i64 journalOff;             /* Current write offset in the journal file */journalOff47030,1766698
  i64 journalHdr;             /* Byte offset to previous journal header */journalHdr47031,1766775
  sqlite3_backup *pBackup;    /* Pointer to list of ongoing backup processes */pBackup47032,1766850
  PagerSavepoint *aSavepoint; /* Array of active savepoints */aSavepoint47033,1766930
  int nSavepoint;             /* Number of elements in aSavepoint[] */nSavepoint47034,1766993
  u32 iDataVersion;           /* Changes whenever database content changes */iDataVersion47035,1767064
  char dbFileVers[16];        /* Changes whenever database file changes */dbFileVers47036,1767142
  int nMmapOut;               /* Number of mmap pages currently outstanding */nMmapOut47038,1767218
  sqlite3_int64 szMmap;       /* Desired maximum mmap size */szMmap47039,1767297
  PgHdr *pMmapFreelist;       /* List of free mmap page headers (pDirty) */pMmapFreelist47040,1767359
  u16 nExtra;                 /* Add this many bytes to each in-memory page */nExtra47045,1767569
  i16 nReserve;               /* Number of unused bytes at end of each page */nReserve47046,1767648
  u32 vfsFlags;               /* Flags for sqlite3_vfs.xOpen() */vfsFlags47047,1767727
  u32 sectorSize;             /* Assumed sector size during rollback */sectorSize47048,1767793
  int pageSize;               /* Number of bytes in a page */pageSize47049,1767865
  Pgno mxPgno;                /* Maximum allowed size of the database */mxPgno47050,1767927
  i64 journalSizeLimit;       /* Size limit for persistent journal files */journalSizeLimit47051,1768000
  char *zFilename;            /* Name of the database file */zFilename47052,1768076
  char *zJournal;             /* Name of the journal file */zJournal47053,1768138
  int (*xBusyHandler)(void*); /* Function to call when busy */xBusyHandler47054,1768199
  void *pBusyHandlerArg;      /* Context argument for xBusyHandler */pBusyHandlerArg47055,1768262
  int aStat[3];               /* Total cache hits, misses and writes */aStat47056,1768332
  int nRead;                  /* Database pages read */nRead47058,1768423
  void (*xReiniter)(DbPage*); /* Call this routine when reloading pages */xReiniter47060,1768486
  void *(*xCodec)(void*,void*,Pgno,int); /* Routine for en/decoding data */xCodec47062,1768585
  void (*xCodecSizeChng)(void*,int,int); /* Notify of page size changes */xCodecSizeChng47063,1768661
  void (*xCodecFree)(void*);             /* Destructor for the codec */xCodecFree47064,1768736
  void *pCodec;               /* First argument to xCodec... methods */pCodec47065,1768808
  char *pTmpSpace;            /* Pager.pageSize bytes of space for tmp use */pTmpSpace47067,1768887
  PCache *pPCache;            /* Pointer to page cache object */pPCache47068,1768965
  Wal *pWal;                  /* Write-ahead log used by "journal_mode=wal" */pWal47070,1769054
  char *zWal;                 /* File name for write-ahead log */zWal47071,1769133
#define PAGER_STAT_HIT PAGER_STAT_HIT47080,1769403
#define PAGER_STAT_MISS PAGER_STAT_MISS47081,1769430
#define PAGER_STAT_WRITE PAGER_STAT_WRITE47082,1769457
SQLITE_API int sqlite3_pager_readdb_count = 0;    /* Number of full pages read from DB */sqlite3_pager_readdb_count47090,1769688
SQLITE_API int sqlite3_pager_writedb_count = 0;   /* Number of full pages written to DB */sqlite3_pager_writedb_count47091,1769778
SQLITE_API int sqlite3_pager_writej_count = 0;    /* Number of pages written to journal */sqlite3_pager_writej_count47092,1769869
# define PAGER_INCR(PAGER_INCR47093,1769960
# define PAGER_INCR(PAGER_INCR47095,1769994
static const unsigned char aJournalMagic[] = {aJournalMagic47123,1771328
#define JOURNAL_PG_SZ(JOURNAL_PG_SZ47131,1771525
#define JOURNAL_HDR_SZ(JOURNAL_HDR_SZ47137,1771716
# define MEMDB MEMDB47146,1772061
# define MEMDB MEMDB47148,1772084
# define USEFETCH(USEFETCH47156,1772295
# define USEFETCH(USEFETCH47158,1772339
#define PAGER_MAX_PGNO PAGER_MAX_PGNO47164,1772424
#define isOpen(isOpen47178,1772753
SQLITE_PRIVATE int sqlite3PagerUseWal(Pager *pPager){sqlite3PagerUseWal47185,1772936
# define pagerUseWal(pagerUseWal47188,1773020
# define pagerUseWal(pagerUseWal47190,1773072
# define pagerRollbackWal(pagerRollbackWal47191,1773098
# define pagerWalFrames(pagerWalFrames47192,1773129
# define pagerOpenWalIfPresent(pagerOpenWalIfPresent47193,1773164
# define pagerBeginReadTransaction(pagerBeginReadTransaction47194,1773208
static int assert_pager_state(Pager *p){assert_pager_state47206,1773457
static char *print_pager_state(Pager *p){print_pager_state47345,1778359
static int subjRequiresPage(PgHdr *pPg){subjRequiresPage47396,1780526
static int pageInJournal(Pager *pPager, PgHdr *pPg){pageInJournal47414,1780930
static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){read32bits47426,1781296
#define put32bits(put32bits47438,1781592
static int write32bits(sqlite3_file *fd, i64 offset, u32 val){write32bits47445,1781782
static int pagerUnlockDb(Pager *pPager, int eLock){pagerUnlockDb47460,1782339
static int pagerLockDb(Pager *pPager, int eLock){pagerLockDb47487,1783304
static int jrnlBufferSize(Pager *pPager){jrnlBufferSize47519,1784524
# define jrnlBufferSize(jrnlBufferSize47541,1785201
static u32 pager_datahash(int nByte, unsigned char *pData){pager_datahash47553,1785484
static u32 pager_pagehash(PgHdr *pPage){pager_pagehash47561,1785651
static void pager_set_pagehash(PgHdr *pPage){pager_set_pagehash47564,1785775
#define CHECK_PAGE(CHECK_PAGE47573,1786097
static void checkPage(PgHdr *pPg){checkPage47574,1786132
#define pager_datahash(pager_datahash47581,1786324
#define pager_pagehash(pager_pagehash47582,1786355
#define pager_set_pagehash(pager_set_pagehash47583,1786384
#define CHECK_PAGE(CHECK_PAGE47584,1786414
static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){readMasterJournal47612,1787680
static i64 journalHdrOffset(Pager *pPager){journalHdrOffset47666,1789486
static int zeroJournalHdr(Pager *pPager, int doTruncate){zeroJournalHdr47699,1790800
static int writeJournalHdr(Pager *pPager){writeJournalHdr47749,1792681
static int readJournalHdr(readJournalHdr47867,1798009
static int writeMasterJournal(Pager *pPager, const char *zMaster){writeMasterJournal47992,1802971
static void pager_reset(Pager *pPager){pager_reset48060,1805461
SQLITE_PRIVATE u32 sqlite3PagerDataVersion(Pager *pPager){sqlite3PagerDataVersion48069,1805657
static void releaseAllSavepoints(Pager *pPager){releaseAllSavepoints48079,1805992
static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){addToSavepointBitvecs48098,1806634
static void pager_unlock(Pager *pPager){pager_unlock48130,1807874
static int pager_error(Pager *pPager, int rc){pager_error48227,1811685
static int pagerFlushOnCommit(Pager *pPager, int bCommit){pagerFlushOnCommit48260,1812673
static int pager_end_transaction(Pager *pPager, int hasMaster, int bCommit){pager_end_transaction48320,1815376
static void pagerUnlockAndRollback(Pager *pPager){pagerUnlockAndRollback48466,1821233
static u32 pager_cksum(Pager *pPager, const u8 *aData){pager_cksum48500,1822651
static void pagerReportSize(Pager *pPager){pagerReportSize48515,1823028
# define pagerReportSize(pagerReportSize48522,1823228
SQLITE_PRIVATE void sqlite3PagerAlignReserve(Pager *pDest, Pager *pSrc){sqlite3PagerAlignReserve48531,1823537
static int pager_playback_one_page(pager_playback_one_page48576,1825509
static int pager_delmaster(Pager *pPager, const char *zMaster){pager_delmaster48821,1836482
static int pager_truncate(Pager *pPager, Pgno nPage){pager_truncate48931,1840702
SQLITE_PRIVATE int sqlite3SectorSize(sqlite3_file *pFile){sqlite3SectorSize48967,1841908
static void setSectorSize(Pager *pPager){setSectorSize49001,1843350
static int pager_playback(Pager *pPager, int isHot){pager_playback49074,1846707
static int readDbPage(PgHdr *pPg, u32 iFrame){readDbPage49282,1854807
static void pager_write_changecounter(PgHdr *pPg){pager_write_changecounter49344,1857155
static int pagerUndoCallback(void *pCtx, Pgno iPg){pagerUndoCallback49371,1858317
static int pagerRollbackWal(Pager *pPager){pagerRollbackWal49410,1859499
static int pagerWalFrames(pagerWalFrames49442,1860686
static int pagerBeginReadTransaction(Pager *pPager){pagerBeginReadTransaction49509,1862770
static int pagerPagecount(Pager *pPager, Pgno *pnPage){pagerPagecount49542,1863985
static int pagerOpenWalIfPresent(Pager *pPager){pagerOpenWalIfPresent49602,1866308
static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){pagerPlaybackSavepoint49671,1869018
SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){sqlite3PagerSetCachesize49783,1873145
SQLITE_PRIVATE int sqlite3PagerSetSpillsize(Pager *pPager, int mxPage){sqlite3PagerSetSpillsize49791,1873394
static void pagerFixMaplimit(Pager *pPager){pagerFixMaplimit49798,1873607
SQLITE_PRIVATE void sqlite3PagerSetMmapLimit(Pager *pPager, sqlite3_int64 szMmap){sqlite3PagerSetMmapLimit49813,1874007
SQLITE_PRIVATE void sqlite3PagerShrink(Pager *pPager){sqlite3PagerShrink49821,1874205
SQLITE_PRIVATE void sqlite3PagerSetFlags(sqlite3PagerSetFlags49877,1877011
SQLITE_API int sqlite3_opentemp_count = 0;sqlite3_opentemp_count49922,1878423
static int pagerOpentemp(pagerOpentemp49940,1878938
SQLITE_PRIVATE void sqlite3PagerSetBusyhandler(sqlite3PagerSetBusyhandler49979,1880439
SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){sqlite3PagerSetPagesize50025,1882371
SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){sqlite3PagerTempSpace50088,1884508
SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){sqlite3PagerMaxPageCount50099,1884879
static int saved_cnt;saved_cnt50119,1885585
void disable_simulated_io_errors(void){disable_simulated_io_errors50120,1885607
void enable_simulated_io_errors(void){enable_simulated_io_errors50124,1885722
# define disable_simulated_io_errors(disable_simulated_io_errors50128,1885809
# define enable_simulated_io_errors(enable_simulated_io_errors50129,1885848
SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){sqlite3PagerReadFileheader50146,1886512
SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){sqlite3PagerPagecount50174,1887371
static int pager_wait_on_lock(Pager *pPager, int locktype){pager_wait_on_lock50195,1888178
static void assertTruncateConstraintCb(PgHdr *pPg){assertTruncateConstraintCb50237,1890006
static void assertTruncateConstraint(Pager *pPager){assertTruncateConstraint50241,1890166
# define assertTruncateConstraint(assertTruncateConstraint50245,1890301
SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){sqlite3PagerTruncateImage50259,1890884
static int pagerSyncHotJournal(Pager *pPager){pagerSyncHotJournal50290,1892276
static int pagerAcquireMapPage(pagerAcquireMapPage50311,1892957
static void pagerReleaseMapPage(PgHdr *pPg){pagerReleaseMapPage50353,1894155
static void pagerFreeMapHdrs(Pager *pPager){pagerFreeMapHdrs50366,1894527
SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager){sqlite3PagerClose50390,1895301
SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){sqlite3PagerPagenumber50447,1897198
SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){sqlite3PagerRef50455,1897338
static int syncJournal(Pager *pPager, int newHdr){syncJournal50494,1898861
static int pager_write_pagelist(Pager *pPager, PgHdr *pList){pager_write_pagelist50637,1905076
static int openSubJournal(Pager *pPager){openSubJournal50729,1908540
static int subjournalPage(PgHdr *pPg){subjournalPage50755,1909469
static int subjournalPageIfRequired(PgHdr *pPg){subjournalPageIfRequired50792,1910739
static int pagerStress(void *p, PgHdr *pPg){pagerStress50819,1911828
SQLITE_PRIVATE int sqlite3PagerFlush(Pager *pPager){sqlite3PagerFlush50888,1914133
SQLITE_PRIVATE int sqlite3PagerOpen(sqlite3PagerOpen50935,1915982
static int databaseIsUnmoved(Pager *pPager){databaseIsUnmoved51228,1927404
static int hasHotJournal(Pager *pPager, int *pExists){hasHotJournal51279,1929652
SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){sqlite3PagerSharedLock51399,1934995
static void pagerUnlockIfUnused(Pager *pPager){pagerUnlockIfUnused51621,1943908
SQLITE_PRIVATE int sqlite3PagerGet(sqlite3PagerGet51677,1946618
SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){sqlite3PagerLookup51860,1952682
SQLITE_PRIVATE void sqlite3PagerUnrefNotNull(DbPage *pPg){sqlite3PagerUnrefNotNull51879,1953310
SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){sqlite3PagerUnref51890,1953570
static int pager_open_journal(Pager *pPager){pager_open_journal51916,1954689
SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){sqlite3PagerBegin52005,1957823
static SQLITE_NOINLINE int pagerAddPageToRollbackJournal(PgHdr *pPg){pagerAddPageToRollbackJournal52074,1960433
static int pager_write(PgHdr *pPg){pager_write52131,1962657
static SQLITE_NOINLINE int pagerWriteLargeSector(PgHdr *pPg){pagerWriteLargeSector52223,1966088
SQLITE_PRIVATE int sqlite3PagerWrite(PgHdr *pPg){sqlite3PagerWrite52317,1969505
SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){sqlite3PagerIswriteable52341,1970312
SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){sqlite3PagerDontWrite52366,1971330
static int pager_incr_changecounter(Pager *pPager, int isDirectMode){pager_incr_changecounter52400,1972866
# define DIRECT_MODE DIRECT_MODE52419,1973628
SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager, const char *zMaster){sqlite3PagerSync52483,1975856
SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){sqlite3PagerExclusiveLock52509,1976784
SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne(sqlite3PagerCommitPhaseOne52551,1978402
SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){sqlite3PagerCommitPhaseTwo52728,1985988
SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){sqlite3PagerRollback52794,1988775
SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){sqlite3PagerIsreadonly52843,1990616
SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){sqlite3PagerRefcount52851,1990801
SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){sqlite3PagerMemUsed52860,1991031
SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){sqlite3PagerPageRefcount52871,1991410
SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){sqlite3PagerStats52879,1991596
SQLITE_PRIVATE void sqlite3PagerCacheStat(Pager *pPager, int eStat, int reset, int *pnVal){sqlite3PagerCacheStat52903,1992468
SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){sqlite3PagerIsMemdb52923,1993129
static SQLITE_NOINLINE int pagerOpenSavepoint(Pager *pPager, int nSavepoint){pagerOpenSavepoint52937,1993673
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){sqlite3PagerOpenSavepoint52982,1995386
SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){sqlite3PagerSavepoint53024,1997220
SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){sqlite3PagerFilename53099,2000103
SQLITE_PRIVATE sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){sqlite3PagerVfs53106,2000302
SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){sqlite3PagerFile53115,2000536
SQLITE_PRIVATE sqlite3_file *sqlite3PagerJrnlFile(Pager *pPager){sqlite3PagerJrnlFile53123,2000752
SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){sqlite3PagerJournalname53134,2000999
SQLITE_PRIVATE void sqlite3PagerSetCodec(sqlite3PagerSetCodec53142,2001170
SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){sqlite3PagerGetCodec53156,2001602
SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){sqlite3PagerCodec53167,2001929
SQLITE_PRIVATE int sqlite3PagerState(Pager *pPager){sqlite3PagerState53176,2002125
SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){sqlite3PagerMovepage53207,2003471
SQLITE_PRIVATE void sqlite3PagerRekey(DbPage *pPg, Pgno iNew, u16 flags){sqlite3PagerRekey53341,2008556
SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){sqlite3PagerGetData53350,2008778
SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){sqlite3PagerGetExtra53359,2009018
SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){sqlite3PagerLockingMode53373,2009511
SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){sqlite3PagerSetJournalMode53406,2010704
SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){sqlite3PagerGetJournalMode53504,2014100
SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){sqlite3PagerOkToChangeJournalMode53513,2014366
SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){sqlite3PagerJournalSizeLimit53526,2014802
SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){sqlite3PagerBackupPtr53540,2015262
SQLITE_PRIVATE void sqlite3PagerClearCache(Pager *pPager){sqlite3PagerClearCache53548,2015472
SQLITE_PRIVATE int sqlite3PagerCheckpoint(Pager *pPager, int eMode, int *pnLog, int *pnCkpt){sqlite3PagerCheckpoint53563,2015934
SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){sqlite3PagerWalCallback53576,2016350
SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){sqlite3PagerWalSupported53584,2016580
static int pagerExclusiveLock(Pager *pPager){pagerExclusiveLock53594,2016948
static int pagerOpenWal(Pager *pPager){pagerOpenWal53614,2017648
SQLITE_PRIVATE int sqlite3PagerOpenWal(sqlite3PagerOpenWal53659,2019184
SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager){sqlite3PagerCloseWal53698,2020457
SQLITE_PRIVATE int sqlite3PagerSnapshotGet(Pager *pPager, sqlite3_snapshot **ppSnapshot){sqlite3PagerSnapshotGet53741,2021810
SQLITE_PRIVATE int sqlite3PagerSnapshotOpen(Pager *pPager, sqlite3_snapshot *pSnapshot){sqlite3PagerSnapshotOpen53754,2022235
SQLITE_PRIVATE int sqlite3PagerWalFramesize(Pager *pPager){sqlite3PagerWalFramesize53774,2022891
SQLITE_PRIVATE int sqlite3WalTrace = 0;sqlite3WalTrace54034,2035829
# define WALTRACE(WALTRACE54035,2035869
# define WALTRACE(WALTRACE54037,2035938
#define WAL_MAX_VERSION WAL_MAX_VERSION54053,2036567
#define WALINDEX_MAX_VERSION WALINDEX_MAX_VERSION54054,2036604
#define WAL_WRITE_LOCK WAL_WRITE_LOCK54061,2036828
#define WAL_ALL_BUT_WRITE WAL_ALL_BUT_WRITE54062,2036861
#define WAL_CKPT_LOCK WAL_CKPT_LOCK54063,2036894
#define WAL_RECOVER_LOCK WAL_RECOVER_LOCK54064,2036927
#define WAL_READ_LOCK(WAL_READ_LOCK54065,2036960
#define WAL_NREADER WAL_NREADER54066,2036999
typedef struct WalIndexHdr WalIndexHdr;WalIndexHdr54070,2037079
typedef struct WalIterator WalIterator;WalIterator54071,2037119
typedef struct WalCkptInfo WalCkptInfo;WalCkptInfo54072,2037159
struct WalIndexHdr {WalIndexHdr54088,2037789
  u32 iVersion;                   /* Wal-index version */iVersion54089,2037810
  u32 unused;                     /* Unused (padding) field */unused54090,2037868
  u32 iChange;                    /* Counter incremented each transaction */iChange54091,2037931
  u8 isInit;                      /* 1 when initialized */isInit54092,2038008
  u8 bigEndCksum;                 /* True if checksums in WAL are big-endian */bigEndCksum54093,2038067
  u16 szPage;                     /* Database page size in bytes. 1==64K */szPage54094,2038147
  u32 mxFrame;                    /* Index of last valid frame in the WAL */mxFrame54095,2038223
  u32 nPage;                      /* Size of database in pages */nPage54096,2038300
  u32 aFrameCksum[2];             /* Checksum of last frame in log */aFrameCksum54097,2038366
  u32 aSalt[2];                   /* Two salt values copied from WAL header */aSalt54098,2038436
  u32 aCksum[2];                  /* Checksum over all prior fields */aCksum54099,2038515
struct WalCkptInfo {WalCkptInfo54161,2041900
  u32 nBackfill;                  /* Number of WAL frames backfilled into DB */nBackfill54162,2041921
  u32 aReadMark[WAL_NREADER];     /* Reader marks */aReadMark54163,2042001
  u8 aLock[SQLITE_SHM_NLOCK];     /* Reserved space for locks */aLock54164,2042054
  u32 nBackfillAttempted;         /* WAL frames perhaps written, or maybe not */nBackfillAttempted54165,2042119
  u32 notUsed0;                   /* Available for future enhancements */notUsed054166,2042200
#define READMARK_NOT_USED READMARK_NOT_USED54168,2042277
#define WALINDEX_LOCK_OFFSET WALINDEX_LOCK_OFFSET54176,2042568
#define WALINDEX_HDR_SIZE WALINDEX_HDR_SIZE54177,2042649
#define WAL_FRAME_HDRSIZE WAL_FRAME_HDRSIZE54180,2042769
#define WAL_HDRSIZE WAL_HDRSIZE54184,2042886
#define WAL_MAGIC WAL_MAGIC54195,2043368
#define walFrameOffset(walFrameOffset54202,2043597
struct Wal {Wal54210,2043842
  sqlite3_vfs *pVfs;         /* The VFS used to create pDbFd */pVfs54211,2043855
  sqlite3_file *pDbFd;       /* File handle for the database file */pDbFd54212,2043919
  sqlite3_file *pWalFd;      /* File handle for WAL file */pWalFd54213,2043988
  u32 iCallback;             /* Value to pass to log callback (or 0) */iCallback54214,2044048
  i64 mxWalSize;             /* Truncate WAL to this size upon reset */mxWalSize54215,2044120
  int nWiData;               /* Size of array apWiData */nWiData54216,2044192
  int szFirstBlock;          /* Size of first block written to WAL file */szFirstBlock54217,2044250
  volatile u32 **apWiData;   /* Pointer to wal-index content in memory */apWiData54218,2044325
  u32 szPage;                /* Database page size */szPage54219,2044399
  i16 readLock;              /* Which read lock is being held.  -1 for none */readLock54220,2044453
  u8 syncFlags;              /* Flags to use to sync header writes */syncFlags54221,2044532
  u8 exclusiveMode;          /* Non-zero if connection is in exclusive mode */exclusiveMode54222,2044602
  u8 writeLock;              /* True if in a write transaction */writeLock54223,2044681
  u8 ckptLock;               /* True if holding a checkpoint lock */ckptLock54224,2044747
  u8 readOnly;               /* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY */readOnly54225,2044816
  u8 truncateOnCommit;       /* True to truncate WAL file on commit */truncateOnCommit54226,2044891
  u8 syncHeader;             /* Fsync the WAL header if true */syncHeader54227,2044962
  u8 padToSectorBoundary;    /* Pad transactions out to the next sector */padToSectorBoundary54228,2045026
  WalIndexHdr hdr;           /* Wal-index header for current transaction */hdr54229,2045101
  u32 minFrame;              /* Ignore wal frames before this one */minFrame54230,2045177
  u32 iReCksum;              /* On commit, recalculate checksums from here */iReCksum54231,2045246
  const char *zWalName;      /* Name of WAL file */zWalName54232,2045324
  u32 nCkpt;                 /* Checkpoint sequence counter in the wal-header */nCkpt54233,2045376
  u8 lockError;              /* True if a locking error has occurred */lockError54235,2045477
  WalIndexHdr *pSnapshot;    /* Start transaction here if not NULL */pSnapshot54238,2045586
#define WAL_NORMAL_MODE WAL_NORMAL_MODE54245,2045716
#define WAL_EXCLUSIVE_MODE WAL_EXCLUSIVE_MODE54246,2045746
#define WAL_HEAPMEMORY_MODE WAL_HEAPMEMORY_MODE54247,2045781
#define WAL_RDWR WAL_RDWR54252,2045854
#define WAL_RDONLY WAL_RDONLY54253,2045918
#define WAL_SHM_RDONLY WAL_SHM_RDONLY54254,2045978
typedef u16 ht_slot;ht_slot54260,2046179
struct WalIterator {WalIterator54277,2046795
  int iPrior;                     /* Last result returned from the iterator */iPrior54278,2046816
  int nSegment;                   /* Number of entries in aSegment[] */nSegment54279,2046895
  struct WalSegment {WalSegment54280,2046967
    int iNext;                    /* Next slot in aIndex[] not yet returned */iNext54281,2046989
    ht_slot *aIndex;              /* i0, i1, i2... such that aPgno[iN] ascend */aIndex54282,2047068
    u32 *aPgno;                   /* Array of page numbers. */aPgno54283,2047149
    int nEntry;                   /* Nr. of entries in aPgno[] and aIndex[] */nEntry54284,2047212
    int iZero;                    /* Frame number associated with aPgno[0] */iZero54285,2047291
  } aSegment[1];                  /* One for every 32KB page in the wal-index */aSegment54286,2047369
#define HASHTABLE_NPAGE HASHTABLE_NPAGE54297,2047721
#define HASHTABLE_HASH_1 HASHTABLE_HASH_154298,2047796
#define HASHTABLE_NSLOT HASHTABLE_NSLOT54299,2047868
#define HASHTABLE_NPAGE_ONE HASHTABLE_NPAGE_ONE54306,2048154
#define WALINDEX_PGSZ WALINDEX_PGSZ54309,2048307
static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){walIndexPage54322,2048834
static volatile WalCkptInfo *walCkptInfo(Wal *pWal){walCkptInfo54364,2050116
static volatile WalIndexHdr *walIndexHdr(Wal *pWal){walIndexHdr54372,2050372
#define BYTESWAP32(BYTESWAP3254384,2050871
static void walChecksumBytes(walChecksumBytes54398,2051297
static void walShmBarrier(Wal *pWal){walShmBarrier54436,2052141
static void walIndexWriteHdr(Wal *pWal){walIndexWriteHdr54447,2052410
static void walEncodeFrame(walEncodeFrame54473,2053374
static int walDecodeFrame(walDecodeFrame54504,2054588
static const char *walLockName(int lockIdx){walLockName54559,2056425
static int walLockShared(Wal *pWal, int lockIdx){walLockShared54583,2057155
static void walUnlockShared(Wal *pWal, int lockIdx){walUnlockShared54593,2057568
static int walLockExclusive(Wal *pWal, int lockIdx, int n){walLockExclusive54599,2057846
static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){walUnlockExclusive54609,2058285
static int walHash(u32 iPage){walHash54622,2058815
static int walNextHash(int iPriorHash){walNextHash54627,2058982
static int walHashGet(walHashGet54645,2059675
static int walFramePage(u32 iFrame){walFramePage54683,2060834
static u32 walFramePgno(Wal *pWal, u32 iFrame){walFramePgno54697,2061360
static void walCleanupHash(Wal *pWal){walCleanupHash54717,2062067
static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){walIndexAppend54779,2064293
static int walIndexRecover(Wal *pWal){walIndexRecover54868,2067491
static void walIndexClose(Wal *pWal, int isDelete){walIndexClose55035,2073416
SQLITE_PRIVATE int sqlite3WalOpen(sqlite3WalOpen55062,2074460
SQLITE_PRIVATE void sqlite3WalLimit(Wal *pWal, i64 iLimit){sqlite3WalLimit55136,2077023
static int walIteratorNext(walIteratorNext55150,2077548
static void walMerge(walMerge55203,2079454
static void walMergesort(walMergesort55260,2081292
static void walIteratorFree(WalIterator *p){walIteratorFree55323,2083315
static int walIteratorInit(Wal *pWal, WalIterator **pp){walIteratorInit55339,2083866
static int walBusyLock(walBusyLock55421,2086537
static int walPagesize(Wal *pWal){walPagesize55439,2087163
static void walRestartHdr(Wal *pWal, u32 salt1){walRestartHdr55460,2087981
static int walCheckpoint(walCheckpoint55507,2090066
static void walLimitSize(Wal *pWal, i64 nMax){walLimitSize55688,2097367
SQLITE_PRIVATE int sqlite3WalClose(sqlite3WalClose55705,2097756
static int walIndexTryHdr(Wal *pWal, int *pChanged){walIndexTryHdr55784,2100824
static int walIndexReadHdr(Wal *pWal, int *pChanged){walIndexReadHdr55842,2103025
#define WAL_RETRY WAL_RETRY55907,2105347
static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){walTryBeginRead55959,2108338
SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){sqlite3WalBeginReadTransaction56172,2117461
SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){sqlite3WalEndReadTransaction56258,2120876
SQLITE_PRIVATE int sqlite3WalFindFrame(sqlite3WalFindFrame56274,2121409
SQLITE_PRIVATE int sqlite3WalReadFrame(sqlite3WalReadFrame56376,2125387
SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){sqlite3WalDbsize56396,2126089
SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){sqlite3WalBeginWriteTransaction56417,2126744
SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){sqlite3WalEndWriteTransaction56455,2127745
SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){sqlite3WalUndo56477,2128494
SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){sqlite3WalSavepoint56517,2130110
SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){sqlite3WalSavepointUndo56531,2130609
static int walRestartLog(Wal *pWal){walRestartLog56568,2131891
typedef struct WalWriter {WalWriter56615,2133562
  Wal *pWal;                   /* The complete WAL information */pWal56616,2133589
  sqlite3_file *pFd;           /* The WAL file to which we write */pFd56617,2133655
  sqlite3_int64 iSyncPoint;    /* Fsync at this offset */iSyncPoint56618,2133723
  int syncFlags;               /* Flags for the fsync */syncFlags56619,2133781
  int szPage;                  /* Size of one page */szPage56620,2133838
} WalWriter;WalWriter56621,2133892
static int walWriteToLog(walWriteToLog56631,2134192
static int walWriteOneFrame(walWriteOneFrame56656,2135055
static int walRewriteChecksums(Wal *pWal, u32 iLast){walRewriteChecksums56686,2136324
SQLITE_PRIVATE int sqlite3WalFrames(sqlite3WalFrames56735,2138195
SQLITE_PRIVATE int sqlite3WalCheckpoint(sqlite3WalCheckpoint56975,2147145
SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){sqlite3WalCallback57084,2151333
SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){sqlite3WalExclusiveMode57117,2152660
SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){sqlite3WalHeapMemory57159,2154056
SQLITE_PRIVATE int sqlite3WalSnapshotGet(Wal *pWal, sqlite3_snapshot **ppSnapshot){sqlite3WalSnapshotGet57168,2154363
SQLITE_PRIVATE void sqlite3WalSnapshotOpen(Wal *pWal, sqlite3_snapshot *pSnapshot){sqlite3WalSnapshotOpen57187,2154843
SQLITE_API int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2){sqlite3_snapshot_cmp57195,2155120
SQLITE_PRIVATE int sqlite3WalFramesize(Wal *pWal){sqlite3WalFramesize57215,2155893
SQLITE_PRIVATE sqlite3_file *sqlite3WalFile(Wal *pWal){sqlite3WalFile57223,2156086
#define MX_CELL_SIZE(MX_CELL_SIZE57471,2167527
#define MX_CELL(MX_CELL57478,2167847
typedef struct MemPage MemPage;MemPage57481,2167918
typedef struct BtLock BtLock;BtLock57482,2167950
typedef struct CellInfo CellInfo;CellInfo57483,2167980
#  define SQLITE_FILE_HEADER SQLITE_FILE_HEADER57498,2168672
#define PTF_INTKEY PTF_INTKEY57505,2168855
#define PTF_ZERODATA PTF_ZERODATA57506,2168882
#define PTF_LEAFDATA PTF_LEAFDATA57507,2168909
#define PTF_LEAF PTF_LEAF57508,2168936
struct MemPage {MemPage57523,2169571
  u8 isInit;           /* True if previously initialized. MUST BE FIRST! */isInit57524,2169588
  u8 nOverflow;        /* Number of overflow cell bodies in aCell[] */nOverflow57525,2169664
  u8 intKey;           /* True if table b-trees.  False for index b-trees */intKey57526,2169735
  u8 intKeyLeaf;       /* True if the leaf of an intKey table */intKeyLeaf57527,2169812
  u8 leaf;             /* True if a leaf page */leaf57528,2169877
  u8 hdrOffset;        /* 100 for page 1.  0 otherwise */hdrOffset57529,2169926
  u8 childPtrSize;     /* 0 if leaf==1.  4 if leaf==0 */childPtrSize57530,2169984
  u8 max1bytePayload;  /* min(maxLocal,127) */max1bytePayload57531,2170041
  u8 bBusy;            /* Prevent endless loops on corrupt database files */bBusy57532,2170088
  u16 maxLocal;        /* Copy of BtShared.maxLocal or BtShared.maxLeaf */maxLocal57533,2170165
  u16 minLocal;        /* Copy of BtShared.minLocal or BtShared.minLeaf */minLocal57534,2170240
  u16 cellOffset;      /* Index in aData of first cell pointer */cellOffset57535,2170315
  u16 nFree;           /* Number of free bytes on the page */nFree57536,2170381
  u16 nCell;           /* Number of cells on this page, local and ovfl */nCell57537,2170443
  u16 maskPage;        /* Mask for page offset */maskPage57538,2170517
  u16 aiOvfl[5];       /* Insert the i-th overflow cell before the aiOvfl-thaiOvfl57539,2170567
  u8 *apOvfl[5];       /* Pointers to the body of overflow cells */apOvfl57541,2170691
  BtShared *pBt;       /* Pointer to BtShared that this page is part of */pBt57542,2170759
  u8 *aData;           /* Pointer to disk image of the page data */aData57543,2170834
  u8 *aDataEnd;        /* One byte past the end of usable data */aDataEnd57544,2170902
  u8 *aCellIdx;        /* The cell index area */aCellIdx57545,2170968
  u8 *aDataOfst;       /* Same as aData for leaves.  aData+4 for interior */aDataOfst57546,2171017
  DbPage *pDbPage;     /* Pager page handle */pDbPage57547,2171094
  u16 (*xCellSize)(MemPage*,u8*);             /* cellSizePtr method */xCellSize57548,2171141
  void (*xParseCell)(MemPage*,u8*,CellInfo*); /* btreeParseCell method */xParseCell57549,2171212
  Pgno pgno;           /* Page number for this page */pgno57550,2171286
#define EXTRA_SIZE EXTRA_SIZE57558,2171529
struct BtLock {BtLock57567,2171901
  Btree *pBtree;        /* Btree handle holding this lock */pBtree57568,2171917
  Pgno iTable;          /* Root page of table */iTable57569,2171978
  u8 eLock;             /* READ_LOCK or WRITE_LOCK */eLock57570,2172027
  BtLock *pNext;        /* Next in BtShared.pLock list */pNext57571,2172081
#define READ_LOCK READ_LOCK57575,2172183
#define WRITE_LOCK WRITE_LOCK57576,2172207
struct Btree {Btree57599,2173267
  sqlite3 *db;       /* The database connection holding this btree */db57600,2173282
  BtShared *pBt;     /* Sharable content of this btree */pBt57601,2173352
  u8 inTrans;        /* TRANS_NONE, TRANS_READ or TRANS_WRITE */inTrans57602,2173410
  u8 sharable;       /* True if we can share pBt with another db */sharable57603,2173475
  u8 locked;         /* True if db currently has pBt locked */locked57604,2173543
  u8 hasIncrblobCur; /* True if there are one or more Incrblob cursors */hasIncrblobCur57605,2173606
  int wantToLock;    /* Number of nested calls to sqlite3BtreeEnter() */wantToLock57606,2173680
  int nBackup;       /* Number of backup operations reading this btree */nBackup57607,2173753
  u32 iDataVersion;  /* Combines with pBt->pPager->iDataVersion */iDataVersion57608,2173827
  Btree *pNext;      /* List of other sharable Btrees from the same db */pNext57609,2173894
  Btree *pPrev;      /* Back pointer of the same list */pPrev57610,2173968
  BtLock lock;       /* Object used to lock page 1 */lock57612,2174058
#define TRANS_NONE TRANS_NONE57623,2174390
#define TRANS_READ TRANS_READ57624,2174412
#define TRANS_WRITE TRANS_WRITE57625,2174434
struct BtShared {BtShared57662,2175936
  Pager *pPager;        /* The page cache */pPager57663,2175954
  sqlite3 *db;          /* Database connection currently using this Btree */db57664,2175999
  BtCursor *pCursor;    /* A list of all open cursors */pCursor57665,2176076
  MemPage *pPage1;      /* First page of the database */pPage157666,2176133
  u8 openFlags;         /* Flags to sqlite3BtreeOpen() */openFlags57667,2176190
  u8 autoVacuum;        /* True if auto-vacuum is enabled */autoVacuum57669,2176279
  u8 incrVacuum;        /* True if incr-vacuum is enabled */incrVacuum57670,2176340
  u8 bDoTruncate;       /* True to truncate db on commit */bDoTruncate57671,2176401
  u8 inTransaction;     /* Transaction state */inTransaction57673,2176468
  u8 max1bytePayload;   /* Maximum first byte of cell for a 1-byte payload */max1bytePayload57674,2176516
  u8 optimalReserve;    /* Desired amount of reserved space per page */optimalReserve57676,2176618
  u16 btsFlags;         /* Boolean parameters.  See BTS_* macros below */btsFlags57678,2176697
  u16 maxLocal;         /* Maximum local payload in non-LEAFDATA tables */maxLocal57679,2176771
  u16 minLocal;         /* Minimum local payload in non-LEAFDATA tables */minLocal57680,2176846
  u16 maxLeaf;          /* Maximum local payload in a LEAFDATA table */maxLeaf57681,2176921
  u16 minLeaf;          /* Minimum local payload in a LEAFDATA table */minLeaf57682,2176993
  u32 pageSize;         /* Total number of bytes on a page */pageSize57683,2177065
  u32 usableSize;       /* Number of usable bytes on each page */usableSize57684,2177127
  int nTransaction;     /* Number of open transactions (read + write) */nTransaction57685,2177193
  u32 nPage;            /* Number of pages in the database */nPage57686,2177266
  void *pSchema;        /* Pointer to space allocated by sqlite3BtreeSchema() */pSchema57687,2177328
  void (*xFreeSchema)(void*);  /* Destructor for BtShared.pSchema */xFreeSchema57688,2177409
  sqlite3_mutex *mutex; /* Non-recursive mutex required to access this object */mutex57689,2177478
  Bitvec *pHasContent;  /* Set of pages moved to free-list this transaction */pHasContent57690,2177559
  int nRef;             /* Number of references to this structure */nRef57692,2177671
  BtShared *pNext;      /* Next on a list of sharable BtShared structs */pNext57693,2177740
  BtLock *pLock;        /* List of locks held on this shared-btree struct */pLock57694,2177814
  Btree *pWriter;       /* Btree with currently open write transaction */pWriter57695,2177891
  u8 *pTmpSpace;        /* Temp space sufficient to hold a single cell */pTmpSpace57697,2177972
#define BTS_READ_ONLY BTS_READ_ONLY57703,2178096
#define BTS_PAGESIZE_FIXED BTS_PAGESIZE_FIXED57704,2178168
#define BTS_SECURE_DELETE BTS_SECURE_DELETE57705,2178247
#define BTS_INITIALLY_EMPTY BTS_INITIALLY_EMPTY57706,2178323
#define BTS_NO_WAL BTS_NO_WAL57707,2178401
#define BTS_EXCLUSIVE BTS_EXCLUSIVE57708,2178479
#define BTS_PENDING BTS_PENDING57709,2178553
struct CellInfo {CellInfo57716,2178832
  i64 nKey;      /* The key for INTKEY tables, or nPayload otherwise */nKey57717,2178850
  u8 *pPayload;  /* Pointer to the start of payload */pPayload57718,2178922
  u32 nPayload;  /* Bytes of payload */nPayload57719,2178977
  u16 nLocal;    /* Amount of payload held locally, not on overflow */nLocal57720,2179017
  u16 nSize;     /* Size of the cell content on the main b-tree page */nSize57721,2179088
#define BTCURSOR_MAX_DEPTH BTCURSOR_MAX_DEPTH57733,2179542
struct BtCursor {BtCursor57754,2180339
  Btree *pBtree;            /* The Btree to which this cursor belongs */pBtree57755,2180357
  BtShared *pBt;            /* The BtShared this cursor points to */pBt57756,2180430
  BtCursor *pNext;          /* Forms a linked list of all cursors */pNext57757,2180499
  Pgno *aOverflow;          /* Cache of overflow page locations */aOverflow57758,2180568
  CellInfo info;            /* A parse of the cell we are pointing at */info57759,2180635
  i64 nKey;                 /* Size of pKey, or last integer key */nKey57760,2180708
  void *pKey;               /* Saved key that was cursor last known position */pKey57761,2180776
  Pgno pgnoRoot;            /* The root page of this tree */pgnoRoot57762,2180856
  int nOvflAlloc;           /* Allocated size of aOverflow[] array */nOvflAlloc57763,2180917
  int skipNext;    /* Prev() is noop if negative. Next() is noop if positive.skipNext57764,2180987
  u8 curFlags;              /* zero or more BTCF_* flags defined below */curFlags57766,2181125
  u8 curPagerFlags;         /* Flags to send to sqlite3PagerGet() */curPagerFlags57767,2181199
  u8 eState;                /* One of the CURSOR_XXX constants (see below) */eState57768,2181268
  u8 hints;                 /* As configured by CursorSetHints() */hints57769,2181346
  i8 iPage;                 /* Index of current page in apPage */iPage57773,2181571
  u8 curIntKey;             /* Value of apPage[0]->intKey */curIntKey57774,2181637
  struct KeyInfo *pKeyInfo; /* Argument passed to comparison function */pKeyInfo57775,2181698
  void *padding1;           /* Make object size a multiple of 16 */padding157776,2181771
  u16 aiIdx[BTCURSOR_MAX_DEPTH];        /* Current index in apPage[i] */aiIdx57777,2181839
  MemPage *apPage[BTCURSOR_MAX_DEPTH];  /* Pages from root to current page */apPage57778,2181912
#define BTCF_WriteFlag BTCF_WriteFlag57784,2182038
#define BTCF_ValidNKey BTCF_ValidNKey57785,2182100
#define BTCF_ValidOvfl BTCF_ValidOvfl57786,2182166
#define BTCF_AtLast BTCF_AtLast57787,2182232
#define BTCF_Incrblob BTCF_Incrblob57788,2182308
#define BTCF_Multiple BTCF_Multiple57789,2182381
#define CURSOR_INVALID CURSOR_INVALID57821,2183715
#define CURSOR_VALID CURSOR_VALID57822,2183750
#define CURSOR_SKIPNEXT CURSOR_SKIPNEXT57823,2183785
#define CURSOR_REQUIRESEEK CURSOR_REQUIRESEEK57824,2183820
#define CURSOR_FAULT CURSOR_FAULT57825,2183855
# define PENDING_BYTE_PAGE(PENDING_BYTE_PAGE57830,2183971
#define PTRMAP_PAGENO(PTRMAP_PAGENO57847,2184693
#define PTRMAP_PTROFFSET(PTRMAP_PTROFFSET57848,2184750
#define PTRMAP_ISPAGE(PTRMAP_ISPAGE57849,2184813
#define PTRMAP_ROOTPAGE PTRMAP_ROOTPAGE57882,2186509
#define PTRMAP_FREEPAGE PTRMAP_FREEPAGE57883,2186535
#define PTRMAP_OVERFLOW1 PTRMAP_OVERFLOW157884,2186561
#define PTRMAP_OVERFLOW2 PTRMAP_OVERFLOW257885,2186588
#define PTRMAP_BTREE PTRMAP_BTREE57886,2186615
#define btreeIntegrity(btreeIntegrity57891,2186773
#define ISAUTOVACUUM ISAUTOVACUUM57904,2187276
#define ISAUTOVACUUM ISAUTOVACUUM57906,2187321
typedef struct IntegrityCk IntegrityCk;IntegrityCk57920,2187817
struct IntegrityCk {IntegrityCk57921,2187857
  BtShared *pBt;    /* The tree being checked out */pBt57922,2187878
  Pager *pPager;    /* The associated pager.  Also accessible by pBt->pPager */pPager57923,2187931
  u8 *aPgRef;       /* 1 bit per page in the db (see above) */aPgRef57924,2188011
  Pgno nPage;       /* Number of pages in the database */nPage57925,2188074
  int mxErr;        /* Stop accumulating errors when this reaches zero */mxErr57926,2188132
  int nErr;         /* Number of messages written to zErrMsg so far */nErr57927,2188206
  int mallocFailed; /* A memory allocation error has occurred */mallocFailed57928,2188277
  const char *zPfx; /* Error message prefix */zPfx57929,2188342
  int v1, v2;       /* Values for up to two %d fields in zPfx */v157930,2188389
  int v1, v2;       /* Values for up to two %d fields in zPfx */v257930,2188389
  StrAccum errMsg;  /* Accumulate the error message text here */errMsg57931,2188454
  u32 *heap;        /* Min-heap used for analyzing cell coverage */heap57932,2188519
#define get2byte(get2byte57938,2188674
#define put2byte(put2byte57939,2188717
#define get4byte get4byte57940,2188781
#define put4byte put4byte57941,2188814
# define get2byteAligned(get2byteAligned57949,2189070
# define get2byteAligned(get2byteAligned57952,2189209
# define get2byteAligned(get2byteAligned57955,2189380
# define get2byteAligned(get2byteAligned57957,2189444
static void lockBtreeMutex(Btree *p){lockBtreeMutex57970,2189890
static void SQLITE_NOINLINE unlockBtreeMutex(Btree *p){unlockBtreeMutex57984,2190235
SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){sqlite3BtreeEnter58014,2191332
static void SQLITE_NOINLINE btreeLockCarefully(Btree *p){btreeLockCarefully58048,2192692
SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){sqlite3BtreeLeave58086,2193738
SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){sqlite3BtreeHoldsMutex58104,2194166
SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){sqlite3BtreeEnterAll58129,2195120
SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){sqlite3BtreeLeaveAll58138,2195331
SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){sqlite3BtreeHoldsAllMutexes58155,2195735
SQLITE_PRIVATE int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){sqlite3SchemaMutexHeld58184,2196444
SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){sqlite3BtreeEnter58208,2197286
SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){sqlite3BtreeEnterAll58211,2197359
SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){sqlite3BtreeEnterCursor58230,2197899
SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){sqlite3BtreeLeaveCursor58234,2198020
static const char zMagicHeader[] = SQLITE_FILE_HEADER;zMagicHeader58265,2199076
# define TRACE(TRACE58275,2199349
#define get2byteNotZero(get2byteNotZero58287,2199783
#define BTALLOC_ANY BTALLOC_ANY58292,2199914
#define BTALLOC_EXACT BTALLOC_EXACT58293,2199972
#define BTALLOC_LE BTALLOC_LE58294,2200044
#define IfNotOmitAV(IfNotOmitAV58303,2200325
#define IfNotOmitAV(IfNotOmitAV58305,2200364
SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;sqlite3SharedCacheList58318,2200755
static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;sqlite3SharedCacheList58320,2200825
SQLITE_API int sqlite3_enable_shared_cache(int enable){sqlite3_enable_shared_cache58332,2201208
  #define querySharedCacheTableLock(querySharedCacheTableLock58350,2201843
  #define setSharedCacheTableLock(setSharedCacheTableLock58351,2201896
  #define clearAllSharedCacheTableLocks(clearAllSharedCacheTableLocks58352,2201947
  #define downgradeAllSharedCacheTableLocks(downgradeAllSharedCacheTableLocks58353,2201990
  #define hasSharedCacheTableLock(hasSharedCacheTableLock58354,2202037
  #define hasReadConflicts(hasReadConflicts58355,2202082
static int hasSharedCacheTableLock(hasSharedCacheTableLock58383,2203140
static int hasReadConflicts(Btree *pBtree, Pgno iRoot){hasReadConflicts58470,2206214
static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){querySharedCacheTableLock58490,2206780
static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){setSharedCacheTableLock58562,2209425
static void clearAllSharedCacheTableLocks(Btree *p){clearAllSharedCacheTableLocks58626,2211568
static void downgradeAllSharedCacheTableLocks(Btree *p){downgradeAllSharedCacheTableLocks58670,2212971
static int cursorHoldsMutex(BtCursor *p){cursorHoldsMutex58693,2213580
static int cursorOwnsBtShared(BtCursor *p){cursorOwnsBtShared58705,2214193
#define invalidateOverflowCache(invalidateOverflowCache58715,2214439
static void invalidateAllOverflowCache(BtShared *pBt){invalidateAllOverflowCache58721,2214624
static void invalidateIncrblobCursors(invalidateIncrblobCursors58743,2215426
  #define invalidateIncrblobCursors(invalidateIncrblobCursors58764,2216072
static int btreeSetHasContent(BtShared *pBt, Pgno pgno){btreeSetHasContent58802,2217930
static int btreeGetHasContent(BtShared *pBt, Pgno pgno){btreeGetHasContent58824,2218605
static void btreeClearHasContent(BtShared *pBt){btreeClearHasContent58833,2218901
static void btreeReleaseAllCursorPages(BtCursor *pCur){btreeReleaseAllCursorPages58841,2219076
static int saveCursorKey(BtCursor *pCur){saveCursorKey58863,2219864
static int saveCursorPosition(BtCursor *pCur){saveCursorPosition58899,2220885
static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){saveAllCursors58946,2222597
static int SQLITE_NOINLINE saveCursorsOnList(saveCursorsOnList58963,2223312
SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){sqlite3BtreeClearCursor58988,2223987
static int btreeMoveto(btreeMoveto59000,2224364
static int btreeRestoreCursorPosition(BtCursor *pCur){btreeRestoreCursorPosition59040,2225802
#define restoreCursorPosition(restoreCursorPosition59062,2226430
SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur){sqlite3BtreeCursorHasMoved59079,2227077
SQLITE_PRIVATE int sqlite3BtreeCursorRestore(BtCursor *pCur, int *pDifferentRow){sqlite3BtreeCursorRestore59096,2227747
SQLITE_PRIVATE void sqlite3BtreeCursorHint(BtCursor *pCur, int eHintType, ...){sqlite3BtreeCursorHint59121,2228405
SQLITE_PRIVATE void sqlite3BtreeCursorHintFlags(BtCursor *pCur, unsigned x){sqlite3BtreeCursorHintFlags59129,2228607
static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){ptrmapPageno59145,2229128
static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){ptrmapPut59169,2229828
static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){ptrmapGet59221,2231433
  #define ptrmapPut(ptrmapPut59253,2232384
  #define ptrmapGet(ptrmapGet59254,2232416
  #define ptrmapPutOvflPtr(ptrmapPutOvflPtr59255,2232455
#define findCell(findCell59268,2232878
#define findCellPastPtr(findCellPastPtr59270,2232976
static SQLITE_NOINLINE void btreeParseCellAdjustSizeForOverflow(btreeParseCellAdjustSizeForOverflow59280,2233318
static void btreeParseCellPtrNoPayload(btreeParseCellPtrNoPayload59325,2235087
static void btreeParseCellPtr(btreeParseCellPtr59342,2235612
static void btreeParseCellPtrIndex(btreeParseCellPtrIndex59410,2237534
static void btreeParseCell(btreeParseCell59447,2238785
static u16 cellSizePtr(MemPage *pPage, u8 *pCell){cellSizePtr59467,2239515
static u16 cellSizePtrNoPayload(MemPage *pPage, u8 *pCell){cellSizePtrNoPayload59515,2241191
static u16 cellSize(MemPage *pPage, int iCell){cellSize59541,2242074
static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){ptrmapPutOvflPtr59552,2242374
static int defragmentPage(MemPage *pPage){defragmentPage59576,2243204
static u8 *pageFindSlot(MemPage *pPg, int nByte, int *pRc){pageFindSlot59666,2246475
static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){allocateSpace59729,2248782
static int freeSpace(MemPage *pPage, u16 iStart, u16 iSize){freeSpace59819,2252254
static int decodeFlags(MemPage *pPage, int flagByte){decodeFlags59921,2256090
static int btreeInitPage(MemPage *pPage){btreeInitPage59979,2258264
static void zeroPage(MemPage *pPage, int flags){zeroPage60110,2263577
static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){btreePageFromDbPage60147,2264784
static int btreeGetPage(btreeGetPage60171,2265726
static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){btreePageLookup60193,2266494
static Pgno btreePagecount(BtShared *pBt){btreePagecount60207,2266872
SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){sqlite3BtreeLastPage60210,2266938
static int getAndInitPage(getAndInitPage60229,2267584
static void releasePageNotNull(MemPage *pPage){releasePageNotNull60283,2269279
static void releasePage(MemPage *pPage){releasePage60292,2269634
static int btreeGetUnusedPage(btreeGetUnusedPage60305,2269984
static void pageReinit(DbPage *pData){pageReinit60334,2270873
static int btreeInvokeBusyHandler(void *pArg){btreeInvokeBusyHandler60356,2271670
SQLITE_PRIVATE int sqlite3BtreeOpen(sqlite3BtreeOpen60384,2272779
static int removeFromSharingList(BtShared *pBt){removeFromSharingList60669,2282810
static void allocateTempSpace(BtShared *pBt){allocateTempSpace60708,2283821
static void freeTempSpace(BtShared *pBt){freeTempSpace60737,2284970
SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){sqlite3BtreeClose60748,2285189
SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){sqlite3BtreeSetCacheSize60810,2287025
SQLITE_PRIVATE int sqlite3BtreeSetSpillSize(Btree *p, int mxPage){sqlite3BtreeSetSpillSize60829,2287727
SQLITE_PRIVATE int sqlite3BtreeSetMmapLimit(Btree *p, sqlite3_int64 szMmap){sqlite3BtreeSetMmapLimit60844,2288115
SQLITE_PRIVATE int sqlite3BtreeSetPagerFlags(sqlite3BtreeSetPagerFlags60863,2288900
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){sqlite3BtreeSetPageSize60896,2290097
SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){sqlite3BtreeGetPageSize60929,2291101
SQLITE_PRIVATE int sqlite3BtreeGetReserveNoMutex(Btree *p){sqlite3BtreeGetReserveNoMutex60944,2291701
SQLITE_PRIVATE int sqlite3BtreeGetOptimalReserve(Btree *p){sqlite3BtreeGetOptimalReserve60960,2292209
SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){sqlite3BtreeMaxPageCount60977,2292668
SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){sqlite3BtreeSecureDelete60990,2293048
SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){sqlite3BtreeSetAutoVacuum61009,2293659
SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){sqlite3BtreeGetAutoVacuum61033,2294237
static int lockBtree(BtShared *pBt){lockBtree61059,2294924
static int countValidCursors(BtShared *pBt, int wrOnly){countValidCursors61254,2301997
static void unlockBtreeIfUnused(BtShared *pBt){unlockBtreeIfUnused61273,2302587
static int newDatabase(BtShared *pBt){newDatabase61290,2303136
SQLITE_PRIVATE int sqlite3BtreeNewDb(Btree *p){sqlite3BtreeNewDb61334,2304456
SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){sqlite3BtreeBeginTrans61378,2306315
static int setChildPtrmaps(MemPage *pPage){setChildPtrmaps61525,2310995
static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){modifyPagePointer61575,2312514
static int relocatePage(relocatePage61637,2314255
static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg, int bCommit){incrVacuumStep61730,2317663
static Pgno finalDbSize(BtShared *pBt, Pgno nOrig, Pgno nFree){finalDbSize61826,2320596
SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){sqlite3BtreeIncrVacuum61852,2321534
static int autoVacuumCommit(BtShared *pBt){autoVacuumCommit61894,2322755
# define setChildPtrmaps(setChildPtrmaps61944,2324452
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){sqlite3BtreeCommitPhaseOne61973,2325860
static void btreeEndTransaction(Btree *p){btreeEndTransaction62000,2326560
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){sqlite3BtreeCommitPhaseTwo62062,2329180
SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){sqlite3BtreeCommit62094,2330032
SQLITE_PRIVATE int sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode, int writeOnly){sqlite3BtreeTripAllCursors62131,2331515
SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p, int tripCode, int writeOnly){sqlite3BtreeRollback62174,2332827
SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){sqlite3BtreeBeginStmt62243,2335271
SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){sqlite3BtreeSavepoint62274,2336541
static int btreeCursor(btreeCursor62341,2339508
SQLITE_PRIVATE int sqlite3BtreeCursor(sqlite3BtreeCursor62401,2341768
SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){sqlite3BtreeCursorSize62427,2342661
SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){sqlite3BtreeCursorZero62439,2343093
SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){sqlite3BtreeCloseCursor62447,2343304
  static void assertCellInfo(BtCursor *pCur){assertCellInfo62487,2344389
  #define assertCellInfo(assertCellInfo62495,2344670
static SQLITE_NOINLINE void getCellInfo(BtCursor *pCur){getCellInfo62497,2344705
SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){sqlite3BtreeCursorIsValid62513,2345262
SQLITE_PRIVATE i64 sqlite3BtreeIntegerKey(BtCursor *pCur){sqlite3BtreeIntegerKey62524,2345658
SQLITE_PRIVATE u32 sqlite3BtreePayloadSize(BtCursor *pCur){sqlite3BtreePayloadSize62541,2346276
static int getOverflowPage(getOverflowPage62567,2347413
static int copyPayload(copyPayload62635,2349446
static int accessPayload(accessPayload62686,2351441
SQLITE_PRIVATE int sqlite3BtreeKey(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){sqlite3BtreeKey62897,2359068
SQLITE_PRIVATE int sqlite3BtreeData(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){sqlite3BtreeData62914,2359738
static const void *fetchPayload(fetchPayload62953,2361246
SQLITE_PRIVATE const void *sqlite3BtreePayloadFetch(BtCursor *pCur, u32 *pAmt){sqlite3BtreePayloadFetch62987,2362660
static int moveToChild(BtCursor *pCur, u32 newPgno){moveToChild63001,2363141
static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){assertParentIndex63027,2364011
#  define assertParentIndex(assertParentIndex63038,2364429
static void moveToParent(BtCursor *pCur){moveToParent63049,2364741
static int moveToRoot(BtCursor *pCur){moveToRoot63086,2366328
static int moveToLeftmost(BtCursor *pCur){moveToLeftmost63164,2368835
static int moveToRightmost(BtCursor *pCur){moveToRightmost63189,2369681
SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){sqlite3BtreeFirst63212,2370421
SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){sqlite3BtreeLast63235,2371100
SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked(sqlite3BtreeMovetoUnpacked63306,2373544
SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){sqlite3BtreeEof63531,2381807
static SQLITE_NOINLINE int btreeNext(BtCursor *pCur, int *pRes){btreeNext63560,2383208
SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){sqlite3BtreeNext63627,2385085
static SQLITE_NOINLINE int btreePrevious(BtCursor *pCur, int *pRes){btreePrevious63670,2386860
SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){sqlite3BtreePrevious63729,2388453
static int allocateBtreePage(allocateBtreePage63769,2390059
static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){freePage264091,2401932
static void freePage(MemPage *pPage, int *pRC){freePage64219,2406928
static int clearCell(clearCell64230,2407238
static int fillInCell(fillInCell64311,2410162
static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){dropCell64488,2416121
static void insertCell(insertCell64544,2418061
typedef struct CellArray CellArray;CellArray64634,2421775
struct CellArray {CellArray64635,2421811
  int nCell;              /* Number of cells in apCell[] */nCell64636,2421830
  MemPage *pRef;          /* Reference page */pRef64637,2421890
  u8 **apCell;            /* All cells begin balanced */apCell64638,2421937
  u16 *szCell;            /* Local size of all cells in apCell[] */szCell64639,2421994
static void populateCellCache(CellArray *p, int idx, int N){populateCellCache64646,2422151
static SQLITE_NOINLINE u16 computeCellSize(CellArray *p, int N){computeCellSize64664,2422608
static u16 cachedCellSize(CellArray *p, int N){cachedCellSize64670,2422819
static int rebuildPage(rebuildPage64689,2423531
static int pageInsertArray(pageInsertArray64758,2426311
static int pageFreeArray(pageFreeArray64804,2428134
static int editPage(editPage64861,2429988
#define NN NN64967,2433563
#define NB NB64968,2433638
static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){balance_quick64995,2434822
static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){copyNodeContent65139,2440235
static int balance_nonroot(balance_nonroot65220,2443723
static int balance_deeper(MemPage *pRoot, MemPage **ppChild){balance_deeper65984,2472621
static int balance(BtCursor *pCur){balance66041,2474629
SQLITE_PRIVATE int sqlite3BtreeInsert(sqlite3BtreeInsert66186,2480703
SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur, u8 flags){sqlite3BtreeDelete66353,2487556
static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){btreeCreateTable66518,2494252
SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){sqlite3BtreeCreateTable66661,2498839
static int clearDatabasePage(clearDatabasePage66673,2499134
SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){sqlite3BtreeClearTable66740,2501168
SQLITE_PRIVATE int sqlite3BtreeClearTableOfCursor(BtCursor *pCur){sqlite3BtreeClearTableOfCursor66764,2501869
static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){btreeDropTable66788,2502990
SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){sqlite3BtreeDropTable66890,2505860
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){sqlite3BtreeGetMeta66919,2507051
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){sqlite3BtreeUpdateMeta66949,2507899
SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){sqlite3BtreeCount66982,2508900
SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){sqlite3BtreePager67052,2511289
static void checkAppendMsg(checkAppendMsg67060,2511459
static int getPageReferenced(IntegrityCk *pCheck, Pgno iPg){getPageReferenced67090,2512182
static void setPageReferenced(IntegrityCk *pCheck, Pgno iPg){setPageReferenced67098,2512451
static int checkRef(IntegrityCk *pCheck, Pgno iPage){checkRef67112,2512939
static void checkPtrmap(checkPtrmap67132,2513492
static void checkList(checkList67161,2514404
static void btreeHeapInsert(u32 *aHeap, u32 x){btreeHeapInsert67253,2517588
static int btreeHeapPull(u32 *aHeap, u32 *pOut){btreeHeapPull67263,2517800
static int checkTreePage(checkTreePage67297,2518761
SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck(sqlite3BtreeIntegrityCheck67561,2528871
SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){sqlite3BtreeGetFilename67680,2532565
SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){sqlite3BtreeGetJournalname67693,2533024
SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){sqlite3BtreeIsInTrans67701,2533226
SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){sqlite3BtreeCheckpoint67715,2533690
SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){sqlite3BtreeIsInReadTrans67734,2534143
SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){sqlite3BtreeIsInBackup67740,2534296
SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){sqlite3BtreeSchema67766,2535436
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){sqlite3BtreeSchemaLocked67782,2535926
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){sqlite3BtreeLockTable67799,2536403
SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){sqlite3BtreePutData67829,2537409
SQLITE_PRIVATE void sqlite3BtreeIncrblobCursor(BtCursor *pCur){sqlite3BtreeIncrblobCursor67877,2539168
SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){sqlite3BtreeSetVersion67888,2539484
SQLITE_PRIVATE int sqlite3BtreeCursorHasHint(BtCursor *pCsr, unsigned int mask){sqlite3BtreeCursorHasHint67923,2540499
SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){sqlite3BtreeIsReadonly67930,2540671
SQLITE_PRIVATE int sqlite3HeaderSizeBtree(void){ return ROUND8(sizeof(MemPage)); }sqlite3HeaderSizeBtree67937,2540849
SQLITE_PRIVATE int sqlite3BtreeSharable(Btree *p){sqlite3BtreeSharable67943,2541047
SQLITE_PRIVATE int sqlite3BtreeConnectionCount(Btree *p){sqlite3BtreeConnectionCount67952,2541332
struct sqlite3_backup {sqlite3_backup67980,2542213
  sqlite3* pDestDb;        /* Destination database handle */pDestDb67981,2542237
  Btree *pDest;            /* Destination b-tree file */pDest67982,2542298
  u32 iDestSchema;         /* Original schema cookie in destination */iDestSchema67983,2542355
  int bDestLocked;         /* True once a write-transaction is open on pDest */bDestLocked67984,2542426
  Pgno iNext;              /* Page number of the next source page to copy */iNext67986,2542507
  sqlite3* pSrcDb;         /* Source database handle */pSrcDb67987,2542584
  Btree *pSrc;             /* Source b-tree file */pSrc67988,2542640
  int rc;                  /* Backup process error code */rc67990,2542693
  Pgno nRemaining;         /* Number of pages left to copy */nRemaining67995,2542897
  Pgno nPagecount;         /* Total number of pages to copy */nPagecount67996,2542959
  int isAttached;          /* True once backup has been registered with pager */isAttached67998,2543023
  sqlite3_backup *pNext;   /* Next backup associated with source pager */pNext67999,2543104
static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){findBtree68041,2545007
static int setDestPgsz(sqlite3_backup *p){setDestPgsz68072,2545731
static int checkReadTransaction(sqlite3 *db, Btree *p){checkReadTransaction68084,2546143
SQLITE_API sqlite3_backup *sqlite3_backup_init(sqlite3_backup_init68100,2546681
static int isFatalError(int rc){isFatalError68177,2549367
static int backupOnePage(backupOnePage68186,2549640
static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){backupTruncateFile68282,2553293
static void attachBackupObject(sqlite3_backup *p){attachBackupObject68295,2553659
SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){sqlite3_backup_step68307,2553958
SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){sqlite3_backup_finish68561,2563615
SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){sqlite3_backup_remaining68613,2565188
SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){sqlite3_backup_pagecount68627,2565497
static SQLITE_NOINLINE void backupUpdate(backupUpdate68649,2566200
SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){sqlite3BackupUpdate68674,2566945
SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){sqlite3BackupRestart68689,2567605
SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){sqlite3BtreeCopyFile68706,2568176
SQLITE_PRIVATE int sqlite3VdbeCheckMemInvariants(Mem *p){sqlite3VdbeCheckMemInvariants68790,2571038
SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){sqlite3VdbeChangeEncoding68843,2572954
SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){sqlite3VdbeMemGrow68878,2574125
SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){sqlite3VdbeMemClearAndResize68935,2576106
SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){sqlite3VdbeMemMakeWriteable68953,2576663
SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){sqlite3VdbeMemExpandBlob68980,2577428
static SQLITE_NOINLINE int vdbeMemAddTerminator(Mem *pMem){vdbeMemAddTerminator69007,2578146
SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){sqlite3VdbeMemNulTerminate69020,2578443
SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){sqlite3VdbeMemStringify69045,2579489
SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){sqlite3VdbeMemFinalize69090,2580910
static SQLITE_NOINLINE void vdbeMemClearExternAndSetNull(Mem *p){vdbeMemClearExternAndSetNull69122,2581988
static SQLITE_NOINLINE void vdbeMemClear(Mem *p){vdbeMemClear69152,2582951
SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){sqlite3VdbeMemRelease69173,2583556
static i64 doubleToInt64(double r){doubleToInt6469185,2583911
SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){sqlite3VdbeIntValue69221,2585111
SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){sqlite3VdbeRealValue69246,2585858
SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){sqlite3VdbeIntegerAffinity69268,2586537
SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){sqlite3VdbeMemIntegerify69296,2587438
SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){sqlite3VdbeMemRealify69310,2587834
SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){sqlite3VdbeMemNumerify69327,2588399
SQLITE_PRIVATE void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){sqlite3VdbeMemCast69351,2589353
SQLITE_PRIVATE void sqlite3VdbeMemInit(Mem *pMem, sqlite3 *db, u16 flags){sqlite3VdbeMemInit69393,2590616
SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){sqlite3VdbeMemSetNull69413,2591325
SQLITE_PRIVATE void sqlite3ValueSetNull(sqlite3_value *p){sqlite3ValueSetNull69420,2591492
SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){sqlite3VdbeMemSetZeroBlob69428,2591692
static SQLITE_NOINLINE void vdbeReleaseAndSetInt64(Mem *pMem, i64 val){vdbeReleaseAndSetInt6469443,2592094
SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){sqlite3VdbeMemSetInt6469453,2592347
SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){sqlite3VdbeMemSetDouble69467,2592679
SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){sqlite3VdbeMemSetRowSet69480,2592963
SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){sqlite3VdbeMemTooBig69502,2593634
SQLITE_PRIVATE void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){sqlite3VdbeMemAboutToChange69523,2594185
static SQLITE_NOINLINE void vdbeClrCopy(Mem *pTo, const Mem *pFrom, int eType){vdbeClrCopy69543,2594747
SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){sqlite3VdbeMemShallowCopy69548,2594948
SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){sqlite3VdbeMemCopy69564,2595504
SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){sqlite3VdbeMemMove69587,2596141
SQLITE_PRIVATE int sqlite3VdbeMemSetStr(sqlite3VdbeMemSetStr69613,2597195
static SQLITE_NOINLINE int vdbeMemFromBtreeResize(vdbeMemFromBtreeResize69713,2600338
SQLITE_PRIVATE int sqlite3VdbeMemFromBtree(sqlite3VdbeMemFromBtree69739,2601189
static SQLITE_NOINLINE const void *valueToText(sqlite3_value* pVal, u8 enc){valueToText69775,2602493
SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){sqlite3ValueText69816,2604050
SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){sqlite3ValueNew69833,2604537
struct ValueNewStat4Ctx {ValueNewStat4Ctx69846,2604848
  Parse *pParse;pParse69847,2604874
  Index *pIdx;pIdx69848,2604891
  UnpackedRecord **ppRec;ppRec69849,2604906
  int iVal;iVal69850,2604932
static sqlite3_value *valueNew(sqlite3 *db, struct ValueNewStat4Ctx *p){valueNew69864,2605478
static int valueFromFunction(valueFromFunction69926,2607714
# define valueFromFunction(valueFromFunction70007,2610212
static int valueFromExpr(valueFromExpr70020,2610712
SQLITE_PRIVATE int sqlite3ValueFromExpr(sqlite3ValueFromExpr70152,2615161
static void recordFunc(recordFunc70171,2615947
SQLITE_PRIVATE void sqlite3AnalyzeFunctions(void){sqlite3AnalyzeFunctions70205,2616915
static int stat4ValueFromExpr(stat4ValueFromExpr70230,2617780
SQLITE_PRIVATE int sqlite3Stat4ProbeSetValue(sqlite3Stat4ProbeSetValue70308,2620630
SQLITE_PRIVATE int sqlite3Stat4ValueFromExpr(sqlite3Stat4ValueFromExpr70353,2622192
SQLITE_PRIVATE int sqlite3Stat4Column(sqlite3Stat4Column70370,2622896
SQLITE_PRIVATE void sqlite3Stat4ProbeFree(UnpackedRecord *pRec){sqlite3Stat4ProbeFree70415,2624624
SQLITE_PRIVATE void sqlite3ValueSetStr(sqlite3ValueSetStr70433,2625083
SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){sqlite3ValueFree70446,2625476
static SQLITE_NOINLINE int valueBytes(sqlite3_value *pVal, u8 enc){valueBytes70457,2625816
SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){sqlite3ValueBytes70460,2625936
SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(Parse *pParse){sqlite3VdbeCreate70499,2627169
SQLITE_PRIVATE void sqlite3VdbeError(Vdbe *p, const char *zFormat, ...){sqlite3VdbeError70524,2627760
SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){sqlite3VdbeSetSql70535,2628036
SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){sqlite3VdbeSwap70549,2628452
static int growOpArray(Vdbe *v, int nOp){growOpArray70578,2629276
static void test_addop_breakpoint(void){test_addop_breakpoint70612,2630590
static SQLITE_NOINLINE int growOp3(Vdbe *p, int op, int p1, int p2, int p3){growOp370634,2631100
SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){sqlite3VdbeAddOp370640,2631343
SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){sqlite3VdbeAddOp070685,2632369
SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){sqlite3VdbeAddOp170688,2632470
SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){sqlite3VdbeAddOp270691,2632580
SQLITE_PRIVATE int sqlite3VdbeGoto(Vdbe *p, int iDest){sqlite3VdbeGoto70697,2632767
SQLITE_PRIVATE int sqlite3VdbeLoadString(Vdbe *p, int iDest, const char *zStr){sqlite3VdbeLoadString70704,2632960
SQLITE_PRIVATE void sqlite3VdbeMultiLoad(Vdbe *p, int iDest, const char *zTypes, ...){sqlite3VdbeMultiLoad70716,2633549
SQLITE_PRIVATE int sqlite3VdbeAddOp4(sqlite3VdbeAddOp470736,2634065
SQLITE_PRIVATE int sqlite3VdbeAddOp4Dup8(sqlite3VdbeAddOp4Dup870754,2634619
SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){sqlite3VdbeAddParseSchemaOp70776,2635441
SQLITE_PRIVATE int sqlite3VdbeAddOp4Int(sqlite3VdbeAddOp4Int70785,2635728
SQLITE_PRIVATE void sqlite3VdbeEndCoroutine(Vdbe *v, int regYield){sqlite3VdbeEndCoroutine70800,2636226
SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *v){sqlite3VdbeMakeLabel70827,2637365
SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *v, int x){sqlite3VdbeResolveLabel70846,2637903
SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){sqlite3VdbeRunOnlyOnce70860,2638203
SQLITE_PRIVATE void sqlite3VdbeReusable(Vdbe *p){sqlite3VdbeReusable70867,2638348
typedef struct VdbeOpIter VdbeOpIter;VdbeOpIter70889,2638974
struct VdbeOpIter {VdbeOpIter70890,2639012
  Vdbe *v;                   /* Vdbe to iterate through the opcodes of */v70891,2639032
  SubProgram **apSub;        /* Array of subprograms */apSub70892,2639106
  int nSub;                  /* Number of entries in apSub */nSub70893,2639162
  int iAddr;                 /* Address of next instruction to return */iAddr70894,2639224
  int iSub;                  /* 0 = main program, 1 = first sub-program etc. */iSub70895,2639297
static Op *opIterNext(VdbeOpIter *p){opIterNext70897,2639380
SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){sqlite3VdbeAssertMayAbort70962,2641184
static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){resolveP2Values71022,2643362
SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){sqlite3VdbeCurrentAddr71106,2645803
SQLITE_PRIVATE void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N){sqlite3VdbeVerifyNoMallocRequired71120,2646369
SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){sqlite3VdbeTakeOpArray71136,2647003
SQLITE_PRIVATE VdbeOp *sqlite3VdbeAddOpList(sqlite3VdbeAddOpList71156,2647608
SQLITE_PRIVATE void sqlite3VdbeScanStatus(sqlite3VdbeScanStatus71204,2648959
SQLITE_PRIVATE void sqlite3VdbeChangeOpcode(Vdbe *p, u32 addr, u8 iNewOpcode){sqlite3VdbeChangeOpcode71232,2649926
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, u32 addr, int val){sqlite3VdbeChangeP171235,2650056
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, u32 addr, int val){sqlite3VdbeChangeP271238,2650165
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, u32 addr, int val){sqlite3VdbeChangeP371241,2650274
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u8 p5){sqlite3VdbeChangeP571244,2650383
SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){sqlite3VdbeJumpHere71253,2650655
static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){freeEphemeralFunction71262,2650880
static SQLITE_NOINLINE void freeP4Mem(sqlite3 *db, Mem *p){freeP4Mem71273,2651122
static SQLITE_NOINLINE void freeP4FuncCtx(sqlite3 *db, sqlite3_context *p){freeP4FuncCtx71277,2651259
static void freeP4(sqlite3 *db, int p4type, void *p4){freeP471281,2651400
static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){vdbeFreeOpArray71333,2652572
SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){sqlite3VdbeLinkSubProgram71351,2653088
SQLITE_PRIVATE int sqlite3VdbeChangeToNoop(Vdbe *p, int addr){sqlite3VdbeChangeToNoop71359,2653267
SQLITE_PRIVATE int sqlite3VdbeDeletePriorOpcode(Vdbe *p, u8 op){sqlite3VdbeDeletePriorOpcode71375,2653708
static void SQLITE_NOINLINE vdbeChangeP4Full(vdbeChangeP4Full71400,2654684
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){sqlite3VdbeChangeP471419,2655095
SQLITE_PRIVATE void sqlite3VdbeSetP4KeyInfo(Parse *pParse, Index *pIdx){sqlite3VdbeSetP4KeyInfo71457,2656077
static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){vdbeVComment71472,2656605
SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){sqlite3VdbeComment71481,2656952
SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){sqlite3VdbeNoopComment71489,2657135
SQLITE_PRIVATE void sqlite3VdbeSetLineNumber(Vdbe *v, int iLine){sqlite3VdbeSetLineNumber71504,2657490
SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){sqlite3VdbeGetOp71522,2658305
static int translateP(char c, const Op *pOp){translateP71543,2658979
static int displayComment(displayComment71564,2659719
static void displayP4Expr(StrAccum *p, Expr *pExpr){displayP4Expr71642,2662155
static char *displayP4(Op *pOp, char *zTemp, int nTemp){displayP471716,2664452
SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){sqlite3VdbeUsesBtree71840,2667773
SQLITE_PRIVATE void sqlite3VdbeEnter(Vdbe *p){sqlite3VdbeEnter71871,2669127
static SQLITE_NOINLINE void vdbeLeave(Vdbe *p){vdbeLeave71892,2669632
SQLITE_PRIVATE void sqlite3VdbeLeave(Vdbe *p){sqlite3VdbeLeave71906,2669917
SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){sqlite3VdbePrintOp71916,2670181
static void initMemArray(Mem *p, int N, sqlite3 *db, u16 flags){initMemArray71942,2670951
static void releaseMemArray(Mem *p, int N){releaseMemArray71957,2671205
SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){sqlite3VdbeFrameDelete72003,2672850
SQLITE_PRIVATE int sqlite3VdbeList(sqlite3VdbeList72031,2673845
SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){sqlite3VdbePrintSql72211,2679735
SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){sqlite3VdbeIOTraceSql72230,2680186
struct ReusableSpace {ReusableSpace72260,2681011
  u8 *pSpace;          /* Available memory */pSpace72261,2681034
  int nFree;           /* Bytes of available memory */nFree72262,2681080
  int nNeeded;         /* Total bytes that could not be allocated */nNeeded72263,2681135
static void *allocSpace(allocSpace72280,2681882
SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe *p){sqlite3VdbeRewind72303,2682467
SQLITE_PRIVATE void sqlite3VdbeMakeReady(sqlite3VdbeMakeReady72356,2684075
SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){sqlite3VdbeFreeCursor72457,2687776
static void closeCursorsInFrame(Vdbe *p){closeCursorsInFrame72494,2688713
SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){sqlite3VdbeFrameRestore72512,2689135
static void closeAllCursors(Vdbe *p){closeAllCursors72541,2689994
static void Cleanup(Vdbe *p){Cleanup72568,2690671
SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){sqlite3VdbeSetNumCols72592,2691395
SQLITE_PRIVATE int sqlite3VdbeSetColName(sqlite3VdbeSetColName72616,2692257
static int vdbeCommit(sqlite3 *db, Vdbe *p){vdbeCommit72644,2693344
static void checkActiveVdbeCnt(sqlite3 *db){checkActiveVdbeCnt72906,2702442
#define checkActiveVdbeCnt(checkActiveVdbeCnt72925,2702850
SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){sqlite3VdbeCloseStatement72938,2703314
SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){sqlite3VdbeCheckFk73004,2705571
SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){sqlite3VdbeHalt73031,2706550
SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){sqlite3VdbeResetStepResult73232,2713447
SQLITE_PRIVATE int sqlite3VdbeTransferError(Vdbe *p){sqlite3VdbeTransferError73244,2713851
static void vdbeInvokeSqllog(Vdbe *v){vdbeInvokeSqllog73266,2714413
# define vdbeInvokeSqllog(vdbeInvokeSqllog73279,2714807
SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){sqlite3VdbeReset73293,2715230
SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){sqlite3VdbeFinalize73373,2717563
SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(sqlite3 *db, AuxData **pp, int iOp, int mask){sqlite3VdbeDeleteAuxData73399,2718463
SQLITE_PRIVATE void sqlite3VdbeClearObject(sqlite3 *db, Vdbe *p){sqlite3VdbeClearObject73425,2719242
SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){sqlite3VdbeDelete73455,2720082
static int SQLITE_NOINLINE handleDeferredMoveto(VdbeCursor *p){handleDeferredMoveto73481,2720677
static int SQLITE_NOINLINE handleMovedCursor(VdbeCursor *p){handleMovedCursor73507,2721528
SQLITE_PRIVATE int sqlite3VdbeCursorRestore(VdbeCursor *p){sqlite3VdbeCursorRestore73522,2722029
SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor **pp, int *piCol){sqlite3VdbeCursorMoveto73543,2722842
SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format, u32 *pLen){sqlite3VdbeSerialType73607,2725187
#   define MAX_6BYTE MAX_6BYTE73618,2725465
static const u8 sqlite3SmallTypeSizes[] = {sqlite3SmallTypeSizes73659,2726320
SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){sqlite3VdbeSerialTypeLen73679,2727160
SQLITE_PRIVATE u8 sqlite3VdbeOneByteSerialTypeLen(u8 serial_type){sqlite3VdbeOneByteSerialTypeLen73688,2727444
static u64 floatSwap(u64 in){floatSwap73728,2729304
# define swapMixedEndianFloat(swapMixedEndianFloat73741,2729461
# define swapMixedEndianFloat(swapMixedEndianFloat73743,2729518
SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, Mem *pMem, u32 serial_type){sqlite3VdbeSerialPut73759,2730135
#define ONE_BYTE_INT(ONE_BYTE_INT73798,2731093
#define TWO_BYTE_INT(TWO_BYTE_INT73799,2731133
#define THREE_BYTE_INT(THREE_BYTE_INT73800,2731186
#define FOUR_BYTE_UINT(FOUR_BYTE_UINT73801,2731253
#define FOUR_BYTE_INT(FOUR_BYTE_INT73802,2731332
static u32 SQLITE_NOINLINE serialGet(serialGet73813,2731805
SQLITE_PRIVATE u32 sqlite3VdbeSerialGet(sqlite3VdbeSerialGet73849,2733149
SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord(sqlite3VdbeAllocUnpackedRecord73948,2736784
SQLITE_PRIVATE void sqlite3VdbeRecordUnpack(sqlite3VdbeRecordUnpack73985,2738268
static int vdbeRecordCompareDebug(vdbeRecordCompareDebug74032,2739923
static void vdbeAssertFieldCountWithinLimits(vdbeAssertFieldCountWithinLimits74137,2743780
# define vdbeAssertFieldCountWithinLimits(vdbeAssertFieldCountWithinLimits74158,2744335
static int vdbeCompareMemString(vdbeCompareMemString74167,2744690
static int isAllZero(const char *z, int n){isAllZero74203,2745882
static SQLITE_NOINLINE int sqlite3BlobCompare(const Mem *pB1, const Mem *pB2){sqlite3BlobCompare74216,2746220
static int sqlite3IntFloatCompare(i64 i, double r){sqlite3IntFloatCompare74249,2747349
SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){sqlite3MemCompare74282,2748306
static i64 vdbeRecordDecodeInt(u32 serial_type, const u8 *aKey){vdbeRecordDecodeInt74368,2750801
SQLITE_PRIVATE int sqlite3VdbeRecordCompareWithSkip(sqlite3VdbeRecordCompareWithSkip74423,2752635
SQLITE_PRIVATE int sqlite3VdbeRecordCompare(sqlite3VdbeRecordCompare74609,2758774
static int vdbeRecordCompareInt(vdbeRecordCompareInt74626,2759387
static int vdbeRecordCompareString(vdbeRecordCompareString74720,2762182
SQLITE_PRIVATE RecordCompare sqlite3VdbeFindCompare(UnpackedRecord *p){sqlite3VdbeFindCompare74781,2763841
SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){sqlite3VdbeIdxRowid74827,2765699
SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare(sqlite3VdbeIdxKeyCompare74904,2768446
SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){sqlite3VdbeSetChanges74939,2769580
SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){sqlite3VdbeCountChanges74949,2769846
SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){sqlite3ExpirePreparedStatements74963,2770344
SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){sqlite3VdbeDb74973,2770540
SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetBoundValue(Vdbe *v, int iVar, u8 aff){sqlite3VdbeGetBoundValue74985,2770966
SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){sqlite3VdbeSetVarmask75006,2771557
SQLITE_PRIVATE void sqlite3VtabImportErrmsg(Vdbe *p, sqlite3_vtab *pVtab){sqlite3VtabImportErrmsg75021,2771974
static void vdbeFreeUnpacked(sqlite3 *db, UnpackedRecord *p){vdbeFreeUnpacked75042,2772660
SQLITE_PRIVATE void sqlite3VdbePreUpdateHook(sqlite3VdbePreUpdateHook75061,2773287
SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){sqlite3_expired75145,2776093
static int vdbeSafety(Vdbe *p){vdbeSafety75156,2776391
static int vdbeSafetyNotNull(Vdbe *p){vdbeSafetyNotNull75164,2776564
static SQLITE_NOINLINE void invokeProfileCallback(sqlite3 *db, Vdbe *p){invokeProfileCallback75178,2776925
# define checkProfileCallback(checkProfileCallback75199,2777649
# define checkProfileCallback(checkProfileCallback75202,2777753
SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){sqlite3_finalize75214,2778166
SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){sqlite3_reset75241,2779005
SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){sqlite3_clear_bindings75262,2779491
SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){sqlite3_value_blob75286,2780102
SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){sqlite3_value_bytes75299,2780439
SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){sqlite3_value_bytes1675302,2780545
SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){sqlite3_value_double75305,2780660
SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){sqlite3_value_int75308,2780766
SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){sqlite3_value_int6475311,2780870
SQLITE_API unsigned int sqlite3_value_subtype(sqlite3_value *pVal){sqlite3_value_subtype75314,2780980
SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){sqlite3_value_text75318,2781137
SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){sqlite3_value_text1675322,2781307
SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){sqlite3_value_text16be75325,2781428
SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){sqlite3_value_text16le75328,2781547
SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){sqlite3_value_type75336,2781870
SQLITE_API sqlite3_value *sqlite3_value_dup(const sqlite3_value *pOrig){sqlite3_value_dup75376,2783106
SQLITE_API void sqlite3_value_free(sqlite3_value *pOld){sqlite3_value_free75399,2783739
static void setResultStrOrError(setResultStrOrError75415,2784342
static int invokeValueDestructor(invokeValueDestructor75426,2784766
SQLITE_API void sqlite3_result_blob(sqlite3_result_blob75442,2785203
SQLITE_API void sqlite3_result_blob64(sqlite3_result_blob6475452,2785439
SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){sqlite3_result_double75466,2785793
SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){sqlite3_result_error75470,2785970
SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){sqlite3_result_error1675477,2786266
SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){sqlite3_result_int75484,2786552
SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){sqlite3_result_int6475488,2786727
SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){sqlite3_result_null75492,2786899
SQLITE_API void sqlite3_result_subtype(sqlite3_context *pCtx, unsigned int eSubtype){sqlite3_result_subtype75496,2787053
SQLITE_API void sqlite3_result_text(sqlite3_result_text75502,2787282
SQLITE_API void sqlite3_result_text64(sqlite3_result_text6475511,2787509
SQLITE_API void sqlite3_result_text16(sqlite3_result_text1675528,2787964
SQLITE_API void sqlite3_result_text16be(sqlite3_result_text16be75537,2788201
SQLITE_API void sqlite3_result_text16le(sqlite3_result_text16le75546,2788436
SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){sqlite3_result_value75556,2788702
SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){sqlite3_result_zeroblob75560,2788885
SQLITE_API int sqlite3_result_zeroblob64(sqlite3_context *pCtx, u64 n){sqlite3_result_zeroblob6475564,2789057
SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){sqlite3_result_error_code75573,2789359
SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){sqlite3_result_error_toobig75586,2789768
SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){sqlite3_result_error_nomem75595,2790099
static int doWalCallbacks(sqlite3 *db){doWalCallbacks75607,2790504
static int sqlite3Step(Vdbe *p){sqlite3Step75637,2791377
SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){sqlite3_step75767,2795551
SQLITE_API void *sqlite3_user_data(sqlite3_context *p){sqlite3_user_data75818,2797290
SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){sqlite3_context_db_handle75833,2797806
SQLITE_PRIVATE sqlite3_int64 sqlite3StmtCurrentTime(sqlite3_context *p){sqlite3StmtCurrentTime75845,2798279
SQLITE_PRIVATE void sqlite3InvalidFunction(sqlite3InvalidFunction75869,2799114
static SQLITE_NOINLINE void *createAggContext(sqlite3_context *p, int nByte){createAggContext75887,2799709
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){sqlite3_aggregate_context75909,2800320
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){sqlite3_get_auxdata75924,2800762
SQLITE_API void sqlite3_set_auxdata(sqlite3_set_auxdata75945,2801426
SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){sqlite3_aggregate_count76000,2802801
SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){sqlite3_column_count76009,2803034
SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){sqlite3_data_count76018,2803275
static const Mem *columnNullValue(void){columnNullValue76027,2803509
static Mem *columnMem(sqlite3_stmt *pStmt, int i){columnMem76067,2805051
static void columnMallocFailure(sqlite3_stmt *pStmt)columnMallocFailure76102,2806112
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){sqlite3_column_blob76122,2806803
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){sqlite3_column_bytes76132,2807147
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){sqlite3_column_bytes1676137,2807313
SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){sqlite3_column_double76142,2807483
SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){sqlite3_column_int76147,2807657
SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){sqlite3_column_int6476152,2807819
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){sqlite3_column_text76157,2808003
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){sqlite3_column_value76162,2808201
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){sqlite3_column_text1676172,2808500
SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){sqlite3_column_type76178,2808715
static const void *columnName(columnName76200,2809601
SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){sqlite3_column_name76242,2810486
SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_name1676247,2810680
SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){sqlite3_column_decltype76267,2811295
SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){sqlite3_column_decltype1676272,2811497
SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){sqlite3_column_database_name76285,2812007
SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_database_name1676290,2812214
SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){sqlite3_column_table_name76301,2812655
SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_table_name1676306,2812856
SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){sqlite3_column_origin_name76317,2813298
SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_origin_name1676322,2813501
static int vdbeUnbind(Vdbe *p, int i){vdbeUnbind76345,2814365
static int bindText(bindText76389,2815735
SQLITE_API int sqlite3_bind_blob(sqlite3_bind_blob76423,2816721
SQLITE_API int sqlite3_bind_blob64(sqlite3_bind_blob6476435,2816985
SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){sqlite3_bind_double76449,2817311
SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){sqlite3_bind_int76459,2817585
SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){sqlite3_bind_int6476462,2817704
SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){sqlite3_bind_null76472,2817982
SQLITE_API int sqlite3_bind_text( sqlite3_bind_text76481,2818186
SQLITE_API int sqlite3_bind_text64( sqlite3_bind_text6476490,2818380
SQLITE_API int sqlite3_bind_text16(sqlite3_bind_text1676507,2818810
SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){sqlite3_bind_value76517,2819043
SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){sqlite3_bind_zeroblob76548,2819896
SQLITE_API int sqlite3_bind_zeroblob64(sqlite3_stmt *pStmt, int i, sqlite3_uint64 n){sqlite3_bind_zeroblob6476558,2820161
SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){sqlite3_bind_parameter_count76577,2820701
SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){sqlite3_bind_parameter_name76588,2820982
SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){sqlite3VdbeParameterIndex76601,2821321
SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){sqlite3_bind_parameter_index76616,2821639
SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){sqlite3TransferBindings76623,2821884
SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){sqlite3_transfer_bindings76650,2822807
SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){sqlite3_db_handle76672,2823490
SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){sqlite3_stmt_readonly76680,2823686
SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt *pStmt){sqlite3_stmt_busy76687,2823869
SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){sqlite3_next_stmt76698,2824246
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){sqlite3_stmt_status76719,2824750
SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){sqlite3_sql76736,2825122
SQLITE_API char *sqlite3_expanded_sql(sqlite3_stmt *pStmt){sqlite3_expanded_sql76750,2825598
static UnpackedRecord *vdbeUnpackRecord(vdbeUnpackRecord76772,2826207
SQLITE_API int sqlite3_preupdate_old(sqlite3 *db, int iIdx, sqlite3_value **ppValue){sqlite3_preupdate_old76792,2826796
SQLITE_API int sqlite3_preupdate_count(sqlite3 *db){sqlite3_preupdate_count76852,2828601
SQLITE_API int sqlite3_preupdate_depth(sqlite3 *db){sqlite3_preupdate_depth76870,2829337
SQLITE_API int sqlite3_preupdate_new(sqlite3 *db, int iIdx, sqlite3_value **ppValue){sqlite3_preupdate_new76881,2829675
SQLITE_API int sqlite3_stmt_scanstatus(sqlite3_stmt_scanstatus76955,2831893
SQLITE_API void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *pStmt){sqlite3_stmt_scanstatus_reset77014,2833412
static int findNextHostParameter(const char *zSql, int *pnToken){findNextHostParameter77050,2834676
SQLITE_PRIVATE char *sqlite3VdbeExpandSql(sqlite3VdbeExpandSql77093,2836298
# define memAboutToChange(memAboutToChange77252,2842255
# define memAboutToChange(memAboutToChange77254,2842325
SQLITE_API int sqlite3_search_count = 0;sqlite3_search_count77265,2842716
SQLITE_API int sqlite3_interrupt_count = 0;sqlite3_interrupt_count77277,2843119
SQLITE_API int sqlite3_sort_count = 0;sqlite3_sort_count77288,2843509
SQLITE_API int sqlite3_max_blobsize = 0;sqlite3_max_blobsize77299,2843916
static void updateMaxBlobsize(Mem *p){updateMaxBlobsize77300,2843957
# define HAS_UPDATE_HOOK(HAS_UPDATE_HOOK77312,2844278
# define HAS_UPDATE_HOOK(HAS_UPDATE_HOOK77314,2844363
SQLITE_API int sqlite3_found_count = 0;sqlite3_found_count77325,2844745
# define UPDATE_MAX_BLOBSIZE(UPDATE_MAX_BLOBSIZE77333,2844982
# define UPDATE_MAX_BLOBSIZE(UPDATE_MAX_BLOBSIZE77335,2845042
# define VdbeBranchTaken(VdbeBranchTaken77355,2845878
# define VdbeBranchTaken(VdbeBranchTaken77357,2845914
  static void vdbeTakeBranch(int iSrcLine, u8 I, u8 M){vdbeTakeBranch77358,2845978
#define Stringify(Stringify77376,2846563
#define Deephemeralize(Deephemeralize77391,2847210
#define isSorter(isSorter77396,2847407
static VdbeCursor *allocateCursor(allocateCursor77402,2847568
static void applyNumericAffinity(Mem *pRec, int bTryForInt){applyNumericAffinity77471,2850409
static void applyAffinity(applyAffinity77505,2851455
SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){sqlite3_value_numeric_type77541,2852907
SQLITE_PRIVATE void sqlite3ValueApplyAffinity(sqlite3ValueApplyAffinity77555,2853275
static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){computeNumericType77569,2853653
static u16 numericType(Mem *pMem){numericType77588,2854246
SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){sqlite3VdbeMemPrettyPrint77603,2854597
static void memTracePrint(Mem *p){memTracePrint77685,2856729
static void registerTrace(int iReg, Mem *p){registerTrace77707,2857381
#  define REGISTER_TRACE(REGISTER_TRACE77715,2857522
#  define REGISTER_TRACE(REGISTER_TRACE77717,2857607
#define SQLITE_HWTIME_HSQLITE_HWTIME_H77745,2858440
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime77758,2858837
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec77766,2859045
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime77777,2859260
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime77785,2859455
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime77809,2860197
static int checkSavepointCount(sqlite3 *db){checkSavepointCount77831,2860825
static SQLITE_NOINLINE Mem *out2PrereleaseWithClear(Mem *pOut){out2PrereleaseWithClear77844,2861136
static Mem *out2Prerelease(Vdbe *p, VdbeOp *pOp){out2Prerelease77849,2861273
SQLITE_PRIVATE int sqlite3VdbeExec(sqlite3VdbeExec77868,2861717
#   define MAX_ROWID MAX_ROWID81533,2987898
typedef struct Incrblob Incrblob;Incrblob84358,3079339
struct Incrblob {Incrblob84359,3079373
  int flags;              /* Copy of "flags" passed to sqlite3_blob_open() */flags84360,3079391
  int nByte;              /* Size of open blob, in bytes */nByte84361,3079469
  int iOffset;            /* Byte offset of blob in cursor data */iOffset84362,3079529
  int iCol;               /* Table column this handle is open on */iCol84363,3079596
  BtCursor *pCsr;         /* Cursor pointing at blob row */pCsr84364,3079664
  sqlite3_stmt *pStmt;    /* Statement holding cursor open */pStmt84365,3079724
  sqlite3 *db;            /* The associated database */db84366,3079786
  char *zDb;              /* Database name */zDb84367,3079842
  Table *pTab;            /* Table object */pTab84368,3079888
static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){blobSeekToRow84389,3080795
SQLITE_API int sqlite3_blob_open(sqlite3_blob_open84443,3082287
SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){sqlite3_blob_close84684,3090465
static int blobReadWrite(blobReadWrite84704,3090846
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){sqlite3_blob_read84777,3093068
SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){sqlite3_blob_write84784,3093257
SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){sqlite3_blob_bytes84794,3093593
SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){sqlite3_blob_reopen84809,3094159
#define SQLITE_MAX_PMASZ SQLITE_MAX_PMASZ84997,3102561
typedef struct MergeEngine MergeEngine;     /* Merge PMAs together */MergeEngine85002,3102642
typedef struct PmaReader PmaReader;         /* Incrementally read one PMA */PmaReader85003,3102712
typedef struct PmaWriter PmaWriter;         /* Incrementally write one PMA */PmaWriter85004,3102789
typedef struct SorterRecord SorterRecord;   /* A record being sorted */SorterRecord85005,3102867
typedef struct SortSubtask SortSubtask;     /* A sub-task in the sort process */SortSubtask85006,3102939
typedef struct SorterFile SorterFile;       /* Temporary file object wrapper */SorterFile85007,3103020
typedef struct SorterList SorterList;       /* In-memory list of records */SorterList85008,3103100
typedef struct IncrMerger IncrMerger;       /* Read & merge multiple PMAs */IncrMerger85009,3103176
struct SorterFile {SorterFile85015,3103353
  sqlite3_file *pFd;              /* File handle */pFd85016,3103373
  i64 iEof;                       /* Bytes of data stored in pFd */iEof85017,3103425
struct SorterList {SorterList85028,3103823
  SorterRecord *pList;            /* Linked list of records */pList85029,3103843
  u8 *aMemory;                    /* If non-NULL, bulk memory to hold pList */aMemory85030,3103906
  int szPMA;                      /* Size of pList as PMA in bytes */szPMA85031,3103985
struct MergeEngine {MergeEngine85098,3106962
  int nTree;                 /* Used size of aTree/aReadr (power of 2) */nTree85099,3106983
  SortSubtask *pTask;        /* Used by this thread only */pTask85100,3107057
  int *aTree;                /* Current state of incremental merge */aTree85101,3107117
  PmaReader *aReadr;         /* Array of PmaReaders to merge data from */aReadr85102,3107187
typedef int (*SorterCompare)(SortSubtask*,int*,const void*,int,const void*,int);SorterCompare85136,3108860
struct SortSubtask {SortSubtask85137,3108941
  SQLiteThread *pThread;          /* Background thread, if any */pThread85138,3108962
  int bDone;                      /* Set if thread is finished but not joined */bDone85139,3109028
  VdbeSorter *pSorter;            /* Sorter that owns this sub-task */pSorter85140,3109109
  UnpackedRecord *pUnpacked;      /* Space to unpack a record */pUnpacked85141,3109180
  SorterList list;                /* List for thread to write to a PMA */list85142,3109245
  int nPMA;                       /* Number of PMAs currently in file */nPMA85143,3109319
  SorterCompare xCompare;         /* Compare function to use */xCompare85144,3109392
  SorterFile file;                /* Temp file for level-0 PMAs */file85145,3109456
  SorterFile file2;               /* Space for other PMAs */file285146,3109523
struct VdbeSorter {VdbeSorter85159,3109911
  int mnPmaSize;                  /* Minimum PMA size, in bytes */mnPmaSize85160,3109931
  int mxPmaSize;                  /* Maximum PMA size, in bytes.  0==no limit */mxPmaSize85161,3109998
  int mxKeysize;                  /* Largest serialized key seen so far */mxKeysize85162,3110079
  int pgsz;                       /* Main database page size */pgsz85163,3110154
  PmaReader *pReader;             /* Readr data from here after Rewind() */pReader85164,3110218
  MergeEngine *pMerger;           /* Or here, if bUseThreads==0 */pMerger85165,3110294
  sqlite3 *db;                    /* Database connection */db85166,3110361
  KeyInfo *pKeyInfo;              /* How to compare records */pKeyInfo85167,3110421
  UnpackedRecord *pUnpacked;      /* Used by VdbeSorterCompare() */pUnpacked85168,3110484
  SorterList list;                /* List of in-memory records */list85169,3110552
  int iMemory;                    /* Offset of free space in list.aMemory */iMemory85170,3110618
  int nMemory;                    /* Size of list.aMemory allocation in bytes */nMemory85171,3110695
  u8 bUsePMA;                     /* True if one or more PMAs created */bUsePMA85172,3110776
  u8 bUseThreads;                 /* True to use background threads */bUseThreads85173,3110849
  u8 iPrev;                       /* Previous thread used to flush PMA */iPrev85174,3110920
  u8 nTask;                       /* Size of aTask[] array */nTask85175,3110994
  u8 typeMask;typeMask85176,3111056
  SortSubtask aTask[1];           /* One or more subtasks */aTask85177,3111071
#define SORTER_TYPE_INTEGER SORTER_TYPE_INTEGER85180,3111136
#define SORTER_TYPE_TEXT SORTER_TYPE_TEXT85181,3111169
struct PmaReader {PmaReader85192,3111604
  i64 iReadOff;               /* Current read offset */iReadOff85193,3111623
  i64 iEof;                   /* 1 byte past EOF for this PmaReader */iEof85194,3111679
  int nAlloc;                 /* Bytes of space at aAlloc */nAlloc85195,3111750
  int nKey;                   /* Number of bytes in key */nKey85196,3111811
  sqlite3_file *pFd;          /* File handle we are reading from */pFd85197,3111870
  u8 *aAlloc;                 /* Space for aKey if aBuffer and pMap wont work */aAlloc85198,3111938
  u8 *aKey;                   /* Pointer to current key */aKey85199,3112019
  u8 *aBuffer;                /* Current read buffer */aBuffer85200,3112078
  int nBuffer;                /* Size of read buffer in bytes */nBuffer85201,3112134
  u8 *aMap;                   /* Pointer to mapping of entire file */aMap85202,3112199
  IncrMerger *pIncr;          /* Incremental merger */pIncr85203,3112269
struct IncrMerger {IncrMerger85238,3114048
  SortSubtask *pTask;             /* Task that owns this merger */pTask85239,3114068
  MergeEngine *pMerger;           /* Merge engine thread reads data from */pMerger85240,3114135
  i64 iStartOff;                  /* Offset to start writing file at */iStartOff85241,3114211
  int mxSz;                       /* Maximum bytes of data to store */mxSz85242,3114283
  int bEof;                       /* Set to true when merge is finished */bEof85243,3114354
  int bUseThread;                 /* True to use a bg thread for this object */bUseThread85244,3114429
  SorterFile aFile[2];            /* aFile[0] for reading, [1] for writing */aFile85245,3114509
struct PmaWriter {PmaWriter85256,3114942
  int eFWErr;                     /* Non-zero if in an error state */eFWErr85257,3114961
  u8 *aBuffer;                    /* Pointer to write buffer */aBuffer85258,3115031
  int nBuffer;                    /* Size of write buffer in bytes */nBuffer85259,3115095
  int iBufStart;                  /* First byte of buffer to write */iBufStart85260,3115165
  int iBufEnd;                    /* Last byte of buffer to write */iBufEnd85261,3115235
  i64 iWriteOff;                  /* Offset of start of buffer in file */iWriteOff85262,3115304
  sqlite3_file *pFd;              /* File handle to write to */pFd85263,3115378
struct SorterRecord {SorterRecord85284,3116409
  int nVal;                       /* Size of the record in bytes */nVal85285,3116431
    SorterRecord *pNext;          /* Pointer to next record in list */pNext85287,3116509
    int iNext;                    /* Offset within aMemory of next record */iNext85288,3116580
  } u;u85289,3116657
#define SRVAL(SRVAL85298,3116910
#define SORTER_MAX_MERGE_COUNT SORTER_MAX_MERGE_COUNT85302,3117028
static void vdbePmaReaderClear(PmaReader *pReadr){vdbePmaReaderClear85311,3117283
static int vdbePmaReadBlob(vdbePmaReadBlob85328,3117850
static int vdbePmaReadVarint(PmaReader *p, u64 *pnOut){vdbePmaReadVarint85422,3121110
static int vdbeSorterMapFile(SortSubtask *pTask, SorterFile *pFile, u8 **pp){vdbeSorterMapFile85455,3122079
static int vdbePmaReaderSeek(vdbePmaReaderSeek85472,3122661
static int vdbePmaReaderNext(PmaReader *pReadr){vdbePmaReaderNext85519,3124097
static int vdbePmaReaderInit(vdbePmaReaderInit85566,3125383
static int vdbeSorterCompareTail(vdbeSorterCompareTail85599,3126396
static int vdbeSorterCompare(vdbeSorterCompare85626,3127546
static int vdbeSorterCompareText(vdbeSorterCompareText85645,3128268
static int vdbeSorterCompareInt(vdbeSorterCompareInt85686,3129423
SQLITE_PRIVATE int sqlite3VdbeSorterInit(sqlite3VdbeSorterInit85769,3132208
# define nWorker nWorker85782,3132937
#undef nWorker nWorker85868,3135717
static void vdbeSorterRecordFree(sqlite3 *db, SorterRecord *pRecord){vdbeSorterRecordFree85873,3135839
static void vdbeSortSubtaskCleanup(sqlite3 *db, SortSubtask *pTask){vdbeSortSubtaskCleanup85886,3136169
static void vdbeSorterWorkDebug(SortSubtask *pTask, const char *zEvent){vdbeSorterWorkDebug85909,3136853
static void vdbeSorterRewindDebug(const char *zEvent){vdbeSorterRewindDebug85915,3137096
static void vdbeSorterPopulateDebug(vdbeSorterPopulateDebug85920,3137261
static void vdbeSorterBlockDebug(vdbeSorterBlockDebug85929,3137516
# define vdbeSorterWorkDebug(vdbeSorterWorkDebug85941,3137764
# define vdbeSorterRewindDebug(vdbeSorterRewindDebug85942,3137798
# define vdbeSorterPopulateDebug(vdbeSorterPopulateDebug85943,3137832
# define vdbeSorterBlockDebug(vdbeSorterBlockDebug85944,3137870
static int vdbeSorterJoinThread(SortSubtask *pTask){vdbeSorterJoinThread85951,3137983
static int vdbeSorterCreateThread(vdbeSorterCreateThread85972,3138541
static int vdbeSorterJoinAll(VdbeSorter *pSorter, int rcin){vdbeSorterJoinAll85985,3139001
# define vdbeSorterJoinAll(vdbeSorterJoinAll86004,3139707
# define vdbeSorterJoinThread(vdbeSorterJoinThread86005,3139749
static MergeEngine *vdbeMergeEngineNew(int nReader){vdbeMergeEngineNew86015,3140043
static void vdbeMergeEngineFree(MergeEngine *pMerger){vdbeMergeEngineFree86038,3140771
static void vdbeIncrFree(IncrMerger *pIncr){vdbeIncrFree86052,3141076
SQLITE_PRIVATE void sqlite3VdbeSorterReset(sqlite3 *db, VdbeSorter *pSorter){sqlite3VdbeSorterReset86069,3141537
SQLITE_PRIVATE void sqlite3VdbeSorterClose(sqlite3 *db, VdbeCursor *pCsr){sqlite3VdbeSorterClose86102,3142490
static void vdbeSorterExtendFile(sqlite3 *db, sqlite3_file *pFd, i64 nByte){vdbeSorterExtendFile86124,3143221
# define vdbeSorterExtendFile(vdbeSorterExtendFile86135,3143643
static int vdbeSorterOpenTempFile(vdbeSorterOpenTempFile86143,3143906
static int vdbeSortAllocUnpacked(SortSubtask *pTask){vdbeSortAllocUnpacked86170,3144814
static SorterRecord *vdbeSorterMerge(vdbeSorterMerge86188,3145318
static SorterCompare vdbeSorterGetCompare(VdbeSorter *p){vdbeSorterGetCompare86230,3146227
static int vdbeSorterSort(SortSubtask *pTask, SorterList *pList){vdbeSorterSort86244,3146644
static void vdbePmaWriterInit(vdbePmaWriterInit86300,3147874
static void vdbePmaWriteBlob(PmaWriter *p, u8 *pData, int nData){vdbePmaWriteBlob86322,3148563
static int vdbePmaWriterFinish(PmaWriter *p, i64 *piEof){vdbePmaWriterFinish86355,3149592
static void vdbePmaWriteVarint(PmaWriter *p, u64 iVal){vdbePmaWriteVarint86374,3150156
static int vdbeSorterListToPMA(SortSubtask *pTask, SorterList *pList){vdbeSorterListToPMA86395,3150916
static int vdbeMergeEngineStep(vdbeMergeEngineStep86459,3152972
static void *vdbeSorterFlushThread(void *pCtx){vdbeSorterFlushThread86530,3155839
static int vdbeSorterFlushPMA(VdbeSorter *pSorter){vdbeSorterFlushPMA86544,3156264
SQLITE_PRIVATE int sqlite3VdbeSorterWrite(sqlite3VdbeSorterWrite86611,3158595
static int vdbeIncrPopulate(IncrMerger *pIncr){vdbeIncrPopulate86719,3162306
static void *vdbeIncrPopulateThread(void *pCtx){vdbeIncrPopulateThread86761,3163640
static int vdbeIncrBgPopulate(IncrMerger *pIncr){vdbeIncrBgPopulate86771,3163903
static int vdbeIncrSwap(IncrMerger *pIncr){vdbeIncrSwap86795,3164863
static int vdbeIncrMergerNew(vdbeIncrMergerNew86834,3165731
static void vdbeIncrMergerSetThreads(IncrMerger *pIncr){vdbeIncrMergerSetThreads86858,3166491
static void vdbeMergeEngineCompare(vdbeMergeEngineCompare86871,3166862
#define INCRINIT_NORMAL INCRINIT_NORMAL86924,3168130
#define INCRINIT_TASK INCRINIT_TASK86925,3168156
#define INCRINIT_ROOT INCRINIT_ROOT86926,3168182
static int vdbeMergeEngineInit(vdbeMergeEngineInit86953,3169289
static int vdbePmaReaderIncrMergeInit(PmaReader *pReadr, int eMode){vdbePmaReaderIncrMergeInit87024,3172617
static void *vdbePmaReaderBgIncrInit(void *pCtx){vdbePmaReaderBgIncrInit87091,3174884
static int vdbePmaReaderIncrInit(PmaReader *pReadr, int eMode){vdbePmaReaderIncrInit87112,3175706
static int vdbeMergeEngineLevel0(vdbeMergeEngineLevel087142,3176832
static int vdbeSorterTreeDepth(int nPMA){vdbeSorterTreeDepth87181,3177934
static int vdbeSorterAddToTree(vdbeSorterAddToTree87199,3178487
static int vdbeSorterMergeTreeBuild(vdbeSorterMergeTreeBuild87255,3180230
static int vdbeSorterSetupMerge(VdbeSorter *pSorter){vdbeSorterSetupMerge87334,3182875
SQLITE_PRIVATE int sqlite3VdbeSorterRewind(const VdbeCursor *pCsr, int *pbEof){sqlite3VdbeSorterRewind87416,3185593
SQLITE_PRIVATE int sqlite3VdbeSorterNext(sqlite3 *db, const VdbeCursor *pCsr, int *pbEof){sqlite3VdbeSorterNext87464,3187027
static void *vdbeSorterRowkey(vdbeSorterRowkey87501,3188279
SQLITE_PRIVATE int sqlite3VdbeSorterRowkey(const VdbeCursor *pCsr, Mem *pOut){sqlite3VdbeSorterRowkey87528,3188962
SQLITE_PRIVATE int sqlite3VdbeSorterCompare(sqlite3VdbeSorterCompare87561,3190172
typedef struct MemJournal MemJournal;MemJournal87629,3192665
typedef struct FilePoint FilePoint;FilePoint87630,3192703
typedef struct FileChunk FileChunk;FileChunk87631,3192739
struct FileChunk {FileChunk87639,3193003
  FileChunk *pNext;               /* Next chunk in the journal */pNext87640,3193022
  u8 zChunk[8];                   /* Content of this chunk */zChunk87641,3193088
#define MEMJOURNAL_DFLT_FILECHUNKSIZE MEMJOURNAL_DFLT_FILECHUNKSIZE87647,3193237
#define fileChunkSize(fileChunkSize87653,3193402
struct FilePoint {FilePoint87659,3193610
  sqlite3_int64 iOffset;          /* Offset from the beginning of the file */iOffset87660,3193629
  FileChunk *pChunk;              /* Specific chunk into which cursor points */pChunk87661,3193707
struct MemJournal {MemJournal87668,3193904
  const sqlite3_io_methods *pMethod; /* Parent class. MUST BE FIRST */pMethod87669,3193924
  int nChunkSize;                 /* In-memory chunk-size */nChunkSize87670,3193995
  int nSpill;                     /* Bytes of data before flushing */nSpill87672,3194057
  int nSize;                      /* Bytes of data currently in memory */nSize87673,3194127
  FileChunk *pFirst;              /* Head of in-memory chunk-list */pFirst87674,3194201
  FilePoint endpoint;             /* Pointer to the end of the file */endpoint87675,3194270
  FilePoint readpoint;            /* Pointer to the end of the last xRead() */readpoint87676,3194341
  int flags;                      /* xOpen flags */flags87678,3194421
  sqlite3_vfs *pVfs;              /* The "real" underlying VFS */pVfs87679,3194473
  const char *zJournal;           /* Name of the journal file */zJournal87680,3194539
static int memjrnlRead(memjrnlRead87687,3194724
static void memjrnlFreeChunks(MemJournal *p){memjrnlFreeChunks87738,3196168
static int memjrnlCreateFile(MemJournal *p){memjrnlCreateFile87751,3196436
static int memjrnlWrite(memjrnlWrite87790,3197555
static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){memjrnlTruncate87868,3200076
static int memjrnlClose(sqlite3_file *pJfd){memjrnlClose87884,3200418
static int memjrnlSync(sqlite3_file *pJfd, int flags){memjrnlSync87896,3200693
static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){memjrnlFileSize87904,3200851
static const struct sqlite3_io_methods MemJournalMethods = {MemJournalMethods87913,3201090
SQLITE_PRIVATE int sqlite3JournalOpen(sqlite3JournalOpen87947,3202426
SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){sqlite3MemJournalOpen87983,3203623
SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){sqlite3JournalCreate87994,3204002
SQLITE_PRIVATE int sqlite3JournalIsInMemory(sqlite3_file *p){sqlite3JournalIsInMemory88008,3204401
SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){sqlite3JournalSize88016,3204639
static SQLITE_NOINLINE int walkExpr(Walker *pWalker, Expr *pExpr){walkExpr88060,3206207
SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){sqlite3WalkExpr88077,3206926
SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){sqlite3WalkExprList88085,3207153
SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){sqlite3WalkSelectExpr88102,3207674
SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){sqlite3WalkSelectFrom88120,3208508
SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){sqlite3WalkSelect88157,3209638
static int incrAggDepth(Walker *pWalker, Expr *pExpr){incrAggDepth88215,3211469
static void incrAggFunctionDepth(Expr *pExpr, int N){incrAggFunctionDepth88219,3211612
static void resolveAlias(resolveAlias88248,3212544
static int nameInUsingClause(IdList *pUsing, const char *zCol){nameInUsingClause88297,3214460
SQLITE_PRIVATE int sqlite3MatchSpanName(sqlite3MatchSpanName88314,3215003
static int lookupName(lookupName88364,3216921
SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){sqlite3CreateColumnExpr88691,3228275
static void notValid(notValid88714,3228946
static int exprProbability(Expr *p){exprProbability88736,3229761
static int resolveExprStep(Walker *pWalker, Expr *pExpr){resolveExprStep88756,3230403
static int resolveAsName(resolveAsName89020,3239828
static int resolveOrderByTermToExprList(resolveOrderByTermToExprList89059,3241110
static void resolveOutOfRangeError(resolveOutOfRangeError89106,3242509
static int resolveCompoundOrderBy(resolveCompoundOrderBy89132,3243623
SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy(sqlite3ResolveOrderGroupBy89230,3246668
static int resolveOrderGroupBy(resolveOrderGroupBy89281,3248700
static int resolveSelectStep(Walker *pWalker, Select *p){resolveSelectStep89339,3250943
SQLITE_PRIVATE int sqlite3ResolveExprNames( sqlite3ResolveExprNames89607,3261257
SQLITE_PRIVATE int sqlite3ResolveExprListNames( sqlite3ResolveExprListNames89652,3262535
SQLITE_PRIVATE void sqlite3ResolveSelectNames(sqlite3ResolveSelectNames89677,3263326
SQLITE_PRIVATE void sqlite3ResolveSelfReference(sqlite3ResolveSelfReference89704,3264134
SQLITE_PRIVATE char sqlite3TableColumnAffinity(Table *pTab, int iCol){sqlite3TableColumnAffinity89753,3266001
SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){sqlite3ExprAffinity89774,3266712
SQLITE_PRIVATE Expr *sqlite3ExprAddCollateToken(sqlite3ExprAddCollateToken89810,3267864
SQLITE_PRIVATE Expr *sqlite3ExprAddCollateString(Parse *pParse, Expr *pExpr, const char *zC){sqlite3ExprAddCollateString89826,3268396
SQLITE_PRIVATE Expr *sqlite3ExprSkipCollate(Expr *pExpr){sqlite3ExprSkipCollate89837,3268738
SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){sqlite3ExprCollSeq89861,3269547
SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){sqlite3CompareAffinity89925,3271609
static char comparisonAffinity(Expr *pExpr){comparisonAffinity89952,3272473
SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){sqlite3IndexAffinityOk89975,3273327
static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){binaryCompareP589991,3273782
SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq(sqlite3BinaryCompareCollSeq90009,3274448
static int codeCompare(codeCompare90032,3274980
SQLITE_PRIVATE int sqlite3ExprIsVector(Expr *pExpr){sqlite3ExprIsVector90062,3276116
SQLITE_PRIVATE int sqlite3ExprVectorSize(Expr *pExpr){sqlite3ExprVectorSize90072,3276478
SQLITE_PRIVATE Expr *sqlite3VectorFieldSubexpr(Expr *pVector, int i){sqlite3VectorFieldSubexpr90100,3277389
SQLITE_PRIVATE Expr *sqlite3ExprForVectorField(sqlite3ExprForVectorField90136,3278825
static int exprCodeSubselect(Parse *pParse, Expr *pExpr){exprCodeSubselect90181,3280612
static int exprVectorRegister(exprVectorRegister90209,3281682
static void codeVectorCompare(codeVectorCompare90242,3282957
SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){sqlite3ExprCheckHeight90323,3285818
static void heightOfExpr(Expr *p, int *pnHeight){heightOfExpr90344,3286519
static void heightOfExprList(ExprList *p, int *pnHeight){heightOfExprList90351,3286654
static void heightOfSelect(Select *p, int *pnHeight){heightOfSelect90359,3286822
static void exprSetHeight(Expr *p){exprSetHeight90382,3287601
SQLITE_PRIVATE void sqlite3ExprSetHeightAndFlags(Parse *pParse, Expr *p){sqlite3ExprSetHeightAndFlags90403,3288247
SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){sqlite3SelectExprHeight90413,3288538
SQLITE_PRIVATE void sqlite3ExprSetHeightAndFlags(Parse *pParse, Expr *p){sqlite3ExprSetHeightAndFlags90423,3288827
#define exprSetHeight(exprSetHeight90428,3289034
SQLITE_PRIVATE Expr *sqlite3ExprAlloc(sqlite3ExprAlloc90451,3290107
SQLITE_PRIVATE Expr *sqlite3Expr(sqlite3Expr90500,3291472
SQLITE_PRIVATE void sqlite3ExprAttachSubtrees(sqlite3ExprAttachSubtrees90517,3292017
SQLITE_PRIVATE Expr *sqlite3PExpr(sqlite3PExpr90547,3292751
SQLITE_PRIVATE void sqlite3PExprAddSelect(Parse *pParse, Expr *pExpr, Select *pSelect){sqlite3PExprAddSelect90572,3293558
static int exprAlwaysTrue(Expr *p){exprAlwaysTrue90598,3294527
static int exprAlwaysFalse(Expr *p){exprAlwaysFalse90604,3294690
SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){sqlite3ExprAnd90619,3295153
SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){sqlite3ExprFunction90639,3295740
SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr, u32 n){sqlite3ExprAssignVarNumber90670,3296842
static SQLITE_NOINLINE void sqlite3ExprDeleteNN(sqlite3 *db, Expr *p){sqlite3ExprDeleteNN90742,3299163
SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){sqlite3ExprDelete90769,3300172
static int exprStructSize(Expr *p){exprStructSize90778,3300463
static int dupedExprStructSize(Expr *p, int flags){dupedExprStructSize90818,3302323
static int dupedExprNodeSize(Expr *p, int flags){dupedExprNodeSize90845,3303186
static int dupedExprSize(Expr *p, int flags){dupedExprSize90866,3304024
static Expr *exprDup(sqlite3 *db, Expr *p, int dupFlags, u8 **pzBuffer){exprDup90885,3304707
static With *withDup(sqlite3 *db, With *p){withDup90982,3308005
# define withDup(withDup91000,3308514
SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){sqlite3ExprDup91020,3309362
SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){sqlite3ExprListDup91024,3309524
SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){sqlite3SrcListDup91061,3310799
SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){sqlite3IdListDup91102,3312333
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){sqlite3SelectDup91126,3313122
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){sqlite3SelectDup91155,3314238
SQLITE_PRIVATE ExprList *sqlite3ExprListAppend(sqlite3ExprListAppend91170,3314673
SQLITE_PRIVATE ExprList *sqlite3ExprListAppendVector(sqlite3ExprListAppendVector91220,3316170
SQLITE_PRIVATE void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder){sqlite3ExprListSetSortOrder91266,3317691
SQLITE_PRIVATE void sqlite3ExprListSetName(sqlite3ExprListSetName91285,3318299
SQLITE_PRIVATE void sqlite3ExprListSetSpan(sqlite3ExprListSetSpan91310,3319166
SQLITE_PRIVATE void sqlite3ExprListCheckLength(sqlite3ExprListCheckLength91331,3319909
static SQLITE_NOINLINE void exprListDeleteNN(sqlite3 *db, ExprList *pList){exprListDeleteNN91347,3320309
SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){sqlite3ExprListDelete91359,3320707
SQLITE_PRIVATE u32 sqlite3ExprListFlags(const ExprList *pList){sqlite3ExprListFlags91367,3320908
static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){exprNodeIsConstant91405,3322382
static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){selectNodeIsConstant91459,3324291
static int exprIsConst(Expr *p, int initFlag, int iCur){exprIsConst91464,3324431
SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){sqlite3ExprIsConstant91483,3324995
SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){sqlite3ExprIsConstantNotJoin91493,3325322
SQLITE_PRIVATE int sqlite3ExprIsTableConstant(Expr *p, int iCur){sqlite3ExprIsTableConstant91503,3325666
SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p, u8 isInit){sqlite3ExprIsConstantOrFunction91516,3326103
SQLITE_PRIVATE int sqlite3ExprContainsSubquery(Expr *p){sqlite3ExprContainsSubquery91526,3326423
SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){sqlite3ExprIsInteger91543,3326973
SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){sqlite3ExprCanBeNull91588,3328339
SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){sqlite3ExprNeedsNoAffinityChange91618,3329199
SQLITE_PRIVATE int sqlite3IsRowid(const char *z){sqlite3IsRowid91651,3330051
static Select *isCandidateForInOpt(Expr *pX){isCandidateForInOpt91666,3330595
static void sqlite3SetHasNullFlag(Vdbe *v, int iCur, int regHasNull){sqlite3SetHasNullFlag91712,3332556
static int sqlite3InRhsIsConstant(Expr *pIn){sqlite3InRhsIsConstant91729,3333113
SQLITE_PRIVATE int sqlite3FindInIndex(sqlite3FindInIndex91823,3337465
static char *exprINAffinity(Parse *pParse, Expr *pExpr){exprINAffinity92045,3346518
SQLITE_PRIVATE void sqlite3SubselectError(Parse *pParse, int nActual, int nExpect){sqlite3SubselectError92077,3347341
SQLITE_PRIVATE int sqlite3CodeSubselect(sqlite3CodeSubselect92113,3349011
SQLITE_PRIVATE int sqlite3ExprCheckIN(Parse *pParse, Expr *pIn){sqlite3ExprCheckIN92357,3358638
static void sqlite3ExprCodeIN(sqlite3ExprCodeIN92402,3360279
static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){codeReal92643,3369836
static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){codeInteger92661,3370372
static void cacheEntryClear(Parse *pParse, int i){cacheEntryClear92697,3371350
SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){sqlite3ExprCacheStore92714,3371826
SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){sqlite3ExprCacheRemove92769,3373537
SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){sqlite3ExprCachePush92786,3373999
SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse){sqlite3ExprCachePop92800,3374428
static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){sqlite3ExprCachePinRegister92824,3375075
SQLITE_PRIVATE void sqlite3ExprCodeLoadIndexColumn(sqlite3ExprCodeLoadIndexColumn92837,3375425
SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable(sqlite3ExprCodeGetColumnOfTable92859,3376244
SQLITE_PRIVATE int sqlite3ExprCodeGetColumn(sqlite3ExprCodeGetColumn92893,3377531
SQLITE_PRIVATE void sqlite3ExprCodeGetColumnToReg(sqlite3ExprCodeGetColumnToReg92921,3378437
SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){sqlite3ExprCacheClear92936,3378968
SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){sqlite3ExprCacheAffinityChange92958,3379491
SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){sqlite3ExprCodeMove92966,3379772
static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){usedAsColumnCache92980,3380303
static void exprToRegister(Expr *p, int iReg){exprToRegister92997,3380790
static int exprCodeVector(Parse *pParse, Expr *p, int *piFreeable){exprCodeVector93014,3381368
SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeTarget93047,3382378
SQLITE_PRIVATE void sqlite3ExprCodeAtInit(sqlite3ExprCodeAtInit93649,3404851
SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){sqlite3ExprCodeTemp93681,3406008
SQLITE_PRIVATE void sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCode93719,3407023
SQLITE_PRIVATE void sqlite3ExprCodeCopy(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeCopy93739,3407729
SQLITE_PRIVATE void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeFactorable93752,3408257
SQLITE_PRIVATE void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeAndCache93772,3408967
SQLITE_PRIVATE int sqlite3ExprCodeExprList(sqlite3ExprCodeExprList93800,3409937
static void exprCodeBetween(exprCodeBetween93861,3411867
SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){sqlite3ExprIfTrue93925,3414513
SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){sqlite3ExprIfFalse94048,3418830
SQLITE_PRIVATE void sqlite3ExprIfFalseDup(Parse *pParse, Expr *pExpr, int dest,int jumpIfNull){sqlite3ExprIfFalseDup94198,3424086
SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB, int iTab){sqlite3ExprCompare94230,3425543
SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB, int iTab){sqlite3ExprListCompare94288,3427636
SQLITE_PRIVATE int sqlite3ExprImpliesExpr(Expr *pE1, Expr *pE2, int iTab){sqlite3ExprImpliesExpr94322,3428998
struct IdxCover {IdxCover94348,3429781
  Index *pIdx;     /* The index to be tested for coverage */pIdx94349,3429799
  int iCur;        /* Cursor number for the table corresponding to the index */iCur94350,3429860
static int exprIdxCover(Walker *pWalker, Expr *pExpr){exprIdxCover94358,3430105
SQLITE_PRIVATE int sqlite3ExprCoveredByIndex(sqlite3ExprCoveredByIndex94379,3430813
struct SrcCount {SrcCount94402,3431498
  SrcList *pSrc;   /* One particular FROM clause in a nested query */pSrc94403,3431516
  int nThis;       /* Number of references to columns in pSrcList */nThis94404,3431586
  int nOther;      /* Number of references to columns in other FROM clauses */nOther94405,3431655
static int exprSrcCount(Walker *pWalker, Expr *pExpr){exprSrcCount94411,3431790
SQLITE_PRIVATE int sqlite3FunctionUsesThisSrc(Expr *pExpr, SrcList *pSrcList){sqlite3FunctionUsesThisSrc94440,3432841
static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){addAggInfoColumn94458,3433366
static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){addAggInfoFunc94474,3433734
static int analyzeAggregate(Walker *pWalker, Expr *pExpr){analyzeAggregate94491,3434138
static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){analyzeAggregatesInSelect94616,3438813
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){sqlite3ExprAnalyzeAggregates94631,3439314
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){sqlite3ExprAnalyzeAggList94647,3439779
SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){sqlite3GetTempReg94660,3440126
SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){sqlite3ReleaseTempReg94675,3440546
SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){sqlite3GetTempRange94692,3440986
SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){sqlite3ReleaseTempRange94707,3441371
SQLITE_PRIVATE void sqlite3ClearTempRegCache(Parse *pParse){sqlite3ClearTempRegCache94722,3441740
SQLITE_PRIVATE int sqlite3NoTempsInRange(Parse *pParse, int iFirst, int iLast){sqlite3NoTempsInRange94733,3442036
static void renameTableFunc(renameTableFunc94788,3443787
static void renameParentFunc(renameParentFunc94853,3445852
static void renameTriggerFunc(renameTriggerFunc94910,3447781
SQLITE_PRIVATE void sqlite3AlterFunctions(void){sqlite3AlterFunctions94982,3450019
static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){whereOrName95011,3451142
static char *whereForeignKeys(Parse *pParse, Table *pTab){whereForeignKeys95029,3451736
static char *whereTempTriggers(Parse *pParse, Table *pTab){whereTempTriggers95045,3452238
static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){reloadTableSchema95079,3453511
static int isSystemTable(Parse *pParse, const char *zName){isSystemTable95128,3455263
SQLITE_PRIVATE void sqlite3AlterRenameTable(sqlite3AlterRenameTable95140,3455586
SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){sqlite3AlterFinishAddColumn95344,3462411
SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){sqlite3AlterBeginAddColumn95482,3467261
# define IsStat4 IsStat495708,3477304
# define IsStat3 IsStat395709,3477327
# define IsStat4 IsStat495711,3477385
# define IsStat3 IsStat395712,3477408
# define IsStat4 IsStat495714,3477437
# define IsStat3 IsStat395715,3477460
# undef SQLITE_STAT4_SAMPLESSQLITE_STAT4_SAMPLES95716,3477483
# define SQLITE_STAT4_SAMPLES SQLITE_STAT4_SAMPLES95717,3477512
#define IsStat34 IsStat3495719,3477551
static void openStatTable(openStatTable95734,3478252
# define SQLITE_STAT4_SAMPLES SQLITE_STAT4_SAMPLES95819,3481108
typedef struct Stat4Accum Stat4Accum;Stat4Accum95827,3481307
typedef struct Stat4Sample Stat4Sample;Stat4Sample95828,3481345
struct Stat4Sample {Stat4Sample95829,3481385
  tRowcnt *anEq;                  /* sqlite_stat4.nEq */anEq95830,3481406
  tRowcnt *anDLt;                 /* sqlite_stat4.nDLt */anDLt95831,3481463
  tRowcnt *anLt;                  /* sqlite_stat4.nLt */anLt95833,3481557
    i64 iRowid;                     /* Rowid in main table of the key */iRowid95835,3481624
    u8 *aRowid;                     /* Key for WITHOUT ROWID tables */aRowid95836,3481697
  } u;u95837,3481768
  u32 nRowid;                     /* Sizeof aRowid[] */nRowid95838,3481775
  u8 isPSample;                   /* True if a periodic sample */isPSample95839,3481831
  int iCol;                       /* If !isPSample, the reason for inclusion */iCol95840,3481897
  u32 iHash;                      /* Tiebreaker hash */iHash95841,3481977
struct Stat4Accum {Stat4Accum95844,3482095
  tRowcnt nRow;             /* Number of rows in the entire table */nRow95845,3482115
  tRowcnt nPSample;         /* How often to do a periodic sample */nPSample95846,3482184
  int nCol;                 /* Number of columns in index + pk/rowid */nCol95847,3482252
  int nKeyCol;              /* Number of index columns w/o the pk/rowid */nKeyCol95848,3482324
  int mxSample;             /* Maximum number of samples to accumulate */mxSample95849,3482399
  Stat4Sample current;      /* Current row as a Stat4Sample */current95850,3482473
  u32 iPrn;                 /* Pseudo-random number used for sampling */iPrn95851,3482536
  Stat4Sample *aBest;       /* Array of nCol best samples */aBest95852,3482609
  int iMin;                 /* Index in a[] of entry with minimum score */iMin95853,3482670
  int nSample;              /* Current number of samples */nSample95854,3482745
  int iGet;                 /* Index of current sample accessed by stat_get() */iGet95855,3482805
  Stat4Sample *a;           /* Array of mxSample Stat4Sample objects */a95856,3482886
  sqlite3 *db;              /* Database connection, for malloc() */db95857,3482958
static void sampleClear(sqlite3 *db, Stat4Sample *p){sampleClear95863,3483109
static void sampleSetRowid(sqlite3 *db, Stat4Sample *p, int n, const u8 *pData){sampleSetRowid95875,3483349
static void sampleSetRowidInt64(sqlite3 *db, Stat4Sample *p, i64 iRowid){sampleSetRowidInt6495891,3483744
static void sampleCopy(Stat4Accum *p, Stat4Sample *pTo, Stat4Sample *pFrom){sampleCopy95904,3484034
static void stat4Destructor(void *pOld){stat4Destructor95922,3484602
static void statInit(statInit95956,3485956
static const FuncDef statInitFuncdef = {statInitFuncdef96038,3488843
static int sampleIsBetterPost(sampleIsBetterPost96061,3489737
static int sampleIsBetter(sampleIsBetter96085,3490352
static void sampleInsert(Stat4Accum *p, Stat4Sample *pNew, int nEqZero){sampleInsert96112,3491081
static void samplePushPrevious(Stat4Accum *p, int iChng){samplePushPrevious96202,3493871
static void statPush(statPush96268,3495942
static const FuncDef statPushFuncdef = {statPushFuncdef96337,3497890
#define STAT_GET_STAT1 STAT_GET_STAT196348,3498170
#define STAT_GET_ROWID STAT_GET_ROWID96349,3498239
#define STAT_GET_NEQ STAT_GET_NEQ96350,3498312
#define STAT_GET_NLT STAT_GET_NLT96351,3498383
#define STAT_GET_NDLT STAT_GET_NDLT96352,3498454
static void statGet(statGet96367,3499166
static const FuncDef statGetFuncdef = {statGetFuncdef96482,3502647
static void callStatGet(Vdbe *v, int regStat4, int iParam, int regOut){callStatGet96493,3502926
static void analyzeOneTable(analyzeOneTable96511,3503489
static void loadAnalysis(Parse *pParse, int iDb){loadAnalysis96837,3515857
static void analyzeDatabase(Parse *pParse, int iDb){analyzeDatabase96847,3516079
static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){analyzeTable96874,3516907
SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){sqlite3Analyze96905,3517973
typedef struct analysisInfo analysisInfo;analysisInfo96969,3519861
struct analysisInfo {analysisInfo96970,3519903
  sqlite3 *db;db96971,3519925
  const char *zDatabase;zDatabase96972,3519940
static void decodeIntArray(decodeIntArray96980,3520136
static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){analysisLoader97051,3522044
SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){sqlite3DeleteIndexSamples97109,3523762
static void initAvgEq(Index *pIdx){initAvgEq97134,3524389
static Index *findIndexOrPrimaryKey(findIndexOrPrimaryKey97193,3526524
static int loadStatTbl(loadStatTbl97219,3527361
static int loadStat4(sqlite3 *db, const char *zDb){loadStat497343,3532145
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){sqlite3AnalysisLoad97387,3533758
static int resolveAttachExpr(NameContext *pName, Expr *pExpr)resolveAttachExpr97487,3536892
static void attachFunc(attachFunc97511,3537472
static void detachFunc(detachFunc97713,3543501
static void codeAttach(codeAttach97765,3544850
SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){sqlite3Detach97839,3547026
SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){sqlite3Attach97858,3547572
SQLITE_PRIVATE void sqlite3FixInit(sqlite3FixInit97877,3548217
SQLITE_PRIVATE int sqlite3FixSrcList(sqlite3FixSrcList97910,3549559
SQLITE_PRIVATE int sqlite3FixSelect(sqlite3FixSelect97940,3550563
SQLITE_PRIVATE int sqlite3FixExpr(sqlite3FixExpr97973,3551390
SQLITE_PRIVATE int sqlite3FixExprList(sqlite3FixExprList97999,3552161
SQLITE_PRIVATE int sqlite3FixTriggerStep(sqlite3FixTriggerStep98016,3552571
SQLITE_API int sqlite3_set_authorizer(sqlite3_set_authorizer98107,3555714
static void sqliteAuthBadReturnCode(Parse *pParse){sqliteAuthBadReturnCode98127,3556290
SQLITE_PRIVATE int sqlite3AuthReadCol(sqlite3AuthReadCol98141,3556885
SQLITE_PRIVATE void sqlite3AuthRead(sqlite3AuthRead98179,3558325
SQLITE_PRIVATE int sqlite3AuthCheck(sqlite3AuthCheck98236,3560173
SQLITE_PRIVATE void sqlite3AuthContextPush(sqlite3AuthContextPush98276,3561213
SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){sqlite3AuthContextPop98291,3561556
struct TableLock {TableLock98333,3562830
  int iDb;             /* The database containing the table to be locked */iDb98334,3562849
  int iTab;            /* The root page of the table to be locked */iTab98335,3562925
  u8 isWriteLock;      /* True for write lock.  False for a read lock */isWriteLock98336,3562994
  const char *zName;   /* Name of the table */zName98337,3563067
SQLITE_PRIVATE void sqlite3TableLock(sqlite3TableLock98350,3563528
static void codeTableLocks(Parse *pParse){codeTableLocks98390,3564730
  #define codeTableLocks(codeTableLocks98405,3565144
SQLITE_PRIVATE int sqlite3DbMaskAllZero(yDbMask m){sqlite3DbMaskAllZero98414,3565416
SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){sqlite3FinishCoding98431,3565916
SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){sqlite3NestedParse98550,3570065
SQLITE_PRIVATE int sqlite3UserAuthTable(const char *zTable){sqlite3UserAuthTable98580,3570968
SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){sqlite3FindTable98597,3571609
SQLITE_PRIVATE Table *sqlite3LocateTable(sqlite3LocateTable98631,3572851
SQLITE_PRIVATE Table *sqlite3LocateTableItem(sqlite3LocateTableItem98681,3574607
SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){sqlite3FindIndex98709,3575465
static void freeIndex(sqlite3 *db, Index *p){freeIndex98729,3576124
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){sqlite3UnlinkAndDeleteIndex98749,3576740
SQLITE_PRIVATE void sqlite3CollapseDatabaseArray(sqlite3 *db){sqlite3CollapseDatabaseArray98782,3577806
SQLITE_PRIVATE void sqlite3ResetOneSchema(sqlite3 *db, int iDb){sqlite3ResetOneSchema98808,3578396
SQLITE_PRIVATE void sqlite3ResetAllSchemasOfConnection(sqlite3 *db){sqlite3ResetAllSchemasOfConnection98834,3579117
SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){sqlite3CommitInternalChanges98852,3579540
SQLITE_PRIVATE void sqlite3DeleteColumnNames(sqlite3 *db, Table *pTable){sqlite3DeleteColumnNames98860,3579746
static void SQLITE_NOINLINE deleteTable(sqlite3 *db, Table *pTable){deleteTable98889,3580774
SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){sqlite3DeleteTable98933,3582459
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){sqlite3UnlinkAndDeleteTable98945,3582853
SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){sqlite3NameFromToken98973,3583824
SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){sqlite3OpenMasterTable98988,3584179
SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){sqlite3FindDbName99003,3584702
SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){sqlite3FindDb99020,3585217
SQLITE_PRIVATE int sqlite3TwoPartName(sqlite3TwoPartName99045,3586099
SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){sqlite3CheckObjectName99081,3587283
SQLITE_PRIVATE Index *sqlite3PrimaryKeyIndex(Table *pTab){sqlite3PrimaryKeyIndex99094,3587706
SQLITE_PRIVATE i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){sqlite3ColumnOfIndex99104,3587964
SQLITE_PRIVATE void sqlite3StartTable(sqlite3StartTable99128,3589001
SQLITE_PRIVATE void sqlite3ColumnPropertiesFromName(Table *pTab, Column *pCol){sqlite3ColumnPropertiesFromName99318,3595834
SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName, Token *pType){sqlite3AddColumn99336,3596424
SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){sqlite3AddNotNull99399,3598192
SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn, u8 *pszEst){sqlite3AffinityType99431,3599296
SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){sqlite3AddDefaultValue99503,3601678
static void sqlite3StringToId(Expr *p){sqlite3StringToId99549,3603443
SQLITE_PRIVATE void sqlite3AddPrimaryKey(sqlite3AddPrimaryKey99575,3604429
SQLITE_PRIVATE void sqlite3AddCheckConstraint(sqlite3AddCheckConstraint99645,3606563
SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){sqlite3AddCollateType99670,3607257
SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){sqlite3LocateCollSeq99722,3609010
SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){sqlite3ChangeCookie99756,3610217
static int identLength(const char *z){identLength99772,3610775
static void identPut(char *z, int *pIdx, char *zSignedIdent){identPut99793,3611564
static char *createTableStmt(sqlite3 *db, Table *p){createTableStmt99821,3612341
static int resizeIndexObject(sqlite3 *db, Index *pIdx, int N){resizeIndexObject99889,3614296
static void estimateTableWidth(Table *pTab){estimateTableWidth99913,3615050
static void estimateIndexWidth(Index *pIdx){estimateIndexWidth99927,3615385
static int hasColumn(const i16 *aiCol, int nCol, int x){hasColumn99941,3615791
static void convertToWithoutRowidTable(Parse *pParse, Table *pTab){convertToWithoutRowidTable99971,3617274
SQLITE_PRIVATE void sqlite3EndTable(sqlite3EndTable100118,3622198
SQLITE_PRIVATE void sqlite3CreateView(sqlite3CreateView100360,3630344
SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){sqlite3ViewGetColumnNames100432,3632875
static void sqliteViewResetAll(sqlite3 *db, int idx){sqliteViewResetAll100546,3636841
# define sqliteViewResetAll(sqliteViewResetAll100561,3637307
SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){sqlite3RootPageMoved100582,3638283
static void destroyRootPage(Parse *pParse, int iTable, int iDb){destroyRootPage100612,3639206
static void destroyTable(Parse *pParse, Table *pTab){destroyTable100641,3640413
static void sqlite3ClearStatTables(sqlite3ClearStatTables100699,3642190
SQLITE_PRIVATE void sqlite3CodeDropTable(Parse *pParse, Table *pTab, int iDb, int isView){sqlite3CodeDropTable100722,3642823
SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){sqlite3DropTable100793,3645167
SQLITE_PRIVATE void sqlite3CreateForeignKey(sqlite3CreateForeignKey100909,3648817
SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){sqlite3DeferForeignKey101030,3652210
static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){sqlite3RefillIndex101051,3653072
SQLITE_PRIVATE Index *sqlite3AllocateIndexObject(sqlite3AllocateIndexObject101138,3656782
SQLITE_PRIVATE void sqlite3CreateIndex(sqlite3CreateIndex101178,3658651
SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){sqlite3DefaultRowEst101736,3678801
SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){sqlite3DropIndex101765,3679922
SQLITE_PRIVATE void *sqlite3ArrayAllocate(sqlite3ArrayAllocate101846,3682736
SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){sqlite3IdListAppend101877,3683580
SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){sqlite3IdListDelete101901,3684071
SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){sqlite3IdListIndex101915,3684405
SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge(sqlite3SrcListEnlarge101943,3685370
SQLITE_PRIVATE SrcList *sqlite3SrcListAppend(sqlite3SrcListAppend102025,3688155
SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){sqlite3SrcListAssignCursors102062,3689246
SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){sqlite3SrcListDelete102080,3689743
SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm(sqlite3SrcListAppendFromTerm102114,3691229
SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){sqlite3SrcListIndexedBy102158,3692680
SQLITE_PRIVATE void sqlite3SrcListFuncArgs(Parse *pParse, SrcList *p, ExprList *pList){sqlite3SrcListFuncArgs102180,3693437
SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){sqlite3SrcListShiftJoinType102208,3694421
SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){sqlite3BeginTransaction102221,3694680
SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){sqlite3CommitTransaction102246,3695247
SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){sqlite3RollbackTransaction102263,3695602
SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){sqlite3Savepoint102281,3696035
SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){sqlite3OpenTempDatabase102301,3696781
SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){sqlite3CodeVerifySchema102336,3697840
SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){sqlite3CodeVerifyNamedSchema102355,3698489
SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){sqlite3BeginWriteOperation102379,3699472
SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){sqlite3MultiWrite102393,3700093
SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){sqlite3MayAbort102414,3701098
SQLITE_PRIVATE void sqlite3HaltConstraint(sqlite3HaltConstraint102424,3701429
SQLITE_PRIVATE void sqlite3UniqueConstraint(sqlite3UniqueConstraint102444,3702062
SQLITE_PRIVATE void sqlite3RowidConstraint(sqlite3RowidConstraint102477,3703039
static int collationMatch(const char *zColl, Index *pIndex){collationMatch102501,3703823
static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){reindexTable102520,3704305
static void reindexDatabases(Parse *pParse, char const *zColl){reindexDatabases102539,3704937
SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){sqlite3Reindex102571,3706168
SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoOfIndex(Parse *pParse, Index *pIdx){sqlite3KeyInfoOfIndex102631,3708157
SQLITE_PRIVATE With *sqlite3WithAdd(sqlite3WithAdd102663,3709019
SQLITE_PRIVATE void sqlite3WithDelete(sqlite3 *db, With *pWith){sqlite3WithDelete102713,3710503
static void callCollNeeded(sqlite3 *db, int enc, const char *zName){callCollNeeded102751,3711704
static int synthCollSeq(sqlite3 *db, CollSeq *pColl){synthCollSeq102780,3712741
SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq(sqlite3GetCollSeq102810,3713852
SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){sqlite3CheckCollSeq102851,3715298
static CollSeq *findCollSeqEntry(findCollSeqEntry102879,3716227
SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq(sqlite3FindCollSeq102932,3718024
#define FUNC_PERFECT_MATCH FUNC_PERFECT_MATCH102978,3719775
static int matchQuality(matchQuality102979,3719841
static FuncDef *functionSearch(functionSearch103014,3720904
SQLITE_PRIVATE void sqlite3InsertBuiltinFuncs(sqlite3InsertBuiltinFuncs103030,3721249
SQLITE_PRIVATE FuncDef *sqlite3FindFunction(sqlite3FindFunction103074,3722857
SQLITE_PRIVATE void sqlite3SchemaClear(void *p){sqlite3SchemaClear103164,3725960
SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){sqlite3SchemaGet103196,3726900
SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){sqlite3SrcListLookup103247,3728711
SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){sqlite3IsReadOnly103268,3729271
SQLITE_PRIVATE void sqlite3MaterializeView(sqlite3MaterializeView103305,3730549
SQLITE_PRIVATE Expr *sqlite3LimitWhere(sqlite3LimitWhere103342,3731989
SQLITE_PRIVATE void sqlite3DeleteFrom(sqlite3DeleteFrom103424,3735210
# undef isViewisView103492,3738491
# define isView isView103493,3738506
 #undef isViewisView103796,3749347
 #undef pTriggerpTrigger103799,3749385
SQLITE_PRIVATE void sqlite3GenerateRowDelete(sqlite3GenerateRowDelete103841,3751186
SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete(sqlite3GenerateRowIndexDelete103985,3757424
SQLITE_PRIVATE int sqlite3GenerateIndexKey(sqlite3GenerateIndexKey104049,3760614
SQLITE_PRIVATE void sqlite3ResolvePartIdxLabel(Parse *pParse, int iLabel){sqlite3ResolvePartIdxLabel104107,3762897
static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){sqlite3GetFuncCollSeq104139,3763986
static void sqlite3SkipAccumulatorLoad(sqlite3_context *context){sqlite3SkipAccumulatorLoad104152,3764350
static void minmaxFunc(minmaxFunc104159,3764515
static void typeofFunc(typeofFunc104189,3765233
static void lengthFunc(lengthFunc104210,3765763
static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){absFunc104250,3766590
static void instrFunc(instrFunc104299,3768307
static void printfFunc(printfFunc104343,3769465
static void substrFunc(substrFunc104379,3770527
static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){roundFunc104474,3772733
static void *contextMalloc(sqlite3_context *context, i64 nByte){contextMalloc104515,3774019
static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){upperFunc104536,3774565
static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){lowerFunc104555,3775145
#define noopFunc noopFunc104583,3776170
static void randomFunc(randomFunc104588,3776308
static void randomBlob(randomBlob104614,3777126
static void last_insert_rowid(last_insert_rowid104638,3777643
static void changes(changes104658,3778285
static void total_changes(total_changes104672,3778665
struct compareInfo {compareInfo104687,3779093
  u8 matchAll;          /* "*" or "%" */matchAll104688,3779114
  u8 matchOne;          /* "?" or "_" */matchOne104689,3779155
  u8 matchSet;          /* "[" or 0 */matchSet104690,3779196
  u8 noCase;            /* true to ignore case differences */noCase104691,3779235
# define sqlite3Utf8Read(sqlite3Utf8Read104701,3779578
# define Utf8Read(Utf8Read104702,3779625
# define Utf8Read(Utf8Read104704,3779675
static const struct compareInfo globInfo = { '*', '?', '[', 0 };globInfo104707,3779757
static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };likeInfoNorm104710,3779935
static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };likeInfoAlt104713,3780129
static int patternCompare(patternCompare104750,3781456
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){sqlite3_strglob104872,3785559
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){sqlite3_strlike104879,3785760
SQLITE_API int sqlite3_like_count = 0;sqlite3_like_count104889,3786099
static void likeFunc(likeFunc104905,3786527
static void nullifFunc(nullifFunc104970,3788452
static void versionFunc(versionFunc104986,3788858
static void sourceidFunc(sourceidFunc105002,3789350
static void errlogFunc(errlogFunc105018,3789848
static void compileoptionusedFunc(compileoptionusedFunc105034,3790279
static void compileoptiongetFunc(compileoptiongetFunc105058,3790991
static const char hexdigits[] = {hexdigits105076,3791535
static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){quoteFunc105088,3791979
static void unicodeFunc(unicodeFunc105164,3794219
static void charFunc(charFunc105179,3794669
static void hexFunc(hexFunc105220,3795830
static void zeroblobFunc(zeroblobFunc105248,3796538
static void replaceFunc(replaceFunc105271,3797140
static void trimFunc(trimFunc105355,3799900
static void unknownFunc(unknownFunc105446,3802771
static void soundexFunc(soundexFunc105467,3803286
static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){loadExt105520,3804856
typedef struct SumCtx SumCtx;SumCtx105551,3805732
struct SumCtx {SumCtx105552,3805762
  double rSum;      /* Floating point sum */rSum105553,3805778
  i64 iSum;         /* Integer sum */   iSum105554,3805823
  i64 cnt;          /* Number of elements summed */cnt105555,3805864
  u8 overflow;      /* True if integer overflow seen */overflow105556,3805916
  u8 approx;        /* True if non-integer value was input to the sum */approx105557,3805972
static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){sumStep105570,3806486
static void sumFinalize(sqlite3_context *context){sumFinalize105591,3807076
static void avgFinalize(sqlite3_context *context){avgFinalize105604,3807433
static void totalFinalize(sqlite3_context *context){totalFinalize105611,3807631
typedef struct CountCtx CountCtx;CountCtx105622,3807968
struct CountCtx {CountCtx105623,3808002
  i64 n;n105624,3808020
static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){countStep105630,3808096
static void countFinalize(sqlite3_context *context){countFinalize105646,3808740
static void minmaxStep(minmaxStep105655,3808971
static void minMaxFinalize(sqlite3_context *context){minMaxFinalize105693,3810250
static void groupConcatStep(groupConcatStep105707,3810559
static void groupConcatFinalize(sqlite3_context *context){groupConcatFinalize105739,3811478
SQLITE_PRIVATE void sqlite3RegisterPerConnectionBuiltinFunctions(sqlite3 *db){sqlite3RegisterPerConnectionBuiltinFunctions105759,3812147
static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){setLikeOptFlag105770,3812463
SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){sqlite3RegisterLikeFunctions105783,3812859
SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){sqlite3IsLikeFunction105811,3814068
SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(void){sqlite3RegisterBuiltinFunctions105844,3815221
SQLITE_PRIVATE int sqlite3FkLocateIndex(sqlite3FkLocateIndex106150,3829053
static void fkLookupParent(fkLookupParent106285,3834572
static Expr *exprTableRegister(exprTableRegister106426,3840810
static Expr *exprTableColumn(exprTableColumn106458,3841737
static void fkScanChildren(fkScanChildren106505,3843810
SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){sqlite3FkReferences106630,3849021
static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){fkTriggerDelete106642,3849469
SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){sqlite3FkDropTable106670,3850548
static int fkChildIsModified(fkChildIsModified106731,3853060
static int fkParentIsModified(fkParentIsModified106758,3854189
static int isSetNullAction(Parse *pParse, FKey *pFKey){isSetNullAction106787,3854886
SQLITE_PRIVATE void sqlite3FkCheck(sqlite3FkCheck106820,3856206
#define COLUMN_MASK(COLUMN_MASK107014,3864210
SQLITE_PRIVATE u32 sqlite3FkOldmask(sqlite3FkOldmask107020,3864385
SQLITE_PRIVATE int sqlite3FkRequired(sqlite3FkRequired107060,3865817
static Trigger *fkActionTrigger(fkActionTrigger107120,3868217
SQLITE_PRIVATE void sqlite3FkActions(sqlite3FkActions107306,3875092
SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){sqlite3FkDelete107338,3876475
SQLITE_PRIVATE void sqlite3OpenTable(sqlite3OpenTable107404,3878659
SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(sqlite3 *db, Index *pIdx){sqlite3IndexAffinityStr107450,3880319
SQLITE_PRIVATE void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){sqlite3TableAffinity107508,3882259
static int readsTable(Parse *p, int iDb, Table *pTab){readsTable107543,3883250
static int autoIncBegin(autoIncBegin107600,3885124
SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){sqlite3AutoincrementBegin107634,3886271
static void autoIncStep(Parse *pParse, int memId, int regRowid){autoIncStep107689,3888305
static SQLITE_NOINLINE void autoIncrementEnd(Parse *pParse){autoIncrementEnd107702,3888766
SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){sqlite3AutoincrementEnd107737,3889852
# define autoIncBegin(autoIncBegin107745,3890066
# define autoIncStep(autoIncStep107746,3890099
SQLITE_PRIVATE void sqlite3Insert(sqlite3Insert107856,3894432
# undef isViewisView107947,3898390
# define isView isView107948,3898405
 #undef isViewisView108450,3916159
 #undef pTriggerpTrigger108453,3916197
 #undef tmasktmask108456,3916234
#define CKCNSTRNT_COLUMN CKCNSTRNT_COLUMN108462,3916334
#define CKCNSTRNT_ROWID CKCNSTRNT_ROWID108463,3916415
static int checkConstraintExprNode(Walker *pWalker, Expr *pExpr){checkConstraintExprNode108470,3916727
static int checkConstraintUnchanged(Expr *pExpr, int *aiChng, int chngRowid){checkConstraintUnchanged108494,3917560
SQLITE_PRIVATE void sqlite3GenerateConstraintChecks(sqlite3GenerateConstraintChecks108595,3922708
SQLITE_PRIVATE void sqlite3CompleteInsertion(sqlite3CompleteInsertion109036,3940023
SQLITE_PRIVATE int sqlite3OpenTableAndIndices(sqlite3OpenTableAndIndices109120,3943499
SQLITE_API int sqlite3_xferopt_count;sqlite3_xferopt_count109182,3945681
static int xferCompatibleIndex(Index *pDest, Index *pSrc){xferCompatibleIndex109198,3946226
static int xferOptimization(xferOptimization109259,3948672
SQLITE_API int sqlite3_exec(sqlite3_exec109600,3962710
  #define SQLITE_CORE SQLITE_CORE109734,3966918
#define SQLITE3EXT_HSQLITE3EXT_H109756,3967823
struct sqlite3_api_routines {sqlite3_api_routines109769,3968245
  void * (*aggregate_context)(sqlite3_context*,int nBytes);aggregate_context109770,3968275
  int  (*aggregate_count)(sqlite3_context*);aggregate_count109771,3968335
  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));bind_blob109772,3968380
  int  (*bind_double)(sqlite3_stmt*,int,double);bind_double109773,3968453
  int  (*bind_int)(sqlite3_stmt*,int,int);bind_int109774,3968502
  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);bind_int64109775,3968545
  int  (*bind_null)(sqlite3_stmt*,int);bind_null109776,3968599
  int  (*bind_parameter_count)(sqlite3_stmt*);bind_parameter_count109777,3968639
  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);bind_parameter_index109778,3968686
  const char * (*bind_parameter_name)(sqlite3_stmt*,int);bind_parameter_name109779,3968750
  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));bind_text109780,3968808
  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));bind_text16109781,3968881
  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);bind_value109782,3968954
  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);busy_handler109783,3969016
  int  (*busy_timeout)(sqlite3*,int ms);busy_timeout109784,3969074
  int  (*changes)(sqlite3*);changes109785,3969115
  int  (*close)(sqlite3*);close109786,3969144
  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,collation_needed109787,3969171
  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,collation_needed16109789,3969292
  const void * (*column_blob)(sqlite3_stmt*,int iCol);column_blob109791,3969417
  int  (*column_bytes)(sqlite3_stmt*,int iCol);column_bytes109792,3969472
  int  (*column_bytes16)(sqlite3_stmt*,int iCol);column_bytes16109793,3969520
  int  (*column_count)(sqlite3_stmt*pStmt);column_count109794,3969570
  const char * (*column_database_name)(sqlite3_stmt*,int);column_database_name109795,3969614
  const void * (*column_database_name16)(sqlite3_stmt*,int);column_database_name16109796,3969673
  const char * (*column_decltype)(sqlite3_stmt*,int i);column_decltype109797,3969734
  const void * (*column_decltype16)(sqlite3_stmt*,int);column_decltype16109798,3969790
  double  (*column_double)(sqlite3_stmt*,int iCol);column_double109799,3969846
  int  (*column_int)(sqlite3_stmt*,int iCol);column_int109800,3969898
  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);column_int64109801,3969944
  const char * (*column_name)(sqlite3_stmt*,int);column_name109802,3970001
  const void * (*column_name16)(sqlite3_stmt*,int);column_name16109803,3970051
  const char * (*column_origin_name)(sqlite3_stmt*,int);column_origin_name109804,3970103
  const void * (*column_origin_name16)(sqlite3_stmt*,int);column_origin_name16109805,3970160
  const char * (*column_table_name)(sqlite3_stmt*,int);column_table_name109806,3970219
  const void * (*column_table_name16)(sqlite3_stmt*,int);column_table_name16109807,3970275
  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);column_text109808,3970333
  const void * (*column_text16)(sqlite3_stmt*,int iCol);column_text16109809,3970397
  int  (*column_type)(sqlite3_stmt*,int iCol);column_type109810,3970454
  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);column_value109811,3970501
  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);commit_hook109812,3970559
  int  (*complete)(const char*sql);complete109813,3970614
  int  (*complete16)(const void*sql);complete16109814,3970650
  int  (*create_collation)(sqlite3*,const char*,int,void*,create_collation109815,3970688
  int  (*create_collation16)(sqlite3*,const void*,int,void*,create_collation16109817,3970822
  int  (*create_function)(sqlite3*,const char*,int,int,void*,create_function109819,3970960
  int  (*create_function16)(sqlite3*,const void*,int,int,void*,create_function16109823,3971241
  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);create_module109827,3971530
  int  (*data_count)(sqlite3_stmt*pStmt);data_count109828,3971604
  sqlite3 * (*db_handle)(sqlite3_stmt*);db_handle109829,3971646
  int (*declare_vtab)(sqlite3*,const char*);declare_vtab109830,3971687
  int  (*enable_shared_cache)(int);enable_shared_cache109831,3971732
  int  (*errcode)(sqlite3*db);errcode109832,3971768
  const char * (*errmsg)(sqlite3*);errmsg109833,3971799
  const void * (*errmsg16)(sqlite3*);errmsg16109834,3971835
  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);exec109835,3971873
  int  (*expired)(sqlite3_stmt*);expired109836,3971941
  int  (*finalize)(sqlite3_stmt*pStmt);finalize109837,3971975
  void  (*free)(void*);free109838,3972015
  void  (*free_table)(char**result);free_table109839,3972039
  int  (*get_autocommit)(sqlite3*);get_autocommit109840,3972076
  void * (*get_auxdata)(sqlite3_context*,int);get_auxdata109841,3972112
  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);get_table109842,3972159
  int  (*global_recover)(void);global_recover109843,3972227
  void  (*interruptx)(sqlite3*);interruptx109844,3972259
  sqlite_int64  (*last_insert_rowid)(sqlite3*);last_insert_rowid109845,3972292
  const char * (*libversion)(void);libversion109846,3972340
  int  (*libversion_number)(void);libversion_number109847,3972376
  void *(*malloc)(int);malloc109848,3972411
  char * (*mprintf)(const char*,...);mprintf109849,3972435
  int  (*open)(const char*,sqlite3**);open109850,3972473
  int  (*open16)(const void*,sqlite3**);open16109851,3972512
  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);prepare109852,3972553
  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);prepare16109853,3972626
  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);profile109854,3972701
  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);progress_handler109855,3972779
  void *(*realloc)(void*,int);realloc109856,3972842
  int  (*reset)(sqlite3_stmt*pStmt);reset109857,3972873
  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));result_blob109858,3972910
  void  (*result_double)(sqlite3_context*,double);result_double109859,3972983
  void  (*result_error)(sqlite3_context*,const char*,int);result_error109860,3973034
  void  (*result_error16)(sqlite3_context*,const void*,int);result_error16109861,3973093
  void  (*result_int)(sqlite3_context*,int);result_int109862,3973154
  void  (*result_int64)(sqlite3_context*,sqlite_int64);result_int64109863,3973199
  void  (*result_null)(sqlite3_context*);result_null109864,3973255
  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));result_text109865,3973297
  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));result_text16109866,3973370
  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));result_text16be109867,3973445
  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));result_text16le109868,3973522
  void  (*result_value)(sqlite3_context*,sqlite3_value*);result_value109869,3973599
  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);rollback_hook109870,3973657
  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,set_authorizer109871,3973715
  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));set_auxdata109873,3973849
  char * (*snprintf)(int,char*,const char*,...);snprintf109874,3973917
  int  (*step)(sqlite3_stmt*);step109875,3973966
  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,table_column_metadata109876,3973997
  void  (*thread_cleanup)(void);thread_cleanup109878,3974150
  int  (*total_changes)(sqlite3*);total_changes109879,3974183
  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);trace109880,3974218
  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);transfer_bindings109881,3974286
  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,update_hook109882,3974344
  void * (*user_data)(sqlite3_context*);user_data109884,3974484
  const void * (*value_blob)(sqlite3_value*);value_blob109885,3974525
  int  (*value_bytes)(sqlite3_value*);value_bytes109886,3974571
  int  (*value_bytes16)(sqlite3_value*);value_bytes16109887,3974610
  double  (*value_double)(sqlite3_value*);value_double109888,3974651
  int  (*value_int)(sqlite3_value*);value_int109889,3974694
  sqlite_int64  (*value_int64)(sqlite3_value*);value_int64109890,3974731
  int  (*value_numeric_type)(sqlite3_value*);value_numeric_type109891,3974779
  const unsigned char * (*value_text)(sqlite3_value*);value_text109892,3974825
  const void * (*value_text16)(sqlite3_value*);value_text16109893,3974880
  const void * (*value_text16be)(sqlite3_value*);value_text16be109894,3974928
  const void * (*value_text16le)(sqlite3_value*);value_text16le109895,3974978
  int  (*value_type)(sqlite3_value*);value_type109896,3975028
  char *(*vmprintf)(const char*,va_list);vmprintf109897,3975066
  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);overload_function109899,3975126
  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);prepare_v2109901,3975221
  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);prepare16_v2109902,3975296
  int (*clear_bindings)(sqlite3_stmt*);clear_bindings109903,3975373
  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,create_module_v2109905,3975436
  int (*bind_zeroblob)(sqlite3_stmt*,int,int);bind_zeroblob109908,3975588
  int (*blob_bytes)(sqlite3_blob*);blob_bytes109909,3975635
  int (*blob_close)(sqlite3_blob*);blob_close109910,3975671
  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,blob_open109911,3975707
  int (*blob_read)(sqlite3_blob*,void*,int,int);blob_read109913,3975826
  int (*blob_write)(sqlite3_blob*,const void*,int,int);blob_write109914,3975875
  int (*create_collation_v2)(sqlite3*,const char*,int,void*,create_collation_v2109915,3975931
  int (*file_control)(sqlite3*,const char*,int,void*);file_control109918,3976114
  sqlite3_int64 (*memory_highwater)(int);memory_highwater109919,3976169
  sqlite3_int64 (*memory_used)(void);memory_used109920,3976211
  sqlite3_mutex *(*mutex_alloc)(int);mutex_alloc109921,3976249
  void (*mutex_enter)(sqlite3_mutex*);mutex_enter109922,3976287
  void (*mutex_free)(sqlite3_mutex*);mutex_free109923,3976326
  void (*mutex_leave)(sqlite3_mutex*);mutex_leave109924,3976364
  int (*mutex_try)(sqlite3_mutex*);mutex_try109925,3976403
  int (*open_v2)(const char*,sqlite3**,int,const char*);open_v2109926,3976439
  int (*release_memory)(int);release_memory109927,3976496
  void (*result_error_nomem)(sqlite3_context*);result_error_nomem109928,3976526
  void (*result_error_toobig)(sqlite3_context*);result_error_toobig109929,3976574
  int (*sleep)(int);sleep109930,3976623
  void (*soft_heap_limit)(int);soft_heap_limit109931,3976644
  sqlite3_vfs *(*vfs_find)(const char*);vfs_find109932,3976676
  int (*vfs_register)(sqlite3_vfs*,int);vfs_register109933,3976717
  int (*vfs_unregister)(sqlite3_vfs*);vfs_unregister109934,3976758
  int (*xthreadsafe)(void);xthreadsafe109935,3976797
  void (*result_zeroblob)(sqlite3_context*,int);result_zeroblob109936,3976825
  void (*result_error_code)(sqlite3_context*,int);result_error_code109937,3976874
  int (*test_control)(int, ...);test_control109938,3976925
  void (*randomness)(int,void*);randomness109939,3976958
  sqlite3 *(*context_db_handle)(sqlite3_context*);context_db_handle109940,3976991
  int (*extended_result_codes)(sqlite3*,int);extended_result_codes109941,3977042
  int (*limit)(sqlite3*,int,int);limit109942,3977088
  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);next_stmt109943,3977122
  const char *(*sql)(sqlite3_stmt*);sql109944,3977176
  int (*status)(int,int*,int*,int);status109945,3977213
  int (*backup_finish)(sqlite3_backup*);backup_finish109946,3977249
  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);backup_init109947,3977290
  int (*backup_pagecount)(sqlite3_backup*);backup_pagecount109948,3977367
  int (*backup_remaining)(sqlite3_backup*);backup_remaining109949,3977411
  int (*backup_step)(sqlite3_backup*,int);backup_step109950,3977455
  const char *(*compileoption_get)(int);compileoption_get109951,3977498
  int (*compileoption_used)(const char*);compileoption_used109952,3977539
  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,create_function_v2109953,3977581
  int (*db_config)(sqlite3*,int,...);db_config109958,3977922
  sqlite3_mutex *(*db_mutex)(sqlite3*);db_mutex109959,3977960
  int (*db_status)(sqlite3*,int,int*,int*,int);db_status109960,3978000
  int (*extended_errcode)(sqlite3*);extended_errcode109961,3978048
  void (*log)(int,const char*,...);log109962,3978085
  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);soft_heap_limit64109963,3978121
  const char *(*sourceid)(void);sourceid109964,3978174
  int (*stmt_status)(sqlite3_stmt*,int,int);stmt_status109965,3978207
  int (*strnicmp)(const char*,const char*,int);strnicmp109966,3978252
  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);unlock_notify109967,3978300
  int (*wal_autocheckpoint)(sqlite3*,int);wal_autocheckpoint109968,3978360
  int (*wal_checkpoint)(sqlite3*,const char*);wal_checkpoint109969,3978403
  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);wal_hook109970,3978450
  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);blob_reopen109971,3978526
  int (*vtab_config)(sqlite3*,int op,...);vtab_config109972,3978577
  int (*vtab_on_conflict)(sqlite3*);vtab_on_conflict109973,3978620
  int (*close_v2)(sqlite3*);close_v2109975,3978690
  const char *(*db_filename)(sqlite3*,const char*);db_filename109976,3978719
  int (*db_readonly)(sqlite3*,const char*);db_readonly109977,3978771
  int (*db_release_memory)(sqlite3*);db_release_memory109978,3978815
  const char *(*errstr)(int);errstr109979,3978853
  int (*stmt_busy)(sqlite3_stmt*);stmt_busy109980,3978883
  int (*stmt_readonly)(sqlite3_stmt*);stmt_readonly109981,3978918
  int (*stricmp)(const char*,const char*);stricmp109982,3978957
  int (*uri_boolean)(const char*,const char*,int);uri_boolean109983,3979000
  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);uri_int64109984,3979051
  const char *(*uri_parameter)(const char*,const char*);uri_parameter109985,3979120
  char *(*vsnprintf)(int,char*,const char*,va_list);vsnprintf109986,3979177
  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);wal_checkpoint_v2109987,3979230
  int (*auto_extension)(void(*)(void));auto_extension109989,3979326
  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,bind_blob64109990,3979366
  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,bind_text64109992,3979471
  int (*cancel_auto_extension)(void(*)(void));cancel_auto_extension109994,3979591
  int (*load_extension)(sqlite3*,const char*,const char*,char**);load_extension109995,3979638
  void *(*malloc64)(sqlite3_uint64);malloc64109996,3979704
  sqlite3_uint64 (*msize)(void*);msize109997,3979741
  void *(*realloc64)(void*,sqlite3_uint64);realloc64109998,3979775
  void (*reset_auto_extension)(void);reset_auto_extension109999,3979819
  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,result_blob64110000,3979857
  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,result_text64110002,3979967
  int (*strglob)(const char*,const char*);strglob110004,3980093
  sqlite3_value *(*value_dup)(const sqlite3_value*);value_dup110006,3980169
  void (*value_free)(sqlite3_value*);value_free110007,3980222
  int (*result_zeroblob64)(sqlite3_context*,sqlite3_uint64);result_zeroblob64110008,3980260
  int (*bind_zeroblob64)(sqlite3_stmt*, int, sqlite3_uint64);bind_zeroblob64110009,3980321
  unsigned int (*value_subtype)(sqlite3_value*);value_subtype110011,3980415
  void (*result_subtype)(sqlite3_context*,unsigned int);result_subtype110012,3980464
  int (*status64)(int,sqlite3_int64*,sqlite3_int64*,int);status64110014,3980554
  int (*strlike)(const char*,const char*,unsigned int);strlike110015,3980612
  int (*db_cacheflush)(sqlite3*);db_cacheflush110016,3980668
  int (*system_errno)(sqlite3*);system_errno110018,3980735
  int (*trace_v2)(sqlite3*,unsigned,int(*)(unsigned,void*,void*,void*),void*);trace_v2110020,3980801
  char *(*expanded_sql)(sqlite3_stmt*);expanded_sql110021,3980880
typedef int (*sqlite3_loadext_entry)(sqlite3_loadext_entry110028,3981049
#define sqlite3_aggregate_context sqlite3_aggregate_context110046,3981858
#define sqlite3_aggregate_count sqlite3_aggregate_count110048,3981959
#define sqlite3_bind_blob sqlite3_bind_blob110050,3982034
#define sqlite3_bind_double sqlite3_bind_double110051,3982096
#define sqlite3_bind_int sqlite3_bind_int110052,3982160
#define sqlite3_bind_int64 sqlite3_bind_int64110053,3982221
#define sqlite3_bind_null sqlite3_bind_null110054,3982284
#define sqlite3_bind_parameter_count sqlite3_bind_parameter_count110055,3982346
#define sqlite3_bind_parameter_index sqlite3_bind_parameter_index110056,3982419
#define sqlite3_bind_parameter_name sqlite3_bind_parameter_name110057,3982492
#define sqlite3_bind_text sqlite3_bind_text110058,3982564
#define sqlite3_bind_text16 sqlite3_bind_text16110059,3982626
#define sqlite3_bind_value sqlite3_bind_value110060,3982690
#define sqlite3_busy_handler sqlite3_busy_handler110061,3982753
#define sqlite3_busy_timeout sqlite3_busy_timeout110062,3982818
#define sqlite3_changes sqlite3_changes110063,3982883
#define sqlite3_close sqlite3_close110064,3982943
#define sqlite3_collation_needed sqlite3_collation_needed110065,3983001
#define sqlite3_collation_needed16 sqlite3_collation_needed16110066,3983070
#define sqlite3_column_blob sqlite3_column_blob110067,3983141
#define sqlite3_column_bytes sqlite3_column_bytes110068,3983205
#define sqlite3_column_bytes16 sqlite3_column_bytes16110069,3983270
#define sqlite3_column_count sqlite3_column_count110070,3983337
#define sqlite3_column_database_name sqlite3_column_database_name110071,3983402
#define sqlite3_column_database_name16 sqlite3_column_database_name16110072,3983475
#define sqlite3_column_decltype sqlite3_column_decltype110073,3983550
#define sqlite3_column_decltype16 sqlite3_column_decltype16110074,3983618
#define sqlite3_column_double sqlite3_column_double110075,3983688
#define sqlite3_column_int sqlite3_column_int110076,3983754
#define sqlite3_column_int64 sqlite3_column_int64110077,3983817
#define sqlite3_column_name sqlite3_column_name110078,3983882
#define sqlite3_column_name16 sqlite3_column_name16110079,3983946
#define sqlite3_column_origin_name sqlite3_column_origin_name110080,3984012
#define sqlite3_column_origin_name16 sqlite3_column_origin_name16110081,3984083
#define sqlite3_column_table_name sqlite3_column_table_name110082,3984156
#define sqlite3_column_table_name16 sqlite3_column_table_name16110083,3984226
#define sqlite3_column_text sqlite3_column_text110084,3984298
#define sqlite3_column_text16 sqlite3_column_text16110085,3984362
#define sqlite3_column_type sqlite3_column_type110086,3984428
#define sqlite3_column_value sqlite3_column_value110087,3984492
#define sqlite3_commit_hook sqlite3_commit_hook110088,3984557
#define sqlite3_complete sqlite3_complete110089,3984621
#define sqlite3_complete16 sqlite3_complete16110090,3984682
#define sqlite3_create_collation sqlite3_create_collation110091,3984745
#define sqlite3_create_collation16 sqlite3_create_collation16110092,3984814
#define sqlite3_create_function sqlite3_create_function110093,3984885
#define sqlite3_create_function16 sqlite3_create_function16110094,3984953
#define sqlite3_create_module sqlite3_create_module110095,3985023
#define sqlite3_create_module_v2 sqlite3_create_module_v2110096,3985089
#define sqlite3_data_count sqlite3_data_count110097,3985158
#define sqlite3_db_handle sqlite3_db_handle110098,3985221
#define sqlite3_declare_vtab sqlite3_declare_vtab110099,3985283
#define sqlite3_enable_shared_cache sqlite3_enable_shared_cache110100,3985348
#define sqlite3_errcode sqlite3_errcode110101,3985420
#define sqlite3_errmsg sqlite3_errmsg110102,3985480
#define sqlite3_errmsg16 sqlite3_errmsg16110103,3985539
#define sqlite3_exec sqlite3_exec110104,3985600
#define sqlite3_expired sqlite3_expired110106,3985688
#define sqlite3_finalize sqlite3_finalize110108,3985755
#define sqlite3_free sqlite3_free110109,3985816
#define sqlite3_free_table sqlite3_free_table110110,3985873
#define sqlite3_get_autocommit sqlite3_get_autocommit110111,3985936
#define sqlite3_get_auxdata sqlite3_get_auxdata110112,3986003
#define sqlite3_get_table sqlite3_get_table110113,3986067
#define sqlite3_global_recover sqlite3_global_recover110115,3986160
#define sqlite3_interrupt sqlite3_interrupt110117,3986234
#define sqlite3_last_insert_rowid sqlite3_last_insert_rowid110118,3986297
#define sqlite3_libversion sqlite3_libversion110119,3986367
#define sqlite3_libversion_number sqlite3_libversion_number110120,3986430
#define sqlite3_malloc sqlite3_malloc110121,3986500
#define sqlite3_mprintf sqlite3_mprintf110122,3986559
#define sqlite3_open sqlite3_open110123,3986619
#define sqlite3_open16 sqlite3_open16110124,3986676
#define sqlite3_prepare sqlite3_prepare110125,3986735
#define sqlite3_prepare16 sqlite3_prepare16110126,3986795
#define sqlite3_prepare_v2 sqlite3_prepare_v2110127,3986857
#define sqlite3_prepare16_v2 sqlite3_prepare16_v2110128,3986920
#define sqlite3_profile sqlite3_profile110129,3986985
#define sqlite3_progress_handler sqlite3_progress_handler110130,3987045
#define sqlite3_realloc sqlite3_realloc110131,3987114
#define sqlite3_reset sqlite3_reset110132,3987174
#define sqlite3_result_blob sqlite3_result_blob110133,3987232
#define sqlite3_result_double sqlite3_result_double110134,3987296
#define sqlite3_result_error sqlite3_result_error110135,3987362
#define sqlite3_result_error16 sqlite3_result_error16110136,3987427
#define sqlite3_result_int sqlite3_result_int110137,3987494
#define sqlite3_result_int64 sqlite3_result_int64110138,3987557
#define sqlite3_result_null sqlite3_result_null110139,3987622
#define sqlite3_result_text sqlite3_result_text110140,3987686
#define sqlite3_result_text16 sqlite3_result_text16110141,3987750
#define sqlite3_result_text16be sqlite3_result_text16be110142,3987816
#define sqlite3_result_text16le sqlite3_result_text16le110143,3987884
#define sqlite3_result_value sqlite3_result_value110144,3987952
#define sqlite3_rollback_hook sqlite3_rollback_hook110145,3988017
#define sqlite3_set_authorizer sqlite3_set_authorizer110146,3988083
#define sqlite3_set_auxdata sqlite3_set_auxdata110147,3988150
#define sqlite3_snprintf sqlite3_snprintf110148,3988214
#define sqlite3_step sqlite3_step110149,3988275
#define sqlite3_table_column_metadata sqlite3_table_column_metadata110150,3988332
#define sqlite3_thread_cleanup sqlite3_thread_cleanup110151,3988406
#define sqlite3_total_changes sqlite3_total_changes110152,3988473
#define sqlite3_trace sqlite3_trace110153,3988539
#define sqlite3_transfer_bindings sqlite3_transfer_bindings110155,3988628
#define sqlite3_update_hook sqlite3_update_hook110157,3988705
#define sqlite3_user_data sqlite3_user_data110158,3988769
#define sqlite3_value_blob sqlite3_value_blob110159,3988831
#define sqlite3_value_bytes sqlite3_value_bytes110160,3988894
#define sqlite3_value_bytes16 sqlite3_value_bytes16110161,3988958
#define sqlite3_value_double sqlite3_value_double110162,3989024
#define sqlite3_value_int sqlite3_value_int110163,3989089
#define sqlite3_value_int64 sqlite3_value_int64110164,3989151
#define sqlite3_value_numeric_type sqlite3_value_numeric_type110165,3989215
#define sqlite3_value_text sqlite3_value_text110166,3989286
#define sqlite3_value_text16 sqlite3_value_text16110167,3989349
#define sqlite3_value_text16be sqlite3_value_text16be110168,3989414
#define sqlite3_value_text16le sqlite3_value_text16le110169,3989481
#define sqlite3_value_type sqlite3_value_type110170,3989548
#define sqlite3_vmprintf sqlite3_vmprintf110171,3989611
#define sqlite3_vsnprintf sqlite3_vsnprintf110172,3989672
#define sqlite3_overload_function sqlite3_overload_function110173,3989734
#define sqlite3_prepare_v2 sqlite3_prepare_v2110174,3989804
#define sqlite3_prepare16_v2 sqlite3_prepare16_v2110175,3989867
#define sqlite3_clear_bindings sqlite3_clear_bindings110176,3989932
#define sqlite3_bind_zeroblob sqlite3_bind_zeroblob110177,3989999
#define sqlite3_blob_bytes sqlite3_blob_bytes110178,3990065
#define sqlite3_blob_close sqlite3_blob_close110179,3990128
#define sqlite3_blob_open sqlite3_blob_open110180,3990191
#define sqlite3_blob_read sqlite3_blob_read110181,3990253
#define sqlite3_blob_write sqlite3_blob_write110182,3990315
#define sqlite3_create_collation_v2 sqlite3_create_collation_v2110183,3990378
#define sqlite3_file_control sqlite3_file_control110184,3990450
#define sqlite3_memory_highwater sqlite3_memory_highwater110185,3990515
#define sqlite3_memory_used sqlite3_memory_used110186,3990584
#define sqlite3_mutex_alloc sqlite3_mutex_alloc110187,3990648
#define sqlite3_mutex_enter sqlite3_mutex_enter110188,3990712
#define sqlite3_mutex_free sqlite3_mutex_free110189,3990776
#define sqlite3_mutex_leave sqlite3_mutex_leave110190,3990839
#define sqlite3_mutex_try sqlite3_mutex_try110191,3990903
#define sqlite3_open_v2 sqlite3_open_v2110192,3990965
#define sqlite3_release_memory sqlite3_release_memory110193,3991025
#define sqlite3_result_error_nomem sqlite3_result_error_nomem110194,3991092
#define sqlite3_result_error_toobig sqlite3_result_error_toobig110195,3991163
#define sqlite3_sleep sqlite3_sleep110196,3991235
#define sqlite3_soft_heap_limit sqlite3_soft_heap_limit110197,3991293
#define sqlite3_vfs_find sqlite3_vfs_find110198,3991361
#define sqlite3_vfs_register sqlite3_vfs_register110199,3991422
#define sqlite3_vfs_unregister sqlite3_vfs_unregister110200,3991487
#define sqlite3_threadsafe sqlite3_threadsafe110201,3991554
#define sqlite3_result_zeroblob sqlite3_result_zeroblob110202,3991618
#define sqlite3_result_error_code sqlite3_result_error_code110203,3991686
#define sqlite3_test_control sqlite3_test_control110204,3991756
#define sqlite3_randomness sqlite3_randomness110205,3991821
#define sqlite3_context_db_handle sqlite3_context_db_handle110206,3991884
#define sqlite3_extended_result_codes sqlite3_extended_result_codes110207,3991954
#define sqlite3_limit sqlite3_limit110208,3992028
#define sqlite3_next_stmt sqlite3_next_stmt110209,3992086
#define sqlite3_sql sqlite3_sql110210,3992148
#define sqlite3_status sqlite3_status110211,3992204
#define sqlite3_backup_finish sqlite3_backup_finish110212,3992263
#define sqlite3_backup_init sqlite3_backup_init110213,3992329
#define sqlite3_backup_pagecount sqlite3_backup_pagecount110214,3992393
#define sqlite3_backup_remaining sqlite3_backup_remaining110215,3992462
#define sqlite3_backup_step sqlite3_backup_step110216,3992531
#define sqlite3_compileoption_get sqlite3_compileoption_get110217,3992595
#define sqlite3_compileoption_used sqlite3_compileoption_used110218,3992665
#define sqlite3_create_function_v2 sqlite3_create_function_v2110219,3992736
#define sqlite3_db_config sqlite3_db_config110220,3992807
#define sqlite3_db_mutex sqlite3_db_mutex110221,3992869
#define sqlite3_db_status sqlite3_db_status110222,3992930
#define sqlite3_extended_errcode sqlite3_extended_errcode110223,3992992
#define sqlite3_log sqlite3_log110224,3993061
#define sqlite3_soft_heap_limit64 sqlite3_soft_heap_limit64110225,3993117
#define sqlite3_sourceid sqlite3_sourceid110226,3993187
#define sqlite3_stmt_status sqlite3_stmt_status110227,3993248
#define sqlite3_strnicmp sqlite3_strnicmp110228,3993312
#define sqlite3_unlock_notify sqlite3_unlock_notify110229,3993373
#define sqlite3_wal_autocheckpoint sqlite3_wal_autocheckpoint110230,3993439
#define sqlite3_wal_checkpoint sqlite3_wal_checkpoint110231,3993510
#define sqlite3_wal_hook sqlite3_wal_hook110232,3993577
#define sqlite3_blob_reopen sqlite3_blob_reopen110233,3993638
#define sqlite3_vtab_config sqlite3_vtab_config110234,3993702
#define sqlite3_vtab_on_conflict sqlite3_vtab_on_conflict110235,3993766
#define sqlite3_close_v2 sqlite3_close_v2110237,3993866
#define sqlite3_db_filename sqlite3_db_filename110238,3993927
#define sqlite3_db_readonly sqlite3_db_readonly110239,3993991
#define sqlite3_db_release_memory sqlite3_db_release_memory110240,3994055
#define sqlite3_errstr sqlite3_errstr110241,3994125
#define sqlite3_stmt_busy sqlite3_stmt_busy110242,3994184
#define sqlite3_stmt_readonly sqlite3_stmt_readonly110243,3994246
#define sqlite3_stricmp sqlite3_stricmp110244,3994312
#define sqlite3_uri_boolean sqlite3_uri_boolean110245,3994372
#define sqlite3_uri_int64 sqlite3_uri_int64110246,3994436
#define sqlite3_uri_parameter sqlite3_uri_parameter110247,3994498
#define sqlite3_uri_vsnprintf sqlite3_uri_vsnprintf110248,3994564
#define sqlite3_wal_checkpoint_v2 sqlite3_wal_checkpoint_v2110249,3994626
#define sqlite3_auto_extension sqlite3_auto_extension110251,3994726
#define sqlite3_bind_blob64 sqlite3_bind_blob64110252,3994793
#define sqlite3_bind_text64 sqlite3_bind_text64110253,3994857
#define sqlite3_cancel_auto_extension sqlite3_cancel_auto_extension110254,3994921
#define sqlite3_load_extension sqlite3_load_extension110255,3994995
#define sqlite3_malloc64 sqlite3_malloc64110256,3995062
#define sqlite3_msize sqlite3_msize110257,3995123
#define sqlite3_realloc64 sqlite3_realloc64110258,3995181
#define sqlite3_reset_auto_extension sqlite3_reset_auto_extension110259,3995243
#define sqlite3_result_blob64 sqlite3_result_blob64110260,3995316
#define sqlite3_result_text64 sqlite3_result_text64110261,3995382
#define sqlite3_strglob sqlite3_strglob110262,3995448
#define sqlite3_value_dup sqlite3_value_dup110264,3995539
#define sqlite3_value_free sqlite3_value_free110265,3995601
#define sqlite3_result_zeroblob64 sqlite3_result_zeroblob64110266,3995664
#define sqlite3_bind_zeroblob64 sqlite3_bind_zeroblob64110267,3995734
#define sqlite3_value_subtype sqlite3_value_subtype110269,3995832
#define sqlite3_result_subtype sqlite3_result_subtype110270,3995898
#define sqlite3_status64 sqlite3_status64110272,3995996
#define sqlite3_strlike sqlite3_strlike110273,3996057
#define sqlite3_db_cacheflush sqlite3_db_cacheflush110274,3996117
#define sqlite3_system_errno sqlite3_system_errno110276,3996214
#define sqlite3_trace_v2 sqlite3_trace_v2110278,3996310
#define sqlite3_expanded_sql sqlite3_expanded_sql110279,3996371
# define SQLITE_EXTENSION_INIT1 SQLITE_EXTENSION_INIT1110285,3996665
# define SQLITE_EXTENSION_INIT2(SQLITE_EXTENSION_INIT2110286,3996744
# define SQLITE_EXTENSION_INIT3 SQLITE_EXTENSION_INIT3110287,3996795
# define SQLITE_EXTENSION_INIT1 SQLITE_EXTENSION_INIT1110292,3996977
# define SQLITE_EXTENSION_INIT2(SQLITE_EXTENSION_INIT2110293,3997023
# define SQLITE_EXTENSION_INIT3 SQLITE_EXTENSION_INIT3110294,3997091
# define sqlite3_column_database_name sqlite3_column_database_name110311,3997614
# define sqlite3_column_database_name16 sqlite3_column_database_name16110312,3997656
# define sqlite3_column_table_name sqlite3_column_table_name110313,3997698
# define sqlite3_column_table_name16 sqlite3_column_table_name16110314,3997740
# define sqlite3_column_origin_name sqlite3_column_origin_name110315,3997782
# define sqlite3_column_origin_name16 sqlite3_column_origin_name16110316,3997824
# define sqlite3_set_authorizer sqlite3_set_authorizer110320,3997907
# define sqlite3_bind_text16 sqlite3_bind_text16110324,3997982
# define sqlite3_collation_needed16 sqlite3_collation_needed16110325,3998024
# define sqlite3_column_decltype16 sqlite3_column_decltype16110326,3998066
# define sqlite3_column_name16 sqlite3_column_name16110327,3998108
# define sqlite3_column_text16 sqlite3_column_text16110328,3998150
# define sqlite3_complete16 sqlite3_complete16110329,3998192
# define sqlite3_create_collation16 sqlite3_create_collation16110330,3998234
# define sqlite3_create_function16 sqlite3_create_function16110331,3998276
# define sqlite3_errmsg16 sqlite3_errmsg16110332,3998318
# define sqlite3_open16 sqlite3_open16110333,3998360
# define sqlite3_prepare16 sqlite3_prepare16110334,3998402
# define sqlite3_prepare16_v2 sqlite3_prepare16_v2110335,3998444
# define sqlite3_result_error16 sqlite3_result_error16110336,3998486
# define sqlite3_result_text16 sqlite3_result_text16110337,3998528
# define sqlite3_result_text16be sqlite3_result_text16be110338,3998570
# define sqlite3_result_text16le sqlite3_result_text16le110339,3998612
# define sqlite3_value_text16 sqlite3_value_text16110340,3998654
# define sqlite3_value_text16be sqlite3_value_text16be110341,3998696
# define sqlite3_value_text16le sqlite3_value_text16le110342,3998738
# define sqlite3_column_database_name16 sqlite3_column_database_name16110343,3998780
# define sqlite3_column_table_name16 sqlite3_column_table_name16110344,3998822
# define sqlite3_column_origin_name16 sqlite3_column_origin_name16110345,3998864
# define sqlite3_complete sqlite3_complete110349,3998942
# define sqlite3_complete16 sqlite3_complete16110350,3998970
# define sqlite3_column_decltype16 sqlite3_column_decltype16110354,3999036
# define sqlite3_column_decltype sqlite3_column_decltype110355,3999078
# define sqlite3_progress_handler sqlite3_progress_handler110359,3999165
# define sqlite3_create_module sqlite3_create_module110363,3999241
# define sqlite3_create_module_v2 sqlite3_create_module_v2110364,3999274
# define sqlite3_declare_vtab sqlite3_declare_vtab110365,3999310
# define sqlite3_vtab_config sqlite3_vtab_config110366,3999342
# define sqlite3_vtab_on_conflict sqlite3_vtab_on_conflict110367,3999373
# define sqlite3_enable_shared_cache sqlite3_enable_shared_cache110371,3999449
# define sqlite3_profile sqlite3_profile110375,3999562
# define sqlite3_trace sqlite3_trace110376,3999595
# define sqlite3_free_table sqlite3_free_table110380,3999665
# define sqlite3_get_table sqlite3_get_table110381,3999698
#define sqlite3_bind_zeroblob sqlite3_bind_zeroblob110385,3999767
#define sqlite3_blob_bytes sqlite3_blob_bytes110386,3999800
#define sqlite3_blob_close sqlite3_blob_close110387,3999833
#define sqlite3_blob_open sqlite3_blob_open110388,3999866
#define sqlite3_blob_read sqlite3_blob_read110389,3999899
#define sqlite3_blob_write sqlite3_blob_write110390,3999932
#define sqlite3_blob_reopen sqlite3_blob_reopen110391,3999965
# define sqlite3_trace_v2 sqlite3_trace_v2110395,4000037
static const sqlite3_api_routines sqlite3Apis = {sqlite3Apis110413,4000706
static int sqlite3LoadExtension(sqlite3LoadExtension110721,4007745
SQLITE_API int sqlite3_load_extension(sqlite3_load_extension110862,4012333
SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){sqlite3CloseExtensions110880,4012963
SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){sqlite3_enable_load_extension110893,4013349
typedef struct sqlite3AutoExtList sqlite3AutoExtList;sqlite3AutoExtList110913,4013915
static SQLITE_WSD struct sqlite3AutoExtList {sqlite3AutoExtList110914,4013969
  u32 nExt;              /* Number of entries in aExt[] */          nExt110915,4014015
  void (**aExt)(void);   /* Pointers to the extension init functions */aExt110916,4014084
} sqlite3Autoext = { 0, 0 };sqlite3Autoext110917,4014156
# define wsdAutoextInit wsdAutoextInit110926,4014547
# define wsdAutoext wsdAutoext110928,4014642
# define wsdAutoextInitwsdAutoextInit110930,4014673
# define wsdAutoext wsdAutoext110931,4014697
SQLITE_API int sqlite3_auto_extension(sqlite3_auto_extension110939,4014855
SQLITE_API int sqlite3_cancel_auto_extension(sqlite3_cancel_auto_extension110986,4016099
SQLITE_API void sqlite3_reset_auto_extension(void){sqlite3_reset_auto_extension111011,4016645
SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){sqlite3AutoLoadExtensions111033,4017167
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE111091,4018837
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE111093,4018887
#define PragTyp_HEADER_VALUE PragTyp_HEADER_VALUE111111,4019739
#define PragTyp_AUTO_VACUUM PragTyp_AUTO_VACUUM111112,4019788
#define PragTyp_FLAG PragTyp_FLAG111113,4019837
#define PragTyp_BUSY_TIMEOUT PragTyp_BUSY_TIMEOUT111114,4019886
#define PragTyp_CACHE_SIZE PragTyp_CACHE_SIZE111115,4019935
#define PragTyp_CACHE_SPILL PragTyp_CACHE_SPILL111116,4019984
#define PragTyp_CASE_SENSITIVE_LIKE PragTyp_CASE_SENSITIVE_LIKE111117,4020033
#define PragTyp_COLLATION_LIST PragTyp_COLLATION_LIST111118,4020082
#define PragTyp_COMPILE_OPTIONS PragTyp_COMPILE_OPTIONS111119,4020131
#define PragTyp_DATA_STORE_DIRECTORY PragTyp_DATA_STORE_DIRECTORY111120,4020180
#define PragTyp_DATABASE_LIST PragTyp_DATABASE_LIST111121,4020229
#define PragTyp_DEFAULT_CACHE_SIZE PragTyp_DEFAULT_CACHE_SIZE111122,4020278
#define PragTyp_ENCODING PragTyp_ENCODING111123,4020327
#define PragTyp_FOREIGN_KEY_CHECK PragTyp_FOREIGN_KEY_CHECK111124,4020376
#define PragTyp_FOREIGN_KEY_LIST PragTyp_FOREIGN_KEY_LIST111125,4020425
#define PragTyp_INCREMENTAL_VACUUM PragTyp_INCREMENTAL_VACUUM111126,4020474
#define PragTyp_INDEX_INFO PragTyp_INDEX_INFO111127,4020523
#define PragTyp_INDEX_LIST PragTyp_INDEX_LIST111128,4020572
#define PragTyp_INTEGRITY_CHECK PragTyp_INTEGRITY_CHECK111129,4020621
#define PragTyp_JOURNAL_MODE PragTyp_JOURNAL_MODE111130,4020670
#define PragTyp_JOURNAL_SIZE_LIMIT PragTyp_JOURNAL_SIZE_LIMIT111131,4020719
#define PragTyp_LOCK_PROXY_FILE PragTyp_LOCK_PROXY_FILE111132,4020768
#define PragTyp_LOCKING_MODE PragTyp_LOCKING_MODE111133,4020817
#define PragTyp_PAGE_COUNT PragTyp_PAGE_COUNT111134,4020866
#define PragTyp_MMAP_SIZE PragTyp_MMAP_SIZE111135,4020915
#define PragTyp_PAGE_SIZE PragTyp_PAGE_SIZE111136,4020964
#define PragTyp_SECURE_DELETE PragTyp_SECURE_DELETE111137,4021013
#define PragTyp_SHRINK_MEMORY PragTyp_SHRINK_MEMORY111138,4021062
#define PragTyp_SOFT_HEAP_LIMIT PragTyp_SOFT_HEAP_LIMIT111139,4021111
#define PragTyp_STATS PragTyp_STATS111140,4021160
#define PragTyp_SYNCHRONOUS PragTyp_SYNCHRONOUS111141,4021209
#define PragTyp_TABLE_INFO PragTyp_TABLE_INFO111142,4021258
#define PragTyp_TEMP_STORE PragTyp_TEMP_STORE111143,4021307
#define PragTyp_TEMP_STORE_DIRECTORY PragTyp_TEMP_STORE_DIRECTORY111144,4021356
#define PragTyp_THREADS PragTyp_THREADS111145,4021405
#define PragTyp_WAL_AUTOCHECKPOINT PragTyp_WAL_AUTOCHECKPOINT111146,4021454
#define PragTyp_WAL_CHECKPOINT PragTyp_WAL_CHECKPOINT111147,4021503
#define PragTyp_ACTIVATE_EXTENSIONS PragTyp_ACTIVATE_EXTENSIONS111148,4021552
#define PragTyp_HEXKEY PragTyp_HEXKEY111149,4021601
#define PragTyp_KEY PragTyp_KEY111150,4021650
#define PragTyp_REKEY PragTyp_REKEY111151,4021699
#define PragTyp_LOCK_STATUS PragTyp_LOCK_STATUS111152,4021748
#define PragTyp_PARSER_TRACE PragTyp_PARSER_TRACE111153,4021797
#define PragFlag_NeedSchema PragFlag_NeedSchema111154,4021846
#define PragFlag_ReadOnly PragFlag_ReadOnly111155,4021889
static const struct sPragmaNames {sPragmaNames111156,4021932
  const char *const zName;  /* Name of pragma */zName111157,4021967
  u8 ePragTyp;              /* PragTyp_XXX value */ePragTyp111158,4022016
  u8 mPragFlag;             /* Zero or more PragFlag_XXX values */mPragFlag111159,4022068
  u32 iArg;                 /* Extra argument */iArg111160,4022135
} aPragmaNames[] = {aPragmaNames111161,4022184
static u8 getSafetyLevel(const char *z, int omitFull, u8 dflt){getSafetyLevel111585,4036147
SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z, u8 dflt){sqlite3GetBoolean111610,4036958
static int getLockingMode(const char *z){getLockingMode111623,4037359
static int getAutoVacuum(const char *z){getAutoVacuum111638,4037845
static int getTempStore(const char *z){getTempStore111654,4038432
static int invalidateTempStorage(Parse *pParse){invalidateTempStorage111672,4038890
static int changeTempStorage(Parse *pParse, const char *zStorageType){changeTempStorage111694,4039596
static void setAllColumnNames(setAllColumnNames111709,4040017
static void setOneColumnName(Vdbe *v, const char *z){setOneColumnName111720,4040348
static void returnSingleInt(Vdbe *v, const char *zLabel, i64 value){returnSingleInt111727,4040493
static void returnSingleText(returnSingleText111736,4040770
static void setAllPagerFlags(sqlite3 *db){setAllPagerFlags111754,4041285
# define setAllPagerFlags(setAllPagerFlags111774,4041942
static const char *actionName(u8 action){actionName111782,4042099
SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){sqlite3JournalModename111802,4042706
SQLITE_PRIVATE void sqlite3Pragma(sqlite3Pragma111836,4043763
# define SQLITE_INTEGRITY_CHECK_ERROR_MAX SQLITE_INTEGRITY_CHECK_ERROR_MAX112935,4080946
static void corruptSchema(corruptSchema113556,4103811
SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){sqlite3InitCallback113585,4104876
static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){sqlite3InitOne113669,4107999
SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){sqlite3Init113889,4115296
SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){sqlite3ReadSchema113933,4116544
static void schemaIsValid(Parse *pParse){schemaIsValid113953,4117018
SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){sqlite3SchemaToIndex114002,4118676
SQLITE_PRIVATE void sqlite3ParserReset(Parse *pParse){sqlite3ParserReset114030,4119581
static int sqlite3Prepare(sqlite3Prepare114046,4120038
static int sqlite3LockAndPrepare(sqlite3LockAndPrepare114197,4125040
SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){sqlite3Reprepare114236,4126433
SQLITE_API int sqlite3_prepare(sqlite3_prepare114273,4127559
SQLITE_API int sqlite3_prepare_v2(sqlite3_prepare_v2114285,4128067
static int sqlite3Prepare16(sqlite3Prepare16114303,4128686
SQLITE_API int sqlite3_prepare16(sqlite3_prepare16114361,4130839
SQLITE_API int sqlite3_prepare16_v2(sqlite3_prepare16_v2114373,4131344
/***/ int sqlite3SelectTrace = 0;sqlite3SelectTrace114410,4132616
# define SELECTTRACE(SELECTTRACE114411,4132650
# define SELECTTRACE(SELECTTRACE114417,4132840
typedef struct DistinctCtx DistinctCtx;DistinctCtx114426,4133076
struct DistinctCtx {DistinctCtx114427,4133116
  u8 isTnct;      /* True if the DISTINCT keyword is present */isTnct114428,4133137
  u8 eTnctType;   /* One of the WHERE_DISTINCT_* operators */eTnctType114429,4133201
  int tabTnct;    /* Ephemeral table used for DISTINCT processing */tabTnct114430,4133263
  int addrTnct;   /* Address of OP_OpenEphemeral opcode for tabTnct */addrTnct114431,4133332
typedef struct SortCtx SortCtx;SortCtx114438,4133550
struct SortCtx {SortCtx114439,4133582
  ExprList *pOrderBy;   /* The ORDER BY (or GROUP BY clause) */pOrderBy114440,4133599
  int nOBSat;           /* Number of ORDER BY terms satisfied by indices */nOBSat114441,4133663
  int iECursor;         /* Cursor number for the sorter */iECursor114442,4133739
  int regReturn;        /* Register holding block-output return address */regReturn114443,4133798
  int labelBkOut;       /* Start label for the block-output subroutine */labelBkOut114444,4133873
  int addrSortIndex;    /* Address of the OP_SorterOpen or OP_OpenEphemeral */addrSortIndex114445,4133947
  int labelDone;        /* Jump here when done, ex: LIMIT reached */labelDone114446,4134026
  u8 sortFlags;         /* Zero or more SORTFLAG_* bits */sortFlags114447,4134095
  u8 bOrderedInnerLoop; /* ORDER BY correctly sorts the inner loop */bOrderedInnerLoop114448,4134154
#define SORTFLAG_UseSorter SORTFLAG_UseSorter114450,4134227
static void clearSelect(sqlite3 *db, Select *p, int bFree){clearSelect114456,4134423
SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){sqlite3SelectDestInit114477,4135024
SQLITE_PRIVATE Select *sqlite3SelectNew(sqlite3SelectNew114490,4135313
SQLITE_PRIVATE void sqlite3SelectSetName(Select *p, const char *zName){sqlite3SelectSetName114550,4137118
SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){sqlite3SelectDelete114561,4137367
static Select *findRightmost(Select *p){findRightmost114568,4137544
SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){sqlite3JoinType114590,4138119
static int columnIndex(Table *pTab, const char *zCol){columnIndex114651,4140143
static int tableAndColumnIndex(tableAndColumnIndex114668,4140595
static void addWhereTerm(addWhereTerm114703,4141751
static void setJoinExpr(Expr *p, int iTable){setJoinExpr114762,4144197
static int sqliteProcessJoin(Parse *pParse, Select *p){sqliteProcessJoin114793,4145336
static void pushOntoSorter(pushOntoSorter114893,4148998
static void codeOffset(codeOffset115013,4154329
static void codeDistinct(codeDistinct115033,4155047
static void selectInnerLoop(selectInnerLoop115060,4156003
SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoAlloc(sqlite3 *db, int N, int X){sqlite3KeyInfoAlloc115395,4168319
SQLITE_PRIVATE void sqlite3KeyInfoUnref(KeyInfo *p){sqlite3KeyInfoUnref115415,4168777
SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoRef(KeyInfo *p){sqlite3KeyInfoRef115426,4168982
SQLITE_PRIVATE int sqlite3KeyInfoIsWriteable(KeyInfo *p){ return p->nRef==1; }sqlite3KeyInfoIsWriteable115441,4169339
static KeyInfo *keyInfoFromExprList(keyInfoFromExprList115458,4170086
static const char *selectOpName(int id){selectOpName115488,4170991
static void explainTempTable(Parse *pParse, const char *zUsage){explainTempTable115510,4171650
# define explainSetInteger(explainSetInteger115525,4172274
# define explainTempTable(explainTempTable115529,4172383
# define explainSetInteger(explainSetInteger115530,4172414
static void explainComposite(explainComposite115548,4173197
# define explainComposite(explainComposite115567,4173996
static void generateSortTail(generateSortTail115576,4174310
# define columnType(columnType115722,4179614
# define columnType(columnType115724,4179730
static const char *columnTypeImpl(columnTypeImpl115726,4179792
static void generateColumnTypes(generateColumnTypes115877,4184845
static void generateColumnNames(generateColumnNames115917,4186216
SQLITE_PRIVATE int sqlite3ColumnsFromExprList(sqlite3ColumnsFromExprList115996,4188862
SQLITE_PRIVATE void sqlite3SelectAddColumnTypeAndCollation(sqlite3SelectAddColumnTypeAndCollation116097,4192454
SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){sqlite3ResultSetOfSelect116146,4194013
static SQLITE_NOINLINE Vdbe *allocVdbe(Parse *pParse){allocVdbe116182,4195136
SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){sqlite3GetVdbe116192,4195434
static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){computeLimitRegisters116221,4196676
static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){multiSelectCollSeq116276,4198613
static KeyInfo *multiSelectOrderByKeyInfo(Parse *pParse, Select *p, int nExtra){multiSelectOrderByKeyInfo116302,4199497
static void generateWithRecursiveQuery(generateWithRecursiveQuery116368,4202339
static int multiSelectValues(multiSelectValues116517,4207852
static int multiSelect(multiSelect116580,4209827
SQLITE_PRIVATE void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p){sqlite3SelectWrongNumTermsError116941,4222364
static int generateOutputSubroutine(generateOutputSubroutine116970,4223405
static int multiSelectOrderBy(multiSelectOrderBy117178,4231193
static Expr *substExpr(substExpr117507,4243680
static void substExprList(substExprList117536,4244692
static void substSelect(substSelect117548,4245099
static int flattenSubquery(flattenSubquery117717,4252491
static int pushDownWhereTerms(pushDownWhereTerms118168,4269115
static u8 minMaxQuery(AggInfo *pAggInfo, ExprList **ppMinMax){minMaxQuery118222,4271142
static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){isSimpleCount118258,4272369
SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){sqlite3IndexedByLookup118289,4273287
static int convertCompoundSelectToSubquery(Walker *pWalker, Select *p){convertCompoundSelectToSubquery118328,4274696
static int cannotBeFunction(Parse *pParse, struct SrcList_item *pFrom){cannotBeFunction118383,4276320
static struct Cte *searchWith(searchWith118402,4276977
SQLITE_PRIVATE void sqlite3WithPush(Parse *pParse, With *pWith, u8 bFree){sqlite3WithPush118433,4278071
static int withExpand(withExpand118458,4279057
static void selectPopWith(Walker *pWalker, Select *p){selectPopWith118574,4282934
#define selectPopWith selectPopWith118583,4283166
static int selectExpander(Walker *pWalker, Select *p){selectExpander118610,4284303
SQLITE_PRIVATE int sqlite3ExprWalkNoop(Walker *NotUsed, Expr *NotUsed2){sqlite3ExprWalkNoop118889,4294435
static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){sqlite3SelectExpand118907,4295143
static void selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){selectAddSubqueryTypeInfo118938,4296158
static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){sqlite3SelectAddTypeInfo118972,4297093
SQLITE_PRIVATE void sqlite3SelectPrep(sqlite3SelectPrep118996,4297903
static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){resetAccumulator119021,4298730
static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){finalizeAggFunctions119062,4300196
static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){updateAccumulator119078,4300728
static void explainSimpleCount(explainSimpleCount119161,4303606
# define explainSimpleCount(explainSimpleCount119179,4304230
SQLITE_PRIVATE int sqlite3Select(sqlite3Select119195,4304731
typedef struct TabResult {TabResult120094,4340717
  char **azResult;   /* Accumulated output */azResult120095,4340744
  char *zErrMsg;     /* Error message text, if an error occurs */zErrMsg120096,4340790
  u32 nAlloc;        /* Slots allocated for azResult[] */nAlloc120097,4340856
  u32 nRow;          /* Number of rows in the result */nRow120098,4340914
  u32 nColumn;       /* Number of columns in the result */nColumn120099,4340970
  u32 nData;         /* Slots used in azResult[].  (nRow+1)*nColumn */nData120100,4341029
  int rc;            /* Return code from sqlite3_exec() */rc120101,4341100
} TabResult;TabResult120102,4341159
static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){sqlite3_get_table_cb120109,4341348
SQLITE_API int sqlite3_get_table(sqlite3_get_table120183,4343528
SQLITE_API void sqlite3_free_table(sqlite3_free_table120252,4345642
SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){sqlite3DeleteTriggerStep120287,4346700
SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){sqlite3TriggerList120315,4347761
SQLITE_PRIVATE void sqlite3BeginTrigger(sqlite3BeginTrigger120348,4348905
SQLITE_PRIVATE void sqlite3FinishTrigger(sqlite3FinishTrigger120536,4355845
SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){sqlite3TriggerSelectStep120616,4358620
static TriggerStep *triggerStepAllocate(triggerStepAllocate120634,4359215
SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep(sqlite3TriggerInsertStep120659,4359929
SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep(sqlite3TriggerUpdateStep120688,4360969
SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep(sqlite3TriggerDeleteStep120713,4361960
SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){sqlite3DeleteTrigger120732,4362527
SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){sqlite3DropTrigger120750,4363206
static Table *tableOfTrigger(Trigger *pTrigger){tableOfTrigger120792,4364411
SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){sqlite3DropTriggerPtr120800,4364597
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){sqlite3UnlinkAndDeleteTrigger120840,4365828
static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){checkColumnOverlap120868,4366848
SQLITE_PRIVATE Trigger *sqlite3TriggersExist(sqlite3TriggersExist120883,4367373
static SrcList *targetSrcList(targetSrcList120919,4368564
static int codeTriggerProgram(codeTriggerProgram120946,4369369
static const char *onErrorText(int onError){onErrorText121023,4371880
static void transferParseError(Parse *pTo, Parse *pFrom){transferParseError121041,4372387
static TriggerPrg *codeRowTrigger(codeRowTrigger121057,4372844
static TriggerPrg *getRowTrigger(getRowTrigger121170,4377148
SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect(sqlite3CodeRowTriggerDirect121204,4378359
SQLITE_PRIVATE void sqlite3CodeRowTrigger(sqlite3CodeRowTrigger121276,4381813
SQLITE_PRIVATE u32 sqlite3TriggerColmask(sqlite3TriggerColmask121338,4384682
SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){sqlite3ColumnDefault121431,4388504
SQLITE_PRIVATE void sqlite3Update(sqlite3Update121459,4389424
# undef isViewisView121540,4393358
# define isView isView121541,4393373
 #undef isViewisView122070,4411709
 #undef pTriggerpTrigger122073,4411747
static void updateVirtualTable(updateVirtualTable122098,4412629
static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){execSql122235,4417962
static int execSqlF(sqlite3 *db, char **pzErrMsg, const char *zSql, ...){execSqlF122259,4418700
SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse, Token *pNm){sqlite3Vacuum122302,4420560
SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb){sqlite3RunVacuum122315,4420917
struct VtabCtx {VtabCtx122581,4431362
  VTable *pVTable;    /* The virtual table being constructed */pVTable122582,4431379
  Table *pTab;        /* The Table object to which the virtual table belongs */pTab122583,4431443
  VtabCtx *pPrior;    /* Parent context (if any) */pPrior122584,4431523
  int bDeclared;      /* True after sqlite3_declare_vtab() is called */bDeclared122585,4431575
static int createModule(createModule122593,4431827
SQLITE_API int sqlite3_create_module(sqlite3_create_module122638,4433169
SQLITE_API int sqlite3_create_module_v2(sqlite3_create_module_v2122653,4433744
SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){sqlite3VtabLock122674,4434643
SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){sqlite3GetVTable122684,4434935
SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){sqlite3VtabUnlock122695,4435287
static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){vtabDisconnectAll122719,4435993
SQLITE_PRIVATE void sqlite3VtabDisconnect(sqlite3 *db, Table *p){sqlite3VtabDisconnect122759,4437319
SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){sqlite3VtabUnlockList122797,4438697
SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){sqlite3VtabClear122828,4439741
static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){addModuleArgument122845,4440227
SQLITE_PRIVATE void sqlite3VtabBeginParse(sqlite3VtabBeginParse122864,4440851
static void addArgumentToVtab(Parse *pParse){addArgumentToVtab122914,4442805
SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){sqlite3VtabFinishParse122927,4443195
SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){sqlite3VtabArgInit123011,4446155
SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){sqlite3VtabArgExtend123021,4446436
static int vtabCallConstructor(vtabCallConstructor123037,4446854
SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){sqlite3VtabCallConnect123166,4450750
static int growVTrans(sqlite3 *db){growVTrans123200,4451682
static void addToVTrans(sqlite3 *db, VTable *pVTab){addToVTrans123222,4452310
SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){sqlite3VtabCallCreate123236,4452814
SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){sqlite3_declare_vtab123277,4454188
SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){sqlite3VtabCallDestroy123362,4456511
static void callFinaliser(sqlite3 *db, int offset){callFinaliser123400,4457704
SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, Vdbe *p){sqlite3VtabSync123428,4458488
SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){sqlite3VtabRollback123450,4459041
SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){sqlite3VtabCommit123459,4459294
SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){sqlite3VtabBegin123472,4459723
SQLITE_PRIVATE int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){sqlite3VtabSavepoint123532,4461681
SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction(sqlite3VtabOverloadFunction123578,4463202
SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){sqlite3VtabMakeWritable123644,4465327
SQLITE_PRIVATE int sqlite3VtabEponymousTableInit(Parse *pParse, Module *pMod){sqlite3VtabEponymousTableInit123677,4466595
SQLITE_PRIVATE void sqlite3VtabEponymousTableClear(sqlite3 *db, Module *pMod){sqlite3VtabEponymousTableClear123715,4467762
SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *db){sqlite3_vtab_on_conflict123734,4468377
SQLITE_API int sqlite3_vtab_config(sqlite3 *db, int op, ...){sqlite3_vtab_config123752,4469043
/***/ int sqlite3WhereTrace;sqlite3WhereTrace123830,4471583
# define WHERETRACE(WHERETRACE123834,4471714
# define WHERETRACE_ENABLED WHERETRACE_ENABLED123835,4471787
# define WHERETRACE(WHERETRACE123837,4471823
typedef struct WhereClause WhereClause;WhereClause123842,4471881
typedef struct WhereMaskSet WhereMaskSet;WhereMaskSet123843,4471921
typedef struct WhereOrInfo WhereOrInfo;WhereOrInfo123844,4471963
typedef struct WhereAndInfo WhereAndInfo;WhereAndInfo123845,4472003
typedef struct WhereLevel WhereLevel;WhereLevel123846,4472045
typedef struct WhereLoop WhereLoop;WhereLoop123847,4472083
typedef struct WherePath WherePath;WherePath123848,4472119
typedef struct WhereTerm WhereTerm;WhereTerm123849,4472155
typedef struct WhereLoopBuilder WhereLoopBuilder;WhereLoopBuilder123850,4472191
typedef struct WhereScan WhereScan;WhereScan123851,4472241
typedef struct WhereOrCost WhereOrCost;WhereOrCost123852,4472277
typedef struct WhereOrSet WhereOrSet;WhereOrSet123853,4472317
struct WhereLevel {WhereLevel123870,4473028
  int iLeftJoin;        /* Memory cell used to implement LEFT OUTER JOIN */iLeftJoin123871,4473048
  int iTabCur;          /* The VDBE cursor used to access the table */iTabCur123872,4473124
  int iIdxCur;          /* The VDBE cursor used to access pIdx */iIdxCur123873,4473195
  int addrBrk;          /* Jump here to break out of the loop */addrBrk123874,4473261
  int addrNxt;          /* Jump here to start the next IN combination */addrNxt123875,4473326
  int addrSkip;         /* Jump here for next iteration of skip-scan */addrSkip123876,4473399
  int addrCont;         /* Jump here to continue with the next loop cycle */addrCont123877,4473471
  int addrFirst;        /* First instruction of interior of the loop */addrFirst123878,4473548
  int addrBody;         /* Beginning of the body of this loop */addrBody123879,4473620
  u32 iLikeRepCntr;     /* LIKE range processing counter register (times 2) */iLikeRepCntr123881,4473724
  int addrLikeRep;      /* LIKE range processing address */addrLikeRep123882,4473803
  u8 iFrom;             /* Which entry in the FROM clause */iFrom123884,4473870
  u8 op, p3, p5;        /* Opcode, P3 & P5 of the opcode that ends the loop */op123885,4473931
  u8 op, p3, p5;        /* Opcode, P3 & P5 of the opcode that ends the loop */p3123885,4473931
  u8 op, p3, p5;        /* Opcode, P3 & P5 of the opcode that ends the loop */p5123885,4473931
  int p1, p2;           /* Operands of the opcode used to ends the loop */p1123886,4474010
  int p1, p2;           /* Operands of the opcode used to ends the loop */p2123886,4474010
      int nIn;              /* Number of entries in aInLoop[] */nIn123889,4474172
      struct InLoop {InLoop123890,4474237
        int iCur;              /* The VDBE cursor used by this IN operator */iCur123891,4474259
        int addrInTop;         /* Top of the IN loop */addrInTop123892,4474337
        u8 eEndLoopOp;         /* IN Loop terminator. OP_Next or OP_Prev */eEndLoopOp123893,4474393
      } *aInLoop;           /* Information about each nested IN operator */aInLoop123894,4474469
    } in;                 /* Used when pWLoop->wsFlags&WHERE_IN_ABLE */in123895,4474545
    Index *pCovidx;       /* Possible covering index for WHERE_MULTI_OR */pCovidx123896,4474617
  } u;u123897,4474692
  struct WhereLoop *pWLoop;  /* The selected WhereLoop object */pWLoop123898,4474699
  Bitmask notReady;          /* FROM entries not usable at this level */notReady123899,4474764
  int addrVisit;        /* Address at which row is visited */addrVisit123901,4474874
struct WhereLoop {WhereLoop123919,4475713
  Bitmask prereq;       /* Bitmask of other loops that must run first */prereq123920,4475732
  Bitmask maskSelf;     /* Bitmask identifying table iTab */maskSelf123921,4475805
  char cId;             /* Symbolic ID of this loop for debugging use */cId123923,4475886
  u8 iTab;              /* Position in FROM clause of table for this loop */iTab123925,4475966
  u8 iSortIdx;          /* Sorting index number.  0==None */iSortIdx123926,4476043
  LogEst rSetup;        /* One-time setup cost (ex: create transient index) */rSetup123927,4476104
  LogEst rRun;          /* Cost of running each loop */rRun123928,4476183
  LogEst nOut;          /* Estimated number of output rows */nOut123929,4476239
      u16 nEq;               /* Number of equality constraints */nEq123932,4476382
      u16 nBtm;              /* Size of BTM vector */nBtm123933,4476448
      u16 nTop;              /* Size of TOP vector */nTop123934,4476502
      Index *pIndex;         /* Index used, or NULL */pIndex123935,4476556
    } btree;btree123936,4476611
      int idxNum;            /* Index number */idxNum123938,4476688
      u8 needFree;           /* True if sqlite3_free(idxStr) is needed */needFree123939,4476736
      i8 isOrdered;          /* True if satisfies ORDER BY */isOrdered123940,4476810
      u16 omitMask;          /* Terms that may be omitted */omitMask123941,4476872
      char *idxStr;          /* Index identifier string */idxStr123942,4476933
    } vtab;vtab123943,4476992
  } u;u123944,4477004
  u32 wsFlags;          /* WHERE_* flags describing the plan */wsFlags123945,4477011
  u16 nLTerm;           /* Number of entries in aLTerm[] */nLTerm123946,4477075
  u16 nSkip;            /* Number of NULL aLTerm[] entries */nSkip123947,4477135
# define WHERE_LOOP_XFER_SZ WHERE_LOOP_XFER_SZ123949,4477266
  u16 nLSlot;           /* Number of slots allocated for aLTerm[] */nLSlot123950,4477321
  WhereTerm **aLTerm;   /* WhereTerms used */aLTerm123951,4477390
  WhereLoop *pNextLoop; /* Next WhereLoop object in the WhereClause */pNextLoop123952,4477436
  WhereTerm *aLTermSpace[3];  /* Initial aLTerm[] space */aLTermSpace123953,4477507
struct WhereOrCost {WhereOrCost123960,4477750
  Bitmask prereq;     /* Prerequisites */prereq123961,4477771
  LogEst rRun;        /* Cost of running this subquery */rRun123962,4477813
  LogEst nOut;        /* Number of outputs for this subquery */nOut123963,4477871
#define N_OR_COST N_OR_COST123970,4478118
struct WhereOrSet {WhereOrSet123971,4478138
  u16 n;                      /* Number of valid a[] entries */n123972,4478158
  WhereOrCost a[N_OR_COST];   /* Set of best costs */a123973,4478222
struct WherePath {WherePath123994,4479210
  Bitmask maskLoop;     /* Bitmask of all WhereLoop objects in this path */maskLoop123995,4479229
  Bitmask revLoop;      /* aLoop[]s that should be reversed for ORDER BY */revLoop123996,4479305
  LogEst nRow;          /* Estimated number of rows generated by this path */nRow123997,4479381
  LogEst rCost;         /* Total cost of this path */rCost123998,4479459
  LogEst rUnsorted;     /* Total cost of this path ignoring sorting costs */rUnsorted123999,4479513
  i8 isOrdered;         /* No. of ORDER BY terms satisfied. -1 for unknown */isOrdered124000,4479590
  WhereLoop **aLoop;    /* Array of WhereLoop objects implementing this path */aLoop124001,4479668
struct WhereTerm {WhereTerm124055,4482258
  Expr *pExpr;            /* Pointer to the subexpression that is this term */pExpr124056,4482277
  WhereClause *pWC;       /* The clause this term is part of */pWC124057,4482356
  LogEst truthProb;       /* Probability of truth for this expression */truthProb124058,4482420
  u16 wtFlags;            /* TERM_xxx bit flags.  See below */wtFlags124059,4482493
  u16 eOperator;          /* A WO_xx value describing <op> */eOperator124060,4482556
  u8 nChild;              /* Number of children that must disable us */nChild124061,4482618
  u8 eMatchOp;            /* Op for vtab MATCH/LIKE/GLOB/REGEXP terms */eMatchOp124062,4482690
  int iParent;            /* Disable pWC->a[iParent] when this term disabled */iParent124063,4482763
  int leftCursor;         /* Cursor number of X in "X <op> <expr>" */leftCursor124064,4482843
  int iField;             /* Field in (?,?,?) IN (SELECT...) vector */iField124065,4482913
    int leftColumn;         /* Column number of X in "X <op> <expr>" */leftColumn124067,4482994
    WhereOrInfo *pOrInfo;   /* Extra information if (eOperator & WO_OR)!=0 */pOrInfo124068,4483066
    WhereAndInfo *pAndInfo; /* Extra information if (eOperator& WO_AND)!=0 */pAndInfo124069,4483144
  } u;u124070,4483222
  Bitmask prereqRight;    /* Bitmask of tables used by pExpr->pRight */prereqRight124071,4483229
  Bitmask prereqAll;      /* Bitmask of tables referenced by pExpr */prereqAll124072,4483301
#define TERM_DYNAMIC TERM_DYNAMIC124078,4483420
#define TERM_VIRTUAL TERM_VIRTUAL124079,4483499
#define TERM_CODED TERM_CODED124080,4483573
#define TERM_COPIED TERM_COPIED124081,4483637
#define TERM_ORINFO TERM_ORINFO124082,4483686
#define TERM_ANDINFO TERM_ANDINFO124083,4483767
#define TERM_OR_OK TERM_OR_OK124084,4483846
#  define TERM_VNULL TERM_VNULL124086,4483952
#  define TERM_VNULL TERM_VNULL124088,4484031
#define TERM_LIKEOPT TERM_LIKEOPT124090,4484103
#define TERM_LIKECOND TERM_LIKECOND124091,4484181
#define TERM_LIKE TERM_LIKE124092,4484256
#define TERM_IS TERM_IS124093,4484320
struct WhereScan {WhereScan124099,4484535
  WhereClause *pOrigWC;      /* Original, innermost WhereClause */pOrigWC124100,4484554
  WhereClause *pWC;          /* WhereClause currently being scanned */pWC124101,4484621
  const char *zCollName;     /* Required collating sequence, if not NULL */zCollName124102,4484692
  Expr *pIdxExpr;            /* Search for this index expression */pIdxExpr124103,4484768
  char idxaff;               /* Must match this affinity, if zCollName!=NULL */idxaff124104,4484836
  unsigned char nEquiv;      /* Number of entries in aEquiv[] */nEquiv124105,4484916
  unsigned char iEquiv;      /* Next unused slot in aEquiv[] */iEquiv124106,4484981
  u32 opMask;                /* Acceptable operators */opMask124107,4485045
  int k;                     /* Resume scanning at this->pWC->a[this->k] */k124108,4485101
  int aiCur[11];             /* Cursors in the equivalence class */aiCur124109,4485177
  i16 aiColumn[11];          /* Corresponding column number in the eq-class */aiColumn124110,4485245
struct WhereClause {WhereClause124125,4485808
  WhereInfo *pWInfo;       /* WHERE clause processing context */pWInfo124126,4485829
  WhereClause *pOuter;     /* Outer conjunction */pOuter124127,4485894
  u8 op;                   /* Split operator.  TK_AND or TK_OR */op124128,4485945
  int nTerm;               /* Number of terms */nTerm124129,4486011
  int nSlot;               /* Number of entries in a[] */nSlot124130,4486060
  WhereTerm *a;            /* Each a[] describes a term of the WHERE cluase */a124131,4486118
  WhereTerm aStatic[1];    /* Initial static space for a[] */aStatic124133,4486229
  WhereTerm aStatic[8];    /* Initial static space for a[] */aStatic124135,4486297
struct WhereOrInfo {WhereOrInfo124143,4486510
  WhereClause wc;          /* Decomposition into subterms */wc124144,4486531
  Bitmask indexable;       /* Bitmask of all indexable tables in the clause */indexable124145,4486592
struct WhereAndInfo {WhereAndInfo124152,4486817
  WhereClause wc;          /* The subexpression broken out */wc124153,4486839
struct WhereMaskSet {WhereMaskSet124182,4488170
  int n;                        /* Number of assigned cursor values */n124183,4488192
  int ix[BMS];                  /* Cursor assigned to each bit */ix124184,4488263
#define initMaskSet(initMaskSet124190,4488375
struct WhereLoopBuilder {WhereLoopBuilder124196,4488544
  WhereInfo *pWInfo;        /* Information about this WHERE */pWInfo124197,4488570
  WhereClause *pWC;         /* WHERE clause terms */pWC124198,4488633
  ExprList *pOrderBy;       /* ORDER BY clause */pOrderBy124199,4488686
  WhereLoop *pNew;          /* Template WhereLoop */pNew124200,4488736
  WhereOrSet *pOrSet;       /* Record best loops here, if not NULL */pOrSet124201,4488789
  UnpackedRecord *pRec;     /* Probe for stat4 (if required) */pRec124203,4488895
  int nRecValid;            /* Number of valid fields currently in pRec */nRecValid124204,4488959
struct WhereInfo {WhereInfo124218,4489421
  Parse *pParse;            /* Parsing and code generating context */pParse124219,4489440
  SrcList *pTabList;        /* List of tables in the join */pTabList124220,4489510
  ExprList *pOrderBy;       /* The ORDER BY clause or NULL */pOrderBy124221,4489571
  ExprList *pDistinctSet;   /* DISTINCT over all these values */pDistinctSet124222,4489633
  LogEst iLimit;            /* LIMIT if wctrlFlags has WHERE_USE_LIMIT */iLimit124223,4489698
  int aiCurOnePass[2];      /* OP_OpenWrite cursors for the ONEPASS opt */aiCurOnePass124224,4489772
  int iContinue;            /* Jump here to continue with next record */iContinue124225,4489847
  int iBreak;               /* Jump here to break out of the loop */iBreak124226,4489920
  int savedNQueryLoop;      /* pParse->nQueryLoop outside the WHERE loop */savedNQueryLoop124227,4489989
  u16 wctrlFlags;           /* Flags originally passed to sqlite3WhereBegin() */wctrlFlags124228,4490065
  u8 nLevel;                /* Number of nested loop */nLevel124229,4490146
  i8 nOBSat;                /* Number of ORDER BY terms satisfied by indices */nOBSat124230,4490202
  u8 sorted;                /* True if really sorted (not just grouped) */sorted124231,4490282
  u8 eOnePass;              /* ONEPASS_OFF, or _SINGLE, or _MULTI */eOnePass124232,4490357
  u8 untestedTerms;         /* Not all WHERE terms resolved by outer loop */untestedTerms124233,4490426
  u8 eDistinct;             /* One of the WHERE_DISTINCT_* values */eDistinct124234,4490503
  u8 bOrderedInnerLoop;     /* True if only the inner-most loop is ordered */bOrderedInnerLoop124235,4490572
  int iTop;                 /* The very beginning of the WHERE loop */iTop124236,4490650
  WhereLoop *pLoops;        /* List of all WhereLoop objects */pLoops124237,4490721
  Bitmask revMask;          /* Mask of ORDER BY terms that need reversing */revMask124238,4490785
  LogEst nRowOut;           /* Estimated number of output rows */nRowOut124239,4490862
  WhereClause sWC;          /* Decomposition of the WHERE clause */sWC124240,4490928
  WhereMaskSet sMaskSet;    /* Map cursor numbers to bitmasks */sMaskSet124241,4490996
  WhereLevel a[1];          /* Information about each nest loop in WHERE */a124242,4491061
# define sqlite3WhereExplainOneScan(sqlite3WhereExplainOneScan124274,4492346
# define sqlite3WhereAddScanStatus(sqlite3WhereAddScanStatus124284,4492813
#define WO_IN WO_IN124319,4494213
#define WO_EQ WO_EQ124320,4494238
#define WO_LT WO_LT124321,4494263
#define WO_LE WO_LE124322,4494304
#define WO_GT WO_GT124323,4494345
#define WO_GE WO_GE124324,4494386
#define WO_MATCH WO_MATCH124325,4494427
#define WO_IS WO_IS124326,4494452
#define WO_ISNULL WO_ISNULL124327,4494477
#define WO_OR WO_OR124328,4494502
#define WO_AND WO_AND124329,4494570
#define WO_EQUIV WO_EQUIV124330,4494639
#define WO_NOOP WO_NOOP124331,4494707
#define WO_ALL WO_ALL124333,4494786
#define WO_SINGLE WO_SINGLE124334,4494856
#define WHERE_COLUMN_EQ WHERE_COLUMN_EQ124341,4495120
#define WHERE_COLUMN_RANGE WHERE_COLUMN_RANGE124342,4495172
#define WHERE_COLUMN_IN WHERE_COLUMN_IN124343,4495238
#define WHERE_COLUMN_NULL WHERE_COLUMN_NULL124344,4495294
#define WHERE_CONSTRAINT WHERE_CONSTRAINT124345,4495349
#define WHERE_TOP_LIMIT WHERE_TOP_LIMIT124346,4495429
#define WHERE_BTM_LIMIT WHERE_BTM_LIMIT124347,4495503
#define WHERE_BOTH_LIMIT WHERE_BOTH_LIMIT124348,4495577
#define WHERE_IDX_ONLY WHERE_IDX_ONLY124349,4495645
#define WHERE_IPK WHERE_IPK124350,4495718
#define WHERE_INDEXED WHERE_INDEXED124351,4495792
#define WHERE_VIRTUALTABLE WHERE_VIRTUALTABLE124352,4495871
#define WHERE_IN_ABLE WHERE_IN_ABLE124353,4495942
#define WHERE_ONEROW WHERE_ONEROW124354,4496018
#define WHERE_MULTI_OR WHERE_MULTI_OR124355,4496092
#define WHERE_AUTO_INDEX WHERE_AUTO_INDEX124356,4496163
#define WHERE_SKIPSCAN WHERE_SKIPSCAN124357,4496232
#define WHERE_UNQ_WANTED WHERE_UNQ_WANTED124358,4496306
#define WHERE_PARTIALIDX WHERE_PARTIALIDX124359,4496387
static const char *explainIndexColumnName(Index *pIdx, int i){explainIndexColumnName124369,4496717
static void explainAppendTerm(explainAppendTerm124384,4497225
static void explainIndexRange(StrAccum *pStr, WhereLoop *pLoop){explainIndexRange124428,4498659
SQLITE_PRIVATE int sqlite3WhereExplainOneScan(sqlite3WhereExplainOneScan124462,4499887
SQLITE_PRIVATE void sqlite3WhereAddScanStatus(sqlite3WhereAddScanStatus124574,4504256
static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){disableTerm124636,4506996
static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){codeApplyAffinity124667,4508006
static void updateRangeAffinityStr(updateRangeAffinityStr124704,4509129
static int codeEqualityTerm(codeEqualityTerm124735,4510370
static int codeAllEqualityTerms(codeAllEqualityTerms124945,4518486
static void whereLikeOptimizationStringFixup(whereLikeOptimizationStringFixup125065,4523349
# define whereLikeOptimizationStringFixup(whereLikeOptimizationStringFixup125082,4524015
struct CCurHint {CCurHint125091,4524273
  int iTabCur;    /* Cursor for the main table */iTabCur125092,4524291
  int iIdxCur;    /* Cursor for the index, if pIdx!=0.  Unused otherwise */iIdxCur125093,4524341
  Index *pIdx;    /* The index used to access the table */pIdx125094,4524417
static int codeCursorHintCheckExpr(Walker *pWalker, Expr *pExpr){codeCursorHintCheckExpr125103,4524784
static int codeCursorHintIsOrFunction(Walker *pWalker, Expr *pExpr){codeCursorHintIsOrFunction125130,4525636
static int codeCursorHintFixExpr(Walker *pWalker, Expr *pExpr){codeCursorHintFixExpr125165,4526837
static void codeCursorHint(codeCursorHint125198,4528127
# define codeCursorHint(codeCursorHint125299,4531856
static void codeDeferredSeek(codeDeferredSeek125320,4532781
static void codeExprOrVector(Parse *pParse, Expr *p, int iReg, int nReg){codeExprOrVector125359,4534164
SQLITE_PRIVATE Bitmask sqlite3WhereCodeOneLoopStart(sqlite3WhereCodeOneLoopStart125387,4534912
static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){whereOrInfoDelete126410,4577881
static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){whereAndInfoDelete126418,4578073
static int whereClauseInsert(WhereClause *pWC, Expr *p, u16 wtFlags){whereClauseInsert126442,4579170
static int allowedOp(int op){allowedOp126483,4580431
static void exprCommute(Parse *pParse, Expr *pExpr){exprCommute126503,4581236
static u16 operatorMask(int op){operatorMask126534,4582369
static int isLikeOrGlob(isLikeOrGlob126572,4583555
static int isMatchOfColumn(isMatchOfColumn126672,4587121
static void transferJoinMarkings(Expr *pDerived, Expr *pBase){transferJoinMarkings126714,4588236
static void markTermAsChild(WhereClause *pWC, int iChild, int iParent){markTermAsChild126724,4588490
static WhereTerm *whereNthSubterm(WhereTerm *pTerm, int N){whereNthSubterm126735,4588881
static void whereCombineDisjuncts(whereCombineDisjuncts126765,4589724
static void exprAnalyzeOrTerm(exprAnalyzeOrTerm126891,4594852
static int termIsEquivalence(Parse *pParse, Expr *pExpr){termIsEquivalence127154,4605734
static Bitmask exprSelectUsage(WhereMaskSet *pMaskSet, Select *pS){exprSelectUsage127182,4606769
static int exprMightBeIndexed(exprMightBeIndexed127216,4608123
static void exprAnalyze(exprAnalyze127279,4610635
SQLITE_PRIVATE void sqlite3WhereSplit(WhereClause *pWC, Expr *pExpr, u8 op){sqlite3WhereSplit127682,4625918
SQLITE_PRIVATE void sqlite3WhereClauseInit(sqlite3WhereClauseInit127697,4626301
SQLITE_PRIVATE void sqlite3WhereClauseClear(WhereClause *pWC){sqlite3WhereClauseClear127713,4626763
SQLITE_PRIVATE Bitmask sqlite3WhereExprUsage(WhereMaskSet *pMaskSet, Expr *p){sqlite3WhereExprUsage127738,4627418
SQLITE_PRIVATE Bitmask sqlite3WhereExprListUsage(WhereMaskSet *pMaskSet, ExprList *pList){sqlite3WhereExprListUsage127755,4628023
SQLITE_PRIVATE void sqlite3WhereExprAnalyze(sqlite3WhereExprAnalyze127775,4628601
SQLITE_PRIVATE void sqlite3WhereTabFuncArgs(sqlite3WhereTabFuncArgs127792,4629061
/***/ int sqlite3WhereTrace = 0;sqlite3WhereTrace127853,4631395
SQLITE_PRIVATE LogEst sqlite3WhereOutputRowCount(WhereInfo *pWInfo){sqlite3WhereOutputRowCount127860,4631509
SQLITE_PRIVATE int sqlite3WhereIsDistinct(WhereInfo *pWInfo){sqlite3WhereIsDistinct127868,4631740
SQLITE_PRIVATE int sqlite3WhereIsOrdered(WhereInfo *pWInfo){sqlite3WhereIsOrdered127876,4631956
SQLITE_PRIVATE int sqlite3WhereOrderedInnerLoop(WhereInfo *pWInfo){sqlite3WhereOrderedInnerLoop127888,4632371
SQLITE_PRIVATE int sqlite3WhereContinueLabel(WhereInfo *pWInfo){sqlite3WhereContinueLabel127896,4632604
SQLITE_PRIVATE int sqlite3WhereBreakLabel(WhereInfo *pWInfo){sqlite3WhereBreakLabel127905,4632829
SQLITE_PRIVATE int sqlite3WhereOkOnePass(WhereInfo *pWInfo, int *aiCur){sqlite3WhereOkOnePass127926,4633763
static void whereOrMove(WhereOrSet *pDest, WhereOrSet *pSrc){whereOrMove127941,4634218
static int whereOrInsert(whereOrInsert127953,4634646
SQLITE_PRIVATE Bitmask sqlite3WhereGetMask(WhereMaskSet *pMaskSet, int iCursor){sqlite3WhereGetMask127990,4635613
static void createMask(WhereMaskSet *pMaskSet, int iCursor){createMask128009,4636149
static WhereTerm *whereScanNext(WhereScan *pScan){whereScanNext128019,4636513
static WhereTerm *whereScanInit(whereScanInit128115,4640193
SQLITE_PRIVATE WhereTerm *sqlite3WhereFindTerm(sqlite3WhereFindTerm128176,4642706
static int findIndexCol(findIndexCol128210,4643774
static int indexColumnNotNull(Index *pIdx, int iCol){indexColumnNotNull128239,4644623
static int isDistinctRedundant(isDistinctRedundant128262,4645223
static LogEst estLog(LogEst N){estLog128323,4647410
static void translateColumnToCopy(translateColumnToCopy128339,4648011
static void TRACE_IDX_INPUTS(sqlite3_index_info *p){TRACE_IDX_INPUTS128377,4649311
static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){TRACE_IDX_OUTPUTS128395,4649838
#define TRACE_IDX_INPUTS(TRACE_IDX_INPUTS128411,4650429
#define TRACE_IDX_OUTPUTS(TRACE_IDX_OUTPUTS128412,4650457
static int termCanDriveIndex(termCanDriveIndex128421,4650693
static void constructAutomaticIndex(constructAutomaticIndex128445,4651547
static sqlite3_index_info *allocateIndexInfo(allocateIndexInfo128650,4659844
static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){vtabBestIndex128790,4665125
static int whereKeyStats(whereKeyStats128839,4666657
static LogEst whereRangeAdjust(WhereTerm *pTerm, LogEst nNew){whereRangeAdjust129031,4673946
SQLITE_PRIVATE char sqlite3IndexColumnAffinity(sqlite3 *db, Index *pIdx, int iCol){sqlite3IndexColumnAffinity129048,4674343
static int whereRangeSkipScanEst(whereRangeSkipScanEst129094,4676177
static int whereRangeScanEst(whereRangeScanEst129206,4680529
static int whereEqualScanEst(whereEqualScanEst129385,4687692
static int whereInScanEst(whereInScanEst129449,4689794
static void whereTermPrint(WhereTerm *pTerm, int iTerm){whereTermPrint129486,4690994
SQLITE_PRIVATE void sqlite3WhereClausePrint(WhereClause *pWC){sqlite3WhereClausePrint129523,4692272
static void whereLoopPrint(WhereLoop *p, WhereClause *pWC){whereLoopPrint129535,4692507
static void whereLoopInit(WhereLoop *p){whereLoopInit129587,4694258
static void whereLoopClearUnion(sqlite3 *db, WhereLoop *p){whereLoopClearUnion129597,4694478
static void whereLoopClear(sqlite3 *db, WhereLoop *p){whereLoopClear129614,4695042
static int whereLoopResize(sqlite3 *db, WhereLoop *p, int n){whereLoopResize129623,4695292
static int whereLoopXfer(sqlite3 *db, WhereLoop *pTo, WhereLoop *pFrom){whereLoopXfer129639,4695782
static void whereLoopDelete(sqlite3 *db, WhereLoop *p){whereLoopDelete129658,4696350
static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){whereInfoFree129666,4696494
static int whereLoopCheaperProperSubset(whereLoopCheaperProperSubset129702,4697693
static void whereLoopAdjustCost(const WhereLoop *p, WhereLoop *pTemplate){whereLoopAdjustCost129739,4698949
static WhereLoop **whereLoopFindLesser(whereLoopFindLesser129775,4700481
static int whereLoopInsert(WhereLoopBuilder *pBuilder, WhereLoop *pTemplate){whereLoopInsert129863,4704266
static void whereLoopOutputAdjust(whereLoopOutputAdjust129989,4708611
static int whereRangeVectorLen(whereRangeVectorLen130052,4710781
# define ApplyCostMultiplier(ApplyCostMultiplier130106,4712778
# define ApplyCostMultiplier(ApplyCostMultiplier130108,4712826
static int whereLoopAddBtreeIndex(whereLoopAddBtreeIndex130123,4713310
static int indexMightHelpWithOrderBy(indexMightHelpWithOrderBy130444,4726283
static Bitmask columnsInIndex(Index *pIdx){columnsInIndex130478,4727273
static int whereUsablePartialIndex(int iTab, WhereClause *pWC, Expr *pWhere){whereUsablePartialIndex130495,4727685
static int whereLoopAddBtree(whereLoopAddBtree130549,4729925
static int whereLoopAddVirtualOne(whereLoopAddVirtualOne130793,4739668
static int whereLoopAddVirtual(whereLoopAddVirtual130947,4745572
static int whereLoopAddOr(whereLoopAddOr131068,4750346
static int whereLoopAddAll(WhereLoopBuilder *pBuilder){whereLoopAddAll131191,4754372
static i8 wherePathSatisfiesOrderBy(wherePathSatisfiesOrderBy131259,4756920
SQLITE_PRIVATE int sqlite3WhereIsSorted(WhereInfo *pWInfo){sqlite3WhereIsSorted131569,4769434
static const char *wherePathName(WherePath *pPath, int nLoop, WhereLoop *pLast){wherePathName131577,4769678
static LogEst whereSortingCost(whereSortingCost131592,4770091
static int wherePathSolver(WhereInfo *pWInfo, LogEst nRowEst){wherePathSolver131637,4771541
static int whereShortCut(WhereLoopBuilder *pBuilder){whereShortCut132005,4786809
SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin(sqlite3WhereBegin132171,4793146
SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){sqlite3WhereEnd132633,4810172
#define YYNOERRORRECOVERY YYNOERRORRECOVERY132846,4817790
#define yytestcase(yytestcase132851,4817869
#define YYPARSEFREENEVERNULL YYPARSEFREENEVERNULL132857,4817992
#define YYMALLOCARGTYPE YYMALLOCARGTYPE132863,4818156
struct LimitVal {LimitVal132869,4818292
  Expr *pLimit;    /* The LIMIT expression.  NULL if there is no limit */pLimit132870,4818310
  Expr *pOffset;   /* The OFFSET expression.  NULL if there is none */pOffset132871,4818384
struct TrigEvent { int a; IdList * b; };TrigEvent132883,4818736
struct TrigEvent { int a; IdList * b; };a132883,4818736
struct TrigEvent { int a; IdList * b; };b132883,4818736
static void disableLookaside(Parse *pParse){disableLookaside132889,4818888
  static void parserDoubleLinkSelect(Parse *pParse, Select *p){parserDoubleLinkSelect132900,4819194
  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){spanSet132921,4819942
  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token t){spanExpr132930,4820262
  static void spanBinaryExpr(spanBinaryExpr132956,4821055
  static void exprNot(Parse *pParse, int doNot, ExprSpan *pSpan){exprNot132969,4821537
  static void spanUnaryPostfix(spanUnaryPostfix132977,4821770
  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){binaryToUnaryIfNull132989,4822318
  static void spanUnaryPrefix(spanUnaryPrefix133000,4822629
  static ExprList *parserAddExprIdListTerm(parserAddExprIdListTerm133017,4823343
# define INTERFACE INTERFACE133089,4827477
#define YYCODETYPE YYCODETYPE133092,4827586
#define YYNOCODE YYNOCODE133093,4827619
#define YYACTIONTYPE YYACTIONTYPE133094,4827640
#define YYWILDCARD YYWILDCARD133095,4827680
#define sqlite3ParserTOKENTYPE sqlite3ParserTOKENTYPE133096,4827702
  int yyinit;yyinit133098,4827755
  sqlite3ParserTOKENTYPE yy0;yy0133099,4827769
  Expr* yy72;yy72133100,4827799
  TriggerStep* yy145;yy145133101,4827813
  ExprList* yy148;yy148133102,4827835
  SrcList* yy185;yy185133103,4827854
  ExprSpan yy190;yy190133104,4827872
  int yy194;yy194133105,4827890
  Select* yy243;yy243133106,4827903
  IdList* yy254;yy254133107,4827920
  With* yy285;yy285133108,4827937
  struct TrigEvent yy332;yy332133109,4827952
  struct LimitVal yy354;yy354133110,4827978
  struct {int value; int mask;} yy497;value133111,4828003
  struct {int value; int mask;} yy497;mask133111,4828003
  struct {int value; int mask;} yy497;yy497133111,4828003
} YYMINORTYPE;YYMINORTYPE133112,4828042
#define YYSTACKDEPTH YYSTACKDEPTH133114,4828078
#define sqlite3ParserARG_SDECL sqlite3ParserARG_SDECL133116,4828110
#define sqlite3ParserARG_PDECL sqlite3ParserARG_PDECL133117,4828156
#define sqlite3ParserARG_FETCH sqlite3ParserARG_FETCH133118,4828202
#define sqlite3ParserARG_STORE sqlite3ParserARG_STORE133119,4828267
#define YYFALLBACK YYFALLBACK133120,4828325
#define YYNSTATE YYNSTATE133121,4828346
#define YYNRULE YYNRULE133122,4828379
#define YY_MAX_SHIFT YY_MAX_SHIFT133123,4828412
#define YY_MIN_SHIFTREDUCE YY_MIN_SHIFTREDUCE133124,4828445
#define YY_MAX_SHIFTREDUCE YY_MAX_SHIFTREDUCE133125,4828478
#define YY_MIN_REDUCE YY_MIN_REDUCE133126,4828511
#define YY_MAX_REDUCE YY_MAX_REDUCE133127,4828545
#define YY_ERROR_ACTION YY_ERROR_ACTION133128,4828579
#define YY_ACCEPT_ACTION YY_ACCEPT_ACTION133129,4828613
#define YY_NO_ACTION YY_NO_ACTION133130,4828647
# define yytestcase(yytestcase133142,4829110
#define YY_ACTTAB_COUNT YY_ACTTAB_COUNT133202,4831810
static const YYACTIONTYPE yy_action[] = {yy_action133203,4831841
static const YYCODETYPE yy_lookahead[] = {yy_lookahead133362,4843486
#define YY_SHIFT_USE_DFLT YY_SHIFT_USE_DFLT133521,4855132
#define YY_SHIFT_COUNT YY_SHIFT_COUNT133522,4855165
#define YY_SHIFT_MIN YY_SHIFT_MIN133523,4855197
#define YY_SHIFT_MAX YY_SHIFT_MAX133524,4855229
static const short yy_shift_ofst[] = {yy_shift_ofst133525,4855262
#define YY_REDUCE_USE_DFLT YY_REDUCE_USE_DFLT133573,4858684
#define YY_REDUCE_COUNT YY_REDUCE_COUNT133574,4858718
#define YY_REDUCE_MIN YY_REDUCE_MIN133575,4858748
#define YY_REDUCE_MAX YY_REDUCE_MAX133576,4858779
static const short yy_reduce_ofst[] = {yy_reduce_ofst133577,4858810
static const YYACTIONTYPE yy_default[] = {yy_default133612,4861265
static const YYCODETYPE yyFallback[] = {yyFallback133677,4865379
struct yyStackEntry {yyStackEntry133793,4869275
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */stateno133794,4869297
  YYCODETYPE major;      /* The major token value.  This is the codemajor133795,4869378
  YYMINORTYPE minor;     /* The user-supplied minor token value.  Thisminor133797,4869519
typedef struct yyStackEntry yyStackEntry;yyStackEntry133800,4869651
struct yyParser {yyParser133804,4869793
  yyStackEntry *yytos;          /* Pointer to top element of the stack */yytos133805,4869811
  int yyhwm;                    /* High-water mark of the stack */yyhwm133807,4869913
  int yyerrcnt;                 /* Shifts left before out of the error */yyerrcnt133810,4870013
  int yystksz;                  /* Current side of the stack */yystksz133814,4870192
  yyStackEntry *yystack;        /* The parser's stack */yystack133815,4870256
  yyStackEntry yystk0;          /* First stack entry */yystk0133816,4870313
typedef struct yyParser yyParser;yyParser133821,4870449
static FILE *yyTraceFILE = 0;yyTraceFILE133825,4870524
static char *yyTracePrompt = 0;yyTracePrompt133826,4870554
SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){sqlite3ParserTrace133847,4871098
static const char *const yyTokenName[] = { yyTokenName133858,4871490
static const char *const yyRuleName[] = {yyRuleName133928,4876023
static int yyGrowStack(yyParser *p){yyGrowStack134270,4890347
# define YYMALLOCARGTYPE YYMALLOCARGTYPE134304,4891249
SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(YYMALLOCARGTYPE)){sqlite3ParserAlloc134319,4891607
static void yy_destructor(yy_destructor134352,4892651
static void yy_pop_parser_stack(yyParser *pParser){yy_pop_parser_stack134454,4895494
SQLITE_PRIVATE void sqlite3ParserFree(sqlite3ParserFree134477,4896192
SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){sqlite3ParserStackPeak134496,4896749
static unsigned int yy_find_shift_action(yy_find_shift_action134506,4896973
static int yy_find_reduce_action(yy_find_reduce_action134569,4898744
static void yyStackOverflow(yyParser *yypParser){yyStackOverflow134599,4899467
static void yyTraceShift(yyParser *yypParser, int yyNewState){yyTraceShift134621,4900221
# define yyTraceShift(yyTraceShift134634,4900614
static void yy_shift(yy_shift134640,4900682
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */lhs134681,4901931
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */nrhs134682,4902004
} yyRuleInfo[] = {yyRuleInfo134683,4902082
static void yy_reduce(yy_reduce135024,4906909
static void yy_parse_failed(yy_parse_failed136332,4964884
static void yy_syntax_error(yy_syntax_error136353,4965607
#define TOKEN TOKEN136359,4965869
static void yy_accept(yy_accept136372,4966403
SQLITE_PRIVATE void sqlite3Parser(sqlite3Parser136411,4967679
#define CC_X CC_X136598,4974078
#define CC_KYWD CC_KYWD136599,4974152
#define CC_ID CC_ID136600,4974226
#define CC_DIGIT CC_DIGIT136601,4974292
#define CC_DOLLAR CC_DOLLAR136602,4974332
#define CC_VARALPHA CC_VARALPHA136603,4974369
#define CC_VARNUM CC_VARNUM136604,4974443
#define CC_SPACE CC_SPACE136605,4974504
#define CC_QUOTE CC_QUOTE136606,4974554
#define CC_QUOTE2 CC_QUOTE2136607,4974635
#define CC_PIPE CC_PIPE136608,4974698
#define CC_MINUS CC_MINUS136609,4974764
#define CC_LT CC_LT136610,4974830
#define CC_GT CC_GT136611,4974891
#define CC_EQ CC_EQ136612,4974946
#define CC_BANG CC_BANG136613,4975001
#define CC_SLASH CC_SLASH136614,4975051
#define CC_LP CC_LP136615,4975111
#define CC_RP CC_RP136616,4975148
#define CC_SEMI CC_SEMI136617,4975185
#define CC_PLUS CC_PLUS136618,4975222
#define CC_STAR CC_STAR136619,4975259
#define CC_PERCENT CC_PERCENT136620,4975296
#define CC_COMMA CC_COMMA136621,4975333
#define CC_AND CC_AND136622,4975370
#define CC_TILDA CC_TILDA136623,4975407
#define CC_DOT CC_DOT136624,4975444
#define CC_ILLEGAL CC_ILLEGAL136625,4975481
static const unsigned char aiClass[] = {aiClass136627,4975533
# define charMap(charMap136678,4978573
# define charMap(charMap136681,4978659
const unsigned char ebcdicToAscii[] = {ebcdicToAscii136682,4978711
static int keywordCode(const char *z, int n, int *pType){keywordCode136730,4981312
SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){sqlite3KeywordCode136995,4994716
#define SQLITE_N_KEYWORD SQLITE_N_KEYWORD137000,4994852
#define IdChar(IdChar137023,4995629
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {sqlite3IsEbcdicIdChar137026,4995722
#define IdChar(IdChar137041,4996577
SQLITE_PRIVATE int sqlite3IsIdChar(u8 c){ return IdChar(c); }sqlite3IsIdChar137046,4996748
SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){sqlite3GetToken137054,4996948
SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){sqlite3RunParser137334,5003944
#define IdChar(IdChar137493,5009123
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];sqlite3IsEbcdicIdChar137496,5009216
#define IdChar(IdChar137497,5009267
#define tkSEMI tkSEMI137506,5009512
#define tkWS tkWS137507,5009532
#define tkOTHER tkOTHER137508,5009552
#define tkEXPLAIN tkEXPLAIN137510,5009600
#define tkCREATE tkCREATE137511,5009620
#define tkTEMP tkTEMP137512,5009640
#define tkTRIGGER tkTRIGGER137513,5009660
#define tkEND tkEND137514,5009680
SQLITE_API int sqlite3_complete(const char *zSql){sqlite3_complete137570,5011914
SQLITE_API int sqlite3_complete16(const void *zSql){sqlite3_complete16137735,5017005
SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;sqlite3_version137889,5021831
SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }sqlite3_libversion137895,5022041
SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }sqlite3_sourceid137901,5022304
SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }sqlite3_libversion_number137906,5022513
SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }sqlite3_threadsafe137912,5022813
#   define SQLITE_DEBUG_OS_TRACE SQLITE_DEBUG_OS_TRACE137921,5023127
  int sqlite3OSTrace = SQLITE_DEBUG_OS_TRACE;sqlite3OSTrace137923,5023170
SQLITE_API void (SQLITE_CDECL *sqlite3IoTrace)(const char*, ...) = 0;sqlite3IoTrace137933,5023522
SQLITE_API char *sqlite3_temp_directory = 0;sqlite3_temp_directory137943,5023822
SQLITE_API char *sqlite3_data_directory = 0;sqlite3_data_directory137952,5024128
SQLITE_API int sqlite3_initialize(void){sqlite3_initialize137985,5025510
SQLITE_API int sqlite3_shutdown(void){sqlite3_shutdown138151,5031400
SQLITE_API int sqlite3_config(int op, ...){sqlite3_config138205,5033069
static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){setupLookaside138511,5045158
SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){sqlite3_db_mutex138570,5046809
SQLITE_API int sqlite3_db_release_memory(sqlite3 *db){sqlite3_db_release_memory138584,5047091
SQLITE_API int sqlite3_db_cacheflush(sqlite3 *db){sqlite3_db_cacheflush138608,5047656
SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){sqlite3_db_config138637,5048417
static int allSpaces(const char *z, int n){allSpaces138697,5050220
static int binCollFunc(binCollFunc138709,5050549
static int nocaseCollatingFunc(nocaseCollatingFunc138746,5051709
SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){sqlite3_last_insert_rowid138763,5052062
SQLITE_API int sqlite3_changes(sqlite3 *db){sqlite3_changes138776,5052355
SQLITE_API int sqlite3_total_changes(sqlite3 *db){sqlite3_total_changes138789,5052622
SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){sqlite3CloseSavepoints138804,5053012
static void functionDestroy(sqlite3 *db, FuncDef *p){functionDestroy138821,5053553
static void disconnectAllVtab(sqlite3 *db){disconnectAllVtab138836,5053966
static int connectionIsBusy(sqlite3 *db){connectionIsBusy138867,5054817
static int sqlite3Close(sqlite3 *db, int forceZombie){sqlite3Close138881,5055117
SQLITE_API int sqlite3_close(sqlite3 *db){ return sqlite3Close(db,0); }sqlite3_close138940,5057272
SQLITE_API int sqlite3_close_v2(sqlite3 *db){ return sqlite3Close(db,1); }sqlite3_close_v2138941,5057344
SQLITE_PRIVATE void sqlite3LeaveMutexAndCloseZombie(sqlite3 *db){sqlite3LeaveMutexAndCloseZombie138952,5057737
SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db, int tripCode){sqlite3RollbackAll139075,5061791
SQLITE_PRIVATE const char *sqlite3ErrName(int rc){sqlite3ErrName139125,5063413
SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){sqlite3ErrStr139233,5070734
static int sqliteDefaultBusyCallback(sqliteDefaultBusyCallback139286,5072871
# define NDELAY NDELAY139295,5073239
SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){sqlite3InvokeBusyHandler139332,5074136
SQLITE_API int sqlite3_busy_handler(sqlite3_busy_handler139348,5074509
SQLITE_API void sqlite3_progress_handler(sqlite3_progress_handler139371,5075140
SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){sqlite3_busy_timeout139402,5075784
SQLITE_API void sqlite3_interrupt(sqlite3 *db){sqlite3_interrupt139418,5076195
SQLITE_PRIVATE int sqlite3CreateFunc(sqlite3CreateFunc139435,5076669
SQLITE_API int sqlite3_create_function(sqlite3_create_function139534,5079726
SQLITE_API int sqlite3_create_function_v2(sqlite3_create_function_v2139548,5080114
SQLITE_API int sqlite3_create_function16(sqlite3_create_function16139591,5081120
SQLITE_API int sqlite3_overload_function(sqlite3_overload_function139631,5082368
SQLITE_API void *sqlite3_trace(sqlite3 *db, void(*xTrace)(void*,const char*), void *pArg){sqlite3_trace139663,5083243
SQLITE_API int sqlite3_trace_v2(sqlite3_trace_v2139684,5083806
SQLITE_API void *sqlite3_profile(sqlite3_profile139714,5084787
SQLITE_API void *sqlite3_commit_hook(sqlite3_commit_hook139742,5085428
SQLITE_API void *sqlite3_update_hook(sqlite3_update_hook139767,5086096
SQLITE_API void *sqlite3_rollback_hook(sqlite3_rollback_hook139792,5086755
SQLITE_API void *sqlite3_preupdate_hook(sqlite3_preupdate_hook139818,5087451
SQLITE_PRIVATE int sqlite3WalDefaultHook(sqlite3WalDefaultHook139841,5088273
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){sqlite3_wal_autocheckpoint139867,5089220
SQLITE_API void *sqlite3_wal_hook(sqlite3_wal_hook139888,5089772
SQLITE_API int sqlite3_wal_checkpoint_v2(sqlite3_wal_checkpoint_v2139915,5090396
SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){sqlite3_wal_checkpoint139970,5092155
SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){sqlite3Checkpoint139996,5093348
SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){sqlite3TempInMemory140040,5095229
SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){sqlite3_errmsg140061,5095665
SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){sqlite3_errmsg16140089,5096333
SQLITE_API int sqlite3_errcode(sqlite3 *db){sqlite3_errcode140134,5097740
SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){sqlite3_extended_errcode140143,5097972
SQLITE_API int sqlite3_system_errno(sqlite3 *db){sqlite3_system_errno140152,5098199
SQLITE_API const char *sqlite3_errstr(int rc){sqlite3_errstr140161,5098445
static int createCollation(createCollation140169,5098630
static const int aHardLimit[] = {aHardLimit140246,5100952
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){sqlite3_limit140309,5102846
SQLITE_PRIVATE int sqlite3ParseUri(sqlite3ParseUri140377,5105990
static int openDatabase(openDatabase140604,5113559
SQLITE_API int sqlite3_open(sqlite3_open140936,5124107
SQLITE_API int sqlite3_open_v2(sqlite3_open_v2140943,5124294
SQLITE_API int sqlite3_open16(sqlite3_open16140956,5124669
SQLITE_API int sqlite3_create_collation(sqlite3_create_collation140995,5125744
SQLITE_API int sqlite3_create_collation_v2(sqlite3_create_collation_v2141008,5126056
SQLITE_API int sqlite3_create_collation16(sqlite3_create_collation16141033,5126677
SQLITE_API int sqlite3_collation_needed(sqlite3_collation_needed141063,5127498
SQLITE_API int sqlite3_collation_needed16(sqlite3_collation_needed16141084,5128107
SQLITE_API int sqlite3_global_recover(void){sqlite3_global_recover141106,5128753
SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){sqlite3_get_autocommit141117,5129086
static int reportError(int iErr, int lineno, const char *zType){reportError141138,5129730
SQLITE_PRIVATE int sqlite3CorruptError(int lineno){sqlite3CorruptError141143,5129913
SQLITE_PRIVATE int sqlite3MisuseError(int lineno){sqlite3MisuseError141147,5130079
SQLITE_PRIVATE int sqlite3CantopenError(int lineno){sqlite3CantopenError141151,5130230
SQLITE_PRIVATE int sqlite3NomemError(int lineno){sqlite3NomemError141156,5130415
SQLITE_PRIVATE int sqlite3IoerrnomemError(int lineno){sqlite3IoerrnomemError141160,5130561
SQLITE_API void sqlite3_thread_cleanup(void){sqlite3_thread_cleanup141174,5131023
SQLITE_API int sqlite3_table_column_metadata(sqlite3_table_column_metadata141182,5131212
SQLITE_API int sqlite3_sleep(int ms){sqlite3_sleep141300,5134803
SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){sqlite3_extended_result_codes141316,5135167
SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){sqlite3_file_control141329,5135536
SQLITE_API int sqlite3_test_control(int op, ...){sqlite3_test_control141369,5136657
SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){sqlite3_uri_parameter141723,5149430
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){sqlite3_uri_boolean141738,5149879
SQLITE_API sqlite3_int64 sqlite3_uri_int64(sqlite3_uri_int64141747,5150164
SQLITE_PRIVATE Btree *sqlite3DbNameToBtree(sqlite3 *db, const char *zDbName){sqlite3DbNameToBtree141763,5150647
SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName){sqlite3_db_filename141779,5151005
SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName){sqlite3_db_readonly141795,5151418
SQLITE_API int sqlite3_snapshot_get(sqlite3_snapshot_get141812,5151855
SQLITE_API int sqlite3_snapshot_open(sqlite3_snapshot_open141847,5152621
SQLITE_API void sqlite3_snapshot_free(sqlite3_snapshot *pSnapshot){sqlite3_snapshot_free141884,5153502
#define assertMutexHeld(assertMutexHeld141921,5154618
static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;sqlite3BlockedList141930,5154970
static void checkListProperties(sqlite3 *db){checkListProperties141947,5155608
# define checkListProperties(checkListProperties141966,5156180
static void removeFromBlockedList(sqlite3 *db){removeFromBlockedList141973,5156368
static void addToBlockedList(sqlite3 *db){addToBlockedList141988,5156714
static void enterMutex(void){enterMutex142003,5156998
static void leaveMutex(void){leaveMutex142011,5157169
SQLITE_API int sqlite3_unlock_notify(sqlite3_unlock_notify142038,5158099
SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){sqlite3ConnectionBlocked142088,5159500
SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){sqlite3ConnectionUnlocked142116,5160468
SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){sqlite3ConnectionClosed142215,5164311
#define _FTSINT_H_FTSINT_H142532,5177810
# define NDEBUG NDEBUG142535,5177877
# undef SQLITE_ENABLE_FTS3SQLITE_ENABLE_FTS3142540,5177974
# undef SQLITE_ENABLE_FTS4SQLITE_ENABLE_FTS4142541,5178001
# define SQLITE_ENABLE_FTS3SQLITE_ENABLE_FTS3142550,5178315
#define _FTS3_TOKENIZER_H__FTS3_TOKENIZER_H_142584,5179428
typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;sqlite3_tokenizer_module142611,5180641
typedef struct sqlite3_tokenizer sqlite3_tokenizer;sqlite3_tokenizer142612,5180707
typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;sqlite3_tokenizer_cursor142613,5180759
struct sqlite3_tokenizer_module {sqlite3_tokenizer_module142615,5180826
  int iVersion;iVersion142620,5180927
  int (*xCreate)(xCreate142639,5181710
  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);xDestroy142649,5182078
  int (*xOpen)(xOpen142656,5182341
  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);xClose142666,5182707
  int (*xNext)(xNext142692,5183993
  int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid);xLanguageid142707,5184599
struct sqlite3_tokenizer {sqlite3_tokenizer142710,5184670
  const sqlite3_tokenizer_module *pModule;  /* The module for this tokenizer */pModule142711,5184697
struct sqlite3_tokenizer_cursor {sqlite3_tokenizer_cursor142715,5184852
  sqlite3_tokenizer *pTokenizer;       /* Tokenizer for this cursor. */pTokenizer142716,5184886
#define _FTS3_HASH_H__FTS3_HASH_H_142747,5186083
typedef struct Fts3Hash Fts3Hash;Fts3Hash142750,5186148
typedef struct Fts3HashElem Fts3HashElem;Fts3HashElem142751,5186182
struct Fts3Hash {Fts3Hash142761,5186681
  char keyClass;          /* HASH_INT, _POINTER, _STRING, _BINARY */keyClass142762,5186699
  char copyKey;           /* True if copy of key made on insert */copyKey142763,5186768
  int count;              /* Number of entries in this table */count142764,5186835
  Fts3HashElem *first;    /* The first element of the array */first142765,5186899
  int htsize;             /* Number of buckets in the hash table */htsize142766,5186962
  struct _fts3ht {        /* the hash table */_fts3ht142767,5187030
    int count;               /* Number of entries with this hash */count142768,5187077
    Fts3HashElem *chain;     /* Pointer to first entry with this hash */chain142769,5187145
  } *ht;ht142770,5187218
struct Fts3HashElem {Fts3HashElem142779,5187489
  Fts3HashElem *next, *prev; /* Next and previous elements in the table */next142780,5187511
  Fts3HashElem *next, *prev; /* Next and previous elements in the table */prev142780,5187511
  void *data;                /* Data associated with this element */data142781,5187586
  void *pKey; int nKey;      /* Key associated with this element */pKey142782,5187655
  void *pKey; int nKey;      /* Key associated with this element */nKey142782,5187655
#define FTS3_HASH_STRING FTS3_HASH_STRING142797,5188230
#define FTS3_HASH_BINARY FTS3_HASH_BINARY142798,5188260
#define fts3HashInit fts3HashInit142812,5188809
#define fts3HashInsert fts3HashInsert142813,5188854
#define fts3HashFind fts3HashFind142814,5188901
#define fts3HashClear fts3HashClear142815,5188946
#define fts3HashFindElem fts3HashFindElem142816,5188992
#define fts3HashFirst(fts3HashFirst142830,5189325
#define fts3HashNext(fts3HashNext142831,5189364
#define fts3HashData(fts3HashData142832,5189402
#define fts3HashKey(fts3HashKey142833,5189440
#define fts3HashKeysize(fts3HashKeysize142834,5189478
#define fts3HashCount(fts3HashCount142839,5189561
# define SQLITE_FTS3_MAX_EXPR_DEPTH SQLITE_FTS3_MAX_EXPR_DEPTH142854,5190171
#define FTS3_MERGE_COUNT FTS3_MERGE_COUNT142863,5190393
#define FTS3_MAX_PENDING_DATA FTS3_MAX_PENDING_DATA142873,5190838
#define SizeofArray(SizeofArray142880,5191089
# define MIN(MIN142884,5191158
# define MAX(MAX142887,5191213
#define FTS3_VARINT_MAX FTS3_VARINT_MAX142894,5191406
#define FTS3_SEGDIR_MAXLEVEL FTS3_SEGDIR_MAXLEVEL142911,5192237
#define FTS3_SEGDIR_MAXLEVEL_STR FTS3_SEGDIR_MAXLEVEL_STR142912,5192276
# define testcase(testcase142919,5192433
#define POS_COLUMN POS_COLUMN142925,5192526
#define POS_END POS_END142926,5192583
# define ALWAYS(ALWAYS142939,5192907
# define NEVER(NEVER142940,5192930
# define ALWAYS(ALWAYS142942,5192981
# define NEVER(NEVER142943,5193026
# define ALWAYS(ALWAYS142947,5193164
# define NEVER(NEVER142948,5193187
typedef unsigned char u8;         /* 1-byte (or larger) unsigned integer */u8142954,5193258
typedef short int i16;            /* 2-byte (or larger) signed integer */i16142955,5193334
typedef unsigned int u32;         /* 4-byte unsigned integer */u32142956,5193408
typedef sqlite3_uint64 u64;       /* 8-byte unsigned integer */u64142957,5193472
typedef sqlite3_int64 i64;        /* 8-byte signed integer */i64142958,5193536
#define UNUSED_PARAMETER(UNUSED_PARAMETER142963,5193672
# define NDEBUG NDEBUG142969,5193818
# define TESTONLY(TESTONLY142978,5194080
# define TESTONLY(TESTONLY142980,5194110
# define FTS_CORRUPT_VTAB FTS_CORRUPT_VTAB142987,5194238
# define FTS_CORRUPT_VTAB FTS_CORRUPT_VTAB142989,5194291
typedef struct Fts3Table Fts3Table;Fts3Table142992,5194345
typedef struct Fts3Cursor Fts3Cursor;Fts3Cursor142993,5194381
typedef struct Fts3Expr Fts3Expr;Fts3Expr142994,5194419
typedef struct Fts3Phrase Fts3Phrase;Fts3Phrase142995,5194453
typedef struct Fts3PhraseToken Fts3PhraseToken;Fts3PhraseToken142996,5194491
typedef struct Fts3Doclist Fts3Doclist;Fts3Doclist142998,5194540
typedef struct Fts3SegFilter Fts3SegFilter;Fts3SegFilter142999,5194580
typedef struct Fts3DeferredToken Fts3DeferredToken;Fts3DeferredToken143000,5194624
typedef struct Fts3SegReader Fts3SegReader;Fts3SegReader143001,5194676
typedef struct Fts3MultiSegReader Fts3MultiSegReader;Fts3MultiSegReader143002,5194720
typedef struct MatchinfoBuffer MatchinfoBuffer;MatchinfoBuffer143004,5194775
struct Fts3Table {Fts3Table143013,5195120
  sqlite3_vtab base;              /* Base class used by SQLite core */base143014,5195139
  sqlite3 *db;                    /* The database connection */db143015,5195210
  const char *zDb;                /* logical database name */zDb143016,5195274
  const char *zName;              /* virtual table name */zName143017,5195336
  int nColumn;                    /* number of named columns in virtual table */nColumn143018,5195395
  char **azColumn;                /* column names.  malloced */azColumn143019,5195476
  u8 *abNotindexed;               /* True for 'notindexed' columns */abNotindexed143020,5195540
  sqlite3_tokenizer *pTokenizer;  /* tokenizer for inserts and queries */pTokenizer143021,5195610
  char *zContentTbl;              /* content=xxx option, or NULL */zContentTbl143022,5195684
  char *zLanguageid;              /* languageid=xxx option, or NULL */zLanguageid143023,5195752
  int nAutoincrmerge;             /* Value configured by 'automerge' */nAutoincrmerge143024,5195823
  u32 nLeafAdd;                   /* Number of leaf blocks added this trans */nLeafAdd143025,5195895
  sqlite3_stmt *aStmt[40];aStmt143030,5196125
  char *zReadExprlist;zReadExprlist143032,5196153
  char *zWriteExprlist;zWriteExprlist143033,5196176
  int nNodeSize;                  /* Soft limit for node size */nNodeSize143035,5196201
  u8 bFts4;                       /* True for FTS4, false for FTS3 */bFts4143036,5196266
  u8 bHasStat;                    /* True if %_stat table exists (2==unknown) */bHasStat143037,5196336
  u8 bHasDocsize;                 /* True if %_docsize table exists */bHasDocsize143038,5196417
  u8 bDescIdx;                    /* True if doclists are in reverse order */bDescIdx143039,5196488
  u8 bIgnoreSavepoint;            /* True to ignore xSavepoint invocations */bIgnoreSavepoint143040,5196566
  int nPgsz;                      /* Page size for host database */nPgsz143041,5196644
  char *zSegmentsTbl;             /* Name of %_segments table */zSegmentsTbl143042,5196712
  sqlite3_blob *pSegments;        /* Blob handle open on %_segments table */pSegments143043,5196777
  int nIndex;                     /* Size of aIndex[] */nIndex143062,5197784
  struct Fts3Index {Fts3Index143063,5197841
    int nPrefix;                  /* Prefix length (0 for main terms index) */nPrefix143064,5197862
    Fts3Hash hPending;            /* Pending terms table for this index */hPending143065,5197941
  } *aIndex;aIndex143066,5198016
  int nMaxPendingData;            /* Max pending data before flush to disk */nMaxPendingData143067,5198029
  int nPendingData;               /* Current bytes of pending data */nPendingData143068,5198107
  sqlite_int64 iPrevDocid;        /* Docid of most recently inserted document */iPrevDocid143069,5198177
  int iPrevLangid;                /* Langid of recently inserted document */iPrevLangid143070,5198258
  int bPrevDelete;                /* True if last operation was a delete */bPrevDelete143071,5198335
  int inTransaction;     /* True after xBegin but before xCommit/xRollback */inTransaction143079,5198739
  int mxSavepoint;       /* Largest valid xSavepoint integer */mxSavepoint143080,5198817
  int bNoIncrDoclist;bNoIncrDoclist143086,5199044
struct Fts3Cursor {Fts3Cursor143095,5199290
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base143096,5199310
  i16 eSearch;                    /* Search strategy (see below) */eSearch143097,5199381
  u8 isEof;                       /* True if at End Of Results */isEof143098,5199449
  u8 isRequireSeek;               /* True if must seek pStmt to %_content row */isRequireSeek143099,5199515
  sqlite3_stmt *pStmt;            /* Prepared statement in use by the cursor */pStmt143100,5199596
  Fts3Expr *pExpr;                /* Parsed MATCH query string */pExpr143101,5199676
  int iLangid;                    /* Language being queried for */iLangid143102,5199742
  int nPhrase;                    /* Number of matchable phrases in query */nPhrase143103,5199809
  Fts3DeferredToken *pDeferred;   /* Deferred search tokens, if any */pDeferred143104,5199886
  sqlite3_int64 iPrevId;          /* Previous id read from aDoclist */iPrevId143105,5199957
  char *pNextId;                  /* Pointer into the body of aDoclist */pNextId143106,5200028
  char *aDoclist;                 /* List of docids for full-text queries */aDoclist143107,5200102
  int nDoclist;                   /* Size of buffer at aDoclist */nDoclist143108,5200179
  u8 bDesc;                       /* True to sort in descending order */bDesc143109,5200246
  int eEvalmode;                  /* An FTS3_EVAL_XX constant */eEvalmode143110,5200319
  int nRowAvg;                    /* Average size of database rows, in pages */nRowAvg143111,5200384
  sqlite3_int64 nDoc;             /* Documents in table */nDoc143112,5200464
  i64 iMinDocid;                  /* Minimum docid to return */iMinDocid143113,5200523
  i64 iMaxDocid;                  /* Maximum docid to return */iMaxDocid143114,5200587
  int isMatchinfoNeeded;          /* True when aMatchinfo[] needs filling in */isMatchinfoNeeded143115,5200651
  MatchinfoBuffer *pMIBuffer;     /* Buffer for matchinfo data */pMIBuffer143116,5200731
#define FTS3_EVAL_FILTER FTS3_EVAL_FILTER143119,5200801
#define FTS3_EVAL_NEXT FTS3_EVAL_NEXT143120,5200831
#define FTS3_EVAL_MATCHINFO FTS3_EVAL_MATCHINFO143121,5200861
#define FTS3_FULLSCAN_SEARCH FTS3_FULLSCAN_SEARCH143138,5201584
#define FTS3_DOCID_SEARCH FTS3_DOCID_SEARCH143139,5201655
#define FTS3_FULLTEXT_SEARCH FTS3_FULLTEXT_SEARCH143140,5201730
#define FTS3_HAVE_LANGID FTS3_HAVE_LANGID143148,5202076
#define FTS3_HAVE_DOCID_GE FTS3_HAVE_DOCID_GE143149,5202139
#define FTS3_HAVE_DOCID_LE FTS3_HAVE_DOCID_LE143150,5202198
struct Fts3Doclist {Fts3Doclist143152,5202258
  char *aAll;                    /* Array containing doclist (or NULL) */aAll143153,5202279
  int nAll;                      /* Size of a[] in bytes */nAll143154,5202353
  char *pNextDocid;              /* Pointer to next docid */pNextDocid143155,5202413
  sqlite3_int64 iDocid;          /* Current docid (if pList!=0) */iDocid143157,5202475
  int bFreeList;                 /* True if pList should be sqlite3_free()d */bFreeList143158,5202542
  char *pList;                   /* Pointer to position list following iDocid */pList143159,5202621
  int nList;                     /* Length of position list */nList143160,5202702
struct Fts3PhraseToken {Fts3PhraseToken143169,5203048
  char *z;                        /* Text of the token */z143170,5203073
  int n;                          /* Number of bytes in buffer z */n143171,5203131
  int isPrefix;                   /* True if token ends with a "*" character */isPrefix143172,5203199
  int bFirst;                     /* True if token must appear at position 0 */bFirst143173,5203279
  Fts3DeferredToken *pDeferred;   /* Deferred token object for this token */pDeferred143178,5203547
  Fts3MultiSegReader *pSegcsr;    /* Segment-reader for this token */pSegcsr143179,5203624
struct Fts3Phrase {Fts3Phrase143182,5203698
  Fts3Doclist doclist;doclist143184,5203760
  int bIncr;                 /* True if doclist is loaded incrementally */bIncr143185,5203783
  int iDoclistToken;iDoclistToken143186,5203858
  char *pOrPoslist;pOrPoslist143190,5203977
  i64 iOrDocid;iOrDocid143191,5203997
  int nToken;                /* Number of tokens in the phrase */nToken143196,5204170
  int iColumn;               /* Index of column this phrase must match */iColumn143197,5204236
  Fts3PhraseToken aToken[1]; /* One entry for each token in the phrase */aToken143198,5204310
struct Fts3Expr {Fts3Expr143222,5205284
  int eType;                 /* One of the FTSQUERY_XXX values defined below */eType143223,5205302
  int nNear;                 /* Valid if eType==FTSQUERY_NEAR */nNear143224,5205382
  Fts3Expr *pParent;         /* pParent->pLeft==this or pParent->pRight==this */pParent143225,5205447
  Fts3Expr *pLeft;           /* Left operand */pLeft143226,5205528
  Fts3Expr *pRight;          /* Right operand */pRight143227,5205576
  Fts3Phrase *pPhrase;       /* Valid if eType==FTSQUERY_PHRASE */pPhrase143228,5205625
  sqlite3_int64 iDocid;      /* Current docid */iDocid143231,5205751
  u8 bEof;                   /* True this expression is at EOF already */bEof143232,5205800
  u8 bStart;                 /* True if iDocid is valid */bStart143233,5205874
  u8 bDeferred;              /* True if this expression is entirely deferred */bDeferred143234,5205933
  int iPhrase;               /* Index of this phrase in matchinfo() results */iPhrase143237,5206075
  u32 *aMI;                  /* See above */aMI143238,5206154
#define FTSQUERY_NEAR FTSQUERY_NEAR143252,5206484
#define FTSQUERY_NOT FTSQUERY_NOT143253,5206510
#define FTSQUERY_AND FTSQUERY_AND143254,5206536
#define FTSQUERY_OR FTSQUERY_OR143255,5206562
#define FTSQUERY_PHRASE FTSQUERY_PHRASE143256,5206588
# define sqlite3Fts3FreeDeferredTokens(sqlite3Fts3FreeDeferredTokens143282,5207961
# define sqlite3Fts3DeferToken(sqlite3Fts3DeferToken143283,5208003
# define sqlite3Fts3CacheDeferredDoclists(sqlite3Fts3CacheDeferredDoclists143284,5208051
# define sqlite3Fts3FreeDeferredDoclists(sqlite3Fts3FreeDeferredDoclists143285,5208106
# define sqlite3Fts3DeferredTokenList(sqlite3Fts3DeferredTokenList143286,5208150
#define FTS3_SEGCURSOR_PENDING FTS3_SEGCURSOR_PENDING143293,5208394
#define FTS3_SEGCURSOR_ALL FTS3_SEGCURSOR_ALL143294,5208435
#define FTS3_SEGMENT_REQUIRE_POS FTS3_SEGMENT_REQUIRE_POS143304,5208929
#define FTS3_SEGMENT_IGNORE_EMPTY FTS3_SEGMENT_IGNORE_EMPTY143305,5208975
#define FTS3_SEGMENT_COLUMN_FILTER FTS3_SEGMENT_COLUMN_FILTER143306,5209021
#define FTS3_SEGMENT_PREFIX FTS3_SEGMENT_PREFIX143307,5209067
#define FTS3_SEGMENT_SCAN FTS3_SEGMENT_SCAN143308,5209113
#define FTS3_SEGMENT_FIRST FTS3_SEGMENT_FIRST143309,5209159
struct Fts3SegFilter {Fts3SegFilter143312,5209266
  const char *zTerm;zTerm143313,5209289
  int nTerm;nTerm143314,5209310
  int iCol;iCol143315,5209323
  int flags;flags143316,5209335
struct Fts3MultiSegReader {Fts3MultiSegReader143319,5209352
  Fts3SegReader **apSegment;      /* Array of Fts3SegReader objects */apSegment143321,5209439
  int nSegment;                   /* Size of apSegment array */nSegment143322,5209510
  int nAdvance;                   /* How many seg-readers to advance */nAdvance143323,5209574
  Fts3SegFilter *pFilter;         /* Pointer to filter object */pFilter143324,5209646
  char *aBuffer;                  /* Buffer to merge doclists in */aBuffer143325,5209711
  int nBuffer;                    /* Allocated size of aBuffer[] in bytes */nBuffer143326,5209779
  int iColFilter;                 /* If >=0, filter for this column */iColFilter143328,5209857
  int bRestart;bRestart143329,5209928
  int nCost;                      /* Cost of running iterator */nCost143332,5209974
  int bLookup;                    /* True if a lookup of a single entry. */bLookup143333,5210039
  char *zTerm;                    /* Pointer to term buffer */zTerm143336,5210196
  int nTerm;                      /* Size of zTerm in bytes */nTerm143337,5210259
  char *aDoclist;                 /* Pointer to doclist buffer */aDoclist143338,5210322
  int nDoclist;                   /* Size of aDoclist[] in bytes */nDoclist143339,5210388
#define fts3GetVarint32(fts3GetVarint32143344,5210522
# define SQLITE_CORE SQLITE_CORE143422,5213958
SQLITE_PRIVATE int sqlite3Fts3Always(int b) { assert( b ); return b; }sqlite3Fts3Always143445,5214499
SQLITE_PRIVATE int sqlite3Fts3Never(int b)  { assert( !b ); return b; }sqlite3Fts3Never143446,5214570
SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){sqlite3Fts3PutVarint143455,5214854
#define GETVARINT_STEP(GETVARINT_STEP143467,5215229
#define GETVARINT_INIT(GETVARINT_INIT143470,5215404
SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *p, sqlite_int64 *v){sqlite3Fts3GetVarint143479,5215739
SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){sqlite3Fts3GetVarint32143504,5216398
SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){sqlite3Fts3VarintLen143525,5216923
SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){sqlite3Fts3Dequote143548,5217419
static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){fts3GetDeltaVarint143577,5218271
static void fts3GetReverseVarint(fts3GetReverseVarint143592,5218783
static int fts3DisconnectMethod(sqlite3_vtab *pVtab){fts3DisconnectMethod143614,5219248
SQLITE_PRIVATE void sqlite3Fts3ErrMsg(char **pzErr, const char *zFormat, ...){sqlite3Fts3ErrMsg143641,5219902
static void fts3DbExec(fts3DbExec143656,5220325
static int fts3DestroyMethod(sqlite3_vtab *pVtab){fts3DestroyMethod143679,5220871
static void fts3DeclareVtab(int *pRc, Fts3Table *p){fts3DeclareVtab143711,5222207
SQLITE_PRIVATE void sqlite3Fts3CreateStatTable(int *pRc, Fts3Table *p){sqlite3Fts3CreateStatTable143748,5223393
static int fts3CreateTables(Fts3Table *p){fts3CreateTables143766,5224031
static void fts3DatabasePageSize(int *pRc, Fts3Table *p){fts3DatabasePageSize143831,5226007
static int fts3IsSpecialColumn(fts3IsSpecialColumn143865,5227026
static void fts3Appendf(fts3Appendf143890,5227462
static char *fts3QuoteId(char const *zInput){fts3QuoteId143923,5228457
static char *fts3ReadExprList(Fts3Table *p, const char *zFunc, int *pRc){fts3ReadExprList143965,5229915
static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){fts3WriteExprList144022,5231790
static int fts3GobbleInt(const char **pp, int *pnOut){fts3GobbleInt144057,5232776
static int fts3PrefixParameter(fts3PrefixParameter144092,5234065
static int fts3ContentColumns(fts3ContentColumns144161,5236344
static int fts3InitVtab(fts3InitVtab144236,5238861
static int fts3ConnectMethod(fts3ConnectMethod144613,5251493
static int fts3CreateMethod(fts3CreateMethod144623,5252013
static void fts3SetEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){fts3SetEstimatedRows144639,5252740
static void fts3SetUniqueFlag(sqlite3_index_info *pIdxInfo){fts3SetUniqueFlag144652,5253163
static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){fts3BestIndexMethod144668,5253658
static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts3OpenMethod144793,5257899
static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){fts3CloseMethod144814,5258583
static int fts3CursorSeekStmt(Fts3Cursor *pCsr, sqlite3_stmt **ppStmt){fts3CursorSeekStmt144838,5259425
static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){fts3CursorSeek144857,5260013
static int fts3ScanInteriorNode(fts3ScanInteriorNode144902,5261568
static int fts3SelectLeaf(fts3SelectLeaf145023,5266443
static void fts3PutDeltaVarint(fts3PutDeltaVarint145071,5268148
static void fts3PoslistCopy(char **pp, char **ppPoslist){fts3PoslistCopy145095,5269174
static void fts3ColumnlistCopy(char **pp, char **ppPoslist){fts3ColumnlistCopy145142,5270902
#define POSITION_LIST_END POSITION_LIST_END145167,5271512
static void fts3ReadNextPos(fts3ReadNextPos145187,5272440
static int fts3PutColNumber(char **pp, int iCol){fts3PutColNumber145208,5273087
static void fts3PoslistMerge(fts3PoslistMerge145226,5273698
static int fts3PoslistPhraseMerge(fts3PoslistPhraseMerge145316,5276843
static int fts3PoslistNearMerge(fts3PoslistNearMerge145440,5280419
typedef struct TermSelect TermSelect;TermSelect145479,5281577
struct TermSelect {TermSelect145480,5281615
  char *aaOutput[16];             /* Malloc'd output buffers */aaOutput145481,5281635
  int anOutput[16];               /* Size each output buffer in bytes */anOutput145482,5281699
static void fts3GetDeltaVarint3(fts3GetDeltaVarint3145498,5282399
static void fts3PutDeltaVarint3(fts3PutDeltaVarint3145532,5283488
#define DOCID_CMP(DOCID_CMP145562,5284545
static int fts3DoclistOrMerge(fts3DoclistOrMerge145578,5285253
static int fts3DoclistPhraseMerge(fts3DoclistPhraseMerge145670,5288902
SQLITE_PRIVATE int sqlite3Fts3FirstFilter(sqlite3Fts3FirstFilter145741,5291057
static int fts3TermSelectFinishMerge(Fts3Table *p, TermSelect *pTS){fts3TermSelectFinishMerge145793,5292536
static int fts3TermSelectMerge(fts3TermSelectMerge145847,5294069
static int fts3SegReaderCursorAppend(fts3SegReaderCursorAppend145919,5296555
static int fts3SegReaderCursor(fts3SegReaderCursor145944,5297215
SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor(sqlite3Fts3SegReaderCursor146018,5300221
static int fts3SegReaderCursorAddZero(fts3SegReaderCursorAddZero146050,5301537
static int fts3TermSegReaderCursor(fts3TermSegReaderCursor146075,5302546
static void fts3SegReaderCursorFree(Fts3MultiSegReader *pSegcsr){fts3SegReaderCursorFree146132,5304320
static int fts3TermSelect(fts3TermSelect146141,5304560
static int fts3DoclistCountDocids(char *aList, int nList){fts3DoclistCountDocids146198,5306518
static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){fts3NextMethod146224,5307456
# define LARGEST_INT64 LARGEST_INT64146250,5308237
# define SMALLEST_INT64 SMALLEST_INT64146251,5308308
static sqlite3_int64 fts3DocidRange(sqlite3_value *pVal, i64 iDefault){fts3DocidRange146259,5308557
static int fts3FilterMethod(fts3FilterMethod146285,5309391
static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){fts3EofMethod146402,5313368
static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){fts3RowidMethod146412,5313715
static int fts3ColumnMethod(fts3ColumnMethod146429,5314274
static int fts3UpdateMethod(fts3UpdateMethod146479,5316145
static int fts3SyncMethod(sqlite3_vtab *pVtab){fts3SyncMethod146492,5316617
static int fts3SetHasStat(Fts3Table *p){fts3SetHasStat146541,5318738
static int fts3BeginMethod(sqlite3_vtab *pVtab){fts3BeginMethod146565,5319386
static int fts3CommitMethod(sqlite3_vtab *pVtab){fts3CommitMethod146582,5319892
static int fts3RollbackMethod(sqlite3_vtab *pVtab){fts3RollbackMethod146597,5320360
static void fts3ReversePoslist(char *pStart, char **ppPoslist){fts3ReversePoslist146612,5320864
static int fts3FunctionArg(fts3FunctionArg146655,5322535
static void fts3SnippetFunc(fts3SnippetFunc146678,5323283
static void fts3OffsetsFunc(fts3OffsetsFunc146721,5324839
static void fts3OptimizeFunc(fts3OptimizeFunc146747,5325630
static void fts3MatchinfoFunc(fts3MatchinfoFunc146781,5326637
static int fts3FindFunctionMethod(fts3FindFunctionMethod146801,5327299
static int fts3RenameMethod(fts3RenameMethod146837,5328373
static int fts3SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){fts3SavepointMethod146895,5330044
static int fts3ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){fts3ReleaseMethod146912,5330496
static int fts3RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){fts3RollbackToMethod146927,5330900
static const sqlite3_module fts3Module = {fts3Module146937,5331211
static void hashDestroy(void *p){hashDestroy146968,5332365
SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){sqlite3Fts3Init146999,5333680
static void fts3EvalAllocateReaders(fts3EvalAllocateReaders147109,5337095
static int fts3EvalPhraseMergeToken(fts3EvalPhraseMergeToken147151,5338652
static int fts3EvalPhraseLoad(fts3EvalPhraseLoad147215,5340265
static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){fts3EvalDeferredPhrase147251,5341467
#define MAX_INCR_PHRASE_TOKENS MAX_INCR_PHRASE_TOKENS147349,5344229
static int fts3EvalPhraseStart(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p){fts3EvalPhraseStart147363,5344815
SQLITE_PRIVATE void sqlite3Fts3DoclistPrev(sqlite3Fts3DoclistPrev147420,5346931
SQLITE_PRIVATE void sqlite3Fts3DoclistNext(sqlite3Fts3DoclistNext147476,5348490
static void fts3EvalDlPhraseNext(fts3EvalDlPhraseNext147513,5349570
typedef struct TokenDoclist TokenDoclist;TokenDoclist147559,5350947
struct TokenDoclist {TokenDoclist147560,5350989
  int bIgnore;bIgnore147561,5351011
  sqlite3_int64 iDocid;iDocid147562,5351026
  char *pList;pList147563,5351050
  int nList;nList147564,5351065
static int incrPhraseTokenNext(incrPhraseTokenNext147576,5351454
static int fts3EvalIncrPhraseNext(fts3EvalIncrPhraseNext147628,5353167
static int fts3EvalPhraseNext(fts3EvalPhraseNext147728,5356508
static void fts3EvalStartReaders(fts3EvalStartReaders147767,5357969
typedef struct Fts3TokenAndCost Fts3TokenAndCost;Fts3TokenAndCost147803,5359364
struct Fts3TokenAndCost {Fts3TokenAndCost147804,5359414
  Fts3Phrase *pPhrase;            /* The phrase the token belongs to */pPhrase147805,5359440
  int iToken;                     /* Position of token in phrase */iToken147806,5359512
  Fts3PhraseToken *pToken;        /* The token itself */pToken147807,5359580
  Fts3Expr *pRoot;                /* Root of NEAR/AND cluster */pRoot147808,5359637
  int nOvfl;                      /* Number of overflow pages to load doclist */nOvfl147809,5359702
  int iCol;                       /* The column the token must match */iCol147810,5359783
static void fts3EvalTokenCosts(fts3EvalTokenCosts147820,5360106
static int fts3EvalAverageDocsize(Fts3Cursor *pCsr, int *pnPage){fts3EvalAverageDocsize147874,5362166
static int fts3EvalSelectDeferred(fts3EvalSelectDeferred147935,5364239
static int fts3EvalStart(Fts3Cursor *pCsr){fts3EvalStart148068,5369634
static void fts3EvalInvalidatePoslist(Fts3Phrase *pPhrase){fts3EvalInvalidatePoslist148118,5370960
static int fts3EvalNearTrim(fts3EvalNearTrim148149,5372194
static void fts3EvalNextRow(fts3EvalNextRow148223,5375409
static int fts3EvalNearTest(Fts3Expr *pExpr, int *pRc){fts3EvalNearTest148364,5380561
static int fts3EvalTestExpr(fts3EvalTestExpr148450,5383431
SQLITE_PRIVATE int sqlite3Fts3EvalTestDeferred(Fts3Cursor *pCsr, int *pRc){sqlite3Fts3EvalTestDeferred148561,5387197
static int fts3EvalNext(Fts3Cursor *pCsr){fts3EvalNext148591,5388167
static void fts3EvalRestart(fts3EvalRestart148632,5389479
static void fts3EvalUpdateCounts(Fts3Expr *pExpr){fts3EvalUpdateCounts148675,5390723
static int fts3EvalGatherStats(fts3EvalGatherStats148718,5392044
SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats(sqlite3Fts3EvalPhraseStats148829,5395834
SQLITE_PRIVATE int sqlite3Fts3EvalPhrasePoslist(sqlite3Fts3EvalPhrasePoslist148877,5397502
SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *pPhrase){sqlite3Fts3EvalPhraseCleanup149011,5401885
SQLITE_PRIVATE int sqlite3Fts3Corrupt(){sqlite3Fts3Corrupt149029,5402326
__declspec(dllexport)__declspec149039,5402490
typedef struct Fts3auxTable Fts3auxTable;Fts3auxTable149074,5403383
typedef struct Fts3auxCursor Fts3auxCursor;Fts3auxCursor149075,5403425
struct Fts3auxTable {Fts3auxTable149077,5403470
  sqlite3_vtab base;              /* Base class used by SQLite core */base149078,5403492
  Fts3Table *pFts3Tab;pFts3Tab149079,5403563
struct Fts3auxCursor {Fts3auxCursor149082,5403590
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base149083,5403613
  Fts3MultiSegReader csr;        /* Must be right after "base" */csr149084,5403684
  Fts3SegFilter filter;filter149085,5403750
  char *zStop;zStop149086,5403774
  int nStop;                      /* Byte-length of string zStop */nStop149087,5403789
  int iLangid;                    /* Language id to query */iLangid149088,5403857
  int isEof;                      /* True if cursor is at EOF */isEof149089,5403918
  sqlite3_int64 iRowid;           /* Current rowid */iRowid149090,5403983
  int iCol;                       /* Current value of 'col' column */iCol149092,5404038
  int nStat;                      /* Size of aStat[] array */nStat149093,5404108
  struct Fts3auxColstats {Fts3auxColstats149094,5404170
    sqlite3_int64 nDoc;           /* 'documents' values for current csr row */nDoc149095,5404197
    sqlite3_int64 nOcc;           /* 'occurrences' values for current csr row */nOcc149096,5404276
  } *aStat;aStat149097,5404357
#define FTS3_AUX_SCHEMA FTS3_AUX_SCHEMA149103,5404409
static int fts3auxConnectMethod(fts3auxConnectMethod149111,5404710
static int fts3auxDisconnectMethod(sqlite3_vtab *pVtab){fts3auxDisconnectMethod149182,5407139
#define FTS4AUX_EQ_CONSTRAINT FTS4AUX_EQ_CONSTRAINT149196,5407493
#define FTS4AUX_GE_CONSTRAINT FTS4AUX_GE_CONSTRAINT149197,5407525
#define FTS4AUX_LE_CONSTRAINT FTS4AUX_LE_CONSTRAINT149198,5407557
static int fts3auxBestIndexMethod(fts3auxBestIndexMethod149203,5407649
static int fts3auxOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts3auxOpenMethod149273,5409522
static int fts3auxCloseMethod(sqlite3_vtab_cursor *pCursor){fts3auxCloseMethod149289,5409946
static int fts3auxGrowStatArray(Fts3auxCursor *pCsr, int nSize){fts3auxGrowStatArray149302,5410347
static int fts3auxNextMethod(sqlite3_vtab_cursor *pCursor){fts3auxNextMethod149321,5410875
static int fts3auxFilterMethod(fts3auxFilterMethod149415,5413620
static int fts3auxEofMethod(sqlite3_vtab_cursor *pCursor){fts3auxEofMethod149510,5416847
static int fts3auxColumnMethod(fts3auxColumnMethod149518,5417023
static int fts3auxRowidMethod(fts3auxRowidMethod149559,5418072
SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db){sqlite3Fts3InitAux149572,5418483
SQLITE_API int sqlite3_fts3_enable_parentheses = 0;sqlite3_fts3_enable_parentheses149674,5422594
#  define sqlite3_fts3_enable_parentheses sqlite3_fts3_enable_parentheses149677,5422692
#  define sqlite3_fts3_enable_parentheses sqlite3_fts3_enable_parentheses149679,5422743
#define SQLITE_FTS3_DEFAULT_NEAR_PARAM SQLITE_FTS3_DEFAULT_NEAR_PARAM149686,5422845
typedef struct ParseContext ParseContext;ParseContext149699,5423264
struct ParseContext {ParseContext149700,5423306
  sqlite3_tokenizer *pTokenizer;      /* Tokenizer module */pTokenizer149701,5423328
  int iLangid;                        /* Language id used with tokenizer */iLangid149702,5423389
  const char **azCol;                 /* Array of column names for fts3 table */azCol149703,5423465
  int bFts4;                          /* True to allow FTS4-only syntax */bFts4149704,5423546
  int nCol;                           /* Number of entries in azCol[] */nCol149705,5423621
  int iDefaultCol;                    /* Default column to query */iDefaultCol149706,5423694
  int isNot;                          /* True if getNextNode() sees a unary - */isNot149707,5423762
  sqlite3_context *pCtx;              /* Write error message here */pCtx149708,5423843
  int nNest;                          /* Number of nested brackets */nNest149709,5423912
static int fts3isspace(char c){fts3isspace149723,5424532
static void *fts3MallocZero(int nByte){fts3MallocZero149732,5424805
SQLITE_PRIVATE int sqlite3Fts3OpenTokenizer(sqlite3Fts3OpenTokenizer149738,5424938
static int getNextToken(getNextToken149783,5426382
static void *fts3ReallocOrFree(void *pOrig, int nNew){fts3ReallocOrFree149862,5428831
static int getNextString(getNextString149882,5429566
static int getNextNode(getNextNode150000,5433350
static int opPrecedence(Fts3Expr *p){opPrecedence150166,5438849
static void insertBinaryOperator(insertBinaryOperator150187,5439603
static int fts3ExprParse(fts3ExprParse150218,5440731
static int fts3ExprCheckDepth(Fts3Expr *p, int nMaxDepth){fts3ExprCheckDepth150367,5445144
static int fts3ExprBalance(Fts3Expr **pp, int nMaxDepth){fts3ExprBalance150393,5445894
static int fts3ExprParseUnbalanced(fts3ExprParseUnbalanced150567,5451078
SQLITE_PRIVATE int sqlite3Fts3ExprParse(sqlite3Fts3ExprParse150630,5453616
static void fts3FreeExprNode(Fts3Expr *p){fts3FreeExprNode150674,5455184
SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *pDel){sqlite3Fts3ExprFree150688,5455636
static int queryTestTokenizer(queryTestTokenizer150721,5456617
static char *exprToString(Fts3Expr *pExpr, char *zBuf){exprToString150756,5457651
static void fts3ExprTest(fts3ExprTest150813,5459423
SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){sqlite3Fts3ExprInitTestInterface150903,5461755
static void *fts3HashMalloc(int n){fts3HashMalloc150957,5463418
static void fts3HashFree(void *p){fts3HashFree150964,5463535
SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){sqlite3Fts3HashInit150978,5464060
SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){sqlite3Fts3HashClear150993,5464527
static int fts3StrHash(const void *pKey, int nKey){fts3StrHash151016,5465052
static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){fts3StrCompare151026,5465299
static int fts3BinHash(const void *pKey, int nKey){fts3BinHash151034,5465541
static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){fts3BinCompare151042,5465727
static int (*ftsHashFunction(int keyClass))(const void*,int){ftsHashFunction151059,5466442
static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){ftsCompareFunction151074,5466857
static void fts3HashInsertElement(fts3HashInsertElement151085,5467130
static int fts3Rehash(Fts3Hash *pH, int new_size){fts3Rehash151115,5468039
static Fts3HashElem *fts3FindElementByHash(fts3FindElementByHash151139,5468961
static void fts3RemoveElementByHash(fts3RemoveElementByHash151167,5469849
SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem(sqlite3Fts3HashFindElem151201,5470627
SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){sqlite3Fts3HashFind151222,5471275
SQLITE_PRIVATE void *sqlite3Fts3HashInsert(sqlite3Fts3HashInsert151244,5472180
typedef struct porter_tokenizer {porter_tokenizer151343,5475199
  sqlite3_tokenizer base;      /* Base class */base151344,5475233
} porter_tokenizer;porter_tokenizer151345,5475281
typedef struct porter_tokenizer_cursor {porter_tokenizer_cursor151350,5475355
  sqlite3_tokenizer_cursor base;base151351,5475396
  const char *zInput;          /* input we are tokenizing */zInput151352,5475429
  int nInput;                  /* size of the input */nInput151353,5475490
  int iOffset;                 /* current position in zInput */iOffset151354,5475545
  int iToken;                  /* index of next token to be returned */iToken151355,5475609
  char *zToken;                /* storage for current token */zToken151356,5475681
  int nAllocated;              /* space allocated to zToken buffer */nAllocated151357,5475744
} porter_tokenizer_cursor;porter_tokenizer_cursor151358,5475814
static int porterCreate(porterCreate151364,5475885
static int porterDestroy(sqlite3_tokenizer *pTokenizer){porterDestroy151383,5476261
static int porterOpen(porterOpen151394,5476574
static int porterClose(sqlite3_tokenizer_cursor *pCursor){porterClose151427,5477441
static const char cType[] = {cType151436,5477664
static int isConsonant(const char *z){isConsonant151455,5478289
static int isVowel(const char *z){isVowel151464,5478485
static int m_gt_0(const char *z){m_gt_0151493,5479397
static int m_eq_1(const char *z){m_eq_1151503,5479621
static int m_gt_1(const char *z){m_gt_1151517,5479955
static int hasVowel(const char *z){hasVowel151531,5480275
static int doubleConsonant(const char *z){doubleConsonant151542,5480522
static int star_oh(const char *z){star_oh151554,5480886
static int stem(stem151574,5481441
static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){copy_stemmer151599,5482321
static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){porter_stemmer151646,5483817
static const char porterIdChar[] = {porterIdChar151885,5489129
#define isDelim(isDelim151893,5489533
static int porterNext(porterNext151899,5489741
static const sqlite3_tokenizer_module porterTokenizerModule = {porterTokenizerModule151947,5491273
SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule(sqlite3Fts3PorterTokenizerModule151961,5491523
static int fts3TokenizerEnabled(sqlite3_context *context){fts3TokenizerEnabled152007,5493018
static void fts3TokenizerFunc(fts3TokenizerFunc152034,5494149
SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){sqlite3Fts3IsIdChar152082,5495410
SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){sqlite3Fts3NextToken152096,5496060
SQLITE_PRIVATE int sqlite3Fts3InitTokenizer(sqlite3Fts3InitTokenizer152133,5496820
static void testFunc(testFunc152229,5499663
int registerTokenizer(registerTokenizer152321,5501845
int queryTokenizer(queryTokenizer152344,5502308
static void intTestFunc(intTestFunc152389,5503657
SQLITE_PRIVATE int sqlite3Fts3InitHashTable(sqlite3Fts3InitHashTable152443,5505422
typedef struct simple_tokenizer {simple_tokenizer152524,5507574
  sqlite3_tokenizer base;base152525,5507608
  char delim[128];             /* flag ASCII delimiters */delim152526,5507634
} simple_tokenizer;simple_tokenizer152527,5507693
typedef struct simple_tokenizer_cursor {simple_tokenizer_cursor152529,5507714
  sqlite3_tokenizer_cursor base;base152530,5507755
  const char *pInput;          /* input we are tokenizing */pInput152531,5507788
  int nBytes;                  /* size of the input */nBytes152532,5507849
  int iOffset;                 /* current position in pInput */iOffset152533,5507904
  int iToken;                  /* index of next token to be returned */iToken152534,5507968
  char *pToken;                /* storage for current token */pToken152535,5508040
  int nTokenAllocated;         /* space allocated to zToken buffer */nTokenAllocated152536,5508103
} simple_tokenizer_cursor;simple_tokenizer_cursor152537,5508173
static int simpleDelim(simple_tokenizer *t, unsigned char c){simpleDelim152540,5508202
static int fts3_isalnum(int x){fts3_isalnum152543,5508298
static int simpleCreate(simpleCreate152550,5508448
static int simpleDestroy(sqlite3_tokenizer *pTokenizer){simpleDestroy152591,5509489
static int simpleOpen(simpleOpen152602,5509802
static int simpleClose(sqlite3_tokenizer_cursor *pCursor){simpleClose152635,5510674
static int simpleNext(simpleNext152646,5511000
static const sqlite3_tokenizer_module simpleTokenizerModule = {simpleTokenizerModule152703,5512849
SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule(sqlite3Fts3SimpleTokenizerModule152717,5513100
typedef struct Fts3tokTable Fts3tokTable;Fts3tokTable152773,5514984
typedef struct Fts3tokCursor Fts3tokCursor;Fts3tokCursor152774,5515026
struct Fts3tokTable {Fts3tokTable152779,5515105
  sqlite3_vtab base;              /* Base class used by SQLite core */base152780,5515127
  const sqlite3_tokenizer_module *pMod;pMod152781,5515198
  sqlite3_tokenizer *pTok;pTok152782,5515238
struct Fts3tokCursor {Fts3tokCursor152788,5515310
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base152789,5515333
  char *zInput;                   /* Input string */zInput152790,5515404
  sqlite3_tokenizer_cursor *pCsr; /* Cursor to iterate through zInput */pCsr152791,5515457
  int iRowid;                     /* Current 'rowid' value */iRowid152792,5515530
  const char *zToken;             /* Current 'token' value */zToken152793,5515592
  int nToken;                     /* Size of zToken in bytes */nToken152794,5515654
  int iStart;                     /* Current 'start' value */iStart152795,5515718
  int iEnd;                       /* Current 'end' value */iEnd152796,5515780
  int iPos;                       /* Current 'pos' value */iPos152797,5515840
static int fts3tokQueryTokenizer(fts3tokQueryTokenizer152803,5515969
static int fts3tokDequoteArray(fts3tokDequoteArray152834,5516976
#define FTS3_TOK_SCHEMA FTS3_TOK_SCHEMA152872,5517868
static int fts3tokConnectMethod(fts3tokConnectMethod152884,5518276
static int fts3tokDisconnectMethod(sqlite3_vtab *pVtab){fts3tokDisconnectMethod152948,5520066
static int fts3tokBestIndexMethod(fts3tokBestIndexMethod152959,5520310
static int fts3tokOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts3tokOpenMethod152988,5520929
static void fts3tokResetCursor(Fts3tokCursor *pCsr){fts3tokResetCursor153006,5521401
static int fts3tokCloseMethod(sqlite3_vtab_cursor *pCursor){fts3tokCloseMethod153025,5521798
static int fts3tokNextMethod(sqlite3_vtab_cursor *pCursor){fts3tokNextMethod153036,5522044
static int fts3tokFilterMethod(fts3tokFilterMethod153058,5522597
static int fts3tokEofMethod(sqlite3_vtab_cursor *pCursor){fts3tokEofMethod153095,5523789
static int fts3tokColumnMethod(fts3tokColumnMethod153103,5523971
static int fts3tokRowidMethod(fts3tokRowidMethod153135,5524877
SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3 *db, Fts3Hash *pHash){sqlite3Fts3InitTok153148,5525303
#define FTS_MAX_APPENDABLE_HEIGHT FTS_MAX_APPENDABLE_HEIGHT153211,5527896
#define FTS3_NODE_PADDING FTS3_NODE_PADDING153223,5528405
int test_fts3_node_chunksize = (4*1024);test_fts3_node_chunksize153243,5529354
int test_fts3_node_chunk_threshold = (4*1024)*4;test_fts3_node_chunk_threshold153244,5529395
# define FTS3_NODE_CHUNKSIZE FTS3_NODE_CHUNKSIZE153245,5529444
# define FTS3_NODE_CHUNK_THRESHOLD FTS3_NODE_CHUNK_THRESHOLD153246,5529504
# define FTS3_NODE_CHUNKSIZE FTS3_NODE_CHUNKSIZE153248,5529576
# define FTS3_NODE_CHUNK_THRESHOLD FTS3_NODE_CHUNK_THRESHOLD153249,5529615
#define FTS_STAT_DOCTOTAL FTS_STAT_DOCTOTAL153256,5529812
#define FTS_STAT_INCRMERGEHINT FTS_STAT_INCRMERGEHINT153257,5529845
#define FTS_STAT_AUTOINCRMERGE FTS_STAT_AUTOINCRMERGE153258,5529878
static void fts3LogMerge(int nMerge, sqlite3_int64 iAbsLevel){fts3LogMerge153267,5530173
#define fts3LogMerge(fts3LogMerge153271,5530324
typedef struct PendingList PendingList;PendingList153275,5530360
typedef struct SegmentNode SegmentNode;SegmentNode153276,5530400
typedef struct SegmentWriter SegmentWriter;SegmentWriter153277,5530440
struct PendingList {PendingList153283,5530632
  int nData;nData153284,5530653
  char *aData;aData153285,5530666
  int nSpace;nSpace153286,5530681
  sqlite3_int64 iLastDocid;iLastDocid153287,5530695
  sqlite3_int64 iLastCol;iLastCol153288,5530723
  sqlite3_int64 iLastPos;iLastPos153289,5530749
struct Fts3DeferredToken {Fts3DeferredToken153296,5530862
  Fts3PhraseToken *pToken;        /* Pointer to corresponding expr token */pToken153297,5530889
  int iCol;                       /* Column token must occur in */iCol153298,5530965
  Fts3DeferredToken *pNext;       /* Next in list of deferred tokens */pNext153299,5531032
  PendingList *pList;             /* Doclist is assembled here */pList153300,5531104
struct Fts3SegReader {Fts3SegReader153320,5531788
  int iIdx;                       /* Index within level, or 0x7FFFFFFF for PT */iIdx153321,5531811
  u8 bLookup;                     /* True for a lookup only */bLookup153322,5531892
  u8 rootOnly;                    /* True for a root-only reader */rootOnly153323,5531955
  sqlite3_int64 iStartBlock;      /* Rowid of first leaf block to traverse */iStartBlock153325,5532024
  sqlite3_int64 iLeafEndBlock;    /* Rowid of final leaf block to traverse */iLeafEndBlock153326,5532102
  sqlite3_int64 iEndBlock;        /* Rowid of final block in segment (or 0) */iEndBlock153327,5532180
  sqlite3_int64 iCurrentBlock;    /* Current leaf block (or 0) */iCurrentBlock153328,5532259
  char *aNode;                    /* Pointer to node data (or NULL) */aNode153330,5532326
  int nNode;                      /* Size of buffer at aNode (or 0) */nNode153331,5532397
  int nPopulate;                  /* If >0, bytes of buffer aNode[] loaded */nPopulate153332,5532468
  sqlite3_blob *pBlob;            /* If not NULL, blob handle to read node */pBlob153333,5532546
  Fts3HashElem **ppNextElem;ppNextElem153335,5532625
  int nTerm;                      /* Number of bytes in current term */nTerm153342,5532901
  char *zTerm;                    /* Pointer to current term */zTerm153343,5532973
  int nTermAlloc;                 /* Allocated size of zTerm buffer */nTermAlloc153344,5533037
  char *aDoclist;                 /* Pointer to doclist of current entry */aDoclist153345,5533108
  int nDoclist;                   /* Size of doclist in current entry */nDoclist153346,5533184
  char *pOffsetList;pOffsetList153351,5533395
  int nOffsetList;                /* For descending pending seg-readers only */nOffsetList153352,5533416
  sqlite3_int64 iDocid;iDocid153353,5533496
#define fts3SegReaderIsPending(fts3SegReaderIsPending153356,5533524
#define fts3SegReaderIsRootOnly(fts3SegReaderIsRootOnly153357,5533579
struct SegmentWriter {SegmentWriter153368,5533889
  SegmentNode *pTree;             /* Pointer to interior tree structure */pTree153369,5533912
  sqlite3_int64 iFirst;           /* First slot in %_segments written */iFirst153370,5533987
  sqlite3_int64 iFree;            /* Next free slot in %_segments */iFree153371,5534060
  char *zTerm;                    /* Pointer to previous term buffer */zTerm153372,5534129
  int nTerm;                      /* Number of bytes in zTerm */nTerm153373,5534201
  int nMalloc;                    /* Size of malloc'd buffer at zMalloc */nMalloc153374,5534266
  char *zMalloc;                  /* Malloc'd space (possibly) used for zTerm */zMalloc153375,5534341
  int nSize;                      /* Size of allocation at aData */nSize153376,5534422
  int nData;                      /* Bytes of data in aData */nData153377,5534490
  char *aData;                    /* Pointer to block from malloc() */aData153378,5534553
  i64 nLeafData;                  /* Number of bytes of leaf data written */nLeafData153379,5534624
struct SegmentNode {SegmentNode153400,5535537
  SegmentNode *pParent;           /* Parent node (or NULL for root node) */pParent153401,5535558
  SegmentNode *pRight;            /* Pointer to right-sibling */pRight153402,5535634
  SegmentNode *pLeftmost;         /* Pointer to left-most node of this depth */pLeftmost153403,5535699
  int nEntry;                     /* Number of terms written to node so far */nEntry153404,5535779
  char *zTerm;                    /* Pointer to previous term buffer */zTerm153405,5535858
  int nTerm;                      /* Number of bytes in zTerm */nTerm153406,5535930
  int nMalloc;                    /* Size of malloc'd buffer at zMalloc */nMalloc153407,5535995
  char *zMalloc;                  /* Malloc'd space (possibly) used for zTerm */zMalloc153408,5536070
  int nData;                      /* Bytes of valid data so far */nData153409,5536151
  char *aData;                    /* Node data */aData153410,5536218
#define SQL_DELETE_CONTENT SQL_DELETE_CONTENT153416,5536336
#define SQL_IS_EMPTY SQL_IS_EMPTY153417,5536377
#define SQL_DELETE_ALL_CONTENT SQL_DELETE_ALL_CONTENT153418,5536418
#define SQL_DELETE_ALL_SEGMENTS SQL_DELETE_ALL_SEGMENTS153419,5536460
#define SQL_DELETE_ALL_SEGDIR SQL_DELETE_ALL_SEGDIR153420,5536501
#define SQL_DELETE_ALL_DOCSIZE SQL_DELETE_ALL_DOCSIZE153421,5536542
#define SQL_DELETE_ALL_STAT SQL_DELETE_ALL_STAT153422,5536583
#define SQL_SELECT_CONTENT_BY_ROWID SQL_SELECT_CONTENT_BY_ROWID153423,5536624
#define SQL_NEXT_SEGMENT_INDEX SQL_NEXT_SEGMENT_INDEX153424,5536665
#define SQL_INSERT_SEGMENTS SQL_INSERT_SEGMENTS153425,5536706
#define SQL_NEXT_SEGMENTS_ID SQL_NEXT_SEGMENTS_ID153426,5536747
#define SQL_INSERT_SEGDIR SQL_INSERT_SEGDIR153427,5536788
#define SQL_SELECT_LEVEL SQL_SELECT_LEVEL153428,5536829
#define SQL_SELECT_LEVEL_RANGE SQL_SELECT_LEVEL_RANGE153429,5536870
#define SQL_SELECT_LEVEL_COUNT SQL_SELECT_LEVEL_COUNT153430,5536911
#define SQL_SELECT_SEGDIR_MAX_LEVEL SQL_SELECT_SEGDIR_MAX_LEVEL153431,5536952
#define SQL_DELETE_SEGDIR_LEVEL SQL_DELETE_SEGDIR_LEVEL153432,5536993
#define SQL_DELETE_SEGMENTS_RANGE SQL_DELETE_SEGMENTS_RANGE153433,5537034
#define SQL_CONTENT_INSERT SQL_CONTENT_INSERT153434,5537075
#define SQL_DELETE_DOCSIZE SQL_DELETE_DOCSIZE153435,5537116
#define SQL_REPLACE_DOCSIZE SQL_REPLACE_DOCSIZE153436,5537157
#define SQL_SELECT_DOCSIZE SQL_SELECT_DOCSIZE153437,5537198
#define SQL_SELECT_STAT SQL_SELECT_STAT153438,5537239
#define SQL_REPLACE_STAT SQL_REPLACE_STAT153439,5537280
#define SQL_SELECT_ALL_PREFIX_LEVEL SQL_SELECT_ALL_PREFIX_LEVEL153441,5537322
#define SQL_DELETE_ALL_TERMS_SEGDIR SQL_DELETE_ALL_TERMS_SEGDIR153442,5537363
#define SQL_DELETE_SEGDIR_RANGE SQL_DELETE_SEGDIR_RANGE153443,5537404
#define SQL_SELECT_ALL_LANGID SQL_SELECT_ALL_LANGID153444,5537445
#define SQL_FIND_MERGE_LEVEL SQL_FIND_MERGE_LEVEL153445,5537486
#define SQL_MAX_LEAF_NODE_ESTIMATE SQL_MAX_LEAF_NODE_ESTIMATE153446,5537527
#define SQL_DELETE_SEGDIR_ENTRY SQL_DELETE_SEGDIR_ENTRY153447,5537568
#define SQL_SHIFT_SEGDIR_ENTRY SQL_SHIFT_SEGDIR_ENTRY153448,5537609
#define SQL_SELECT_SEGDIR SQL_SELECT_SEGDIR153449,5537650
#define SQL_CHOMP_SEGDIR SQL_CHOMP_SEGDIR153450,5537691
#define SQL_SEGMENT_IS_APPENDABLE SQL_SEGMENT_IS_APPENDABLE153451,5537732
#define SQL_SELECT_INDEXES SQL_SELECT_INDEXES153452,5537773
#define SQL_SELECT_MXLEVEL SQL_SELECT_MXLEVEL153453,5537814
#define SQL_SELECT_LEVEL_RANGE2 SQL_SELECT_LEVEL_RANGE2153455,5537856
#define SQL_UPDATE_LEVEL_IDX SQL_UPDATE_LEVEL_IDX153456,5537897
#define SQL_UPDATE_LEVEL SQL_UPDATE_LEVEL153457,5537938
static int fts3SqlStmt(fts3SqlStmt153470,5538493
static int fts3SelectDocsize(fts3SelectDocsize153611,5544287
SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal(sqlite3Fts3SelectDoctotal153636,5545051
SQLITE_PRIVATE int sqlite3Fts3SelectDocsize(sqlite3Fts3SelectDocsize153657,5545627
static void fts3SqlExec(fts3SqlExec153673,5546185
static int fts3Writelock(Fts3Table *p){fts3Writelock153705,5547360
static sqlite3_int64 getAbsoluteLevel(getAbsoluteLevel153744,5548922
SQLITE_PRIVATE int sqlite3Fts3AllSegdirs(sqlite3Fts3AllSegdirs153776,5549989
static int fts3PendingListAppendVarint(fts3PendingListAppendVarint153823,5551583
static int fts3PendingListAppend(fts3PendingListAppend153867,5552842
static void fts3PendingListDelete(PendingList *pList){fts3PendingListDelete153922,5554324
static int fts3PendingTermsAddOne(fts3PendingTermsAddOne153929,5554468
static int fts3PendingTermsAdd(fts3PendingTermsAdd153967,5555655
static int fts3PendingTermsDocid(fts3PendingTermsDocid154045,5557985
SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){sqlite3Fts3PendingTermsClear154077,5559078
static int fts3InsertTerms(fts3InsertTerms154099,5559801
static int fts3InsertData(fts3InsertData154134,5560935
static int fts3DeleteAll(Fts3Table *p, int bContent){fts3DeleteAll154208,5563316
static int langidFromSelect(Fts3Table *p, sqlite3_stmt *pSelect){langidFromSelect154232,5564019
static void fts3DeleteTerms( fts3DeleteTerms154243,5564373
static int fts3AllocateSegdirIdx(fts3AllocateSegdirIdx154305,5566468
SQLITE_PRIVATE int sqlite3Fts3ReadBlock(sqlite3Fts3ReadBlock154376,5569307
SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){sqlite3Fts3SegmentsClose154430,5570953
static int fts3SegReaderIncrRead(Fts3SegReader *pReader){fts3SegReaderIncrRead154435,5571076
static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){fts3SegReaderRequire154459,5571757
static void fts3SegReaderSetEof(Fts3SegReader *pSeg){fts3SegReaderSetEof154475,5572190
static int fts3SegReaderNext(fts3SegReaderNext154489,5572604
static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){fts3SegReaderFirstDocid154601,5576198
static int fts3SegReaderNextDocid(fts3SegReaderNextDocid154633,5577356
SQLITE_PRIVATE int sqlite3Fts3MsrOvfl(sqlite3Fts3MsrOvfl154722,5580253
SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){sqlite3Fts3SegReaderFree154760,5581148
SQLITE_PRIVATE int sqlite3Fts3SegReaderNew(sqlite3Fts3SegReaderNew154776,5581522
static int SQLITE_CDECL fts3CompareElemByTerm(fts3CompareElemByTerm154824,5583262
SQLITE_PRIVATE int sqlite3Fts3SegReaderPending(sqlite3Fts3SegReaderPending154860,5584401
static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){fts3SegReaderCmp154956,5587574
static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){fts3SegReaderDoclistCmp154989,5588441
static int fts3SegReaderDoclistCmpRev(Fts3SegReader *pLhs, Fts3SegReader *pRhs){fts3SegReaderDoclistCmpRev155001,5588793
static int fts3SegReaderTermCmp(fts3SegReaderTermCmp155022,5589512
static void fts3SegReaderSort(fts3SegReaderSort155047,5590277
static int fts3WriteSegment(fts3WriteSegment155080,5591234
SQLITE_PRIVATE int sqlite3Fts3MaxLevel(Fts3Table *p, int *pnMax){sqlite3Fts3MaxLevel155102,5592026
static int fts3WriteSegdir(fts3WriteSegdir155121,5592443
static int fts3PrefixCompress(fts3PrefixCompress155161,5594073
static int fts3NodeAddTerm(fts3NodeAddTerm155177,5594617
static int fts3TreeFinishNode(fts3TreeFinishNode155288,5598431
static int fts3NodeWrite(fts3NodeWrite155314,5599341
static void fts3NodeFree(SegmentNode *pTree){fts3NodeFree155358,5600861
static int fts3SegWriterAdd(fts3SegWriterAdd155383,5601628
static int fts3SegWriterFlush(fts3SegWriterFlush155525,5607061
static void fts3SegWriterFree(SegmentWriter *pWriter){fts3SegWriterFree155561,5608498
static int fts3IsEmpty(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty){fts3IsEmpty155580,5609191
static int fts3SegmentMaxLevel(fts3SegmentMaxLevel155607,5609927
static int fts3SegmentIsMaxLevel(Fts3Table *p, i64 iAbsLevel, int *pbMax){fts3SegmentIsMaxLevel155643,5611107
static int fts3DeleteSegment(fts3DeleteSegment155671,5611989
static int fts3DeleteSegdir(fts3DeleteSegdir155703,5613115
static void fts3ColumnFilter(fts3ColumnFilter155760,5615109
static int fts3MsrBufferData(fts3MsrBufferData155805,5616281
SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext(sqlite3Fts3MsrIncrNext155822,5616679
static int fts3SegReaderStart(fts3SegReaderStart155890,5618502
SQLITE_PRIVATE int sqlite3Fts3SegReaderStart(sqlite3Fts3SegReaderStart155922,5619633
SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart(sqlite3Fts3MsrIncrStart155931,5619972
SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr){sqlite3Fts3MsrIncrRestart155986,5621779
SQLITE_PRIVATE int sqlite3Fts3SegReaderStep(sqlite3Fts3SegReaderStep156006,5622277
SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish(sqlite3Fts3SegReaderFinish156184,5628140
static void fts3ReadEndBlockField(fts3ReadEndBlockField156211,5629009
static int fts3PromoteSegments(fts3PromoteSegments156244,5629770
static int fts3SegmentMerge(fts3SegmentMerge156346,5633494
SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){sqlite3Fts3PendingTermsFlush156443,5637077
static void fts3EncodeIntArray(fts3EncodeIntArray156479,5638132
static void fts3DecodeIntArray(fts3DecodeIntArray156495,5638558
static void fts3InsertDocsize(fts3InsertDocsize156516,5639154
static void fts3UpdateDocTotals(fts3UpdateDocTotals156560,5640697
static int fts3DoOptimize(Fts3Table *p, int bReturnDone){fts3DoOptimize156635,5642796
static int fts3DoRebuild(Fts3Table *p){fts3DoRebuild156676,5644075
static int fts3IncrmergeCsr(fts3IncrmergeCsr156756,5646293
typedef struct IncrmergeWriter IncrmergeWriter;IncrmergeWriter156800,5647908
typedef struct NodeWriter NodeWriter;NodeWriter156801,5647956
typedef struct Blob Blob;Blob156802,5647994
typedef struct NodeReader NodeReader;NodeReader156803,5648020
struct Blob {Blob156811,5648253
  char *a;                        /* Pointer to allocation */a156812,5648267
  int n;                          /* Number of valid bytes of data in a[] */n156813,5648329
  int nAlloc;                     /* Allocated size of a[] (nAlloc>=n) */nAlloc156814,5648406
struct NodeWriter {NodeWriter156821,5648582
  sqlite3_int64 iBlock;           /* Current block id */iBlock156822,5648602
  Blob key;                       /* Last key written to the current block */key156823,5648659
  Blob block;                     /* Current block image */block156824,5648737
struct IncrmergeWriter {IncrmergeWriter156831,5648917
  int nLeafEst;                   /* Space allocated for leaf blocks */nLeafEst156832,5648942
  int nWork;                      /* Number of leaf pages flushed */nWork156833,5649014
  sqlite3_int64 iAbsLevel;        /* Absolute level of input segments */iAbsLevel156834,5649083
  int iIdx;                       /* Index of *output* segment in iAbsLevel+1 */iIdx156835,5649156
  sqlite3_int64 iStart;           /* Block number of first allocated block */iStart156836,5649237
  sqlite3_int64 iEnd;             /* Block number of last allocated block */iEnd156837,5649315
  sqlite3_int64 nLeafData;        /* Bytes of leaf page data so far */nLeafData156838,5649392
  u8 bNoLeafData;                 /* If true, store 0 for segment size */bNoLeafData156839,5649463
  NodeWriter aNodeWriter[FTS_MAX_APPENDABLE_HEIGHT];aNodeWriter156840,5649537
struct NodeReader {NodeReader156851,5649798
  const char *aNode;aNode156852,5649818
  int nNode;nNode156853,5649839
  int iOff;                       /* Current offset within aNode[] */iOff156854,5649852
  sqlite3_int64 iChild;           /* Pointer to child node */iChild156857,5649984
  Blob term;                      /* Current term */term156858,5650046
  const char *aDoclist;           /* Pointer to doclist */aDoclist156859,5650099
  int nDoclist;                   /* Size of doclist in bytes */nDoclist156860,5650158
static void blobGrowBuffer(Blob *pBlob, int nMin, int *pRc){blobGrowBuffer156872,5650629
static int nodeReaderNext(NodeReader *p){nodeReaderNext156895,5651373
static void nodeReaderRelease(NodeReader *p){nodeReaderRelease156933,5652480
static int nodeReaderInit(NodeReader *p, const char *aNode, int nNode){nodeReaderInit156944,5652812
static int fts3IncrmergePush(fts3IncrmergePush156970,5653650
static int fts3AppendToNode(fts3AppendToNode157071,5657436
static int fts3IncrmergeAppend(fts3IncrmergeAppend157121,5659266
static void fts3IncrmergeRelease(fts3IncrmergeRelease157206,5662381
static int fts3TermCmp(fts3TermCmp157296,5665958
static int fts3IsAppendable(Fts3Table *p, sqlite3_int64 iEnd, int *pbRes){fts3IsAppendable157322,5666748
static int fts3IncrmergeLoad(fts3IncrmergeLoad157353,5667917
static int fts3IncrmergeOutputIdx( fts3IncrmergeOutputIdx157485,5672868
static int fts3IncrmergeWriter( fts3IncrmergeWriter157530,5674506
static int fts3RemoveSegdirEntry(fts3RemoveSegdirEntry157595,5677008
static int fts3RepackSegdirLevel(fts3RepackSegdirLevel157619,5677828
static void fts3StartNode(Blob *pNode, int iHeight, sqlite3_int64 iChild){fts3StartNode157675,5679517
static int fts3TruncateNode(fts3TruncateNode157694,5680188
static int fts3TruncateSegment(fts3TruncateSegment157749,5682122
static int fts3IncrmergeChomp(fts3IncrmergeChomp157834,5685222
static int fts3IncrmergeHintStore(Fts3Table *p, Blob *pHint){fts3IncrmergeHintStore157885,5686794
static int fts3IncrmergeHintLoad(Fts3Table *p, Blob *pHint){fts3IncrmergeHintLoad157908,5687545
static void fts3IncrmergeHintPush(fts3IncrmergeHintPush157944,5688643
static int fts3IncrmergeHintPop(Blob *pHint, i64 *piAbsLevel, int *pnInput){fts3IncrmergeHintPop157965,5689509
SQLITE_PRIVATE int sqlite3Fts3Incrmerge(Fts3Table *p, int nMerge, int nMin){sqlite3Fts3Incrmerge157991,5690325
static int fts3Getint(const char **pz){fts3Getint158143,5696209
static int fts3DoIncrmerge(fts3DoIncrmerge158160,5696665
static int fts3DoAutoincrmerge(fts3DoAutoincrmerge158203,5697692
static u64 fts3ChecksumEntry(fts3ChecksumEntry158231,5698525
static u64 fts3ChecksumIndex(fts3ChecksumIndex158261,5699628
static int fts3IntegrityCheck(Fts3Table *p, int *pbOk){fts3IntegrityCheck158335,5701792
static int fts3DoIntegrityCheck(fts3DoIntegrityCheck158449,5705996
static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){fts3SpecialInsert158467,5706441
SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){sqlite3Fts3FreeDeferredDoclists158507,5707872
SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){sqlite3Fts3FreeDeferredTokens158519,5708212
SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){sqlite3Fts3CacheDeferredDoclists158538,5708811
SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList(sqlite3Fts3DeferredTokenList158591,5710872
SQLITE_PRIVATE int sqlite3Fts3DeferToken(sqlite3Fts3DeferToken158621,5711453
static int fts3DeleteByRowid(fts3DeleteByRowid158649,5712292
SQLITE_PRIVATE int sqlite3Fts3UpdateMethod(sqlite3Fts3UpdateMethod158698,5713724
SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){sqlite3Fts3Optimize158844,5719051
#define FTS3_MATCHINFO_NPHRASE FTS3_MATCHINFO_NPHRASE158887,5720302
#define FTS3_MATCHINFO_NCOL FTS3_MATCHINFO_NCOL158888,5720360
#define FTS3_MATCHINFO_NDOC FTS3_MATCHINFO_NDOC158889,5720418
#define FTS3_MATCHINFO_AVGLENGTH FTS3_MATCHINFO_AVGLENGTH158890,5720476
#define FTS3_MATCHINFO_LENGTH FTS3_MATCHINFO_LENGTH158891,5720538
#define FTS3_MATCHINFO_LCS FTS3_MATCHINFO_LCS158892,5720600
#define FTS3_MATCHINFO_HITS FTS3_MATCHINFO_HITS158893,5720662
#define FTS3_MATCHINFO_LHITS FTS3_MATCHINFO_LHITS158894,5720734
#define FTS3_MATCHINFO_LHITS_BM FTS3_MATCHINFO_LHITS_BM158895,5720804
#define FTS3_MATCHINFO_DEFAULT FTS3_MATCHINFO_DEFAULT158900,5720943
typedef struct LoadDoclistCtx LoadDoclistCtx;LoadDoclistCtx158907,5721095
struct LoadDoclistCtx {LoadDoclistCtx158908,5721141
  Fts3Cursor *pCsr;               /* FTS3 Cursor */pCsr158909,5721165
  int nPhrase;                    /* Number of phrases seen so far */nPhrase158910,5721217
  int nToken;                     /* Number of tokens seen so far */nToken158911,5721287
typedef struct SnippetIter SnippetIter;SnippetIter158918,5721466
typedef struct SnippetPhrase SnippetPhrase;SnippetPhrase158919,5721506
typedef struct SnippetFragment SnippetFragment;SnippetFragment158920,5721550
struct SnippetIter {SnippetIter158922,5721599
  Fts3Cursor *pCsr;               /* Cursor snippet is being generated from */pCsr158923,5721620
  int iCol;                       /* Extract snippet from this column */iCol158924,5721699
  int nSnippet;                   /* Requested snippet length (in tokens) */nSnippet158925,5721772
  int nPhrase;                    /* Number of phrases in query */nPhrase158926,5721849
  SnippetPhrase *aPhrase;         /* Array of size nPhrase */aPhrase158927,5721916
  int iCurrent;                   /* First token of current snippet */iCurrent158928,5721978
struct SnippetPhrase {SnippetPhrase158931,5722053
  int nToken;                     /* Number of tokens in phrase */nToken158932,5722076
  char *pList;                    /* Pointer to start of phrase position list */pList158933,5722143
  int iHead;                      /* Next value in position list */iHead158934,5722224
  char *pHead;                    /* Position list data following iHead */pHead158935,5722292
  int iTail;                      /* Next value in trailing position list */iTail158936,5722367
  char *pTail;                    /* Position list data following iTail */pTail158937,5722444
struct SnippetFragment {SnippetFragment158940,5722523
  int iCol;                       /* Column snippet is extracted from */iCol158941,5722548
  int iPos;                       /* Index of first token in snippet */iPos158942,5722621
  u64 covered;                    /* Mask of query phrases covered */covered158943,5722693
  u64 hlmask;                     /* Mask of snippet terms to highlight */hlmask158944,5722763
typedef struct MatchInfo MatchInfo;MatchInfo158951,5722978
struct MatchInfo {MatchInfo158952,5723014
  Fts3Cursor *pCursor;            /* FTS3 Cursor */pCursor158953,5723033
  int nCol;                       /* Number of columns in table */nCol158954,5723085
  int nPhrase;                    /* Number of matchable phrases in query */nPhrase158955,5723152
  sqlite3_int64 nDoc;             /* Number of docs in database */nDoc158956,5723229
  char flag;flag158957,5723296
  u32 *aMatchinfo;                /* Pre-allocated buffer */aMatchinfo158958,5723309
struct MatchinfoBuffer {MatchinfoBuffer158966,5723546
  u8 aRef[3];aRef158967,5723571
  int nElem;nElem158968,5723585
  int bGlobal;                    /* Set if global data is loaded */bGlobal158969,5723598
  char *zMatchinfo;zMatchinfo158970,5723667
  u32 aMatchinfo[1];aMatchinfo158971,5723687
typedef struct StrBuffer StrBuffer;StrBuffer158980,5723934
struct StrBuffer {StrBuffer158981,5723970
  char *z;                        /* Pointer to buffer containing string */z158982,5723989
  int n;                          /* Length of z in bytes (excl. nul-term) */n158983,5724065
  int nAlloc;                     /* Allocated size of buffer z in bytes */nAlloc158984,5724143
static MatchinfoBuffer *fts3MIBufferNew(int nElem, const char *zMatchinfo){fts3MIBufferNew158995,5724390
static void fts3MIBufferFree(void *p){fts3MIBufferFree159014,5724993
static void (*fts3MIBufferAlloc(MatchinfoBuffer *p, u32 **paOut))(void*){fts3MIBufferAlloc159031,5725398
static void fts3MIBufferSetGlobal(MatchinfoBuffer *p){fts3MIBufferSetGlobal159056,5725972
SQLITE_PRIVATE void sqlite3Fts3MIBufferFree(MatchinfoBuffer *p){sqlite3Fts3MIBufferFree159064,5726200
static void fts3GetDeltaPosition(char **pp, int *piPos){fts3GetDeltaPosition159099,5727251
static int fts3ExprIterate2(fts3ExprIterate2159108,5727443
static int fts3ExprIterate(fts3ExprIterate159140,5728697
static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3ExprLoadDoclistsCb159155,5729259
static int fts3ExprLoadDoclists(fts3ExprLoadDoclists159178,5729964
static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3ExprPhraseCountCb159192,5730530
static int fts3ExprPhraseCount(Fts3Expr *pExpr){fts3ExprPhraseCount159197,5730674
static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){fts3SnippetAdvance159208,5731018
static int fts3SnippetNextCandidate(SnippetIter *pIter){fts3SnippetNextCandidate159230,5731444
static void fts3SnippetDetails(fts3SnippetDetails159276,5732785
static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3SnippetFindPositions159329,5734573
static int fts3BestSnippet(fts3BestSnippet159371,5735931
static int fts3StringAppend(fts3StringAppend159457,5738800
static int fts3SnippetShift(fts3SnippetShift159509,5740660
static int fts3SnippetText(fts3SnippetText159573,5743319
static int fts3ColumnlistCount(char **ppCollist){fts3ColumnlistCount159701,5748899
static void fts3ExprLHits(fts3ExprLHits159719,5749263
static void fts3ExprLHitGather(fts3ExprLHitGather159755,5750337
static int fts3ExprGlobalHitsCb(fts3ExprGlobalHitsCb159797,5751857
static int fts3ExprLocalHitsCb(fts3ExprLocalHitsCb159813,5752455
static int fts3MatchinfoCheck(fts3MatchinfoCheck159836,5753066
static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){fts3MatchinfoSize159857,5753648
static int fts3MatchinfoSelectDoctotal(fts3MatchinfoSelectDoctotal159890,5754393
typedef struct LcsIterator LcsIterator;LcsIterator159922,5755225
struct LcsIterator {LcsIterator159923,5755265
  Fts3Expr *pExpr;                /* Pointer to phrase expression */pExpr159924,5755286
  int iPosOffset;                 /* Tokens count up to end of this phrase */iPosOffset159925,5755355
  char *pRead;                    /* Cursor used to iterate through aDoclist */pRead159926,5755433
  int iPos;                       /* Current position */iPos159927,5755513
#define LCS_ITERATOR_FINISHED LCS_ITERATOR_FINISHED159934,5755711
static int fts3MatchinfoLcsCb(fts3MatchinfoLcsCb159936,5755754
static int fts3LcsIteratorAdvance(LcsIterator *pIter){fts3LcsIteratorAdvance159951,5756286
static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){fts3MatchinfoLcs159979,5757064
static int fts3MatchinfoValues(fts3MatchinfoValues160063,5759952
static void fts3GetMatchinfo(fts3GetMatchinfo160175,5763446
SQLITE_PRIVATE void sqlite3Fts3Snippet(sqlite3Fts3Snippet160260,5766129
typedef struct TermOffset TermOffset;TermOffset160359,5769693
typedef struct TermOffsetCtx TermOffsetCtx;TermOffsetCtx160360,5769731
struct TermOffset {TermOffset160362,5769776
  char *pList;                    /* Position-list */pList160363,5769796
  int iPos;                       /* Position just read from pList */iPos160364,5769850
  int iOff;                       /* Offset of this term from read positions */iOff160365,5769920
struct TermOffsetCtx {TermOffsetCtx160368,5770004
  Fts3Cursor *pCsr;pCsr160369,5770027
  int iCol;                       /* Column of table to populate aTerm for */iCol160370,5770047
  int iTerm;iTerm160371,5770125
  sqlite3_int64 iDocid;iDocid160372,5770138
  TermOffset *aTerm;aTerm160373,5770162
static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3ExprTermOffsetInit160379,5770273
SQLITE_PRIVATE void sqlite3Fts3Offsets(sqlite3Fts3Offsets160408,5771138
SQLITE_PRIVATE void sqlite3Fts3Matchinfo(sqlite3Fts3Matchinfo160546,5775692
static const unsigned char sqlite3Utf8Trans1[] = {sqlite3Utf8Trans1160608,5777421
#define READ_UTF8(READ_UTF8160619,5777876
#define WRITE_UTF8(WRITE_UTF8160631,5778491
typedef struct unicode_tokenizer unicode_tokenizer;unicode_tokenizer160653,5779561
typedef struct unicode_cursor unicode_cursor;unicode_cursor160654,5779613
struct unicode_tokenizer {unicode_tokenizer160656,5779660
  sqlite3_tokenizer base;base160657,5779687
  int bRemoveDiacritic;bRemoveDiacritic160658,5779713
  int nException;nException160659,5779737
  int *aiException;aiException160660,5779755
struct unicode_cursor {unicode_cursor160663,5779779
  sqlite3_tokenizer_cursor base;base160664,5779803
  const unsigned char *aInput;    /* Input text being tokenized */aInput160665,5779836
  int nInput;                     /* Size of aInput[] in bytes */nInput160666,5779903
  int iOff;                       /* Current offset within aInput[] */iOff160667,5779969
  int iToken;                     /* Index of next token to be returned */iToken160668,5780040
  char *zToken;                   /* storage for current token */zToken160669,5780115
  int nAlloc;                     /* space allocated at zToken */nAlloc160670,5780181
static int unicodeDestroy(sqlite3_tokenizer *pTokenizer){unicodeDestroy160677,5780311
static int unicodeAddExceptions(unicodeAddExceptions160704,5781458
static int unicodeIsException(unicode_tokenizer *p, int iCode){unicodeIsException160758,5783036
static int unicodeIsAlnum(unicode_tokenizer *p, int iCode){unicodeIsAlnum160783,5783564
static int unicodeCreate(unicodeCreate160791,5783805
static int unicodeOpen(unicodeOpen160841,5785283
static int unicodeClose(sqlite3_tokenizer_cursor *pCursor){unicodeClose160873,5786085
static int unicodeNext(unicodeNext160884,5786403
SQLITE_PRIVATE void sqlite3Fts3UnicodeTokenizer(sqlite3_tokenizer_module const **ppModule){sqlite3Fts3UnicodeTokenizer160952,5788645
SQLITE_PRIVATE int sqlite3FtsUnicodeIsalnum(int c){sqlite3FtsUnicodeIsalnum160999,5789981
static int remove_diacritic(int c){remove_diacritic161131,5796978
SQLITE_PRIVATE int sqlite3FtsUnicodeIsdiacritic(int c){sqlite3FtsUnicodeIsdiacritic161181,5799019
SQLITE_PRIVATE int sqlite3FtsUnicodeFold(int c, int bRemoveDiacritic){sqlite3FtsUnicodeFold161200,5799612
typedef sqlite3_int64 i64;i64161407,5808673
typedef unsigned char u8;u8161408,5808700
typedef unsigned short u16;u16161409,5808726
typedef unsigned int u32;u32161410,5808754
# define UNUSED_PARAMETER(UNUSED_PARAMETER161416,5808879
typedef struct Rtree Rtree;Rtree161419,5808926
typedef struct RtreeCursor RtreeCursor;RtreeCursor161420,5808954
typedef struct RtreeNode RtreeNode;RtreeNode161421,5808994
typedef struct RtreeCell RtreeCell;RtreeCell161422,5809030
typedef struct RtreeConstraint RtreeConstraint;RtreeConstraint161423,5809066
typedef struct RtreeMatchArg RtreeMatchArg;RtreeMatchArg161424,5809114
typedef struct RtreeGeomCallback RtreeGeomCallback;RtreeGeomCallback161425,5809158
typedef union RtreeCoord RtreeCoord;RtreeCoord161426,5809210
typedef struct RtreeSearchPoint RtreeSearchPoint;RtreeSearchPoint161427,5809247
#define RTREE_MAX_DIMENSIONS RTREE_MAX_DIMENSIONS161430,5809370
#define HASHSIZE HASHSIZE161436,5809552
#define RTREE_DEFAULT_ROWEST RTREE_DEFAULT_ROWEST161445,5809939
#define RTREE_MIN_ROWEST RTREE_MIN_ROWEST161446,5809976
struct Rtree {Rtree161451,5810055
  sqlite3_vtab base;          /* Base class.  Must be first */base161452,5810070
  sqlite3 *db;                /* Host database connection */db161453,5810133
  int iNodeSize;              /* Size in bytes of each node in the node table */iNodeSize161454,5810194
  u8 nDim;                    /* Number of dimensions */nDim161455,5810275
  u8 eCoordType;              /* RTREE_COORD_REAL32 or RTREE_COORD_INT32 */eCoordType161456,5810332
  u8 nBytesPerCell;           /* Bytes consumed per cell */nBytesPerCell161457,5810408
  int iDepth;                 /* Current depth of the r-tree structure */iDepth161458,5810468
  char *zDb;                  /* Name of database containing r-tree table */zDb161459,5810542
  char *zName;                /* Name of r-tree table */ zName161460,5810619
  int nBusy;                  /* Current number of users of this structure */nBusy161461,5810677
  i64 nRowEst;                /* Estimated number of rows in this table */nRowEst161462,5810755
  RtreeNode *pDeleted;pDeleted161469,5811107
  int iReinsertHeight;        /* Height of sub-trees Reinsert() has run on */iReinsertHeight161470,5811130
  sqlite3_stmt *pReadNode;pReadNode161473,5811272
  sqlite3_stmt *pWriteNode;pWriteNode161474,5811299
  sqlite3_stmt *pDeleteNode;pDeleteNode161475,5811327
  sqlite3_stmt *pReadRowid;pReadRowid161478,5811421
  sqlite3_stmt *pWriteRowid;pWriteRowid161479,5811449
  sqlite3_stmt *pDeleteRowid;pDeleteRowid161480,5811478
  sqlite3_stmt *pReadParent;pReadParent161483,5811574
  sqlite3_stmt *pWriteParent;pWriteParent161484,5811603
  sqlite3_stmt *pDeleteParent;pDeleteParent161485,5811633
  RtreeNode *aHash[HASHSIZE]; /* Hash table of in-memory nodes. */ aHash161487,5811665
#define RTREE_COORD_REAL32 RTREE_COORD_REAL32161491,5811781
#define RTREE_COORD_INT32 RTREE_COORD_INT32161492,5811810
  typedef sqlite3_int64 RtreeDValue;       /* High accuracy coordinate */RtreeDValue161500,5812030
  typedef int RtreeValue;                  /* Low accuracy coordinate */RtreeValue161501,5812104
# define RTREE_ZERO RTREE_ZERO161502,5812177
  typedef double RtreeDValue;              /* High accuracy coordinate */RtreeDValue161504,5812205
  typedef float RtreeValue;                /* Low accuracy coordinate */RtreeValue161505,5812279
# define RTREE_ZERO RTREE_ZERO161506,5812352
struct RtreeSearchPoint {RtreeSearchPoint161518,5812788
  RtreeDValue rScore;    /* The score for this node.  Smallest goes first. */rScore161519,5812814
  sqlite3_int64 id;      /* Node ID */id161520,5812892
  u8 iLevel;             /* 0=entries.  1=leaf node.  2+ for higher */iLevel161521,5812931
  u8 eWithin;            /* PARTLY_WITHIN or FULLY_WITHIN */eWithin161522,5813002
  u8 iCell;              /* Cell index within the node */iCell161523,5813063
#define RTREE_MINCELLS(RTREE_MINCELLS161535,5813399
#define RTREE_REINSERT(RTREE_REINSERT161536,5813469
#define RTREE_MAXCELLS RTREE_MAXCELLS161537,5813513
#define RTREE_MAX_DEPTH RTREE_MAX_DEPTH161546,5813856
#define RTREE_CACHE_SZ RTREE_CACHE_SZ161554,5814110
struct RtreeCursor {RtreeCursor161559,5814171
  sqlite3_vtab_cursor base;         /* Base class.  Must be first */base161560,5814192
  u8 atEOF;                         /* True if at end of search */atEOF161561,5814261
  u8 bPoint;                        /* True if sPoint is valid */bPoint161562,5814328
  int iStrategy;                    /* Copy of idxNum search parameter */iStrategy161563,5814394
  int nConstraint;                  /* Number of entries in aConstraint */nConstraint161564,5814468
  RtreeConstraint *aConstraint;     /* Search constraints. */aConstraint161565,5814543
  int nPointAlloc;                  /* Number of slots allocated for aPoint[] */nPointAlloc161566,5814605
  int nPoint;                       /* Number of slots used in aPoint[] */nPoint161567,5814686
  int mxLevel;                      /* iLevel value for root of the tree */mxLevel161568,5814761
  RtreeSearchPoint *aPoint;         /* Priority queue for search points */aPoint161569,5814837
  RtreeSearchPoint sPoint;          /* Cached next search point */sPoint161570,5814912
  RtreeNode *aNode[RTREE_CACHE_SZ]; /* Rtree node cache */aNode161571,5814979
  u32 anQueue[RTREE_MAX_DEPTH+1];   /* Number of queued entries by iLevel */anQueue161572,5815038
#define RTREE_OF_CURSOR(RTREE_OF_CURSOR161576,5815159
union RtreeCoord {RtreeCoord161582,5815363
  RtreeValue f;      /* Floating point value */f161583,5815382
  int i;             /* Integer value */i161584,5815430
  u32 u;             /* Unsigned for byte-order conversions */u161585,5815471
# define DCOORD(DCOORD161595,5815816
# define DCOORD(DCOORD161597,5815868
struct RtreeConstraint {RtreeConstraint161607,5816125
  int iCoord;                     /* Index of constrained coordinate */iCoord161608,5816150
  int op;                         /* Constraining operation */op161609,5816222
    RtreeDValue rValue;             /* Constraint value. */rValue161611,5816295
    int (*xGeom)(sqlite3_rtree_geometry*,int,RtreeDValue*,int*);xGeom161612,5816355
    int (*xQueryFunc)(sqlite3_rtree_query_info*);xQueryFunc161613,5816420
  } u;u161614,5816470
  sqlite3_rtree_query_info *pInfo;  /* xGeom and xQueryFunc argument */pInfo161615,5816477
#define RTREE_EQ RTREE_EQ161619,5816598
#define RTREE_LE RTREE_LE161620,5816632
#define RTREE_LT RTREE_LT161621,5816666
#define RTREE_GE RTREE_GE161622,5816700
#define RTREE_GT RTREE_GT161623,5816734
#define RTREE_MATCH RTREE_MATCH161624,5816768
#define RTREE_QUERY RTREE_QUERY161625,5816847
struct RtreeNode {RtreeNode161631,5816960
  RtreeNode *pParent;         /* Parent node */pParent161632,5816979
  i64 iNode;                  /* The node number */iNode161633,5817027
  int nRef;                   /* Number of references to this node */nRef161634,5817079
  int isDirty;                /* True if the node needs to be written to disk */isDirty161635,5817149
  u8 *zData;                  /* Content of the node, as should be on disk */zData161636,5817230
  RtreeNode *pNext;           /* Next node in this hash collision chain */pNext161637,5817308
#define NCELL(NCELL161641,5817431
struct RtreeCell {RtreeCell161646,5817533
  i64 iRowid;                                 /* Node or entry ID */iRowid161647,5817552
  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];  /* Bounding box coordinates */aCoord161648,5817621
struct RtreeGeomCallback {RtreeGeomCallback161666,5818312
  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);xGeom161667,5818339
  int (*xQueryFunc)(sqlite3_rtree_query_info*);xQueryFunc161668,5818405
  void (*xDestructor)(void*);xDestructor161669,5818453
  void *pContext;pContext161670,5818483
#define RTREE_GEOMETRY_MAGIC RTREE_GEOMETRY_MAGIC161679,5818729
struct RtreeMatchArg {RtreeMatchArg161687,5819031
  u32 magic;                  /* Always RTREE_GEOMETRY_MAGIC */magic161688,5819054
  RtreeGeomCallback cb;       /* Info about the callback functions */cb161689,5819118
  int nParam;                 /* Number of parameters to the SQL function */nParam161690,5819188
  sqlite3_value **apSqlParam; /* Original SQL parameter values */apSqlParam161691,5819265
  RtreeDValue aParam[1];      /* Values for parameters to the SQL function */aParam161692,5819331
# define MAX(MAX161696,5819425
# define MIN(MIN161699,5819486
static int readInt16(u8 *p){readInt16161706,5819666
static void readCoord(u8 *p, RtreeCoord *pCoord){readCoord161709,5819724
static i64 readInt64(u8 *p){readInt64161717,5819902
static int writeInt16(u8 *p, int i){writeInt16161735,5820365
static int writeCoord(u8 *p, RtreeCoord *pCoord){writeCoord161740,5820462
static int writeInt64(u8 *p, i64 i){writeInt64161751,5820707
static void nodeReference(RtreeNode *p){nodeReference161766,5820993
static void nodeZero(Rtree *pRtree, RtreeNode *p){nodeZero161775,5821129
static int nodeHash(i64 iNode){nodeHash161784,5821350
static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){nodeHashLookup161792,5821522
static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){nodeHashInsert161801,5821736
static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){nodeHashDelete161812,5822000
static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){nodeNew161828,5822521
static int nodeAcquire(nodeAcquire161845,5822966
static void nodeOverwriteCell(nodeOverwriteCell161933,5825589
static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){nodeDeleteCell161951,5826168
static int nodeInsertCell(nodeInsertCell161966,5826693
static int nodeWrite(Rtree *pRtree, RtreeNode *pNode){nodeWrite161990,5827406
static int nodeRelease(Rtree *pRtree, RtreeNode *pNode){nodeRelease162015,5828128
static i64 nodeGetRowid(nodeGetRowid162042,5828818
static void nodeGetCoord(nodeGetCoord162054,5829202
static void nodeGetCell(nodeGetCell162068,5829770
static int rtreeCreate(rtreeCreate162096,5830629
static int rtreeConnect(rtreeConnect162109,5830878
static void rtreeReference(Rtree *pRtree){rtreeReference162122,5831121
static void rtreeRelease(Rtree *pRtree){rtreeRelease162130,5831300
static int rtreeDisconnect(sqlite3_vtab *pVtab){rtreeDisconnect162149,5831863
static int rtreeDestroy(sqlite3_vtab *pVtab){rtreeDestroy162157,5832021
static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){rtreeOpen162184,5832605
static void freeCursorConstraints(RtreeCursor *pCsr){freeCursorConstraints162203,5833027
static int rtreeClose(sqlite3_vtab_cursor *cur){rtreeClose162221,5833543
static int rtreeEof(sqlite3_vtab_cursor *cur){rtreeEof162238,5834049
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD162260,5835064
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD162268,5835520
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD162274,5835792
static int rtreeCallbackConstraint(rtreeCallbackConstraint162286,5836243
static void rtreeNonleafConstraint(rtreeNonleafConstraint162334,5838263
static void rtreeLeafConstraint(rtreeLeafConstraint162378,5839938
static int nodeRowidIndex(nodeRowidIndex162404,5840984
static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){nodeParentIndex162426,5841440
static int rtreeSearchPointCompare(rtreeSearchPointCompare162445,5842183
static void rtreeSearchPointSwap(RtreeCursor *p, int i, int j){rtreeSearchPointSwap162459,5842511
static RtreeSearchPoint *rtreeSearchPointFirst(RtreeCursor *pCur){rtreeSearchPointFirst162480,5843008
static RtreeNode *rtreeNodeOfFirstSearchPoint(RtreeCursor *pCur, int *pRC){rtreeNodeOfFirstSearchPoint162487,5843222
static RtreeSearchPoint *rtreeEnqueue(rtreeEnqueue162503,5843676
static RtreeSearchPoint *rtreeSearchPointNew(rtreeSearchPointNew162538,5844643
# define RTREE_QUEUE_TRACE(RTREE_QUEUE_TRACE162600,5846418
static void rtreeSearchPointPop(RtreeCursor *p){rtreeSearchPointPop162605,5846533
static int rtreeStepToLeaf(RtreeCursor *pCur){rtreeStepToLeaf162653,5847769
static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){rtreeNext162723,5849870
static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){rtreeRowid162737,5850236
static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){rtreeColumn162751,5850670
static int findLeafNode(findLeafNode162786,5851800
static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){deserializeGeometry162812,5852683
static int rtreeFilter(rtreeFilter162858,5854254
static void setEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){setEstimatedRows162964,5857767
static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){rtreeBestIndex163006,5859215
static RtreeDValue cellArea(Rtree *pRtree, RtreeCell *p){cellArea163091,5862199
static RtreeDValue cellMargin(Rtree *pRtree, RtreeCell *p){cellMargin163104,5862554
static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){cellUnion163116,5862844
static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){cellContains163135,5863466
static RtreeDValue cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){cellGrowth163153,5863961
static RtreeDValue cellOverlap(cellOverlap163162,5864229
static int ChooseLeaf(ChooseLeaf163194,5864940
static int AdjustTree(AdjustTree163254,5866566
static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){rowidWrite163283,5867304
static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){parentWrite163293,5867643
static void SortByDistance(SortByDistance163320,5868547
static void SortByDimension(SortByDimension163386,5870232
static int splitNodeStartree(splitNodeStartree163445,5871867
static int updateMapping(updateMapping163543,5874508
static int SplitNode(SplitNode163562,5874982
static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){fixLeafParent163709,5878970
static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){removeNode163741,5880262
static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){fixBoundingBox163790,5881519
static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){deleteCell163817,5882312
static int Reinsert(Reinsert163848,5883152
static int rtreeInsertCell(rtreeInsertCell163953,5886090
static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){reinsertNodeContent163988,5886971
static int newRowid(Rtree *pRtree, i64 *piRowid){newRowid164017,5887729
static int rtreeDeleteRowid(Rtree *pRtree, sqlite3_int64 iDelete){rtreeDeleteRowid164030,5888099
#define RNDTOWARDS RNDTOWARDS164114,5890633
#define RNDAWAY RNDAWAY164115,5890701
static RtreeValue rtreeValueDown(sqlite3_value *v){rtreeValueDown164122,5890955
static RtreeValue rtreeValueUp(sqlite3_value *v){rtreeValueUp164130,5891147
static int rtreeConstraintError(Rtree *pRtree, int iCol){rtreeConstraintError164153,5891977
static int rtreeUpdate(rtreeUpdate164191,5892970
static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){rtreeRename164322,5897123
static int rtreeQueryStat1(sqlite3 *db, Rtree *pRtree){rtreeQueryStat1164345,5897911
static sqlite3_module rtreeModule = {rtreeModule164384,5898892
static int rtreeSqlInit(rtreeSqlInit164410,5900320
  #define N_STATEMENT N_STATEMENT164419,5900464
static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){getIntFromStmt164491,5902943
static int getNodeSize(getNodeSize164521,5904086
static int rtreeInit(rtreeInit164565,5905411
static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){rtreenode164672,5909116
static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){rtreedepth164726,5910764
SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){sqlite3RtreeInit164743,5911318
static void rtreeFreeCallback(void *p){rtreeFreeCallback164774,5912321
static void rtreeMatchArgFree(void *pArg){rtreeMatchArgFree164783,5912572
static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){geomCallback164806,5913376
SQLITE_API int sqlite3_rtree_geometry_callback(sqlite3_rtree_geometry_callback164844,5914527
SQLITE_API int sqlite3_rtree_query_callback(sqlite3_rtree_query_callback164868,5915477
__declspec(dllexport)__declspec164891,5916416
# define SQLITE_MAX_LIKE_PATTERN_LENGTH SQLITE_MAX_LIKE_PATTERN_LENGTH164959,5918311
static void xFree(void *p){xFree164965,5918442
static const unsigned char icuUtf8Trans1[] = {icuUtf8Trans1164974,5918650
#define SQLITE_ICU_READ_UTF8(SQLITE_ICU_READ_UTF8164985,5919101
#define SQLITE_ICU_SKIP_UTF8(SQLITE_ICU_SKIP_UTF8164994,5919533
static int icuLikeCompare(icuLikeCompare165006,5919959
static void icuLikeFunc(icuLikeFunc165094,5922433
static void icuFunctionError(icuFunctionError165140,5923763
static void icuRegexpDelete(void *p){icuRegexpDelete165155,5924285
static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){icuRegexpFunc165179,5925044
static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){icuCaseFunc16165262,5927586
static void icuCollationDel(void *pCtx){icuCollationDel165320,5929334
static int icuCollationColl(icuCollationColl165329,5929573
static void icuLoadCollation(icuLoadCollation165361,5930487
SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){sqlite3IcuInit165401,5931637
__declspec(dllexport)__declspec165442,5933332
typedef struct IcuTokenizer IcuTokenizer;IcuTokenizer165484,5934467
typedef struct IcuCursor IcuCursor;IcuCursor165485,5934509
struct IcuTokenizer {IcuTokenizer165487,5934546
  sqlite3_tokenizer base;base165488,5934568
  char *zLocale;zLocale165489,5934594
struct IcuCursor {IcuCursor165492,5934615
  sqlite3_tokenizer_cursor base;base165493,5934634
  UBreakIterator *pIter;      /* ICU break-iterator object */pIter165495,5934668
  int nChar;                  /* Number of UChar elements in pInput */nChar165496,5934730
  UChar *aChar;               /* Copy of input using utf-16 encoding */aChar165497,5934801
  int *aOffset;               /* Offsets of each character in utf-8 input */aOffset165498,5934873
  int nBuffer;nBuffer165500,5934951
  char *zBuffer;zBuffer165501,5934966
  int iToken;iToken165503,5934984
static int icuCreate(icuCreate165509,5935044
static int icuDestroy(sqlite3_tokenizer *pTokenizer){icuDestroy165539,5935684
static int icuOpen(icuOpen165551,5936033
static int icuClose(sqlite3_tokenizer_cursor *pCursor){icuClose165623,5937845
static int icuNext(icuNext165634,5938106
static const sqlite3_tokenizer_module icuTokenizerModule = {icuTokenizerModule165699,5939834
SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule(sqlite3Fts3IcuTokenizerModule165712,5940318
#define _SQLITE3RBU_H_SQLITE3RBU_H166081,5957323
typedef struct sqlite3rbu sqlite3rbu;sqlite3rbu166089,5957456
#define SQLITE_RBU_STATE_OAL SQLITE_RBU_STATE_OAL166326,5968373
#define SQLITE_RBU_STATE_MOVE SQLITE_RBU_STATE_MOVE166327,5968411
#define SQLITE_RBU_STATE_CHECKPOINT SQLITE_RBU_STATE_CHECKPOINT166328,5968449
#define SQLITE_RBU_STATE_DONE SQLITE_RBU_STATE_DONE166329,5968487
#define SQLITE_RBU_STATE_ERROR SQLITE_RBU_STATE_ERROR166330,5968525
#define SQLITE_RBU_UPDATE_CACHESIZE SQLITE_RBU_UPDATE_CACHESIZE166402,5971413
# define SWAP(SWAP166408,5971527
#define RBU_STATE_STAGE RBU_STATE_STAGE166455,5973183
#define RBU_STATE_TBL RBU_STATE_TBL166456,5973216
#define RBU_STATE_IDX RBU_STATE_IDX166457,5973249
#define RBU_STATE_ROW RBU_STATE_ROW166458,5973282
#define RBU_STATE_PROGRESS RBU_STATE_PROGRESS166459,5973315
#define RBU_STATE_CKPT RBU_STATE_CKPT166460,5973348
#define RBU_STATE_COOKIE RBU_STATE_COOKIE166461,5973381
#define RBU_STATE_OALSZ RBU_STATE_OALSZ166462,5973414
#define RBU_STATE_PHASEONESTEP RBU_STATE_PHASEONESTEP166463,5973447
#define RBU_STAGE_OAL RBU_STAGE_OAL166465,5973481
#define RBU_STAGE_MOVE RBU_STAGE_MOVE166466,5973513
#define RBU_STAGE_CAPTURE RBU_STAGE_CAPTURE166467,5973545
#define RBU_STAGE_CKPT RBU_STAGE_CKPT166468,5973577
#define RBU_STAGE_DONE RBU_STAGE_DONE166469,5973609
#define RBU_CREATE_STATE RBU_CREATE_STATE166472,5973643
typedef struct RbuFrame RbuFrame;RbuFrame166475,5973741
typedef struct RbuObjIter RbuObjIter;RbuObjIter166476,5973775
typedef struct RbuState RbuState;RbuState166477,5973813
typedef struct rbu_vfs rbu_vfs;rbu_vfs166478,5973847
typedef struct rbu_file rbu_file;rbu_file166479,5973879
typedef struct RbuUpdateStmt RbuUpdateStmt;RbuUpdateStmt166480,5973913
typedef unsigned int u32;u32166483,5973992
typedef unsigned short u16;u16166484,5974018
typedef unsigned char u8;u8166485,5974046
typedef sqlite3_int64 i64;i64166486,5974072
#define WAL_LOCK_WRITE WAL_LOCK_WRITE166494,5974272
#define WAL_LOCK_CKPT WAL_LOCK_CKPT166495,5974298
#define WAL_LOCK_READ0 WAL_LOCK_READ0166496,5974324
#define SQLITE_FCNTL_RBUCNT SQLITE_FCNTL_RBUCNT166498,5974351
struct RbuState {RbuState166503,5974469
  int eStage;eStage166504,5974487
  char *zTbl;zTbl166505,5974501
  char *zIdx;zIdx166506,5974515
  i64 iWalCksum;iWalCksum166507,5974529
  int nRow;nRow166508,5974546
  i64 nProgress;nProgress166509,5974558
  u32 iCookie;iCookie166510,5974575
  i64 iOalSz;iOalSz166511,5974590
  i64 nPhaseOneStep;nPhaseOneStep166512,5974604
struct RbuUpdateStmt {RbuUpdateStmt166515,5974629
  char *zMask;                    /* Copy of update mask used with pUpdate */zMask166516,5974652
  sqlite3_stmt *pUpdate;          /* Last update statement (or NULL) */pUpdate166517,5974730
  RbuUpdateStmt *pNext;pNext166518,5974802
struct RbuObjIter {RbuObjIter166537,5975428
  sqlite3_stmt *pTblIter;         /* Iterate through tables */pTblIter166538,5975448
  sqlite3_stmt *pIdxIter;         /* Index iterator */pIdxIter166539,5975511
  int nTblCol;                    /* Size of azTblCol[] array */nTblCol166540,5975566
  char **azTblCol;                /* Array of unquoted target column names */azTblCol166541,5975631
  char **azTblType;               /* Array of target column types */azTblType166542,5975709
  int *aiSrcOrder;                /* src table col -> target table col */aiSrcOrder166543,5975778
  u8 *abTblPk;                    /* Array of flags, set on target PK columns */abTblPk166544,5975852
  u8 *abNotNull;                  /* Array of flags, set on NOT NULL columns */abNotNull166545,5975933
  u8 *abIndexed;                  /* Array of flags, set on indexed & PK cols */abIndexed166546,5976013
  int eType;                      /* Table type - an RBU_PK_XXX value */eType166547,5976094
  int bCleanup;                   /* True in "cleanup" state */bCleanup166550,5976215
  const char *zTbl;               /* Name of target db table */zTbl166551,5976279
  const char *zDataTbl;           /* Name of rbu db table (or null) */zDataTbl166552,5976343
  const char *zIdx;               /* Name of target db index (or null) */zIdx166553,5976414
  int iTnum;                      /* Root page of current object */iTnum166554,5976488
  int iPkTnum;                    /* If eType==EXTERNAL, root of PK index */iPkTnum166555,5976556
  int bUnique;                    /* Current index is unique */bUnique166556,5976633
  int nIndex;                     /* Number of aux. indexes on table zTbl */nIndex166557,5976697
  int nCol;                       /* Number of columns in current object */nCol166560,5976828
  sqlite3_stmt *pSelect;          /* Source data */pSelect166561,5976904
  sqlite3_stmt *pInsert;          /* Statement for INSERT operations */pInsert166562,5976956
  sqlite3_stmt *pDelete;          /* Statement for DELETE ops */pDelete166563,5977028
  sqlite3_stmt *pTmpInsert;       /* Insert into rbu_tmp_$zDataTbl */pTmpInsert166564,5977093
  RbuUpdateStmt *pRbuUpdate;pRbuUpdate166567,5977228
#define RBU_PK_NOTABLE RBU_PK_NOTABLE166580,5977535
#define RBU_PK_NONE RBU_PK_NONE166581,5977567
#define RBU_PK_IPK RBU_PK_IPK166582,5977599
#define RBU_PK_EXTERNAL RBU_PK_EXTERNAL166583,5977631
#define RBU_PK_WITHOUT_ROWID RBU_PK_WITHOUT_ROWID166584,5977663
#define RBU_PK_VTAB RBU_PK_VTAB166585,5977695
#define RBU_INSERT RBU_INSERT166592,5977846
#define RBU_DELETE RBU_DELETE166593,5977916
#define RBU_REPLACE RBU_REPLACE166594,5977994
#define RBU_IDX_DELETE RBU_IDX_DELETE166595,5978063
#define RBU_IDX_INSERT RBU_IDX_INSERT166596,5978142
#define RBU_UPDATE RBU_UPDATE166598,5978214
struct RbuFrame {RbuFrame166604,5978435
  u32 iDbPage;iDbPage166605,5978453
  u32 iWalFrame;iWalFrame166606,5978468
struct sqlite3rbu {sqlite3rbu166649,5980182
  int eStage;                     /* Value of RBU_STATE_STAGE field */eStage166650,5980202
  sqlite3 *dbMain;                /* target database handle */dbMain166651,5980273
  sqlite3 *dbRbu;                 /* rbu database handle */dbRbu166652,5980336
  char *zTarget;                  /* Path to target db */zTarget166653,5980396
  char *zRbu;                     /* Path to rbu db */zRbu166654,5980454
  char *zState;                   /* Path to state db (or NULL if zRbu) */zState166655,5980509
  char zStateDb[5];               /* Db name for state ("stat" or "main") */zStateDb166656,5980584
  int rc;                         /* Value returned by last rbu_step() call */rc166657,5980661
  char *zErrmsg;                  /* Error message if rc!=SQLITE_OK */zErrmsg166658,5980740
  int nStep;                      /* Rows processed for current object */nStep166659,5980811
  int nProgress;                  /* Rows processed for all objects */nProgress166660,5980885
  RbuObjIter objiter;             /* Iterator for skipping through tbl/idx */objiter166661,5980956
  const char *zVfsName;           /* Name of automatically created rbu vfs */zVfsName166662,5981034
  rbu_file *pTargetFd;            /* File handle open on target db */pTargetFd166663,5981112
  i64 iOalSz;iOalSz166664,5981182
  i64 nPhaseOneStep;nPhaseOneStep166665,5981196
  u32 iMaxFrame;                  /* Largest iWalFrame value in aFrame[] */iMaxFrame166670,5981414
  u32 mLock;mLock166671,5981490
  int nFrame;                     /* Entries in aFrame[] array */nFrame166672,5981503
  int nFrameAlloc;                /* Allocated size of aFrame[] array */nFrameAlloc166673,5981569
  RbuFrame *aFrame;aFrame166674,5981642
  int pgsz;pgsz166675,5981662
  u8 *aBuf;aBuf166676,5981674
  i64 iWalCksum;iWalCksum166677,5981686
  int nRbu;                       /* Number of RBU VFS in the stack */nRbu166680,5981741
  rbu_file *pRbuFd;               /* Fd for main db of dbRbu */pRbuFd166681,5981812
struct rbu_vfs {rbu_vfs166687,5981952
  sqlite3_vfs base;               /* rbu VFS shim methods */base166688,5981969
  sqlite3_vfs *pRealVfs;          /* Underlying VFS */pRealVfs166689,5982030
  sqlite3_mutex *mutex;           /* Mutex to protect pMain */mutex166690,5982085
  rbu_file *pMain;                /* Linked list of main db files */pMain166691,5982148
struct rbu_file {rbu_file166698,5982322
  sqlite3_file base;              /* sqlite3_file methods */base166699,5982340
  sqlite3_file *pReal;            /* Underlying file handle */pReal166700,5982401
  rbu_vfs *pRbuVfs;               /* Pointer to the rbu_vfs object */pRbuVfs166701,5982464
  sqlite3rbu *pRbu;               /* Pointer to rbu object (rbu target only) */pRbu166702,5982534
  int openFlags;                  /* Flags this file was opened with */openFlags166704,5982615
  u32 iCookie;                    /* Cookie value for main db files */iCookie166705,5982687
  u8 iWriteVer;                   /* "write-version" value for main db files */iWriteVer166706,5982758
  u8 bNolock;                     /* True to fail EXCLUSIVE locks */bNolock166707,5982838
  int nShm;                       /* Number of entries in apShm[] array */nShm166709,5982908
  char **apShm;                   /* Array of mmap'd *-shm regions */apShm166710,5982983
  char *zDel;                     /* Delete this when closing file */zDel166711,5983053
  const char *zWal;               /* Wal filename for this main db file */zWal166713,5983124
  rbu_file *pWalFd;               /* Wal file descriptor for this main db */pWalFd166714,5983199
  rbu_file *pMainNext;            /* Next MAIN_DB file */pMainNext166715,5983276
#define rbuIsVacuum(rbuIsVacuum166721,5983398
static unsigned int rbuDeltaGetInt(const char **pz, int *pLen){rbuDeltaGetInt166741,5984066
static unsigned int rbuDeltaChecksum(const char *zIn, size_t N){rbuDeltaChecksum166768,5985043
static int rbuDeltaApply(rbuDeltaApply166820,5986625
static int rbuDeltaOutputSize(const char *zDelta, int lenDelta){rbuDeltaOutputSize166906,5988973
static void rbuFossilDeltaFunc(rbuFossilDeltaFunc166928,5989638
static int prepareAndCollectError(prepareAndCollectError166980,5991032
static int resetAndCollectError(sqlite3_stmt *pStmt, char **pzErrmsg){resetAndCollectError167002,5991645
static int prepareFreeAndCollectError(prepareFreeAndCollectError167025,5992619
static void rbuObjIterFreeCols(RbuObjIter *pIter){rbuObjIterFreeCols167047,5993076
static void rbuObjIterClearStatements(RbuObjIter *pIter){rbuObjIterClearStatements167067,5993603
static void rbuObjIterFinalize(RbuObjIter *pIter){rbuObjIterFinalize167094,5994237
static int rbuObjIterNext(sqlite3rbu *p, RbuObjIter *pIter){rbuObjIterNext167110,5994766
static void rbuTargetNameFunc(rbuTargetNameFunc167190,5997473
static int rbuObjIterFirst(sqlite3rbu *p, RbuObjIter *pIter){rbuObjIterFirst167225,5998461
static char *rbuMPrintf(sqlite3rbu *p, const char *zFmt, ...){rbuMPrintf167260,5999718
static int rbuMPrintfExec(sqlite3rbu *p, sqlite3 *db, const char *zFmt, ...){rbuMPrintfExec167285,6000454
static void *rbuMalloc(sqlite3rbu *p, int nByte){rbuMalloc167312,6001224
static void rbuAllocateIterArrays(sqlite3rbu *p, RbuObjIter *pIter, int nCol){rbuAllocateIterArrays167332,6001706
static char *rbuStrndup(const char *zStr, int *pRc){rbuStrndup167357,6002668
static void rbuFinalize(sqlite3rbu *p, sqlite3_stmt *pStmt){rbuFinalize167381,6003217
static void rbuTableType(rbuTableType167429,6005039
static void rbuObjIterCacheIndexedCols(sqlite3rbu *p, RbuObjIter *pIter){rbuObjIterCacheIndexedCols167513,6007493
static int rbuObjIterCacheTableInfo(sqlite3rbu *p, RbuObjIter *pIter){rbuObjIterCacheTableInfo167560,6009033
static char *rbuObjIterGetCollist(rbuObjIterGetCollist167669,6013068
static char *rbuObjIterGetIndexCols(rbuObjIterGetIndexCols167708,6014326
static char *rbuObjIterGetOldlist(rbuObjIterGetOldlist167812,6017825
static char *rbuObjIterGetWhere(rbuObjIterGetWhere167853,6018876
static void rbuBadControlError(sqlite3rbu *p){rbuBadControlError167894,6020103
static char *rbuObjIterGetSetlist(rbuObjIterGetSetlist167917,6021103
static char *rbuObjIterGetBindlist(sqlite3rbu *p, int nBind){rbuObjIterGetBindlist167971,6022800
static char *rbuWithoutRowidPK(sqlite3rbu *p, RbuObjIter *pIter){rbuWithoutRowidPK167998,6023481
static void rbuCreateImposterTable2(sqlite3rbu *p, RbuObjIter *pIter){rbuCreateImposterTable2168057,6025674
static void rbuCreateImposterTable(sqlite3rbu *p, RbuObjIter *pIter){rbuCreateImposterTable168131,6028989
static void rbuObjIterPrepareTmpInsert(rbuObjIterPrepareTmpInsert168187,6030965
static void rbuTmpInsertFunc(rbuTmpInsertFunc168205,6031561
static int rbuObjIterPrepareAll(rbuObjIterPrepareAll168240,6032434
static int rbuGetUpdateStmt(rbuGetUpdateStmt168462,6040447
static sqlite3 *rbuOpenDbhandle(rbuOpenDbhandle168530,6042416
static void rbuFreeState(RbuState *p){rbuFreeState168551,6042912
static RbuState *rbuLoadState(sqlite3rbu *p){rbuLoadState168568,6043369
static void rbuOpenDatabase(sqlite3rbu *p){rbuOpenDatabase168641,6045255
static void rbuFileSuffix3(const char *zBase, char *z){rbuFileSuffix3168811,6050332
static i64 rbuShmChecksum(sqlite3rbu *p){rbuShmChecksum168832,6050906
static void rbuSetupCheckpoint(sqlite3rbu *p, RbuState *pState){rbuSetupCheckpoint168861,6052009
static int rbuCaptureWalRead(sqlite3rbu *pRbu, i64 iOff, int iAmt){rbuCaptureWalRead168926,6054535
static int rbuCaptureDbWrite(sqlite3rbu *pRbu, i64 iOff){rbuCaptureDbWrite168958,6055553
static void rbuCheckpointFrame(sqlite3rbu *p, RbuFrame *pFrame){rbuCheckpointFrame168968,6055890
static void rbuLockDatabase(sqlite3rbu *p){rbuLockDatabase168986,6056408
static LPWSTR rbuWinUtf8ToUnicode(const char *zFilename){rbuWinUtf8ToUnicode168996,6056711
static void rbuMoveOalFile(sqlite3rbu *p){rbuMoveOalFile169026,6057624
static int rbuStepType(sqlite3rbu *p, const char **pzMask){rbuStepType169117,6060219
static void assertColumnName(sqlite3_stmt *pStmt, int iCol, const char *zName){assertColumnName169160,6061258
# define assertColumnName(assertColumnName169165,6061446
static void rbuStepOneOp(sqlite3rbu *p, int eType){rbuStepOneOp169173,6061703
static int rbuStep(sqlite3rbu *p){rbuStep169256,6064416
static void rbuIncrSchemaCookie(sqlite3rbu *p){rbuIncrSchemaCookie169321,6066535
static void rbuSaveState(sqlite3rbu *p, int eStage){rbuSaveState169352,6067688
static void rbuCopyPragma(sqlite3rbu *p, const char *zPragma){rbuCopyPragma169411,6069446
static void rbuCreateTargetSchema(sqlite3rbu *p){rbuCreateTargetSchema169431,6070137
SQLITE_API int sqlite3rbu_step(sqlite3rbu *p){sqlite3rbu_step169483,6071623
static int rbuStrCompare(const char *z1, const char *z2){rbuStrCompare169595,6074975
static void rbuSetupOal(sqlite3rbu *p, RbuState *pState){rbuSetupOal169611,6075596
static void rbuDeleteOalFile(sqlite3rbu *p){rbuDeleteOalFile169643,6076472
static void rbuCreateVfs(sqlite3rbu *p){rbuCreateVfs169659,6076979
static void rbuDeleteVfs(sqlite3rbu *p){rbuDeleteVfs169678,6077489
static void rbuIndexCntFunc(rbuIndexCntFunc169690,6077823
static void rbuInitPhaseOneSteps(sqlite3rbu *p){rbuInitPhaseOneSteps169739,6079359
static sqlite3rbu *openRbuHandle(openRbuHandle169780,6080576
static sqlite3rbu *rbuMisuseError(void){rbuMisuseError169924,6084980
SQLITE_API sqlite3rbu *sqlite3rbu_open(sqlite3rbu_open169937,6085239
SQLITE_API sqlite3rbu *sqlite3rbu_vacuum(sqlite3rbu_vacuum169950,6085577
SQLITE_API sqlite3 *sqlite3rbu_db(sqlite3rbu *pRbu, int bRbu){sqlite3rbu_db169962,6085864
static void rbuEditErrmsg(sqlite3rbu *p){rbuEditErrmsg169976,6086217
SQLITE_API int sqlite3rbu_close(sqlite3rbu *p, char **pzErrmsg){sqlite3rbu_close169994,6086709
SQLITE_API sqlite3_int64 sqlite3rbu_progress(sqlite3rbu *pRbu){sqlite3rbu_progress170046,6088316
SQLITE_API void sqlite3rbu_bp_progress(sqlite3rbu *p, int *pnOne, int *pnTwo){sqlite3rbu_bp_progress170054,6088504
SQLITE_API int sqlite3rbu_state(sqlite3rbu *p){sqlite3rbu_state170089,6089282
SQLITE_API int sqlite3rbu_savestate(sqlite3rbu *p){sqlite3rbu_savestate170117,6090167
static void rbuUnlockShm(rbu_file *p){rbuUnlockShm170201,6094046
static int rbuVfsClose(sqlite3_file *pFile){rbuVfsClose170217,6094414
static u32 rbuGetU32(u8 *aBuf){rbuGetU32170250,6095242
static void rbuPutU32(u8 *aBuf, u32 iVal){rbuPutU32170261,6095480
static void rbuPutU16(u8 *aBuf, u16 iVal){rbuPutU16170268,6095658
static int rbuVfsRead(rbuVfsRead170276,6095810
static int rbuVfsWrite(rbuVfsWrite170342,6098049
static int rbuVfsTruncate(sqlite3_file *pFile, sqlite_int64 size){rbuVfsTruncate170377,6099005
static int rbuVfsSync(sqlite3_file *pFile, int flags){rbuVfsSync170385,6099195
static int rbuVfsFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){rbuVfsFileSize170399,6099561
static int rbuVfsLock(sqlite3_file *pFile, int eLock){rbuVfsLock170420,6100158
static int rbuVfsUnlock(sqlite3_file *pFile, int eLock){rbuVfsUnlock170442,6100758
static int rbuVfsCheckReservedLock(sqlite3_file *pFile, int *pResOut){rbuVfsCheckReservedLock170450,6100987
static int rbuVfsFileControl(sqlite3_file *pFile, int op, void *pArg){rbuVfsFileControl170458,6101235
static int rbuVfsSectorSize(sqlite3_file *pFile){rbuVfsSectorSize170513,6102965
static int rbuVfsDeviceCharacteristics(sqlite3_file *pFile){rbuVfsDeviceCharacteristics170521,6103182
static int rbuVfsShmLock(sqlite3_file *pFile, int ofst, int n, int flags){rbuVfsShmLock170529,6103391
static int rbuVfsShmMap(rbuVfsShmMap170568,6104637
static void rbuVfsShmBarrier(sqlite3_file *pFile){rbuVfsShmBarrier170622,6106022
static int rbuVfsShmUnmap(sqlite3_file *pFile, int delFlag){rbuVfsShmUnmap170630,6106187
static rbu_file *rbuFindMaindb(rbu_vfs *pRbuVfs, const char *zWal){rbuFindMaindb170652,6106903
static const char *rbuMainToWal(const char *zName, int flags){rbuMainToWal170667,6107479
static int rbuVfsOpen(rbuVfsOpen170690,6107890
static int rbuVfsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){rbuVfsDelete170803,6111872
static int rbuVfsAccess(rbuVfsAccess170812,6112174
static int rbuVfsFullPathname(rbuVfsFullPathname170857,6113610
static void *rbuVfsDlOpen(sqlite3_vfs *pVfs, const char *zPath){rbuVfsDlOpen170871,6113941
static void rbuVfsDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){rbuVfsDlError170881,6114286
static void (*rbuVfsDlSym(rbuVfsDlSym170889,6114543
static void rbuVfsDlClose(sqlite3_vfs *pVfs, void *pHandle){rbuVfsDlClose170901,6114793
static int rbuVfsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){rbuVfsRandomness170911,6115080
static int rbuVfsSleep(sqlite3_vfs *pVfs, int nMicro){rbuVfsSleep170920,6115363
static int rbuVfsCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){rbuVfsCurrentTime170928,6115590
static int rbuVfsGetLastError(sqlite3_vfs *pVfs, int a, char *b){rbuVfsGetLastError170936,6115783
SQLITE_API void sqlite3rbu_destroy_vfs(const char *zName){sqlite3rbu_destroy_vfs170944,6115965
SQLITE_API int sqlite3rbu_create_vfs(const char *zName, const char *zParent){sqlite3rbu_create_vfs170958,6116418
#define VTAB_SCHEMA VTAB_SCHEMA171098,6121573
typedef struct StatTable StatTable;StatTable171114,6122596
typedef struct StatCursor StatCursor;StatCursor171115,6122632
typedef struct StatPage StatPage;StatPage171116,6122670
typedef struct StatCell StatCell;StatCell171117,6122704
struct StatCell {StatCell171119,6122739
  int nLocal;                     /* Bytes of local payload */nLocal171120,6122757
  u32 iChildPg;                   /* Child node (or 0 if this is a leaf) */iChildPg171121,6122820
  int nOvfl;                      /* Entries in aOvfl[] */nOvfl171122,6122896
  u32 *aOvfl;                     /* Array of overflow page numbers */aOvfl171123,6122955
  int nLastOvfl;                  /* Bytes of payload on final overflow page */nLastOvfl171124,6123026
  int iOvfl;                      /* Iterates through aOvfl[] */iOvfl171125,6123106
struct StatPage {StatPage171128,6123175
  u32 iPgno;iPgno171129,6123193
  DbPage *pPg;pPg171130,6123206
  int iCell;iCell171131,6123221
  char *zPath;                    /* Path to this page */zPath171133,6123235
  u8 flags;                       /* Copy of flags byte */flags171136,6123343
  int nCell;                      /* Number of cells on page */nCell171137,6123402
  int nUnused;                    /* Number of unused bytes on page */nUnused171138,6123466
  StatCell *aCell;                /* Array of parsed cells */aCell171139,6123537
  u32 iRightChildPg;              /* Right-child page number (or 0) */iRightChildPg171140,6123599
  int nMxPayload;                 /* Largest payload of any cell on this page */nMxPayload171141,6123670
struct StatCursor {StatCursor171144,6123755
  sqlite3_vtab_cursor base;base171145,6123775
  sqlite3_stmt *pStmt;            /* Iterates through set of root pages */pStmt171146,6123803
  int isEof;                      /* After pStmt has returned SQLITE_DONE */isEof171147,6123878
  int iDb;                        /* Schema used for this query */iDb171148,6123955
  StatPage aPage[32];aPage171150,6124023
  int iPage;                      /* Current entry in aPage[] */iPage171151,6124045
  char *zName;                    /* Value of 'name' column */zName171154,6124137
  char *zPath;                    /* Value of 'path' column */zPath171155,6124200
  u32 iPageno;                    /* Value of 'pageno' column */iPageno171156,6124263
  char *zPagetype;                /* Value of 'pagetype' column */zPagetype171157,6124328
  int nCell;                      /* Value of 'ncell' column */nCell171158,6124395
  int nPayload;                   /* Value of 'payload' column */nPayload171159,6124459
  int nUnused;                    /* Value of 'unused' column */nUnused171160,6124525
  int nMxPayload;                 /* Value of 'mx_payload' column */nMxPayload171161,6124590
  i64 iOffset;                    /* Value of 'pgOffset' column */iOffset171162,6124659
  int szPage;                     /* Value of 'pgSize' column */szPage171163,6124726
struct StatTable {StatTable171166,6124795
  sqlite3_vtab base;base171167,6124814
  sqlite3 *db;db171168,6124835
  int iDb;                        /* Index of database to analyze */iDb171169,6124850
# define get2byte(get2byte171173,6124940
static int statConnect(statConnect171179,6125047
static int statDisconnect(sqlite3_vtab *pVtab){statDisconnect171221,6125918
static int statBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){statBestIndex171233,6126290
static int statOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){statOpen171279,6127688
static void statClearPage(StatPage *p){statClearPage171296,6128109
static void statResetCsr(StatCursor *pCsr){statResetCsr171309,6128376
static int statClose(sqlite3_vtab_cursor *pCursor){statClose171324,6128664
static void getLocalPayload(getLocalPayload171332,6128860
static int statDecodePage(Btree *pBt, StatPage *p){statDecodePage171355,6129624
static void statSizeAndOffset(StatCursor *pCsr){statSizeAndOffset171450,6132695
static int statNext(sqlite3_vtab_cursor *pCursor){statNext171475,6133475
static int statEof(sqlite3_vtab_cursor *pCursor){statEof171608,6137391
static int statFilter(statFilter171613,6137510
static int statColumn(statColumn171658,6138820
static int statRowid(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){statRowid171705,6140230
SQLITE_PRIVATE int sqlite3DbstatRegister(sqlite3 *db){sqlite3DbstatRegister171714,6140473
SQLITE_PRIVATE int sqlite3DbstatRegister(sqlite3 *db){ return SQLITE_OK; }sqlite3DbstatRegister171740,6141776
typedef struct SessionTable SessionTable;SessionTable171756,6142309
typedef struct SessionChange SessionChange;SessionChange171757,6142351
typedef struct SessionBuffer SessionBuffer;SessionBuffer171758,6142395
typedef struct SessionInput SessionInput;SessionInput171759,6142439
#   define SESSIONS_STRM_CHUNK_SIZE SESSIONS_STRM_CHUNK_SIZE171766,6142604
#   define SESSIONS_STRM_CHUNK_SIZE SESSIONS_STRM_CHUNK_SIZE171768,6142650
typedef struct SessionHook SessionHook;SessionHook171772,6142707
struct SessionHook {SessionHook171773,6142747
  void *pCtx;pCtx171774,6142768
  int (*xOld)(void*,int,sqlite3_value**);xOld171775,6142782
  int (*xNew)(void*,int,sqlite3_value**);xNew171776,6142824
  int (*xCount)(void*);xCount171777,6142866
  int (*xDepth)(void*);xDepth171778,6142890
struct sqlite3_session {sqlite3_session171784,6142953
  sqlite3 *db;                    /* Database handle session is attached to */db171785,6142978
  char *zDb;                      /* Name of database session is attached to */zDb171786,6143057
  int bEnable;                    /* True if currently recording */bEnable171787,6143137
  int bIndirect;                  /* True if all changes are indirect */bIndirect171788,6143205
  int bAutoAttach;                /* True to auto-attach tables */bAutoAttach171789,6143278
  int rc;                         /* Non-zero if an error has occurred */rc171790,6143345
  void *pFilterCtx;               /* First argument to pass to xTableFilter */pFilterCtx171791,6143419
  int (*xTableFilter)(void *pCtx, const char *zTab);xTableFilter171792,6143498
  sqlite3_session *pNext;         /* Next session object on same db. */pNext171793,6143551
  SessionTable *pTable;           /* List of attached tables */pTable171794,6143623
  SessionHook hook;               /* APIs to grab new and old data with */hook171795,6143687
struct SessionBuffer {SessionBuffer171801,6143848
  u8 *aBuf;                       /* Pointer to changeset buffer */aBuf171802,6143871
  int nBuf;                       /* Size of buffer aBuf */nBuf171803,6143939
  int nAlloc;                     /* Size of allocation containing aBuf */nAlloc171804,6143999
struct SessionInput {SessionInput171813,6144330
  int bNoDiscard;                 /* If true, discard no data */bNoDiscard171814,6144352
  int iCurrent;                   /* Offset in aData[] of current change */iCurrent171815,6144417
  int iNext;                      /* Offset in aData[] of next change */iNext171816,6144493
  u8 *aData;                      /* Pointer to buffer containing changeset */aData171817,6144566
  int nData;                      /* Number of bytes in aData */nData171818,6144645
  SessionBuffer buf;              /* Current read buffer */buf171820,6144711
  int (*xInput)(void*, void*, int*);        /* Input stream call (or NULL) */xInput171821,6144771
  void *pIn;                                /* First argument to xInput */pIn171822,6144849
  int bEof;                       /* Set to true after xInput finished */bEof171823,6144924
struct sqlite3_changeset_iter {sqlite3_changeset_iter171829,6145046
  SessionInput in;                /* Input buffer or stream */in171830,6145078
  SessionBuffer tblhdr;           /* Buffer to hold apValue/zTab/abPK/ */tblhdr171831,6145141
  int bPatchset;                  /* True if this is a patchset */bPatchset171832,6145215
  int rc;                         /* Iterator error code */rc171833,6145282
  sqlite3_stmt *pConflict;        /* Points to conflicting row, if any */pConflict171834,6145342
  char *zTab;                     /* Current table */zTab171835,6145416
  int nCol;                       /* Number of columns in zTab */nCol171836,6145470
  int op;                         /* Current operation */op171837,6145536
  int bIndirect;                  /* True if current change was indirect */bIndirect171838,6145594
  u8 *abPK;                       /* Primary key array */abPK171839,6145670
  sqlite3_value **apValue;        /* old.* and new.* values */apValue171840,6145728
struct SessionTable {SessionTable171856,6146392
  SessionTable *pNext;pNext171857,6146414
  char *zName;                    /* Local name of table */zName171858,6146437
  int nCol;                       /* Number of columns in table zName */nCol171859,6146497
  const char **azCol;             /* Column names */azCol171860,6146570
  u8 *abPK;                       /* Array of primary key flags */abPK171861,6146623
  int nEntry;                     /* Total number of entries in hash table */nEntry171862,6146690
  int nChange;                    /* Size of apChange[] array */nChange171863,6146768
  SessionChange **apChange;       /* Hash table buckets */apChange171864,6146833
struct SessionChange {SessionChange171994,6152363
  int op;                         /* One of UPDATE, DELETE, INSERT */op171995,6152386
  int bIndirect;                  /* True if this change is "indirect" */bIndirect171996,6152456
  int nRecord;                    /* Number of bytes in buffer aRecord[] */nRecord171997,6152530
  u8 *aRecord;                    /* Buffer containing old.* record */aRecord171998,6152606
  SessionChange *pNext;           /* For hash-table collisions */pNext171999,6152677
static int sessionVarintPut(u8 *aBuf, int iVal){sessionVarintPut172006,6152852
static int sessionVarintLen(int iVal){sessionVarintLen172013,6153016
static int sessionVarintGet(u8 *aBuf, int *piVal){sessionVarintGet172021,6153182
#define SESSION_UINT32(SESSION_UINT32172026,6153324
static sqlite3_int64 sessionGetI64(u8 *aRec){sessionGetI64172032,6153497
static void sessionPutI64(u8 *aBuf, sqlite3_int64 i){sessionPutI64172042,6153729
static int sessionSerializeValue(sessionSerializeValue172066,6154541
#define HASH_APPEND(HASH_APPEND172155,6157232
static unsigned int sessionHashAppendI64(unsigned int h, i64 i){sessionHashAppendI64172161,6157463
static unsigned int sessionHashAppendBlob(unsigned int h, int n, const u8 *z){sessionHashAppendBlob172170,6157771
static unsigned int sessionHashAppendType(unsigned int h, int eType){sessionHashAppendType172180,6158070
static int sessionPreupdateHash(sessionPreupdateHash172195,6158742
static int sessionSerialLen(u8 *a){sessionSerialLen172259,6160845
static unsigned int sessionChangeHash(sessionChangeHash172277,6161459
static int sessionChangeEqual(sessionChangeEqual172326,6163146
static void sessionMergeRecord(sessionMergeRecord172369,6164759
static u8 *sessionMergeValue(sessionMergeValue172415,6166180
static int sessionMergeUpdate(sessionMergeUpdate172449,6166863
static int sessionPreupdateEqual(sessionPreupdateEqual172526,6169001
static int sessionGrowHash(int bPatchset, SessionTable *pTab){sessionGrowHash172606,6172132
static int sessionTableInfo(sessionTableInfo172670,6174323
static int sessionInitTable(sqlite3_session *pSession, SessionTable *pTab){sessionInitTable172770,6177266
static void sessionPreupdateOneChange(sessionPreupdateOneChange172798,6178135
static int sessionFindTable(sessionFindTable172919,6182303
static void xPreUpdate(xPreUpdate172955,6183305
static int sessionPreupdateOld(void *pCtx, int iVal, sqlite3_value **ppVal){sessionPreupdateOld172993,6184704
static int sessionPreupdateNew(void *pCtx, int iVal, sqlite3_value **ppVal){sessionPreupdateNew172996,6184844
static int sessionPreupdateCount(void *pCtx){sessionPreupdateCount172999,6184984
static int sessionPreupdateDepth(void *pCtx){sessionPreupdateDepth173002,6185082
static void sessionPreupdateHooks(sessionPreupdateHooks173010,6185273
typedef struct SessionDiffCtx SessionDiffCtx;SessionDiffCtx173020,6185575
struct SessionDiffCtx {SessionDiffCtx173021,6185621
  sqlite3_stmt *pStmt;pStmt173022,6185645
  int nOldOff;nOldOff173023,6185668
static int sessionDiffOld(void *pCtx, int iVal, sqlite3_value **ppVal){sessionDiffOld173029,6185727
static int sessionDiffNew(void *pCtx, int iVal, sqlite3_value **ppVal){sessionDiffNew173034,6185926
static int sessionDiffCount(void *pCtx){sessionDiffCount173039,6186115
static int sessionDiffDepth(void *pCtx){sessionDiffDepth173043,6186270
static void sessionDiffHooks(sessionDiffHooks173051,6186412
static char *sessionExprComparePK(sessionExprComparePK173062,6186713
static char *sessionExprCompareOther(sessionExprCompareOther173085,6187180
static char *sessionSelectFindNew(sessionSelectFindNew173116,6187783
static int sessionDiffFindNew(sessionDiffFindNew173132,6188207
static int sessionDiffFindModified(sessionDiffFindModified173163,6188952
SQLITE_API int sqlite3session_diff(sqlite3session_diff173203,6190016
SQLITE_API int sqlite3session_create(sqlite3session_create173297,6192464
static void sessionDeleteTable(SessionTable *pList){sessionDeleteTable173335,6193863
SQLITE_API void sqlite3session_delete(sqlite3_session *pSession){sqlite3session_delete173359,6194472
SQLITE_API void sqlite3session_table_filter(sqlite3session_table_filter173388,6195367
SQLITE_API int sqlite3session_attach(sqlite3session_attach173406,6195951
static int sessionBufferGrow(SessionBuffer *p, int nByte, int *pRc){sessionBufferGrow173458,6197803
static void sessionAppendValue(SessionBuffer *p, sqlite3_value *pVal, int *pRc){sessionAppendValue173485,6198497
static void sessionAppendByte(SessionBuffer *p, u8 v, int *pRc){sessionAppendByte173507,6199101
static void sessionAppendVarint(SessionBuffer *p, int v, int *pRc){sessionAppendVarint173520,6199469
static void sessionAppendBlob(sessionAppendBlob173533,6199866
static void sessionAppendStr(sessionAppendStr173553,6200403
static void sessionAppendInteger(sessionAppendInteger173573,6200925
static void sessionAppendIdent(sessionAppendIdent173592,6201601
static void sessionAppendCol(sessionAppendCol173617,6202414
static int sessionAppendUpdate(sessionAppendUpdate173679,6204636
static int sessionAppendDelete(sessionAppendDelete173778,6207750
static int sessionSelectStmt(sessionSelectStmt173833,6209149
static int sessionSelectBind(sessionSelectBind173876,6210620
static void sessionAppendTableHdr(sessionAppendTableHdr173947,6212369
static int sessionGenerateChangeset(sessionGenerateChangeset173970,6213382
SQLITE_API int sqlite3session_changeset(sqlite3session_changeset174096,6217893
SQLITE_API int sqlite3session_changeset_strm(sqlite3session_changeset_strm174107,6218282
SQLITE_API int sqlite3session_patchset_strm(sqlite3session_patchset_strm174118,6218562
SQLITE_API int sqlite3session_patchset(sqlite3session_patchset174133,6219007
SQLITE_API int sqlite3session_enable(sqlite3_session *pSession, int bEnable){sqlite3session_enable174144,6219411
SQLITE_API int sqlite3session_indirect(sqlite3_session *pSession, int bIndirect){sqlite3session_indirect174158,6219787
SQLITE_API int sqlite3session_isempty(sqlite3_session *pSession){sqlite3session_isempty174173,6220233
static int sessionChangesetStart(sessionChangesetStart174189,6220640
SQLITE_API int sqlite3changeset_start(sqlite3changeset_start174223,6221812
SQLITE_API int sqlite3changeset_start_strm(sqlite3changeset_start_strm174234,6222204
static void sessionDiscardData(SessionInput *pIn){sessionDiscardData174246,6222595
static int sessionInputBuffer(SessionInput *pIn, int nByte){sessionInputBuffer174266,6223230
static void sessionSkipRecord(sessionSkipRecord174294,6224073
static int sessionValueSetStr(sessionValueSetStr174320,6224810
static int sessionReadRecord(sessionReadRecord174361,6226779
static int sessionChangesetBufferTblhdr(SessionInput *pIn, int *pnByte){sessionChangesetBufferTblhdr174426,6228891
static int sessionChangesetBufferRecord(sessionChangesetBufferRecord174458,6229906
static int sessionChangesetReadTblhdr(sqlite3_changeset_iter *p){sessionChangesetReadTblhdr174502,6231411
static int sessionChangesetNext(sessionChangesetNext174548,6232960
SQLITE_API int sqlite3changeset_next(sqlite3_changeset_iter *p){sqlite3changeset_next174655,6236611
SQLITE_API int sqlite3changeset_op(sqlite3changeset_op174664,6236897
SQLITE_API int sqlite3changeset_pk(sqlite3changeset_pk174684,6237660
SQLITE_API int sqlite3changeset_old(sqlite3changeset_old174707,6238596
SQLITE_API int sqlite3changeset_new(sqlite3changeset_new174735,6239632
#define sessionChangesetNew(sessionChangesetNew174755,6240337
#define sessionChangesetOld(sessionChangesetOld174756,6240417
SQLITE_API int sqlite3changeset_conflict(sqlite3changeset_conflict174769,6240960
SQLITE_API int sqlite3changeset_fk_conflicts(sqlite3changeset_fk_conflicts174792,6241791
SQLITE_API int sqlite3changeset_finalize(sqlite3_changeset_iter *p){sqlite3changeset_finalize174810,6242275
static int sessionChangesetInvert(sessionChangesetInvert174825,6242673
SQLITE_API int sqlite3changeset_invert(sqlite3changeset_invert174984,6247688
SQLITE_API int sqlite3changeset_invert_strm(sqlite3changeset_invert_strm175003,6248296
typedef struct SessionApplyCtx SessionApplyCtx;SessionApplyCtx175022,6248751
struct SessionApplyCtx {SessionApplyCtx175023,6248799
  sqlite3 *db;db175024,6248824
  sqlite3_stmt *pDelete;          /* DELETE statement */pDelete175025,6248839
  sqlite3_stmt *pUpdate;          /* UPDATE statement */pUpdate175026,6248896
  sqlite3_stmt *pInsert;          /* INSERT statement */pInsert175027,6248953
  sqlite3_stmt *pSelect;          /* SELECT statement */pSelect175028,6249010
  int nCol;                       /* Size of azCol[] and abPK[] arrays */nCol175029,6249067
  const char **azCol;             /* Array of column names */azCol175030,6249141
  u8 *abPK;                       /* Boolean array - true if column is in PK */abPK175031,6249203
  int bDeferConstraints;          /* True to defer constraints */bDeferConstraints175033,6249284
  SessionBuffer constraints;      /* Deferred constraints are stored here */constraints175034,6249350
static int sessionDeleteRow(sessionDeleteRow175054,6250084
static int sessionUpdateRow(sessionUpdateRow175137,6252654
static int sessionSelectRow(sessionSelectRow175215,6255080
static int sessionInsertRow(sessionInsertRow175233,6255681
static int sessionBindValue(sessionBindValue175261,6256484
static int sessionBindRow(sessionBindRow175294,6258027
static int sessionSeekToRow(sessionSeekToRow175337,6259866
static int sessionConflictHandler(sessionConflictHandler175397,6262449
static int sessionApplyOneOp(sessionApplyOneOp175492,6265935
static int sessionApplyOneWithRetry(sessionApplyOneWithRetry175612,6270185
static int sessionRetryConstraints(sessionRetryConstraints175669,6272440
static int sessionChangesetApply(sessionChangesetApply175723,6274258
SQLITE_API int sqlite3changeset_apply(sqlite3changeset_apply175883,6279686
SQLITE_API int sqlite3changeset_apply_strm(sqlite3changeset_apply_strm175911,6280866
struct sqlite3_changegroup {sqlite3_changegroup175937,6281903
  int rc;                         /* Error code */rc175938,6281932
  int bPatch;                     /* True to accumulate patchsets */bPatch175939,6281983
  SessionTable *pList;            /* List of tables in current patch */pList175940,6282052
static int sessionChangeMerge(sessionChangeMerge175948,6282335
static int sessionChangesetToHash(sessionChangesetToHash176071,6286594
static int sessionChangegroupOutput(sessionChangegroupOutput176194,6290457
SQLITE_API int sqlite3changegroup_new(sqlite3_changegroup **pp){sqlite3changegroup_new176246,6291804
SQLITE_API int sqlite3changegroup_add(sqlite3_changegroup *pGrp, int nData, void *pData){sqlite3changegroup_add176263,6292273
SQLITE_API int sqlite3changegroup_output(sqlite3changegroup_output176279,6292792
SQLITE_API int sqlite3changegroup_add_strm(sqlite3changegroup_add_strm176290,6293019
SQLITE_API int sqlite3changegroup_output_strm(sqlite3changegroup_output_strm176309,6293520
SQLITE_API void sqlite3changegroup_delete(sqlite3_changegroup *pGrp){sqlite3changegroup_delete176320,6293776
SQLITE_API int sqlite3changeset_concat(sqlite3changeset_concat176330,6293971
SQLITE_API int sqlite3changeset_concat_strm(sqlite3changeset_concat_strm176359,6294863
# define UNUSED_PARAM(UNUSED_PARAM176425,6296980
# define LARGEST_INT64 LARGEST_INT64176429,6297046
# define SMALLEST_INT64 SMALLEST_INT64176430,6297117
#  define safe_isdigit(safe_isdigit176440,6297411
#  define safe_isalnum(safe_isalnum176441,6297456
#  define safe_isxdigit(safe_isxdigit176442,6297501
static const char jsonIsSpace[] = {jsonIsSpace176456,6298042
#define safe_isspace(safe_isspace176474,6298945
  typedef sqlite3_uint64 u64;u64176479,6299180
  typedef unsigned int u32;u32176480,6299210
  typedef unsigned char u8;u8176481,6299238
typedef struct JsonString JsonString;JsonString176485,6299288
typedef struct JsonNode JsonNode;JsonNode176486,6299326
typedef struct JsonParse JsonParse;JsonParse176487,6299360
struct JsonString {JsonString176493,6299586
  sqlite3_context *pCtx;   /* Function context - put error messages here */pCtx176494,6299606
  char *zBuf;              /* Append JSON content here */zBuf176495,6299682
  u64 nAlloc;              /* Bytes of storage available in zBuf[] */nAlloc176496,6299740
  u64 nUsed;               /* Bytes of zBuf[] currently used */nUsed176497,6299810
  u8 bStatic;              /* True if zBuf is static space */bStatic176498,6299874
  u8 bErr;                 /* True if an error has been encountered */bErr176499,6299936
  char zSpace[100];        /* Initial static space */zSpace176500,6300007
#define JSON_NULL JSON_NULL176505,6300088
#define JSON_TRUE JSON_TRUE176506,6300112
#define JSON_FALSE JSON_FALSE176507,6300136
#define JSON_INT JSON_INT176508,6300160
#define JSON_REAL JSON_REAL176509,6300184
#define JSON_STRING JSON_STRING176510,6300208
#define JSON_ARRAY JSON_ARRAY176511,6300232
#define JSON_OBJECT JSON_OBJECT176512,6300256
#define JSON_SUBTYPE JSON_SUBTYPE176515,6300321
static const char * const jsonType[] = {jsonType176520,6300412
#define JNODE_RAW JNODE_RAW176526,6300576
#define JNODE_ESCAPE JNODE_ESCAPE176527,6300650
#define JNODE_REMOVE JNODE_REMOVE176528,6300722
#define JNODE_REPLACE JNODE_REPLACE176529,6300777
#define JNODE_APPEND JNODE_APPEND176530,6300845
#define JNODE_LABEL JNODE_LABEL176531,6300925
struct JsonNode {JsonNode176536,6301027
  u8 eType;              /* One of the JSON_ type values */eType176537,6301045
  u8 jnFlags;            /* JNODE flags */jnFlags176538,6301105
  u8 iVal;               /* Replacement value when JNODE_REPLACE */iVal176539,6301148
  u32 n;                 /* Bytes of content, or number of sub-nodes */n176540,6301216
    const char *zJContent; /* Content for INT, REAL, and STRING */zJContent176542,6301298
    u32 iAppend;           /* More terms for ARRAY and OBJECT */iAppend176543,6301365
    u32 iKey;              /* Key for ARRAY objects in json_tree() */iKey176544,6301430
  } u;u176545,6301500
struct JsonParse {JsonParse176550,6301549
  u32 nNode;         /* Number of slots of aNode[] used */nNode176551,6301568
  u32 nAlloc;        /* Number of slots of aNode[] allocated */nAlloc176552,6301627
  JsonNode *aNode;   /* Array of nodes containing the parse */aNode176553,6301691
  const char *zJson; /* Original JSON string */zJson176554,6301754
  u32 *aUp;          /* Index of parent of each node */aUp176555,6301802
  u8 oom;            /* Set to true if out of memory */oom176556,6301858
  u8 nErr;           /* Number of errors seen */nErr176557,6301914
static void jsonZero(JsonString *p){jsonZero176566,6302227
static void jsonInit(JsonString *p, sqlite3_context *pCtx){jsonInit176575,6302396
static void jsonReset(JsonString *p){jsonReset176585,6302602
static void jsonOom(JsonString *p){jsonOom176593,6302749
static int jsonGrow(JsonString *p, u32 N){jsonGrow176602,6302987
static void jsonAppendRaw(JsonString *p, const char *zIn, u32 N){jsonAppendRaw176629,6303607
static void jsonPrintf(int N, JsonString *p, const char *zFormat, ...){jsonPrintf176637,6303862
static void jsonAppendChar(JsonString *p, char c){jsonAppendChar176648,6304184
static void jsonAppendSeparator(JsonString *p){jsonAppendSeparator176656,6304422
static void jsonAppendString(JsonString *p, const char *zIn, u32 N){jsonAppendString176668,6304801
static void jsonAppendValue(jsonAppendValue176711,6306206
static void jsonResult(JsonString *p){jsonResult176751,6307235
static u32 jsonNodeSize(JsonNode *pNode){jsonNodeSize176774,6308087
static void jsonParseReset(JsonParse *pParse){jsonParseReset176782,6308296
static void jsonRenderNode(jsonRenderNode176796,6308667
static void jsonReturnJson(jsonReturnJson176880,6311017
static void jsonReturn(jsonReturn176895,6311435
#  define JSON_NOINLINE JSON_NOINLINE177041,6315729
#  define JSON_NOINLINE JSON_NOINLINE177043,6315822
#  define JSON_NOINLINEJSON_NOINLINE177045,6315874
static JSON_NOINLINE int jsonParseAddNodeExpand(jsonParseAddNodeExpand177049,6315907
static int jsonParseAddNode(jsonParseAddNode177076,6316783
static int jsonIs4Hex(const char *z){jsonIs4Hex177098,6317387
static int jsonParseValue(JsonParse *pParse, u32 i){jsonParseValue177112,6317834
static int jsonParse(jsonParse177258,6322079
static void jsonParseFillInParentage(JsonParse *pParse, u32 i, u32 iParent){jsonParseFillInParentage177290,6322916
static int jsonParseFindParents(JsonParse *pParse){jsonParseFindParents177317,6323553
static int jsonLabelCompare(JsonNode *pNode, const char *zKey, u32 nKey){jsonLabelCompare177333,6323933
static JsonNode *jsonLookupStep(jsonLookupStep177355,6324692
static JsonNode *jsonLookupAppend(jsonLookupAppend177468,6327884
static char *jsonPathSyntaxError(const char *zErr){jsonPathSyntaxError177494,6328719
static JsonNode *jsonLookup(jsonLookup177508,6329163
static void jsonWrongNumArgs(jsonWrongNumArgs177545,6330033
static void jsonParseFunc(jsonParseFunc177566,6330687
static void jsonTest1Func(jsonTest1Func177604,6331753
static void jsonQuoteFunc(jsonQuoteFunc177624,6332412
static void jsonArrayFunc(jsonArrayFunc177643,6332845
static void jsonArrayLengthFunc(jsonArrayLengthFunc177670,6333392
static void jsonExtractFunc(jsonExtractFunc177708,6334387
static void jsonObjectFunc(jsonObjectFunc177752,6335508
static void jsonRemoveFunc(jsonRemoveFunc177794,6336536
static void jsonReplaceFunc(jsonReplaceFunc177827,6337413
static void jsonSetFunc(jsonSetFunc177874,6338653
static void jsonTypeFunc(jsonTypeFunc177923,6339871
static void jsonValidFunc(jsonValidFunc177952,6340527
static void jsonArrayStep(jsonArrayStep177977,6341135
static void jsonArrayFinal(sqlite3_context *ctx){jsonArrayFinal177996,6341550
static void jsonObjectStep(jsonObjectStep178021,6342259
static void jsonObjectFinal(sqlite3_context *ctx){jsonObjectFinal178046,6342859
typedef struct JsonEachCursor JsonEachCursor;JsonEachCursor178070,6343654
struct JsonEachCursor {JsonEachCursor178071,6343700
  sqlite3_vtab_cursor base;  /* Base class - must be first */base178072,6343724
  u32 iRowid;                /* The rowid */iRowid178073,6343786
  u32 iBegin;                /* The first node of the scan */iBegin178074,6343831
  u32 i;                     /* Index in sParse.aNode[] of current row */i178075,6343893
  u32 iEnd;                  /* EOF when i equals or exceeds this value */iEnd178076,6343967
  u8 eType;                  /* Type of top-level element */eType178077,6344042
  u8 bRecursive;             /* True for json_tree().  False for json_each() */bRecursive178078,6344103
  char *zJson;               /* Input JSON */zJson178079,6344183
  char *zRoot;               /* Path by which to filter zJson */zRoot178080,6344229
  JsonParse sParse;          /* Parse of the input JSON */sParse178081,6344294
static int jsonEachConnect(jsonEachConnect178085,6344407
#define JEACH_KEY JEACH_KEY178096,6344597
#define JEACH_VALUE JEACH_VALUE178097,6344621
#define JEACH_TYPE JEACH_TYPE178098,6344645
#define JEACH_ATOM JEACH_ATOM178099,6344669
#define JEACH_ID JEACH_ID178100,6344693
#define JEACH_PARENT JEACH_PARENT178101,6344717
#define JEACH_FULLKEY JEACH_FULLKEY178102,6344741
#define JEACH_PATH JEACH_PATH178103,6344765
#define JEACH_JSON JEACH_JSON178104,6344789
#define JEACH_ROOT JEACH_ROOT178105,6344813
static int jsonEachDisconnect(sqlite3_vtab *pVtab){jsonEachDisconnect178123,6345292
static int jsonEachOpenEach(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){jsonEachOpenEach178129,6345453
static int jsonEachOpenTree(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){jsonEachOpenTree178141,6345801
static void jsonEachCursorReset(JsonEachCursor *p){jsonEachCursorReset178152,6346128
static int jsonEachClose(sqlite3_vtab_cursor *cur){jsonEachClose178165,6346402
static int jsonEachEof(sqlite3_vtab_cursor *cur){jsonEachEof178174,6346667
static int jsonEachNext(sqlite3_vtab_cursor *cur){jsonEachNext178180,6346851
static void jsonEachComputePath(jsonEachComputePath178221,6347788
static int jsonEachColumn(jsonEachColumn178248,6348581
static int jsonEachRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){jsonEachRowid178346,6351319
static int jsonEachBestIndex(jsonEachBestIndex178357,6351728
static int jsonEachFilter(jsonEachFilter178396,6352833
static sqlite3_module jsonEachModule = {jsonEachModule178475,6355163
static sqlite3_module jsonTreeModule = {jsonTreeModule178502,6356388
SQLITE_PRIVATE int sqlite3Json1Init(sqlite3 *db){sqlite3Json1Init178535,6357972
__declspec(dllexport)__declspec178605,6360706
# define NDEBUG NDEBUG178626,6361294
# undef NDEBUGNDEBUG178629,6361364
#define _FTS5_H_FTS5_H178653,6361961
typedef struct Fts5ExtensionApi Fts5ExtensionApi;Fts5ExtensionApi178668,6362267
typedef struct Fts5Context Fts5Context;Fts5Context178669,6362317
typedef struct Fts5PhraseIter Fts5PhraseIter;Fts5PhraseIter178670,6362357
typedef void (*fts5_extension_function)(fts5_extension_function178672,6362404
struct Fts5PhraseIter {Fts5PhraseIter178680,6362817
  const unsigned char *a;a178681,6362841
  const unsigned char *b;b178682,6362867
struct Fts5ExtensionApi {Fts5ExtensionApi178900,6372528
  int iVersion;                   /* Currently always set to 3 */iVersion178901,6372554
  void *(*xUserData)(Fts5Context*);xUserData178903,6372621
  int (*xColumnCount)(Fts5Context*);xColumnCount178905,6372658
  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);xRowCount178906,6372695
  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);xColumnTotalSize178907,6372751
  int (*xTokenize)(Fts5Context*, xTokenize178909,6372827
  int (*xPhraseCount)(Fts5Context*);xPhraseCount178915,6373070
  int (*xPhraseSize)(Fts5Context*, int iPhrase);xPhraseSize178916,6373107
  int (*xInstCount)(Fts5Context*, int *pnInst);xInstCount178918,6373157
  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);xInst178919,6373205
  sqlite3_int64 (*xRowid)(Fts5Context*);xRowid178921,6373285
  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);xColumnText178922,6373326
  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);xColumnSize178923,6373398
  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,xQueryPhrase178925,6373459
  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));xSetAuxdata178928,6373585
  void *(*xGetAuxdata)(Fts5Context*, int bClear);xGetAuxdata178929,6373656
  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);xPhraseFirst178931,6373707
  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);xPhraseNext178932,6373786
  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);xPhraseFirstColumn178934,6373865
  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);xPhraseNextColumn178935,6373944
typedef struct Fts5Tokenizer Fts5Tokenizer;Fts5Tokenizer179134,6384243
typedef struct fts5_tokenizer fts5_tokenizer;fts5_tokenizer179135,6384287
struct fts5_tokenizer {fts5_tokenizer179136,6384333
  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);xCreate179137,6384357
  void (*xDelete)(Fts5Tokenizer*);xDelete179138,6384435
  int (*xTokenize)(Fts5Tokenizer*, xTokenize179139,6384470
#define FTS5_TOKENIZE_QUERY FTS5_TOKENIZE_QUERY179155,6385141
#define FTS5_TOKENIZE_PREFIX FTS5_TOKENIZE_PREFIX179156,6385180
#define FTS5_TOKENIZE_DOCUMENT FTS5_TOKENIZE_DOCUMENT179157,6385219
#define FTS5_TOKENIZE_AUX FTS5_TOKENIZE_AUX179158,6385258
#define FTS5_TOKEN_COLOCATED FTS5_TOKEN_COLOCATED179162,6385432
typedef struct fts5_api fts5_api;fts5_api179171,6385732
struct fts5_api {fts5_api179172,6385766
  int iVersion;                   /* Currently always set to 2 */iVersion179173,6385784
  int (*xCreateTokenizer)(xCreateTokenizer179176,6385882
  int (*xFindTokenizer)(xFindTokenizer179185,6386073
  int (*xCreateFunction)(xCreateFunction179193,6386240
#define _FTS5INT_H_FTS5INT_H179226,6386985
typedef unsigned char  u8;u8179237,6387165
typedef unsigned int   u32;u32179238,6387192
typedef unsigned short u16;u16179239,6387220
typedef short i16;i16179240,6387248
typedef sqlite3_int64 i64;i64179241,6387267
typedef sqlite3_uint64 u64;u64179242,6387294
#define ArraySize(ArraySize179244,6387323
#define testcase(testcase179246,6387379
#define ALWAYS(ALWAYS179247,6387399
#define NEVER(NEVER179248,6387419
#define MIN(MIN179250,6387439
#define MAX(MAX179251,6387482
# define LARGEST_INT64 LARGEST_INT64179256,6387607
# define SMALLEST_INT64 SMALLEST_INT64179257,6387668
#define FTS5_MAX_TOKEN_SIZE FTS5_MAX_TOKEN_SIZE179264,6387942
#define FTS5_MAX_PREFIX_INDEXES FTS5_MAX_PREFIX_INDEXES179271,6388182
#define FTS5_DEFAULT_NEARDIST FTS5_DEFAULT_NEARDIST179273,6388218
#define FTS5_DEFAULT_RANK FTS5_DEFAULT_RANK179274,6388251
#define FTS5_RANK_NAME FTS5_RANK_NAME179277,6388326
#define FTS5_ROWID_NAME FTS5_ROWID_NAME179278,6388356
# define FTS5_CORRUPT FTS5_CORRUPT179281,6388409
# define FTS5_CORRUPT FTS5_CORRUPT179284,6388495
# define assert_nc(assert_nc179294,6388811
# define assert_nc(assert_nc179296,6388882
# define UNUSED_PARAM(UNUSED_PARAM179302,6389029
# define UNUSED_PARAM2(UNUSED_PARAM2179306,6389095
typedef struct Fts5Global Fts5Global;Fts5Global179309,6389154
typedef struct Fts5Colset Fts5Colset;Fts5Colset179310,6389192
struct Fts5Colset {Fts5Colset179318,6389513
  int nCol;nCol179319,6389533
  int aiCol[1];aiCol179320,6389545
typedef struct Fts5Config Fts5Config;Fts5Config179330,6389795
struct Fts5Config {Fts5Config179367,6391003
  sqlite3 *db;                    /* Database handle */db179368,6391023
  char *zDb;                      /* Database holding FTS index (e.g. "main") */zDb179369,6391079
  char *zName;                    /* Name of FTS index */zName179370,6391160
  int nCol;                       /* Number of columns */nCol179371,6391218
  char **azCol;                   /* Column names */azCol179372,6391276
  u8 *abUnindexed;                /* True for unindexed columns */abUnindexed179373,6391329
  int nPrefix;                    /* Number of prefix indexes */nPrefix179374,6391396
  int *aPrefix;                   /* Sizes in bytes of nPrefix prefix indexes */aPrefix179375,6391461
  int eContent;                   /* An FTS5_CONTENT value */eContent179376,6391542
  char *zContent;                 /* content table */ zContent179377,6391604
  char *zContentRowid;            /* "content_rowid=" option value */ zContentRowid179378,6391659
  int bColumnsize;                /* "columnsize=" option value (dflt==1) */bColumnsize179379,6391730
  int eDetail;                    /* FTS5_DETAIL_XXX value */eDetail179380,6391807
  char *zContentExprlist;zContentExprlist179381,6391869
  Fts5Tokenizer *pTok;pTok179382,6391895
  fts5_tokenizer *pTokApi;pTokApi179383,6391918
  int iCookie;                    /* Incremented when %_config is modified */iCookie179386,6391992
  int pgsz;                       /* Approximate page size used in %_data */pgsz179387,6392070
  int nAutomerge;                 /* 'automerge' setting */nAutomerge179388,6392147
  int nCrisisMerge;               /* Maximum allowed segments per level */nCrisisMerge179389,6392207
  int nUsermerge;                 /* 'usermerge' setting */nUsermerge179390,6392282
  int nHashSize;                  /* Bytes of memory for in-memory hash */nHashSize179391,6392342
  char *zRank;                    /* Name of rank function */zRank179392,6392417
  char *zRankArgs;                /* Arguments to rank function */zRankArgs179393,6392479
  char **pzErrmsg;pzErrmsg179396,6392617
  int bPrefixIndex;               /* True to use prefix-indexes */bPrefixIndex179399,6392657
#define FTS5_CURRENT_VERSION FTS5_CURRENT_VERSION179404,6392798
#define FTS5_CONTENT_NORMAL FTS5_CONTENT_NORMAL179406,6392830
#define FTS5_CONTENT_NONE FTS5_CONTENT_NONE179407,6392862
#define FTS5_CONTENT_EXTERNAL FTS5_CONTENT_EXTERNAL179408,6392894
#define FTS5_DETAIL_FULL FTS5_DETAIL_FULL179410,6392927
#define FTS5_DETAIL_NONE FTS5_DETAIL_NONE179411,6392957
#define FTS5_DETAIL_COLUMNS FTS5_DETAIL_COLUMNS179412,6392987
typedef struct Fts5Buffer Fts5Buffer;Fts5Buffer179452,6394259
struct Fts5Buffer {Fts5Buffer179453,6394297
  u8 *p;p179454,6394317
  int n;n179455,6394326
  int nSpace;nSpace179456,6394335
#define fts5BufferZero(fts5BufferZero179470,6394943
#define fts5BufferAppendVarint(fts5BufferAppendVarint179471,6395006
#define fts5BufferFree(fts5BufferFree179472,6395081
#define fts5BufferAppendBlob(fts5BufferAppendBlob179473,6395144
#define fts5BufferSet(fts5BufferSet179474,6395219
#define fts5BufferGrow(fts5BufferGrow179476,6395288
#define FTS5_POS2COLUMN(FTS5_POS2COLUMN179485,6395589
#define FTS5_POS2OFFSET(FTS5_POS2OFFSET179486,6395637
typedef struct Fts5PoslistReader Fts5PoslistReader;Fts5PoslistReader179488,6395693
struct Fts5PoslistReader {Fts5PoslistReader179489,6395745
  const u8 *a;                    /* Position list to iterate through */a179491,6395842
  int n;                          /* Size of buffer at a[] in bytes */n179492,6395915
  int i;                          /* Current offset in a[] */i179493,6395986
  u8 bFlag;                       /* For client use (any custom purpose) */bFlag179495,6396049
  u8 bEof;                        /* Set to true at EOF */bEof179498,6396151
  i64 iPos;                       /* (iCol<<32) + iPos */iPos179499,6396210
typedef struct Fts5PoslistWriter Fts5PoslistWriter;Fts5PoslistWriter179507,6396521
struct Fts5PoslistWriter {Fts5PoslistWriter179508,6396573
  i64 iPrev;iPrev179509,6396600
typedef struct Fts5Termset Fts5Termset;Fts5Termset179529,6397327
typedef struct Fts5Index Fts5Index;Fts5Index179543,6397884
typedef struct Fts5IndexIter Fts5IndexIter;Fts5IndexIter179544,6397920
struct Fts5IndexIter {Fts5IndexIter179546,6397965
  i64 iRowid;iRowid179547,6397988
  const u8 *pData;pData179548,6398002
  int nData;nData179549,6398021
  u8 bEof;bEof179550,6398034
#define sqlite3Fts5IterEof(sqlite3Fts5IterEof179553,6398049
#define FTS5INDEX_QUERY_PREFIX FTS5INDEX_QUERY_PREFIX179558,6398167
#define FTS5INDEX_QUERY_DESC FTS5INDEX_QUERY_DESC179559,6398230
#define FTS5INDEX_QUERY_TEST_NOIDX FTS5INDEX_QUERY_TEST_NOIDX179560,6398311
#define FTS5INDEX_QUERY_SCAN FTS5INDEX_QUERY_SCAN179561,6398385
#define FTS5INDEX_QUERY_SKIPEMPTY FTS5INDEX_QUERY_SKIPEMPTY179566,6398617
#define FTS5INDEX_QUERY_NOOUTPUT FTS5INDEX_QUERY_NOOUTPUT179567,6398659
#define fts5GetVarint32(fts5GetVarint32179714,6403443
#define fts5GetVarint fts5GetVarint179715,6403507
#define fts5FastGetVarint32(fts5FastGetVarint32179717,6403554
typedef struct Fts5Hash Fts5Hash;Fts5Hash179753,6404569
#define FTS5_STMT_SCAN_ASC FTS5_STMT_SCAN_ASC179804,6406363
#define FTS5_STMT_SCAN_DESC FTS5_STMT_SCAN_DESC179805,6406443
#define FTS5_STMT_LOOKUP FTS5_STMT_LOOKUP179806,6406524
typedef struct Fts5Storage Fts5Storage;Fts5Storage179808,6406604
typedef struct Fts5Expr Fts5Expr;Fts5Expr179851,6408421
typedef struct Fts5ExprNode Fts5ExprNode;Fts5ExprNode179852,6408455
typedef struct Fts5Parse Fts5Parse;Fts5Parse179853,6408497
typedef struct Fts5Token Fts5Token;Fts5Token179854,6408533
typedef struct Fts5ExprPhrase Fts5ExprPhrase;Fts5ExprPhrase179855,6408569
typedef struct Fts5ExprNearset Fts5ExprNearset;Fts5ExprNearset179856,6408615
struct Fts5Token {Fts5Token179858,6408664
  const char *p;                  /* Token text (not NULL terminated) */p179859,6408683
  int n;                          /* Size of buffer p in bytes */n179860,6408756
typedef struct Fts5PoslistPopulator Fts5PoslistPopulator;Fts5PoslistPopulator179894,6409806
#define FTS5_OR FTS5_OR180002,6413179
#define FTS5_AND FTS5_AND180003,6413227
#define FTS5_NOT FTS5_NOT180004,6413275
#define FTS5_TERM FTS5_TERM180005,6413323
#define FTS5_COLON FTS5_COLON180006,6413371
#define FTS5_LP FTS5_LP180007,6413419
#define FTS5_RP FTS5_RP180008,6413467
#define FTS5_MINUS FTS5_MINUS180009,6413515
#define FTS5_LCP FTS5_LCP180010,6413563
#define FTS5_RCP FTS5_RCP180011,6413611
#define FTS5_STRING FTS5_STRING180012,6413659
#define FTS5_COMMA FTS5_COMMA180013,6413707
#define FTS5_PLUS FTS5_PLUS180014,6413755
#define FTS5_STAR FTS5_STAR180015,6413803
#define fts5YYNOERRORRECOVERY fts5YYNOERRORRECOVERY180051,6415090
#define fts5yytestcase(fts5yytestcase180056,6415177
#define fts5YYPARSEFREENOTNULL fts5YYPARSEFREENOTNULL180062,6415304
#define fts5YYMALLOCARGTYPE fts5YYMALLOCARGTYPE180068,6415470
# define INTERFACE INTERFACE180125,6419254
#define fts5YYCODETYPE fts5YYCODETYPE180128,6419363
#define fts5YYNOCODE fts5YYNOCODE180129,6419400
#define fts5YYACTIONTYPE fts5YYACTIONTYPE180130,6419424
#define sqlite3Fts5ParserFTS5TOKENTYPE sqlite3Fts5ParserFTS5TOKENTYPE180131,6419463
  int fts5yyinit;fts5yyinit180133,6419528
  sqlite3Fts5ParserFTS5TOKENTYPE fts5yy0;fts5yy0180134,6419546
  int fts5yy4;fts5yy4180135,6419588
  Fts5Colset* fts5yy11;fts5yy11180136,6419603
  Fts5ExprNode* fts5yy24;fts5yy24180137,6419627
  Fts5ExprNearset* fts5yy46;fts5yy46180138,6419653
  Fts5ExprPhrase* fts5yy53;fts5yy53180139,6419682
} fts5YYMINORTYPE;fts5YYMINORTYPE180140,6419710
#define fts5YYSTACKDEPTH fts5YYSTACKDEPTH180142,6419754
#define sqlite3Fts5ParserARG_SDECL sqlite3Fts5ParserARG_SDECL180144,6419790
#define sqlite3Fts5ParserARG_PDECL sqlite3Fts5ParserARG_PDECL180145,6419844
#define sqlite3Fts5ParserARG_FETCH sqlite3Fts5ParserARG_FETCH180146,6419898
#define sqlite3Fts5ParserARG_STORE sqlite3Fts5ParserARG_STORE180147,6419975
#define fts5YYNSTATE fts5YYNSTATE180148,6420041
#define fts5YYNRULE fts5YYNRULE180149,6420077
#define fts5YY_MAX_SHIFT fts5YY_MAX_SHIFT180150,6420113
#define fts5YY_MIN_SHIFTREDUCE fts5YY_MIN_SHIFTREDUCE180151,6420149
#define fts5YY_MAX_SHIFTREDUCE fts5YY_MAX_SHIFTREDUCE180152,6420185
#define fts5YY_MIN_REDUCE fts5YY_MIN_REDUCE180153,6420221
#define fts5YY_MAX_REDUCE fts5YY_MAX_REDUCE180154,6420257
#define fts5YY_ERROR_ACTION fts5YY_ERROR_ACTION180155,6420293
#define fts5YY_ACCEPT_ACTION fts5YY_ACCEPT_ACTION180156,6420329
#define fts5YY_NO_ACTION fts5YY_NO_ACTION180157,6420365
# define fts5yytestcase(fts5yytestcase180169,6420846
#define fts5YY_ACTTAB_COUNT fts5YY_ACTTAB_COUNT180229,6423686
static const fts5YYACTIONTYPE fts5yy_action[] = {fts5yy_action180230,6423719
static const fts5YYCODETYPE fts5yy_lookahead[] = {fts5yy_lookahead180241,6424408
#define fts5YY_SHIFT_USE_DFLT fts5YY_SHIFT_USE_DFLT180252,6425098
#define fts5YY_SHIFT_COUNT fts5YY_SHIFT_COUNT180253,6425133
#define fts5YY_SHIFT_MIN fts5YY_SHIFT_MIN180254,6425168
#define fts5YY_SHIFT_MAX fts5YY_SHIFT_MAX180255,6425202
static const unsigned char fts5yy_shift_ofst[] = {fts5yy_shift_ofst180256,6425237
#define fts5YY_REDUCE_USE_DFLT fts5YY_REDUCE_USE_DFLT180261,6425507
#define fts5YY_REDUCE_COUNT fts5YY_REDUCE_COUNT180262,6425544
#define fts5YY_REDUCE_MIN fts5YY_REDUCE_MIN180263,6425577
#define fts5YY_REDUCE_MAX fts5YY_REDUCE_MAX180264,6425611
static const signed char fts5yy_reduce_ofst[] = {fts5yy_reduce_ofst180265,6425644
static const fts5YYACTIONTYPE fts5yy_default[] = {fts5yy_default180269,6425815
static const fts5YYCODETYPE fts5yyFallback[] = {fts5yyFallback180291,6426777
struct fts5yyStackEntry {fts5yyStackEntry180311,6427503
  fts5YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */stateno180312,6427529
  fts5YYCODETYPE major;      /* The major token value.  This is the codemajor180313,6427614
  fts5YYMINORTYPE minor;     /* The user-supplied minor token value.  Thisminor180315,6427759
typedef struct fts5yyStackEntry fts5yyStackEntry;fts5yyStackEntry180318,6427895
struct fts5yyParser {fts5yyParser180322,6428045
  fts5yyStackEntry *fts5yytos;          /* Pointer to top element of the stack */fts5yytos180323,6428067
  int fts5yyhwm;                    /* High-water mark of the stack */fts5yyhwm180325,6428181
  int fts5yyerrcnt;                 /* Shifts left before out of the error */fts5yyerrcnt180328,6428289
  int fts5yystksz;                  /* Current side of the stack */fts5yystksz180332,6428480
  fts5yyStackEntry *fts5yystack;        /* The parser's stack */fts5yystack180333,6428548
  fts5yyStackEntry fts5yystk0;          /* First stack entry */fts5yystk0180334,6428613
typedef struct fts5yyParser fts5yyParser;fts5yyParser180339,6428769
static FILE *fts5yyTraceFILE = 0;fts5yyTraceFILE180343,6428852
static char *fts5yyTracePrompt = 0;fts5yyTracePrompt180344,6428886
static void sqlite3Fts5ParserTrace(FILE *TraceFILE, char *zTracePrompt){sqlite3Fts5ParserTrace180365,6429434
static const char *const fts5yyTokenName[] = { fts5yyTokenName180376,6429846
static const char *const fts5yyRuleName[] = {fts5yyRuleName180390,6430470
static int fts5yyGrowStack(fts5yyParser *p){fts5yyGrowStack180426,6431702
# define fts5YYMALLOCARGTYPE fts5YYMALLOCARGTYPE180460,6432688
static void *sqlite3Fts5ParserAlloc(void *(*mallocProc)(fts5YYMALLOCARGTYPE)){sqlite3Fts5ParserAlloc180475,6433058
static void fts5yy_destructor(fts5yy_destructor180508,6434190
static void fts5yy_pop_parser_stack(fts5yyParser *pParser){fts5yy_pop_parser_stack180566,6435892
static void sqlite3Fts5ParserFree(sqlite3Fts5ParserFree180589,6436662
static int sqlite3Fts5ParserStackPeak(void *p){sqlite3Fts5ParserStackPeak180608,6437259
static unsigned int fts5yy_find_shift_action(fts5yy_find_shift_action180618,6437491
static int fts5yy_find_reduce_action(fts5yy_find_reduce_action180681,6439426
static void fts5yyStackOverflow(fts5yyParser *fts5yypParser){fts5yyStackOverflow180711,6440213
static void fts5yyTraceShift(fts5yyParser *fts5yypParser, int fts5yyNewState){fts5yyTraceShift180733,6441043
# define fts5yyTraceShift(fts5yyTraceShift180746,6441508
static void fts5yy_shift(fts5yy_shift180752,6441580
  fts5YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */lhs180793,6443089
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */nrhs180794,6443166
} fts5yyRuleInfo[] = {fts5yyRuleInfo180795,6443244
static void fts5yy_reduce(fts5yy_reduce180830,6443770
static void fts5yy_parse_failed(fts5yy_parse_failed181040,6452230
static void fts5yy_syntax_error(fts5yy_syntax_error181061,6453013
#define FTS5TOKEN FTS5TOKEN181067,6453307
static void fts5yy_accept(fts5yy_accept181081,6453816
static void sqlite3Fts5Parser(sqlite3Fts5Parser181120,6455156
typedef struct CInstIter CInstIter;CInstIter181313,6462270
struct CInstIter {CInstIter181314,6462306
  const Fts5ExtensionApi *pApi;   /* API offered by current FTS version */pApi181315,6462325
  Fts5Context *pFts;              /* First arg to pass to pApi functions */pFts181316,6462400
  int iCol;                       /* Column to search */iCol181317,6462476
  int iInst;                      /* Next phrase instance index */iInst181318,6462533
  int nInst;                      /* Total number of phrase instances */nInst181319,6462600
  int iStart;                     /* First token in coalesced phrase instance */iStart181322,6462699
  int iEnd;                       /* Last token in coalesced phrase instance */iEnd181323,6462780
static int fts5CInstIterNext(CInstIter *pIter){fts5CInstIterNext181330,6463008
static int fts5CInstIterInit(fts5CInstIterInit181361,6463819
typedef struct HighlightContext HighlightContext;HighlightContext181387,6464298
struct HighlightContext {HighlightContext181388,6464348
  CInstIter iter;                 /* Coalesced Instance Iterator */iter181389,6464374
  int iPos;                       /* Current token offset in zIn[] */iPos181390,6464442
  int iRangeStart;                /* First token to include */iRangeStart181391,6464512
  int iRangeEnd;                  /* If non-zero, last token to include */iRangeEnd181392,6464575
  const char *zOpen;              /* Opening highlight */zOpen181393,6464650
  const char *zClose;             /* Closing highlight */zClose181394,6464708
  const char *zIn;                /* Input text */zIn181395,6464766
  int nIn;                        /* Size of input text in bytes */nIn181396,6464817
  int iOff;                       /* Current offset within zIn[] */iOff181397,6464885
  char *zOut;                     /* Output value */zOut181398,6464953
static void fts5HighlightAppend(fts5HighlightAppend181410,6465443
static int fts5HighlightCb(fts5HighlightCb181425,6465779
static void fts5HighlightFunction(fts5HighlightFunction181479,6467422
typedef struct Fts5SFinder Fts5SFinder;Fts5SFinder181528,6468981
struct Fts5SFinder {Fts5SFinder181529,6469021
  int iPos;                       /* Current token position */iPos181530,6469042
  int nFirstAlloc;                /* Allocated size of aFirst[] */nFirstAlloc181531,6469105
  int nFirst;                     /* Number of entries in aFirst[] */nFirst181532,6469172
  int *aFirst;                    /* Array of first token in each sentence */aFirst181533,6469242
  const char *zDoc;               /* Document being tokenized */zDoc181534,6469320
static int fts5SentenceFinderAdd(Fts5SFinder *p, int iAdd){fts5SentenceFinderAdd181542,6469549
static int fts5SentenceFinderCb(fts5SentenceFinderCb181561,6470158
static int fts5SnippetScore(fts5SnippetScore181594,6471136
static void fts5SnippetFunction(fts5SnippetFunction181640,6472516
typedef struct Fts5Bm25Data Fts5Bm25Data;Fts5Bm25Data181796,6477803
struct Fts5Bm25Data {Fts5Bm25Data181797,6477845
  int nPhrase;                    /* Number of phrases in query */nPhrase181798,6477867
  double avgdl;                   /* Average number of tokens in each row */avgdl181799,6477934
  double *aIDF;                   /* IDF for each phrase */aIDF181800,6478011
  double *aFreq;                  /* Array used to calculate phrase freq. */aFreq181801,6478071
static int fts5CountCb(fts5CountCb181808,6478292
static int fts5Bm25GetData(fts5Bm25GetData181824,6478722
static void fts5Bm25Function(fts5Bm25Function181896,6481243
static int sqlite3Fts5AuxInit(fts5_api *pApi){sqlite3Fts5AuxInit181954,6483480
static int sqlite3Fts5BufferSize(int *pRc, Fts5Buffer *pBuf, u32 nByte){sqlite3Fts5BufferSize181999,6484740
static void sqlite3Fts5BufferAppendVarint(int *pRc, Fts5Buffer *pBuf, i64 iVal){sqlite3Fts5BufferAppendVarint182023,6485294
static void sqlite3Fts5Put32(u8 *aBuf, int iVal){sqlite3Fts5Put32182028,6485483
static int sqlite3Fts5Get32(const u8 *aBuf){sqlite3Fts5Get32182035,6485668
static void sqlite3Fts5BufferAppendBlob(sqlite3Fts5BufferAppendBlob182044,6485972
static void sqlite3Fts5BufferAppendString(sqlite3Fts5BufferAppendString182061,6486441
static void sqlite3Fts5BufferAppendPrintf(sqlite3Fts5BufferAppendPrintf182079,6487000
static char *sqlite3Fts5Mprintf(int *pRc, const char *zFmt, ...){sqlite3Fts5Mprintf182100,6487384
static void sqlite3Fts5BufferFree(Fts5Buffer *pBuf){sqlite3Fts5BufferFree182118,6487746
static void sqlite3Fts5BufferZero(Fts5Buffer *pBuf){sqlite3Fts5BufferZero182127,6487969
static void sqlite3Fts5BufferSet(sqlite3Fts5BufferSet182136,6488226
static int sqlite3Fts5PoslistNext64(sqlite3Fts5PoslistNext64182146,6488402
static int sqlite3Fts5PoslistReaderNext(Fts5PoslistReader *pIter){sqlite3Fts5PoslistReaderNext182176,6489126
static int sqlite3Fts5PoslistReaderInit(sqlite3Fts5PoslistReaderInit182183,6489322
static void sqlite3Fts5PoslistSafeAppend(sqlite3Fts5PoslistSafeAppend182200,6489892
static int sqlite3Fts5PoslistWriterAppend(sqlite3Fts5PoslistWriterAppend182215,6490315
static void *sqlite3Fts5MallocZero(int *pRc, int nByte){sqlite3Fts5MallocZero182226,6490639
static char *sqlite3Fts5Strndup(int *pRc, const char *pIn, int nIn){sqlite3Fts5Strndup182247,6491263
static int sqlite3Fts5IsBareword(char t){sqlite3Fts5IsBareword182275,6491968
typedef struct Fts5TermsetEntry Fts5TermsetEntry;Fts5TermsetEntry182293,6492772
struct Fts5TermsetEntry {Fts5TermsetEntry182294,6492822
  char *pTerm;pTerm182295,6492848
  int nTerm;nTerm182296,6492863
  int iIdx;                       /* Index (main or aPrefix[] entry) */iIdx182297,6492876
  Fts5TermsetEntry *pNext;pNext182298,6492948
struct Fts5Termset {Fts5Termset182301,6492979
  Fts5TermsetEntry *apHash[512];apHash182302,6493000
static int sqlite3Fts5TermsetNew(Fts5Termset **pp){sqlite3Fts5TermsetNew182305,6493037
static int sqlite3Fts5TermsetAdd(sqlite3Fts5TermsetAdd182311,6493184
static void sqlite3Fts5TermsetFree(Fts5Termset *p){sqlite3Fts5TermsetFree182360,6494487
#define FTS5_DEFAULT_PAGE_SIZE FTS5_DEFAULT_PAGE_SIZE182393,6495286
#define FTS5_DEFAULT_AUTOMERGE FTS5_DEFAULT_AUTOMERGE182394,6495324
#define FTS5_DEFAULT_USERMERGE FTS5_DEFAULT_USERMERGE182395,6495362
#define FTS5_DEFAULT_CRISISMERGE FTS5_DEFAULT_CRISISMERGE182396,6495400
#define FTS5_DEFAULT_HASHSIZE FTS5_DEFAULT_HASHSIZE182397,6495438
#define FTS5_MAX_PAGE_SIZE FTS5_MAX_PAGE_SIZE182400,6495516
static int fts5_iswhitespace(char x){fts5_iswhitespace182402,6495555
static int fts5_isopenquote(char x){fts5_isopenquote182406,6495615
static const char *fts5ConfigSkipWhitespace(const char *pIn){fts5ConfigSkipWhitespace182415,6495904
static const char *fts5ConfigSkipBareword(const char *pIn){fts5ConfigSkipBareword182428,6496260
static int fts5_isdigit(char a){fts5_isdigit182435,6496423
static const char *fts5ConfigSkipLiteral(const char *pIn){fts5ConfigSkipLiteral182441,6496490
static int fts5Dequote(char *z){fts5Dequote182517,6498335
static void sqlite3Fts5Dequote(char *z){sqlite3Fts5Dequote182562,6499399
struct Fts5Enum {Fts5Enum182573,6499654
  const char *zName;zName182574,6499672
  int eVal;eVal182575,6499693
typedef struct Fts5Enum Fts5Enum;Fts5Enum182577,6499708
static int fts5ConfigSetEnum(fts5ConfigSetEnum182579,6499743
static int fts5ConfigParseSpecial(fts5ConfigParseSpecial182608,6500533
static int fts5ConfigDefaultTokenizer(Fts5Global *pGlobal, Fts5Config *pConfig){fts5ConfigDefaultTokenizer182772,6505213
static const char *fts5ConfigGobbleWord(fts5ConfigGobbleWord182794,6506181
static int fts5ConfigParseColumn(fts5ConfigParseColumn182834,6507084
static int fts5ConfigMakeExprlist(Fts5Config *p){fts5ConfigMakeExprlist182862,6507727
static int sqlite3Fts5ConfigParse(sqlite3Fts5ConfigParse182895,6508867
static void sqlite3Fts5ConfigFree(Fts5Config *pConfig){sqlite3Fts5ConfigFree183014,6512236
static int sqlite3Fts5ConfigDeclareVtab(Fts5Config *pConfig){sqlite3Fts5ConfigDeclareVtab183041,6513044
static int sqlite3Fts5Tokenize(sqlite3Fts5Tokenize183087,6514782
static const char *fts5ConfigSkipArgs(const char *pIn){fts5ConfigSkipArgs183106,6515537
static int sqlite3Fts5ConfigParseRank(sqlite3Fts5ConfigParseRank183133,6516101
static int sqlite3Fts5ConfigSetValue(sqlite3Fts5ConfigSetValue183192,6517426
static int sqlite3Fts5ConfigLoad(Fts5Config *pConfig, int iCookie){sqlite3Fts5ConfigLoad183285,6519774
#define FTS5_EOF FTS5_EOF183359,6521806
#define FTS5_LARGEST_INT64 FTS5_LARGEST_INT64183361,6521826
typedef struct Fts5ExprTerm Fts5ExprTerm;Fts5ExprTerm183363,6521892
struct Fts5Expr {Fts5Expr183377,6522286
  Fts5Index *pIndex;pIndex183378,6522304
  Fts5Config *pConfig;pConfig183379,6522325
  Fts5ExprNode *pRoot;pRoot183380,6522348
  int bDesc;                      /* Iterate in descending rowid order */bDesc183381,6522371
  int nPhrase;                    /* Number of phrases in expression */nPhrase183382,6522445
  Fts5ExprPhrase **apExprPhrase;  /* Pointers to phrase objects */apExprPhrase183383,6522517
struct Fts5ExprNode {Fts5ExprNode183396,6522919
  int eType;                      /* Node type */eType183397,6522941
  int bEof;                       /* True at EOF */bEof183398,6522991
  int bNomatch;                   /* True if entry is not a match */bNomatch183399,6523043
  int (*xNext)(Fts5Expr*, Fts5ExprNode*, int, i64);xNext183402,6523148
  i64 iRowid;                     /* Current rowid */iRowid183404,6523201
  Fts5ExprNearset *pNear;         /* For FTS5_STRING - cluster of phrases */pNear183405,6523255
  int nChild;                     /* Number of child nodes */nChild183409,6523467
  Fts5ExprNode *apChild[1];       /* Array of child nodes */apChild183410,6523529
#define Fts5NodeIsString(Fts5NodeIsString183413,6523594
#define fts5ExprNodeNext(fts5ExprNodeNext183419,6523830
struct Fts5ExprTerm {Fts5ExprTerm183425,6523995
  int bPrefix;                    /* True for a prefix term */bPrefix183426,6524017
  char *zTerm;                    /* nul-terminated term */zTerm183427,6524080
  Fts5IndexIter *pIter;           /* Iterator for this term */pIter183428,6524140
  Fts5ExprTerm *pSynonym;         /* Pointer to first in list of synonyms */pSynonym183429,6524203
struct Fts5ExprPhrase {Fts5ExprPhrase183436,6524401
  Fts5ExprNode *pNode;            /* FTS5_STRING node this phrase is part of */pNode183437,6524425
  Fts5Buffer poslist;             /* Current position list */poslist183438,6524505
  int nTerm;                      /* Number of entries in aTerm[] */nTerm183439,6524567
  Fts5ExprTerm aTerm[1];          /* Terms that make up this phrase */aTerm183440,6524636
struct Fts5ExprNearset {Fts5ExprNearset183447,6524837
  int nNear;                      /* NEAR parameter */nNear183448,6524862
  Fts5Colset *pColset;            /* Columns to search (NULL -> all columns) */pColset183449,6524917
  int nPhrase;                    /* Number of entries in aPhrase[] array */nPhrase183450,6524997
  Fts5ExprPhrase *apPhrase[1];    /* Array of phrase pointers */apPhrase183451,6525074
struct Fts5Parse {Fts5Parse183458,6525168
  Fts5Config *pConfig;pConfig183459,6525187
  char *zErr;zErr183460,6525210
  int rc;rc183461,6525224
  int nPhrase;                    /* Size of apPhrase array */nPhrase183462,6525234
  Fts5ExprPhrase **apPhrase;      /* Array of all phrases */apPhrase183463,6525297
  Fts5ExprNode *pExpr;            /* Result of a successful parse */pExpr183464,6525358
static void sqlite3Fts5ParseError(Fts5Parse *pParse, const char *zFmt, ...){sqlite3Fts5ParseError183467,6525431
static int fts5ExprIsspace(char t){fts5ExprIsspace183477,6525674
static int fts5ExprGetToken(fts5ExprGetToken183484,6525832
static void *fts5ParseAlloc(u64 t){ return sqlite3_malloc((int)t); }fts5ParseAlloc183547,6527490
static void fts5ParseFree(void *p){ sqlite3_free(p); }fts5ParseFree183548,6527559
static int sqlite3Fts5ExprNew(sqlite3Fts5ExprNew183550,6527615
static void sqlite3Fts5ParseNodeFree(Fts5ExprNode *p){sqlite3Fts5ParseNodeFree183610,6529253
static void sqlite3Fts5ExprFree(Fts5Expr *p){sqlite3Fts5ExprFree183624,6529551
static i64 fts5ExprSynonymRowid(Fts5ExprTerm *pTerm, int bDesc, int *pbEof){fts5ExprSynonymRowid183636,6529810
static int fts5ExprSynonymList(fts5ExprSynonymList183660,6530350
static int fts5ExprPhraseIsMatch(fts5ExprPhraseIsMatch183743,6532786
typedef struct Fts5LookaheadReader Fts5LookaheadReader;Fts5LookaheadReader183824,6535213
struct Fts5LookaheadReader {Fts5LookaheadReader183825,6535269
  const u8 *a;                    /* Buffer containing position list */a183826,6535298
  int n;                          /* Size of buffer a[] in bytes */n183827,6535370
  int i;                          /* Current offset in position list */i183828,6535438
  i64 iPos;                       /* Current position */iPos183829,6535510
  i64 iLookahead;                 /* Next position */iLookahead183830,6535567
#define FTS5_LOOKAHEAD_EOF FTS5_LOOKAHEAD_EOF183833,6535625
static int fts5LookaheadReaderNext(Fts5LookaheadReader *p){fts5LookaheadReaderNext183835,6535670
static int fts5LookaheadReaderInit(fts5LookaheadReaderInit183843,6535913
typedef struct Fts5NearTrimmer Fts5NearTrimmer;Fts5NearTrimmer183854,6536235
struct Fts5NearTrimmer {Fts5NearTrimmer183855,6536283
  Fts5LookaheadReader reader;     /* Input iterator */reader183856,6536308
  Fts5PoslistWriter writer;       /* Writer context */writer183857,6536363
  Fts5Buffer *pOut;               /* Output poslist */pOut183858,6536418
static int fts5ExprNearIsMatch(int *pRc, Fts5ExprNearset *pNear){fts5ExprNearIsMatch183878,6537338
static int fts5ExprAdvanceto(fts5ExprAdvanceto183977,6540558
static int fts5ExprSynonymAdvanceto(fts5ExprSynonymAdvanceto184003,6541339
static int fts5ExprNearTest(fts5ExprNearTest184033,6542141
static int fts5ExprNearInitAll(fts5ExprNearInitAll184086,6543840
static int fts5RowidCmp(fts5RowidCmp184139,6545128
static void fts5ExprSetEof(Fts5ExprNode *pNode){fts5ExprSetEof184154,6545401
static void fts5ExprNodeZeroPoslist(Fts5ExprNode *pNode){fts5ExprNodeZeroPoslist184163,6545581
static int fts5NodeCompare(fts5NodeCompare184193,6546430
static int fts5ExprNodeTest_STRING(fts5ExprNodeTest_STRING184214,6547094
static int fts5ExprNodeNext_STRING(fts5ExprNodeNext_STRING184283,6549440
static int fts5ExprNodeTest_TERM(fts5ExprNodeTest_TERM184348,6551190
static int fts5ExprNodeNext_TERM(fts5ExprNodeNext_TERM184376,6552221
static void fts5ExprNodeTest_OR(fts5ExprNodeTest_OR184400,6552732
static int fts5ExprNodeNext_OR(fts5ExprNodeNext_OR184419,6553280
static int fts5ExprNodeTest_AND(fts5ExprNodeTest_AND184448,6553930
static int fts5ExprNodeNext_AND(fts5ExprNodeNext_AND184497,6555379
static int fts5ExprNodeTest_NOT(fts5ExprNodeTest_NOT184510,6555650
static int fts5ExprNodeNext_NOT(fts5ExprNodeNext_NOT184538,6556448
static int fts5ExprNodeTest(fts5ExprNodeTest184556,6556905
static int fts5ExprNodeFirst(Fts5Expr *pExpr, Fts5ExprNode *pNode){fts5ExprNodeFirst184601,6557970
static int sqlite3Fts5ExprFirst(Fts5Expr *p, Fts5Index *pIdx, i64 iFirst, int bDesc){sqlite3Fts5ExprFirst184660,6559768
static int sqlite3Fts5ExprNext(Fts5Expr *p, i64 iLast){sqlite3Fts5ExprNext184688,6560670
static int sqlite3Fts5ExprEof(Fts5Expr *p){sqlite3Fts5ExprEof184702,6561060
static i64 sqlite3Fts5ExprRowid(Fts5Expr *p){sqlite3Fts5ExprRowid184706,6561132
static int fts5ParseStringFromToken(Fts5Token *pToken, char **pz){fts5ParseStringFromToken184710,6561208
static void fts5ExprPhraseFree(Fts5ExprPhrase *pPhrase){fts5ExprPhraseFree184719,6561429
static Fts5ExprNearset *sqlite3Fts5ParseNearset(sqlite3Fts5ParseNearset184748,6562347
typedef struct TokenCtx TokenCtx;TokenCtx184806,6563994
struct TokenCtx {TokenCtx184807,6564028
  Fts5ExprPhrase *pPhrase;pPhrase184808,6564046
  int rc;rc184809,6564073
static int fts5ParseTokenize(fts5ParseTokenize184815,6564147
static void sqlite3Fts5ParsePhraseFree(Fts5ExprPhrase *pPhrase){sqlite3Fts5ParsePhraseFree184880,6566269
static void sqlite3Fts5ParseNearsetFree(Fts5ExprNearset *pNear){sqlite3Fts5ParseNearsetFree184887,6566431
static void sqlite3Fts5ParseFinished(Fts5Parse *pParse, Fts5ExprNode *p){sqlite3Fts5ParseFinished184898,6566677
static Fts5ExprPhrase *sqlite3Fts5ParseTerm(sqlite3Fts5ParseTerm184908,6567005
static int sqlite3Fts5ExprClonePhrase(sqlite3Fts5ExprClonePhrase184969,6568986
static void sqlite3Fts5ParseNear(Fts5Parse *pParse, Fts5Token *pTok){sqlite3Fts5ParseNear185059,6571957
static void sqlite3Fts5ParseSetDistance(sqlite3Fts5ParseSetDistance185067,6572187
static Fts5Colset *fts5ParseColset(fts5ParseColset185102,6573120
static Fts5Colset *sqlite3Fts5ParseColsetInvert(Fts5Parse *pParse, Fts5Colset *p){sqlite3Fts5ParseColsetInvert185143,6574377
static Fts5Colset *sqlite3Fts5ParseColset(sqlite3Fts5ParseColset185166,6574866
static void sqlite3Fts5ParseSetColset(sqlite3Fts5ParseSetColset185198,6575727
static void fts5ExprAssignXNext(Fts5ExprNode *pNode){fts5ExprAssignXNext185219,6576160
static void fts5ExprAddChildren(Fts5ExprNode *p, Fts5ExprNode *pSub){fts5ExprAddChildren185251,6576887
static Fts5ExprNode *sqlite3Fts5ParseNode(sqlite3Fts5ParseNode185266,6577374
static Fts5ExprNode *sqlite3Fts5ParseImplicitAnd(sqlite3Fts5ParseImplicitAnd185341,6579818
static char *fts5ExprTermPrint(Fts5ExprTerm *pTerm){fts5ExprTermPrint185405,6581521
static char *fts5PrintfAppend(char *zApp, const char *zFmt, ...){fts5PrintfAppend185437,6582246
static char *fts5ExprPrintTcl(fts5ExprPrintTcl185458,6582811
static char *fts5ExprPrint(Fts5Config *pConfig, Fts5ExprNode *pExpr){fts5ExprPrint185537,6584909
static void fts5ExprFunction(fts5ExprFunction185619,6587017
static void fts5ExprFunctionHr(fts5ExprFunctionHr185702,6589235
static void fts5ExprFunctionTcl(fts5ExprFunctionTcl185709,6589490
static void fts5ExprIsAlnum(fts5ExprIsAlnum185722,6589946
static void fts5ExprFold(fts5ExprFold185738,6590408
static int sqlite3Fts5ExprInit(Fts5Global *pGlobal, sqlite3 *db){sqlite3Fts5ExprInit185760,6591132
static int sqlite3Fts5ExprPhraseCount(Fts5Expr *pExpr){sqlite3Fts5ExprPhraseCount185790,6591933
static int sqlite3Fts5ExprPhraseSize(Fts5Expr *pExpr, int iPhrase){sqlite3Fts5ExprPhraseSize185797,6592102
static int sqlite3Fts5ExprPoslist(Fts5Expr *pExpr, int iPhrase, const u8 **pa){sqlite3Fts5ExprPoslist185806,6592364
struct Fts5PoslistPopulator {Fts5PoslistPopulator185820,6592736
  Fts5PoslistWriter writer;writer185821,6592766
  int bOk;                        /* True if ok to populate */bOk185822,6592794
  int bMiss;bMiss185823,6592857
static Fts5PoslistPopulator *sqlite3Fts5ExprClearPoslists(Fts5Expr *pExpr, int bLive){sqlite3Fts5ExprClearPoslists185826,6592874
struct Fts5ExprCtx {Fts5ExprCtx185848,6593560
  Fts5Expr *pExpr;pExpr185849,6593581
  Fts5PoslistPopulator *aPopulator;aPopulator185850,6593600
  i64 iOff;iOff185851,6593636
typedef struct Fts5ExprCtx Fts5ExprCtx;Fts5ExprCtx185853,6593651
static int fts5ExprColsetTest(Fts5Colset *pColset, int iCol){fts5ExprColsetTest185858,6593733
static int fts5ExprPopulatePoslistsCb(fts5ExprPopulatePoslistsCb185866,6593901
static int sqlite3Fts5ExprPopulatePoslists(sqlite3Fts5ExprPopulatePoslists185901,6595168
static void fts5ExprClearPoslists(Fts5ExprNode *pNode){fts5ExprClearPoslists185931,6595892
static int fts5ExprCheckPoslists(Fts5ExprNode *pNode, i64 iRowid){fts5ExprCheckPoslists185942,6596173
static void sqlite3Fts5ExprCheckPoslists(Fts5Expr *pExpr, i64 iRowid){sqlite3Fts5ExprCheckPoslists185986,6597160
static int sqlite3Fts5ExprPhraseCollist(sqlite3Fts5ExprPhraseCollist185993,6597347
typedef struct Fts5HashEntry Fts5HashEntry;Fts5HashEntry186047,6598638
struct Fts5Hash {Fts5Hash186056,6598853
  int eDetail;                    /* Copy of Fts5Config.eDetail */eDetail186057,6598871
  int *pnByte;                    /* Pointer to bytes counter */pnByte186058,6598938
  int nEntry;                     /* Number of entries currently in hash */nEntry186059,6599003
  int nSlot;                      /* Size of aSlot[] array */nSlot186060,6599079
  Fts5HashEntry *pScan;           /* Current ordered scan item */pScan186061,6599141
  Fts5HashEntry **aSlot;          /* Array of hash slots */aSlot186062,6599207
struct Fts5HashEntry {Fts5HashEntry186086,6599991
  Fts5HashEntry *pHashNext;       /* Next hash entry with same hash-key */pHashNext186087,6600014
  Fts5HashEntry *pScanNext;       /* Next entry in sorted order */pScanNext186088,6600089
  int nAlloc;                     /* Total size of allocation */nAlloc186090,6600159
  int iSzPoslist;                 /* Offset of space for 4-byte poslist size */iSzPoslist186091,6600224
  int nData;                      /* Total bytes of data (incl. structure) */nData186092,6600304
  int nKey;                       /* Length of zKey[] in bytes */nKey186093,6600382
  u8 bDel;                        /* Set delete-flag @ iSzPoslist */bDel186094,6600448
  u8 bContent;                    /* Set content-flag (detail=none mode) */bContent186095,6600517
  i16 iCol;                       /* Column of last value written */iCol186096,6600593
  int iPos;                       /* Position of last value written */iPos186097,6600662
  i64 iRowid;                     /* Rowid of last value written */iRowid186098,6600733
  char zKey[8];                   /* Nul-terminated entry key */zKey186099,6600801
#define FTS5_HASHENTRYSIZE FTS5_HASHENTRYSIZE186105,6600927
static int sqlite3Fts5HashNew(Fts5Config *pConfig, Fts5Hash **ppNew, int *pnByte){sqlite3Fts5HashNew186112,6601019
static void sqlite3Fts5HashFree(Fts5Hash *pHash){sqlite3Fts5HashFree186142,6601711
static void sqlite3Fts5HashClear(Fts5Hash *pHash){sqlite3Fts5HashClear186153,6601922
static unsigned int fts5HashKey(int nSlot, const u8 *p, int n){fts5HashKey186167,6602278
static unsigned int fts5HashKey2(int nSlot, u8 b, const u8 *p, int n){fts5HashKey2186176,6602457
static int fts5HashResize(Fts5Hash *pHash){fts5HashResize186189,6602731
static void fts5HashAddPoslistSize(Fts5Hash *pHash, Fts5HashEntry *p){fts5HashAddPoslistSize186216,6603408
static int sqlite3Fts5HashWrite(sqlite3Fts5HashWrite186256,6604596
static Fts5HashEntry *fts5HashEntryMerge(fts5HashEntryMerge186406,6609406
static int fts5HashEntrySort(fts5HashEntrySort186450,6610383
static int sqlite3Fts5HashQuery(sqlite3Fts5HashQuery186495,6611473
static int sqlite3Fts5HashScanInit(sqlite3Fts5HashScanInit186520,6612220
static void sqlite3Fts5HashScanNext(Fts5Hash *p){sqlite3Fts5HashScanNext186527,6612431
static int sqlite3Fts5HashScanEof(Fts5Hash *p){sqlite3Fts5HashScanEof186532,6612558
static void sqlite3Fts5HashScanEntry(sqlite3Fts5HashScanEntry186536,6612633
#define FTS5_OPT_WORK_UNIT FTS5_OPT_WORK_UNIT186602,6614863
#define FTS5_WORK_UNIT FTS5_WORK_UNIT186603,6614942
#define FTS5_MIN_DLIDX_SIZE FTS5_MIN_DLIDX_SIZE186605,6615020
#define FTS5_MAIN_PREFIX FTS5_MAIN_PREFIX186607,6615096
#define FTS5_AVERAGES_ROWID FTS5_AVERAGES_ROWID186769,6620632
#define FTS5_STRUCTURE_ROWID FTS5_STRUCTURE_ROWID186770,6620710
#define FTS5_DATA_ID_B FTS5_DATA_ID_B186783,6621191
#define FTS5_DATA_DLI_B FTS5_DATA_DLI_B186784,6621255
#define FTS5_DATA_HEIGHT_B FTS5_DATA_HEIGHT_B186785,6621322
#define FTS5_DATA_PAGE_B FTS5_DATA_PAGE_B186786,6621390
#define fts5_dri(fts5_dri186788,6621461
#define FTS5_SEGMENT_ROWID(FTS5_SEGMENT_ROWID186795,6621869
#define FTS5_DLIDX_ROWID(FTS5_DLIDX_ROWID186796,6621943
#define FTS5_MAX_SEGMENT FTS5_MAX_SEGMENT186801,6622078
static int sqlite3Fts5Corrupt() { return SQLITE_CORRUPT_VTAB; }sqlite3Fts5Corrupt186804,6622129
#define FTS5_DATA_ZERO_PADDING FTS5_DATA_ZERO_PADDING186813,6622411
#define FTS5_DATA_PADDING FTS5_DATA_PADDING186814,6622444
typedef struct Fts5Data Fts5Data;Fts5Data186816,6622474
typedef struct Fts5DlidxIter Fts5DlidxIter;Fts5DlidxIter186817,6622508
typedef struct Fts5DlidxLvl Fts5DlidxLvl;Fts5DlidxLvl186818,6622552
typedef struct Fts5DlidxWriter Fts5DlidxWriter;Fts5DlidxWriter186819,6622594
typedef struct Fts5Iter Fts5Iter;Fts5Iter186820,6622642
typedef struct Fts5PageWriter Fts5PageWriter;Fts5PageWriter186821,6622676
typedef struct Fts5SegIter Fts5SegIter;Fts5SegIter186822,6622722
typedef struct Fts5DoclistIter Fts5DoclistIter;Fts5DoclistIter186823,6622762
typedef struct Fts5SegWriter Fts5SegWriter;Fts5SegWriter186824,6622810
typedef struct Fts5Structure Fts5Structure;Fts5Structure186825,6622854
typedef struct Fts5StructureLevel Fts5StructureLevel;Fts5StructureLevel186826,6622898
typedef struct Fts5StructureSegment Fts5StructureSegment;Fts5StructureSegment186827,6622952
struct Fts5Data {Fts5Data186829,6623011
  u8 *p;                          /* Pointer to buffer containing record */p186830,6623029
  int nn;                         /* Size of record in bytes */nn186831,6623105
  int szLeaf;                     /* Size of leaf without page-index */szLeaf186832,6623169
struct Fts5Index {Fts5Index186838,6623283
  Fts5Config *pConfig;            /* Virtual table configuration */pConfig186839,6623302
  char *zDataTbl;                 /* Name of %_data table */zDataTbl186840,6623370
  int nWorkUnit;                  /* Leaf pages in a "unit" of work */nWorkUnit186841,6623431
  Fts5Hash *pHash;                /* Hash table for in-memory data */pHash186847,6623650
  int nPendingData;               /* Current bytes of pending data */nPendingData186848,6623720
  i64 iWriteRowid;                /* Rowid for current doc being written */iWriteRowid186849,6623790
  int bDelete;                    /* Current write is a delete */bDelete186850,6623866
  int rc;                         /* Current error code */rc186853,6623954
  sqlite3_blob *pReader;          /* RO incr-blob open on %_data table */pReader186856,6624065
  sqlite3_stmt *pWriter;          /* "INSERT ... %_data VALUES(?,?)" */pWriter186857,6624139
  sqlite3_stmt *pDeleter;         /* "DELETE FROM %_data ... id>=? AND id<=?" */pDeleter186858,6624211
  sqlite3_stmt *pIdxWriter;       /* "INSERT ... %_idx VALUES(?,?,?,?)" */pIdxWriter186859,6624292
  sqlite3_stmt *pIdxDeleter;      /* "DELETE FROM %_idx WHERE segid=? */pIdxDeleter186860,6624367
  sqlite3_stmt *pIdxSelect;pIdxSelect186861,6624440
  int nRead;                      /* Total number of blocks read */nRead186862,6624468
  sqlite3_stmt *pDataVersion;pDataVersion186864,6624537
  i64 iStructVersion;             /* data_version when pStruct read */iStructVersion186865,6624567
  Fts5Structure *pStruct;         /* Current db structure (or NULL) */pStruct186866,6624638
struct Fts5DoclistIter {Fts5DoclistIter186869,6624713
  u8 *aEof;                       /* Pointer to 1 byte past end of doclist */aEof186870,6624738
  i64 iRowid;iRowid186873,6624862
  u8 *aPoslist;aPoslist186874,6624876
  int nPoslist;nPoslist186875,6624892
  int nSize;nSize186876,6624908
struct Fts5StructureSegment {Fts5StructureSegment186884,6625124
  int iSegid;                     /* Segment id */iSegid186885,6625154
  int pgnoFirst;                  /* First leaf page number in segment */pgnoFirst186886,6625205
  int pgnoLast;                   /* Last leaf page number in segment */pgnoLast186887,6625279
struct Fts5StructureLevel {Fts5StructureLevel186889,6625355
  int nMerge;                     /* Number of segments in incr-merge */nMerge186890,6625383
  int nSeg;                       /* Total number of segments on level */nSeg186891,6625456
  Fts5StructureSegment *aSeg;     /* Array of segments. aSeg[0] is oldest. */aSeg186892,6625530
struct Fts5Structure {Fts5Structure186894,6625611
  int nRef;                       /* Object reference count */nRef186895,6625634
  u64 nWriteCounter;              /* Total leaves written to level 0 */nWriteCounter186896,6625697
  int nSegment;                   /* Total segments in this structure */nSegment186897,6625769
  int nLevel;                     /* Number of levels in this index */nLevel186898,6625842
  Fts5StructureLevel aLevel[1];   /* Array of nLevel level objects */aLevel186899,6625913
struct Fts5PageWriter {Fts5PageWriter186905,6626058
  int pgno;                       /* Page number for this page */pgno186906,6626082
  int iPrevPgidx;                 /* Previous value written into pgidx */iPrevPgidx186907,6626148
  Fts5Buffer buf;                 /* Buffer containing leaf data */buf186908,6626222
  Fts5Buffer pgidx;               /* Buffer containing page-index */pgidx186909,6626290
  Fts5Buffer term;                /* Buffer containing previous term on page */term186910,6626359
struct Fts5DlidxWriter {Fts5DlidxWriter186912,6626442
  int pgno;                       /* Page number for this page */pgno186913,6626467
  int bPrevValid;                 /* True if iPrev is valid */bPrevValid186914,6626533
  i64 iPrev;                      /* Previous rowid value written to page */iPrev186915,6626596
  Fts5Buffer buf;                 /* Buffer containing page data */buf186916,6626673
struct Fts5SegWriter {Fts5SegWriter186918,6626744
  int iSegid;                     /* Segid to write to */iSegid186919,6626767
  Fts5PageWriter writer;          /* PageWriter object */writer186920,6626825
  i64 iPrevRowid;                 /* Previous rowid written to current leaf */iPrevRowid186921,6626883
  u8 bFirstRowidInDoclist;        /* True if next rowid is first in doclist */bFirstRowidInDoclist186922,6626962
  u8 bFirstRowidInPage;           /* True if next rowid is first in page */bFirstRowidInPage186923,6627041
  u8 bFirstTermInPage;            /* True if next term will be first in leaf */bFirstTermInPage186925,6627188
  int nLeafWritten;               /* Number of leaf pages written */nLeafWritten186926,6627268
  int nEmpty;                     /* Number of contiguous term-less nodes */nEmpty186927,6627337
  int nDlidx;                     /* Allocated size of aDlidx[] array */nDlidx186929,6627415
  Fts5DlidxWriter *aDlidx;        /* Array of Fts5DlidxWriter objects */aDlidx186930,6627488
  Fts5Buffer btterm;              /* Next term to insert into %_idx table */btterm186933,6627608
  int iBtPage;                    /* Page number corresponding to btterm */iBtPage186934,6627685
typedef struct Fts5CResult Fts5CResult;Fts5CResult186937,6627765
struct Fts5CResult {Fts5CResult186938,6627805
  u16 iFirst;                     /* aSeg[] index of firstest iterator */iFirst186939,6627826
  u8 bTermEq;                     /* True if the terms are equal */bTermEq186940,6627900
struct Fts5SegIter {Fts5SegIter186989,6629646
  Fts5StructureSegment *pSeg;     /* Segment to iterate through */pSeg186990,6629667
  int flags;                      /* Mask of configuration flags */flags186991,6629734
  int iLeafPgno;                  /* Current leaf page number */iLeafPgno186992,6629802
  Fts5Data *pLeaf;                /* Current leaf data */pLeaf186993,6629867
  Fts5Data *pNextLeaf;            /* Leaf page (iLeafPgno+1) */pNextLeaf186994,6629925
  int iLeafOffset;                /* Byte offset within current leaf */iLeafOffset186995,6629989
  void (*xNext)(Fts5Index*, Fts5SegIter*, int*);xNext186998,6630082
  int iTermLeafPgno;iTermLeafPgno187002,6630273
  int iTermLeafOffset;iTermLeafOffset187003,6630294
  int iPgidxOff;                  /* Next offset in pgidx */iPgidxOff187005,6630318
  int iEndofDoclist;iEndofDoclist187006,6630379
  int iRowidOffset;               /* Current entry in aRowidOffset[] */iRowidOffset187009,6630478
  int nRowidOffset;               /* Allocated size of aRowidOffset[] array */nRowidOffset187010,6630550
  int *aRowidOffset;              /* Array of offset to rowid fields */aRowidOffset187011,6630629
  Fts5DlidxIter *pDlidx;          /* If there is a doclist-index */pDlidx187013,6630702
  Fts5Buffer term;                /* Current term */term187016,6630823
  i64 iRowid;                     /* Current rowid */iRowid187017,6630876
  int nPos;                       /* Number of bytes in current position list */nPos187018,6630930
  u8 bDel;                        /* True if the delete flag is set */bDel187019,6631011
#define ASSERT_SZLEAF_OK(ASSERT_SZLEAF_OK187026,6631173
#define FTS5_SEGITER_ONETERM FTS5_SEGITER_ONETERM187030,6631280
#define FTS5_SEGITER_REVERSE FTS5_SEGITER_REVERSE187031,6631314
#define fts5LeafIsTermless(fts5LeafIsTermless187038,6631542
#define fts5LeafTermOff(fts5LeafTermOff187040,6631598
#define fts5LeafFirstRowidOff(fts5LeafFirstRowidOff187042,6631672
struct Fts5Iter {Fts5Iter187067,6632801
  Fts5IndexIter base;             /* Base class containing output vars */base187068,6632819
  Fts5Index *pIndex;              /* Index that owns this iterator */pIndex187070,6632894
  Fts5Structure *pStruct;         /* Database structure for this iterator */pStruct187071,6632964
  Fts5Buffer poslist;             /* Buffer containing current poslist */poslist187072,6633041
  Fts5Colset *pColset;            /* Restrict matches to these columns */pColset187073,6633115
  void (*xSetOutputs)(Fts5Iter*, Fts5SegIter*);xSetOutputs187076,6633231
  int nSeg;                       /* Size of aSeg[] array */nSeg187078,6633280
  int bRev;                       /* True to iterate in reverse order */bRev187079,6633341
  u8 bSkipEmpty;                  /* True to skip deleted entries */bSkipEmpty187080,6633414
  i64 iSwitchRowid;               /* Firstest rowid of other than aFirst[1] */iSwitchRowid187082,6633484
  Fts5CResult *aFirst;            /* Current merge state (see above) */aFirst187083,6633563
  Fts5SegIter aSeg[1];            /* Array of segment iterators */aSeg187084,6633635
struct Fts5DlidxLvl {Fts5DlidxLvl187101,6634004
  Fts5Data *pData;              /* Data for current page of this level */pData187102,6634026
  int iOff;                     /* Current offset into pData */iOff187103,6634100
  int bEof;                     /* At EOF already */bEof187104,6634164
  int iFirstOff;                /* Used by reverse iterators */iFirstOff187105,6634217
  int iLeafPgno;                /* Page number of current leaf page */iLeafPgno187108,6634307
  i64 iRowid;                   /* First rowid on leaf iLeafPgno */iRowid187109,6634378
struct Fts5DlidxIter {Fts5DlidxIter187111,6634449
  int nLvl;nLvl187112,6634472
  int iSegid;iSegid187113,6634484
  Fts5DlidxLvl aLvl[1];aLvl187114,6634498
static void fts5PutU16(u8 *aOut, u16 iVal){fts5PutU16187117,6634526
static u16 fts5GetU16(const u8 *aIn){fts5GetU16187122,6634621
static void *fts5IdxMalloc(Fts5Index *p, int nByte){fts5IdxMalloc187132,6634899
static int fts5BufferCompareBlob(fts5BufferCompareBlob187145,6635263
static int fts5BufferCompare(Fts5Buffer *pLeft, Fts5Buffer *pRight){fts5BufferCompare187164,6635875
static int fts5LeafFirstTermOff(Fts5Data *pLeaf){fts5LeafFirstTermOff187170,6636083
static void fts5CloseReader(Fts5Index *p){fts5CloseReader187179,6636268
static Fts5Data *fts5DataRead(Fts5Index *p, i64 iRowid){fts5DataRead187194,6636572
static void fts5DataRelease(Fts5Data *pData){fts5DataRelease187265,6638726
static Fts5Data *fts5LeafRead(Fts5Index *p, i64 iRowid){fts5LeafRead187269,6638798
static int fts5IndexPrepareStmt(fts5IndexPrepareStmt187281,6639047
static void fts5DataWrite(Fts5Index *p, i64 iRowid, const u8 *pData, int nData){fts5DataWrite187301,6639400
static void fts5DataDelete(Fts5Index *p, i64 iFirst, i64 iLast){fts5DataDelete187324,6640054
static void fts5DataRemoveSegment(Fts5Index *p, int iSegid){fts5DataRemoveSegment187355,6640815
static void fts5StructureRelease(Fts5Structure *pStruct){fts5StructureRelease187377,6641534
static void fts5StructureRef(Fts5Structure *pStruct){fts5StructureRef187388,6641799
static int fts5StructureDecode(fts5StructureDecode187404,6642332
static void fts5StructureAddLevel(int *pRc, Fts5Structure **ppStruct){fts5StructureAddLevel187480,6644575
static void fts5StructureExtendLevel(fts5StructureExtendLevel187504,6645238
static Fts5Structure *fts5StructureReadUncached(Fts5Index *p){fts5StructureReadUncached187533,6645988
static i64 fts5IndexDataVersion(Fts5Index *p){fts5IndexDataVersion187557,6646725
static Fts5Structure *fts5StructureRead(Fts5Index *p){fts5StructureRead187588,6647602
static void fts5StructureInvalidate(Fts5Index *p){fts5StructureInvalidate187627,6648775
static int fts5StructureCountSegments(Fts5Structure *pStruct){fts5StructureCountSegments187639,6649071
#define fts5BufferSafeAppendBlob(fts5BufferSafeAppendBlob187652,6649420
#define fts5BufferSafeAppendVarint(fts5BufferSafeAppendVarint187658,6649667
static void fts5StructureWrite(Fts5Index *p, Fts5Structure *pStruct){fts5StructureWrite187670,6650061
# define fts5PrintStructure(fts5PrintStructure187722,6651967
static int fts5SegmentSize(Fts5StructureSegment *pSeg){fts5SegmentSize187725,6652008
static void fts5StructurePromoteTo(fts5StructurePromoteTo187734,6652273
static void fts5StructurePromote(fts5StructurePromote187777,6653704
static int fts5DlidxLvlNext(Fts5DlidxLvl *pLvl){fts5DlidxLvlNext187828,6655370
static int fts5DlidxIterNextR(Fts5Index *p, Fts5DlidxIter *pIter, int iLvl){fts5DlidxIterNextR187860,6656148
static int fts5DlidxIterNext(Fts5Index *p, Fts5DlidxIter *pIter){fts5DlidxIterNext187880,6656743
static int fts5DlidxIterFirst(Fts5DlidxIter *pIter){fts5DlidxIterFirst187895,6657249
static int fts5DlidxIterEof(Fts5Index *p, Fts5DlidxIter *pIter){fts5DlidxIterEof187904,6657420
static void fts5DlidxIterLast(Fts5Index *p, Fts5DlidxIter *pIter){fts5DlidxIterLast187908,6657538
static int fts5DlidxLvlPrev(Fts5DlidxLvl *pLvl){fts5DlidxLvlPrev187931,6658178
static int fts5DlidxIterPrevR(Fts5Index *p, Fts5DlidxIter *pIter, int iLvl){fts5DlidxIterPrevR187980,6659584
static int fts5DlidxIterPrev(Fts5Index *p, Fts5DlidxIter *pIter){fts5DlidxIterPrev188003,6660238
static void fts5DlidxIterFree(Fts5DlidxIter *pIter){fts5DlidxIterFree188010,6660429
static Fts5DlidxIter *fts5DlidxIterInit(fts5DlidxIterInit188020,6660625
static i64 fts5DlidxIterRowid(Fts5DlidxIter *pIter){fts5DlidxIterRowid188067,6661829
static int fts5DlidxIterPgno(Fts5DlidxIter *pIter){fts5DlidxIterPgno188070,6661916
static void fts5SegIterNextPage(fts5SegIterNextPage188077,6662066
static int fts5GetPoslistSize(const u8 *p, int *pnSz, int *pbDel){fts5GetPoslistSize188115,6663228
static void fts5SegIterLoadNPos(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterLoadNPos188136,6663760
static void fts5SegIterLoadRowid(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterLoadRowid188165,6664584
static void fts5SegIterLoadTerm(Fts5Index *p, Fts5SegIter *pIter, int nKeep){fts5SegIterLoadTerm188198,6665600
static void fts5SegIterSetNext(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterSetNext188230,6666652
static void fts5SegIterInit(fts5SegIterInit188248,6667289
static void fts5SegIterReverseInitPage(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterReverseInitPage188296,6669142
static void fts5SegIterReverseNewPage(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterReverseNewPage188349,6670415
static int fts5MultiIterIsEmpty(Fts5Index *p, Fts5Iter *pIter){fts5MultiIterIsEmpty188401,6672043
static void fts5SegIterNext_Reverse(fts5SegIterNext_Reverse188411,6672358
static void fts5SegIterNext_None(fts5SegIterNext_None188445,6673313
static void fts5SegIterNext(fts5SegIterNext188517,6675481
#define SWAPVAL(SWAPVAL188640,6679194
#define fts5IndexSkipVarint(fts5IndexSkipVarint188642,6679250
static void fts5SegIterReverse(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterReverse188652,6679579
static void fts5SegIterLoadDlidx(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterLoadDlidx188738,6682618
static void fts5LeafSeek(fts5LeafSeek188772,6683896
static sqlite3_stmt *fts5IdxSelectStmt(Fts5Index *p){fts5IdxSelectStmt188895,6686791
static void fts5SegIterSeekInit(fts5SegIterSeekInit188914,6687473
static void fts5SegIterHashInit(fts5SegIterHashInit188996,6690200
static void fts5SegIterClear(Fts5SegIter *pIter){fts5SegIterClear189046,6691656
static void fts5AssertComparisonResult(fts5AssertComparisonResult189063,6692199
static void fts5AssertMultiIterSetup(Fts5Index *p, Fts5Iter *pIter){fts5AssertMultiIterSetup189105,6693286
# define fts5AssertMultiIterSetup(fts5AssertMultiIterSetup189139,6694423
static int fts5MultiIterDoCompare(Fts5Iter *pIter, int iOut){fts5MultiIterDoCompare189150,6694794
static void fts5SegIterGotoPage(fts5SegIterGotoPage189204,6696266
static void fts5SegIterNextFrom(fts5SegIterNextFrom189242,6697333
static void fts5MultiIterFree(Fts5Iter *pIter){fts5MultiIterFree189296,6698946
static void fts5MultiIterAdvanced(fts5MultiIterAdvanced189308,6699212
static int fts5MultiIterAdvanceRowid(fts5MultiIterAdvanceRowid189336,6700343
static void fts5MultiIterSetEof(Fts5Iter *pIter){fts5MultiIterSetEof189379,6701651
static void fts5MultiIterNext(fts5MultiIterNext189392,6702078
static void fts5MultiIterNext2(fts5MultiIterNext2189430,6703177
static void fts5IterSetOutputs_Noop(Fts5Iter *pUnused1, Fts5SegIter *pUnused2){fts5IterSetOutputs_Noop189459,6703935
static Fts5Iter *fts5MultiIterAlloc(fts5MultiIterAlloc189463,6704055
static void fts5PoslistCallback(fts5PoslistCallback189485,6704693
typedef struct PoslistCallbackCtx PoslistCallbackCtx;PoslistCallbackCtx189497,6704947
struct PoslistCallbackCtx {PoslistCallbackCtx189498,6705001
  Fts5Buffer *pBuf;               /* Append to this buffer */pBuf189499,6705029
  Fts5Colset *pColset;            /* Restrict matches to this column */pColset189500,6705091
  int eState;                     /* See above */eState189501,6705163
typedef struct PoslistOffsetsCtx PoslistOffsetsCtx;PoslistOffsetsCtx189504,6705217
struct PoslistOffsetsCtx {PoslistOffsetsCtx189505,6705269
  Fts5Buffer *pBuf;               /* Append to this buffer */pBuf189506,6705296
  Fts5Colset *pColset;            /* Restrict matches to this column */pColset189507,6705358
  int iRead;iRead189508,6705430
  int iWrite;iWrite189509,6705443
static int fts5IndexColsetTest(Fts5Colset *pColset, int iCol){fts5IndexColsetTest189515,6705502
static void fts5PoslistOffsetsCallback(fts5PoslistOffsetsCallback189523,6705671
static void fts5PoslistFilterCallback(fts5PoslistFilterCallback189546,6706248
static void fts5ChunkIterate(fts5ChunkIterate189598,6707582
static void fts5SegiterPoslist(fts5SegiterPoslist189645,6709008
static int fts5IndexExtractCol(fts5IndexExtractCol189680,6710181
static int fts5IndexExtractColset (fts5IndexExtractColset189717,6711374
static void fts5IterSetOutputs_None(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_None189739,6711917
static void fts5IterSetOutputs_Nocolset(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_Nocolset189749,6712240
static void fts5IterSetOutputs_ZeroColset(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_ZeroColset189774,6713177
static void fts5IterSetOutputs_Col(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_Col189784,6713528
static void fts5IterSetOutputs_Col100(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_Col100189802,6714073
static void fts5IterSetOutputs_Full(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_Full189842,6715125
static void fts5IterSetOutputCb(int *pRc, Fts5Iter *pIter){fts5IterSetOutputCb189873,6716337
static void fts5MultiIterNew(fts5MultiIterNew189916,6717578
static void fts5MultiIterNew2(fts5MultiIterNew2190017,6721168
static int fts5MultiIterEof(Fts5Index *p, Fts5Iter *pIter){fts5MultiIterEof190057,6722257
static i64 fts5MultiIterRowid(Fts5Iter *pIter){fts5MultiIterRowid190069,6722628
static void fts5MultiIterNextFrom(fts5MultiIterNextFrom190077,6722862
static const u8 *fts5MultiIterTerm(Fts5Iter *pIter, int *pn){fts5MultiIterTerm190096,6723342
static int fts5AllocateSegid(Fts5Index *p, Fts5Structure *pStruct){fts5AllocateSegid190111,6723853
static void fts5IndexDiscardData(Fts5Index *p){fts5IndexDiscardData190167,6725511
static int fts5PrefixCompress(int nOld, const u8 *pOld, const u8 *pNew){fts5PrefixCompress190182,6725905
static void fts5WriteDlidxClear(fts5WriteDlidxClear190190,6726065
static int fts5WriteDlidxGrow(fts5WriteDlidxGrow190216,6726818
static int fts5WriteFlushDlidx(Fts5Index *p, Fts5SegWriter *pWriter){fts5WriteFlushDlidx190242,6727519
static void fts5WriteFlushBtree(Fts5Index *p, Fts5SegWriter *pWriter){fts5WriteFlushBtree190266,6728367
static void fts5WriteBtreeTerm(fts5WriteBtreeTerm190294,6729493
static void fts5WriteBtreeNoTerm(fts5WriteBtreeNoTerm190308,6729944
static i64 fts5DlidxExtractFirstRowid(Fts5Buffer *pBuf){fts5DlidxExtractFirstRowid190324,6730548
static void fts5WriteDlidxAppend(fts5WriteDlidxAppend190338,6730935
static void fts5WriteFlushLeaf(Fts5Index *p, Fts5SegWriter *pWriter){fts5WriteFlushLeaf190398,6732945
static void fts5WriteAppendTerm(fts5WriteAppendTerm190447,6734446
static void fts5WriteAppendRowid(fts5WriteAppendRowid190525,6737262
static void fts5WriteAppendPoslistData(fts5WriteAppendPoslistData190558,6738302
static void fts5WriteFinish(fts5WriteFinish190592,6739145
static void fts5WriteInit(fts5WriteInit190620,6739867
static void fts5TrimSegments(Fts5Index *p, Fts5Iter *pIter){fts5TrimSegments190667,6741386
static void fts5MergeChunkCallback(fts5MergeChunkCallback190724,6743462
static void fts5IndexMergeLevel(fts5IndexMergeLevel190736,6743683
static int fts5IndexMerge(fts5IndexMerge190880,6748415
static void fts5IndexAutomerge(fts5IndexAutomerge190939,6750340
static void fts5IndexCrisismerge(fts5IndexCrisismerge190960,6751247
static int fts5IndexReturn(Fts5Index *p){fts5IndexReturn190978,6751836
typedef struct Fts5FlushCtx Fts5FlushCtx;Fts5FlushCtx190984,6751933
struct Fts5FlushCtx {Fts5FlushCtx190985,6751975
  Fts5Index *pIdx;pIdx190986,6751997
  Fts5SegWriter writer; writer190987,6752016
static int fts5PoslistPrefix(const u8 *aBuf, int nMax){fts5PoslistPrefix190995,6752227
static void fts5FlushOneHash(Fts5Index *p){fts5FlushOneHash191016,6752775
static void fts5IndexFlush(Fts5Index *p){fts5IndexFlush191168,6758466
static Fts5Structure *fts5IndexOptimizeStruct(fts5IndexOptimizeStruct191177,6758671
static int sqlite3Fts5IndexOptimize(Fts5Index *p){sqlite3Fts5IndexOptimize191239,6760645
static int sqlite3Fts5IndexMerge(Fts5Index *p, int nMerge){sqlite3Fts5IndexMerge191273,6761444
static void fts5AppendRowid(fts5AppendRowid191295,6762051
static void fts5AppendPoslist(fts5AppendPoslist191305,6762229
static void fts5DoclistIterNext(Fts5DoclistIter *pIter){fts5DoclistIterNext191321,6762623
static void fts5DoclistIterInit(fts5DoclistIterInit191347,6763190
#define fts5MergeAppendDocid(fts5MergeAppendDocid191375,6763912
static void fts5BufferSwap(Fts5Buffer *p1, Fts5Buffer *p2){fts5BufferSwap191384,6764234
static void fts5NextRowid(Fts5Buffer *pBuf, int *piOff, i64 *piRowid){fts5NextRowid191390,6764347
static void fts5MergeRowidLists(fts5MergeRowidLists191405,6764740
static void fts5MergePrefixLists(fts5MergePrefixLists191452,6766081
static void fts5SetupPrefixIter(fts5SetupPrefixIter191565,6769872
static int sqlite3Fts5IndexBeginWrite(Fts5Index *p, int bDelete, i64 iRowid){sqlite3Fts5IndexBeginWrite191665,6772916
static int sqlite3Fts5IndexSync(Fts5Index *p, int bCommit){sqlite3Fts5IndexSync191689,6773514
static int sqlite3Fts5IndexRollback(Fts5Index *p){sqlite3Fts5IndexRollback191702,6773947
static int sqlite3Fts5IndexReinit(Fts5Index *p){sqlite3Fts5IndexReinit191715,6774365
static int sqlite3Fts5IndexOpen(sqlite3Fts5IndexOpen191731,6774889
static int sqlite3Fts5IndexClose(Fts5Index *p){sqlite3Fts5IndexClose191772,6775914
static int sqlite3Fts5IndexCharlenToBytelen(sqlite3Fts5IndexCharlenToBytelen191795,6776603
static int fts5IndexCharlen(const char *pIn, int nIn){fts5IndexCharlen191815,6777042
static int sqlite3Fts5IndexWrite(sqlite3Fts5IndexWrite191837,6777723
static int sqlite3Fts5IndexQuery(sqlite3Fts5IndexQuery191873,6778902
static int sqlite3Fts5IterNext(Fts5IndexIter *pIndexIter){sqlite3Fts5IterNext191955,6781839
static int sqlite3Fts5IterNextScan(Fts5IndexIter *pIndexIter){sqlite3Fts5IterNextScan191965,6782153
static int sqlite3Fts5IterNextFrom(Fts5IndexIter *pIndexIter, i64 iMatch){sqlite3Fts5IterNextFrom191989,6782858
static const char *sqlite3Fts5IterTerm(Fts5IndexIter *pIndexIter, int *pn){sqlite3Fts5IterTerm191998,6783109
static void sqlite3Fts5IterClose(Fts5IndexIter *pIndexIter){sqlite3Fts5IterClose192008,6783384
static int sqlite3Fts5IndexGetAverages(Fts5Index *p, i64 *pnRow, i64 *anSize){sqlite3Fts5IndexGetAverages192023,6783812
static int sqlite3Fts5IndexSetAverages(Fts5Index *p, const u8 *pData, int nData){sqlite3Fts5IndexSetAverages192047,6784461
static int sqlite3Fts5IndexReads(Fts5Index *p){sqlite3Fts5IndexReads192057,6784771
static int sqlite3Fts5IndexSetCookie(Fts5Index *p, int iNew){sqlite3Fts5IndexSetCookie192068,6785056
static int sqlite3Fts5IndexLoadConfig(Fts5Index *p){sqlite3Fts5IndexLoadConfig192088,6785654
static u64 sqlite3Fts5IndexEntryCksum(sqlite3Fts5IndexEntryCksum192105,6786135
static void fts5TestDlidxReverse(fts5TestDlidxReverse192131,6786844
static int fts5QueryCksum(fts5QueryCksum192167,6787856
static void fts5TestTerm(fts5TestTerm192211,6789244
# define fts5TestDlidxReverse(fts5TestDlidxReverse192274,6791413
# define fts5TestTerm(fts5TestTerm192275,6791450
static void fts5IndexIntegrityCheckEmpty(fts5IndexIntegrityCheckEmpty192286,6791724
static void fts5IntegrityCheckPgidx(Fts5Index *p, Fts5Data *pLeaf){fts5IntegrityCheckPgidx192307,6792357
static void fts5IndexIntegrityCheckSegment(fts5IndexIntegrityCheckSegment192357,6793624
static int sqlite3Fts5IndexIntegrityCheck(Fts5Index *p, u64 cksum){sqlite3Fts5IndexIntegrityCheck192501,6798742
static void fts5DecodeRowid(fts5DecodeRowid192592,6802285
static void fts5DebugRowid(int *pRc, Fts5Buffer *pBuf, i64 iKey){fts5DebugRowid192611,6802934
static void fts5DebugStructure(fts5DebugStructure192629,6803483
static void fts5DecodeStructure(fts5DecodeStructure192658,6804453
static void fts5DecodeAverages(fts5DecodeAverages192683,6805119
static int fts5DecodePoslist(int *pRc, Fts5Buffer *pBuf, const u8 *a, int n){fts5DecodePoslist192706,6805780
static int fts5DecodeDoclist(int *pRc, Fts5Buffer *pBuf, const u8 *a, int n){fts5DecodeDoclist192724,6806341
static void fts5DecodeRowidList(fts5DecodeRowidList192762,6807609
static void fts5DecodeFunction(fts5DecodeFunction192793,6808328
static void fts5RowidFunction(fts5RowidFunction192980,6813693
static int sqlite3Fts5IndexInit(sqlite3 *db){sqlite3Fts5IndexInit193019,6814925
static int sqlite3Fts5IndexReset(Fts5Index *p){sqlite3Fts5IndexReset193040,6815399
SQLITE_API int sqlite3_fts5_may_be_corrupt = 1;sqlite3_fts5_may_be_corrupt193072,6816391
typedef struct Fts5Auxdata Fts5Auxdata;Fts5Auxdata193075,6816441
typedef struct Fts5Auxiliary Fts5Auxiliary;Fts5Auxiliary193076,6816481
typedef struct Fts5Cursor Fts5Cursor;Fts5Cursor193077,6816525
typedef struct Fts5Sorter Fts5Sorter;Fts5Sorter193078,6816563
typedef struct Fts5Table Fts5Table;Fts5Table193079,6816601
typedef struct Fts5TokenizerModule Fts5TokenizerModule;Fts5TokenizerModule193080,6816637
struct Fts5TransactionState {Fts5TransactionState193113,6817959
  int eState;                     /* 0==closed, 1==open, 2==synced */eState193114,6817989
  int iSavepoint;                 /* Number of open savepoints (0 -> none) */iSavepoint193115,6818059
struct Fts5Global {Fts5Global193123,6818359
  fts5_api api;                   /* User visible part of object (see fts5.h) */api193124,6818379
  sqlite3 *db;                    /* Associated database connection */ db193125,6818460
  i64 iNextId;                    /* Used to allocate unique cursor ids */iNextId193126,6818532
  Fts5Auxiliary *pAux;            /* First in list of all aux. functions */pAux193127,6818607
  Fts5TokenizerModule *pTok;      /* First in list of all tokenizer modules */pTok193128,6818683
  Fts5TokenizerModule *pDfltTok;  /* Default tokenizer module */pDfltTok193129,6818762
  Fts5Cursor *pCsr;               /* First in list of all open cursors */pCsr193130,6818827
struct Fts5Auxiliary {Fts5Auxiliary193138,6819092
  Fts5Global *pGlobal;            /* Global context for this function */pGlobal193139,6819115
  char *zFunc;                    /* Function name (nul-terminated) */zFunc193140,6819188
  void *pUserData;                /* User-data pointer */pUserData193141,6819259
  fts5_extension_function xFunc;  /* Callback function */xFunc193142,6819317
  void (*xDestroy)(void*);        /* Destructor function */xDestroy193143,6819375
  Fts5Auxiliary *pNext;           /* Next registered auxiliary function */pNext193144,6819435
struct Fts5TokenizerModule {Fts5TokenizerModule193152,6819699
  char *zName;                    /* Name of tokenizer */zName193153,6819728
  void *pUserData;                /* User pointer passed to xCreate() */pUserData193154,6819786
  fts5_tokenizer x;               /* Tokenizer functions */x193155,6819859
  void (*xDestroy)(void*);        /* Destructor function */xDestroy193156,6819919
  Fts5TokenizerModule *pNext;     /* Next registered tokenizer module */pNext193157,6819979
struct Fts5Table {Fts5Table193163,6820087
  sqlite3_vtab base;              /* Base class used by SQLite core */base193164,6820106
  Fts5Config *pConfig;            /* Virtual table configuration */pConfig193165,6820177
  Fts5Index *pIndex;              /* Full-text index */pIndex193166,6820245
  Fts5Storage *pStorage;          /* Document store */pStorage193167,6820301
  Fts5Global *pGlobal;            /* Global (connection wide) data */pGlobal193168,6820356
  Fts5Cursor *pSortCsr;           /* Sort data from this cursor */pSortCsr193169,6820426
  struct Fts5TransactionState ts;ts193171,6820513
struct Fts5MatchPhrase {Fts5MatchPhrase193175,6820558
  Fts5Buffer *pPoslist;           /* Pointer to current poslist */pPoslist193176,6820583
  int nTerm;                      /* Size of phrase in terms */nTerm193177,6820650
struct Fts5Sorter {Fts5Sorter193189,6821011
  sqlite3_stmt *pStmt;pStmt193190,6821031
  i64 iRowid;                     /* Current rowid */iRowid193191,6821054
  const u8 *aPoslist;             /* Position lists for current row */aPoslist193192,6821108
  int nIdx;                       /* Number of entries in aIdx[] */nIdx193193,6821179
  int aIdx[1];                    /* Offsets into aPoslist for current row */aIdx193194,6821247
struct Fts5Cursor {Fts5Cursor193217,6822074
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base193218,6822094
  Fts5Cursor *pNext;              /* Next cursor in Fts5Cursor.pCsr list */pNext193219,6822165
  int *aColumnSize;               /* Values for xColumnSize() */aColumnSize193220,6822241
  i64 iCsrId;                     /* Cursor id */iCsrId193221,6822306
  int ePlan;                      /* FTS5_PLAN_XXX value */ePlan193224,6822410
  int bDesc;                      /* True for "ORDER BY rowid DESC" queries */bDesc193225,6822470
  i64 iFirstRowid;                /* Return no rowids earlier than this */iFirstRowid193226,6822549
  i64 iLastRowid;                 /* Return no rowids later than this */iLastRowid193227,6822624
  sqlite3_stmt *pStmt;            /* Statement used to read %_content */pStmt193228,6822697
  Fts5Expr *pExpr;                /* Expression for MATCH queries */pExpr193229,6822770
  Fts5Sorter *pSorter;            /* Sorter for "ORDER BY rank" queries */pSorter193230,6822839
  int csrflags;                   /* Mask of cursor flags (see below) */csrflags193231,6822914
  i64 iSpecial;                   /* Result of special query */iSpecial193232,6822987
  char *zRank;                    /* Custom rank function */zRank193235,6823118
  char *zRankArgs;                /* Custom rank function args */zRankArgs193236,6823179
  Fts5Auxiliary *pRank;           /* Rank callback (or NULL) */pRank193237,6823245
  int nRankArg;                   /* Number of trailing arguments for rank() */nRankArg193238,6823309
  sqlite3_value **apRankArg;      /* Array of trailing arguments */apRankArg193239,6823389
  sqlite3_stmt *pRankArgStmt;     /* Origin of objects in apRankArg[] */pRankArgStmt193240,6823457
  Fts5Auxiliary *pAux;            /* Currently executing extension function */pAux193243,6823562
  Fts5Auxdata *pAuxdata;          /* First in linked list of saved aux-data */pAuxdata193244,6823641
  Fts5PoslistReader *aInstIter;   /* One for each phrase */aInstIter193247,6823788
  int nInstAlloc;                 /* Size of aInst[] array (entries / 3) */nInstAlloc193248,6823848
  int nInstCount;                 /* Number of phrase instances */nInstCount193249,6823924
  int *aInst;                     /* 3 integers per phrase instance */aInst193250,6823991
#define FTS5_BI_MATCH FTS5_BI_MATCH193257,6824168
#define FTS5_BI_RANK FTS5_BI_RANK193258,6824232
#define FTS5_BI_ROWID_EQ FTS5_BI_ROWID_EQ193259,6824295
#define FTS5_BI_ROWID_LE FTS5_BI_ROWID_LE193260,6824356
#define FTS5_BI_ROWID_GE FTS5_BI_ROWID_GE193261,6824417
#define FTS5_BI_ORDER_RANK FTS5_BI_ORDER_RANK193263,6824479
#define FTS5_BI_ORDER_ROWID FTS5_BI_ORDER_ROWID193264,6824515
#define FTS5_BI_ORDER_DESC FTS5_BI_ORDER_DESC193265,6824551
#define FTS5CSR_EOF FTS5CSR_EOF193270,6824628
#define FTS5CSR_REQUIRE_CONTENT FTS5CSR_REQUIRE_CONTENT193271,6824667
#define FTS5CSR_REQUIRE_DOCSIZE FTS5CSR_REQUIRE_DOCSIZE193272,6824706
#define FTS5CSR_REQUIRE_INST FTS5CSR_REQUIRE_INST193273,6824745
#define FTS5CSR_FREE_ZRANK FTS5CSR_FREE_ZRANK193274,6824784
#define FTS5CSR_REQUIRE_RESEEK FTS5CSR_REQUIRE_RESEEK193275,6824823
#define FTS5CSR_REQUIRE_POSLIST FTS5CSR_REQUIRE_POSLIST193276,6824862
#define BitFlagAllTest(BitFlagAllTest193278,6824902
#define BitFlagTest(BitFlagTest193279,6824949
#define CsrFlagSet(CsrFlagSet193285,6825055
#define CsrFlagClear(CsrFlagClear193286,6825117
#define CsrFlagTest(CsrFlagTest193287,6825180
struct Fts5Auxdata {Fts5Auxdata193289,6825242
  Fts5Auxiliary *pAux;            /* Extension to which this belongs */pAux193290,6825263
  void *pPtr;                     /* Pointer value */pPtr193291,6825335
  void(*xDelete)(void*);          /* Destructor */xDelete193292,6825389
  Fts5Auxdata *pNext;             /* Next object in linked list */pNext193293,6825440
#define FTS5_BEGIN FTS5_BEGIN193297,6825531
#define FTS5_SYNC FTS5_SYNC193298,6825557
#define FTS5_COMMIT FTS5_COMMIT193299,6825583
#define FTS5_ROLLBACK FTS5_ROLLBACK193300,6825609
#define FTS5_SAVEPOINT FTS5_SAVEPOINT193301,6825635
#define FTS5_RELEASE FTS5_RELEASE193302,6825661
#define FTS5_ROLLBACKTO FTS5_ROLLBACKTO193303,6825687
static void fts5CheckTransactionState(Fts5Table *p, int op, int iSavepoint){fts5CheckTransactionState193304,6825713
# define fts5CheckTransactionState(fts5CheckTransactionState193350,6826819
static int fts5IsContentless(Fts5Table *pTab){fts5IsContentless193356,6826922
static void fts5FreeVtab(Fts5Table *pTab){fts5FreeVtab193363,6827094
static int fts5DisconnectMethod(sqlite3_vtab *pVtab){fts5DisconnectMethod193375,6827359
static int fts5DestroyMethod(sqlite3_vtab *pVtab){fts5DestroyMethod193383,6827517
static int fts5InitVtab(fts5InitVtab193403,6828066
static int fts5ConnectMethod(fts5ConnectMethod193469,6830246
static int fts5CreateMethod(fts5CreateMethod193479,6830766
#define FTS5_PLAN_MATCH FTS5_PLAN_MATCH193493,6831322
#define FTS5_PLAN_SOURCE FTS5_PLAN_SOURCE193494,6831385
#define FTS5_PLAN_SPECIAL FTS5_PLAN_SPECIAL193495,6831465
#define FTS5_PLAN_SORTED_MATCH FTS5_PLAN_SORTED_MATCH193496,6831530
#define FTS5_PLAN_SCAN FTS5_PLAN_SCAN193497,6831607
#define FTS5_PLAN_ROWID FTS5_PLAN_ROWID193498,6831675
static void fts5SetUniqueFlag(sqlite3_index_info *pIdxInfo){fts5SetUniqueFlag193505,6831953
static int fts5BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){fts5BestIndexMethod193553,6833523
static int fts5NewTransaction(Fts5Table *pTab){fts5NewTransaction193647,6837073
static int fts5OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts5OpenMethod193658,6837362
static int fts5StmtType(Fts5Cursor *pCsr){fts5StmtType193684,6838196
static void fts5CsrNewrow(Fts5Cursor *pCsr){fts5CsrNewrow193696,6838586
static void fts5FreeCursorComponents(Fts5Cursor *pCsr){fts5FreeCursorComponents193705,6838780
static int fts5CloseMethod(sqlite3_vtab_cursor *pCursor){fts5CloseMethod193748,6839912
static int fts5SorterNext(Fts5Cursor *pCsr){fts5SorterNext193764,6840340
static void fts5TripCursors(Fts5Table *pTab){fts5TripCursors193807,6841306
static int fts5CursorReseek(Fts5Cursor *pCsr, int *pbSkip){fts5CursorReseek193830,6842122
static int fts5NextMethod(sqlite3_vtab_cursor *pCursor){fts5NextMethod193862,6843077
static int fts5PrepareStatement(fts5PrepareStatement193906,6844113
static int fts5CursorFirstSorted(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){fts5CursorFirstSorted193934,6844648
static int fts5CursorFirst(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){fts5CursorFirst193982,6846171
static int fts5SpecialMatch(fts5SpecialMatch193999,6846715
static Fts5Auxiliary *fts5FindAuxiliary(Fts5Table *pTab, const char *zName){fts5FindAuxiliary194034,6847734
static int fts5FindRankFunction(Fts5Cursor *pCsr){fts5FindRankFunction194046,6848038
static int fts5CursorParseRank(fts5CursorParseRank194096,6849494
static i64 fts5GetRowidLimit(sqlite3_value *pVal, i64 iDefault){fts5GetRowidLimit194133,6850423
static int fts5FilterMethod(fts5FilterMethod194154,6850961
static int fts5EofMethod(sqlite3_vtab_cursor *pCursor){fts5EofMethod194292,6856579
static i64 fts5CursorRowid(Fts5Cursor *pCsr){fts5CursorRowid194300,6856795
static int fts5RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){fts5RowidMethod194318,6857340
static int fts5SeekCursor(Fts5Cursor *pCsr, int bErrormsg){fts5SeekCursor194349,6858134
static void fts5SetVtabError(Fts5Table *p, const char *zFormat, ...){fts5SetVtabError194381,6859108
static int fts5SpecialInsert(fts5SpecialInsert194404,6859963
static int fts5SpecialDelete(fts5SpecialDelete194459,6861787
static void fts5StorageInsert(fts5StorageInsert194472,6862107
static int fts5UpdateMethod(fts5UpdateMethod194502,6862938
static int fts5SyncMethod(sqlite3_vtab *pVtab){fts5SyncMethod194623,6867094
static int fts5BeginMethod(sqlite3_vtab *pVtab){fts5BeginMethod194637,6867456
static int fts5CommitMethod(sqlite3_vtab *pVtab){fts5CommitMethod194648,6867810
static int fts5RollbackMethod(sqlite3_vtab *pVtab){fts5RollbackMethod194658,6868171
static void *fts5ApiUserData(Fts5Context *pCtx){fts5ApiUserData194668,6868456
static int fts5ApiColumnCount(Fts5Context *pCtx){fts5ApiColumnCount194673,6868580
static int fts5ApiColumnTotalSize(fts5ApiColumnTotalSize194678,6868731
static int fts5ApiRowCount(Fts5Context *pCtx, i64 *pnRow){fts5ApiRowCount194688,6868988
static int fts5ApiTokenize(fts5ApiTokenize194694,6869202
static int fts5ApiPhraseCount(Fts5Context *pCtx){fts5ApiPhraseCount194707,6869565
static int fts5ApiPhraseSize(Fts5Context *pCtx, int iPhrase){fts5ApiPhraseSize194712,6869708
static int fts5ApiColumnText(fts5ApiColumnText194717,6869871
static int fts5CsrPoslist(fts5CsrPoslist194738,6870332
static int fts5CacheInstArray(Fts5Cursor *pCsr){fts5CacheInstArray194790,6871841
static int fts5ApiInstCount(Fts5Context *pCtx, int *pnInst){fts5ApiInstCount194857,6873683
static int fts5ApiInst(fts5ApiInst194867,6873960
static sqlite3_int64 fts5ApiRowid(Fts5Context *pCtx){fts5ApiRowid194896,6874635
static int fts5ColumnSizeCb(fts5ColumnSizeCb194900,6874737
static int fts5ApiColumnSize(Fts5Context *pCtx, int iCol, int *pnToken){fts5ApiColumnSize194917,6875275
static int fts5ApiSetAuxdata(fts5ApiSetAuxdata194970,6876754
static void *fts5ApiGetAuxdata(Fts5Context *pCtx, int bClear){fts5ApiGetAuxdata195005,6877722
static void fts5ApiPhraseNext(fts5ApiPhraseNext195025,6878103
static int fts5ApiPhraseFirst(fts5ApiPhraseFirst195047,6878569
static void fts5ApiPhraseNextColumn(fts5ApiPhraseNextColumn195065,6878952
static int fts5ApiPhraseFirstColumn(fts5ApiPhraseFirstColumn195095,6879654
static const Fts5ExtensionApi sFts5Api = {sFts5Api195143,6880842
static int fts5ApiQueryPhrase(fts5ApiQueryPhrase195169,6881395
static void fts5ApiInvoke(fts5ApiInvoke195206,6882431
static Fts5Cursor *fts5CursorFromCsrid(Fts5Global *pGlobal, i64 iCsrId){fts5CursorFromCsrid195219,6882703
static void fts5ApiCallback(fts5ApiCallback195227,6882907
static Fts5Index *sqlite3Fts5IndexFromCsrid(sqlite3Fts5IndexFromCsrid195259,6883686
static int fts5PoslistBlob(sqlite3_context *pCtx, Fts5Cursor *pCsr){fts5PoslistBlob195289,6884847
static int fts5ColumnMethod(fts5ColumnMethod195346,6886508
static int fts5FindFunctionMethod(fts5FindFunctionMethod195397,6888156
static int fts5RenameMethod(fts5RenameMethod195422,6888898
static int fts5SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){fts5SavepointMethod195435,6889244
static int fts5ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){fts5ReleaseMethod195448,6889625
static int fts5RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){fts5RollbackToMethod195461,6890037
static int fts5CreateAux(fts5CreateAux195472,6890438
static int fts5CreateTokenizer(fts5CreateTokenizer195511,6891721
static Fts5TokenizerModule *fts5LocateTokenizer(fts5LocateTokenizer195546,6892846
static int fts5FindTokenizer(fts5FindTokenizer195567,6893272
static int sqlite3Fts5GetTokenizer(sqlite3Fts5GetTokenizer195588,6893811
static void fts5ModuleDestroy(void *pCtx){fts5ModuleDestroy195620,6894522
static void fts5Fts5Func(fts5Fts5Func195640,6895037
static void fts5SourceIdFunc(fts5SourceIdFunc195657,6895590
static int fts5Init(sqlite3 *db){fts5Init195667,6895977
__declspec(dllexport)__declspec195750,6898990
__declspec(dllexport)__declspec195763,6899238
SQLITE_PRIVATE int sqlite3Fts5Init(sqlite3 *db){sqlite3Fts5Init195775,6899478
struct Fts5Storage {Fts5Storage195798,6899971
  Fts5Config *pConfig;pConfig195799,6899992
  Fts5Index *pIndex;pIndex195800,6900015
  int bTotalsValid;               /* True if nTotalRow/aTotalSize[] are valid */bTotalsValid195801,6900036
  i64 nTotalRow;                  /* Total number of rows in FTS table */nTotalRow195802,6900117
  i64 *aTotalSize;                /* Total sizes of each column */ aTotalSize195803,6900191
  sqlite3_stmt *aStmt[11];aStmt195804,6900259
#define FTS5_STMT_INSERT_CONTENT FTS5_STMT_INSERT_CONTENT195818,6900508
#define FTS5_STMT_REPLACE_CONTENT FTS5_STMT_REPLACE_CONTENT195819,6900544
#define FTS5_STMT_DELETE_CONTENT FTS5_STMT_DELETE_CONTENT195820,6900580
#define FTS5_STMT_REPLACE_DOCSIZE FTS5_STMT_REPLACE_DOCSIZE195821,6900616
#define FTS5_STMT_DELETE_DOCSIZE FTS5_STMT_DELETE_DOCSIZE195822,6900653
#define FTS5_STMT_LOOKUP_DOCSIZE FTS5_STMT_LOOKUP_DOCSIZE195823,6900689
#define FTS5_STMT_REPLACE_CONFIG FTS5_STMT_REPLACE_CONFIG195824,6900725
#define FTS5_STMT_SCAN FTS5_STMT_SCAN195825,6900760
static int fts5StorageGetStmt(fts5StorageGetStmt195833,6901017
static int fts5ExecPrintf(fts5ExecPrintf195932,6904156
static int sqlite3Fts5DropAll(Fts5Config *pConfig){sqlite3Fts5DropAll195960,6904654
static void fts5StorageRenameOne(fts5StorageRenameOne195984,6905396
static int sqlite3Fts5StorageRename(Fts5Storage *pStorage, const char *zName){sqlite3Fts5StorageRename195998,6905896
static int sqlite3Fts5CreateTable(sqlite3Fts5CreateTable196018,6906584
static int sqlite3Fts5StorageOpen(sqlite3Fts5StorageOpen196053,6907647
static int sqlite3Fts5StorageClose(Fts5Storage *p){sqlite3Fts5StorageClose196119,6909515
typedef struct Fts5InsertCtx Fts5InsertCtx;Fts5InsertCtx196134,6909777
struct Fts5InsertCtx {Fts5InsertCtx196135,6909821
  Fts5Storage *pStorage;pStorage196136,6909844
  int iCol;iCol196137,6909869
  int szCol;                      /* Size of column value in tokens */szCol196138,6909881
static int fts5StorageInsertCallback(fts5StorageInsertCallback196144,6910034
static int fts5StorageDeleteFromIndex(fts5StorageDeleteFromIndex196167,6910976
static int fts5StorageInsertDocsize(fts5StorageInsertDocsize196225,6912695
static int fts5StorageLoadTotals(Fts5Storage *p, int bCache){fts5StorageLoadTotals196254,6913676
static int fts5StorageSaveTotals(Fts5Storage *p){fts5StorageSaveTotals196270,6914126
static int sqlite3Fts5StorageDelete(Fts5Storage *p, i64 iDel, sqlite3_value **apVal){sqlite3Fts5StorageDelete196292,6914612
static int sqlite3Fts5StorageDeleteAll(Fts5Storage *p){sqlite3Fts5StorageDeleteAll196338,6915752
static int sqlite3Fts5StorageRebuild(Fts5Storage *p){sqlite3Fts5StorageRebuild196367,6916578
static int sqlite3Fts5StorageOptimize(Fts5Storage *p){sqlite3Fts5StorageOptimize196419,6917993
static int sqlite3Fts5StorageMerge(Fts5Storage *p, int nMerge){sqlite3Fts5StorageMerge196423,6918097
static int sqlite3Fts5StorageReset(Fts5Storage *p){sqlite3Fts5StorageReset196427,6918215
static int fts5StorageNewRowid(Fts5Storage *p, i64 *piRowid){fts5StorageNewRowid196440,6918706
static int sqlite3Fts5StorageContentInsert(sqlite3Fts5StorageContentInsert196461,6919272
static int sqlite3Fts5StorageIndexInsert(sqlite3Fts5StorageIndexInsert196496,6920270
static int fts5StorageCount(Fts5Storage *p, const char *zSuffix, i64 *pnRow){fts5StorageCount196543,6921575
typedef struct Fts5IntegrityCtx Fts5IntegrityCtx;Fts5IntegrityCtx196571,6922235
struct Fts5IntegrityCtx {Fts5IntegrityCtx196572,6922285
  i64 iRowid;iRowid196573,6922311
  int iCol;iCol196574,6922325
  int szCol;szCol196575,6922337
  u64 cksum;cksum196576,6922350
  Fts5Termset *pTermset;pTermset196577,6922363
  Fts5Config *pConfig;pConfig196578,6922388
static int fts5StorageIntegrityCallback(fts5StorageIntegrityCallback196585,6922472
static int sqlite3Fts5StorageIntegrity(Fts5Storage *p){sqlite3Fts5StorageIntegrity196655,6924468
static int sqlite3Fts5StorageStmt(sqlite3Fts5StorageStmt196756,6927923
static void sqlite3Fts5StorageStmtRelease(sqlite3Fts5StorageStmtRelease196780,6928525
static int fts5StorageDecodeSizeArray(fts5StorageDecodeSizeArray196797,6928866
static int sqlite3Fts5StorageDocsize(Fts5Storage *p, i64 iRowid, int *aCol){sqlite3Fts5StorageDocsize196818,6929493
static int sqlite3Fts5StorageSize(Fts5Storage *p, int iCol, i64 *pnToken){sqlite3Fts5StorageSize196844,6930340
static int sqlite3Fts5StorageRowCount(Fts5Storage *p, i64 *pnRow){sqlite3Fts5StorageRowCount196862,6930753
static int sqlite3Fts5StorageSync(Fts5Storage *p, int bCommit){sqlite3Fts5StorageSync196873,6930988
static int sqlite3Fts5StorageRollback(Fts5Storage *p){sqlite3Fts5StorageRollback196882,6931245
static int sqlite3Fts5StorageConfigValue(sqlite3Fts5StorageConfigValue196887,6931372
static unsigned char aAsciiTokenChar[128] = {aAsciiTokenChar196939,6932746
typedef struct AsciiTokenizer AsciiTokenizer;AsciiTokenizer196950,6933364
struct AsciiTokenizer {AsciiTokenizer196951,6933410
  unsigned char aTokenChar[128];aTokenChar196952,6933434
static void fts5AsciiAddExceptions(fts5AsciiAddExceptions196955,6933471
static void fts5AsciiDelete(Fts5Tokenizer *p){fts5AsciiDelete196971,6933751
static int fts5AsciiCreate(fts5AsciiCreate196978,6933858
static void asciiFold(char *aOut, const char *aIn, int nByte){asciiFold197019,6934833
static int fts5AsciiTokenize(fts5AsciiTokenize197031,6935067
static const unsigned char sqlite3Utf8Trans1[] = {sqlite3Utf8Trans1197100,6936713
#define READ_UTF8(READ_UTF8197111,6937168
#define WRITE_UTF8(WRITE_UTF8197124,6937784
typedef struct Unicode61Tokenizer Unicode61Tokenizer;Unicode61Tokenizer197146,6938854
struct Unicode61Tokenizer {Unicode61Tokenizer197147,6938908
  unsigned char aTokenChar[128];  /* ASCII range token characters */aTokenChar197148,6938936
  char *aFold;                    /* Buffer to fold text into */aFold197149,6939005
  int nFold;                      /* Size of aFold[] in bytes */nFold197150,6939070
  int bRemoveDiacritic;           /* True if remove_diacritics=1 is set */bRemoveDiacritic197151,6939135
  int nException;nException197152,6939210
  int *aiException;aiException197153,6939228
static int fts5UnicodeAddExceptions(fts5UnicodeAddExceptions197156,6939252
static int fts5UnicodeIsException(Unicode61Tokenizer *p, int iCode){fts5UnicodeIsException197205,6940721
static void fts5UnicodeDelete(Fts5Tokenizer *pTok){fts5UnicodeDelete197229,6941166
static int fts5UnicodeCreate(fts5UnicodeCreate197242,6941428
static int fts5UnicodeIsAlnum(Unicode61Tokenizer *p, int iCode){fts5UnicodeIsAlnum197300,6943086
static int fts5UnicodeTokenize(fts5UnicodeTokenize197305,6943296
#define FTS5_PORTER_MAX_TOKEN FTS5_PORTER_MAX_TOKEN197415,6946528
typedef struct PorterTokenizer PorterTokenizer;PorterTokenizer197417,6946562
struct PorterTokenizer {PorterTokenizer197418,6946610
  fts5_tokenizer tokenizer;       /* Parent tokenizer module */tokenizer197419,6946635
  Fts5Tokenizer *pTokenizer;      /* Parent tokenizer instance */pTokenizer197420,6946699
  char aBuf[FTS5_PORTER_MAX_TOKEN + 64];aBuf197421,6946765
static void fts5PorterDelete(Fts5Tokenizer *pTok){fts5PorterDelete197427,6946848
static int fts5PorterCreate(fts5PorterCreate197440,6947102
typedef struct PorterContext PorterContext;PorterContext197476,6947959
struct PorterContext {PorterContext197477,6948003
  void *pCtx;pCtx197478,6948026
  int (*xToken)(void*, int, const char*, int, int, int);xToken197479,6948040
  char *aBuf;aBuf197480,6948097
typedef struct PorterRule PorterRule;PorterRule197483,6948115
struct PorterRule {PorterRule197484,6948153
  const char *zSuffix;zSuffix197485,6948173
  int nSuffix;nSuffix197486,6948196
  int (*xCond)(char *zStem, int nStem);xCond197487,6948211
  const char *zOutput;zOutput197488,6948251
  int nOutput;nOutput197489,6948274
static int fts5PorterIsVowel(char c, int bYIsVowel){fts5PorterIsVowel197518,6948916
static int fts5PorterGobbleVC(char *zStem, int nStem, int bPrevCons){fts5PorterGobbleVC197524,6949066
static int fts5Porter_MGt0(char *zStem, int nStem){fts5Porter_MGt0197541,6949472
static int fts5Porter_MGt1(char *zStem, int nStem){fts5Porter_MGt1197546,6949612
static int fts5Porter_MEq1(char *zStem, int nStem){fts5Porter_MEq1197556,6949842
static int fts5Porter_Ostar(char *zStem, int nStem){fts5Porter_Ostar197566,6950072
static int fts5Porter_MGt1_and_S_or_T(char *zStem, int nStem){fts5Porter_MGt1_and_S_or_T197583,6950525
static int fts5Porter_Vowel(char *zStem, int nStem){fts5Porter_Vowel197590,6950742
static int fts5PorterStep4(char *aBuf, int *pnBuf){fts5PorterStep4197606,6951122
static int fts5PorterStep1B2(char *aBuf, int *pnBuf){fts5PorterStep1B2197740,6954487
static int fts5PorterStep2(char *aBuf, int *pnBuf){fts5PorterStep2197774,6955187
static int fts5PorterStep3(char *aBuf, int *pnBuf){fts5PorterStep3197921,6959731
static int fts5PorterStep1B(char *aBuf, int *pnBuf){fts5PorterStep1B197987,6961302
static void fts5PorterStep1A(char *aBuf, int *pnBuf){fts5PorterStep1A198024,6962245
static int fts5PorterCb(fts5PorterCb198042,6962635
static int fts5PorterTokenize(fts5PorterTokenize198111,6964137
static int sqlite3Fts5TokenizerInit(fts5_api *pApi){sqlite3Fts5TokenizerInit198131,6964639
static int sqlite3Fts5UnicodeIsalnum(int c){sqlite3Fts5UnicodeIsalnum198185,6966048
static int fts5_remove_diacritic(int c){fts5_remove_diacritic198317,6973066
static int sqlite3Fts5UnicodeIsdiacritic(int c){sqlite3Fts5UnicodeIsdiacritic198367,6975112
static int sqlite3Fts5UnicodeFold(int c, int bRemoveDiacritic){sqlite3Fts5UnicodeFold198386,6975698
static int sqlite3Fts5GetVarint32(const unsigned char *p, u32 *v){sqlite3Fts5GetVarint32198542,6982554
#define SLOT_2_0 SLOT_2_0198613,6984099
#define SLOT_4_2_0 SLOT_4_2_0198614,6984131
static u8 sqlite3Fts5GetVarint(const unsigned char *p, u64 *v){sqlite3Fts5GetVarint198620,6984305
# define FTS5_NOINLINE FTS5_NOINLINE198799,6987478
# define FTS5_NOINLINEFTS5_NOINLINE198801,6987523
static int FTS5_NOINLINE fts5PutVarint64(unsigned char *p, u64 v){fts5PutVarint64198814,6987978
static int sqlite3Fts5PutVarint(unsigned char *p, u64 v){sqlite3Fts5PutVarint198839,6988443
static int sqlite3Fts5GetVarintLen(u32 iVal){sqlite3Fts5GetVarintLen198853,6988677
typedef struct Fts5VocabTable Fts5VocabTable;Fts5VocabTable198902,6990186
typedef struct Fts5VocabCursor Fts5VocabCursor;Fts5VocabCursor198903,6990232
struct Fts5VocabTable {Fts5VocabTable198905,6990281
  sqlite3_vtab base;base198906,6990305
  char *zFts5Tbl;                 /* Name of fts5 table */zFts5Tbl198907,6990326
  char *zFts5Db;                  /* Db containing fts5 table */zFts5Db198908,6990385
  sqlite3 *db;                    /* Database handle */db198909,6990450
  Fts5Global *pGlobal;            /* FTS5 global object for this database */pGlobal198910,6990506
  int eType;                      /* FTS5_VOCAB_COL or ROW */eType198911,6990583
struct Fts5VocabCursor {Fts5VocabCursor198914,6990649
  sqlite3_vtab_cursor base;base198915,6990674
  sqlite3_stmt *pStmt;            /* Statement holding lock on pIndex */pStmt198916,6990702
  Fts5Index *pIndex;              /* Associated FTS5 index */pIndex198917,6990775
  int bEof;                       /* True if this cursor is at EOF */bEof198919,6990838
  Fts5IndexIter *pIter;           /* Term/rowid iterator object */pIter198920,6990908
  int nLeTerm;                    /* Size of zLeTerm in bytes */nLeTerm198922,6990976
  char *zLeTerm;                  /* (term <= $zLeTerm) paramater, or NULL */zLeTerm198923,6991041
  Fts5Config *pConfig;            /* Fts5 table configuration */pConfig198926,6991164
  int iCol;iCol198927,6991229
  i64 *aCnt;aCnt198928,6991241
  i64 *aDoc;aDoc198929,6991254
  i64 rowid;                      /* This table's current rowid value */rowid198932,6991321
  Fts5Buffer term;                /* Current value of 'term' column */term198933,6991394
#define FTS5_VOCAB_COL FTS5_VOCAB_COL198936,6991469
#define FTS5_VOCAB_ROW FTS5_VOCAB_ROW198937,6991497
#define FTS5_VOCAB_COL_SCHEMA FTS5_VOCAB_COL_SCHEMA198939,6991526
#define FTS5_VOCAB_ROW_SCHEMA FTS5_VOCAB_ROW_SCHEMA198940,6991579
#define FTS5_VOCAB_TERM_EQ FTS5_VOCAB_TERM_EQ198945,6991703
#define FTS5_VOCAB_TERM_GE FTS5_VOCAB_TERM_GE198946,6991735
#define FTS5_VOCAB_TERM_LE FTS5_VOCAB_TERM_LE198947,6991767
static int fts5VocabTableType(const char *zType, char **pzErr, int *peType){fts5VocabTableType198956,6992041
static int fts5VocabDisconnectMethod(sqlite3_vtab *pVtab){fts5VocabDisconnectMethod198982,6992628
static int fts5VocabDestroyMethod(sqlite3_vtab *pVtab){fts5VocabDestroyMethod198991,6992827
static int fts5VocabInitVtab(fts5VocabInitVtab199018,6993518
static int fts5VocabConnectMethod(fts5VocabConnectMethod199079,6995557
static int fts5VocabCreateMethod(fts5VocabCreateMethod199089,6996084
static int fts5VocabBestIndexMethod(fts5VocabBestIndexMethod199103,6996662
static int fts5VocabOpenMethod(fts5VocabOpenMethod199165,6998477
static void fts5VocabResetCursor(Fts5VocabCursor *pCsr){fts5VocabResetCursor199223,6999984
static int fts5VocabCloseMethod(sqlite3_vtab_cursor *pCursor){fts5VocabCloseMethod199236,7000326
static int fts5VocabNextMethod(sqlite3_vtab_cursor *pCursor){fts5VocabNextMethod199249,7000647
static int fts5VocabFilterMethod(fts5VocabFilterMethod199365,7004196
static int fts5VocabEofMethod(sqlite3_vtab_cursor *pCursor){fts5VocabEofMethod199427,7005927
static int fts5VocabColumnMethod(fts5VocabColumnMethod199432,7006065
static int fts5VocabRowidMethod(fts5VocabRowidMethod199476,7007385
static int sqlite3Fts5VocabInit(Fts5Global *pGlobal, sqlite3 *db){sqlite3Fts5VocabInit199485,7007578

Makefile,1082
SRC=amt-db-funcs.c cli-args.c main.c sqlite3.cSRC12,438
OUTNAME=amtOUTNAME13,486
CC=gccCC16,527
ARCH=32ARCH18,566
CFLAGS=$(CFLAGS_$(ARCH))CFLAGS20,639
EXE_END=.exeEXE_END22,756
CFLAGS_32=-g -Wall -m32 -pg -std=gnu11CFLAGS_3226,873
CFLAGS_64=-g -Wall -m64 -pg -std=gnu11CFLAGS_6428,977
N-CFLAGS_32=-m32 -mfpmath=sse -flto -funroll-loops -Wall -std=gnu11N-CFLAGS_3232,1105
N-CFLAGS_64=-m64 -flto -funroll-loops -Wall -std=gnu11N-CFLAGS_6433,1174
OPT-CFLAGS_32=-m32 -mfpmath=sse -flto -march=native -funroll-loops -Wall -std=gnu11OPT-CFLAGS_3235,1310
OPT-CFLAGS_64=-flto -funroll-loops -march=native -Wall -m64 -std=gnu11OPT-CFLAGS_6436,1395
LIBFLAGS=-lpthread -ldl -lreadlineLIBFLAGS38,1487
RM = delRM41,1575
uname_S := $(shell sh -c 'uname -s 2>/dev/null || echo not')uname_S45,1697
	RM = rmRM50,1886
	ARCH := $(shell getconf LONG_BIT)ARCH52,1940
	CFLAGS=$(CFLAGS_$(ARCH))CFLAGS54,2037
	EXE_END=EXE_END56,2127
	RM = rmRM61,2276
	ARCH := $(shell getconf LONG_BIT)ARCH63,2330
	CFLAGS=$(CFLAGS_$(ARCH))CFLAGS65,2427
	EXE_END=EXE_END67,2520

cli-args.c,61
void get_cli_args(int argc, char **argv)get_cli_args16,402

main.c,198
int main(int argc, char **argv)main12,325
void exit_cleanup(void)exit_cleanup75,1571
void print_start_screen(char *prog_name)print_start_screen101,2085
void show_help(void)show_help119,2434

amt-db-funcs.c,342
int get_rec_count(void)get_rec_count21,815
void check4DB(void)check4DB42,1285
char *get_last_acronym(void)get_last_acronym85,2730
int do_acronym_search(char *findme)do_acronym_search120,3650
int new_acronym(void)new_acronym169,5359
int del_acro_rec(int recordid)del_acro_rec266,8623
void get_acro_src(void)get_acro_src356,12152

cli-args.h,38
#define CLI_ARGS_H_ CLI_ARGS_H_4,89

main.h,865
#define MAIN_H_ MAIN_H_27,887
char *dbfile="";	    /* path and name of acronyms database filename */dbfile39,1232
sqlite3 *db=NULL;	    /* handle to the database */db40,1303
int rc=0;		    /* returned result codes from calling SQLite functions */rc41,1354
const char *data=NULL;	    /* data returned from SQL stmt run */data42,1427
sqlite3_stmt *stmt=NULL;    /* preprepared SQL query statement */stmt43,1492
char appversion[]="0.4.1";  /* set the version of the app here */appversion44,1558
int help=0;		    /* control help outputs request 0 == off | 1 == on */help45,1624
char *findme=NULL;	    /* string request on command line for acronym search */findme46,1695
int recordid=-1;	    /* database record id (rowid) used to delete records */recordid47,1774
int newrec=0;		    /* request to add a new record 0 == off | 1 == on */newrec48,1851
