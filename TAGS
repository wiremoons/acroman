
amt-db-funcs.h,45
#define AMT_DB_FUNCS_H_AMT_DB_FUNCS_H_4,88

cli-args.h,37
#define CLI_ARGS_H_CLI_ARGS_H_4,89

main.h,962
#define MAIN_H_MAIN_H_28,954
char *dbfile = "";		/* path and name of acronyms database filename */dbfile40,1293
sqlite3 *db = NULL;		/* handle to the database */db41,1363
int rc = 0;			/* returned result codes from calling SQLite functions */rc42,1413
const char *data = NULL;	/* data returned from SQL stmt run */data43,1485
sqlite3_stmt *stmt = NULL;	/* preprepared SQL query statement */stmt44,1548
char appversion[] = "0.5.1";	/* set the version of the app here */appversion45,1613
int help = 0;			/* control help outputs request 0 == off | 1 == on */help46,1680
char *findme = NULL;		/* string request on command line for acronym search */findme47,1750
int del_rec_id = -1;		/* database record id (rowid) used to delete records */del_rec_id48,1828
int newrec = 0;			/* request to add a new record 0 == off | 1 == on */newrec49,1906
int update_rec_id = -1;		/* database record id (rowid) used to update records */update_rec_id50,1977

sqlite3.h,44755
#define SQLITE3_HSQLITE3_H34,1510
# define SQLITE_EXTERN SQLITE_EXTERN49,1787
# define SQLITE_APISQLITE_API52,1843
# define SQLITE_CDECLSQLITE_CDECL55,1891
# define SQLITE_APICALLSQLITE_APICALL58,1943
# define SQLITE_STDCALL SQLITE_STDCALL61,1997
# define SQLITE_CALLBACKSQLITE_CALLBACK64,2067
# define SQLITE_SYSAPISQLITE_SYSAPI67,2121
#define SQLITE_DEPRECATEDSQLITE_DEPRECATED83,2791
#define SQLITE_EXPERIMENTALSQLITE_EXPERIMENTAL84,2817
# undef SQLITE_VERSIONSQLITE_VERSION90,2945
# undef SQLITE_VERSION_NUMBERSQLITE_VERSION_NUMBER93,3004
#define SQLITE_VERSION SQLITE_VERSION124,4439
#define SQLITE_VERSION_NUMBER SQLITE_VERSION_NUMBER125,4478
#define SQLITE_SOURCE_ID SQLITE_SOURCE_ID126,4516
SQLITE_API SQLITE_EXTERN const char sqlite3_version[];sqlite3_version158,6118
typedef struct sqlite3 sqlite3;sqlite3242,9971
  typedef SQLITE_INT64_TYPE sqlite_int64;sqlite_int64261,10694
    typedef SQLITE_UINT64_TYPE sqlite_uint64;sqlite_uint64263,10763
    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;sqlite_uint64265,10818
  typedef __int64 sqlite_int64;sqlite_int64268,10929
  typedef unsigned __int64 sqlite_uint64;sqlite_uint64269,10961
  typedef long long int sqlite_int64;sqlite_int64271,11009
  typedef unsigned long long int sqlite_uint64;sqlite_uint64272,11047
typedef sqlite_int64 sqlite3_int64;sqlite3_int64274,11102
typedef sqlite_uint64 sqlite3_uint64;sqlite3_uint64275,11138
# define double double282,11326
typedef int (*sqlite3_callback)(void*,int,char**, char**);sqlite3_callback335,13740
#define SQLITE_OK SQLITE_OK418,17688
#define SQLITE_ERROR SQLITE_ERROR420,17775
#define SQLITE_INTERNAL SQLITE_INTERNAL421,17843
#define SQLITE_PERM SQLITE_PERM422,17912
#define SQLITE_ABORT SQLITE_ABORT423,17975
#define SQLITE_BUSY SQLITE_BUSY424,18049
#define SQLITE_LOCKED SQLITE_LOCKED425,18115
#define SQLITE_NOMEM SQLITE_NOMEM426,18187
#define SQLITE_READONLY SQLITE_READONLY427,18243
#define SQLITE_INTERRUPT SQLITE_INTERRUPT428,18318
#define SQLITE_IOERR SQLITE_IOERR429,18399
#define SQLITE_CORRUPT SQLITE_CORRUPT430,18474
#define SQLITE_NOTFOUND SQLITE_NOTFOUND431,18549
#define SQLITE_FULL SQLITE_FULL432,18628
#define SQLITE_CANTOPEN SQLITE_CANTOPEN433,18708
#define SQLITE_PROTOCOL SQLITE_PROTOCOL434,18779
#define SQLITE_EMPTY SQLITE_EMPTY435,18846
#define SQLITE_SCHEMA SQLITE_SCHEMA436,18902
#define SQLITE_TOOBIG SQLITE_TOOBIG437,18968
#define SQLITE_CONSTRAINT SQLITE_CONSTRAINT438,19040
#define SQLITE_MISMATCH SQLITE_MISMATCH439,19112
#define SQLITE_MISUSE SQLITE_MISUSE440,19169
#define SQLITE_NOLFS SQLITE_NOLFS441,19232
#define SQLITE_AUTH SQLITE_AUTH442,19309
#define SQLITE_FORMAT SQLITE_FORMAT443,19368
#define SQLITE_RANGE SQLITE_RANGE444,19438
#define SQLITE_NOTADB SQLITE_NOTADB445,19519
#define SQLITE_NOTICE SQLITE_NOTICE446,19597
#define SQLITE_WARNING SQLITE_WARNING447,19668
#define SQLITE_ROW SQLITE_ROW448,19734
#define SQLITE_DONE SQLITE_DONE449,19809
#define SQLITE_IOERR_READ SQLITE_IOERR_READ469,20733
#define SQLITE_IOERR_SHORT_READ SQLITE_IOERR_SHORT_READ470,20796
#define SQLITE_IOERR_WRITE SQLITE_IOERR_WRITE471,20859
#define SQLITE_IOERR_FSYNC SQLITE_IOERR_FSYNC472,20922
#define SQLITE_IOERR_DIR_FSYNC SQLITE_IOERR_DIR_FSYNC473,20985
#define SQLITE_IOERR_TRUNCATE SQLITE_IOERR_TRUNCATE474,21048
#define SQLITE_IOERR_FSTAT SQLITE_IOERR_FSTAT475,21111
#define SQLITE_IOERR_UNLOCK SQLITE_IOERR_UNLOCK476,21174
#define SQLITE_IOERR_RDLOCK SQLITE_IOERR_RDLOCK477,21237
#define SQLITE_IOERR_DELETE SQLITE_IOERR_DELETE478,21300
#define SQLITE_IOERR_BLOCKED SQLITE_IOERR_BLOCKED479,21364
#define SQLITE_IOERR_NOMEM SQLITE_IOERR_NOMEM480,21428
#define SQLITE_IOERR_ACCESS SQLITE_IOERR_ACCESS481,21492
#define SQLITE_IOERR_CHECKRESERVEDLOCK SQLITE_IOERR_CHECKRESERVEDLOCK482,21556
#define SQLITE_IOERR_LOCK SQLITE_IOERR_LOCK483,21620
#define SQLITE_IOERR_CLOSE SQLITE_IOERR_CLOSE484,21684
#define SQLITE_IOERR_DIR_CLOSE SQLITE_IOERR_DIR_CLOSE485,21748
#define SQLITE_IOERR_SHMOPEN SQLITE_IOERR_SHMOPEN486,21812
#define SQLITE_IOERR_SHMSIZE SQLITE_IOERR_SHMSIZE487,21876
#define SQLITE_IOERR_SHMLOCK SQLITE_IOERR_SHMLOCK488,21940
#define SQLITE_IOERR_SHMMAP SQLITE_IOERR_SHMMAP489,22004
#define SQLITE_IOERR_SEEK SQLITE_IOERR_SEEK490,22068
#define SQLITE_IOERR_DELETE_NOENT SQLITE_IOERR_DELETE_NOENT491,22132
#define SQLITE_IOERR_MMAP SQLITE_IOERR_MMAP492,22196
#define SQLITE_IOERR_GETTEMPPATH SQLITE_IOERR_GETTEMPPATH493,22260
#define SQLITE_IOERR_CONVPATH SQLITE_IOERR_CONVPATH494,22324
#define SQLITE_IOERR_VNODE SQLITE_IOERR_VNODE495,22388
#define SQLITE_IOERR_AUTH SQLITE_IOERR_AUTH496,22452
#define SQLITE_LOCKED_SHAREDCACHE SQLITE_LOCKED_SHAREDCACHE497,22516
#define SQLITE_BUSY_RECOVERY SQLITE_BUSY_RECOVERY498,22581
#define SQLITE_BUSY_SNAPSHOT SQLITE_BUSY_SNAPSHOT499,22646
#define SQLITE_CANTOPEN_NOTEMPDIR SQLITE_CANTOPEN_NOTEMPDIR500,22711
#define SQLITE_CANTOPEN_ISDIR SQLITE_CANTOPEN_ISDIR501,22777
#define SQLITE_CANTOPEN_FULLPATH SQLITE_CANTOPEN_FULLPATH502,22843
#define SQLITE_CANTOPEN_CONVPATH SQLITE_CANTOPEN_CONVPATH503,22909
#define SQLITE_CORRUPT_VTAB SQLITE_CORRUPT_VTAB504,22975
#define SQLITE_READONLY_RECOVERY SQLITE_READONLY_RECOVERY505,23040
#define SQLITE_READONLY_CANTLOCK SQLITE_READONLY_CANTLOCK506,23106
#define SQLITE_READONLY_ROLLBACK SQLITE_READONLY_ROLLBACK507,23172
#define SQLITE_READONLY_DBMOVED SQLITE_READONLY_DBMOVED508,23238
#define SQLITE_ABORT_ROLLBACK SQLITE_ABORT_ROLLBACK509,23304
#define SQLITE_CONSTRAINT_CHECK SQLITE_CONSTRAINT_CHECK510,23367
#define SQLITE_CONSTRAINT_COMMITHOOK SQLITE_CONSTRAINT_COMMITHOOK511,23435
#define SQLITE_CONSTRAINT_FOREIGNKEY SQLITE_CONSTRAINT_FOREIGNKEY512,23503
#define SQLITE_CONSTRAINT_FUNCTION SQLITE_CONSTRAINT_FUNCTION513,23571
#define SQLITE_CONSTRAINT_NOTNULL SQLITE_CONSTRAINT_NOTNULL514,23639
#define SQLITE_CONSTRAINT_PRIMARYKEY SQLITE_CONSTRAINT_PRIMARYKEY515,23707
#define SQLITE_CONSTRAINT_TRIGGER SQLITE_CONSTRAINT_TRIGGER516,23775
#define SQLITE_CONSTRAINT_UNIQUE SQLITE_CONSTRAINT_UNIQUE517,23843
#define SQLITE_CONSTRAINT_VTAB SQLITE_CONSTRAINT_VTAB518,23911
#define SQLITE_CONSTRAINT_ROWID SQLITE_CONSTRAINT_ROWID519,23979
#define SQLITE_NOTICE_RECOVER_WAL SQLITE_NOTICE_RECOVER_WAL520,24047
#define SQLITE_NOTICE_RECOVER_ROLLBACK SQLITE_NOTICE_RECOVER_ROLLBACK521,24111
#define SQLITE_WARNING_AUTOINDEX SQLITE_WARNING_AUTOINDEX522,24175
#define SQLITE_AUTH_USER SQLITE_AUTH_USER523,24240
#define SQLITE_OK_LOAD_PERMANENTLY SQLITE_OK_LOAD_PERMANENTLY524,24302
#define SQLITE_OPEN_READONLY SQLITE_OPEN_READONLY533,24581
#define SQLITE_OPEN_READWRITE SQLITE_OPEN_READWRITE534,24661
#define SQLITE_OPEN_CREATE SQLITE_OPEN_CREATE535,24741
#define SQLITE_OPEN_DELETEONCLOSE SQLITE_OPEN_DELETEONCLOSE536,24821
#define SQLITE_OPEN_EXCLUSIVE SQLITE_OPEN_EXCLUSIVE537,24885
#define SQLITE_OPEN_AUTOPROXY SQLITE_OPEN_AUTOPROXY538,24949
#define SQLITE_OPEN_URI SQLITE_OPEN_URI539,25013
#define SQLITE_OPEN_MEMORY SQLITE_OPEN_MEMORY540,25093
#define SQLITE_OPEN_MAIN_DB SQLITE_OPEN_MAIN_DB541,25173
#define SQLITE_OPEN_TEMP_DB SQLITE_OPEN_TEMP_DB542,25237
#define SQLITE_OPEN_TRANSIENT_DB SQLITE_OPEN_TRANSIENT_DB543,25301
#define SQLITE_OPEN_MAIN_JOURNAL SQLITE_OPEN_MAIN_JOURNAL544,25365
#define SQLITE_OPEN_TEMP_JOURNAL SQLITE_OPEN_TEMP_JOURNAL545,25429
#define SQLITE_OPEN_SUBJOURNAL SQLITE_OPEN_SUBJOURNAL546,25493
#define SQLITE_OPEN_MASTER_JOURNAL SQLITE_OPEN_MASTER_JOURNAL547,25557
#define SQLITE_OPEN_NOMUTEX SQLITE_OPEN_NOMUTEX548,25621
#define SQLITE_OPEN_FULLMUTEX SQLITE_OPEN_FULLMUTEX549,25701
#define SQLITE_OPEN_SHAREDCACHE SQLITE_OPEN_SHAREDCACHE550,25781
#define SQLITE_OPEN_PRIVATECACHE SQLITE_OPEN_PRIVATECACHE551,25861
#define SQLITE_OPEN_WAL SQLITE_OPEN_WAL552,25941
#define SQLITE_IOCAP_ATOMIC SQLITE_IOCAP_ATOMIC584,27483
#define SQLITE_IOCAP_ATOMIC512 SQLITE_IOCAP_ATOMIC512585,27538
#define SQLITE_IOCAP_ATOMIC1K SQLITE_IOCAP_ATOMIC1K586,27593
#define SQLITE_IOCAP_ATOMIC2K SQLITE_IOCAP_ATOMIC2K587,27648
#define SQLITE_IOCAP_ATOMIC4K SQLITE_IOCAP_ATOMIC4K588,27703
#define SQLITE_IOCAP_ATOMIC8K SQLITE_IOCAP_ATOMIC8K589,27758
#define SQLITE_IOCAP_ATOMIC16K SQLITE_IOCAP_ATOMIC16K590,27813
#define SQLITE_IOCAP_ATOMIC32K SQLITE_IOCAP_ATOMIC32K591,27868
#define SQLITE_IOCAP_ATOMIC64K SQLITE_IOCAP_ATOMIC64K592,27923
#define SQLITE_IOCAP_SAFE_APPEND SQLITE_IOCAP_SAFE_APPEND593,27978
#define SQLITE_IOCAP_SEQUENTIAL SQLITE_IOCAP_SEQUENTIAL594,28033
#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN595,28088
#define SQLITE_IOCAP_POWERSAFE_OVERWRITE SQLITE_IOCAP_POWERSAFE_OVERWRITE596,28143
#define SQLITE_IOCAP_IMMUTABLE SQLITE_IOCAP_IMMUTABLE597,28198
#define SQLITE_LOCK_NONE SQLITE_LOCK_NONE606,28458
#define SQLITE_LOCK_SHARED SQLITE_LOCK_SHARED607,28494
#define SQLITE_LOCK_RESERVED SQLITE_LOCK_RESERVED608,28530
#define SQLITE_LOCK_PENDING SQLITE_LOCK_PENDING609,28566
#define SQLITE_LOCK_EXCLUSIVE SQLITE_LOCK_EXCLUSIVE610,28602
#define SQLITE_SYNC_NORMAL SQLITE_SYNC_NORMAL638,29941
#define SQLITE_SYNC_FULL SQLITE_SYNC_FULL639,29983
#define SQLITE_SYNC_DATAONLY SQLITE_SYNC_DATAONLY640,30025
typedef struct sqlite3_file sqlite3_file;sqlite3_file653,30495
struct sqlite3_file {sqlite3_file654,30537
  const struct sqlite3_io_methods *pMethods;  /* Methods for an open file */pMethods655,30559
typedef struct sqlite3_io_methods sqlite3_io_methods;sqlite3_io_methods751,34969
struct sqlite3_io_methods {sqlite3_io_methods752,35023
  int iVersion;iVersion753,35051
  int (*xClose)(sqlite3_file*);xClose754,35067
  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);xRead755,35099
  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);xWrite756,35168
  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);xTruncate757,35244
  int (*xSync)(sqlite3_file*, int flags);xSync758,35299
  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);xFileSize759,35341
  int (*xLock)(sqlite3_file*, int);xLock760,35398
  int (*xUnlock)(sqlite3_file*, int);xUnlock761,35434
  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);xCheckReservedLock762,35472
  int (*xFileControl)(sqlite3_file*, int op, void *pArg);xFileControl763,35530
  int (*xSectorSize)(sqlite3_file*);xSectorSize764,35588
  int (*xDeviceCharacteristics)(sqlite3_file*);xDeviceCharacteristics765,35625
  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);xShmMap767,35719
  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);xShmLock768,35793
  void (*xShmBarrier)(sqlite3_file*);xShmBarrier769,35857
  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);xShmUnmap770,35895
  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);xFetch772,35992
  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);xUnfetch773,36066
#define SQLITE_FCNTL_LOCKSTATE SQLITE_FCNTL_LOCKSTATE1017,49572
#define SQLITE_FCNTL_GET_LOCKPROXYFILE SQLITE_FCNTL_GET_LOCKPROXYFILE1018,49619
#define SQLITE_FCNTL_SET_LOCKPROXYFILE SQLITE_FCNTL_SET_LOCKPROXYFILE1019,49666
#define SQLITE_FCNTL_LAST_ERRNO SQLITE_FCNTL_LAST_ERRNO1020,49713
#define SQLITE_FCNTL_SIZE_HINT SQLITE_FCNTL_SIZE_HINT1021,49760
#define SQLITE_FCNTL_CHUNK_SIZE SQLITE_FCNTL_CHUNK_SIZE1022,49807
#define SQLITE_FCNTL_FILE_POINTER SQLITE_FCNTL_FILE_POINTER1023,49854
#define SQLITE_FCNTL_SYNC_OMITTED SQLITE_FCNTL_SYNC_OMITTED1024,49901
#define SQLITE_FCNTL_WIN32_AV_RETRY SQLITE_FCNTL_WIN32_AV_RETRY1025,49948
#define SQLITE_FCNTL_PERSIST_WAL SQLITE_FCNTL_PERSIST_WAL1026,49995
#define SQLITE_FCNTL_OVERWRITE SQLITE_FCNTL_OVERWRITE1027,50042
#define SQLITE_FCNTL_VFSNAME SQLITE_FCNTL_VFSNAME1028,50089
#define SQLITE_FCNTL_POWERSAFE_OVERWRITE SQLITE_FCNTL_POWERSAFE_OVERWRITE1029,50136
#define SQLITE_FCNTL_PRAGMA SQLITE_FCNTL_PRAGMA1030,50183
#define SQLITE_FCNTL_BUSYHANDLER SQLITE_FCNTL_BUSYHANDLER1031,50230
#define SQLITE_FCNTL_TEMPFILENAME SQLITE_FCNTL_TEMPFILENAME1032,50277
#define SQLITE_FCNTL_MMAP_SIZE SQLITE_FCNTL_MMAP_SIZE1033,50324
#define SQLITE_FCNTL_TRACE SQLITE_FCNTL_TRACE1034,50371
#define SQLITE_FCNTL_HAS_MOVED SQLITE_FCNTL_HAS_MOVED1035,50418
#define SQLITE_FCNTL_SYNC SQLITE_FCNTL_SYNC1036,50465
#define SQLITE_FCNTL_COMMIT_PHASETWO SQLITE_FCNTL_COMMIT_PHASETWO1037,50512
#define SQLITE_FCNTL_WIN32_SET_HANDLE SQLITE_FCNTL_WIN32_SET_HANDLE1038,50559
#define SQLITE_FCNTL_WAL_BLOCK SQLITE_FCNTL_WAL_BLOCK1039,50606
#define SQLITE_FCNTL_ZIPVFS SQLITE_FCNTL_ZIPVFS1040,50653
#define SQLITE_FCNTL_RBU SQLITE_FCNTL_RBU1041,50700
#define SQLITE_FCNTL_VFS_POINTER SQLITE_FCNTL_VFS_POINTER1042,50747
#define SQLITE_FCNTL_JOURNAL_POINTER SQLITE_FCNTL_JOURNAL_POINTER1043,50794
#define SQLITE_FCNTL_WIN32_GET_HANDLE SQLITE_FCNTL_WIN32_GET_HANDLE1044,50841
#define SQLITE_FCNTL_PDB SQLITE_FCNTL_PDB1045,50888
#define SQLITE_GET_LOCKPROXYFILE SQLITE_GET_LOCKPROXYFILE1048,50959
#define SQLITE_SET_LOCKPROXYFILE SQLITE_SET_LOCKPROXYFILE1049,51028
#define SQLITE_LAST_ERRNO SQLITE_LAST_ERRNO1050,51097
typedef struct sqlite3_mutex sqlite3_mutex;sqlite3_mutex1063,51506
typedef struct sqlite3_api_routines sqlite3_api_routines;sqlite3_api_routines1073,51835
typedef struct sqlite3_vfs sqlite3_vfs;sqlite3_vfs1232,59740
typedef void (*sqlite3_syscall_ptr)(void);sqlite3_syscall_ptr1233,59780
struct sqlite3_vfs {sqlite3_vfs1234,59823
  int iVersion;            /* Structure version number (currently 3) */iVersion1235,59844
  int szOsFile;            /* Size of subclassed sqlite3_file */szOsFile1236,59916
  int mxPathname;          /* Maximum file pathname length */mxPathname1237,59981
  sqlite3_vfs *pNext;      /* Next registered VFS */pNext1238,60043
  const char *zName;       /* Name of this virtual file system */zName1239,60096
  void *pAppData;          /* Pointer to application-specific data */pAppData1240,60162
  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,xOpen1241,60232
  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);xDelete1243,60338
  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);xAccess1244,60402
  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);xFullPathname1245,60478
  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);xDlOpen1246,60557
  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);xDlError1247,60614
  void (*xDlClose)(sqlite3_vfs*, void*);xDlClose1249,60742
  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);xRandomness1250,60783
  int (*xSleep)(sqlite3_vfs*, int microseconds);xSleep1251,60842
  int (*xCurrentTime)(sqlite3_vfs*, double*);xCurrentTime1252,60891
  int (*xGetLastError)(sqlite3_vfs*, int, char *);xGetLastError1253,60937
  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);xCurrentTimeInt641258,61131
  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);xSetSystemCall1263,61320
  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);xGetSystemCall1264,61399
  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);xNextSystemCall1265,61473
#define SQLITE_ACCESS_EXISTS SQLITE_ACCESS_EXISTS1293,62662
#define SQLITE_ACCESS_READWRITE SQLITE_ACCESS_READWRITE1294,62696
#define SQLITE_ACCESS_READ SQLITE_ACCESS_READ1295,62774
#define SQLITE_SHM_UNLOCK SQLITE_SHM_UNLOCK1319,63580
#define SQLITE_SHM_LOCK SQLITE_SHM_LOCK1320,63614
#define SQLITE_SHM_SHARED SQLITE_SHM_SHARED1321,63648
#define SQLITE_SHM_EXCLUSIVE SQLITE_SHM_EXCLUSIVE1322,63682
#define SQLITE_SHM_NLOCK SQLITE_SHM_NLOCK1332,63976
typedef struct sqlite3_mem_methods sqlite3_mem_methods;sqlite3_mem_methods1530,73829
struct sqlite3_mem_methods {sqlite3_mem_methods1531,73885
  void *(*xMalloc)(int);         /* Memory allocation function */xMalloc1532,73914
  void (*xFree)(void*);          /* Free a prior allocation */xFree1533,73980
  void *(*xRealloc)(void*,int);  /* Resize an allocation */xRealloc1534,74043
  int (*xSize)(void*);           /* Return the size of an allocation */xSize1535,74103
  int (*xRoundup)(int);          /* Round up request size to allocation size */xRoundup1536,74175
  int (*xInit)(void*);           /* Initialize the memory allocator */xInit1537,74255
  void (*xShutdown)(void*);      /* Deinitialize the memory allocator */xShutdown1538,74326
  void *pAppData;                /* Argument to xInit() and xShutdown() */pAppData1539,74399
#define SQLITE_CONFIG_SINGLETHREAD SQLITE_CONFIG_SINGLETHREAD1876,93442
#define SQLITE_CONFIG_MULTITHREAD SQLITE_CONFIG_MULTITHREAD1877,93491
#define SQLITE_CONFIG_SERIALIZED SQLITE_CONFIG_SERIALIZED1878,93540
#define SQLITE_CONFIG_MALLOC SQLITE_CONFIG_MALLOC1879,93589
#define SQLITE_CONFIG_GETMALLOC SQLITE_CONFIG_GETMALLOC1880,93655
#define SQLITE_CONFIG_SCRATCH SQLITE_CONFIG_SCRATCH1881,93721
#define SQLITE_CONFIG_PAGECACHE SQLITE_CONFIG_PAGECACHE1882,93787
#define SQLITE_CONFIG_HEAP SQLITE_CONFIG_HEAP1883,93853
#define SQLITE_CONFIG_MEMSTATUS SQLITE_CONFIG_MEMSTATUS1884,93924
#define SQLITE_CONFIG_MUTEX SQLITE_CONFIG_MUTEX1885,93977
#define SQLITE_CONFIG_GETMUTEX SQLITE_CONFIG_GETMUTEX1886,94045
#define SQLITE_CONFIG_LOOKASIDE SQLITE_CONFIG_LOOKASIDE1888,94180
#define SQLITE_CONFIG_PCACHE SQLITE_CONFIG_PCACHE1889,94233
#define SQLITE_CONFIG_GETPCACHE SQLITE_CONFIG_GETPCACHE1890,94284
#define SQLITE_CONFIG_LOG SQLITE_CONFIG_LOG1891,94335
#define SQLITE_CONFIG_URI SQLITE_CONFIG_URI1892,94393
#define SQLITE_CONFIG_PCACHE2 SQLITE_CONFIG_PCACHE21893,94442
#define SQLITE_CONFIG_GETPCACHE2 SQLITE_CONFIG_GETPCACHE21894,94512
#define SQLITE_CONFIG_COVERING_INDEX_SCAN SQLITE_CONFIG_COVERING_INDEX_SCAN1895,94582
#define SQLITE_CONFIG_SQLLOG SQLITE_CONFIG_SQLLOG1896,94638
#define SQLITE_CONFIG_MMAP_SIZE SQLITE_CONFIG_MMAP_SIZE1897,94698
#define SQLITE_CONFIG_WIN32_HEAPSIZE SQLITE_CONFIG_WIN32_HEAPSIZE1898,94772
#define SQLITE_CONFIG_PCACHE_HDRSZ SQLITE_CONFIG_PCACHE_HDRSZ1899,94834
#define SQLITE_CONFIG_PMASZ SQLITE_CONFIG_PMASZ1900,94895
#define SQLITE_CONFIG_STMTJRNL_SPILL SQLITE_CONFIG_STMTJRNL_SPILL1901,94966
#define SQLITE_DBCONFIG_MAINDBNAME SQLITE_DBCONFIG_MAINDBNAME2012,101163
#define SQLITE_DBCONFIG_LOOKASIDE SQLITE_DBCONFIG_LOOKASIDE2013,101232
#define SQLITE_DBCONFIG_ENABLE_FKEY SQLITE_DBCONFIG_ENABLE_FKEY2014,101303
#define SQLITE_DBCONFIG_ENABLE_TRIGGER SQLITE_DBCONFIG_ENABLE_TRIGGER2015,101369
#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER2016,101435
#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION2017,101501
#define SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE2018,101567
#define SQLITE_DENY SQLITE_DENY2775,137083
#define SQLITE_IGNORE SQLITE_IGNORE2776,137153
#define SQLITE_CREATE_INDEX SQLITE_CREATE_INDEX2798,138278
#define SQLITE_CREATE_TABLE SQLITE_CREATE_TABLE2799,138357
#define SQLITE_CREATE_TEMP_INDEX SQLITE_CREATE_TEMP_INDEX2800,138436
#define SQLITE_CREATE_TEMP_TABLE SQLITE_CREATE_TEMP_TABLE2801,138515
#define SQLITE_CREATE_TEMP_TRIGGER SQLITE_CREATE_TEMP_TRIGGER2802,138594
#define SQLITE_CREATE_TEMP_VIEW SQLITE_CREATE_TEMP_VIEW2803,138673
#define SQLITE_CREATE_TRIGGER SQLITE_CREATE_TRIGGER2804,138752
#define SQLITE_CREATE_VIEW SQLITE_CREATE_VIEW2805,138831
#define SQLITE_DELETE SQLITE_DELETE2806,138910
#define SQLITE_DROP_INDEX SQLITE_DROP_INDEX2807,138989
#define SQLITE_DROP_TABLE SQLITE_DROP_TABLE2808,139068
#define SQLITE_DROP_TEMP_INDEX SQLITE_DROP_TEMP_INDEX2809,139147
#define SQLITE_DROP_TEMP_TABLE SQLITE_DROP_TEMP_TABLE2810,139226
#define SQLITE_DROP_TEMP_TRIGGER SQLITE_DROP_TEMP_TRIGGER2811,139305
#define SQLITE_DROP_TEMP_VIEW SQLITE_DROP_TEMP_VIEW2812,139384
#define SQLITE_DROP_TRIGGER SQLITE_DROP_TRIGGER2813,139463
#define SQLITE_DROP_VIEW SQLITE_DROP_VIEW2814,139542
#define SQLITE_INSERT SQLITE_INSERT2815,139621
#define SQLITE_PRAGMA SQLITE_PRAGMA2816,139700
#define SQLITE_READ SQLITE_READ2817,139779
#define SQLITE_SELECT SQLITE_SELECT2818,139858
#define SQLITE_TRANSACTION SQLITE_TRANSACTION2819,139937
#define SQLITE_UPDATE SQLITE_UPDATE2820,140016
#define SQLITE_ATTACH SQLITE_ATTACH2821,140095
#define SQLITE_DETACH SQLITE_DETACH2822,140174
#define SQLITE_ALTER_TABLE SQLITE_ALTER_TABLE2823,140253
#define SQLITE_REINDEX SQLITE_REINDEX2824,140332
#define SQLITE_ANALYZE SQLITE_ANALYZE2825,140411
#define SQLITE_CREATE_VTABLE SQLITE_CREATE_VTABLE2826,140490
#define SQLITE_DROP_VTABLE SQLITE_DROP_VTABLE2827,140569
#define SQLITE_FUNCTION SQLITE_FUNCTION2828,140648
#define SQLITE_SAVEPOINT SQLITE_SAVEPOINT2829,140727
#define SQLITE_COPY SQLITE_COPY2830,140806
#define SQLITE_RECURSIVE SQLITE_RECURSIVE2831,140868
#define SQLITE_TRACE_STMT SQLITE_TRACE_STMT2922,145276
#define SQLITE_TRACE_PROFILE SQLITE_TRACE_PROFILE2923,145313
#define SQLITE_TRACE_ROW SQLITE_TRACE_ROW2924,145350
#define SQLITE_TRACE_CLOSE SQLITE_TRACE_CLOSE2925,145387
typedef struct sqlite3_stmt sqlite3_stmt;sqlite3_stmt3354,166941
#define SQLITE_LIMIT_LENGTH SQLITE_LIMIT_LENGTH3454,171508
#define SQLITE_LIMIT_SQL_LENGTH SQLITE_LIMIT_SQL_LENGTH3455,171557
#define SQLITE_LIMIT_COLUMN SQLITE_LIMIT_COLUMN3456,171606
#define SQLITE_LIMIT_EXPR_DEPTH SQLITE_LIMIT_EXPR_DEPTH3457,171655
#define SQLITE_LIMIT_COMPOUND_SELECT SQLITE_LIMIT_COMPOUND_SELECT3458,171704
#define SQLITE_LIMIT_VDBE_OP SQLITE_LIMIT_VDBE_OP3459,171753
#define SQLITE_LIMIT_FUNCTION_ARG SQLITE_LIMIT_FUNCTION_ARG3460,171802
#define SQLITE_LIMIT_ATTACHED SQLITE_LIMIT_ATTACHED3461,171851
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH SQLITE_LIMIT_LIKE_PATTERN_LENGTH3462,171900
#define SQLITE_LIMIT_VARIABLE_NUMBER SQLITE_LIMIT_VARIABLE_NUMBER3463,171949
#define SQLITE_LIMIT_TRIGGER_DEPTH SQLITE_LIMIT_TRIGGER_DEPTH3464,171998
#define SQLITE_LIMIT_WORKER_THREADS SQLITE_LIMIT_WORKER_THREADS3465,172047
typedef struct Mem sqlite3_value;sqlite3_value3708,183804
typedef struct sqlite3_context sqlite3_context;sqlite3_context3722,184386
#define SQLITE_INTEGER SQLITE_INTEGER4177,205718
#define SQLITE_FLOAT SQLITE_FLOAT4178,205744
#define SQLITE_BLOB SQLITE_BLOB4179,205770
#define SQLITE_NULL SQLITE_NULL4180,205796
# undef SQLITE_TEXTSQLITE_TEXT4182,205841
# define SQLITE_TEXT SQLITE_TEXT4184,205867
#define SQLITE3_TEXT SQLITE3_TEXT4186,205901
#define SQLITE_UTF8 SQLITE_UTF84546,223558
#define SQLITE_UTF16LE SQLITE_UTF16LE4547,223618
#define SQLITE_UTF16BE SQLITE_UTF16BE4548,223678
#define SQLITE_UTF16 SQLITE_UTF164549,223738
#define SQLITE_ANY SQLITE_ANY4550,223801
#define SQLITE_UTF16_ALIGNED SQLITE_UTF16_ALIGNED4551,223853
#define SQLITE_DETERMINISTIC SQLITE_DETERMINISTIC4561,224182
typedef void (*sqlite3_destructor_type)(void*);sqlite3_destructor_type4817,236033
#define SQLITE_STATIC SQLITE_STATIC4818,236081
#define SQLITE_TRANSIENT SQLITE_TRANSIENT4819,236137
SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;sqlite3_temp_directory5244,255810
SQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;sqlite3_data_directory5281,257646
typedef struct sqlite3_vtab sqlite3_vtab;sqlite3_vtab5827,281864
typedef struct sqlite3_index_info sqlite3_index_info;sqlite3_index_info5828,281906
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;sqlite3_vtab_cursor5829,281960
typedef struct sqlite3_module sqlite3_module;sqlite3_module5830,282016
struct sqlite3_module {sqlite3_module5848,282768
  int iVersion;iVersion5849,282792
  int (*xCreate)(sqlite3*, void *pAux,xCreate5850,282808
  int (*xConnect)(sqlite3*, void *pAux,xConnect5853,282943
  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);xBestIndex5856,283079
  int (*xDisconnect)(sqlite3_vtab *pVTab);xDisconnect5857,283142
  int (*xDestroy)(sqlite3_vtab *pVTab);xDestroy5858,283185
  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);xOpen5859,283225
  int (*xClose)(sqlite3_vtab_cursor*);xClose5860,283294
  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,xFilter5861,283333
  int (*xNext)(sqlite3_vtab_cursor*);xNext5863,283453
  int (*xEof)(sqlite3_vtab_cursor*);xEof5864,283491
  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);xColumn5865,283528
  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);xRowid5866,283591
  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);xUpdate5867,283653
  int (*xBegin)(sqlite3_vtab *pVTab);xBegin5868,283727
  int (*xSync)(sqlite3_vtab *pVTab);xSync5869,283765
  int (*xCommit)(sqlite3_vtab *pVTab);xCommit5870,283802
  int (*xRollback)(sqlite3_vtab *pVTab);xRollback5871,283841
  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,xFindFunction5872,283882
  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);xRename5875,284071
  int (*xSavepoint)(sqlite3_vtab *pVTab, int);xSavepoint5878,284249
  int (*xRelease)(sqlite3_vtab *pVTab, int);xRelease5879,284296
  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);xRollbackTo5880,284341
struct sqlite3_index_info {sqlite3_index_info5979,289487
  int nConstraint;           /* Number of entries in aConstraint */nConstraint5981,289530
  struct sqlite3_index_constraint {sqlite3_index_constraint5982,289598
     int iColumn;              /* Column constrained.  -1 for ROWID */iColumn5983,289634
     unsigned char op;         /* Constraint operator */op5984,289705
     unsigned char usable;     /* True if this constraint is usable */usable5985,289762
     int iTermOffset;          /* Used internally - xBestIndex should ignore */iTermOffset5986,289833
  } *aConstraint;            /* Table of WHERE clause constraints */aConstraint5987,289913
  int nOrderBy;              /* Number of terms in the ORDER BY clause */nOrderBy5988,289982
  struct sqlite3_index_orderby {sqlite3_index_orderby5989,290056
     int iColumn;              /* Column number */iColumn5990,290089
     unsigned char desc;       /* True for DESC.  False for ASC. */desc5991,290140
  } *aOrderBy;               /* The ORDER BY clause */aOrderBy5992,290208
  struct sqlite3_index_constraint_usage {sqlite3_index_constraint_usage5994,290279
    int argvIndex;           /* if >0, constraint is part of argv to xFilter */argvIndex5995,290321
    unsigned char omit;      /* Do not code a test for this constraint */omit5996,290401
  } *aConstraintUsage;aConstraintUsage5997,290475
  int idxNum;                /* Number used to identify the index */idxNum5998,290498
  char *idxStr;              /* String, possibly obtained from sqlite3_malloc */idxStr5999,290567
  int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */needToFreeIdxStr6000,290648
  int orderByConsumed;       /* True if output is already ordered */orderByConsumed6001,290724
  double estimatedCost;           /* Estimated cost of using this index */estimatedCost6002,290793
  sqlite3_int64 estimatedRows;    /* Estimated number of rows returned */estimatedRows6004,290934
  int idxFlags;              /* Mask of SQLITE_INDEX_SCAN_* flags */idxFlags6006,291074
  sqlite3_uint64 colUsed;    /* Input: Mask of columns used by statement */colUsed6008,291210
#define SQLITE_INDEX_SCAN_UNIQUE SQLITE_INDEX_SCAN_UNIQUE6014,291334
#define SQLITE_INDEX_CONSTRAINT_EQ SQLITE_INDEX_CONSTRAINT_EQ6024,291707
#define SQLITE_INDEX_CONSTRAINT_GT SQLITE_INDEX_CONSTRAINT_GT6025,291749
#define SQLITE_INDEX_CONSTRAINT_LE SQLITE_INDEX_CONSTRAINT_LE6026,291791
#define SQLITE_INDEX_CONSTRAINT_LT SQLITE_INDEX_CONSTRAINT_LT6027,291833
#define SQLITE_INDEX_CONSTRAINT_GE SQLITE_INDEX_CONSTRAINT_GE6028,291875
#define SQLITE_INDEX_CONSTRAINT_MATCH SQLITE_INDEX_CONSTRAINT_MATCH6029,291917
#define SQLITE_INDEX_CONSTRAINT_LIKE SQLITE_INDEX_CONSTRAINT_LIKE6030,291959
#define SQLITE_INDEX_CONSTRAINT_GLOB SQLITE_INDEX_CONSTRAINT_GLOB6031,292001
#define SQLITE_INDEX_CONSTRAINT_REGEXP SQLITE_INDEX_CONSTRAINT_REGEXP6032,292043
struct sqlite3_vtab {sqlite3_vtab6092,294860
  const sqlite3_module *pModule;  /* The module for this virtual table */pModule6093,294882
  int nRef;                       /* Number of open cursors */nRef6094,294956
  char *zErrMsg;                  /* Error message from sqlite3_mprintf() */zErrMsg6095,295019
struct sqlite3_vtab_cursor {sqlite3_vtab_cursor6116,295957
  sqlite3_vtab *pVtab;      /* Virtual table of this cursor */pVtab6117,295986
typedef struct sqlite3_blob sqlite3_blob;sqlite3_blob6172,298267
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;sqlite3_mutex_methods6620,318974
struct sqlite3_mutex_methods {sqlite3_mutex_methods6621,319034
  int (*xMutexInit)(void);xMutexInit6622,319065
  int (*xMutexEnd)(void);xMutexEnd6623,319092
  sqlite3_mutex *(*xMutexAlloc)(int);xMutexAlloc6624,319118
  void (*xMutexFree)(sqlite3_mutex *);xMutexFree6625,319156
  void (*xMutexEnter)(sqlite3_mutex *);xMutexEnter6626,319195
  int (*xMutexTry)(sqlite3_mutex *);xMutexTry6627,319235
  void (*xMutexLeave)(sqlite3_mutex *);xMutexLeave6628,319272
  int (*xMutexHeld)(sqlite3_mutex *);xMutexHeld6629,319312
  int (*xMutexNotheld)(sqlite3_mutex *);xMutexNotheld6630,319350
#define SQLITE_MUTEX_FAST SQLITE_MUTEX_FAST6677,321373
#define SQLITE_MUTEX_RECURSIVE SQLITE_MUTEX_RECURSIVE6678,321413
#define SQLITE_MUTEX_STATIC_MASTER SQLITE_MUTEX_STATIC_MASTER6679,321453
#define SQLITE_MUTEX_STATIC_MEM SQLITE_MUTEX_STATIC_MEM6680,321493
#define SQLITE_MUTEX_STATIC_MEM2 SQLITE_MUTEX_STATIC_MEM26681,321557
#define SQLITE_MUTEX_STATIC_OPEN SQLITE_MUTEX_STATIC_OPEN6682,321613
#define SQLITE_MUTEX_STATIC_PRNG SQLITE_MUTEX_STATIC_PRNG6683,321679
#define SQLITE_MUTEX_STATIC_LRU SQLITE_MUTEX_STATIC_LRU6684,321747
#define SQLITE_MUTEX_STATIC_LRU2 SQLITE_MUTEX_STATIC_LRU26685,321808
#define SQLITE_MUTEX_STATIC_PMEM SQLITE_MUTEX_STATIC_PMEM6686,321864
#define SQLITE_MUTEX_STATIC_APP1 SQLITE_MUTEX_STATIC_APP16687,321931
#define SQLITE_MUTEX_STATIC_APP2 SQLITE_MUTEX_STATIC_APP26688,322001
#define SQLITE_MUTEX_STATIC_APP3 SQLITE_MUTEX_STATIC_APP36689,322071
#define SQLITE_MUTEX_STATIC_VFS1 SQLITE_MUTEX_STATIC_VFS16690,322141
#define SQLITE_MUTEX_STATIC_VFS2 SQLITE_MUTEX_STATIC_VFS26691,322212
#define SQLITE_MUTEX_STATIC_VFS3 SQLITE_MUTEX_STATIC_VFS36692,322284
#define SQLITE_TESTCTRL_FIRST SQLITE_TESTCTRL_FIRST6771,325777
#define SQLITE_TESTCTRL_PRNG_SAVE SQLITE_TESTCTRL_PRNG_SAVE6772,325828
#define SQLITE_TESTCTRL_PRNG_RESTORE SQLITE_TESTCTRL_PRNG_RESTORE6773,325879
#define SQLITE_TESTCTRL_PRNG_RESET SQLITE_TESTCTRL_PRNG_RESET6774,325930
#define SQLITE_TESTCTRL_BITVEC_TEST SQLITE_TESTCTRL_BITVEC_TEST6775,325981
#define SQLITE_TESTCTRL_FAULT_INSTALL SQLITE_TESTCTRL_FAULT_INSTALL6776,326032
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS6777,326083
#define SQLITE_TESTCTRL_PENDING_BYTE SQLITE_TESTCTRL_PENDING_BYTE6778,326134
#define SQLITE_TESTCTRL_ASSERT SQLITE_TESTCTRL_ASSERT6779,326185
#define SQLITE_TESTCTRL_ALWAYS SQLITE_TESTCTRL_ALWAYS6780,326236
#define SQLITE_TESTCTRL_RESERVE SQLITE_TESTCTRL_RESERVE6781,326287
#define SQLITE_TESTCTRL_OPTIMIZATIONS SQLITE_TESTCTRL_OPTIMIZATIONS6782,326338
#define SQLITE_TESTCTRL_ISKEYWORD SQLITE_TESTCTRL_ISKEYWORD6783,326389
#define SQLITE_TESTCTRL_SCRATCHMALLOC SQLITE_TESTCTRL_SCRATCHMALLOC6784,326440
#define SQLITE_TESTCTRL_LOCALTIME_FAULT SQLITE_TESTCTRL_LOCALTIME_FAULT6785,326491
#define SQLITE_TESTCTRL_EXPLAIN_STMT SQLITE_TESTCTRL_EXPLAIN_STMT6786,326542
#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD6787,326609
#define SQLITE_TESTCTRL_NEVER_CORRUPT SQLITE_TESTCTRL_NEVER_CORRUPT6788,326660
#define SQLITE_TESTCTRL_VDBE_COVERAGE SQLITE_TESTCTRL_VDBE_COVERAGE6789,326711
#define SQLITE_TESTCTRL_BYTEORDER SQLITE_TESTCTRL_BYTEORDER6790,326762
#define SQLITE_TESTCTRL_ISINIT SQLITE_TESTCTRL_ISINIT6791,326813
#define SQLITE_TESTCTRL_SORTER_MMAP SQLITE_TESTCTRL_SORTER_MMAP6792,326864
#define SQLITE_TESTCTRL_IMPOSTER SQLITE_TESTCTRL_IMPOSTER6793,326915
#define SQLITE_TESTCTRL_LAST SQLITE_TESTCTRL_LAST6794,326966
#define SQLITE_STATUS_MEMORY_USED SQLITE_STATUS_MEMORY_USED6914,332783
#define SQLITE_STATUS_PAGECACHE_USED SQLITE_STATUS_PAGECACHE_USED6915,332828
#define SQLITE_STATUS_PAGECACHE_OVERFLOW SQLITE_STATUS_PAGECACHE_OVERFLOW6916,332873
#define SQLITE_STATUS_SCRATCH_USED SQLITE_STATUS_SCRATCH_USED6917,332918
#define SQLITE_STATUS_SCRATCH_OVERFLOW SQLITE_STATUS_SCRATCH_OVERFLOW6918,332963
#define SQLITE_STATUS_MALLOC_SIZE SQLITE_STATUS_MALLOC_SIZE6919,333008
#define SQLITE_STATUS_PARSER_STACK SQLITE_STATUS_PARSER_STACK6920,333053
#define SQLITE_STATUS_PAGECACHE_SIZE SQLITE_STATUS_PAGECACHE_SIZE6921,333098
#define SQLITE_STATUS_SCRATCH_SIZE SQLITE_STATUS_SCRATCH_SIZE6922,333143
#define SQLITE_STATUS_MALLOC_COUNT SQLITE_STATUS_MALLOC_COUNT6923,333188
#define SQLITE_DBSTATUS_LOOKASIDE_USED SQLITE_DBSTATUS_LOOKASIDE_USED7052,339391
#define SQLITE_DBSTATUS_CACHE_USED SQLITE_DBSTATUS_CACHE_USED7053,339438
#define SQLITE_DBSTATUS_SCHEMA_USED SQLITE_DBSTATUS_SCHEMA_USED7054,339485
#define SQLITE_DBSTATUS_STMT_USED SQLITE_DBSTATUS_STMT_USED7055,339532
#define SQLITE_DBSTATUS_LOOKASIDE_HIT SQLITE_DBSTATUS_LOOKASIDE_HIT7056,339579
#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE7057,339626
#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL7058,339673
#define SQLITE_DBSTATUS_CACHE_HIT SQLITE_DBSTATUS_CACHE_HIT7059,339720
#define SQLITE_DBSTATUS_CACHE_MISS SQLITE_DBSTATUS_CACHE_MISS7060,339767
#define SQLITE_DBSTATUS_CACHE_WRITE SQLITE_DBSTATUS_CACHE_WRITE7061,339814
#define SQLITE_DBSTATUS_DEFERRED_FKS SQLITE_DBSTATUS_DEFERRED_FKS7062,339861
#define SQLITE_DBSTATUS_CACHE_USED_SHARED SQLITE_DBSTATUS_CACHE_USED_SHARED7063,339908
#define SQLITE_DBSTATUS_MAX SQLITE_DBSTATUS_MAX7064,339955
#define SQLITE_STMTSTATUS_FULLSCAN_STEP SQLITE_STMTSTATUS_FULLSCAN_STEP7130,342998
#define SQLITE_STMTSTATUS_SORT SQLITE_STMTSTATUS_SORT7131,343044
#define SQLITE_STMTSTATUS_AUTOINDEX SQLITE_STMTSTATUS_AUTOINDEX7132,343090
#define SQLITE_STMTSTATUS_VM_STEP SQLITE_STMTSTATUS_VM_STEP7133,343136
typedef struct sqlite3_pcache sqlite3_pcache;sqlite3_pcache7146,343557
typedef struct sqlite3_pcache_page sqlite3_pcache_page;sqlite3_pcache_page7158,343974
struct sqlite3_pcache_page {sqlite3_pcache_page7159,344030
  void *pBuf;        /* The content of the page */pBuf7160,344059
  void *pExtra;      /* Extra information associated with the page */pExtra7161,344110
typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;sqlite3_pcache_methods27323,352338
struct sqlite3_pcache_methods2 {sqlite3_pcache_methods27324,352402
  int iVersion;iVersion7325,352435
  void *pArg;pArg7326,352451
  int (*xInit)(void*);xInit7327,352465
  void (*xShutdown)(void*);xShutdown7328,352488
  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);xCreate7329,352516
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize7330,352587
  int (*xPagecount)(sqlite3_pcache*);xPagecount7331,352642
  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch7332,352680
  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);xUnpin7333,352761
  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, xRekey7334,352831
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate7336,352929
  void (*xDestroy)(sqlite3_pcache*);xDestroy7337,352984
  void (*xShrink)(sqlite3_pcache*);xShrink7338,353021
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;sqlite3_pcache_methods7346,353279
struct sqlite3_pcache_methods {sqlite3_pcache_methods7347,353341
  void *pArg;pArg7348,353373
  int (*xInit)(void*);xInit7349,353387
  void (*xShutdown)(void*);xShutdown7350,353410
  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);xCreate7351,353438
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize7352,353496
  int (*xPagecount)(sqlite3_pcache*);xPagecount7353,353551
  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch7354,353589
  void (*xUnpin)(sqlite3_pcache*, void*, int discard);xUnpin7355,353655
  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);xRekey7356,353710
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate7357,353786
  void (*xDestroy)(sqlite3_pcache*);xDestroy7358,353841
typedef struct sqlite3_backup sqlite3_backup;sqlite3_backup7372,354218
#define SQLITE_CHECKPOINT_PASSIVE SQLITE_CHECKPOINT_PASSIVE7969,384573
#define SQLITE_CHECKPOINT_FULL SQLITE_CHECKPOINT_FULL7970,384653
#define SQLITE_CHECKPOINT_RESTART SQLITE_CHECKPOINT_RESTART7971,384731
#define SQLITE_CHECKPOINT_TRUNCATE SQLITE_CHECKPOINT_TRUNCATE7972,384810
#define SQLITE_VTAB_CONSTRAINT_SUPPORT SQLITE_VTAB_CONSTRAINT_SUPPORT8029,387477
#define SQLITE_ROLLBACK SQLITE_ROLLBACK8055,388507
#define SQLITE_FAIL SQLITE_FAIL8057,388609
#define SQLITE_REPLACE SQLITE_REPLACE8059,388687
#define SQLITE_SCANSTAT_NLOOP SQLITE_SCANSTAT_NLOOP8108,391008
#define SQLITE_SCANSTAT_NVISIT SQLITE_SCANSTAT_NVISIT8109,391043
#define SQLITE_SCANSTAT_EST SQLITE_SCANSTAT_EST8110,391078
#define SQLITE_SCANSTAT_NAME SQLITE_SCANSTAT_NAME8111,391113
#define SQLITE_SCANSTAT_EXPLAIN SQLITE_SCANSTAT_EXPLAIN8112,391148
#define SQLITE_SCANSTAT_SELECTID SQLITE_SCANSTAT_SELECTID8113,391183
typedef struct sqlite3_snapshot {sqlite3_snapshot8336,402078
  unsigned char hidden[48];hidden8337,402112
} sqlite3_snapshot;sqlite3_snapshot8338,402140
# undef doubledouble8494,408620
#define _SQLITE3RTREE_H__SQLITE3RTREE_H_8517,409180
typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;sqlite3_rtree_geometry8524,409247
typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;sqlite3_rtree_query_info8525,409309
  typedef sqlite3_int64 sqlite3_rtree_dbl;sqlite3_rtree_dbl8531,409516
  typedef double sqlite3_rtree_dbl;sqlite3_rtree_dbl8533,409565
struct sqlite3_rtree_geometry {sqlite3_rtree_geometry8554,410131
  void *pContext;                 /* Copy of pContext passed to s_r_g_c() */pContext8555,410163
  int nParam;                     /* Size of array aParam[] */nParam8556,410240
  sqlite3_rtree_dbl *aParam;      /* Parameters passed to SQL geom function */aParam8557,410303
  void *pUser;                    /* Callback implementation user data */pUser8558,410382
  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */xDelUser8559,410456
struct sqlite3_rtree_query_info {sqlite3_rtree_query_info8586,411263
  void *pContext;                   /* pContext from when function registered */pContext8587,411297
  int nParam;                       /* Number of function parameters */nParam8588,411378
  sqlite3_rtree_dbl *aParam;        /* value of function parameters */aParam8589,411450
  void *pUser;                      /* callback can use this, if desired */pUser8590,411521
  void (*xDelUser)(void*);          /* function to free pUser */xDelUser8591,411597
  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check */aCoord8592,411662
  unsigned int *anQueue;            /* Number of pending entries in the queue */anQueue8593,411742
  int nCoord;                       /* Number of coordinates */nCoord8594,411823
  int iLevel;                       /* Level of current node or entry */iLevel8595,411887
  int mxLevel;                      /* The largest iLevel value in the tree */mxLevel8596,411960
  sqlite3_int64 iRowid;             /* Rowid for current entry */iRowid8597,412039
  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */rParentScore8598,412105
  int eParentWithin;                /* Visibility of parent node */eParentWithin8599,412168
  int eWithin;                      /* OUT: Visiblity */eWithin8600,412236
  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */rScore8601,412293
  sqlite3_value **apSqlParam;       /* Original SQL values of parameters */apSqlParam8603,412429
#define NOT_WITHIN NOT_WITHIN8609,412585
#define PARTLY_WITHIN PARTLY_WITHIN8610,412662
#define FULLY_WITHIN FULLY_WITHIN8611,412736
#define __SQLITESESSION_H_ __SQLITESESSION_H_8624,413081
typedef struct sqlite3_session sqlite3_session;sqlite3_session8637,413245
typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;sqlite3_changeset_iter8642,413339
typedef struct sqlite3_changegroup sqlite3_changegroup;sqlite3_changegroup9353,446119
#define SQLITE_CHANGESET_DATA SQLITE_CHANGESET_DATA9717,464134
#define SQLITE_CHANGESET_NOTFOUND SQLITE_CHANGESET_NOTFOUND9718,464173
#define SQLITE_CHANGESET_CONFLICT SQLITE_CHANGESET_CONFLICT9719,464212
#define SQLITE_CHANGESET_CONSTRAINT SQLITE_CHANGESET_CONSTRAINT9720,464251
#define SQLITE_CHANGESET_FOREIGN_KEY SQLITE_CHANGESET_FOREIGN_KEY9721,464290
#define SQLITE_CHANGESET_OMIT SQLITE_CHANGESET_OMIT9754,465727
#define SQLITE_CHANGESET_REPLACE SQLITE_CHANGESET_REPLACE9755,465765
#define SQLITE_CHANGESET_ABORT SQLITE_CHANGESET_ABORT9756,465803
#define _FTS5_H_FTS5_H9933,472822
typedef struct Fts5ExtensionApi Fts5ExtensionApi;Fts5ExtensionApi9947,473114
typedef struct Fts5Context Fts5Context;Fts5Context9948,473164
typedef struct Fts5PhraseIter Fts5PhraseIter;Fts5PhraseIter9949,473204
typedef void (*fts5_extension_function)(fts5_extension_function9951,473251
struct Fts5PhraseIter {Fts5PhraseIter9959,473664
  const unsigned char *a;a9960,473688
  const unsigned char *b;b9961,473714
struct Fts5ExtensionApi {Fts5ExtensionApi10179,483375
  int iVersion;                   /* Currently always set to 3 */iVersion10180,483401
  void *(*xUserData)(Fts5Context*);xUserData10182,483468
  int (*xColumnCount)(Fts5Context*);xColumnCount10184,483505
  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);xRowCount10185,483542
  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);xColumnTotalSize10186,483598
  int (*xTokenize)(Fts5Context*, xTokenize10188,483674
  int (*xPhraseCount)(Fts5Context*);xPhraseCount10194,483917
  int (*xPhraseSize)(Fts5Context*, int iPhrase);xPhraseSize10195,483954
  int (*xInstCount)(Fts5Context*, int *pnInst);xInstCount10197,484004
  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);xInst10198,484052
  sqlite3_int64 (*xRowid)(Fts5Context*);xRowid10200,484132
  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);xColumnText10201,484173
  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);xColumnSize10202,484245
  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,xQueryPhrase10204,484306
  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));xSetAuxdata10207,484432
  void *(*xGetAuxdata)(Fts5Context*, int bClear);xGetAuxdata10208,484503
  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);xPhraseFirst10210,484554
  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);xPhraseNext10211,484633
  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);xPhraseFirstColumn10213,484712
  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);xPhraseNextColumn10214,484791
typedef struct Fts5Tokenizer Fts5Tokenizer;Fts5Tokenizer10413,495090
typedef struct fts5_tokenizer fts5_tokenizer;fts5_tokenizer10414,495134
struct fts5_tokenizer {fts5_tokenizer10415,495180
  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);xCreate10416,495204
  void (*xDelete)(Fts5Tokenizer*);xDelete10417,495282
  int (*xTokenize)(Fts5Tokenizer*, xTokenize10418,495317
#define FTS5_TOKENIZE_QUERY FTS5_TOKENIZE_QUERY10434,495988
#define FTS5_TOKENIZE_PREFIX FTS5_TOKENIZE_PREFIX10435,496027
#define FTS5_TOKENIZE_DOCUMENT FTS5_TOKENIZE_DOCUMENT10436,496066
#define FTS5_TOKENIZE_AUX FTS5_TOKENIZE_AUX10437,496105
#define FTS5_TOKEN_COLOCATED FTS5_TOKEN_COLOCATED10441,496279
typedef struct fts5_api fts5_api;fts5_api10450,496579
struct fts5_api {fts5_api10451,496613
  int iVersion;                   /* Currently always set to 2 */iVersion10452,496631
  int (*xCreateTokenizer)(xCreateTokenizer10455,496729
  int (*xFindTokenizer)(xFindTokenizer10464,496920
  int (*xCreateFunction)(xCreateFunction10472,497087

amt-db-funcs.c,474
int get_rec_count(void)get_rec_count22,931
void check4DB(char *prog_name)check4DB48,1750
bool check_db_access(void)check_db_access127,4264
char *get_last_acronym(void)get_last_acronym164,5312
int do_acronym_search(char *findme)do_acronym_search197,6292
int new_acronym(void)new_acronym245,7866
int del_acro_rec(int del_rec_id)del_acro_rec397,11799
void get_acro_src(void)get_acro_src507,14931
int update_acro_rec(int update_rec_id)update_acro_rec546,16086

cli-args.c,61
void get_cli_args(int argc, char **argv)get_cli_args16,406

main.c,198
int main(int argc, char **argv)main12,330
void exit_cleanup(void)exit_cleanup91,1959
void print_start_screen(char *prog_name)print_start_screen120,2574
void show_help(void)show_help130,2874

sqlite3.c,828101
#define SQLITE_CORE SQLITE_CORE20,1241
#define SQLITE_AMALGAMATION SQLITE_AMALGAMATION21,1263
# define SQLITE_PRIVATE SQLITE_PRIVATE23,1316
#define SQLITEINT_HSQLITEINT_H41,1881
#  define SQLITE_TCLAPISQLITE_TCLAPI75,3292
#  define _CRT_RAND_S_CRT_RAND_S83,3458
#define SQLITE_MSVC_HSQLITE_MSVC_H109,4374
#define OS_VXWORKS OS_VXWORKS158,5939
#define SQLITE_OS_OTHER SQLITE_OS_OTHER159,5960
#define SQLITE_HOMEGROWN_RECURSIVE_MUTEX SQLITE_HOMEGROWN_RECURSIVE_MUTEX160,5986
#define SQLITE_OMIT_LOAD_EXTENSION SQLITE_OMIT_LOAD_EXTENSION161,6029
#define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE162,6066
#define HAVE_UTIME HAVE_UTIME163,6104
#define OS_VXWORKS OS_VXWORKS166,6158
#define HAVE_FCHOWN HAVE_FCHOWN167,6179
#define HAVE_READLINK HAVE_READLINK168,6201
#define HAVE_LSTAT HAVE_LSTAT169,6225
# define _LARGE_FILE _LARGE_FILE200,7716
#   define _FILE_OFFSET_BITS _FILE_OFFSET_BITS202,7772
# define _LARGEFILE_SOURCE _LARGEFILE_SOURCE204,7812
# define GCC_VERSION GCC_VERSION221,8631
# define GCC_VERSION GCC_VERSION223,8717
# define MSVC_VERSION MSVC_VERSION226,8807
# define MSVC_VERSION MSVC_VERSION228,8844
# define _GNU_SOURCE_GNU_SOURCE233,8963
# define _BSD_SOURCE_BSD_SOURCE237,9042
# define _USE_32BIT_TIME_T_USE_32BIT_TIME_T269,10430
#define SQLITE3_HSQLITE3_H311,12295
# define SQLITE_EXTERN SQLITE_EXTERN326,12559
# define SQLITE_APISQLITE_API329,12615
# define SQLITE_CDECLSQLITE_CDECL332,12663
# define SQLITE_APICALLSQLITE_APICALL335,12715
# define SQLITE_STDCALL SQLITE_STDCALL338,12769
# define SQLITE_CALLBACKSQLITE_CALLBACK341,12839
# define SQLITE_SYSAPISQLITE_SYSAPI344,12893
#define SQLITE_DEPRECATEDSQLITE_DEPRECATED360,13563
#define SQLITE_EXPERIMENTALSQLITE_EXPERIMENTAL361,13589
# undef SQLITE_VERSIONSQLITE_VERSION367,13717
# undef SQLITE_VERSION_NUMBERSQLITE_VERSION_NUMBER370,13776
#define SQLITE_VERSION SQLITE_VERSION401,15211
#define SQLITE_VERSION_NUMBER SQLITE_VERSION_NUMBER402,15250
#define SQLITE_SOURCE_ID SQLITE_SOURCE_ID403,15288
SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;sqlite3_version435,16890
typedef struct sqlite3 sqlite3;sqlite3519,20746
  typedef SQLITE_INT64_TYPE sqlite_int64;sqlite_int64538,21469
    typedef SQLITE_UINT64_TYPE sqlite_uint64;sqlite_uint64540,21538
    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;sqlite_uint64542,21593
  typedef __int64 sqlite_int64;sqlite_int64545,21704
  typedef unsigned __int64 sqlite_uint64;sqlite_uint64546,21736
  typedef long long int sqlite_int64;sqlite_int64548,21784
  typedef unsigned long long int sqlite_uint64;sqlite_uint64549,21822
typedef sqlite_int64 sqlite3_int64;sqlite3_int64551,21877
typedef sqlite_uint64 sqlite3_uint64;sqlite3_uint64552,21913
# define double double559,22101
typedef int (*sqlite3_callback)(void*,int,char**, char**);sqlite3_callback612,24515
#define SQLITE_OK SQLITE_OK695,28463
#define SQLITE_ERROR SQLITE_ERROR697,28550
#define SQLITE_INTERNAL SQLITE_INTERNAL698,28618
#define SQLITE_PERM SQLITE_PERM699,28687
#define SQLITE_ABORT SQLITE_ABORT700,28750
#define SQLITE_BUSY SQLITE_BUSY701,28824
#define SQLITE_LOCKED SQLITE_LOCKED702,28890
#define SQLITE_NOMEM SQLITE_NOMEM703,28962
#define SQLITE_READONLY SQLITE_READONLY704,29018
#define SQLITE_INTERRUPT SQLITE_INTERRUPT705,29093
#define SQLITE_IOERR SQLITE_IOERR706,29174
#define SQLITE_CORRUPT SQLITE_CORRUPT707,29249
#define SQLITE_NOTFOUND SQLITE_NOTFOUND708,29324
#define SQLITE_FULL SQLITE_FULL709,29403
#define SQLITE_CANTOPEN SQLITE_CANTOPEN710,29483
#define SQLITE_PROTOCOL SQLITE_PROTOCOL711,29554
#define SQLITE_EMPTY SQLITE_EMPTY712,29621
#define SQLITE_SCHEMA SQLITE_SCHEMA713,29677
#define SQLITE_TOOBIG SQLITE_TOOBIG714,29743
#define SQLITE_CONSTRAINT SQLITE_CONSTRAINT715,29815
#define SQLITE_MISMATCH SQLITE_MISMATCH716,29887
#define SQLITE_MISUSE SQLITE_MISUSE717,29944
#define SQLITE_NOLFS SQLITE_NOLFS718,30007
#define SQLITE_AUTH SQLITE_AUTH719,30084
#define SQLITE_FORMAT SQLITE_FORMAT720,30143
#define SQLITE_RANGE SQLITE_RANGE721,30213
#define SQLITE_NOTADB SQLITE_NOTADB722,30294
#define SQLITE_NOTICE SQLITE_NOTICE723,30372
#define SQLITE_WARNING SQLITE_WARNING724,30443
#define SQLITE_ROW SQLITE_ROW725,30509
#define SQLITE_DONE SQLITE_DONE726,30584
#define SQLITE_IOERR_READ SQLITE_IOERR_READ746,31508
#define SQLITE_IOERR_SHORT_READ SQLITE_IOERR_SHORT_READ747,31571
#define SQLITE_IOERR_WRITE SQLITE_IOERR_WRITE748,31634
#define SQLITE_IOERR_FSYNC SQLITE_IOERR_FSYNC749,31697
#define SQLITE_IOERR_DIR_FSYNC SQLITE_IOERR_DIR_FSYNC750,31760
#define SQLITE_IOERR_TRUNCATE SQLITE_IOERR_TRUNCATE751,31823
#define SQLITE_IOERR_FSTAT SQLITE_IOERR_FSTAT752,31886
#define SQLITE_IOERR_UNLOCK SQLITE_IOERR_UNLOCK753,31949
#define SQLITE_IOERR_RDLOCK SQLITE_IOERR_RDLOCK754,32012
#define SQLITE_IOERR_DELETE SQLITE_IOERR_DELETE755,32075
#define SQLITE_IOERR_BLOCKED SQLITE_IOERR_BLOCKED756,32139
#define SQLITE_IOERR_NOMEM SQLITE_IOERR_NOMEM757,32203
#define SQLITE_IOERR_ACCESS SQLITE_IOERR_ACCESS758,32267
#define SQLITE_IOERR_CHECKRESERVEDLOCK SQLITE_IOERR_CHECKRESERVEDLOCK759,32331
#define SQLITE_IOERR_LOCK SQLITE_IOERR_LOCK760,32395
#define SQLITE_IOERR_CLOSE SQLITE_IOERR_CLOSE761,32459
#define SQLITE_IOERR_DIR_CLOSE SQLITE_IOERR_DIR_CLOSE762,32523
#define SQLITE_IOERR_SHMOPEN SQLITE_IOERR_SHMOPEN763,32587
#define SQLITE_IOERR_SHMSIZE SQLITE_IOERR_SHMSIZE764,32651
#define SQLITE_IOERR_SHMLOCK SQLITE_IOERR_SHMLOCK765,32715
#define SQLITE_IOERR_SHMMAP SQLITE_IOERR_SHMMAP766,32779
#define SQLITE_IOERR_SEEK SQLITE_IOERR_SEEK767,32843
#define SQLITE_IOERR_DELETE_NOENT SQLITE_IOERR_DELETE_NOENT768,32907
#define SQLITE_IOERR_MMAP SQLITE_IOERR_MMAP769,32971
#define SQLITE_IOERR_GETTEMPPATH SQLITE_IOERR_GETTEMPPATH770,33035
#define SQLITE_IOERR_CONVPATH SQLITE_IOERR_CONVPATH771,33099
#define SQLITE_IOERR_VNODE SQLITE_IOERR_VNODE772,33163
#define SQLITE_IOERR_AUTH SQLITE_IOERR_AUTH773,33227
#define SQLITE_LOCKED_SHAREDCACHE SQLITE_LOCKED_SHAREDCACHE774,33291
#define SQLITE_BUSY_RECOVERY SQLITE_BUSY_RECOVERY775,33356
#define SQLITE_BUSY_SNAPSHOT SQLITE_BUSY_SNAPSHOT776,33421
#define SQLITE_CANTOPEN_NOTEMPDIR SQLITE_CANTOPEN_NOTEMPDIR777,33486
#define SQLITE_CANTOPEN_ISDIR SQLITE_CANTOPEN_ISDIR778,33552
#define SQLITE_CANTOPEN_FULLPATH SQLITE_CANTOPEN_FULLPATH779,33618
#define SQLITE_CANTOPEN_CONVPATH SQLITE_CANTOPEN_CONVPATH780,33684
#define SQLITE_CORRUPT_VTAB SQLITE_CORRUPT_VTAB781,33750
#define SQLITE_READONLY_RECOVERY SQLITE_READONLY_RECOVERY782,33815
#define SQLITE_READONLY_CANTLOCK SQLITE_READONLY_CANTLOCK783,33881
#define SQLITE_READONLY_ROLLBACK SQLITE_READONLY_ROLLBACK784,33947
#define SQLITE_READONLY_DBMOVED SQLITE_READONLY_DBMOVED785,34013
#define SQLITE_ABORT_ROLLBACK SQLITE_ABORT_ROLLBACK786,34079
#define SQLITE_CONSTRAINT_CHECK SQLITE_CONSTRAINT_CHECK787,34142
#define SQLITE_CONSTRAINT_COMMITHOOK SQLITE_CONSTRAINT_COMMITHOOK788,34210
#define SQLITE_CONSTRAINT_FOREIGNKEY SQLITE_CONSTRAINT_FOREIGNKEY789,34278
#define SQLITE_CONSTRAINT_FUNCTION SQLITE_CONSTRAINT_FUNCTION790,34346
#define SQLITE_CONSTRAINT_NOTNULL SQLITE_CONSTRAINT_NOTNULL791,34414
#define SQLITE_CONSTRAINT_PRIMARYKEY SQLITE_CONSTRAINT_PRIMARYKEY792,34482
#define SQLITE_CONSTRAINT_TRIGGER SQLITE_CONSTRAINT_TRIGGER793,34550
#define SQLITE_CONSTRAINT_UNIQUE SQLITE_CONSTRAINT_UNIQUE794,34618
#define SQLITE_CONSTRAINT_VTAB SQLITE_CONSTRAINT_VTAB795,34686
#define SQLITE_CONSTRAINT_ROWID SQLITE_CONSTRAINT_ROWID796,34754
#define SQLITE_NOTICE_RECOVER_WAL SQLITE_NOTICE_RECOVER_WAL797,34822
#define SQLITE_NOTICE_RECOVER_ROLLBACK SQLITE_NOTICE_RECOVER_ROLLBACK798,34886
#define SQLITE_WARNING_AUTOINDEX SQLITE_WARNING_AUTOINDEX799,34950
#define SQLITE_AUTH_USER SQLITE_AUTH_USER800,35015
#define SQLITE_OK_LOAD_PERMANENTLY SQLITE_OK_LOAD_PERMANENTLY801,35077
#define SQLITE_OPEN_READONLY SQLITE_OPEN_READONLY810,35356
#define SQLITE_OPEN_READWRITE SQLITE_OPEN_READWRITE811,35436
#define SQLITE_OPEN_CREATE SQLITE_OPEN_CREATE812,35516
#define SQLITE_OPEN_DELETEONCLOSE SQLITE_OPEN_DELETEONCLOSE813,35596
#define SQLITE_OPEN_EXCLUSIVE SQLITE_OPEN_EXCLUSIVE814,35660
#define SQLITE_OPEN_AUTOPROXY SQLITE_OPEN_AUTOPROXY815,35724
#define SQLITE_OPEN_URI SQLITE_OPEN_URI816,35788
#define SQLITE_OPEN_MEMORY SQLITE_OPEN_MEMORY817,35868
#define SQLITE_OPEN_MAIN_DB SQLITE_OPEN_MAIN_DB818,35948
#define SQLITE_OPEN_TEMP_DB SQLITE_OPEN_TEMP_DB819,36012
#define SQLITE_OPEN_TRANSIENT_DB SQLITE_OPEN_TRANSIENT_DB820,36076
#define SQLITE_OPEN_MAIN_JOURNAL SQLITE_OPEN_MAIN_JOURNAL821,36140
#define SQLITE_OPEN_TEMP_JOURNAL SQLITE_OPEN_TEMP_JOURNAL822,36204
#define SQLITE_OPEN_SUBJOURNAL SQLITE_OPEN_SUBJOURNAL823,36268
#define SQLITE_OPEN_MASTER_JOURNAL SQLITE_OPEN_MASTER_JOURNAL824,36332
#define SQLITE_OPEN_NOMUTEX SQLITE_OPEN_NOMUTEX825,36396
#define SQLITE_OPEN_FULLMUTEX SQLITE_OPEN_FULLMUTEX826,36476
#define SQLITE_OPEN_SHAREDCACHE SQLITE_OPEN_SHAREDCACHE827,36556
#define SQLITE_OPEN_PRIVATECACHE SQLITE_OPEN_PRIVATECACHE828,36636
#define SQLITE_OPEN_WAL SQLITE_OPEN_WAL829,36716
#define SQLITE_IOCAP_ATOMIC SQLITE_IOCAP_ATOMIC861,38258
#define SQLITE_IOCAP_ATOMIC512 SQLITE_IOCAP_ATOMIC512862,38313
#define SQLITE_IOCAP_ATOMIC1K SQLITE_IOCAP_ATOMIC1K863,38368
#define SQLITE_IOCAP_ATOMIC2K SQLITE_IOCAP_ATOMIC2K864,38423
#define SQLITE_IOCAP_ATOMIC4K SQLITE_IOCAP_ATOMIC4K865,38478
#define SQLITE_IOCAP_ATOMIC8K SQLITE_IOCAP_ATOMIC8K866,38533
#define SQLITE_IOCAP_ATOMIC16K SQLITE_IOCAP_ATOMIC16K867,38588
#define SQLITE_IOCAP_ATOMIC32K SQLITE_IOCAP_ATOMIC32K868,38643
#define SQLITE_IOCAP_ATOMIC64K SQLITE_IOCAP_ATOMIC64K869,38698
#define SQLITE_IOCAP_SAFE_APPEND SQLITE_IOCAP_SAFE_APPEND870,38753
#define SQLITE_IOCAP_SEQUENTIAL SQLITE_IOCAP_SEQUENTIAL871,38808
#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN872,38863
#define SQLITE_IOCAP_POWERSAFE_OVERWRITE SQLITE_IOCAP_POWERSAFE_OVERWRITE873,38918
#define SQLITE_IOCAP_IMMUTABLE SQLITE_IOCAP_IMMUTABLE874,38973
#define SQLITE_LOCK_NONE SQLITE_LOCK_NONE883,39233
#define SQLITE_LOCK_SHARED SQLITE_LOCK_SHARED884,39269
#define SQLITE_LOCK_RESERVED SQLITE_LOCK_RESERVED885,39305
#define SQLITE_LOCK_PENDING SQLITE_LOCK_PENDING886,39341
#define SQLITE_LOCK_EXCLUSIVE SQLITE_LOCK_EXCLUSIVE887,39377
#define SQLITE_SYNC_NORMAL SQLITE_SYNC_NORMAL915,40716
#define SQLITE_SYNC_FULL SQLITE_SYNC_FULL916,40758
#define SQLITE_SYNC_DATAONLY SQLITE_SYNC_DATAONLY917,40800
typedef struct sqlite3_file sqlite3_file;sqlite3_file930,41270
struct sqlite3_file {sqlite3_file931,41312
  const struct sqlite3_io_methods *pMethods;  /* Methods for an open file */pMethods932,41334
typedef struct sqlite3_io_methods sqlite3_io_methods;sqlite3_io_methods1028,45744
struct sqlite3_io_methods {sqlite3_io_methods1029,45798
  int iVersion;iVersion1030,45826
  int (*xClose)(sqlite3_file*);xClose1031,45842
  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);xRead1032,45874
  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);xWrite1033,45943
  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);xTruncate1034,46019
  int (*xSync)(sqlite3_file*, int flags);xSync1035,46074
  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);xFileSize1036,46116
  int (*xLock)(sqlite3_file*, int);xLock1037,46173
  int (*xUnlock)(sqlite3_file*, int);xUnlock1038,46209
  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);xCheckReservedLock1039,46247
  int (*xFileControl)(sqlite3_file*, int op, void *pArg);xFileControl1040,46305
  int (*xSectorSize)(sqlite3_file*);xSectorSize1041,46363
  int (*xDeviceCharacteristics)(sqlite3_file*);xDeviceCharacteristics1042,46400
  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);xShmMap1044,46494
  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);xShmLock1045,46568
  void (*xShmBarrier)(sqlite3_file*);xShmBarrier1046,46632
  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);xShmUnmap1047,46670
  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);xFetch1049,46767
  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);xUnfetch1050,46841
#define SQLITE_FCNTL_LOCKSTATE SQLITE_FCNTL_LOCKSTATE1294,60347
#define SQLITE_FCNTL_GET_LOCKPROXYFILE SQLITE_FCNTL_GET_LOCKPROXYFILE1295,60394
#define SQLITE_FCNTL_SET_LOCKPROXYFILE SQLITE_FCNTL_SET_LOCKPROXYFILE1296,60441
#define SQLITE_FCNTL_LAST_ERRNO SQLITE_FCNTL_LAST_ERRNO1297,60488
#define SQLITE_FCNTL_SIZE_HINT SQLITE_FCNTL_SIZE_HINT1298,60535
#define SQLITE_FCNTL_CHUNK_SIZE SQLITE_FCNTL_CHUNK_SIZE1299,60582
#define SQLITE_FCNTL_FILE_POINTER SQLITE_FCNTL_FILE_POINTER1300,60629
#define SQLITE_FCNTL_SYNC_OMITTED SQLITE_FCNTL_SYNC_OMITTED1301,60676
#define SQLITE_FCNTL_WIN32_AV_RETRY SQLITE_FCNTL_WIN32_AV_RETRY1302,60723
#define SQLITE_FCNTL_PERSIST_WAL SQLITE_FCNTL_PERSIST_WAL1303,60770
#define SQLITE_FCNTL_OVERWRITE SQLITE_FCNTL_OVERWRITE1304,60817
#define SQLITE_FCNTL_VFSNAME SQLITE_FCNTL_VFSNAME1305,60864
#define SQLITE_FCNTL_POWERSAFE_OVERWRITE SQLITE_FCNTL_POWERSAFE_OVERWRITE1306,60911
#define SQLITE_FCNTL_PRAGMA SQLITE_FCNTL_PRAGMA1307,60958
#define SQLITE_FCNTL_BUSYHANDLER SQLITE_FCNTL_BUSYHANDLER1308,61005
#define SQLITE_FCNTL_TEMPFILENAME SQLITE_FCNTL_TEMPFILENAME1309,61052
#define SQLITE_FCNTL_MMAP_SIZE SQLITE_FCNTL_MMAP_SIZE1310,61099
#define SQLITE_FCNTL_TRACE SQLITE_FCNTL_TRACE1311,61146
#define SQLITE_FCNTL_HAS_MOVED SQLITE_FCNTL_HAS_MOVED1312,61193
#define SQLITE_FCNTL_SYNC SQLITE_FCNTL_SYNC1313,61240
#define SQLITE_FCNTL_COMMIT_PHASETWO SQLITE_FCNTL_COMMIT_PHASETWO1314,61287
#define SQLITE_FCNTL_WIN32_SET_HANDLE SQLITE_FCNTL_WIN32_SET_HANDLE1315,61334
#define SQLITE_FCNTL_WAL_BLOCK SQLITE_FCNTL_WAL_BLOCK1316,61381
#define SQLITE_FCNTL_ZIPVFS SQLITE_FCNTL_ZIPVFS1317,61428
#define SQLITE_FCNTL_RBU SQLITE_FCNTL_RBU1318,61475
#define SQLITE_FCNTL_VFS_POINTER SQLITE_FCNTL_VFS_POINTER1319,61522
#define SQLITE_FCNTL_JOURNAL_POINTER SQLITE_FCNTL_JOURNAL_POINTER1320,61569
#define SQLITE_FCNTL_WIN32_GET_HANDLE SQLITE_FCNTL_WIN32_GET_HANDLE1321,61616
#define SQLITE_FCNTL_PDB SQLITE_FCNTL_PDB1322,61663
#define SQLITE_GET_LOCKPROXYFILE SQLITE_GET_LOCKPROXYFILE1325,61734
#define SQLITE_SET_LOCKPROXYFILE SQLITE_SET_LOCKPROXYFILE1326,61803
#define SQLITE_LAST_ERRNO SQLITE_LAST_ERRNO1327,61872
typedef struct sqlite3_mutex sqlite3_mutex;sqlite3_mutex1340,62281
typedef struct sqlite3_api_routines sqlite3_api_routines;sqlite3_api_routines1350,62610
typedef struct sqlite3_vfs sqlite3_vfs;sqlite3_vfs1509,70515
typedef void (*sqlite3_syscall_ptr)(void);sqlite3_syscall_ptr1510,70555
struct sqlite3_vfs {sqlite3_vfs1511,70598
  int iVersion;            /* Structure version number (currently 3) */iVersion1512,70619
  int szOsFile;            /* Size of subclassed sqlite3_file */szOsFile1513,70691
  int mxPathname;          /* Maximum file pathname length */mxPathname1514,70756
  sqlite3_vfs *pNext;      /* Next registered VFS */pNext1515,70818
  const char *zName;       /* Name of this virtual file system */zName1516,70871
  void *pAppData;          /* Pointer to application-specific data */pAppData1517,70937
  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,xOpen1518,71007
  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);xDelete1520,71113
  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);xAccess1521,71177
  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);xFullPathname1522,71253
  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);xDlOpen1523,71332
  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);xDlError1524,71389
  void (*xDlClose)(sqlite3_vfs*, void*);xDlClose1526,71517
  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);xRandomness1527,71558
  int (*xSleep)(sqlite3_vfs*, int microseconds);xSleep1528,71617
  int (*xCurrentTime)(sqlite3_vfs*, double*);xCurrentTime1529,71666
  int (*xGetLastError)(sqlite3_vfs*, int, char *);xGetLastError1530,71712
  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);xCurrentTimeInt641535,71906
  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);xSetSystemCall1540,72095
  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);xGetSystemCall1541,72174
  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);xNextSystemCall1542,72248
#define SQLITE_ACCESS_EXISTS SQLITE_ACCESS_EXISTS1570,73437
#define SQLITE_ACCESS_READWRITE SQLITE_ACCESS_READWRITE1571,73471
#define SQLITE_ACCESS_READ SQLITE_ACCESS_READ1572,73549
#define SQLITE_SHM_UNLOCK SQLITE_SHM_UNLOCK1596,74355
#define SQLITE_SHM_LOCK SQLITE_SHM_LOCK1597,74389
#define SQLITE_SHM_SHARED SQLITE_SHM_SHARED1598,74423
#define SQLITE_SHM_EXCLUSIVE SQLITE_SHM_EXCLUSIVE1599,74457
#define SQLITE_SHM_NLOCK SQLITE_SHM_NLOCK1609,74751
typedef struct sqlite3_mem_methods sqlite3_mem_methods;sqlite3_mem_methods1807,84604
struct sqlite3_mem_methods {sqlite3_mem_methods1808,84660
  void *(*xMalloc)(int);         /* Memory allocation function */xMalloc1809,84689
  void (*xFree)(void*);          /* Free a prior allocation */xFree1810,84755
  void *(*xRealloc)(void*,int);  /* Resize an allocation */xRealloc1811,84818
  int (*xSize)(void*);           /* Return the size of an allocation */xSize1812,84878
  int (*xRoundup)(int);          /* Round up request size to allocation size */xRoundup1813,84950
  int (*xInit)(void*);           /* Initialize the memory allocator */xInit1814,85030
  void (*xShutdown)(void*);      /* Deinitialize the memory allocator */xShutdown1815,85101
  void *pAppData;                /* Argument to xInit() and xShutdown() */pAppData1816,85174
#define SQLITE_CONFIG_SINGLETHREAD SQLITE_CONFIG_SINGLETHREAD2153,104217
#define SQLITE_CONFIG_MULTITHREAD SQLITE_CONFIG_MULTITHREAD2154,104266
#define SQLITE_CONFIG_SERIALIZED SQLITE_CONFIG_SERIALIZED2155,104315
#define SQLITE_CONFIG_MALLOC SQLITE_CONFIG_MALLOC2156,104364
#define SQLITE_CONFIG_GETMALLOC SQLITE_CONFIG_GETMALLOC2157,104430
#define SQLITE_CONFIG_SCRATCH SQLITE_CONFIG_SCRATCH2158,104496
#define SQLITE_CONFIG_PAGECACHE SQLITE_CONFIG_PAGECACHE2159,104562
#define SQLITE_CONFIG_HEAP SQLITE_CONFIG_HEAP2160,104628
#define SQLITE_CONFIG_MEMSTATUS SQLITE_CONFIG_MEMSTATUS2161,104699
#define SQLITE_CONFIG_MUTEX SQLITE_CONFIG_MUTEX2162,104752
#define SQLITE_CONFIG_GETMUTEX SQLITE_CONFIG_GETMUTEX2163,104820
#define SQLITE_CONFIG_LOOKASIDE SQLITE_CONFIG_LOOKASIDE2165,104955
#define SQLITE_CONFIG_PCACHE SQLITE_CONFIG_PCACHE2166,105008
#define SQLITE_CONFIG_GETPCACHE SQLITE_CONFIG_GETPCACHE2167,105059
#define SQLITE_CONFIG_LOG SQLITE_CONFIG_LOG2168,105110
#define SQLITE_CONFIG_URI SQLITE_CONFIG_URI2169,105168
#define SQLITE_CONFIG_PCACHE2 SQLITE_CONFIG_PCACHE22170,105217
#define SQLITE_CONFIG_GETPCACHE2 SQLITE_CONFIG_GETPCACHE22171,105287
#define SQLITE_CONFIG_COVERING_INDEX_SCAN SQLITE_CONFIG_COVERING_INDEX_SCAN2172,105357
#define SQLITE_CONFIG_SQLLOG SQLITE_CONFIG_SQLLOG2173,105413
#define SQLITE_CONFIG_MMAP_SIZE SQLITE_CONFIG_MMAP_SIZE2174,105473
#define SQLITE_CONFIG_WIN32_HEAPSIZE SQLITE_CONFIG_WIN32_HEAPSIZE2175,105547
#define SQLITE_CONFIG_PCACHE_HDRSZ SQLITE_CONFIG_PCACHE_HDRSZ2176,105609
#define SQLITE_CONFIG_PMASZ SQLITE_CONFIG_PMASZ2177,105670
#define SQLITE_CONFIG_STMTJRNL_SPILL SQLITE_CONFIG_STMTJRNL_SPILL2178,105741
#define SQLITE_DBCONFIG_MAINDBNAME SQLITE_DBCONFIG_MAINDBNAME2289,111938
#define SQLITE_DBCONFIG_LOOKASIDE SQLITE_DBCONFIG_LOOKASIDE2290,112007
#define SQLITE_DBCONFIG_ENABLE_FKEY SQLITE_DBCONFIG_ENABLE_FKEY2291,112078
#define SQLITE_DBCONFIG_ENABLE_TRIGGER SQLITE_DBCONFIG_ENABLE_TRIGGER2292,112144
#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER2293,112210
#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION2294,112276
#define SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE2295,112342
#define SQLITE_DENY SQLITE_DENY3052,147858
#define SQLITE_IGNORE SQLITE_IGNORE3053,147928
#define SQLITE_CREATE_INDEX SQLITE_CREATE_INDEX3075,149053
#define SQLITE_CREATE_TABLE SQLITE_CREATE_TABLE3076,149132
#define SQLITE_CREATE_TEMP_INDEX SQLITE_CREATE_TEMP_INDEX3077,149211
#define SQLITE_CREATE_TEMP_TABLE SQLITE_CREATE_TEMP_TABLE3078,149290
#define SQLITE_CREATE_TEMP_TRIGGER SQLITE_CREATE_TEMP_TRIGGER3079,149369
#define SQLITE_CREATE_TEMP_VIEW SQLITE_CREATE_TEMP_VIEW3080,149448
#define SQLITE_CREATE_TRIGGER SQLITE_CREATE_TRIGGER3081,149527
#define SQLITE_CREATE_VIEW SQLITE_CREATE_VIEW3082,149606
#define SQLITE_DELETE SQLITE_DELETE3083,149685
#define SQLITE_DROP_INDEX SQLITE_DROP_INDEX3084,149764
#define SQLITE_DROP_TABLE SQLITE_DROP_TABLE3085,149843
#define SQLITE_DROP_TEMP_INDEX SQLITE_DROP_TEMP_INDEX3086,149922
#define SQLITE_DROP_TEMP_TABLE SQLITE_DROP_TEMP_TABLE3087,150001
#define SQLITE_DROP_TEMP_TRIGGER SQLITE_DROP_TEMP_TRIGGER3088,150080
#define SQLITE_DROP_TEMP_VIEW SQLITE_DROP_TEMP_VIEW3089,150159
#define SQLITE_DROP_TRIGGER SQLITE_DROP_TRIGGER3090,150238
#define SQLITE_DROP_VIEW SQLITE_DROP_VIEW3091,150317
#define SQLITE_INSERT SQLITE_INSERT3092,150396
#define SQLITE_PRAGMA SQLITE_PRAGMA3093,150475
#define SQLITE_READ SQLITE_READ3094,150554
#define SQLITE_SELECT SQLITE_SELECT3095,150633
#define SQLITE_TRANSACTION SQLITE_TRANSACTION3096,150712
#define SQLITE_UPDATE SQLITE_UPDATE3097,150791
#define SQLITE_ATTACH SQLITE_ATTACH3098,150870
#define SQLITE_DETACH SQLITE_DETACH3099,150949
#define SQLITE_ALTER_TABLE SQLITE_ALTER_TABLE3100,151028
#define SQLITE_REINDEX SQLITE_REINDEX3101,151107
#define SQLITE_ANALYZE SQLITE_ANALYZE3102,151186
#define SQLITE_CREATE_VTABLE SQLITE_CREATE_VTABLE3103,151265
#define SQLITE_DROP_VTABLE SQLITE_DROP_VTABLE3104,151344
#define SQLITE_FUNCTION SQLITE_FUNCTION3105,151423
#define SQLITE_SAVEPOINT SQLITE_SAVEPOINT3106,151502
#define SQLITE_COPY SQLITE_COPY3107,151581
#define SQLITE_RECURSIVE SQLITE_RECURSIVE3108,151643
#define SQLITE_TRACE_STMT SQLITE_TRACE_STMT3199,156051
#define SQLITE_TRACE_PROFILE SQLITE_TRACE_PROFILE3200,156088
#define SQLITE_TRACE_ROW SQLITE_TRACE_ROW3201,156125
#define SQLITE_TRACE_CLOSE SQLITE_TRACE_CLOSE3202,156162
typedef struct sqlite3_stmt sqlite3_stmt;sqlite3_stmt3631,177716
#define SQLITE_LIMIT_LENGTH SQLITE_LIMIT_LENGTH3731,182283
#define SQLITE_LIMIT_SQL_LENGTH SQLITE_LIMIT_SQL_LENGTH3732,182332
#define SQLITE_LIMIT_COLUMN SQLITE_LIMIT_COLUMN3733,182381
#define SQLITE_LIMIT_EXPR_DEPTH SQLITE_LIMIT_EXPR_DEPTH3734,182430
#define SQLITE_LIMIT_COMPOUND_SELECT SQLITE_LIMIT_COMPOUND_SELECT3735,182479
#define SQLITE_LIMIT_VDBE_OP SQLITE_LIMIT_VDBE_OP3736,182528
#define SQLITE_LIMIT_FUNCTION_ARG SQLITE_LIMIT_FUNCTION_ARG3737,182577
#define SQLITE_LIMIT_ATTACHED SQLITE_LIMIT_ATTACHED3738,182626
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH SQLITE_LIMIT_LIKE_PATTERN_LENGTH3739,182675
#define SQLITE_LIMIT_VARIABLE_NUMBER SQLITE_LIMIT_VARIABLE_NUMBER3740,182724
#define SQLITE_LIMIT_TRIGGER_DEPTH SQLITE_LIMIT_TRIGGER_DEPTH3741,182773
#define SQLITE_LIMIT_WORKER_THREADS SQLITE_LIMIT_WORKER_THREADS3742,182822
typedef struct Mem sqlite3_value;sqlite3_value3985,194579
typedef struct sqlite3_context sqlite3_context;sqlite3_context3999,195161
#define SQLITE_INTEGER SQLITE_INTEGER4454,216493
#define SQLITE_FLOAT SQLITE_FLOAT4455,216519
#define SQLITE_BLOB SQLITE_BLOB4456,216545
#define SQLITE_NULL SQLITE_NULL4457,216571
# undef SQLITE_TEXTSQLITE_TEXT4459,216616
# define SQLITE_TEXT SQLITE_TEXT4461,216642
#define SQLITE3_TEXT SQLITE3_TEXT4463,216676
#define SQLITE_UTF8 SQLITE_UTF84823,234333
#define SQLITE_UTF16LE SQLITE_UTF16LE4824,234393
#define SQLITE_UTF16BE SQLITE_UTF16BE4825,234453
#define SQLITE_UTF16 SQLITE_UTF164826,234513
#define SQLITE_ANY SQLITE_ANY4827,234576
#define SQLITE_UTF16_ALIGNED SQLITE_UTF16_ALIGNED4828,234628
#define SQLITE_DETERMINISTIC SQLITE_DETERMINISTIC4838,234957
typedef void (*sqlite3_destructor_type)(void*);sqlite3_destructor_type5094,246808
#define SQLITE_STATIC SQLITE_STATIC5095,246856
#define SQLITE_TRANSIENT SQLITE_TRANSIENT5096,246912
SQLITE_API char *sqlite3_temp_directory;sqlite3_temp_directory5521,266585
SQLITE_API char *sqlite3_data_directory;sqlite3_data_directory5558,268407
typedef struct sqlite3_vtab sqlite3_vtab;sqlite3_vtab6104,292611
typedef struct sqlite3_index_info sqlite3_index_info;sqlite3_index_info6105,292653
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;sqlite3_vtab_cursor6106,292707
typedef struct sqlite3_module sqlite3_module;sqlite3_module6107,292763
struct sqlite3_module {sqlite3_module6125,293515
  int iVersion;iVersion6126,293539
  int (*xCreate)(sqlite3*, void *pAux,xCreate6127,293555
  int (*xConnect)(sqlite3*, void *pAux,xConnect6130,293690
  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);xBestIndex6133,293826
  int (*xDisconnect)(sqlite3_vtab *pVTab);xDisconnect6134,293889
  int (*xDestroy)(sqlite3_vtab *pVTab);xDestroy6135,293932
  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);xOpen6136,293972
  int (*xClose)(sqlite3_vtab_cursor*);xClose6137,294041
  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,xFilter6138,294080
  int (*xNext)(sqlite3_vtab_cursor*);xNext6140,294200
  int (*xEof)(sqlite3_vtab_cursor*);xEof6141,294238
  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);xColumn6142,294275
  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);xRowid6143,294338
  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);xUpdate6144,294400
  int (*xBegin)(sqlite3_vtab *pVTab);xBegin6145,294474
  int (*xSync)(sqlite3_vtab *pVTab);xSync6146,294512
  int (*xCommit)(sqlite3_vtab *pVTab);xCommit6147,294549
  int (*xRollback)(sqlite3_vtab *pVTab);xRollback6148,294588
  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,xFindFunction6149,294629
  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);xRename6152,294818
  int (*xSavepoint)(sqlite3_vtab *pVTab, int);xSavepoint6155,294996
  int (*xRelease)(sqlite3_vtab *pVTab, int);xRelease6156,295043
  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);xRollbackTo6157,295088
struct sqlite3_index_info {sqlite3_index_info6256,300234
  int nConstraint;           /* Number of entries in aConstraint */nConstraint6258,300277
  struct sqlite3_index_constraint {sqlite3_index_constraint6259,300345
     int iColumn;              /* Column constrained.  -1 for ROWID */iColumn6260,300381
     unsigned char op;         /* Constraint operator */op6261,300452
     unsigned char usable;     /* True if this constraint is usable */usable6262,300509
     int iTermOffset;          /* Used internally - xBestIndex should ignore */iTermOffset6263,300580
  } *aConstraint;            /* Table of WHERE clause constraints */aConstraint6264,300660
  int nOrderBy;              /* Number of terms in the ORDER BY clause */nOrderBy6265,300729
  struct sqlite3_index_orderby {sqlite3_index_orderby6266,300803
     int iColumn;              /* Column number */iColumn6267,300836
     unsigned char desc;       /* True for DESC.  False for ASC. */desc6268,300887
  } *aOrderBy;               /* The ORDER BY clause */aOrderBy6269,300955
  struct sqlite3_index_constraint_usage {sqlite3_index_constraint_usage6271,301026
    int argvIndex;           /* if >0, constraint is part of argv to xFilter */argvIndex6272,301068
    unsigned char omit;      /* Do not code a test for this constraint */omit6273,301148
  } *aConstraintUsage;aConstraintUsage6274,301222
  int idxNum;                /* Number used to identify the index */idxNum6275,301245
  char *idxStr;              /* String, possibly obtained from sqlite3_malloc */idxStr6276,301314
  int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */needToFreeIdxStr6277,301395
  int orderByConsumed;       /* True if output is already ordered */orderByConsumed6278,301471
  double estimatedCost;           /* Estimated cost of using this index */estimatedCost6279,301540
  sqlite3_int64 estimatedRows;    /* Estimated number of rows returned */estimatedRows6281,301681
  int idxFlags;              /* Mask of SQLITE_INDEX_SCAN_* flags */idxFlags6283,301821
  sqlite3_uint64 colUsed;    /* Input: Mask of columns used by statement */colUsed6285,301957
#define SQLITE_INDEX_SCAN_UNIQUE SQLITE_INDEX_SCAN_UNIQUE6291,302081
#define SQLITE_INDEX_CONSTRAINT_EQ SQLITE_INDEX_CONSTRAINT_EQ6301,302454
#define SQLITE_INDEX_CONSTRAINT_GT SQLITE_INDEX_CONSTRAINT_GT6302,302496
#define SQLITE_INDEX_CONSTRAINT_LE SQLITE_INDEX_CONSTRAINT_LE6303,302538
#define SQLITE_INDEX_CONSTRAINT_LT SQLITE_INDEX_CONSTRAINT_LT6304,302580
#define SQLITE_INDEX_CONSTRAINT_GE SQLITE_INDEX_CONSTRAINT_GE6305,302622
#define SQLITE_INDEX_CONSTRAINT_MATCH SQLITE_INDEX_CONSTRAINT_MATCH6306,302664
#define SQLITE_INDEX_CONSTRAINT_LIKE SQLITE_INDEX_CONSTRAINT_LIKE6307,302706
#define SQLITE_INDEX_CONSTRAINT_GLOB SQLITE_INDEX_CONSTRAINT_GLOB6308,302748
#define SQLITE_INDEX_CONSTRAINT_REGEXP SQLITE_INDEX_CONSTRAINT_REGEXP6309,302790
struct sqlite3_vtab {sqlite3_vtab6369,305607
  const sqlite3_module *pModule;  /* The module for this virtual table */pModule6370,305629
  int nRef;                       /* Number of open cursors */nRef6371,305703
  char *zErrMsg;                  /* Error message from sqlite3_mprintf() */zErrMsg6372,305766
struct sqlite3_vtab_cursor {sqlite3_vtab_cursor6393,306704
  sqlite3_vtab *pVtab;      /* Virtual table of this cursor */pVtab6394,306733
typedef struct sqlite3_blob sqlite3_blob;sqlite3_blob6449,309014
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;sqlite3_mutex_methods6897,329721
struct sqlite3_mutex_methods {sqlite3_mutex_methods6898,329781
  int (*xMutexInit)(void);xMutexInit6899,329812
  int (*xMutexEnd)(void);xMutexEnd6900,329839
  sqlite3_mutex *(*xMutexAlloc)(int);xMutexAlloc6901,329865
  void (*xMutexFree)(sqlite3_mutex *);xMutexFree6902,329903
  void (*xMutexEnter)(sqlite3_mutex *);xMutexEnter6903,329942
  int (*xMutexTry)(sqlite3_mutex *);xMutexTry6904,329982
  void (*xMutexLeave)(sqlite3_mutex *);xMutexLeave6905,330019
  int (*xMutexHeld)(sqlite3_mutex *);xMutexHeld6906,330059
  int (*xMutexNotheld)(sqlite3_mutex *);xMutexNotheld6907,330097
#define SQLITE_MUTEX_FAST SQLITE_MUTEX_FAST6954,332120
#define SQLITE_MUTEX_RECURSIVE SQLITE_MUTEX_RECURSIVE6955,332160
#define SQLITE_MUTEX_STATIC_MASTER SQLITE_MUTEX_STATIC_MASTER6956,332200
#define SQLITE_MUTEX_STATIC_MEM SQLITE_MUTEX_STATIC_MEM6957,332240
#define SQLITE_MUTEX_STATIC_MEM2 SQLITE_MUTEX_STATIC_MEM26958,332304
#define SQLITE_MUTEX_STATIC_OPEN SQLITE_MUTEX_STATIC_OPEN6959,332360
#define SQLITE_MUTEX_STATIC_PRNG SQLITE_MUTEX_STATIC_PRNG6960,332426
#define SQLITE_MUTEX_STATIC_LRU SQLITE_MUTEX_STATIC_LRU6961,332494
#define SQLITE_MUTEX_STATIC_LRU2 SQLITE_MUTEX_STATIC_LRU26962,332555
#define SQLITE_MUTEX_STATIC_PMEM SQLITE_MUTEX_STATIC_PMEM6963,332611
#define SQLITE_MUTEX_STATIC_APP1 SQLITE_MUTEX_STATIC_APP16964,332678
#define SQLITE_MUTEX_STATIC_APP2 SQLITE_MUTEX_STATIC_APP26965,332748
#define SQLITE_MUTEX_STATIC_APP3 SQLITE_MUTEX_STATIC_APP36966,332818
#define SQLITE_MUTEX_STATIC_VFS1 SQLITE_MUTEX_STATIC_VFS16967,332888
#define SQLITE_MUTEX_STATIC_VFS2 SQLITE_MUTEX_STATIC_VFS26968,332959
#define SQLITE_MUTEX_STATIC_VFS3 SQLITE_MUTEX_STATIC_VFS36969,333031
#define SQLITE_TESTCTRL_FIRST SQLITE_TESTCTRL_FIRST7048,336524
#define SQLITE_TESTCTRL_PRNG_SAVE SQLITE_TESTCTRL_PRNG_SAVE7049,336575
#define SQLITE_TESTCTRL_PRNG_RESTORE SQLITE_TESTCTRL_PRNG_RESTORE7050,336626
#define SQLITE_TESTCTRL_PRNG_RESET SQLITE_TESTCTRL_PRNG_RESET7051,336677
#define SQLITE_TESTCTRL_BITVEC_TEST SQLITE_TESTCTRL_BITVEC_TEST7052,336728
#define SQLITE_TESTCTRL_FAULT_INSTALL SQLITE_TESTCTRL_FAULT_INSTALL7053,336779
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS7054,336830
#define SQLITE_TESTCTRL_PENDING_BYTE SQLITE_TESTCTRL_PENDING_BYTE7055,336881
#define SQLITE_TESTCTRL_ASSERT SQLITE_TESTCTRL_ASSERT7056,336932
#define SQLITE_TESTCTRL_ALWAYS SQLITE_TESTCTRL_ALWAYS7057,336983
#define SQLITE_TESTCTRL_RESERVE SQLITE_TESTCTRL_RESERVE7058,337034
#define SQLITE_TESTCTRL_OPTIMIZATIONS SQLITE_TESTCTRL_OPTIMIZATIONS7059,337085
#define SQLITE_TESTCTRL_ISKEYWORD SQLITE_TESTCTRL_ISKEYWORD7060,337136
#define SQLITE_TESTCTRL_SCRATCHMALLOC SQLITE_TESTCTRL_SCRATCHMALLOC7061,337187
#define SQLITE_TESTCTRL_LOCALTIME_FAULT SQLITE_TESTCTRL_LOCALTIME_FAULT7062,337238
#define SQLITE_TESTCTRL_EXPLAIN_STMT SQLITE_TESTCTRL_EXPLAIN_STMT7063,337289
#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD7064,337356
#define SQLITE_TESTCTRL_NEVER_CORRUPT SQLITE_TESTCTRL_NEVER_CORRUPT7065,337407
#define SQLITE_TESTCTRL_VDBE_COVERAGE SQLITE_TESTCTRL_VDBE_COVERAGE7066,337458
#define SQLITE_TESTCTRL_BYTEORDER SQLITE_TESTCTRL_BYTEORDER7067,337509
#define SQLITE_TESTCTRL_ISINIT SQLITE_TESTCTRL_ISINIT7068,337560
#define SQLITE_TESTCTRL_SORTER_MMAP SQLITE_TESTCTRL_SORTER_MMAP7069,337611
#define SQLITE_TESTCTRL_IMPOSTER SQLITE_TESTCTRL_IMPOSTER7070,337662
#define SQLITE_TESTCTRL_LAST SQLITE_TESTCTRL_LAST7071,337713
#define SQLITE_STATUS_MEMORY_USED SQLITE_STATUS_MEMORY_USED7191,343530
#define SQLITE_STATUS_PAGECACHE_USED SQLITE_STATUS_PAGECACHE_USED7192,343575
#define SQLITE_STATUS_PAGECACHE_OVERFLOW SQLITE_STATUS_PAGECACHE_OVERFLOW7193,343620
#define SQLITE_STATUS_SCRATCH_USED SQLITE_STATUS_SCRATCH_USED7194,343665
#define SQLITE_STATUS_SCRATCH_OVERFLOW SQLITE_STATUS_SCRATCH_OVERFLOW7195,343710
#define SQLITE_STATUS_MALLOC_SIZE SQLITE_STATUS_MALLOC_SIZE7196,343755
#define SQLITE_STATUS_PARSER_STACK SQLITE_STATUS_PARSER_STACK7197,343800
#define SQLITE_STATUS_PAGECACHE_SIZE SQLITE_STATUS_PAGECACHE_SIZE7198,343845
#define SQLITE_STATUS_SCRATCH_SIZE SQLITE_STATUS_SCRATCH_SIZE7199,343890
#define SQLITE_STATUS_MALLOC_COUNT SQLITE_STATUS_MALLOC_COUNT7200,343935
#define SQLITE_DBSTATUS_LOOKASIDE_USED SQLITE_DBSTATUS_LOOKASIDE_USED7329,350138
#define SQLITE_DBSTATUS_CACHE_USED SQLITE_DBSTATUS_CACHE_USED7330,350185
#define SQLITE_DBSTATUS_SCHEMA_USED SQLITE_DBSTATUS_SCHEMA_USED7331,350232
#define SQLITE_DBSTATUS_STMT_USED SQLITE_DBSTATUS_STMT_USED7332,350279
#define SQLITE_DBSTATUS_LOOKASIDE_HIT SQLITE_DBSTATUS_LOOKASIDE_HIT7333,350326
#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE7334,350373
#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL7335,350420
#define SQLITE_DBSTATUS_CACHE_HIT SQLITE_DBSTATUS_CACHE_HIT7336,350467
#define SQLITE_DBSTATUS_CACHE_MISS SQLITE_DBSTATUS_CACHE_MISS7337,350514
#define SQLITE_DBSTATUS_CACHE_WRITE SQLITE_DBSTATUS_CACHE_WRITE7338,350561
#define SQLITE_DBSTATUS_DEFERRED_FKS SQLITE_DBSTATUS_DEFERRED_FKS7339,350608
#define SQLITE_DBSTATUS_CACHE_USED_SHARED SQLITE_DBSTATUS_CACHE_USED_SHARED7340,350655
#define SQLITE_DBSTATUS_MAX SQLITE_DBSTATUS_MAX7341,350702
#define SQLITE_STMTSTATUS_FULLSCAN_STEP SQLITE_STMTSTATUS_FULLSCAN_STEP7407,353745
#define SQLITE_STMTSTATUS_SORT SQLITE_STMTSTATUS_SORT7408,353791
#define SQLITE_STMTSTATUS_AUTOINDEX SQLITE_STMTSTATUS_AUTOINDEX7409,353837
#define SQLITE_STMTSTATUS_VM_STEP SQLITE_STMTSTATUS_VM_STEP7410,353883
typedef struct sqlite3_pcache sqlite3_pcache;sqlite3_pcache7423,354304
typedef struct sqlite3_pcache_page sqlite3_pcache_page;sqlite3_pcache_page7435,354721
struct sqlite3_pcache_page {sqlite3_pcache_page7436,354777
  void *pBuf;        /* The content of the page */pBuf7437,354806
  void *pExtra;      /* Extra information associated with the page */pExtra7438,354857
typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;sqlite3_pcache_methods27600,363085
struct sqlite3_pcache_methods2 {sqlite3_pcache_methods27601,363149
  int iVersion;iVersion7602,363182
  void *pArg;pArg7603,363198
  int (*xInit)(void*);xInit7604,363212
  void (*xShutdown)(void*);xShutdown7605,363235
  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);xCreate7606,363263
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize7607,363334
  int (*xPagecount)(sqlite3_pcache*);xPagecount7608,363389
  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch7609,363427
  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);xUnpin7610,363508
  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, xRekey7611,363578
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate7613,363676
  void (*xDestroy)(sqlite3_pcache*);xDestroy7614,363731
  void (*xShrink)(sqlite3_pcache*);xShrink7615,363768
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;sqlite3_pcache_methods7623,364026
struct sqlite3_pcache_methods {sqlite3_pcache_methods7624,364088
  void *pArg;pArg7625,364120
  int (*xInit)(void*);xInit7626,364134
  void (*xShutdown)(void*);xShutdown7627,364157
  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);xCreate7628,364185
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize7629,364243
  int (*xPagecount)(sqlite3_pcache*);xPagecount7630,364298
  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch7631,364336
  void (*xUnpin)(sqlite3_pcache*, void*, int discard);xUnpin7632,364402
  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);xRekey7633,364457
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate7634,364533
  void (*xDestroy)(sqlite3_pcache*);xDestroy7635,364588
typedef struct sqlite3_backup sqlite3_backup;sqlite3_backup7649,364965
#define SQLITE_CHECKPOINT_PASSIVE SQLITE_CHECKPOINT_PASSIVE8246,395320
#define SQLITE_CHECKPOINT_FULL SQLITE_CHECKPOINT_FULL8247,395400
#define SQLITE_CHECKPOINT_RESTART SQLITE_CHECKPOINT_RESTART8248,395478
#define SQLITE_CHECKPOINT_TRUNCATE SQLITE_CHECKPOINT_TRUNCATE8249,395557
#define SQLITE_VTAB_CONSTRAINT_SUPPORT SQLITE_VTAB_CONSTRAINT_SUPPORT8306,398224
#define SQLITE_ROLLBACK SQLITE_ROLLBACK8332,399254
#define SQLITE_FAIL SQLITE_FAIL8334,399356
#define SQLITE_REPLACE SQLITE_REPLACE8336,399434
#define SQLITE_SCANSTAT_NLOOP SQLITE_SCANSTAT_NLOOP8385,401755
#define SQLITE_SCANSTAT_NVISIT SQLITE_SCANSTAT_NVISIT8386,401790
#define SQLITE_SCANSTAT_EST SQLITE_SCANSTAT_EST8387,401825
#define SQLITE_SCANSTAT_NAME SQLITE_SCANSTAT_NAME8388,401860
#define SQLITE_SCANSTAT_EXPLAIN SQLITE_SCANSTAT_EXPLAIN8389,401895
#define SQLITE_SCANSTAT_SELECTID SQLITE_SCANSTAT_SELECTID8390,401930
typedef struct sqlite3_snapshot {sqlite3_snapshot8613,412825
  unsigned char hidden[48];hidden8614,412859
} sqlite3_snapshot;sqlite3_snapshot8615,412887
# undef doubledouble8771,419367
#define _SQLITE3RTREE_H__SQLITE3RTREE_H_8794,419914
typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;sqlite3_rtree_geometry8801,419968
typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;sqlite3_rtree_query_info8802,420030
  typedef sqlite3_int64 sqlite3_rtree_dbl;sqlite3_rtree_dbl8808,420237
  typedef double sqlite3_rtree_dbl;sqlite3_rtree_dbl8810,420286
struct sqlite3_rtree_geometry {sqlite3_rtree_geometry8831,420852
  void *pContext;                 /* Copy of pContext passed to s_r_g_c() */pContext8832,420884
  int nParam;                     /* Size of array aParam[] */nParam8833,420961
  sqlite3_rtree_dbl *aParam;      /* Parameters passed to SQL geom function */aParam8834,421024
  void *pUser;                    /* Callback implementation user data */pUser8835,421103
  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */xDelUser8836,421177
struct sqlite3_rtree_query_info {sqlite3_rtree_query_info8863,421984
  void *pContext;                   /* pContext from when function registered */pContext8864,422018
  int nParam;                       /* Number of function parameters */nParam8865,422099
  sqlite3_rtree_dbl *aParam;        /* value of function parameters */aParam8866,422171
  void *pUser;                      /* callback can use this, if desired */pUser8867,422242
  void (*xDelUser)(void*);          /* function to free pUser */xDelUser8868,422318
  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check */aCoord8869,422383
  unsigned int *anQueue;            /* Number of pending entries in the queue */anQueue8870,422463
  int nCoord;                       /* Number of coordinates */nCoord8871,422544
  int iLevel;                       /* Level of current node or entry */iLevel8872,422608
  int mxLevel;                      /* The largest iLevel value in the tree */mxLevel8873,422681
  sqlite3_int64 iRowid;             /* Rowid for current entry */iRowid8874,422760
  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */rParentScore8875,422826
  int eParentWithin;                /* Visibility of parent node */eParentWithin8876,422889
  int eWithin;                      /* OUT: Visiblity */eWithin8877,422957
  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */rScore8878,423014
  sqlite3_value **apSqlParam;       /* Original SQL values of parameters */apSqlParam8880,423150
#define NOT_WITHIN NOT_WITHIN8886,423306
#define PARTLY_WITHIN PARTLY_WITHIN8887,423383
#define FULLY_WITHIN FULLY_WITHIN8888,423457
#define __SQLITESESSION_H_ __SQLITESESSION_H_8901,423789
typedef struct sqlite3_session sqlite3_session;sqlite3_session8914,423940
typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;sqlite3_changeset_iter8919,424034
typedef struct sqlite3_changegroup sqlite3_changegroup;sqlite3_changegroup9630,456814
#define SQLITE_CHANGESET_DATA SQLITE_CHANGESET_DATA9994,474829
#define SQLITE_CHANGESET_NOTFOUND SQLITE_CHANGESET_NOTFOUND9995,474868
#define SQLITE_CHANGESET_CONFLICT SQLITE_CHANGESET_CONFLICT9996,474907
#define SQLITE_CHANGESET_CONSTRAINT SQLITE_CHANGESET_CONSTRAINT9997,474946
#define SQLITE_CHANGESET_FOREIGN_KEY SQLITE_CHANGESET_FOREIGN_KEY9998,474985
#define SQLITE_CHANGESET_OMIT SQLITE_CHANGESET_OMIT10031,476422
#define SQLITE_CHANGESET_REPLACE SQLITE_CHANGESET_REPLACE10032,476460
#define SQLITE_CHANGESET_ABORT SQLITE_CHANGESET_ABORT10033,476498
#define _FTS5_H_FTS5_H10210,483504
typedef struct Fts5ExtensionApi Fts5ExtensionApi;Fts5ExtensionApi10224,483783
typedef struct Fts5Context Fts5Context;Fts5Context10225,483833
typedef struct Fts5PhraseIter Fts5PhraseIter;Fts5PhraseIter10226,483873
typedef void (*fts5_extension_function)(fts5_extension_function10228,483920
struct Fts5PhraseIter {Fts5PhraseIter10236,484333
  const unsigned char *a;a10237,484357
  const unsigned char *b;b10238,484383
struct Fts5ExtensionApi {Fts5ExtensionApi10456,494044
  int iVersion;                   /* Currently always set to 3 */iVersion10457,494070
  void *(*xUserData)(Fts5Context*);xUserData10459,494137
  int (*xColumnCount)(Fts5Context*);xColumnCount10461,494174
  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);xRowCount10462,494211
  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);xColumnTotalSize10463,494267
  int (*xTokenize)(Fts5Context*, xTokenize10465,494343
  int (*xPhraseCount)(Fts5Context*);xPhraseCount10471,494586
  int (*xPhraseSize)(Fts5Context*, int iPhrase);xPhraseSize10472,494623
  int (*xInstCount)(Fts5Context*, int *pnInst);xInstCount10474,494673
  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);xInst10475,494721
  sqlite3_int64 (*xRowid)(Fts5Context*);xRowid10477,494801
  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);xColumnText10478,494842
  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);xColumnSize10479,494914
  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,xQueryPhrase10481,494975
  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));xSetAuxdata10484,495101
  void *(*xGetAuxdata)(Fts5Context*, int bClear);xGetAuxdata10485,495172
  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);xPhraseFirst10487,495223
  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);xPhraseNext10488,495302
  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);xPhraseFirstColumn10490,495381
  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);xPhraseNextColumn10491,495460
typedef struct Fts5Tokenizer Fts5Tokenizer;Fts5Tokenizer10690,505759
typedef struct fts5_tokenizer fts5_tokenizer;fts5_tokenizer10691,505803
struct fts5_tokenizer {fts5_tokenizer10692,505849
  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);xCreate10693,505873
  void (*xDelete)(Fts5Tokenizer*);xDelete10694,505951
  int (*xTokenize)(Fts5Tokenizer*, xTokenize10695,505986
#define FTS5_TOKENIZE_QUERY FTS5_TOKENIZE_QUERY10711,506657
#define FTS5_TOKENIZE_PREFIX FTS5_TOKENIZE_PREFIX10712,506696
#define FTS5_TOKENIZE_DOCUMENT FTS5_TOKENIZE_DOCUMENT10713,506735
#define FTS5_TOKENIZE_AUX FTS5_TOKENIZE_AUX10714,506774
#define FTS5_TOKEN_COLOCATED FTS5_TOKEN_COLOCATED10718,506948
typedef struct fts5_api fts5_api;fts5_api10727,507248
struct fts5_api {fts5_api10728,507282
  int iVersion;                   /* Currently always set to 2 */iVersion10729,507300
  int (*xCreateTokenizer)(xCreateTokenizer10732,507398
  int (*xFindTokenizer)(xFindTokenizer10741,507589
  int (*xCreateFunction)(xCreateFunction10749,507756
# define SQLITE_MAX_LENGTH SQLITE_MAX_LENGTH10806,509313
# define SQLITE_MAX_COLUMN SQLITE_MAX_COLUMN10827,510079
# define SQLITE_MAX_SQL_LENGTH SQLITE_MAX_SQL_LENGTH10838,510375
# define SQLITE_MAX_EXPR_DEPTH SQLITE_MAX_EXPR_DEPTH10852,510815
# define SQLITE_MAX_COMPOUND_SELECT SQLITE_MAX_COMPOUND_SELECT10864,511278
# define SQLITE_MAX_VDBE_OP SQLITE_MAX_VDBE_OP10872,511438
# define SQLITE_MAX_FUNCTION_ARG SQLITE_MAX_FUNCTION_ARG10879,511577
# define SQLITE_DEFAULT_CACHE_SIZE SQLITE_DEFAULT_CACHE_SIZE10892,512073
# define SQLITE_DEFAULT_WAL_AUTOCHECKPOINT SQLITE_DEFAULT_WAL_AUTOCHECKPOINT10900,512283
# define SQLITE_MAX_ATTACHED SQLITE_MAX_ATTACHED10910,512666
# define SQLITE_MAX_VARIABLE_NUMBER SQLITE_MAX_VARIABLE_NUMBER10918,512817
# undef SQLITE_MAX_PAGE_SIZESQLITE_MAX_PAGE_SIZE10933,513541
#define SQLITE_MAX_PAGE_SIZE SQLITE_MAX_PAGE_SIZE10935,513577
# define SQLITE_DEFAULT_PAGE_SIZE SQLITE_DEFAULT_PAGE_SIZE10942,513693
# undef SQLITE_DEFAULT_PAGE_SIZESQLITE_DEFAULT_PAGE_SIZE10945,513789
# define SQLITE_DEFAULT_PAGE_SIZE SQLITE_DEFAULT_PAGE_SIZE10946,513822
# define SQLITE_MAX_DEFAULT_PAGE_SIZE SQLITE_MAX_DEFAULT_PAGE_SIZE10957,514248
# undef SQLITE_MAX_DEFAULT_PAGE_SIZESQLITE_MAX_DEFAULT_PAGE_SIZE10960,514352
# define SQLITE_MAX_DEFAULT_PAGE_SIZE SQLITE_MAX_DEFAULT_PAGE_SIZE10961,514389
# define SQLITE_MAX_PAGE_COUNT SQLITE_MAX_PAGE_COUNT10973,514710
# define SQLITE_MAX_LIKE_PATTERN_LENGTH SQLITE_MAX_LIKE_PATTERN_LENGTH10981,514880
# define SQLITE_MAX_TRIGGER_DEPTH SQLITE_MAX_TRIGGER_DEPTH10992,515186
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR11034,516717
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT11035,516779
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR11037,516912
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT11038,516967
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR11040,517102
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT11041,517156
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR11043,517287
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT11044,517331
#  define SQLITE_NOINLINE SQLITE_NOINLINE11052,517486
#  define SQLITE_NOINLINE SQLITE_NOINLINE11054,517581
#  define SQLITE_NOINLINESQLITE_NOINLINE11056,517635
#   define SQLITE_THREADSAFE SQLITE_THREADSAFE11091,518773
#   define SQLITE_THREADSAFE SQLITE_THREADSAFE11093,518820
# define SQLITE_POWERSAFE_OVERWRITE SQLITE_POWERSAFE_OVERWRITE11102,519062
# define SQLITE_DEFAULT_MEMSTATUS SQLITE_DEFAULT_MEMSTATUS11111,519367
# define SQLITE_SYSTEM_MALLOC SQLITE_SYSTEM_MALLOC11144,520662
# define SQLITE_MALLOC_SOFT_LIMIT SQLITE_MALLOC_SOFT_LIMIT11152,520876
#  define _XOPEN_SOURCE _XOPEN_SOURCE11162,521209
# define NDEBUG NDEBUG11177,521791
# undef NDEBUGNDEBUG11180,521861
# define SQLITE_ENABLE_EXPLAIN_COMMENTS SQLITE_ENABLE_EXPLAIN_COMMENTS11187,522031
# define testcase(testcase11206,522851
# define testcase(testcase11208,522917
# define TESTONLY(TESTONLY11217,523177
# define TESTONLY(TESTONLY11219,523207
# define VVA_ONLY(VVA_ONLY11231,523687
# define VVA_ONLY(VVA_ONLY11233,523717
# define ALWAYS(ALWAYS11252,524496
# define NEVER(NEVER11253,524524
# define ALWAYS(ALWAYS11255,524575
# define NEVER(NEVER11256,524621
# define ALWAYS(ALWAYS11258,524673
# define NEVER(NEVER11259,524701
# define ONLY_IF_REALLOC_STRESS(ONLY_IF_REALLOC_STRESS11270,525152
# define ONLY_IF_REALLOC_STRESS(ONLY_IF_REALLOC_STRESS11272,525215
# define ONLY_IF_REALLOC_STRESS(ONLY_IF_REALLOC_STRESS11274,525279
# define OSTRACE(OSTRACE11283,525537
# define SQLITE_HAVE_OS_TRACESQLITE_HAVE_OS_TRACE11284,525608
# define OSTRACE(OSTRACE11286,525644
# undef  SQLITE_HAVE_OS_TRACESQLITE_HAVE_OS_TRACE11287,525664
# define SQLITE_NEED_ERR_NAMESQLITE_NEED_ERR_NAME11298,526051
# undef  SQLITE_NEED_ERR_NAMESQLITE_NEED_ERR_NAME11300,526087
# undef SQLITE_ENABLE_EXPLAIN_COMMENTSSQLITE_ENABLE_EXPLAIN_COMMENTS11307,526233
#define IS_BIG_INT(IS_BIG_INT11315,526499
#define likely(likely11324,526867
#define unlikely(unlikely11325,526892
#define SQLITE_HASH_HSQLITE_HASH_H11344,527566
typedef struct Hash Hash;Hash11347,527631
typedef struct HashElem HashElem;HashElem11348,527657
struct Hash {Hash11371,528772
  unsigned int htsize;      /* Number of buckets in the hash table */htsize11372,528786
  unsigned int count;       /* Number of entries in this table */count11373,528856
  HashElem *first;          /* The first element of the array */first11374,528922
  struct _ht {              /* the hash table */_ht11375,528987
    int count;                 /* Number of entries with this hash */count11376,529036
    HashElem *chain;           /* Pointer to first entry with this hash */chain11377,529106
  } *ht;ht11378,529181
struct HashElem {HashElem11387,529452
  HashElem *next, *prev;       /* Next and previous elements in the table */next11388,529470
  HashElem *next, *prev;       /* Next and previous elements in the table */prev11388,529470
  void *data;                  /* Data associated with this element */data11389,529547
  const char *pKey;            /* Key associated with this element */pKey11390,529618
#define sqliteHashFirst(sqliteHashFirst11413,530271
#define sqliteHashNext(sqliteHashNext11414,530312
#define sqliteHashData(sqliteHashData11415,530352
#define TK_SEMI TK_SEMI11430,530962
#define TK_EXPLAIN TK_EXPLAIN11431,531008
#define TK_QUERY TK_QUERY11432,531054
#define TK_PLAN TK_PLAN11433,531100
#define TK_BEGIN TK_BEGIN11434,531146
#define TK_TRANSACTION TK_TRANSACTION11435,531192
#define TK_DEFERRED TK_DEFERRED11436,531238
#define TK_IMMEDIATE TK_IMMEDIATE11437,531284
#define TK_EXCLUSIVE TK_EXCLUSIVE11438,531330
#define TK_COMMIT TK_COMMIT11439,531376
#define TK_END TK_END11440,531422
#define TK_ROLLBACK TK_ROLLBACK11441,531468
#define TK_SAVEPOINT TK_SAVEPOINT11442,531514
#define TK_RELEASE TK_RELEASE11443,531560
#define TK_TO TK_TO11444,531606
#define TK_TABLE TK_TABLE11445,531652
#define TK_CREATE TK_CREATE11446,531698
#define TK_IF TK_IF11447,531744
#define TK_NOT TK_NOT11448,531790
#define TK_EXISTS TK_EXISTS11449,531836
#define TK_TEMP TK_TEMP11450,531882
#define TK_LP TK_LP11451,531928
#define TK_RP TK_RP11452,531974
#define TK_AS TK_AS11453,532020
#define TK_WITHOUT TK_WITHOUT11454,532066
#define TK_COMMA TK_COMMA11455,532112
#define TK_OR TK_OR11456,532158
#define TK_AND TK_AND11457,532204
#define TK_IS TK_IS11458,532250
#define TK_MATCH TK_MATCH11459,532296
#define TK_LIKE_KW TK_LIKE_KW11460,532342
#define TK_BETWEEN TK_BETWEEN11461,532388
#define TK_IN TK_IN11462,532434
#define TK_ISNULL TK_ISNULL11463,532480
#define TK_NOTNULL TK_NOTNULL11464,532526
#define TK_NE TK_NE11465,532572
#define TK_EQ TK_EQ11466,532618
#define TK_GT TK_GT11467,532664
#define TK_LE TK_LE11468,532710
#define TK_LT TK_LT11469,532756
#define TK_GE TK_GE11470,532802
#define TK_ESCAPE TK_ESCAPE11471,532848
#define TK_BITAND TK_BITAND11472,532894
#define TK_BITOR TK_BITOR11473,532940
#define TK_LSHIFT TK_LSHIFT11474,532986
#define TK_RSHIFT TK_RSHIFT11475,533032
#define TK_PLUS TK_PLUS11476,533078
#define TK_MINUS TK_MINUS11477,533124
#define TK_STAR TK_STAR11478,533170
#define TK_SLASH TK_SLASH11479,533216
#define TK_REM TK_REM11480,533262
#define TK_CONCAT TK_CONCAT11481,533308
#define TK_COLLATE TK_COLLATE11482,533354
#define TK_BITNOT TK_BITNOT11483,533400
#define TK_ID TK_ID11484,533446
#define TK_INDEXED TK_INDEXED11485,533492
#define TK_ABORT TK_ABORT11486,533538
#define TK_ACTION TK_ACTION11487,533584
#define TK_AFTER TK_AFTER11488,533630
#define TK_ANALYZE TK_ANALYZE11489,533676
#define TK_ASC TK_ASC11490,533722
#define TK_ATTACH TK_ATTACH11491,533768
#define TK_BEFORE TK_BEFORE11492,533814
#define TK_BY TK_BY11493,533860
#define TK_CASCADE TK_CASCADE11494,533906
#define TK_CAST TK_CAST11495,533952
#define TK_COLUMNKW TK_COLUMNKW11496,533998
#define TK_CONFLICT TK_CONFLICT11497,534044
#define TK_DATABASE TK_DATABASE11498,534090
#define TK_DESC TK_DESC11499,534136
#define TK_DETACH TK_DETACH11500,534182
#define TK_EACH TK_EACH11501,534228
#define TK_FAIL TK_FAIL11502,534274
#define TK_FOR TK_FOR11503,534320
#define TK_IGNORE TK_IGNORE11504,534366
#define TK_INITIALLY TK_INITIALLY11505,534412
#define TK_INSTEAD TK_INSTEAD11506,534458
#define TK_NO TK_NO11507,534504
#define TK_KEY TK_KEY11508,534550
#define TK_OF TK_OF11509,534596
#define TK_OFFSET TK_OFFSET11510,534642
#define TK_PRAGMA TK_PRAGMA11511,534688
#define TK_RAISE TK_RAISE11512,534734
#define TK_RECURSIVE TK_RECURSIVE11513,534780
#define TK_REPLACE TK_REPLACE11514,534826
#define TK_RESTRICT TK_RESTRICT11515,534872
#define TK_ROW TK_ROW11516,534918
#define TK_TRIGGER TK_TRIGGER11517,534964
#define TK_VACUUM TK_VACUUM11518,535010
#define TK_VIEW TK_VIEW11519,535056
#define TK_VIRTUAL TK_VIRTUAL11520,535102
#define TK_WITH TK_WITH11521,535148
#define TK_REINDEX TK_REINDEX11522,535194
#define TK_RENAME TK_RENAME11523,535240
#define TK_CTIME_KW TK_CTIME_KW11524,535286
#define TK_ANY TK_ANY11525,535332
#define TK_STRING TK_STRING11526,535378
#define TK_JOIN_KW TK_JOIN_KW11527,535424
#define TK_CONSTRAINT TK_CONSTRAINT11528,535470
#define TK_DEFAULT TK_DEFAULT11529,535516
#define TK_NULL TK_NULL11530,535562
#define TK_PRIMARY TK_PRIMARY11531,535608
#define TK_UNIQUE TK_UNIQUE11532,535654
#define TK_CHECK TK_CHECK11533,535700
#define TK_REFERENCES TK_REFERENCES11534,535746
#define TK_AUTOINCR TK_AUTOINCR11535,535792
#define TK_ON TK_ON11536,535838
#define TK_INSERT TK_INSERT11537,535884
#define TK_DELETE TK_DELETE11538,535930
#define TK_UPDATE TK_UPDATE11539,535976
#define TK_SET TK_SET11540,536022
#define TK_DEFERRABLE TK_DEFERRABLE11541,536068
#define TK_FOREIGN TK_FOREIGN11542,536114
#define TK_DROP TK_DROP11543,536160
#define TK_UNION TK_UNION11544,536206
#define TK_ALL TK_ALL11545,536252
#define TK_EXCEPT TK_EXCEPT11546,536298
#define TK_INTERSECT TK_INTERSECT11547,536344
#define TK_SELECT TK_SELECT11548,536390
#define TK_VALUES TK_VALUES11549,536436
#define TK_DISTINCT TK_DISTINCT11550,536482
#define TK_DOT TK_DOT11551,536528
#define TK_FROM TK_FROM11552,536574
#define TK_JOIN TK_JOIN11553,536620
#define TK_USING TK_USING11554,536666
#define TK_ORDER TK_ORDER11555,536712
#define TK_GROUP TK_GROUP11556,536758
#define TK_HAVING TK_HAVING11557,536804
#define TK_LIMIT TK_LIMIT11558,536850
#define TK_WHERE TK_WHERE11559,536896
#define TK_INTO TK_INTO11560,536942
#define TK_FLOAT TK_FLOAT11561,536988
#define TK_BLOB TK_BLOB11562,537034
#define TK_INTEGER TK_INTEGER11563,537080
#define TK_VARIABLE TK_VARIABLE11564,537126
#define TK_CASE TK_CASE11565,537172
#define TK_WHEN TK_WHEN11566,537218
#define TK_THEN TK_THEN11567,537264
#define TK_ELSE TK_ELSE11568,537310
#define TK_INDEX TK_INDEX11569,537356
#define TK_ALTER TK_ALTER11570,537402
#define TK_ADD TK_ADD11571,537448
#define TK_TO_TEXT TK_TO_TEXT11572,537494
#define TK_TO_BLOB TK_TO_BLOB11573,537540
#define TK_TO_NUMERIC TK_TO_NUMERIC11574,537586
#define TK_TO_INT TK_TO_INT11575,537632
#define TK_TO_REAL TK_TO_REAL11576,537678
#define TK_ISNOT TK_ISNOT11577,537724
#define TK_END_OF_FILE TK_END_OF_FILE11578,537770
#define TK_UNCLOSED_STRING TK_UNCLOSED_STRING11579,537816
#define TK_FUNCTION TK_FUNCTION11580,537862
#define TK_COLUMN TK_COLUMN11581,537908
#define TK_AGG_FUNCTION TK_AGG_FUNCTION11582,537954
#define TK_AGG_COLUMN TK_AGG_COLUMN11583,538000
#define TK_UMINUS TK_UMINUS11584,538046
#define TK_UPLUS TK_UPLUS11585,538092
#define TK_REGISTER TK_REGISTER11586,538138
#define TK_VECTOR TK_VECTOR11587,538184
#define TK_SELECT_COLUMN TK_SELECT_COLUMN11588,538230
#define TK_ASTERISK TK_ASTERISK11589,538276
#define TK_SPAN TK_SPAN11590,538322
#define TK_SPACE TK_SPACE11591,538368
#define TK_ILLEGAL TK_ILLEGAL11592,538414
#define TKFLG_MASK TKFLG_MASK11595,538512
#define TKFLG_DONTFOLD TKFLG_DONTFOLD11599,538635
# define memcpy(memcpy11617,539312
# define double double11626,539616
# define float float11627,539645
# define LONGDOUBLE_TYPE LONGDOUBLE_TYPE11628,539673
#   define SQLITE_BIG_DBL SQLITE_BIG_DBL11630,539735
# define SQLITE_OMIT_DATETIME_FUNCS SQLITE_OMIT_DATETIME_FUNCS11632,539794
# define SQLITE_OMIT_TRACE SQLITE_OMIT_TRACE11633,539832
# undef SQLITE_MIXED_ENDIAN_64BIT_FLOATSQLITE_MIXED_ENDIAN_64BIT_FLOAT11634,539861
# undef SQLITE_HAVE_ISNANSQLITE_HAVE_ISNAN11635,539901
# define SQLITE_BIG_DBL SQLITE_BIG_DBL11638,539957
#define OMIT_TEMPDB OMIT_TEMPDB11647,540230
#define OMIT_TEMPDB OMIT_TEMPDB11649,540258
#define SQLITE_MAX_FILE_FORMAT SQLITE_MAX_FILE_FORMAT11658,540540
# define SQLITE_DEFAULT_FILE_FORMAT SQLITE_DEFAULT_FILE_FORMAT11660,540608
# define SQLITE_DEFAULT_RECURSIVE_TRIGGERS SQLITE_DEFAULT_RECURSIVE_TRIGGERS11668,540810
# define SQLITE_TEMP_STORE SQLITE_TEMP_STORE11676,540995
# define SQLITE_TEMP_STORE_xc SQLITE_TEMP_STORE_xc11677,541024
# undef SQLITE_MAX_WORKER_THREADSSQLITE_MAX_WORKER_THREADS11686,541298
# define SQLITE_MAX_WORKER_THREADS SQLITE_MAX_WORKER_THREADS11687,541332
# define SQLITE_MAX_WORKER_THREADS SQLITE_MAX_WORKER_THREADS11690,541410
# define SQLITE_DEFAULT_WORKER_THREADS SQLITE_DEFAULT_WORKER_THREADS11693,541492
# undef SQLITE_MAX_WORKER_THREADSSQLITE_MAX_WORKER_THREADS11696,541600
# define SQLITE_MAX_WORKER_THREADS SQLITE_MAX_WORKER_THREADS11697,541634
# define SQLITE_DEFAULT_PCACHE_INITSZ SQLITE_DEFAULT_PCACHE_INITSZ11710,542188
#define offsetof(offsetof11718,542341
# define MIN(MIN11725,542498
# define MAX(MAX11728,542553
#define SWAP(SWAP11734,542637
# define SQLITE_EBCDIC SQLITE_EBCDIC11741,542834
# define SQLITE_ASCII SQLITE_ASCII11743,542865
#  define UINT32_TYPE UINT32_TYPE11755,543212
#  define UINT32_TYPE UINT32_TYPE11757,543250
#  define UINT16_TYPE UINT16_TYPE11762,543342
#  define UINT16_TYPE UINT16_TYPE11764,543380
#  define INT16_TYPE INT16_TYPE11769,543476
#  define INT16_TYPE INT16_TYPE11771,543512
#  define UINT8_TYPE UINT8_TYPE11776,543598
#  define UINT8_TYPE UINT8_TYPE11778,543634
#  define INT8_TYPE INT8_TYPE11783,543722
#  define INT8_TYPE INT8_TYPE11785,543756
# define LONGDOUBLE_TYPE LONGDOUBLE_TYPE11789,543827
typedef sqlite_int64 i64;          /* 8-byte signed integer */i6411791,543871
typedef sqlite_uint64 u64;         /* 8-byte unsigned integer */u6411792,543934
typedef UINT32_TYPE u32;           /* 4-byte unsigned integer */u3211793,543999
typedef UINT16_TYPE u16;           /* 2-byte unsigned integer */u1611794,544064
typedef INT16_TYPE i16;            /* 2-byte signed integer */i1611795,544129
typedef UINT8_TYPE u8;             /* 1-byte unsigned integer */u811796,544192
typedef INT8_TYPE i8;              /* 1-byte signed integer */i811797,544257
#define SQLITE_MAX_U32 SQLITE_MAX_U3211805,544593
 typedef u64 tRowcnt;    /* 64-bit only if requested at compile-time */tRowcnt11814,544915
 typedef u32 tRowcnt;    /* 32-bit is the default */tRowcnt11816,544993
typedef INT16_TYPE LogEst;LogEst11842,546047
#   define SQLITE_PTRSIZE SQLITE_PTRSIZE11849,546205
#   define SQLITE_PTRSIZE SQLITE_PTRSIZE11852,546392
#   define SQLITE_PTRSIZE SQLITE_PTRSIZE11854,546427
  typedef uintptr_t uptr;uptr11861,546572
  typedef u32 uptr;uptr11863,546622
  typedef u64 uptr;uptr11865,546648
#define SQLITE_WITHIN(SQLITE_WITHIN11876,546994
#   define SQLITE_BYTEORDER SQLITE_BYTEORDER11893,547702
#   define SQLITE_BYTEORDER SQLITE_BYTEORDER11895,547783
#   define SQLITE_BYTEORDER SQLITE_BYTEORDER11897,547826
# define SQLITE_BIGENDIAN SQLITE_BIGENDIAN11901,547898
# define SQLITE_LITTLEENDIAN SQLITE_LITTLEENDIAN11902,547929
# define SQLITE_UTF16NATIVE SQLITE_UTF16NATIVE11903,547960
# define SQLITE_BIGENDIAN SQLITE_BIGENDIAN11905,548033
# define SQLITE_LITTLEENDIAN SQLITE_LITTLEENDIAN11906,548064
# define SQLITE_UTF16NATIVE SQLITE_UTF16NATIVE11907,548095
  const int sqlite3one = 1;sqlite3one11910,548173
# define SQLITE_BIGENDIAN SQLITE_BIGENDIAN11914,548247
# define SQLITE_LITTLEENDIAN SQLITE_LITTLEENDIAN11915,548304
# define SQLITE_UTF16NATIVE SQLITE_UTF16NATIVE11916,548361
#define LARGEST_INT64 LARGEST_INT6411924,548615
#define SMALLEST_INT64 SMALLEST_INT6411925,548675
#define ROUND8(ROUND811931,548856
#define ROUNDDOWN8(ROUNDDOWN811936,548941
# define EIGHT_BYTE_ALIGNMENT(EIGHT_BYTE_ALIGNMENT11948,549384
# define EIGHT_BYTE_ALIGNMENT(EIGHT_BYTE_ALIGNMENT11950,549458
# undef SQLITE_MAX_MMAP_SIZESQLITE_MAX_MMAP_SIZE11957,549647
# define SQLITE_MAX_MMAP_SIZE SQLITE_MAX_MMAP_SIZE11958,549676
#   define SQLITE_MAX_MMAP_SIZE SQLITE_MAX_MMAP_SIZE11974,550055
#   define SQLITE_MAX_MMAP_SIZE SQLITE_MAX_MMAP_SIZE11976,550123
# define SQLITE_MAX_MMAP_SIZE_xc SQLITE_MAX_MMAP_SIZE_xc11978,550165
# define SQLITE_DEFAULT_MMAP_SIZE SQLITE_DEFAULT_MMAP_SIZE11987,550458
# define SQLITE_DEFAULT_MMAP_SIZE_xc SQLITE_DEFAULT_MMAP_SIZE_xc11988,550494
# undef SQLITE_DEFAULT_MMAP_SIZESQLITE_DEFAULT_MMAP_SIZE11991,550618
# define SQLITE_DEFAULT_MMAP_SIZE SQLITE_DEFAULT_MMAP_SIZE11992,550651
# undef SQLITE_ENABLE_STAT3SQLITE_ENABLE_STAT312001,550934
# define SQLITE_ENABLE_STAT3_OR_STAT4 SQLITE_ENABLE_STAT3_OR_STAT412002,550962
# define SQLITE_ENABLE_STAT3_OR_STAT4 SQLITE_ENABLE_STAT3_OR_STAT412004,551028
# undef SQLITE_ENABLE_STAT3_OR_STAT4SQLITE_ENABLE_STAT3_OR_STAT412006,551103
# define SELECTTRACE_ENABLED SELECTTRACE_ENABLED12014,551349
# define SELECTTRACE_ENABLED SELECTTRACE_ENABLED12016,551386
typedef struct BusyHandler BusyHandler;BusyHandler12028,551820
struct BusyHandler {BusyHandler12029,551860
  int (*xFunc)(void *,int);  /* The busy callback */xFunc12030,551881
  void *pArg;                /* First arg to busy callback */pArg12031,551934
  int nBusy;                 /* Incremented with each busy call */nBusy12032,551996
#define MASTER_NAME MASTER_NAME12040,552231
#define TEMP_MASTER_NAME TEMP_MASTER_NAME12041,552273
#define MASTER_ROOT MASTER_ROOT12046,552374
#define SCHEMA_TABLE(SCHEMA_TABLE12051,552442
#define ArraySize(ArraySize12057,552603
#define IsPowerOfTwo(IsPowerOfTwo12062,552713
#define SQLITE_DYNAMIC SQLITE_DYNAMIC12072,553140
  #define SQLITE_WSD SQLITE_WSD12089,554016
  #define GLOBAL(GLOBAL12090,554043
  #define sqlite3GlobalConfig sqlite3GlobalConfig12091,554113
  #define SQLITE_WSDSQLITE_WSD12095,554291
  #define GLOBAL(GLOBAL12096,554312
  #define sqlite3GlobalConfig sqlite3GlobalConfig12097,554336
#define UNUSED_PARAMETER(UNUSED_PARAMETER12116,555314
#define UNUSED_PARAMETER2(UNUSED_PARAMETER212117,555352
typedef struct AggInfo AggInfo;AggInfo12122,555466
typedef struct AuthContext AuthContext;AuthContext12123,555498
typedef struct AutoincInfo AutoincInfo;AutoincInfo12124,555538
typedef struct Bitvec Bitvec;Bitvec12125,555578
typedef struct CollSeq CollSeq;CollSeq12126,555608
typedef struct Column Column;Column12127,555640
typedef struct Db Db;Db12128,555670
typedef struct Schema Schema;Schema12129,555692
typedef struct Expr Expr;Expr12130,555722
typedef struct ExprList ExprList;ExprList12131,555748
typedef struct ExprSpan ExprSpan;ExprSpan12132,555782
typedef struct FKey FKey;FKey12133,555816
typedef struct FuncDestructor FuncDestructor;FuncDestructor12134,555842
typedef struct FuncDef FuncDef;FuncDef12135,555888
typedef struct FuncDefHash FuncDefHash;FuncDefHash12136,555920
typedef struct IdList IdList;IdList12137,555960
typedef struct Index Index;Index12138,555990
typedef struct IndexSample IndexSample;IndexSample12139,556018
typedef struct KeyClass KeyClass;KeyClass12140,556058
typedef struct KeyInfo KeyInfo;KeyInfo12141,556092
typedef struct Lookaside Lookaside;Lookaside12142,556124
typedef struct LookasideSlot LookasideSlot;LookasideSlot12143,556160
typedef struct Module Module;Module12144,556204
typedef struct NameContext NameContext;NameContext12145,556234
typedef struct Parse Parse;Parse12146,556274
typedef struct PreUpdate PreUpdate;PreUpdate12147,556302
typedef struct PrintfArguments PrintfArguments;PrintfArguments12148,556338
typedef struct RowSet RowSet;RowSet12149,556386
typedef struct Savepoint Savepoint;Savepoint12150,556416
typedef struct Select Select;Select12151,556452
typedef struct SQLiteThread SQLiteThread;SQLiteThread12152,556482
typedef struct SelectDest SelectDest;SelectDest12153,556524
typedef struct SrcList SrcList;SrcList12154,556562
typedef struct StrAccum StrAccum;StrAccum12155,556594
typedef struct Table Table;Table12156,556628
typedef struct TableLock TableLock;TableLock12157,556656
typedef struct Token Token;Token12158,556692
typedef struct TreeView TreeView;TreeView12159,556720
typedef struct Trigger Trigger;Trigger12160,556754
typedef struct TriggerPrg TriggerPrg;TriggerPrg12161,556786
typedef struct TriggerStep TriggerStep;TriggerStep12162,556824
typedef struct UnpackedRecord UnpackedRecord;UnpackedRecord12163,556864
typedef struct VTable VTable;VTable12164,556910
typedef struct VtabCtx VtabCtx;VtabCtx12165,556940
typedef struct Walker Walker;Walker12166,556972
typedef struct WhereInfo WhereInfo;WhereInfo12167,557002
typedef struct With With;With12168,557038
typedef int VList;VList12176,557399
#define SQLITE_BTREE_HSQLITE_BTREE_H12201,558347
#define SQLITE_N_BTREE_META SQLITE_N_BTREE_META12206,558471
  #define SQLITE_DEFAULT_AUTOVACUUM SQLITE_DEFAULT_AUTOVACUUM12213,558689
#define BTREE_AUTOVACUUM_NONE BTREE_AUTOVACUUM_NONE12216,558735
#define BTREE_AUTOVACUUM_FULL BTREE_AUTOVACUUM_FULL12217,558802
#define BTREE_AUTOVACUUM_INCR BTREE_AUTOVACUUM_INCR12218,558867
typedef struct Btree Btree;Btree12223,558975
typedef struct BtCursor BtCursor;BtCursor12224,559003
typedef struct BtShared BtShared;BtShared12225,559037
typedef struct BtreePayload BtreePayload;BtreePayload12226,559071
#define BTREE_OMIT_JOURNAL BTREE_OMIT_JOURNAL12244,559686
#define BTREE_MEMORY BTREE_MEMORY12245,559763
#define BTREE_SINGLE BTREE_SINGLE12246,559824
#define BTREE_UNORDERED BTREE_UNORDERED12247,559896
#define BTREE_INTKEY BTREE_INTKEY12298,562449
#define BTREE_BLOBKEY BTREE_BLOBKEY12299,562527
#define BTREE_FREE_PAGE_COUNT BTREE_FREE_PAGE_COUNT12328,563805
#define BTREE_SCHEMA_VERSION BTREE_SCHEMA_VERSION12329,563841
#define BTREE_FILE_FORMAT BTREE_FILE_FORMAT12330,563877
#define BTREE_DEFAULT_CACHE_SIZE BTREE_DEFAULT_CACHE_SIZE12331,563913
#define BTREE_LARGEST_ROOT_PAGE BTREE_LARGEST_ROOT_PAGE12332,563949
#define BTREE_TEXT_ENCODING BTREE_TEXT_ENCODING12333,563985
#define BTREE_USER_VERSION BTREE_USER_VERSION12334,564021
#define BTREE_INCR_VACUUM BTREE_INCR_VACUUM12335,564057
#define BTREE_APPLICATION_ID BTREE_APPLICATION_ID12336,564093
#define BTREE_DATA_VERSION BTREE_DATA_VERSION12337,564129
#define BTREE_HINT_RANGE BTREE_HINT_RANGE12366,565546
#define BTREE_BULKLOAD BTREE_BULKLOAD12381,566145
#define BTREE_SEEK_EQ BTREE_SEEK_EQ12382,566221
#define BTREE_WRCSR BTREE_WRCSR12407,567448
#define BTREE_FORDELETE BTREE_FORDELETE12408,567511
#define BTREE_SAVEPOSITION BTREE_SAVEPOSITION12437,568719
#define BTREE_AUXDELETE BTREE_AUXDELETE12438,568796
#define BTREE_APPEND BTREE_APPEND12439,568868
struct BtreePayload {BtreePayload12459,569912
  const void *pKey;       /* Key content for indexes.  NULL for tables */pKey12460,569934
  sqlite3_int64 nKey;     /* Size of pKey for indexes.  PRIMARY KEY for tabs */nKey12461,570008
  const void *pData;      /* Data for tables.  NULL for indexes */pData12462,570088
  struct Mem *aMem;       /* First of nMem value in the unpacked pKey */aMem12463,570155
  u16 nMem;               /* Number of aMem[] value.  Might be zero */nMem12464,570228
  int nData;              /* Size of pData.  0 if none. */nData12465,570299
  int nZero;              /* Extra zero data appended after pData,nData */nZero12466,570358
# define sqlite3BtreeEnter(sqlite3BtreeEnter12526,572851
# define sqlite3BtreeEnterAll(sqlite3BtreeEnterAll12527,572882
# define sqlite3BtreeSharable(sqlite3BtreeSharable12528,572915
# define sqlite3BtreeEnterCursor(sqlite3BtreeEnterCursor12529,572950
# define sqlite3BtreeConnectionCount(sqlite3BtreeConnectionCount12530,572986
# define sqlite3BtreeLeave(sqlite3BtreeLeave12545,573531
# define sqlite3BtreeLeaveCursor(sqlite3BtreeLeaveCursor12546,573561
# define sqlite3BtreeLeaveAll(sqlite3BtreeLeaveAll12547,573597
# define sqlite3BtreeHoldsMutex(sqlite3BtreeHoldsMutex12549,573631
# define sqlite3BtreeHoldsAllMutexes(sqlite3BtreeHoldsAllMutexes12550,573668
# define sqlite3SchemaMutexHeld(sqlite3SchemaMutexHeld12551,573710
#define SQLITE_VDBE_HSQLITE_VDBE_H12579,574763
typedef struct Vdbe Vdbe;Vdbe12587,574974
typedef struct Mem Mem;Mem12593,575108
typedef struct SubProgram SubProgram;SubProgram12594,575132
struct VdbeOp {VdbeOp12601,575347
  u8 opcode;          /* What operation to perform */opcode12602,575363
  signed char p4type; /* One of the P4_xxx constants for p4 */p4type12603,575417
  u16 p5;             /* Fifth parameter is an unsigned 16-bit integer */p512604,575480
  int p1;             /* First operand */p112605,575554
  int p2;             /* Second parameter (often the jump destination) */p212606,575596
  int p3;             /* The third parameter */p312607,575670
  union p4union {     /* fourth parameter */p4union12608,575718
    int i;                 /* Integer value if p4type==P4_INT32 */i12609,575763
    void *p;               /* Generic pointer */p12610,575830
    char *z;               /* Pointer to data for string (char array) types */z12611,575879
    i64 *pI64;             /* Used when p4type is P4_INT64 */pI6412612,575958
    double *pReal;         /* Used when p4type is P4_REAL */pReal12613,576020
    FuncDef *pFunc;        /* Used when p4type is P4_FUNCDEF */pFunc12614,576081
    sqlite3_context *pCtx; /* Used when p4type is P4_FUNCCTX */pCtx12615,576145
    CollSeq *pColl;        /* Used when p4type is P4_COLLSEQ */pColl12616,576209
    Mem *pMem;             /* Used when p4type is P4_MEM */pMem12617,576273
    VTable *pVtab;         /* Used when p4type is P4_VTAB */pVtab12618,576333
    KeyInfo *pKeyInfo;     /* Used when p4type is P4_KEYINFO */pKeyInfo12619,576394
    int *ai;               /* Used when p4type is P4_INTARRAY */ai12620,576458
    SubProgram *pProgram;  /* Used when p4type is P4_SUBPROGRAM */pProgram12621,576523
    Table *pTab;           /* Used when p4type is P4_TABLE */pTab12622,576590
    Expr *pExpr;           /* Used when p4type is P4_EXPR */pExpr12624,576686
    int (*xAdvance)(BtCursor *, int *);xAdvance12626,576754
  } p4;p412627,576794
  char *zComment;          /* Comment to improve readability */zComment12629,576840
  u32 cnt;                 /* Number of times this instruction was executed */cnt12632,576931
  u64 cycles;              /* Total time spent executing this instruction */cycles12633,577010
  int iSrcLine;            /* Source-code line that generated this opcode */iSrcLine12636,577122
typedef struct VdbeOp VdbeOp;VdbeOp12639,577209
struct SubProgram {SubProgram12645,577301
  VdbeOp *aOp;                  /* Array of opcodes for sub-program */aOp12646,577321
  int nOp;                      /* Elements in aOp[] */nOp12647,577392
  int nMem;                     /* Number of memory cells required */nMem12648,577448
  int nCsr;                     /* Number of cursors required */nCsr12649,577518
  u8 *aOnce;                    /* Array of OP_Once flags */aOnce12650,577583
  void *token;                  /* id that may be used to recursive triggers */token12651,577644
  SubProgram *pNext;            /* Next sub-program already visited */pNext12652,577724
struct VdbeOpList {VdbeOpList12659,577909
  u8 opcode;          /* What operation to perform */opcode12660,577929
  signed char p1;     /* First operand */p112661,577983
  signed char p2;     /* Second parameter (often the jump destination) */p212662,578025
  signed char p3;     /* Third parameter */p312663,578099
typedef struct VdbeOpList VdbeOpList;VdbeOpList12665,578146
#define P4_NOTUSED P4_NOTUSED12670,578226
#define P4_DYNAMIC P4_DYNAMIC12671,578287
#define P4_STATIC P4_STATIC12672,578368
#define P4_COLLSEQ P4_COLLSEQ12673,578427
#define P4_FUNCDEF P4_FUNCDEF12674,578498
#define P4_KEYINFO P4_KEYINFO12675,578569
#define P4_EXPR P4_EXPR12676,578640
#define P4_MEM P4_MEM12677,578704
#define P4_TRANSIENT P4_TRANSIENT12678,578775
#define P4_VTAB P4_VTAB12679,578845
#define P4_REAL P4_REAL12680,578921
#define P4_INT64 P4_INT6412681,578988
#define P4_INT32 P4_INT3212682,579050
#define P4_INTARRAY P4_INTARRAY12683,579112
#define P4_SUBPROGRAM P4_SUBPROGRAM12684,579178
#define P4_ADVANCE P4_ADVANCE12685,579255
#define P4_TABLE P4_TABLE12686,579333
#define P4_FUNCCTX P4_FUNCCTX12687,579402
#define P5_ConstraintNotNull P5_ConstraintNotNull12690,579518
#define P5_ConstraintUnique P5_ConstraintUnique12691,579549
#define P5_ConstraintCheck P5_ConstraintCheck12692,579580
#define P5_ConstraintFK P5_ConstraintFK12693,579611
#define COLNAME_NAME COLNAME_NAME12699,579776
#define COLNAME_DECLTYPE COLNAME_DECLTYPE12700,579803
#define COLNAME_DATABASE COLNAME_DATABASE12701,579830
#define COLNAME_TABLE COLNAME_TABLE12702,579857
#define COLNAME_COLUMN COLNAME_COLUMN12703,579884
# define COLNAME_N COLNAME_N12705,579948
#   define COLNAME_N COLNAME_N12708,580052
#   define COLNAME_N COLNAME_N12710,580118
#define ADDR(ADDR12720,580443
#define OP_Savepoint OP_Savepoint12730,580876
#define OP_AutoCommit OP_AutoCommit12731,580905
#define OP_Transaction OP_Transaction12732,580934
#define OP_SorterNext OP_SorterNext12733,580963
#define OP_PrevIfOpen OP_PrevIfOpen12734,580992
#define OP_NextIfOpen OP_NextIfOpen12735,581021
#define OP_Prev OP_Prev12736,581050
#define OP_Next OP_Next12737,581079
#define OP_Checkpoint OP_Checkpoint12738,581108
#define OP_JournalMode OP_JournalMode12739,581137
#define OP_Vacuum OP_Vacuum12740,581166
#define OP_VFilter OP_VFilter12741,581195
#define OP_VUpdate OP_VUpdate12742,581273
#define OP_Goto OP_Goto12743,581351
#define OP_Gosub OP_Gosub12744,581380
#define OP_InitCoroutine OP_InitCoroutine12745,581409
#define OP_Yield OP_Yield12746,581438
#define OP_MustBeInt OP_MustBeInt12747,581467
#define OP_Jump OP_Jump12748,581496
#define OP_Not OP_Not12749,581525
#define OP_Once OP_Once12750,581603
#define OP_If OP_If12751,581632
#define OP_IfNot OP_IfNot12752,581661
#define OP_SeekLT OP_SeekLT12753,581690
#define OP_SeekLE OP_SeekLE12754,581768
#define OP_SeekGE OP_SeekGE12755,581846
#define OP_SeekGT OP_SeekGT12756,581924
#define OP_Or OP_Or12757,582002
#define OP_And OP_And12758,582085
#define OP_NoConflict OP_NoConflict12759,582169
#define OP_NotFound OP_NotFound12760,582247
#define OP_Found OP_Found12761,582325
#define OP_SeekRowid OP_SeekRowid12762,582403
#define OP_NotExists OP_NotExists12763,582481
#define OP_IsNull OP_IsNull12764,582559
#define OP_NotNull OP_NotNull12765,582646
#define OP_Ne OP_Ne12766,582734
#define OP_Eq OP_Eq12767,582812
#define OP_Gt OP_Gt12768,582890
#define OP_Le OP_Le12769,582968
#define OP_Lt OP_Lt12770,583046
#define OP_Ge OP_Ge12771,583124
#define OP_ElseNotEq OP_ElseNotEq12772,583202
#define OP_BitAnd OP_BitAnd12773,583280
#define OP_BitOr OP_BitOr12774,583362
#define OP_ShiftLeft OP_ShiftLeft12775,583443
#define OP_ShiftRight OP_ShiftRight12776,583526
#define OP_Add OP_Add12777,583609
#define OP_Subtract OP_Subtract12778,583689
#define OP_Multiply OP_Multiply12779,583770
#define OP_Divide OP_Divide12780,583850
#define OP_Remainder OP_Remainder12781,583931
#define OP_Concat OP_Concat12782,584010
#define OP_Last OP_Last12783,584092
#define OP_BitNot OP_BitNot12784,584121
#define OP_IfSmaller OP_IfSmaller12785,584199
#define OP_SorterSort OP_SorterSort12786,584228
#define OP_Sort OP_Sort12787,584257
#define OP_Rewind OP_Rewind12788,584286
#define OP_IdxLE OP_IdxLE12789,584315
#define OP_IdxGT OP_IdxGT12790,584393
#define OP_IdxLT OP_IdxLT12791,584471
#define OP_IdxGE OP_IdxGE12792,584549
#define OP_RowSetRead OP_RowSetRead12793,584627
#define OP_RowSetTest OP_RowSetTest12794,584705
#define OP_Program OP_Program12795,584783
#define OP_FkIfZero OP_FkIfZero12796,584812
#define OP_IfPos OP_IfPos12797,584890
#define OP_IfNotZero OP_IfNotZero12798,584970
#define OP_DecrJumpZero OP_DecrJumpZero12799,585049
#define OP_IncrVacuum OP_IncrVacuum12800,585127
#define OP_VNext OP_VNext12801,585156
#define OP_Init OP_Init12802,585185
#define OP_Return OP_Return12803,585263
#define OP_EndCoroutine OP_EndCoroutine12804,585292
#define OP_HaltIfNull OP_HaltIfNull12805,585321
#define OP_Halt OP_Halt12806,585399
#define OP_Integer OP_Integer12807,585428
#define OP_Int64 OP_Int6412808,585506
#define OP_String OP_String12809,585584
#define OP_Null OP_Null12810,585662
#define OP_SoftNull OP_SoftNull12811,585740
#define OP_Blob OP_Blob12812,585818
#define OP_Variable OP_Variable12813,585896
#define OP_Move OP_Move12814,585974
#define OP_Copy OP_Copy12815,586052
#define OP_SCopy OP_SCopy12816,586130
#define OP_IntCopy OP_IntCopy12817,586208
#define OP_ResultRow OP_ResultRow12818,586286
#define OP_CollSeq OP_CollSeq12819,586364
#define OP_Function0 OP_Function012820,586393
#define OP_Function OP_Function12821,586471
#define OP_AddImm OP_AddImm12822,586549
#define OP_RealAffinity OP_RealAffinity12823,586627
#define OP_Cast OP_Cast12824,586656
#define OP_Permutation OP_Permutation12825,586734
#define OP_Compare OP_Compare12826,586763
#define OP_String8 OP_String812827,586841
#define OP_Column OP_Column12828,586919
#define OP_Affinity OP_Affinity12829,586997
#define OP_MakeRecord OP_MakeRecord12830,587075
#define OP_Count OP_Count12831,587153
#define OP_ReadCookie OP_ReadCookie12832,587231
#define OP_SetCookie OP_SetCookie12833,587260
#define OP_ReopenIdx OP_ReopenIdx12834,587289
#define OP_OpenRead OP_OpenRead12835,587367
#define OP_OpenWrite OP_OpenWrite12836,587445
#define OP_OpenAutoindex OP_OpenAutoindex12837,587523
#define OP_OpenEphemeral OP_OpenEphemeral12838,587601
#define OP_SorterOpen OP_SorterOpen12839,587679
#define OP_SequenceTest OP_SequenceTest12840,587708
#define OP_OpenPseudo OP_OpenPseudo12841,587786
#define OP_Close OP_Close12842,587864
#define OP_ColumnsUsed OP_ColumnsUsed12843,587893
#define OP_Sequence OP_Sequence12844,587922
#define OP_NewRowid OP_NewRowid12845,588000
#define OP_Insert OP_Insert12846,588078
#define OP_InsertInt OP_InsertInt12847,588156
#define OP_Delete OP_Delete12848,588234
#define OP_ResetCount OP_ResetCount12849,588263
#define OP_SorterCompare OP_SorterCompare12850,588292
#define OP_SorterData OP_SorterData12851,588372
#define OP_RowData OP_RowData12852,588450
#define OP_Rowid OP_Rowid12853,588528
#define OP_NullRow OP_NullRow12854,588606
#define OP_SorterInsert OP_SorterInsert12855,588635
#define OP_IdxInsert OP_IdxInsert12856,588713
#define OP_IdxDelete OP_IdxDelete12857,588791
#define OP_Seek OP_Seek12858,588869
#define OP_IdxRowid OP_IdxRowid12859,588947
#define OP_Destroy OP_Destroy12860,589025
#define OP_Clear OP_Clear12861,589054
#define OP_Real OP_Real12862,589083
#define OP_ResetSorter OP_ResetSorter12863,589161
#define OP_CreateIndex OP_CreateIndex12864,589190
#define OP_CreateTable OP_CreateTable12865,589268
#define OP_SqlExec OP_SqlExec12866,589346
#define OP_ParseSchema OP_ParseSchema12867,589375
#define OP_LoadAnalysis OP_LoadAnalysis12868,589404
#define OP_DropTable OP_DropTable12869,589433
#define OP_DropIndex OP_DropIndex12870,589462
#define OP_DropTrigger OP_DropTrigger12871,589491
#define OP_IntegrityCk OP_IntegrityCk12872,589520
#define OP_RowSetAdd OP_RowSetAdd12873,589549
#define OP_Param OP_Param12874,589627
#define OP_FkCounter OP_FkCounter12875,589656
#define OP_MemMax OP_MemMax12876,589734
#define OP_OffsetLimit OP_OffsetLimit12877,589812
#define OP_AggStep0 OP_AggStep012878,589914
#define OP_AggStep OP_AggStep12879,589992
#define OP_AggFinal OP_AggFinal12880,590070
#define OP_Expire OP_Expire12881,590148
#define OP_TableLock OP_TableLock12882,590177
#define OP_VBegin OP_VBegin12883,590255
#define OP_VCreate OP_VCreate12884,590284
#define OP_VDestroy OP_VDestroy12885,590313
#define OP_VOpen OP_VOpen12886,590342
#define OP_VColumn OP_VColumn12887,590371
#define OP_VRename OP_VRename12888,590449
#define OP_Pagecount OP_Pagecount12889,590478
#define OP_MaxPgcnt OP_MaxPgcnt12890,590507
#define OP_CursorHint OP_CursorHint12891,590536
#define OP_Noop OP_Noop12892,590565
#define OP_Explain OP_Explain12893,590594
#define OPFLG_JUMP OPFLG_JUMP12899,590794
#define OPFLG_IN1 OPFLG_IN112900,590859
#define OPFLG_IN2 OPFLG_IN212901,590919
#define OPFLG_IN3 OPFLG_IN312902,590979
#define OPFLG_OUT2 OPFLG_OUT212903,591039
#define OPFLG_OUT3 OPFLG_OUT312904,591100
#define OPFLG_INITIALIZER OPFLG_INITIALIZER12905,591161
#define SQLITE_MX_JUMP_OPCODE SQLITE_MX_JUMP_OPCODE12934,592711
# define sqlite3VdbeVerifyNoMallocRequired(sqlite3VdbeVerifyNoMallocRequired12959,594011
# define sqlite3VdbeVerifyNoResultRow(sqlite3VdbeVerifyNoResultRow12960,594059
typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);RecordCompare13011,596857
# define VdbeComment(VdbeComment13027,597456
# define VdbeNoopComment(VdbeNoopComment13029,597573
#   define VdbeModuleComment(VdbeModuleComment13031,597665
#   define VdbeModuleComment(VdbeModuleComment13033,597730
# define VdbeComment(VdbeComment13036,597776
# define VdbeNoopComment(VdbeNoopComment13037,597800
# define VdbeModuleComment(VdbeModuleComment13038,597828
# define VdbeCoverage(VdbeCoverage13065,599038
# define VdbeCoverageIf(VdbeCoverageIf13066,599100
# define VdbeCoverageAlwaysTaken(VdbeCoverageAlwaysTaken13067,599171
# define VdbeCoverageNeverTaken(VdbeCoverageNeverTaken13068,599238
# define VDBE_OFFSET_LINENO(VDBE_OFFSET_LINENO13069,599304
# define VdbeCoverage(VdbeCoverage13071,599354
# define VdbeCoverageIf(VdbeCoverageIf13072,599379
# define VdbeCoverageAlwaysTaken(VdbeCoverageAlwaysTaken13073,599408
# define VdbeCoverageNeverTaken(VdbeCoverageNeverTaken13074,599444
# define VDBE_OFFSET_LINENO(VDBE_OFFSET_LINENO13075,599479
# define sqlite3VdbeScanStatus(sqlite3VdbeScanStatus13081,599649
#define SQLITE_PAGER_HSQLITE_PAGER_H13107,600639
  #define SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT13115,600919
typedef u32 Pgno;Pgno13122,601110
typedef struct Pager Pager;Pager13127,601213
typedef struct PgHdr DbPage;DbPage13132,601274
#define PAGER_MJ_PGNO(PAGER_MJ_PGNO13142,601692
#define PAGER_OMIT_JOURNAL PAGER_OMIT_JOURNAL13149,601912
#define PAGER_MEMORY PAGER_MEMORY13150,601986
#define PAGER_LOCKINGMODE_QUERY PAGER_LOCKINGMODE_QUERY13155,602126
#define PAGER_LOCKINGMODE_NORMAL PAGER_LOCKINGMODE_NORMAL13156,602166
#define PAGER_LOCKINGMODE_EXCLUSIVE PAGER_LOCKINGMODE_EXCLUSIVE13157,602206
#define PAGER_JOURNALMODE_QUERY PAGER_JOURNALMODE_QUERY13166,602508
#define PAGER_JOURNALMODE_DELETE PAGER_JOURNALMODE_DELETE13167,602587
#define PAGER_JOURNALMODE_PERSIST PAGER_JOURNALMODE_PERSIST13168,602667
#define PAGER_JOURNALMODE_OFF PAGER_JOURNALMODE_OFF13169,602748
#define PAGER_JOURNALMODE_TRUNCATE PAGER_JOURNALMODE_TRUNCATE13170,602814
#define PAGER_JOURNALMODE_MEMORY PAGER_JOURNALMODE_MEMORY13171,602891
#define PAGER_JOURNALMODE_WAL PAGER_JOURNALMODE_WAL13172,602962
#define PAGER_GET_NOCONTENT PAGER_GET_NOCONTENT13177,603101
#define PAGER_GET_READONLY PAGER_GET_READONLY13178,603172
#define PAGER_SYNCHRONOUS_OFF PAGER_SYNCHRONOUS_OFF13188,603483
#define PAGER_SYNCHRONOUS_NORMAL PAGER_SYNCHRONOUS_NORMAL13189,603554
#define PAGER_SYNCHRONOUS_FULL PAGER_SYNCHRONOUS_FULL13190,603628
#define PAGER_SYNCHRONOUS_EXTRA PAGER_SYNCHRONOUS_EXTRA13191,603700
#define PAGER_SYNCHRONOUS_MASK PAGER_SYNCHRONOUS_MASK13192,603773
#define PAGER_FULLFSYNC PAGER_FULLFSYNC13193,603848
#define PAGER_CKPT_FULLFSYNC PAGER_CKPT_FULLFSYNC13194,603916
#define PAGER_CACHESPILL PAGER_CACHESPILL13195,603995
#define PAGER_FLAGS_MASK PAGER_FLAGS_MASK13196,604065
# define sqlite3PagerUseWal(sqlite3PagerUseWal13279,607909
# define disable_simulated_io_errors(disable_simulated_io_errors13324,609614
# define enable_simulated_io_errors(enable_simulated_io_errors13325,609653
typedef struct PgHdr PgHdr;PgHdr13351,610528
typedef struct PCache PCache;PCache13352,610556
struct PgHdr {PgHdr13358,610680
  sqlite3_pcache_page *pPage;    /* Pcache object page handle */pPage13359,610695
  void *pData;                   /* Page data */pData13360,610760
  void *pExtra;                  /* Extra content */pExtra13361,610809
  PgHdr *pDirty;                 /* Transient list of dirty sorted by pgno */pDirty13362,610862
  Pager *pPager;                 /* The pager this page is part of */pPager13363,610940
  Pgno pgno;                     /* Page number for this page */pgno13364,611010
  u32 pageHash;                  /* Hash of page content */pageHash13366,611101
  u16 flags;                     /* PGHDR flags defined below */flags13368,611168
  i16 nRef;                      /* Number of users of this page */nRef13374,611436
  PCache *pCache;                /* Cache that owns this page */pCache13375,611504
  PgHdr *pDirtyNext;             /* Next element in list of dirty pages */pDirtyNext13377,611570
  PgHdr *pDirtyPrev;             /* Previous element in list of dirty pages */pDirtyPrev13378,611645
#define PGHDR_CLEAN PGHDR_CLEAN13382,611761
#define PGHDR_DIRTY PGHDR_DIRTY13383,611839
#define PGHDR_WRITEABLE PGHDR_WRITEABLE13384,611916
#define PGHDR_NEED_SYNC PGHDR_NEED_SYNC13385,611989
#define PGHDR_DONT_WRITE PGHDR_DONT_WRITE13387,612140
#define PGHDR_MMAP PGHDR_MMAP13388,612212
#define PGHDR_WAL_APPEND PGHDR_WAL_APPEND13390,612284
#define _SQLITE_OS_H__SQLITE_OS_H_13543,618248
#define SQLITE_OS_SETUP_HSQLITE_OS_SETUP_H13567,619062
#    undef SQLITE_OS_UNIXSQLITE_OS_UNIX13579,619440
#    define SQLITE_OS_UNIX SQLITE_OS_UNIX13580,619466
#    undef SQLITE_OS_WINSQLITE_OS_WIN13581,619495
#    define SQLITE_OS_WIN SQLITE_OS_WIN13582,619520
#    undef SQLITE_OS_OTHERSQLITE_OS_OTHER13584,619556
#  define SQLITE_OS_OTHER SQLITE_OS_OTHER13588,619657
#      define SQLITE_OS_WIN SQLITE_OS_WIN13592,619833
#      define SQLITE_OS_UNIX SQLITE_OS_UNIX13593,619863
#      define SQLITE_OS_WIN SQLITE_OS_WIN13595,619904
#      define SQLITE_OS_UNIX SQLITE_OS_UNIX13596,619934
#    define SQLITE_OS_UNIX SQLITE_OS_UNIX13599,619984
#    define SQLITE_OS_WIN SQLITE_OS_WIN13603,620052
# define SET_FULLSYNC(SET_FULLSYNC13616,620389
# define SQLITE_DEFAULT_SECTOR_SIZE SQLITE_DEFAULT_SECTOR_SIZE13623,620502
# define SQLITE_TEMP_FILE_PREFIX SQLITE_TEMP_FILE_PREFIX13648,621807
#define NO_LOCK NO_LOCK13668,622735
#define SHARED_LOCK SHARED_LOCK13669,622761
#define RESERVED_LOCK RESERVED_LOCK13670,622787
#define PENDING_LOCK PENDING_LOCK13671,622813
#define EXCLUSIVE_LOCK EXCLUSIVE_LOCK13672,622839
# define PENDING_BYTE PENDING_BYTE13730,625932
# define PENDING_BYTE PENDING_BYTE13732,625977
#define RESERVED_BYTE RESERVED_BYTE13734,626030
#define SHARED_FIRST SHARED_FIRST13735,626073
#define SHARED_SIZE SHARED_SIZE13736,626116
#define SQLITE_FCNTL_DB_UNCHANGED SQLITE_FCNTL_DB_UNCHANGED13757,627028
# define SQLITE_MUTEX_OMITSQLITE_MUTEX_OMIT13839,630719
#    define SQLITE_MUTEX_PTHREADSSQLITE_MUTEX_PTHREADS13843,630827
#    define SQLITE_MUTEX_W32SQLITE_MUTEX_W3213845,630883
#    define SQLITE_MUTEX_NOOPSQLITE_MUTEX_NOOP13847,630920
#define sqlite3_mutex_alloc(sqlite3_mutex_alloc13855,631068
#define sqlite3_mutex_free(sqlite3_mutex_free13856,631122
#define sqlite3_mutex_enter(sqlite3_mutex_enter13857,631152
#define sqlite3_mutex_try(sqlite3_mutex_try13858,631187
#define sqlite3_mutex_leave(sqlite3_mutex_leave13859,631231
#define sqlite3_mutex_held(sqlite3_mutex_held13860,631266
#define sqlite3_mutex_notheld(sqlite3_mutex_notheld13861,631314
#define sqlite3MutexAlloc(sqlite3MutexAlloc13862,631362
#define sqlite3MutexInit(sqlite3MutexInit13863,631416
#define sqlite3MutexEnd(sqlite3MutexEnd13864,631460
#define MUTEX_LOGIC(MUTEX_LOGIC13865,631486
#define MUTEX_LOGIC(MUTEX_LOGIC13867,631515
# define SQLITE_DEFAULT_SYNCHRONOUS SQLITE_DEFAULT_SYNCHRONOUS13878,631992
# define SQLITE_DEFAULT_SYNCHRONOUS SQLITE_DEFAULT_SYNCHRONOUS13898,632690
# define SQLITE_DEFAULT_WAL_SYNCHRONOUS SQLITE_DEFAULT_WAL_SYNCHRONOUS13901,632774
struct Db {Db13911,633168
  char *zDbSName;      /* Name of this database. (schema name, not filename) */zDbSName13912,633180
  Btree *pBt;          /* The B*Tree structure for this database file */pBt13913,633260
  u8 safety_level;     /* How aggressive at syncing data to disk */safety_level13914,633333
  u8 bSyncSet;         /* True if "PRAGMA synchronous=N" has been run */bSyncSet13915,633401
  Schema *pSchema;     /* Pointer to database schema (possibly shared) */pSchema13916,633474
struct Schema {Schema13936,634360
  int schema_cookie;   /* Database schema version number for this file */schema_cookie13937,634376
  int iGeneration;     /* Generation counter.  Incremented with each change */iGeneration13938,634450
  Hash tblHash;        /* All tables indexed by name */tblHash13939,634529
  Hash idxHash;        /* All (named) indices indexed by name */idxHash13940,634585
  Hash trigHash;       /* All triggers indexed by name */trigHash13941,634650
  Hash fkeyHash;       /* All foreign keys by referenced table name */fkeyHash13942,634708
  Table *pSeqTab;      /* The sqlite_sequence table used by AUTOINCREMENT */pSeqTab13943,634779
  u8 file_format;      /* Schema format version for this file */file_format13944,634856
  u8 enc;              /* Text encoding used by this database */enc13945,634921
  u16 schemaFlags;     /* Flags associated with this schema */schemaFlags13946,634986
  int cache_size;      /* Number of pages to use in the cache */cache_size13947,635049
#define DbHasProperty(DbHasProperty13954,635215
#define DbHasAnyProperty(DbHasAnyProperty13955,635294
#define DbSetProperty(DbSetProperty13956,635371
#define DbClearProperty(DbClearProperty13957,635442
#define DB_SchemaLoaded DB_SchemaLoaded13969,635878
#define DB_UnresetViews DB_UnresetViews13970,635946
#define DB_Empty DB_Empty13971,636024
#define SQLITE_N_LIMIT SQLITE_N_LIMIT13977,636210
struct Lookaside {Lookaside13999,637300
  u32 bDisable;           /* Only operate the lookaside when zero */bDisable14000,637319
  u16 sz;                 /* Size of each buffer in bytes */sz14001,637388
  u8 bMalloced;           /* True if pStart obtained from sqlite3_malloc() */bMalloced14002,637449
  int nOut;               /* Number of buffers currently checked out */nOut14003,637527
  int mxOut;              /* Highwater mark for nOut */mxOut14004,637599
  int anStat[3];          /* 0: hits.  1: size misses.  2: full misses */anStat14005,637655
  LookasideSlot *pFree;   /* List of available buffers */pFree14006,637729
  void *pStart;           /* First byte of available memory space */pStart14007,637787
  void *pEnd;             /* First byte past end of available space */pEnd14008,637856
struct LookasideSlot {LookasideSlot14010,637930
  LookasideSlot *pNext;    /* Next buffer in the list of free buffers */pNext14011,637953
#define SQLITE_FUNC_HASH_SZ SQLITE_FUNC_HASH_SZ14021,638283
struct FuncDefHash {FuncDefHash14022,638314
  FuncDef *a[SQLITE_FUNC_HASH_SZ];       /* Hash table for functions */a14023,638335
typedef struct sqlite3_userauth sqlite3_userauth;sqlite3_userauth14031,638558
struct sqlite3_userauth {sqlite3_userauth14032,638608
  u8 authLevel;                 /* Current authentication level */authLevel14033,638634
  int nAuthPW;                  /* Size of the zAuthPW in bytes */nAuthPW14034,638701
  char *zAuthPW;                /* Password used to authenticate */zAuthPW14035,638768
  char *zAuthUser;              /* User name used to authenticate */zAuthUser14036,638836
#define UAUTH_Unknown UAUTH_Unknown14040,638961
#define UAUTH_Fail UAUTH_Fail14041,639030
#define UAUTH_User UAUTH_User14042,639095
#define UAUTH_Admin UAUTH_Admin14043,639164
  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,sqlite3_xauth14057,639678
  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,sqlite3_xauth14060,639820
#define SQLITE_TRACE_LEGACY SQLITE_TRACE_LEGACY14068,640091
#define SQLITE_TRACE_LEGACY SQLITE_TRACE_LEGACY14070,640131
struct sqlite3 {sqlite314077,640277
  sqlite3_vfs *pVfs;            /* OS Interface */pVfs14078,640294
  struct Vdbe *pVdbe;           /* List of active virtual machines */pVdbe14079,640345
  CollSeq *pDfltColl;           /* The default collating sequence (BINARY) */pDfltColl14080,640415
  sqlite3_mutex *mutex;         /* Connection mutex */mutex14081,640493
  Db *aDb;                      /* All backends */aDb14082,640548
  int nDb;                      /* Number of backends currently in use */nDb14083,640599
  int flags;                    /* Miscellaneous flags. See below */flags14084,640673
  i64 lastRowid;                /* ROWID of most recent insert (see above) */lastRowid14085,640742
  i64 szMmap;                   /* Default mmap_size setting */szMmap14086,640820
  unsigned int openFlags;       /* Flags passed to sqlite3_vfs.xOpen() */openFlags14087,640884
  int errCode;                  /* Most recent error code (SQLITE_*) */errCode14088,640958
  int errMask;                  /* & result codes with this before returning */errMask14089,641030
  int iSysErrno;                /* Errno value from last system error */iSysErrno14090,641110
  u16 dbOptFlags;               /* Flags to enable/disable optimizations */dbOptFlags14091,641183
  u8 enc;                       /* Text encoding */enc14092,641259
  u8 autoCommit;                /* The auto-commit flag. */autoCommit14093,641311
  u8 temp_store;                /* 1: file 2: memory 0: default */temp_store14094,641371
  u8 mallocFailed;              /* True if we have seen a malloc failure */mallocFailed14095,641438
  u8 bBenignMalloc;             /* Do not require OOMs if true */bBenignMalloc14096,641514
  u8 dfltLockMode;              /* Default locking-mode for attached dbs */dfltLockMode14097,641580
  signed char nextAutovac;      /* Autovac setting after VACUUM if >=0 */nextAutovac14098,641656
  u8 suppressErr;               /* Do not issue error messages if true */suppressErr14099,641730
  u8 vtabOnConflict;            /* Value to return for s3_vtab_on_conflict() */vtabOnConflict14100,641804
  u8 isTransactionSavepoint;    /* True if the outermost savepoint is a TS */isTransactionSavepoint14101,641884
  u8 mTrace;                    /* zero or more SQLITE_TRACE flags */mTrace14102,641962
  u8 skipBtreeMutex;            /* True if no shared-cache backends */skipBtreeMutex14103,642032
  u8 nSqlExec;                  /* Number of pending OP_SqlExec opcodes */nSqlExec14104,642103
  int nextPagesize;             /* Pagesize after VACUUM if >0 */nextPagesize14105,642178
  u32 magic;                    /* Magic number for detect library misuse */magic14106,642244
  int nChange;                  /* Value returned by sqlite3_changes() */nChange14107,642321
  int nTotalChange;             /* Value returned by sqlite3_total_changes() */nTotalChange14108,642395
  int aLimit[SQLITE_N_LIMIT];   /* Limits */aLimit14109,642475
  int nMaxSorterMmap;           /* Maximum size of regions mapped by sorter */nMaxSorterMmap14110,642520
  struct sqlite3InitInfo {      /* Information used during initialization */sqlite3InitInfo14111,642599
    int newTnum;                /* Rootpage of table being initialized */newTnum14112,642676
    u8 iDb;                     /* Which db file is being initialized */iDb14113,642750
    u8 busy;                    /* TRUE if currently initializing */busy14114,642823
    u8 orphanTrigger;           /* Last statement is orphaned TEMP trigger */orphanTrigger14115,642892
    u8 imposterTable;           /* Building an imposter table */imposterTable14116,642970
  } init;init14117,643035
  int nVdbeActive;              /* Number of VDBEs currently running */nVdbeActive14118,643045
  int nVdbeRead;                /* Number of active VDBEs that read or write */nVdbeRead14119,643117
  int nVdbeWrite;               /* Number of active VDBEs that read and write */nVdbeWrite14120,643197
  int nVdbeExec;                /* Number of nested calls to VdbeExec() */nVdbeExec14121,643278
  int nVDestroy;                /* Number of active OP_VDestroy operations */nVDestroy14122,643353
  int nExtension;               /* Number of loaded extensions */nExtension14123,643431
  void **aExtension;            /* Array of shared library handles */aExtension14124,643497
  int (*xTrace)(u32,void*,void*,void*);     /* Trace function */xTrace14125,643567
  void *pTraceArg;                          /* Argument to the trace function */pTraceArg14126,643632
  void (*xProfile)(void*,const char*,u64);  /* Profiling function */xProfile14127,643713
  void *pProfileArg;                        /* Argument to profile function */pProfileArg14128,643782
  void *pCommitArg;                 /* Argument to xCommitCallback() */pCommitArg14129,643861
  int (*xCommitCallback)(void*);    /* Invoked at every commit. */xCommitCallback14130,643933
  void *pRollbackArg;               /* Argument to xRollbackCallback() */pRollbackArg14131,644000
  void (*xRollbackCallback)(void*); /* Invoked at every commit. */xRollbackCallback14132,644074
  void *pUpdateArg;pUpdateArg14133,644141
  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);xUpdateCallback14134,644161
  void *pPreUpdateArg;          /* First argument to xPreUpdateCallback */pPreUpdateArg14136,644273
  void (*xPreUpdateCallback)(   /* Registered using sqlite3_preupdate_hook() */xPreUpdateCallback14137,644348
  PreUpdate *pPreUpdate;        /* Context for active pre-update callback */pPreUpdate14140,644508
  int (*xWalCallback)(void *, sqlite3 *, const char *, int);xWalCallback14143,644651
  void *pWalArg;pWalArg14144,644712
  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);xCollNeeded14146,644736
  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);xCollNeeded1614147,644799
  void *pCollNeededArg;pCollNeededArg14148,644864
  sqlite3_value *pErr;          /* Most recent error message */pErr14149,644888
    volatile int isInterrupted; /* True if sqlite3_interrupt has been called */isInterrupted14151,644962
    double notUsed1;            /* Spacer */notUsed114152,645042
  } u1;u114153,645087
  Lookaside lookaside;          /* Lookaside malloc configuration */lookaside14154,645095
  sqlite3_xauth xAuth;          /* Access authorization function */xAuth14156,645198
  void *pAuthArg;               /* 1st argument to the access auth function */pAuthArg14157,645266
  int (*xProgress)(void *);     /* The progress callback */xProgress14160,645390
  void *pProgressArg;           /* Argument to the progress callback */pProgressArg14161,645450
  unsigned nProgressOps;        /* Number of opcodes for progress callback */nProgressOps14162,645522
  int nVTrans;                  /* Allocated size of aVTrans */nVTrans14165,645640
  Hash aModule;                 /* populated by sqlite3_create_module() */aModule14166,645704
  VtabCtx *pVtabCtx;            /* Context for active vtab connect/create */pVtabCtx14167,645779
  VTable **aVTrans;             /* Virtual tables with open transactions */aVTrans14168,645856
  VTable *pDisconnect;    /* Disconnect these in next sqlite3_prepare() */pDisconnect14169,645932
  Hash aFunc;                   /* Hash table of connection functions */aFunc14171,646014
  Hash aCollSeq;                /* All collating sequences */aCollSeq14172,646087
  BusyHandler busyHandler;      /* Busy callback */busyHandler14173,646149
  Db aDbStatic[2];              /* Static space for the 2 default backends */aDbStatic14174,646201
  Savepoint *pSavepoint;        /* List of active savepoints */pSavepoint14175,646279
  int busyTimeout;              /* Busy handler timeout, in msec */busyTimeout14176,646343
  int nSavepoint;               /* Number of non-transaction savepoints */nSavepoint14177,646411
  int nStatement;               /* Number of nested statement-transactions  */nStatement14178,646486
  i64 nDeferredCons;            /* Net deferred constraints this transaction. */nDeferredCons14179,646565
  i64 nDeferredImmCons;         /* Net deferred immediate constraints */nDeferredImmCons14180,646646
  int *pnBytesFreed;            /* If not NULL, increment this in DbFree() */pnBytesFreed14181,646719
  sqlite3 *pBlockingConnection; /* Connection that caused SQLITE_LOCKED */pBlockingConnection14193,647257
  sqlite3 *pUnlockConnection;           /* Connection to watch for unlock */pUnlockConnection14194,647332
  void *pUnlockArg;                     /* Argument to xUnlockNotify */pUnlockArg14195,647409
  void (*xUnlockNotify)(void **, int);  /* Unlock notify callback */xUnlockNotify14196,647481
  sqlite3 *pNextBlocked;        /* Next in list of all blocked connections */pNextBlocked14197,647550
  sqlite3_userauth auth;        /* User authentication information */auth14200,647669
#define SCHEMA_ENC(SCHEMA_ENC14207,647807
#define ENC(ENC14208,647858
#define SQLITE_VdbeTrace SQLITE_VdbeTrace14218,648142
#define SQLITE_InternChanges SQLITE_InternChanges14219,648219
#define SQLITE_FullColNames SQLITE_FullColNames14220,648298
#define SQLITE_FullFSync SQLITE_FullFSync14221,648379
#define SQLITE_CkptFullFSync SQLITE_CkptFullFSync14222,648457
#define SQLITE_CacheSpill SQLITE_CacheSpill14223,648535
#define SQLITE_ShortColNames SQLITE_ShortColNames14224,648607
#define SQLITE_CountRows SQLITE_CountRows14225,648680
#define SQLITE_NullCallback SQLITE_NullCallback14228,648915
#define SQLITE_SqlTrace SQLITE_SqlTrace14230,649065
#define SQLITE_VdbeListing SQLITE_VdbeListing14231,649144
#define SQLITE_WriteSchema SQLITE_WriteSchema14232,649224
#define SQLITE_VdbeAddopTrace SQLITE_VdbeAddopTrace14233,649299
#define SQLITE_IgnoreChecks SQLITE_IgnoreChecks14234,649378
#define SQLITE_ReadUncommitted SQLITE_ReadUncommitted14235,649459
#define SQLITE_LegacyFileFmt SQLITE_LegacyFileFmt14236,649529
#define SQLITE_RecoveryMode SQLITE_RecoveryMode14237,649610
#define SQLITE_ReverseOrder SQLITE_ReverseOrder14238,649679
#define SQLITE_RecTriggers SQLITE_RecTriggers14239,649753
#define SQLITE_ForeignKeys SQLITE_ForeignKeys14240,649827
#define SQLITE_AutoIndex SQLITE_AutoIndex14241,649908
#define SQLITE_PreferBuiltin SQLITE_PreferBuiltin14242,649981
#define SQLITE_LoadExtension SQLITE_LoadExtension14243,650058
#define SQLITE_LoadExtFunc SQLITE_LoadExtFunc14244,650128
#define SQLITE_EnableTrigger SQLITE_EnableTrigger14245,650209
#define SQLITE_DeferFKs SQLITE_DeferFKs14246,650281
#define SQLITE_QueryOnly SQLITE_QueryOnly14247,650354
#define SQLITE_VdbeEQP SQLITE_VdbeEQP14248,650427
#define SQLITE_Vacuum SQLITE_Vacuum14249,650500
#define SQLITE_CellSizeCk SQLITE_CellSizeCk14250,650570
#define SQLITE_Fts3Tokenizer SQLITE_Fts3Tokenizer14251,650649
#define SQLITE_NoCkptOnClose SQLITE_NoCkptOnClose14252,650722
#define SQLITE_QueryFlattener SQLITE_QueryFlattener14260,650989
#define SQLITE_ColumnCache SQLITE_ColumnCache14261,651051
#define SQLITE_GroupByOrder SQLITE_GroupByOrder14262,651109
#define SQLITE_FactorOutConst SQLITE_FactorOutConst14263,651179
#define SQLITE_DistinctOpt SQLITE_DistinctOpt14265,651313
#define SQLITE_CoverIdxScan SQLITE_CoverIdxScan14266,651381
#define SQLITE_OrderByIdxJoin SQLITE_OrderByIdxJoin14267,651447
#define SQLITE_SubqCoroutine SQLITE_SubqCoroutine14268,651520
#define SQLITE_Transitive SQLITE_Transitive14269,651599
#define SQLITE_OmitNoopJoin SQLITE_OmitNoopJoin14270,651667
#define SQLITE_Stat34 SQLITE_Stat3414271,651740
#define SQLITE_CursorHints SQLITE_CursorHints14272,651809
#define SQLITE_AllOpts SQLITE_AllOpts14273,651880
#define OptimizationDisabled(OptimizationDisabled14278,652026
#define OptimizationEnabled(OptimizationEnabled14279,652097
#define ConstFactorOk(ConstFactorOk14285,652318
#define SQLITE_MAGIC_OPEN SQLITE_MAGIC_OPEN14292,652532
#define SQLITE_MAGIC_CLOSED SQLITE_MAGIC_CLOSED14293,652597
#define SQLITE_MAGIC_SICK SQLITE_MAGIC_SICK14294,652664
#define SQLITE_MAGIC_BUSY SQLITE_MAGIC_BUSY14295,652737
#define SQLITE_MAGIC_ERROR SQLITE_MAGIC_ERROR14296,652811
#define SQLITE_MAGIC_ZOMBIE SQLITE_MAGIC_ZOMBIE14297,652891
struct FuncDef {FuncDef14309,653447
  i8 nArg;             /* Number of arguments.  -1 means unlimited */nArg14310,653464
  u16 funcFlags;       /* Some combination of SQLITE_FUNC_* */funcFlags14311,653534
  void *pUserData;     /* User data parameter */pUserData14312,653597
  FuncDef *pNext;      /* Next function with same name */pNext14313,653646
  void (*xSFunc)(sqlite3_context*,int,sqlite3_value**); /* func or agg-step */xSFunc14314,653704
  void (*xFinalize)(sqlite3_context*);                  /* Agg finalizer */xFinalize14315,653783
  const char *zName;   /* SQL name of the function. */zName14316,653859
    FuncDef *pHash;      /* Next with a different name but the same hash */pHash14318,653924
    FuncDestructor *pDestructor;   /* Reference counted destructor function */pDestructor14319,654000
  } u;u14320,654079
struct FuncDestructor {FuncDestructor14337,654841
  int nRef;nRef14338,654865
  void (*xDestroy)(void *);xDestroy14339,654877
  void *pUserData;pUserData14340,654905
#define SQLITE_FUNC_ENCMASK SQLITE_FUNC_ENCMASK14356,655561
#define SQLITE_FUNC_LIKE SQLITE_FUNC_LIKE14357,655642
#define SQLITE_FUNC_CASE SQLITE_FUNC_CASE14358,655720
#define SQLITE_FUNC_EPHEM SQLITE_FUNC_EPHEM14359,655796
#define SQLITE_FUNC_NEEDCOLL SQLITE_FUNC_NEEDCOLL14360,655867
#define SQLITE_FUNC_LENGTH SQLITE_FUNC_LENGTH14361,655948
#define SQLITE_FUNC_TYPEOF SQLITE_FUNC_TYPEOF14362,656017
#define SQLITE_FUNC_COUNT SQLITE_FUNC_COUNT14363,656086
#define SQLITE_FUNC_COALESCE SQLITE_FUNC_COALESCE14364,656156
#define SQLITE_FUNC_UNLIKELY SQLITE_FUNC_UNLIKELY14365,656230
#define SQLITE_FUNC_CONSTANT SQLITE_FUNC_CONSTANT14366,656301
#define SQLITE_FUNC_MINMAX SQLITE_FUNC_MINMAX14367,656382
#define SQLITE_FUNC_SLOCHNG SQLITE_FUNC_SLOCHNG14368,656460
#define SQLITE_FUNC_AFFINITY SQLITE_FUNC_AFFINITY14370,656618
#define FUNCTION(FUNCTION14406,658333
#define VFUNCTION(VFUNCTION14409,658510
#define DFUNCTION(DFUNCTION14412,658667
#define FUNCTION2(FUNCTION214415,658844
#define STR_FUNCTION(STR_FUNCTION14418,659043
#define LIKEFUNC(LIKEFUNC14421,659200
#define AGGREGATE(AGGREGATE14424,659341
#define AGGREGATE2(AGGREGATE214427,659504
struct Savepoint {Savepoint14437,659933
  char *zName;                        /* Savepoint name (nul-terminated) */zName14438,659952
  i64 nDeferredCons;                  /* Number of deferred fk violations */nDeferredCons14439,660028
  i64 nDeferredImmCons;               /* Number of deferred imm fk. */nDeferredImmCons14440,660105
  Savepoint *pNext;                   /* Parent savepoint (if any) */pNext14441,660176
#define SAVEPOINT_BEGIN SAVEPOINT_BEGIN14448,660388
#define SAVEPOINT_RELEASE SAVEPOINT_RELEASE14449,660419
#define SAVEPOINT_ROLLBACK SAVEPOINT_ROLLBACK14450,660450
struct Module {Module14458,660640
  const sqlite3_module *pModule;       /* Callback pointers */pModule14459,660656
  const char *zName;                   /* Name passed to create_module() */zName14460,660719
  void *pAux;                          /* pAux passed to create_module() */pAux14461,660795
  void (*xDestroy)(void *);            /* Module destructor function */xDestroy14462,660871
  Table *pEpoTab;                      /* Eponymous table for this module */pEpoTab14463,660943
struct Column {Column14470,661124
  char *zName;     /* Name of this column, \000, then the type */zName14471,661140
  Expr *pDflt;     /* Default value of this column */pDflt14472,661206
  char *zColl;     /* Collating sequence.  If NULL, use the default */zColl14473,661260
  u8 notNull;      /* An OE_ code for handling a NOT NULL constraint */notNull14474,661331
  char affinity;   /* One of the SQLITE_AFF_... values */affinity14475,661403
  u8 szEst;        /* Estimated size of value in this column. sizeof(INT)==1 */szEst14476,661461
  u8 colFlags;     /* Boolean properties.  See COLFLAG_ defines below */colFlags14477,661541
#define COLFLAG_PRIMKEY COLFLAG_PRIMKEY14482,661660
#define COLFLAG_HIDDEN COLFLAG_HIDDEN14483,661735
#define COLFLAG_HASTYPE COLFLAG_HASTYPE14484,661811
struct CollSeq {CollSeq14495,662261
  char *zName;          /* Name of the collating sequence, UTF-8 encoded */zName14496,662278
  u8 enc;               /* Text encoding handled by xCmp() */enc14497,662354
  void *pUser;          /* First argument to xCmp() */pUser14498,662416
  int (*xCmp)(void*,int, const void*, int, const void*);xCmp14499,662471
  void (*xDel)(void*);  /* Destructor for pUser */xDel14500,662528
#define SQLITE_SO_ASC SQLITE_SO_ASC14506,662632
#define SQLITE_SO_DESC SQLITE_SO_DESC14507,662693
#define SQLITE_SO_UNDEFINED SQLITE_SO_UNDEFINED14508,662754
#define SQLITE_AFF_BLOB SQLITE_AFF_BLOB14524,663400
#define SQLITE_AFF_TEXT SQLITE_AFF_TEXT14525,663432
#define SQLITE_AFF_NUMERIC SQLITE_AFF_NUMERIC14526,663464
#define SQLITE_AFF_INTEGER SQLITE_AFF_INTEGER14527,663496
#define SQLITE_AFF_REAL SQLITE_AFF_REAL14528,663528
#define sqlite3IsNumericAffinity(sqlite3IsNumericAffinity14530,663561
#define SQLITE_AFF_MASK SQLITE_AFF_MASK14536,663717
#define SQLITE_KEEPNULL SQLITE_KEEPNULL14547,664107
#define SQLITE_JUMPIFNULL SQLITE_JUMPIFNULL14548,664171
#define SQLITE_STOREP2 SQLITE_STOREP214549,664243
#define SQLITE_NULLEQ SQLITE_NULLEQ14550,664324
#define SQLITE_NOTNULL SQLITE_NOTNULL14551,664374
struct VTable {VTable14595,666891
  sqlite3 *db;              /* Database connection associated with this table */db14596,666907
  Module *pMod;             /* Pointer to module implementation */pMod14597,666988
  sqlite3_vtab *pVtab;      /* Pointer to vtab instance */pVtab14598,667055
  int nRef;                 /* Number of pointers to this structure */nRef14599,667114
  u8 bConstraint;           /* True if constraints are supported */bConstraint14600,667185
  int iSavepoint;           /* Depth of the SAVEPOINT stack */iSavepoint14601,667253
  VTable *pNext;            /* Next in linked list (see above) */pNext14602,667316
struct Table {Table14609,667505
  char *zName;         /* Name of the table or view */zName14610,667520
  Column *aCol;        /* Information about each column */aCol14611,667575
  Index *pIndex;       /* List of SQL indexes on this table. */pIndex14612,667634
  Select *pSelect;     /* NULL for tables.  Points to definition if a view. */pSelect14613,667698
  FKey *pFKey;         /* Linked list of all foreign keys in this table */pFKey14614,667777
  char *zColAff;       /* String defining the affinity of each column */zColAff14615,667852
  ExprList *pCheck;    /* All CHECK constraints */pCheck14616,667925
  int tnum;            /* Root BTree page for this table */tnum14618,668051
  u32 nTabRef;         /* Number of pointers to this Table */nTabRef14619,668111
  u32 tabFlags;        /* Mask of TF_* values */tabFlags14620,668173
  i16 iPKey;           /* If not negative, use aCol[iPKey] as the rowid */iPKey14621,668222
  i16 nCol;            /* Number of columns in this table */nCol14622,668297
  LogEst nRowLogEst;   /* Estimated rows in table - from sqlite_stat1 table */nRowLogEst14623,668358
  LogEst szTabRow;     /* Estimated size of each table row in bytes */szTabRow14624,668437
  LogEst costMult;     /* Cost multiplier for using this table */costMult14626,668538
  u8 keyConf;          /* What to do in case of uniqueness conflict on iPKey */keyConf14628,668611
  int addColOffset;    /* Offset in CREATE TABLE stmt to add a new column */addColOffset14630,668722
  int nModuleArg;      /* Number of arguments to the module */nModuleArg14633,668839
  char **azModuleArg;  /* 0: module 1: schema 2: vtab name 3...: args */azModuleArg14634,668902
  VTable *pVTable;     /* List of VTable objects. */pVTable14635,668975
  Trigger *pTrigger;   /* List of triggers stored in pSchema */pTrigger14637,669035
  Schema *pSchema;     /* Schema that contains this table */pSchema14638,669099
  Table *pNextZombie;  /* Next on the Parse.pZombieTab list */pNextZombie14639,669160
#define TF_Readonly TF_Readonly14651,669627
#define TF_Ephemeral TF_Ephemeral14652,669693
#define TF_HasPrimaryKey TF_HasPrimaryKey14653,669755
#define TF_Autoincrement TF_Autoincrement14654,669822
#define TF_HasStat1 TF_HasStat114655,669902
#define TF_WithoutRowid TF_WithoutRowid14656,669978
#define TF_NoVisibleRowid TF_NoVisibleRowid14657,670055
#define TF_OOOHidden TF_OOOHidden14658,670129
#define TF_StatsUsed TF_StatsUsed14659,670200
#define TF_HasNotNull TF_HasNotNull14661,670346
#  define IsVirtual(IsVirtual14669,670635
#  define IsVirtual(IsVirtual14671,670687
#  define IsHiddenColumn(IsHiddenColumn14681,671032
#  define IsOrdinaryHiddenColumn(IsOrdinaryHiddenColumn14682,671106
#  define IsHiddenColumn(IsHiddenColumn14684,671221
#  define IsOrdinaryHiddenColumn(IsOrdinaryHiddenColumn14685,671295
#  define IsHiddenColumn(IsHiddenColumn14687,671339
#  define IsOrdinaryHiddenColumn(IsOrdinaryHiddenColumn14688,671377
#define HasRowid(HasRowid14693,671458
#define VisibleRowid(VisibleRowid14694,671521
struct FKey {FKey14724,672636
  Table *pFrom;     /* Table containing the REFERENCES clause (aka: Child) */pFrom14725,672650
  FKey *pNextFrom;  /* Next FKey with the same in pFrom. Next parent of pFrom */pNextFrom14726,672728
  char *zTo;        /* Name of table that the key points to (aka: Parent) */zTo14727,672809
  FKey *pNextTo;    /* Next with the same zTo. Next child of zTo. */pNextTo14728,672886
  FKey *pPrevTo;    /* Previous with the same zTo */pPrevTo14729,672955
  int nCol;         /* Number of columns in this key */nCol14730,673008
  u8 isDeferred;       /* True if constraint checking is deferred till COMMIT */isDeferred14732,673090
  u8 aAction[2];        /* ON DELETE and ON UPDATE actions, respectively */aAction14733,673171
  Trigger *apTrigger[2];/* Triggers for aAction[] actions */apTrigger14734,673247
  struct sColMap {      /* Mapping of columns in pFrom to columns in zTo */sColMap14735,673308
    int iFrom;            /* Index of column in pFrom */iFrom14736,673384
    char *zCol;           /* Name of column in zTo.  If NULL use PRIMARY KEY */zCol14737,673441
  } aCol[1];            /* One entry for each of nCol columns */aCol14738,673521
#define OE_None OE_None14766,674972
#define OE_Rollback OE_Rollback14767,675034
#define OE_Abort OE_Abort14768,675112
#define OE_Fail OE_Fail14769,675190
#define OE_Ignore OE_Ignore14770,675267
#define OE_Replace OE_Replace14771,675346
#define OE_Restrict OE_Restrict14773,675426
#define OE_SetNull OE_SetNull14774,675505
#define OE_SetDflt OE_SetDflt14775,675569
#define OE_Cascade OE_Cascade14776,675640
#define OE_Default OE_Default14778,675691
struct KeyInfo {KeyInfo14790,676095
  u32 nRef;           /* Number of references to this KeyInfo object */nRef14791,676112
  u8 enc;             /* Text encoding - one of the SQLITE_UTF* values */enc14792,676184
  u16 nField;         /* Number of key columns in the index */nField14793,676258
  u16 nXField;        /* Number of columns beyond the key columns */nXField14794,676321
  sqlite3 *db;        /* The database connection */db14795,676390
  u8 *aSortOrder;     /* Sort order for each column. */aSortOrder14796,676442
  CollSeq *aColl[1];  /* Collating sequence for each term of the key */aColl14797,676498
struct UnpackedRecord {UnpackedRecord14835,678307
  KeyInfo *pKeyInfo;  /* Collation and sort-order information */pKeyInfo14836,678331
  Mem *aMem;          /* Values */aMem14837,678396
  u16 nField;         /* Number of entries in apMem[] */nField14838,678431
  i8 default_rc;      /* Comparison result if keys are equal */default_rc14839,678488
  u8 errCode;         /* Error detected by xRecordCompare (CORRUPT or NOMEM) */errCode14840,678552
  i8 r1;              /* Value to return if (lhs > rhs) */r114841,678632
  i8 r2;              /* Value to return if (rhs < lhs) */r214842,678691
  u8 eqSeen;          /* True if an equality comparison has been seen */eqSeen14843,678750
struct Index {Index14881,680534
  char *zName;             /* Name of this index */zName14882,680549
  i16 *aiColumn;           /* Which columns are used by this index.  1st is 0 */aiColumn14883,680601
  LogEst *aiRowLogEst;     /* From ANALYZE: Est. rows selected by each column */aiRowLogEst14884,680682
  Table *pTable;           /* The SQL table being indexed */pTable14885,680763
  char *zColAff;           /* String defining the affinity of each column */zColAff14886,680824
  Index *pNext;            /* The next index associated with the same table */pNext14887,680901
  Schema *pSchema;         /* Schema containing this index */pSchema14888,680980
  u8 *aSortOrder;          /* for each column: True==DESC, False==ASC */aSortOrder14889,681042
  const char **azColl;     /* Array of collation sequence names for index */azColl14890,681115
  Expr *pPartIdxWhere;     /* WHERE clause for partial indices */pPartIdxWhere14891,681192
  ExprList *aColExpr;      /* Column expressions */aColExpr14892,681258
  int tnum;                /* DB Page containing root of this index */tnum14893,681310
  LogEst szIdxRow;         /* Estimated average row size in bytes */szIdxRow14894,681381
  u16 nKeyCol;             /* Number of columns forming the key */nKeyCol14895,681450
  u16 nColumn;             /* Number of columns stored in the index */nColumn14896,681517
  u8 onError;              /* OE_Abort, OE_Ignore, OE_Replace, or OE_None */onError14897,681588
  unsigned idxType:2;      /* 1==UNIQUE, 2==PRIMARY KEY, 0==CREATE INDEX */idxType14898,681665
  unsigned bUnordered:1;   /* Use this index for == or IN queries only */bUnordered14899,681741
  unsigned uniqNotNull:1;  /* True if UNIQUE and NOT NULL for all columns */uniqNotNull14900,681815
  unsigned isResized:1;    /* True if resizeIndexObject() has been called */isResized14901,681892
  unsigned isCovering:1;   /* True if this is a covering index */isCovering14902,681969
  unsigned noSkipScan:1;   /* Do not try to use skip-scan if true */noSkipScan14903,682035
  unsigned hasStat1:1;     /* aiRowLogEst values come from sqlite_stat1 */hasStat114904,682104
  int nSample;             /* Number of elements in aSample[] */nSample14906,682215
  int nSampleCol;          /* Size of IndexSample.anEq[] and so on */nSampleCol14907,682280
  tRowcnt *aAvgEq;         /* Average nEq values for keys not in aSample */aAvgEq14908,682350
  IndexSample *aSample;    /* Samples of the left-most key */aSample14909,682426
  tRowcnt *aiRowEst;       /* Non-logarithmic stat1 data for this index */aiRowEst14910,682488
  tRowcnt nRowEst0;        /* Non-logarithmic number of rows in the index */nRowEst014911,682563
#define SQLITE_IDXTYPE_APPDEF SQLITE_IDXTYPE_APPDEF14918,682693
#define SQLITE_IDXTYPE_UNIQUE SQLITE_IDXTYPE_UNIQUE14919,682765
#define SQLITE_IDXTYPE_PRIMARYKEY SQLITE_IDXTYPE_PRIMARYKEY14920,682841
#define IsPrimaryKeyIndex(IsPrimaryKeyIndex14923,682972
#define IsUniqueIndex(IsUniqueIndex14926,683092
#define XN_ROWID XN_ROWID14931,683278
#define XN_EXPR XN_EXPR14932,683342
struct IndexSample {IndexSample14939,683615
  void *p;          /* Pointer to sampled record */p14940,683636
  int n;            /* Size of record in bytes */n14941,683688
  tRowcnt *anEq;    /* Est. number of rows where the key equals this sample */anEq14942,683738
  tRowcnt *anLt;    /* Est. number of rows where key is less than this sample */anLt14943,683817
  tRowcnt *anDLt;   /* Est. number of distinct keys less than this sample */anDLt14944,683898
struct Token {Token14955,684285
  const char *z;     /* Text of the token.  Not NULL-terminated! */z14956,684300
  unsigned int n;    /* Number of characters in this token */n14957,684368
struct AggInfo {AggInfo14973,685030
  u8 directMode;          /* Direct rendering mode means take data directlydirectMode14974,685047
  u8 useSortingIdx;       /* In direct mode, reference the sorting index ratheruseSortingIdx14976,685204
  int sortingIdx;         /* Cursor number of the sorting index */sortingIdx14978,685338
  int sortingIdxPTab;     /* Cursor number of pseudo-table */sortingIdxPTab14979,685405
  int nSortingColumn;     /* Number of columns in the sorting index */nSortingColumn14980,685467
  int mnReg, mxReg;       /* Range of registers allocated for aCol and aFunc */mnReg14981,685538
  int mnReg, mxReg;       /* Range of registers allocated for aCol and aFunc */mxReg14981,685538
  ExprList *pGroupBy;     /* The group by clause */pGroupBy14982,685618
  struct AggInfo_col {    /* For each column used in source tables */AggInfo_col14983,685670
    Table *pTab;             /* Source table */pTab14984,685740
    int iTable;              /* Cursor number of the source table */iTable14985,685788
    int iColumn;             /* Column number within the source table */iColumn14986,685857
    int iSorterColumn;       /* Column number in the sorting index */iSorterColumn14987,685930
    int iMem;                /* Memory location that acts as accumulator */iMem14988,686000
    Expr *pExpr;             /* The original expression */pExpr14989,686076
  } *aCol;aCol14990,686135
  int nColumn;            /* Number of used entries in aCol[] */nColumn14991,686146
  int nAccumulator;       /* Number of columns that show through to the output.nAccumulator14992,686211
  struct AggInfo_func {   /* For each aggregate function */AggInfo_func14995,686422
    Expr *pExpr;             /* Expression encoding the function */pExpr14996,686482
    FuncDef *pFunc;          /* The aggregate function implementation */pFunc14997,686550
    int iMem;                /* Memory location that acts as accumulator */iMem14998,686623
    int iDistinct;           /* Ephemeral table used to enforce DISTINCT */iDistinct14999,686699
  } *aFunc;aFunc15000,686775
  int nFunc;              /* Number of entries in aFunc[] */nFunc15001,686787
typedef i16 ynVar;ynVar15015,687436
typedef int ynVar;ynVar15017,687461
struct Expr {Expr15083,690720
  u8 op;                 /* Operation performed by this node */op15084,690734
  char affinity;         /* The affinity of the column or 0 if not a column */affinity15085,690798
  u32 flags;             /* Various flags.  EP_* See below */flags15086,690877
    char *zToken;          /* Token value. Zero terminated and dequoted */zToken15088,690949
    int iValue;            /* Non-negative integer value if EP_IntValue */iValue15089,691024
  } u;u15090,691099
  Expr *pLeft;           /* Left subnode */pLeft15097,691380
  Expr *pRight;          /* Right subnode */pRight15098,691424
    ExprList *pList;     /* op = IN, EXISTS, SELECT, CASE, FUNCTION, BETWEEN */pList15100,691479
    Select *pSelect;     /* EP_xIsSelect and op = IN, EXISTS, SELECT */pSelect15101,691559
  } x;x15102,691631
  int nHeight;           /* Height of the tree headed by this node */nHeight15110,691938
  int iTable;            /* TK_COLUMN: cursor number of table holding columniTable15112,692015
  ynVar iColumn;         /* TK_COLUMN: column index.  -1 for rowid.iColumn15117,692349
  i16 iAgg;              /* Which entry in pAggInfo->aCol[] or ->aFunc[] */iAgg15120,692566
  i16 iRightJoinTable;   /* If EP_FromJoin, the right table of the join */iRightJoinTable15121,692642
  u8 op2;                /* TK_REGISTER: original value of Expr.opop215122,692717
  AggInfo *pAggInfo;     /* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION */pAggInfo15125,692915
  Table *pTab;           /* Table for TK_COLUMN expressions. */pTab15126,692988
#define EP_FromJoin EP_FromJoin15132,693129
#define EP_Agg EP_Agg15133,693209
#define EP_Resolved EP_Resolved15134,693286
#define EP_Error EP_Error15135,693356
#define EP_Distinct EP_Distinct15136,693431
#define EP_VarSelect EP_VarSelect15137,693508
#define EP_DblQuoted EP_DblQuoted15138,693580
#define EP_InfixFunc EP_InfixFunc15139,693648
#define EP_Collate EP_Collate15140,693728
#define EP_Generic EP_Generic15141,693800
#define EP_IntValue EP_IntValue15142,693876
#define EP_xIsSelect EP_xIsSelect15143,693948
#define EP_Skip EP_Skip15144,694026
#define EP_Reduced EP_Reduced15145,694087
#define EP_TokenOnly EP_TokenOnly15146,694163
#define EP_Static EP_Static15147,694241
#define EP_MemToken EP_MemToken15148,694319
#define EP_NoReduce EP_NoReduce15149,694391
#define EP_Unlikely EP_Unlikely15150,694459
#define EP_ConstFunc EP_ConstFunc15151,694531
#define EP_CanBeNull EP_CanBeNull15152,694611
#define EP_Subquery EP_Subquery15153,694687
#define EP_Alias EP_Alias15154,694758
#define EP_Leaf EP_Leaf15155,694830
#define EP_Propagate EP_Propagate15160,694956
#define ExprHasProperty(ExprHasProperty15166,695128
#define ExprHasAllProperty(ExprHasAllProperty15167,695183
#define ExprSetProperty(ExprSetProperty15168,695240
#define ExprClearProperty(ExprClearProperty15169,695289
# define ExprSetVVAProperty(ExprSetVVAProperty15176,695548
# define ExprSetVVAProperty(ExprSetVVAProperty15178,695604
#define EXPR_FULLSIZE EXPR_FULLSIZE15186,695843
#define EXPR_REDUCEDSIZE EXPR_REDUCEDSIZE15187,695914
#define EXPR_TOKENONLYSIZE EXPR_TOKENONLYSIZE15188,695991
#define EXPRDUP_REDUCE EXPRDUP_REDUCE15194,696186
struct ExprList {ExprList15212,697130
  int nExpr;             /* Number of expressions on the list */nExpr15213,697148
  struct ExprList_item { /* For each expression in the list */ExprList_item15214,697213
    Expr *pExpr;            /* The parse tree for this expression */pExpr15215,697276
    char *zName;            /* Token associated with this expression */zName15216,697345
    char *zSpan;            /* Original text of the expression */zSpan15217,697417
    u8 sortOrder;           /* 1 for DESC or 0 for ASC */sortOrder15218,697483
    unsigned done :1;       /* A flag to indicate when processing is finished */done15219,697541
    unsigned bSpanIsTab :1; /* zSpan holds DB.TABLE.COLUMN */bSpanIsTab15220,697622
    unsigned reusable :1;   /* Constant expression is reusable */reusable15221,697684
        u16 iOrderByCol;      /* For ORDER BY, column number in result set */iOrderByCol15224,697777
        u16 iAlias;           /* Index into Parse.aAlias[] for zName */iAlias15225,697855
      } x;x15226,697927
      int iConstExprReg;      /* Register in which Expr value is cached */iConstExprReg15227,697938
    } u;u15228,698013
  } *a;                  /* Alloc a power of two greater or equal to nExpr */a15229,698022
struct ExprSpan {ExprSpan15237,698265
  Expr *pExpr;          /* The expression parse tree */pExpr15238,698283
  const char *zStart;   /* First character of input text */zStart15239,698339
  const char *zEnd;     /* One character past the end of input text */zEnd15240,698399
struct IdList {IdList15258,699009
  struct IdList_item {IdList_item15259,699025
    char *zName;      /* Name of the identifier */zName15260,699048
    int idx;          /* Index in some Table.aCol[] of a column named zName */idx15261,699099
  } *a;a15262,699178
  int nId;         /* Number of identifiers on the list */nId15263,699186
  typedef SQLITE_BITMASK_TYPE Bitmask;Bitmask15274,699538
  typedef u64 Bitmask;Bitmask15276,699583
#define BMS BMS15282,699685
#define MASKBIT(MASKBIT15287,699754
#define MASKBIT32(MASKBIT3215288,699795
#define ALLBITS ALLBITS15289,699841
struct SrcList {SrcList15310,700881
  int nSrc;        /* Number of tables or subqueries in the FROM clause */nSrc15311,700898
  u32 nAlloc;      /* Number of entries allocated in a[] below */nAlloc15312,700973
  struct SrcList_item {SrcList_item15313,701039
    Schema *pSchema;  /* Schema to which this item is fixed */pSchema15314,701063
    char *zDatabase;  /* Name of database holding this table */zDatabase15315,701126
    char *zName;      /* Name of the table */zName15316,701190
    char *zAlias;     /* The "B" part of a "A AS B" phrase.  zName is the "A" */zAlias15317,701236
    Table *pTab;      /* An SQL table corresponding to zName */pTab15318,701317
    Select *pSelect;  /* A SELECT statement used in place of a table name */pSelect15319,701381
    int addrFillSub;  /* Address of subroutine to manifest a subquery */addrFillSub15320,701458
    int regReturn;    /* Register holding return address of addrFillSub */regReturn15321,701531
    int regResult;    /* Registers holding results of a co-routine */regResult15322,701606
      u8 jointype;      /* Type of join between this table and the previous */jointype15324,701689
      unsigned notIndexed :1;    /* True if there is a NOT INDEXED clause */notIndexed15325,701768
      unsigned isIndexedBy :1;   /* True if there is an INDEXED BY clause */isIndexedBy15326,701845
      unsigned isTabFunc :1;     /* True if table-valued-function syntax */isTabFunc15327,701922
      unsigned isCorrelated :1;  /* True if sub-query is correlated */isCorrelated15328,701998
      unsigned viaCoroutine :1;  /* Implemented as a co-routine */viaCoroutine15329,702069
      unsigned isRecursive :1;   /* True for recursive reference in WITH */isRecursive15330,702136
    } fg;fg15331,702212
    u8 iSelectId;     /* If pSelect!=0, the id of the sub-select in EQP */iSelectId15333,702250
    int iCursor;      /* The VDBE cursor number used to access this table */iCursor15335,702332
    Expr *pOn;        /* The ON clause of a join */pOn15336,702409
    IdList *pUsing;   /* The USING clause of a join */pUsing15337,702461
    Bitmask colUsed;  /* Bit N (1<<N) set if column N of pTab is used */colUsed15338,702516
      char *zIndexedBy;    /* Identifier from "INDEXED BY <zIndex>" clause */zIndexedBy15340,702601
      ExprList *pFuncArg;  /* Arguments to table-valued-function */pFuncArg15341,702679
    } u1;u115342,702747
    Index *pIBIndex;  /* Index structure corresponding to u1.zIndexedBy */pIBIndex15343,702757
  } a[1];             /* One entry for each identifier on the list */a15344,702832
#define JT_INNER JT_INNER15350,702964
#define JT_CROSS JT_CROSS15351,703033
#define JT_NATURAL JT_NATURAL15352,703104
#define JT_LEFT JT_LEFT15353,703167
#define JT_RIGHT JT_RIGHT15354,703220
#define JT_OUTER JT_OUTER15355,703274
#define JT_ERROR JT_ERROR15356,703342
#define WHERE_ORDERBY_NORMAL WHERE_ORDERBY_NORMAL15366,703623
#define WHERE_ORDERBY_MIN WHERE_ORDERBY_MIN15367,703673
#define WHERE_ORDERBY_MAX WHERE_ORDERBY_MAX15368,703752
#define WHERE_ONEPASS_DESIRED WHERE_ONEPASS_DESIRED15369,703831
#define WHERE_ONEPASS_MULTIROW WHERE_ONEPASS_MULTIROW15370,703909
#define WHERE_DUPLICATES_OK WHERE_DUPLICATES_OK15371,703986
#define WHERE_OR_SUBCLAUSE WHERE_OR_SUBCLAUSE15372,704064
#define WHERE_GROUPBY WHERE_GROUPBY15374,704204
#define WHERE_DISTINCTBY WHERE_DISTINCTBY15375,704278
#define WHERE_WANT_DISTINCT WHERE_WANT_DISTINCT15376,704359
#define WHERE_SORTBYGROUP WHERE_SORTBYGROUP15377,704435
#define WHERE_SEEK_TABLE WHERE_SEEK_TABLE15378,704510
#define WHERE_ORDERBY_LIMIT WHERE_ORDERBY_LIMIT15379,704587
#define WHERE_SEEK_UNIQ_TABLE WHERE_SEEK_UNIQ_TABLE15380,704663
#define WHERE_USE_LIMIT WHERE_USE_LIMIT15382,704799
#define WHERE_DISTINCT_NOOP WHERE_DISTINCT_NOOP15387,704997
#define WHERE_DISTINCT_UNIQUE WHERE_DISTINCT_UNIQUE15388,705065
#define WHERE_DISTINCT_ORDERED WHERE_DISTINCT_ORDERED15389,705121
#define WHERE_DISTINCT_UNORDERED WHERE_DISTINCT_UNORDERED15390,705191
struct NameContext {NameContext15413,706366
  Parse *pParse;       /* The parser */pParse15414,706387
  SrcList *pSrcList;   /* One or more tables used to resolve names */pSrcList15415,706427
  ExprList *pEList;    /* Optional list of result-set columns */pEList15416,706497
  AggInfo *pAggInfo;   /* Information about aggregates at this level */pAggInfo15417,706562
  NameContext *pNext;  /* Next outer name context.  NULL for outermost */pNext15418,706634
  int nRef;            /* Number of names resolved by this context */nRef15419,706708
  int nErr;            /* Number of errors encountered while resolving names */nErr15420,706778
  u16 ncFlags;         /* Zero or more NC_* flags defined below */ncFlags15421,706858
#define NC_AllowAgg NC_AllowAgg15432,707133
#define NC_PartIdx NC_PartIdx15433,707205
#define NC_IsCheck NC_IsCheck15434,707280
#define NC_InAggFunc NC_InAggFunc15435,707361
#define NC_HasAgg NC_HasAgg15436,707439
#define NC_IdxExpr NC_IdxExpr15437,707511
#define NC_VarSelect NC_VarSelect15438,707588
#define NC_MinMaxAgg NC_MinMaxAgg15439,707659
struct Select {Select15461,708810
  ExprList *pEList;      /* The fields of the result */pEList15462,708826
  u8 op;                 /* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT */op15463,708882
  LogEst nSelectRow;     /* Estimated number of result rows */nSelectRow15464,708960
  u32 selFlags;          /* Various SF_* values */selFlags15465,709023
  int iLimit, iOffset;   /* Memory registers holding LIMIT & OFFSET counters */iLimit15466,709074
  int iLimit, iOffset;   /* Memory registers holding LIMIT & OFFSET counters */iOffset15466,709074
  char zSelName[12];     /* Symbolic name of this SELECT use for debugging */zSelName15468,709178
  int addrOpenEphm[2];   /* OP_OpenEphem opcodes related to this select */addrOpenEphm15470,709263
  SrcList *pSrc;         /* The FROM clause */pSrc15471,709338
  Expr *pWhere;          /* The WHERE clause */pWhere15472,709385
  ExprList *pGroupBy;    /* The GROUP BY clause */pGroupBy15473,709433
  Expr *pHaving;         /* The HAVING clause */pHaving15474,709484
  ExprList *pOrderBy;    /* The ORDER BY clause */pOrderBy15475,709533
  Select *pPrior;        /* Prior select in a compound select statement */pPrior15476,709584
  Select *pNext;         /* Next select to the left in a compound */pNext15477,709659
  Expr *pLimit;          /* LIMIT expression. NULL means not used. */pLimit15478,709728
  Expr *pOffset;         /* OFFSET expression. NULL means not used. */pOffset15479,709798
  With *pWith;           /* WITH clause attached to this select. Or NULL. */pWith15480,709869
#define SF_Distinct SF_Distinct15492,710229
#define SF_All SF_All15493,710296
#define SF_Resolved SF_Resolved15494,710362
#define SF_Aggregate SF_Aggregate15495,710434
#define SF_HasAgg SF_HasAgg15496,710512
#define SF_UsesEphemeral SF_UsesEphemeral15497,710582
#define SF_Expanded SF_Expanded15498,710653
#define SF_HasTypeInfo SF_HasTypeInfo15499,710731
#define SF_Compound SF_Compound15500,710808
#define SF_Values SF_Values15501,710874
#define SF_MultiValue SF_MultiValue15502,710946
#define SF_NestedFrom SF_NestedFrom15503,711025
#define SF_MinMaxAgg SF_MinMaxAgg15504,711102
#define SF_Recursive SF_Recursive15505,711179
#define SF_FixedLimit SF_FixedLimit15506,711258
#define SF_MaybeConvert SF_MaybeConvert15507,711334
#define SF_Converted SF_Converted15508,711414
#define SF_IncludeHidden SF_IncludeHidden15509,711492
#define SRT_Union SRT_Union15576,714815
#define SRT_Except SRT_Except15577,714882
#define SRT_Exists SRT_Exists15578,714949
#define SRT_Discard SRT_Discard15579,715018
#define SRT_Fifo SRT_Fifo15580,715085
#define SRT_DistFifo SRT_DistFifo15581,715164
#define SRT_Queue SRT_Queue15582,715237
#define SRT_DistQueue SRT_DistQueue15583,715296
#define IgnorableOrderby(IgnorableOrderby15586,715429
#define SRT_Output SRT_Output15588,715486
#define SRT_Mem SRT_Mem15589,715546
#define SRT_Set SRT_Set15590,715610
#define SRT_EphemTab SRT_EphemTab15591,715678
#define SRT_Coroutine SRT_Coroutine15592,715758
#define SRT_Table SRT_Table15593,715824
struct SelectDest {SelectDest15599,716004
  u8 eDest;            /* How to dispose of the results.  On of SRT_* above. */eDest15600,716024
  char *zAffSdst;      /* Affinity used when eDest==SRT_Set */zAffSdst15601,716104
  int iSDParm;         /* A parameter used by the eDest disposal method */iSDParm15602,716167
  int iSdst;           /* Base register where results are written */iSdst15603,716242
  int nSdst;           /* Number of registers allocated */nSdst15604,716311
  ExprList *pOrderBy;  /* Key columns for SRT_Queue and SRT_DistQueue */pOrderBy15605,716370
struct AutoincInfo {AutoincInfo15617,716948
  AutoincInfo *pNext;   /* Next info block in a list of them all */pNext15618,716969
  Table *pTab;          /* Table this info block refers to */pTab15619,717037
  int iDb;              /* Index in sqlite3.aDb[] of database holding pTab */iDb15620,717099
  int regCtr;           /* Memory register holding the rowid counter */regCtr15621,717177
# define SQLITE_N_COLCACHE SQLITE_N_COLCACHE15628,717313
struct TriggerPrg {TriggerPrg15649,718239
  Trigger *pTrigger;      /* Trigger this program was coded from */pTrigger15650,718259
  TriggerPrg *pNext;      /* Next entry in Parse.pTriggerPrg list */pNext15651,718327
  SubProgram *pProgram;   /* Program implementing pTrigger/orconf */pProgram15652,718396
  int orconf;             /* Default ON CONFLICT policy */orconf15653,718465
  u32 aColmask[2];        /* Masks of old.*, new.* columns accessed */aColmask15654,718524
  typedef unsigned char yDbMask[(SQLITE_MAX_ATTACHED+9)/8];yDbMask15661,718699
# define DbMaskTest(DbMaskTest15662,718759
# define DbMaskZero(DbMaskZero15663,718818
# define DbMaskSet(DbMaskSet15664,718870
# define DbMaskAllZero(DbMaskAllZero15665,718923
# define DbMaskNonZero(DbMaskNonZero15666,718975
  typedef unsigned int yDbMask;yDbMask15668,719038
# define DbMaskTest(DbMaskTest15669,719070
# define DbMaskZero(DbMaskZero15670,719129
# define DbMaskSet(DbMaskSet15671,719163
# define DbMaskAllZero(DbMaskAllZero15672,719216
# define DbMaskNonZero(DbMaskNonZero15673,719251
struct Parse {Parse15692,720046
  sqlite3 *db;         /* The main database structure */db15693,720061
  char *zErrMsg;       /* An error message */zErrMsg15694,720118
  Vdbe *pVdbe;         /* An engine for executing database bytecode */pVdbe15695,720164
  int rc;              /* Return code from execution */rc15696,720235
  u8 colNamesSet;      /* TRUE after OP_ColumnName has been issued to pVdbe */colNamesSet15697,720291
  u8 checkSchema;      /* Causes schema cookie check after an error */checkSchema15698,720370
  u8 nested;           /* Number of nested calls to the parser/code generator */nested15699,720441
  u8 nTempReg;         /* Number of temporary registers in aTempReg[] */nTempReg15700,720522
  u8 isMultiWrite;     /* True if statement may modify/insert multiple rows */isMultiWrite15701,720595
  u8 mayAbort;         /* True if statement may throw an ABORT exception */mayAbort15702,720674
  u8 hasCompound;      /* Need to invoke convertCompoundSelectToSubquery() */hasCompound15703,720750
  u8 okConstFactor;    /* OK to factor out constants */okConstFactor15704,720828
  u8 disableLookaside; /* Number of times lookaside has been disabled */disableLookaside15705,720884
  u8 nColCache;        /* Number of entries in aColCache[] */nColCache15706,720957
  int nRangeReg;       /* Size of the temporary register block */nRangeReg15707,721019
  int iRangeReg;       /* First register in temporary register block */iRangeReg15708,721085
  int nErr;            /* Number of errors seen */nErr15709,721157
  int nTab;            /* Number of previously allocated VDBE cursors */nTab15710,721208
  int nMem;            /* Number of memory cells used so far */nMem15711,721281
  int nOpAlloc;        /* Number of slots allocated for Vdbe.aOp[] */nOpAlloc15712,721345
  int szOpAlloc;       /* Bytes of memory space allocated for Vdbe.aOp[] */szOpAlloc15713,721415
  int ckBase;          /* Base register of data during check constraints */ckBase15714,721491
  int iSelfTab;        /* Table of an index whose exprs are being coded */iSelfTab15715,721567
  int iCacheLevel;     /* ColCache valid when aColCache[].iLevel<=iCacheLevel */iCacheLevel15716,721642
  int iCacheCnt;       /* Counter used to generate aColCache[].lru values */iCacheCnt15717,721723
  int nLabel;          /* Number of labels used */nLabel15718,721800
  int *aLabel;         /* Space to hold the labels */aLabel15719,721851
  ExprList *pConstExpr;/* Constant expressions */pConstExpr15720,721905
  Token constraintName;/* Name of the constraint currently being parsed */constraintName15721,721955
  yDbMask writeMask;   /* Start a write transaction on these databases */writeMask15722,722030
  yDbMask cookieMask;  /* Bitmask of schema verified databases */cookieMask15723,722104
  int regRowid;        /* Register holding rowid of CREATE TABLE entry */regRowid15724,722170
  int regRoot;         /* Register holding root page number for new objects */regRoot15725,722244
  int nMaxArg;         /* Max args passed to user function by sub-program */nMaxArg15726,722323
  int nSelect;         /* Number of SELECT statements seen */nSelect15728,722424
  int nSelectIndent;   /* How far to indent SELECTTRACE() output */nSelectIndent15729,722486
  int nTableLock;        /* Number of locks in aTableLock */nTableLock15732,722594
  TableLock *aTableLock; /* Required table locks for shared-cache mode */aTableLock15733,722655
  AutoincInfo *pAinc;  /* Information about AUTOINCREMENT counters */pAinc15735,722736
  Parse *pToplevel;    /* Parse structure for main program (or NULL) */pToplevel15736,722806
  Table *pTriggerTab;  /* Table triggers are being coded for */pTriggerTab15737,722878
  int addrCrTab;       /* Address of OP_CreateTable opcode on CREATE TABLE */addrCrTab15738,722942
  u32 nQueryLoop;      /* Est number of iterations of a query (10*log2(N)) */nQueryLoop15739,723020
  u32 oldmask;         /* Mask of old.* columns referenced */oldmask15740,723098
  u32 newmask;         /* Mask of new.* columns referenced */newmask15741,723160
  u8 eTriggerOp;       /* TK_UPDATE, TK_INSERT or TK_DELETE */eTriggerOp15742,723222
  u8 eOrconf;          /* Default ON CONFLICT policy for trigger steps */eOrconf15743,723285
  u8 disableTriggers;  /* True to disable triggers */disableTriggers15744,723359
  struct yColCache {yColCache15753,723833
    int iTable;           /* Table cursor number */iTable15754,723854
    i16 iColumn;          /* Table column number */iColumn15755,723906
    u8 tempReg;           /* iReg is a temp register that needs to be freed */tempReg15756,723958
    int iLevel;           /* Nesting level */iLevel15757,724037
    int iReg;             /* Reg with value of this column. 0 means none. */iReg15758,724083
    int lru;              /* Least recently used entry has the smallest value */lru15759,724160
  } aColCache[SQLITE_N_COLCACHE];  /* One for each column cache entry */aColCache15760,724241
  int aTempReg[8];        /* Holding area for temporary registers */aTempReg15761,724314
  Token sNameToken;       /* Token with unqualified schema object name */sNameToken15762,724383
  Token sLastToken;       /* The last token parsed */sLastToken15771,724878
  ynVar nVar;               /* Number of '?' variables seen in the SQL so far */nVar15772,724932
  u8 iPkSortOrder;          /* ASC or DESC for INTEGER PRIMARY KEY */iPkSortOrder15773,725013
  u8 explain;               /* True if the EXPLAIN flag is found on the query */explain15774,725083
  u8 declareVtab;           /* True if inside sqlite3_declare_vtab() */declareVtab15776,725197
  int nVtabLock;            /* Number of virtual tables to lock */nVtabLock15777,725269
  int nHeight;              /* Expression tree height of current sub-select */nHeight15779,725343
  int iSelectId;            /* ID of current select for EXPLAIN output */iSelectId15781,725450
  int iNextSelectId;        /* Next available select ID for EXPLAIN output */iNextSelectId15782,725524
  VList *pVList;            /* Mapping between variable names and numbers */pVList15784,725609
  Vdbe *pReprepare;         /* VM being reprepared (sqlite3Reprepare()) */pReprepare15785,725686
  const char *zTail;        /* All SQL text past the last semicolon parsed */zTail15786,725761
  Table *pNewTable;         /* A table being constructed by CREATE TABLE */pNewTable15787,725839
  Trigger *pNewTrigger;     /* Trigger under construct by a CREATE TRIGGER */pNewTrigger15788,725915
  const char *zAuthContext; /* The 6th parameter to db->xAuth callbacks */zAuthContext15789,725993
  Token sArg;               /* Complete text of a module argument */sArg15791,726101
  Table **apVtabLock;       /* Pointer to virtual tables needing locking */apVtabLock15792,726170
  Table *pZombieTab;        /* List of Table objects to delete after code gen */pZombieTab15794,726253
  TriggerPrg *pTriggerPrg;  /* Linked list of coded triggers */pTriggerPrg15795,726334
  With *pWith;              /* Current WITH clause, or NULL */pWith15796,726398
  With *pWithToFree;        /* Free this WITH object at the end of the parse */pWithToFree15797,726461
#define PARSE_HDR_SZ PARSE_HDR_SZ15803,726611
#define PARSE_RECURSE_SZ PARSE_RECURSE_SZ15804,726692
#define PARSE_TAIL_SZ PARSE_TAIL_SZ15805,726768
#define PARSE_TAIL(PARSE_TAIL15806,726848
  #define IN_DECLARE_VTAB IN_DECLARE_VTAB15812,727031
  #define IN_DECLARE_VTAB IN_DECLARE_VTAB15814,727065
struct AuthContext {AuthContext15821,727279
  const char *zAuthContext;   /* Put saved Parse.zAuthContext here */zAuthContext15822,727300
  Parse *pParse;              /* The Parse structure */pParse15823,727370
#define OPFLAG_NCHANGE OPFLAG_NCHANGE15838,727857
#define OPFLAG_EPHEM OPFLAG_EPHEM15840,728018
#define OPFLAG_LASTROWID OPFLAG_LASTROWID15841,728095
#define OPFLAG_ISUPDATE OPFLAG_ISUPDATE15842,728166
#define OPFLAG_APPEND OPFLAG_APPEND15843,728241
#define OPFLAG_USESEEKRESULT OPFLAG_USESEEKRESULT15844,728315
#define OPFLAG_ISNOOP OPFLAG_ISNOOP15845,728395
#define OPFLAG_LENGTHARG OPFLAG_LENGTHARG15846,728474
#define OPFLAG_TYPEOFARG OPFLAG_TYPEOFARG15847,728550
#define OPFLAG_BULKCSR OPFLAG_BULKCSR15848,728626
#define OPFLAG_SEEKEQ OPFLAG_SEEKEQ15849,728704
#define OPFLAG_FORDELETE OPFLAG_FORDELETE15850,728782
#define OPFLAG_P2ISREG OPFLAG_P2ISREG15851,728860
#define OPFLAG_PERMUTE OPFLAG_PERMUTE15852,728940
#define OPFLAG_SAVEPOSITION OPFLAG_SAVEPOSITION15853,729015
#define OPFLAG_AUXDELETE OPFLAG_AUXDELETE15854,729092
struct Trigger {Trigger15871,729877
  char *zName;            /* The name of the trigger                        */zName15872,729894
  char *table;            /* The table or view to which the trigger applies */table15873,729973
  u8 op;                  /* One of TK_DELETE, TK_UPDATE, TK_INSERT         */op15874,730052
  u8 tr_tm;               /* One of TRIGGER_BEFORE, TRIGGER_AFTER */tr_tm15875,730131
  Expr *pWhen;            /* The WHEN clause of the expression (may be NULL) */pWhen15876,730200
  IdList *pColumns;       /* If this is an UPDATE OF <column-list> trigger,pColumns15877,730280
  Schema *pSchema;        /* Schema containing the trigger */pSchema15879,730421
  Schema *pTabSchema;     /* Schema containing the table */pTabSchema15880,730483
  TriggerStep *step_list; /* Link list of trigger program steps             */step_list15881,730543
  Trigger *pNext;         /* Next trigger associated with the table */pNext15882,730622
#define TRIGGER_BEFORE TRIGGER_BEFORE15892,730940
#define TRIGGER_AFTER TRIGGER_AFTER15893,730966
struct TriggerStep {TriggerStep15933,732738
  u8 op;               /* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT */op15934,732759
  u8 orconf;           /* OE_Rollback etc. */orconf15935,732838
  Trigger *pTrig;      /* The trigger that this step is a part of */pTrig15936,732884
  Select *pSelect;     /* SELECT statement or RHS of INSERT INTO SELECT ... */pSelect15937,732953
  char *zTarget;       /* Target table for DELETE, UPDATE, INSERT */zTarget15938,733032
  Expr *pWhere;        /* The WHERE clause for DELETE or UPDATE steps */pWhere15939,733101
  ExprList *pExprList; /* SET clause for UPDATE. */pExprList15940,733174
  IdList *pIdList;     /* Column names for INSERT */pIdList15941,733226
  TriggerStep *pNext;  /* Next in the link-list */pNext15942,733279
  TriggerStep *pLast;  /* Last element in link-list. Valid for 1st elem only */pLast15943,733330
typedef struct DbFixer DbFixer;DbFixer15951,733574
struct DbFixer {DbFixer15952,733606
  Parse *pParse;      /* The parsing context.  Error messages written here */pParse15953,733623
  Schema *pSchema;    /* Fix items to this schema */pSchema15954,733701
  int bVarOnly;       /* Check for variable references only */bVarOnly15955,733754
  const char *zDb;    /* Make sure all objects are contained in this database */zDb15956,733817
  const char *zType;  /* Type of the container - used for error messages */zType15957,733898
  const Token *pName; /* Name of the container - used for error messages */pName15958,733974
struct StrAccum {StrAccum15965,734190
  sqlite3 *db;         /* Optional database for lookaside.  Can be NULL */db15966,734208
  char *zBase;         /* A base allocation.  Not from malloc. */zBase15967,734283
  char *zText;         /* The string collected so far */zText15968,734349
  u32  nChar;          /* Length of the string so far */nChar15969,734406
  u32  nAlloc;         /* Amount of space allocated in zText */nAlloc15970,734463
  u32  mxAlloc;        /* Maximum allowed allocation.  0 for no malloc usage */mxAlloc15971,734527
  u8   accError;       /* STRACCUM_NOMEM or STRACCUM_TOOBIG */accError15972,734607
  u8   printfFlags;    /* SQLITE_PRINTF flags below */printfFlags15973,734670
#define STRACCUM_NOMEM STRACCUM_NOMEM15975,734728
#define STRACCUM_TOOBIG STRACCUM_TOOBIG15976,734755
#define SQLITE_PRINTF_INTERNAL SQLITE_PRINTF_INTERNAL15977,734782
#define SQLITE_PRINTF_SQLFUNC SQLITE_PRINTF_SQLFUNC15978,734862
#define SQLITE_PRINTF_MALLOCED SQLITE_PRINTF_MALLOCED15979,734940
#define isMalloced(isMalloced15981,735017
  sqlite3 *db;        /* The database being initialized */db15989,735249
  char **pzErrMsg;    /* Error message stored here */pzErrMsg15990,735308
  int iDb;            /* 0 for main database.  1 for TEMP, 2.. for ATTACHed */iDb15991,735362
  int rc;             /* Result code stored here */rc15992,735441
} InitData;InitData15993,735493
struct Sqlite3Config {Sqlite3Config16000,735645
  int bMemstat;                     /* True to enable memory status */bMemstat16001,735668
  int bCoreMutex;                   /* True to enable core mutexing */bCoreMutex16002,735739
  int bFullMutex;                   /* True to enable full mutexing */bFullMutex16003,735810
  int bOpenUri;                     /* True to interpret filenames as URIs */bOpenUri16004,735881
  int bUseCis;                      /* Use covering indices for full-scans */bUseCis16005,735959
  int mxStrlen;                     /* Maximum string length */mxStrlen16006,736037
  int neverCorrupt;                 /* Database is always well-formed */neverCorrupt16007,736101
  int szLookaside;                  /* Default lookaside buffer size */szLookaside16008,736174
  int nLookaside;                   /* Default lookaside buffer count */nLookaside16009,736246
  int nStmtSpill;                   /* Stmt-journal spill-to-disk threshold */nStmtSpill16010,736319
  sqlite3_mem_methods m;            /* Low-level memory allocation interface */m16011,736398
  sqlite3_mutex_methods mutex;      /* Low-level mutex interface */mutex16012,736478
  sqlite3_pcache_methods2 pcache2;  /* Low-level page-cache interface */pcache216013,736546
  void *pHeap;                      /* Heap storage space */pHeap16014,736619
  int nHeap;                        /* Size of pHeap[] */nHeap16015,736680
  int mnReq, mxReq;                 /* Min and max heap requests sizes */mnReq16016,736738
  int mnReq, mxReq;                 /* Min and max heap requests sizes */mxReq16016,736738
  sqlite3_int64 szMmap;             /* mmap() space per open file */szMmap16017,736812
  sqlite3_int64 mxMmap;             /* Maximum value for szMmap */mxMmap16018,736881
  void *pScratch;                   /* Scratch memory */pScratch16019,736948
  int szScratch;                    /* Size of each scratch buffer */szScratch16020,737005
  int nScratch;                     /* Number of scratch buffers */nScratch16021,737075
  void *pPage;                      /* Page cache memory */pPage16022,737143
  int szPage;                       /* Size of each page in pPage[] */szPage16023,737203
  int nPage;                        /* Number of pages in pPage[] */nPage16024,737274
  int mxParserStack;                /* maximum depth of the parser stack */mxParserStack16025,737343
  int sharedCacheEnabled;           /* true if shared-cache mode enabled */sharedCacheEnabled16026,737419
  u32 szPma;                        /* Maximum Sorter PMA size */szPma16027,737495
  int isInit;                       /* True after initialization has finished */isInit16030,737676
  int inProgress;                   /* True while initialization in progress */inProgress16031,737757
  int isMutexInit;                  /* True after mutexes are initialized */isMutexInit16032,737837
  int isMallocInit;                 /* True after malloc is initialized */isMallocInit16033,737914
  int isPCacheInit;                 /* True after malloc is initialized */isPCacheInit16034,737989
  int nRefInitMutex;                /* Number of users of pInitMutex */nRefInitMutex16035,738064
  sqlite3_mutex *pInitMutex;        /* Mutex used by sqlite3_initialize() */pInitMutex16036,738136
  void (*xLog)(void*,int,const char*); /* Function for logging */xLog16037,738213
  void *pLogArg;                       /* First argument to xLog() */pLogArg16038,738279
  void(*xSqllog)(void*,sqlite3*,const char*, int);xSqllog16040,738377
  void *pSqllogArg;pSqllogArg16041,738428
  void (*xVdbeBranch)(void*,int iSrcLine,u8 eThis,u8 eMx);  /* Callback */xVdbeBranch16047,738633
  void *pVdbeBranchArg;                                     /* 1st argument */pVdbeBranchArg16048,738708
  int (*xTestCallback)(int);        /* Invoked by sqlite3FaultSim() */xTestCallback16051,738820
  int bLocaltimeFault;              /* True to fail localtime() calls */bLocaltimeFault16053,738898
  int iOnceResetThreshold;          /* When to reset OP_Once counters */iOnceResetThreshold16054,738971
#define CORRUPT_DB CORRUPT_DB16073,739619
struct Walker {Walker16078,739732
  Parse *pParse;                            /* Parser context.  */pParse16079,739748
  int (*xExprCallback)(Walker*, Expr*);     /* Callback for expressions */xExprCallback16080,739815
  int (*xSelectCallback)(Walker*,Select*);  /* Callback for SELECTs */xSelectCallback16081,739890
  void (*xSelectCallback2)(Walker*,Select*);/* Second callback for SELECTs */xSelectCallback216082,739961
  int walkerDepth;                          /* Number of subqueries */walkerDepth16083,740039
  u8 eCode;                                 /* A small processing code */eCode16084,740110
    NameContext *pNC;                          /* Naming context */pNC16086,740258
    int n;                                     /* A counter */n16087,740326
    int iCur;                                  /* A cursor number */iCur16088,740389
    SrcList *pSrcList;                         /* FROM clause */pSrcList16089,740458
    struct SrcCount *pSrcCount;                /* Counting column references */pSrcCount16090,740523
    struct CCurHint *pCCurHint;                /* Used by codeCursorHint() */pCCurHint16091,740603
    int *aiCol;                                /* array of column indexes */aiCol16092,740681
    struct IdxCover *pIdxCover;                /* Check for index coverage */pIdxCover16093,740758
  } u;u16094,740836
#define WRC_Continue WRC_Continue16109,741303
#define WRC_Prune WRC_Prune16110,741365
#define WRC_Abort WRC_Abort16111,741443
struct With {With16117,741639
  int nCte;                       /* Number of CTEs in the WITH clause */nCte16118,741653
  With *pOuter;                   /* Containing WITH clause, or NULL */pOuter16119,741727
  struct Cte {                    /* For each CTE in the WITH clause.... */Cte16120,741799
    char *zName;                    /* Name of this CTE */zName16121,741875
    ExprList *pCols;                /* List of explicit column names, or NULL */pCols16122,741934
    Select *pSelect;                /* The definition of this CTE */pSelect16123,742015
    const char *zCteErr;            /* Error message for circular references */zCteErr16124,742084
  } a[1];a16125,742164
struct TreeView {TreeView16133,742345
  int iLevel;             /* Which level of the tree we are on */iLevel16134,742363
  u8  bLine[100];         /* Draw vertical in column i if bLine[i] is true */bLine16135,742429
#define SQLITE_SKIP_UTF8(SQLITE_SKIP_UTF816143,742677
#define SQLITE_CORRUPT_BKPT SQLITE_CORRUPT_BKPT16159,743359
#define SQLITE_MISUSE_BKPT SQLITE_MISUSE_BKPT16160,743417
#define SQLITE_CANTOPEN_BKPT SQLITE_CANTOPEN_BKPT16161,743473
# define SQLITE_NOMEM_BKPT SQLITE_NOMEM_BKPT16165,743648
# define SQLITE_IOERR_NOMEM_BKPT SQLITE_IOERR_NOMEM_BKPT16166,743703
# define SQLITE_NOMEM_BKPT SQLITE_NOMEM_BKPT16168,743775
# define SQLITE_IOERR_NOMEM_BKPT SQLITE_IOERR_NOMEM_BKPT16169,743815
# undef SQLITE_ENABLE_FTS3SQLITE_ENABLE_FTS316176,743971
# undef SQLITE_ENABLE_FTS4SQLITE_ENABLE_FTS416177,743998
# define SQLITE_ENABLE_FTS3 SQLITE_ENABLE_FTS316186,744312
# define sqlite3Toupper(sqlite3Toupper16204,744850
# define sqlite3Isspace(sqlite3Isspace16205,744928
# define sqlite3Isalnum(sqlite3Isalnum16206,745000
# define sqlite3Isalpha(sqlite3Isalpha16207,745072
# define sqlite3Isdigit(sqlite3Isdigit16208,745144
# define sqlite3Isxdigit(sqlite3Isxdigit16209,745216
# define sqlite3Tolower(sqlite3Tolower16210,745288
# define sqlite3Isquote(sqlite3Isquote16211,745359
# define sqlite3Toupper(sqlite3Toupper16213,745437
# define sqlite3Isspace(sqlite3Isspace16214,745494
# define sqlite3Isalnum(sqlite3Isalnum16215,745551
# define sqlite3Isalpha(sqlite3Isalpha16216,745608
# define sqlite3Isdigit(sqlite3Isdigit16217,745665
# define sqlite3Isxdigit(sqlite3Isxdigit16218,745722
# define sqlite3Tolower(sqlite3Tolower16219,745780
# define sqlite3Isquote(sqlite3Isquote16220,745837
#define sqlite3StrNICmp sqlite3StrNICmp16232,746205
# define sqlite3StackAllocRaw(sqlite3StackAllocRaw16268,747794
# define sqlite3StackAllocZero(sqlite3StackAllocZero16269,747841
# define sqlite3StackFree(sqlite3StackFree16270,747902
# define sqlite3StackAllocRaw(sqlite3StackAllocRaw16272,747939
# define sqlite3StackAllocZero(sqlite3StackAllocZero16273,748000
# define sqlite3StackFree(sqlite3StackFree16274,748062
#undef SQLITE_ENABLE_MEMSYS3SQLITE_ENABLE_MEMSYS316282,748326
# define sqlite3MemoryBarrier(sqlite3MemoryBarrier16299,748910
# define sqlite3IsNaN(sqlite3IsNaN16314,749402
struct PrintfArguments {PrintfArguments16321,749587
  int nArg;                /* Total number of arguments */nArg16322,749612
  int nUsed;               /* Number of arguments used so far */nUsed16323,749671
  sqlite3_value **apArg;   /* The argument values */apArg16324,749736
# define sqlite3ColumnPropertiesFromName(sqlite3ColumnPropertiesFromName16399,753742
# define sqlite3FaultSim(sqlite3FaultSim16413,754465
# define sqlite3ViewGetColumnNames(sqlite3ViewGetColumnNames16440,755547
# define sqlite3AutoincrementBegin(sqlite3AutoincrementBegin16453,756041
# define sqlite3AutoincrementEnd(sqlite3AutoincrementEnd16454,756079
#define ONEPASS_OFF ONEPASS_OFF16497,758852
#define ONEPASS_SINGLE ONEPASS_SINGLE16498,758919
#define ONEPASS_MULTI ONEPASS_MULTI16499,758997
#define SQLITE_ECEL_DUP SQLITE_ECEL_DUP16519,760324
#define SQLITE_ECEL_FACTOR SQLITE_ECEL_FACTOR16520,760390
#define SQLITE_ECEL_REF SQLITE_ECEL_REF16521,760457
#define SQLITE_ECEL_OMITREF SQLITE_ECEL_OMITREF16522,760527
#define LOCATE_VIEW LOCATE_VIEW16527,760873
#define LOCATE_NOERR LOCATE_NOERR16528,760901
# define sqlite3SetMakeRecordP5(sqlite3SetMakeRecordP516580,763877
# define sqlite3SelectSetName(sqlite3SelectSetName16598,764877
# define sqlite3ParseToplevel(sqlite3ParseToplevel16634,767065
# define sqlite3IsToplevel(sqlite3IsToplevel16635,767138
# define sqlite3TriggersExist(sqlite3TriggersExist16637,767194
# define sqlite3DeleteTrigger(sqlite3DeleteTrigger16638,767237
# define sqlite3DropTriggerPtr(sqlite3DropTriggerPtr16639,767272
# define sqlite3UnlinkAndDeleteTrigger(sqlite3UnlinkAndDeleteTrigger16640,767308
# define sqlite3CodeRowTrigger(sqlite3CodeRowTrigger16641,767354
# define sqlite3CodeRowTriggerDirect(sqlite3CodeRowTriggerDirect16642,767404
# define sqlite3TriggerList(sqlite3TriggerList16643,767454
# define sqlite3ParseToplevel(sqlite3ParseToplevel16644,767490
# define sqlite3IsToplevel(sqlite3IsToplevel16645,767525
# define sqlite3TriggerColmask(sqlite3TriggerColmask16646,767557
# define sqlite3AuthRead(sqlite3AuthRead16659,768248
# define sqlite3AuthCheck(sqlite3AuthCheck16660,768282
# define sqlite3AuthContextPush(sqlite3AuthContextPush16661,768332
# define sqlite3AuthContextPop(sqlite3AuthContextPop16662,768371
#define getVarint32(getVarint3216707,770442
#define putVarint32(putVarint3216709,770548
#define getVarint getVarint16712,770663
#define putVarint putVarint16713,770701
# define sqlite3FileSuffix3(sqlite3FileSuffix316753,772715
SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];sqlite3OpcodeProperty16768,773478
SQLITE_PRIVATE const char sqlite3StrBINARY[];sqlite3StrBINARY16769,773538
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];sqlite3UpperToLower16770,773584
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];sqlite3CtypeMap16771,773642
SQLITE_PRIVATE const Token sqlite3IntTokens[];sqlite3IntTokens16772,773696
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;sqlite3Config16773,773743
SQLITE_PRIVATE FuncDefHash sqlite3BuiltinFunctions;sqlite3BuiltinFunctions16774,773805
SQLITE_PRIVATE int sqlite3PendingByte;sqlite3PendingByte16776,773881
# define sqlite3ExprCheckIN(sqlite3ExprCheckIN16844,777640
# define sqlite3CloseExtensions(sqlite3CloseExtensions16873,778704
  #define sqlite3TableLock(sqlite3TableLock16879,778863
#  define sqlite3VtabClear(sqlite3VtabClear16887,779021
#  define sqlite3VtabSync(sqlite3VtabSync16888,779051
#  define sqlite3VtabRollback(sqlite3VtabRollback16889,779092
#  define sqlite3VtabCommit(sqlite3VtabCommit16890,779125
#  define sqlite3VtabInSync(sqlite3VtabInSync16891,779156
#  define sqlite3VtabLock(sqlite3VtabLock16892,779190
#  define sqlite3VtabUnlock(sqlite3VtabUnlock16893,779219
#  define sqlite3VtabUnlockList(sqlite3VtabUnlockList16894,779250
#  define sqlite3VtabSavepoint(sqlite3VtabSavepoint16895,779285
#  define sqlite3GetVTable(sqlite3GetVTable16896,779335
#  define sqlite3VtabInSync(sqlite3VtabInSync16916,780192
#define sqlite3WithPush(sqlite3WithPush16949,782134
#define sqlite3WithDelete(sqlite3WithDelete16950,782165
  #define sqlite3FkActions(sqlite3FkActions16968,783111
  #define sqlite3FkCheck(sqlite3FkCheck16969,783151
  #define sqlite3FkDropTable(sqlite3FkDropTable16970,783189
  #define sqlite3FkOldmask(sqlite3FkOldmask16971,783225
  #define sqlite3FkRequired(sqlite3FkRequired16972,783267
  #define sqlite3FkReferences(sqlite3FkReferences16973,783309
  #define sqlite3FkDelete(sqlite3FkDelete16979,783532
  #define sqlite3FkLocateIndex(sqlite3FkLocateIndex16980,783563
#define SQLITE_FAULTINJECTOR_MALLOC SQLITE_FAULTINJECTOR_MALLOC16987,783688
#define SQLITE_FAULTINJECTOR_COUNT SQLITE_FAULTINJECTOR_COUNT16988,783730
  #define sqlite3BeginBenignMalloc(sqlite3BeginBenignMalloc16999,784068
  #define sqlite3EndBenignMalloc(sqlite3EndBenignMalloc17000,784105
#define IN_INDEX_ROWID IN_INDEX_ROWID17006,784205
#define IN_INDEX_EPH IN_INDEX_EPH17007,784275
#define IN_INDEX_INDEX_ASC IN_INDEX_INDEX_ASC17008,784342
#define IN_INDEX_INDEX_DESC IN_INDEX_INDEX_DESC17009,784407
#define IN_INDEX_NOOP IN_INDEX_NOOP17010,784473
#define IN_INDEX_NOOP_OK IN_INDEX_NOOP_OK17014,784619
#define IN_INDEX_MEMBERSHIP IN_INDEX_MEMBERSHIP17015,784689
#define IN_INDEX_LOOP IN_INDEX_LOOP17016,784769
  #define sqlite3SelectExprHeight(sqlite3SelectExprHeight17033,785506
  #define sqlite3ExprCheckHeight(sqlite3ExprCheckHeight17034,785545
  #define sqlite3ConnectionBlocked(sqlite3ConnectionBlocked17045,785919
  #define sqlite3ConnectionUnlocked(sqlite3ConnectionUnlocked17046,785959
  #define sqlite3ConnectionClosed(sqlite3ConnectionClosed17047,785998
# define IOTRACE(IOTRACE17060,786322
SQLITE_API SQLITE_EXTERN void (SQLITE_CDECL *sqlite3IoTrace)(const char*,...);sqlite3IoTrace17062,786437
# define IOTRACE(IOTRACE17064,786522
# define sqlite3VdbeIOTraceSql(sqlite3VdbeIOTraceSql17065,786542
# define sqlite3MemdebugSetType(sqlite3MemdebugSetType17101,788187
# define sqlite3MemdebugHasType(sqlite3MemdebugHasType17102,788237
# define sqlite3MemdebugNoType(sqlite3MemdebugNoType17103,788277
#define MEMTYPE_HEAP MEMTYPE_HEAP17105,788324
#define MEMTYPE_LOOKASIDE MEMTYPE_LOOKASIDE17106,788388
#define MEMTYPE_SCRATCH MEMTYPE_SCRATCH17107,788463
#define MEMTYPE_PCACHE MEMTYPE_PCACHE17108,788522
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {sqlite3UpperToLower17155,790171
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {sqlite3CtypeMap17222,793858
# define  SQLITE_USE_URI SQLITE_USE_URI17273,796871
# define SQLITE_ALLOW_COVERING_INDEX_SCAN SQLITE_ALLOW_COVERING_INDEX_SCAN17281,797132
# define SQLITE_SORTER_PMASZ SQLITE_SORTER_PMASZ17288,797310
# define SQLITE_STMTJRNL_SPILL SQLITE_STMTJRNL_SPILL17300,797835
# define SQLITE_DEFAULT_LOOKASIDE SQLITE_DEFAULT_LOOKASIDE17312,798318
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {sqlite3Config17320,798464
SQLITE_PRIVATE FuncDefHash sqlite3BuiltinFunctions;sqlite3BuiltinFunctions17377,800800
SQLITE_PRIVATE const Token sqlite3IntTokens[] = {sqlite3IntTokens17382,800898
SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;sqlite3PendingByte17407,801884
SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;sqlite3OpcodeProperty17417,802188
SQLITE_PRIVATE const char sqlite3StrBINARY[] = "BINARY";sqlite3StrBINARY17422,802317
#define CTIMEOPT_VAL_(CTIMEOPT_VAL_17458,803552
#define CTIMEOPT_VAL(CTIMEOPT_VAL17459,803584
static const char * const azCompileOpt[] = {azCompileOpt17454,803380
SQLITE_API int sqlite3_compileoption_used(const char *zOptName){sqlite3_compileoption_used17853,811676
SQLITE_API const char *sqlite3_compileoption_get(int N){sqlite3_compileoption_get17881,812403
#define SQLITE_VDBEINT_HSQLITE_VDBEINT_H17928,814122
# define SQLITE_MAX_SCHEMA_RETRY SQLITE_MAX_SCHEMA_RETRY17935,814310
# define VDBE_DISPLAY_P4 VDBE_DISPLAY_P417944,814581
# define VDBE_DISPLAY_P4 VDBE_DISPLAY_P417946,814614
typedef struct VdbeOp Op;Op17954,814812
typedef unsigned Bool;Bool17959,814863
typedef struct VdbeSorter VdbeSorter;VdbeSorter17962,814932
typedef struct AuxData AuxData;AuxData17965,815022
#define CURTYPE_BTREE CURTYPE_BTREE17968,815083
#define CURTYPE_SORTER CURTYPE_SORTER17969,815113
#define CURTYPE_VTAB CURTYPE_VTAB17970,815143
#define CURTYPE_PSEUDO CURTYPE_PSEUDO17971,815173
typedef struct VdbeCursor VdbeCursor;VdbeCursor17983,815528
struct VdbeCursor {VdbeCursor17984,815566
  u8 eCurType;            /* One of the CURTYPE_* values above */eCurType17985,815586
  i8 iDb;                 /* Index of cursor database in db->aDb[] (or -1) */iDb17986,815652
  u8 nullRow;             /* True if pointing to a row with no data */nullRow17987,815730
  u8 deferredMoveto;      /* A call to sqlite3BtreeMoveto() is needed */deferredMoveto17988,815801
  u8 isTable;             /* True for rowid tables.  False for indexes */isTable17989,815874
  u8 seekOp;              /* Most recent seek operation on this cursor */seekOp17991,815968
  u8 wrFlag;              /* The wrFlag argument to sqlite3BtreeCursor() */wrFlag17992,816042
  Bool isEphemeral:1;     /* True for an ephemeral table */isEphemeral17994,816125
  Bool useRandomRowid:1;  /* Generate new record numbers semi-randomly */useRandomRowid17995,816185
  Bool isOrdered:1;       /* True if the table is not BTREE_UNORDERED */isOrdered17996,816259
  Btree *pBtx;            /* Separate file holding temporary table */pBtx17997,816332
  i64 seqCount;           /* Sequence counter */seqCount17998,816402
  int *aAltMap;           /* Mapping from table to index column numbers */aAltMap17999,816451
  u32 cacheStatus;        /* Cache is valid if this matches Vdbe.cacheCtr */cacheStatus18005,816781
  int seekResult;         /* Result of previous sqlite3BtreeMoveto() or 0seekResult18006,816858
  VdbeCursor *pAltCursor; /* Associated index cursor from which to read */pAltCursor18014,817350
    BtCursor *pCursor;          /* CURTYPE_BTREE.  Btree cursor */pCursor18016,817435
    sqlite3_vtab_cursor *pVCur; /* CURTYPE_VTAB.   Vtab cursor */pVCur18017,817502
    int pseudoTableReg;         /* CURTYPE_PSEUDO. Reg holding content. */pseudoTableReg18018,817568
    VdbeSorter *pSorter;        /* CURTYPE_SORTER. Sorter object */pSorter18019,817643
  } uc;uc18020,817711
  KeyInfo *pKeyInfo;      /* Info about index keys needed by index cursors */pKeyInfo18021,817719
  u32 iHdrOffset;         /* Offset to next unparsed byte of the header */iHdrOffset18022,817797
  Pgno pgnoRoot;          /* Root page of the open btree cursor */pgnoRoot18023,817872
  i16 nField;             /* Number of fields in the header */nField18024,817939
  u16 nHdrParsed;         /* Number of header fields parsed so far */nHdrParsed18025,818002
  i64 movetoTarget;       /* Argument to the deferred sqlite3BtreeMoveto() */movetoTarget18026,818072
  u32 *aOffset;           /* Pointer to aType[nField] */aOffset18027,818150
  const u8 *aRow;         /* Data for the current row, if all on one page */aRow18028,818207
  u32 payloadSize;        /* Total number of bytes in the record */payloadSize18029,818284
  u32 szRow;              /* Byte available in aRow */szRow18030,818352
  u64 maskUsed;           /* Mask of columns used by this cursor */maskUsed18032,818445
  u32 aType[1];           /* Type values record decode.  MUST BE LAST */aType18038,818726
#define CACHE_STALE CACHE_STALE18045,818888
typedef struct VdbeFrame VdbeFrame;VdbeFrame18068,820075
struct VdbeFrame {VdbeFrame18069,820111
  Vdbe *v;                /* VM this frame belongs to */v18070,820130
  VdbeFrame *pParent;     /* Parent of this frame, or NULL if parent is main */pParent18071,820187
  Op *aOp;                /* Program instructions for parent frame */aOp18072,820267
  i64 *anExec;            /* Event counters from parent frame */anExec18073,820337
  Mem *aMem;              /* Array of memory cells for parent frame */aMem18074,820402
  VdbeCursor **apCsr;     /* Array of Vdbe cursors for parent frame */apCsr18075,820473
  u8 *aOnce;              /* Bitmask used by OP_Once */aOnce18076,820544
  void *token;            /* Copy of SubProgram.token */token18077,820600
  i64 lastRowid;          /* Last insert rowid (sqlite3.lastRowid) */lastRowid18078,820657
  AuxData *pAuxData;      /* Linked list of auxdata allocations */pAuxData18079,820727
  int nCursor;            /* Number of entries in apCsr */nCursor18080,820794
  int pc;                 /* Program Counter in parent (calling) frame */pc18081,820853
  int nOp;                /* Size of aOp array */nOp18082,820927
  int nMem;               /* Number of entries in aMem */nMem18083,820977
  int nChildMem;          /* Number of memory cells for child frame */nChildMem18084,821035
  int nChildCsr;          /* Number of cursors for child frame */nChildCsr18085,821106
  int nChange;            /* Statement changes (Vdbe.nChange)     */nChange18086,821172
  int nDbChange;          /* Value of db->nChange */nDbChange18087,821241
#define VdbeFrameMem(VdbeFrameMem18090,821298
struct Mem {Mem18097,821552
  union MemValue {MemValue18098,821565
    double r;           /* Real value used when MEM_Real is set in flags */r18099,821584
    i64 i;              /* Integer value used when MEM_Int is set in flags */i18100,821660
    int nZero;          /* Used when bit MEM_Zero is set in flags */nZero18101,821738
    FuncDef *pDef;      /* Used only when flags==MEM_Agg */pDef18102,821807
    RowSet *pRowSet;    /* Used only when flags==MEM_RowSet */pRowSet18103,821867
    VdbeFrame *pFrame;  /* Used when flags==MEM_Frame */pFrame18104,821930
  } u;u18105,821987
  u16 flags;          /* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. */flags18106,821994
  u8  enc;            /* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE */enc18107,822075
  u8  eSubtype;       /* Subtype for this value */eSubtype18108,822147
  int n;              /* Number of characters in string value, excluding '\0' */n18109,822198
  char *z;            /* String or BLOB value */z18110,822279
  char *zMalloc;      /* Space to hold MEM_Str or MEM_Blob if szMalloc>0 */zMalloc18112,822389
  int szMalloc;       /* Size of the zMalloc allocation */szMalloc18113,822465
  u32 uTemp;          /* Transient storage for serial_type in OP_MakeRecord */uTemp18114,822524
  sqlite3 *db;        /* The associated database connection */db18115,822603
  void (*xDel)(void*);/* Destructor for Mem.z - only valid if MEM_Dyn */xDel18116,822666
  Mem *pScopyFrom;    /* This Mem is a shallow copy of pScopyFrom */pScopyFrom18118,822759
  void *pFiller;      /* So that sizeof(Mem) is a multiple of 8 */pFiller18119,822828
#define MEMCELLSIZE MEMCELLSIZE18127,823000
#define MEM_Null MEM_Null18141,823618
#define MEM_Str MEM_Str18142,823669
#define MEM_Int MEM_Int18143,823724
#define MEM_Real MEM_Real18144,823781
#define MEM_Blob MEM_Blob18145,823841
#define MEM_AffMask MEM_AffMask18146,823894
#define MEM_RowSet MEM_RowSet18147,823953
#define MEM_Frame MEM_Frame18148,824015
#define MEM_Undefined MEM_Undefined18149,824080
#define MEM_Cleared MEM_Cleared18150,824136
#define MEM_TypeMask MEM_TypeMask18151,824208
#define MEM_Term MEM_Term18159,824516
#define MEM_Dyn MEM_Dyn18160,824582
#define MEM_Static MEM_Static18161,824652
#define MEM_Ephem MEM_Ephem18162,824721
#define MEM_Agg MEM_Agg18163,824794
#define MEM_Zero MEM_Zero18164,824871
#define MEM_Subtype MEM_Subtype18165,824952
  #undef MEM_ZeroMEM_Zero18167,825039
  #define MEM_Zero MEM_Zero18168,825057
#define VdbeMemDynamic(VdbeMemDynamic18174,825217
#define MemSetTypeFlag(MemSetTypeFlag18180,825380
#define memIsValid(memIsValid18188,825613
struct AuxData {AuxData18198,826007
  int iOp;                        /* Instruction number of OP_Function opcode */iOp18199,826024
  int iArg;                       /* Index of function argument. */iArg18200,826105
  void *pAux;                     /* Aux data pointer */pAux18201,826173
  void (*xDelete)(void *);        /* Destructor for the aux data */xDelete18202,826230
  AuxData *pNext;                 /* Next element in list */pNext18203,826298
struct sqlite3_context {sqlite3_context18219,826913
  Mem *pOut;              /* The return value is stored here */pOut18220,826938
  FuncDef *pFunc;         /* Pointer to function information */pFunc18221,827002
  Mem *pMem;              /* Memory cell used to store aggregate context */pMem18222,827066
  Vdbe *pVdbe;            /* The VM that owns this context */pVdbe18223,827142
  int iOp;                /* Instruction number of OP_Function */iOp18224,827204
  int isError;            /* Error code returned by the function. */isError18225,827270
  u8 skipFlag;            /* Skip accumulator loading if true */skipFlag18226,827339
  u8 fErrorOrAux;         /* isError!=0 or pVdbe->pAuxData modified */fErrorOrAux18227,827404
  u8 argc;                /* Number of arguments */argc18228,827475
  sqlite3_value *argv[1]; /* Argument set */argv18229,827527
typedef unsigned bft;  /* Bit Field Type */bft18235,827685
typedef struct ScanStatus ScanStatus;ScanStatus18237,827730
struct ScanStatus {ScanStatus18238,827768
  int addrExplain;                /* OP_Explain for loop */addrExplain18239,827788
  int addrLoop;                   /* Address of "loops" counter */addrLoop18240,827848
  int addrVisit;                  /* Address of "rows visited" counter */addrVisit18241,827915
  int iSelectID;                  /* The "Select-ID" for this loop */iSelectID18242,827989
  LogEst nEst;                    /* Estimated output rows per loop */nEst18243,828059
  char *zName;                    /* Name of table or index */zName18244,828130
struct Vdbe {Vdbe18254,828451
  sqlite3 *db;            /* The database connection that owns this statement */db18255,828465
  Vdbe *pPrev,*pNext;     /* Linked list of VDBEs with the same Vdbe.db */pPrev18256,828546
  Vdbe *pPrev,*pNext;     /* Linked list of VDBEs with the same Vdbe.db */pNext18256,828546
  Parse *pParse;          /* Parsing context used to create this Vdbe */pParse18257,828621
  ynVar nVar;             /* Number of entries in aVar[] */nVar18258,828694
  u32 magic;              /* Magic number for sanity checking */magic18259,828754
  int nMem;               /* Number of memory locations currently allocated */nMem18260,828819
  int nCursor;            /* Number of slots in apCsr[] */nCursor18261,828898
  u32 cacheCtr;           /* VdbeCursor row cache generation counter */cacheCtr18262,828957
  int pc;                 /* The program counter */pc18263,829029
  int rc;                 /* Value to return */rc18264,829081
  int nChange;            /* Number of db changes made since last reset */nChange18265,829129
  int iStatement;         /* Statement number (or 0 if has not opened stmt) */iStatement18266,829204
  i64 iCurrentTime;       /* Value of julianday('now') for this statement */iCurrentTime18267,829283
  i64 nFkConstraint;      /* Number of imm. FK constraints this VM */nFkConstraint18268,829360
  i64 nStmtDefCons;       /* Number of def. constraints when stmt started */nStmtDefCons18269,829430
  i64 nStmtDefImmCons;    /* Number of def. imm constraints when stmt started */nStmtDefImmCons18270,829507
  Op *aOp;                /* Space to hold the virtual machine's program */aOp18275,829700
  Mem *aMem;              /* The memory locations */aMem18276,829776
  Mem **apArg;            /* Arguments to currently executing user function */apArg18277,829829
  Mem *aColName;          /* Column names to return */aColName18278,829908
  Mem *pResultSet;        /* Pointer to an array of results */pResultSet18279,829963
  char *zErrMsg;          /* Error message written here */zErrMsg18280,830026
  VdbeCursor **apCsr;     /* One element of this array for each open cursor */apCsr18281,830085
  Mem *aVar;              /* Values for the OP_Variable opcode. */aVar18282,830164
  VList *pVList;          /* Name of variables */pVList18283,830231
  i64 startTime;          /* Time when query started - used for profiling */startTime18285,830307
  int nOp;                /* Number of instructions in the program */nOp18287,830391
  int rcApp;              /* errcode set by sqlite3_result_error_code() */rcApp18289,830481
  u16 nResColumn;         /* Number of columns in one row of the result set */nResColumn18291,830563
  u8 errorAction;         /* Recovery action to do in case of an error */errorAction18292,830642
  u8 minWriteFileFormat;  /* Minimum file format for writable database files */minWriteFileFormat18293,830716
  bft expired:1;          /* True if the VM needs to be recompiled */expired18294,830796
  bft doingRerun:1;       /* True if rerunning after an auto-reprepare */doingRerun18295,830866
  bft explain:2;          /* True if EXPLAIN present on SQL command */explain18296,830940
  bft changeCntOn:1;      /* True to update the change-counter */changeCntOn18297,831011
  bft runOnlyOnce:1;      /* Automatically expire on reset */runOnlyOnce18298,831077
  bft usesStmtJournal:1;  /* True if uses a statement journal */usesStmtJournal18299,831139
  bft readOnly:1;         /* True for statements that do not write */readOnly18300,831204
  bft bIsReader:1;        /* True for statements that read */bIsReader18301,831274
  bft isPrepareV2:1;      /* True if prepared with prepare_v2() */isPrepareV218302,831336
  yDbMask btreeMask;      /* Bitmask of db->aDb[] entries referenced */btreeMask18303,831403
  yDbMask lockMask;       /* Subset of btreeMask that requires a lock */lockMask18304,831475
  u32 aCounter[5];        /* Counters used by sqlite3_stmt_status() */aCounter18305,831548
  char *zSql;             /* Text of the SQL statement that generated this */zSql18306,831619
  void *pFree;            /* Free this when deleting the vdbe */pFree18307,831697
  VdbeFrame *pFrame;      /* Parent frame */pFrame18308,831762
  VdbeFrame *pDelFrame;   /* List of frame objects to free on VM reset */pDelFrame18309,831807
  int nFrame;             /* Number of frames in pFrame list */nFrame18310,831881
  u32 expmask;            /* Binding to these vars invalidates VM */expmask18311,831945
  SubProgram *pProgram;   /* Linked list of all sub-programs used by VM */pProgram18312,832014
  AuxData *pAuxData;      /* Linked list of auxdata allocations */pAuxData18313,832089
  i64 *anExec;            /* Number of times each op has been executed */anExec18315,832193
  int nScan;              /* Entries in aScan[] */nScan18316,832267
  ScanStatus *aScan;      /* Scan definitions for sqlite3_stmt_scanstatus() */aScan18317,832318
#define VDBE_MAGIC_INIT VDBE_MAGIC_INIT18324,832465
#define VDBE_MAGIC_RUN VDBE_MAGIC_RUN18325,832537
#define VDBE_MAGIC_HALT VDBE_MAGIC_HALT18326,832610
#define VDBE_MAGIC_RESET VDBE_MAGIC_RESET18327,832687
#define VDBE_MAGIC_DEAD VDBE_MAGIC_DEAD18328,832764
struct PreUpdate {PreUpdate18334,832945
  Vdbe *v;v18335,832964
  VdbeCursor *pCsr;               /* Cursor to read old values from */pCsr18336,832975
  int op;                         /* One of SQLITE_INSERT, UPDATE, DELETE */op18337,833046
  u8 *aRecord;                    /* old.* database record */aRecord18338,833123
  KeyInfo keyinfo;keyinfo18339,833185
  UnpackedRecord *pUnpacked;      /* Unpacked version of aRecord[] */pUnpacked18340,833204
  UnpackedRecord *pNewUnpacked;   /* Unpacked version of new.* record */pNewUnpacked18341,833274
  int iNewReg;                    /* Register for new.* values */iNewReg18342,833347
  i64 iKey1;                      /* First key value passed to hook */iKey118343,833413
  i64 iKey2;                      /* Second key value passed to hook */iKey218344,833484
  Mem *aNew;                      /* Array of new.* values */aNew18345,833556
  Table *pTab;                    /* Schema object being upated */          pTab18346,833618
  Index *pPk;                     /* PK index if pTab is WITHOUT ROWID */pPk18347,833695
# define sqlite3VdbeMemSetDouble sqlite3VdbeMemSetDouble18383,835453
# define sqlite3VdbeEnter(sqlite3VdbeEnter18426,837674
# define sqlite3VdbeLeave(sqlite3VdbeLeave18432,837826
# define sqlite3VdbeCheckFk(sqlite3VdbeCheckFk18443,838098
  #define ExpandBlob(ExpandBlob18455,838483
  #define sqlite3VdbeMemExpandBlob(sqlite3VdbeMemExpandBlob18457,838567
  #define ExpandBlob(ExpandBlob18458,838615
typedef sqlite3_int64 sqlite3StatValueType;sqlite3StatValueType18470,838938
typedef u32 sqlite3StatValueType;sqlite3StatValueType18472,838988
typedef struct sqlite3StatType sqlite3StatType;sqlite3StatType18474,839029
static SQLITE_WSD struct sqlite3StatType {sqlite3StatType18475,839077
  sqlite3StatValueType nowValue[10];  /* Current value */nowValue18476,839120
  sqlite3StatValueType mxValue[10];   /* Maximum value */mxValue18477,839178
} sqlite3Stat = { {0,}, {0,} };sqlite3Stat18478,839236
static const char statMutex[] = {statMutex18484,839423
# define wsdStatInit wsdStatInit18505,840224
# define wsdStat wsdStat18506,840304
# define wsdStatInitwsdStatInit18508,840332
# define wsdStat wsdStat18509,840353
SQLITE_PRIVATE sqlite3_int64 sqlite3StatusValue(int op){sqlite3StatusValue18516,840501
SQLITE_PRIVATE void sqlite3StatusUp(int op, int N){sqlite3StatusUp18536,841298
SQLITE_PRIVATE void sqlite3StatusDown(int op, int N){sqlite3StatusDown18547,841734
SQLITE_PRIVATE void sqlite3StatusHighwater(int op, int X){sqlite3StatusHighwater18561,842185
SQLITE_API int sqlite3_status64(sqlite3_status6418582,842877
SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){sqlite3_status18607,843586
SQLITE_API int sqlite3_db_status(sqlite3_db_status18624,844035
typedef struct DateTime DateTime;DateTime18867,852236
struct DateTime {DateTime18868,852270
  sqlite3_int64 iJD;  /* The julian day number times 86400000 */iJD18869,852288
  int Y, M, D;        /* Year, month, and day */Y18870,852353
  int Y, M, D;        /* Year, month, and day */M18870,852353
  int Y, M, D;        /* Year, month, and day */D18870,852353
  int h, m;           /* Hour and minutes */h18871,852402
  int h, m;           /* Hour and minutes */m18871,852402
  int tz;             /* Timezone offset in minutes */tz18872,852447
  double s;           /* Seconds */s18873,852502
  char validJD;       /* True (1) if iJD is valid */validJD18874,852538
  char rawS;          /* Raw numeric value stored in s */rawS18875,852591
  char validYMD;      /* True (1) if Y,M,D are valid */validYMD18876,852649
  char validHMS;      /* True (1) if h,m,s are valid */validHMS18877,852705
  char validTZ;       /* True (1) if tz is valid */validTZ18878,852761
  char tzSet;         /* Timezone was set explicitly */tzSet18879,852813
  char isError;       /* An overflow has occurred */isError18880,852869
static int getDigits(const char *zDate, const char *zFormat, ...){getDigits18911,853952
static int parseTimezone(const char *zDate, DateTime *p){parseTimezone18965,855236
static int parseHhMmSs(const char *zDate, DateTime *p){parseHhMmSs19001,856031
static void datetimeError(DateTime *p){datetimeError19041,856819
static void computeJD(DateTime *p){computeJD19052,857078
static int parseYyyyMmDd(const char *zDate, DateTime *p){parseYyyyMmDd19102,858113
static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){setDateTimeToCurrent19139,858794
static void setRawDateNumber(DateTime *p, double r){setRawDateNumber19155,859282
static int parseDateOrTime(parseDateOrTime19180,860021
#define INT_464269060799999 INT_46426906079999919206,860767
static int validJulianDay(sqlite3_int64 iJD){validJulianDay19213,860949
static void computeYMD(DateTime *p){computeYMD19220,861113
static void computeHMS(DateTime *p){computeHMS19247,861769
static void computeYMD_HMS(DateTime *p){computeYMD_HMS19266,862097
static void clearYMD_HMS_TZ(DateTime *p){clearYMD_HMS_TZ19274,862217
#undef  HAVE_LOCALTIME_SHAVE_LOCALTIME_S19295,862936
#define HAVE_LOCALTIME_S HAVE_LOCALTIME_S19296,862961
static int osLocaltime(time_t *t, struct tm *pTm){osLocaltime19312,863500
static sqlite3_int64 localtimeOffset(localtimeOffset19351,864578
  u8 eType;           /* Transformation type code */eType19417,866317
  u8 nName;           /* Length of th name */nName19418,866370
  char *zName;        /* Name of the transformation */zName19419,866416
  double rLimit;      /* Maximum NNN value for this transform */rLimit19420,866471
  double rXform;      /* Constant used for this transform */rXform19421,866536
} aXformType[] = {aXformType19422,866597
static int parseModifier(parseModifier19455,867612
static int isDate(isDate19672,873682
static void juliandayFunc(juliandayFunc19715,874694
static void datetimeFunc(datetimeFunc19732,875007
static void timeFunc(timeFunc19752,875470
static void dateFunc(dateFunc19771,875874
static void strftimeFunc(strftimeFunc19804,876671
static void ctimeFunc(ctimeFunc19942,880337
static void cdateFunc(cdateFunc19956,880586
static void ctimestampFunc(ctimestampFunc19970,880844
static void currentTimeFunc(currentTimeFunc19992,881603
SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){sqlite3RegisterDateTimeFunctions20030,882551
SQLITE_API int sqlite3_io_error_hit = 0;            /* Total number of I/O Errors */sqlite3_io_error_hit20075,884371
SQLITE_API int sqlite3_io_error_hardhit = 0;        /* Number of non-benign errors */sqlite3_io_error_hardhit20076,884456
SQLITE_API int sqlite3_io_error_pending = 0;        /* Count down to first I/O error */sqlite3_io_error_pending20077,884542
SQLITE_API int sqlite3_io_error_persist = 0;        /* True if I/O errors persist */sqlite3_io_error_persist20078,884630
SQLITE_API int sqlite3_io_error_benign = 0;         /* True if errors are benign */sqlite3_io_error_benign20079,884715
SQLITE_API int sqlite3_diskfull_pending = 0;sqlite3_diskfull_pending20080,884799
SQLITE_API int sqlite3_diskfull = 0;sqlite3_diskfull20081,884844
SQLITE_API int sqlite3_open_file_count = 0;sqlite3_open_file_count20088,885011
SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;sqlite3_memdebug_vfs_oom_test20116,885869
  #define DO_OS_MALLOC_TEST(DO_OS_MALLOC_TEST20117,885919
  #define DO_OS_MALLOC_TEST(DO_OS_MALLOC_TEST20124,886294
SQLITE_PRIVATE void sqlite3OsClose(sqlite3_file *pId){sqlite3OsClose20133,886577
SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){sqlite3OsRead20139,886716
SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){sqlite3OsWrite20143,886881
SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){sqlite3OsTruncate20147,887054
SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){sqlite3OsSync20150,887166
SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){sqlite3OsFileSize20154,887297
SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){sqlite3OsLock20158,887437
SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){sqlite3OsUnlock20162,887574
SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){sqlite3OsCheckReservedLock20165,887690
SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){sqlite3OsFileControl20178,888311
SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){sqlite3OsFileControlHint20196,889135
SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){sqlite3OsSectorSize20200,889272
SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){sqlite3OsDeviceCharacteristics20204,889468
SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){sqlite3OsShmLock20207,889590
SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){sqlite3OsShmBarrier20210,889732
SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){sqlite3OsShmUnmap20213,889826
SQLITE_PRIVATE int sqlite3OsShmMap(sqlite3OsShmMap20216,889950
SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){sqlite3OsFetch20229,890382
SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){sqlite3OsUnfetch20233,890544
SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){sqlite3OsFetch20238,890732
SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){sqlite3OsUnfetch20242,890849
SQLITE_PRIVATE int sqlite3OsOpen(sqlite3OsOpen20251,891041
SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){sqlite3OsDelete20268,891581
SQLITE_PRIVATE int sqlite3OsAccess(sqlite3OsAccess20273,891778
SQLITE_PRIVATE int sqlite3OsFullPathname(sqlite3OsFullPathname20282,891966
SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){sqlite3OsDlOpen20293,892229
SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){sqlite3OsDlError20296,892344
SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){sqlite3OsDlSym20299,892469
SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){sqlite3OsDlClose20302,892608
SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){sqlite3OsRandomness20306,892755
SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){sqlite3OsSleep20309,892892
SQLITE_PRIVATE int sqlite3OsGetLastError(sqlite3_vfs *pVfs){sqlite3OsGetLastError20312,892997
SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){sqlite3OsCurrentTimeInt6420315,893128
SQLITE_PRIVATE int sqlite3OsOpenMalloc(sqlite3OsOpenMalloc20333,893775
SQLITE_PRIVATE void sqlite3OsCloseFree(sqlite3_file *pFile){sqlite3OsCloseFree20355,894234
SQLITE_PRIVATE int sqlite3OsInit(void){sqlite3OsInit20367,894642
static sqlite3_vfs * SQLITE_WSD vfsList = 0;vfsList20377,894860
#define vfsList vfsList20378,894905
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){sqlite3_vfs_find20384,895050
static void vfsUnlink(sqlite3_vfs *pVfs){vfsUnlink20408,895607
SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){sqlite3_vfs_register20430,896164
SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){sqlite3_vfs_unregister20458,896852
typedef struct BenignMallocHooks BenignMallocHooks;BenignMallocHooks20503,898435
static SQLITE_WSD struct BenignMallocHooks {BenignMallocHooks20504,898487
  void (*xBenignBegin)(void);xBenignBegin20505,898532
  void (*xBenignEnd)(void);xBenignEnd20506,898562
} sqlite3Hooks = { 0, 0 };sqlite3Hooks20507,898590
# define wsdHooksInit wsdHooksInit20516,898989
# define wsdHooks wsdHooks20518,899078
# define wsdHooksInitwsdHooksInit20520,899107
# define wsdHooks wsdHooks20521,899129
SQLITE_PRIVATE void sqlite3BenignMallocHooks(sqlite3BenignMallocHooks20529,899291
SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){sqlite3BeginBenignMalloc20543,899713
SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){sqlite3EndBenignMalloc20549,899847
static void *sqlite3MemMalloc(int nByte){ return 0; }sqlite3MemMalloc20590,901151
static void sqlite3MemFree(void *pPrior){ return; }sqlite3MemFree20591,901205
static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }sqlite3MemRealloc20592,901257
static int sqlite3MemSize(void *pPrior){ return 0; }sqlite3MemSize20593,901326
static int sqlite3MemRoundup(int n){ return n; }sqlite3MemRoundup20594,901379
static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }sqlite3MemInit20595,901428
static void sqlite3MemShutdown(void *NotUsed){ return; }sqlite3MemShutdown20596,901490
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault20604,901763
static malloc_zone_t* _sqliteZone_;_sqliteZone_20684,904842
#define SQLITE_MALLOC(SQLITE_MALLOC20685,904878
#define SQLITE_FREE(SQLITE_FREE20686,904941
#define SQLITE_REALLOC(SQLITE_REALLOC20687,905001
#define SQLITE_MALLOCSIZE(SQLITE_MALLOCSIZE20688,905073
#define SQLITE_MALLOC(SQLITE_MALLOC20697,905355
#define SQLITE_FREE(SQLITE_FREE20698,905402
#define SQLITE_REALLOC(SQLITE_REALLOC20699,905447
#  define SQLITE_USE_MALLOC_H SQLITE_USE_MALLOC_H20706,905658
#  define SQLITE_USE_MALLOC_USABLE_SIZE SQLITE_USE_MALLOC_USABLE_SIZE20707,905690
#  define SQLITE_USE_MALLOC_HSQLITE_USE_MALLOC_H20715,906038
#  define SQLITE_USE_MSIZESQLITE_USE_MSIZE20716,906068
#      define SQLITE_MALLOCSIZE(SQLITE_MALLOCSIZE20730,906601
#      define SQLITE_MALLOCSIZE SQLITE_MALLOCSIZE20734,906741
static void *sqlite3MemMalloc(int nByte){sqlite3MemMalloc20749,907167
static void sqlite3MemFree(void *pPrior){sqlite3MemFree20783,908058
static int sqlite3MemSize(void *pPrior){sqlite3MemSize20798,908343
static void *sqlite3MemRealloc(void *pPrior, int nByte){sqlite3MemRealloc20821,908997
static int sqlite3MemRoundup(int n){sqlite3MemRoundup20853,909804
static int sqlite3MemInit(void *NotUsed){sqlite3MemInit20860,909897
static void sqlite3MemShutdown(void *NotUsed){sqlite3MemShutdown20887,910737
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault20898,911041
# define backtrace(backtrace20952,912739
# define backtrace_symbols_fd(backtrace_symbols_fd20953,912765
struct MemBlockHdr {MemBlockHdr20970,913419
  i64 iSize;                          /* Size of this allocation */iSize20971,913440
  struct MemBlockHdr *pNext, *pPrev;  /* Linked list of all unfreed memory */pNext20972,913508
  struct MemBlockHdr *pNext, *pPrev;  /* Linked list of all unfreed memory */pPrev20972,913508
  char nBacktrace;                    /* Number of backtraces on this alloc */nBacktrace20973,913586
  char nBacktraceSlots;               /* Available backtrace slots */nBacktraceSlots20974,913665
  u8 nTitle;                          /* Bytes of title; includes '\0' */nTitle20975,913735
  u8 eType;                           /* Allocation type code */eType20976,913809
  int iForeGuard;                     /* Guard word for sanity */iForeGuard20977,913874
#define FOREGUARD FOREGUARD20983,913965
#define REARGUARD REARGUARD20984,913994
#define NCSIZE NCSIZE20989,914076
  sqlite3_mutex *mutex;mutex21002,914452
  struct MemBlockHdr *pFirst;pFirst21007,914554
  struct MemBlockHdr *pLast;pLast21008,914584
  int nBacktrace;nBacktrace21013,914693
  void (*xBacktrace)(int, int, void **);xBacktrace21014,914711
  int nTitle;        /* Bytes of zTitle to save.  Includes '\0' and padding */nTitle21019,914812
  char zTitle[100];  /* The title text */zTitle21020,914891
  int disallow; /* Do not allow memory allocation */disallow21026,915049
  int nAlloc[NCSIZE];      /* Total number of allocations */nAlloc21034,915332
  int nCurrent[NCSIZE];    /* Current number of allocations */nCurrent21035,915393
  int mxCurrent[NCSIZE];   /* Highwater mark for nCurrent */mxCurrent21036,915456
} mem;mem21038,915518
static void adjustStats(int iSize, int increment){adjustStats21044,915567
static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){sqlite3MemsysGetHeader21067,916101
static int sqlite3MemSize(void *p){sqlite3MemSize21091,916767
static int sqlite3MemInit(void *NotUsed){sqlite3MemInit21103,916980
static void sqlite3MemShutdown(void *NotUsed){sqlite3MemShutdown21117,917428
static int sqlite3MemRoundup(int n){sqlite3MemRoundup21125,917592
static void randomFill(char *pBuf, int nByte){randomFill21134,917866
static void *sqlite3MemMalloc(int nByte){sqlite3MemMalloc21157,918342
static void sqlite3MemFree(void *pPrior){sqlite3MemFree21216,919864
static void *sqlite3MemRealloc(void *pPrior, int nByte){sqlite3MemRealloc21258,921139
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault21279,921805
SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){sqlite3MemdebugSetType21296,922180
SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){sqlite3MemdebugHasType21314,922753
SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){sqlite3MemdebugNoType21336,923430
SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){sqlite3MemdebugBacktrace21354,923954
SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){sqlite3MemdebugBacktraceCallback21361,924128
SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){sqlite3MemdebugSettitle21368,924313
SQLITE_PRIVATE void sqlite3MemdebugSync(){sqlite3MemdebugSync21378,924633
SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){sqlite3MemdebugDump21391,924993
SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){sqlite3MemdebugMallocCount21433,926245
#define MX_SMALL MX_SMALL21486,928006
#define N_HASH N_HASH21492,928067
typedef struct Mem3Block Mem3Block;Mem3Block21526,929687
struct Mem3Block {Mem3Block21527,929723
      u32 prevSize;   /* Size of previous chunk in Mem3Block elements */prevSize21530,929765
      u32 size4x;     /* 4x the size of current chunk in Mem3Block elements */size4x21531,929838
    } hdr;hdr21532,929917
      u32 next;       /* Index in mem3.aPool[] of next free chunk */next21534,929941
      u32 prev;       /* Index in mem3.aPool[] of previous free chunk */prev21535,930010
    } list;list21536,930083
  } u;u21537,930095
static SQLITE_WSD struct Mem3Global {Mem3Global21546,930367
  u32 nPool;nPool21551,930533
  Mem3Block *aPool;aPool21552,930546
  int alarmBusy;alarmBusy21557,930635
  sqlite3_mutex *mutex;mutex21562,930730
  u32 mnMaster;mnMaster21567,930824
  u32 iMaster;iMaster21575,931126
  u32 szMaster;szMaster21576,931141
  u32 aiSmall[MX_SMALL-1];   /* For sizes 2 through MX_SMALL, inclusive */aiSmall21583,931309
  u32 aiHash[N_HASH];        /* For sizes MX_SMALL+1 and larger */aiHash21584,931384
} mem3 = { 97535575 };mem321585,931451
#define mem3 mem321587,931475
static void memsys3UnlinkFromList(u32 i, u32 *pRoot){memsys3UnlinkFromList21593,931640
static void memsys3Unlink(u32 i){memsys3Unlink21613,932122
static void memsys3LinkIntoList(u32 i, u32 *pRoot){memsys3LinkIntoList21633,932660
static void memsys3Link(u32 i){memsys3Link21647,933024
static void memsys3Enter(void){memsys3Enter21668,933649
static void memsys3Leave(void){memsys3Leave21674,933841
static void memsys3OutOfMemory(int nByte){memsys3OutOfMemory21681,933982
static void *memsys3Checkout(u32 i, u32 nBlock){memsys3Checkout21698,934423
static void *memsys3FromMaster(u32 nBlock){memsys3FromMaster21716,935039
static void memsys3Merge(u32 *pRoot){memsys3Merge21761,936818
static void *memsys3MallocUnsafe(int nByte){memsys3MallocUnsafe21800,937896
static void memsys3FreeUnsafe(void *pOld){memsys3FreeUnsafe21882,940088
static int memsys3Size(void *p){memsys3Size21923,941684
static int memsys3Roundup(int n){memsys3Roundup21934,941942
static void *memsys3Malloc(int nBytes){memsys3Malloc21945,942086
static void memsys3Free(void *pPrior){memsys3Free21957,942336
static void *memsys3Realloc(void *pPrior, int nBytes){memsys3Realloc21967,942521
static int memsys3Init(void *NotUsed){memsys3Init21998,943084
static void memsys3Shutdown(void *NotUsed){memsys3Shutdown22023,943777
SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){sqlite3Memsys3Dump22035,943985
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){sqlite3MemGetMemsys322119,946527
typedef struct Mem5Link Mem5Link;Mem5Link22203,949628
struct Mem5Link {Mem5Link22204,949662
  int next;       /* Index of next free chunk */next22205,949680
  int prev;       /* Index of previous free chunk */prev22206,949729
#define LOGMAX LOGMAX22214,949980
#define CTRL_LOGSIZE CTRL_LOGSIZE22219,950046
#define CTRL_FREE CTRL_FREE22220,950106
static SQLITE_WSD struct Mem5Global {Mem5Global22228,950428
  int szAtom;      /* Smallest possible allocation in bytes */szAtom22232,950513
  int nBlock;      /* Number of szAtom sized blocks in zPool */nBlock22233,950576
  u8 *zPool;       /* Memory available to be allocated */zPool22234,950640
  sqlite3_mutex *mutex;mutex22239,950776
  u64 nAlloc;         /* Total number of calls to malloc */nAlloc22245,950889
  u64 totalAlloc;     /* Total of all malloc calls - includes internal frag */totalAlloc22246,950949
  u64 totalExcess;    /* Total internal fragmentation */totalExcess22247,951028
  u32 currentOut;     /* Current checkout, including internal fragmentation */currentOut22248,951085
  u32 currentCount;   /* Current number of distinct checkouts */currentCount22249,951164
  u32 maxOut;         /* Maximum instantaneous currentOut */maxOut22250,951229
  u32 maxCount;       /* Maximum instantaneous currentCount */maxCount22251,951290
  u32 maxRequest;     /* Largest allocation (exclusive of internal frag) */maxRequest22252,951353
  int aiFreelist[LOGMAX+1];aiFreelist22260,951658
  u8 *aCtrl;aCtrl22266,951804
} mem5;mem522268,951818
#define mem5 mem522273,951900
#define MEM5LINK(MEM5LINK22279,952072
static void memsys5Unlink(int i, int iLogsize){memsys5Unlink22285,952268
static void memsys5Link(int i, int iLogsize){memsys5Link22307,952764
static void memsys5Enter(void){memsys5Enter22326,953265
static void memsys5Leave(void){memsys5Leave22329,953334
static int memsys5Size(void *p){memsys5Size22337,953531
static void *memsys5MallocUnsafe(int nByte){memsys5MallocUnsafe22356,954097
static void memsys5FreeUnsafe(void *pOld){memsys5FreeUnsafe22426,956284
static void *memsys5Malloc(int nBytes){memsys5Malloc22492,958176
static void memsys5Free(void *pPrior){memsys5Free22508,958482
static void *memsys5Realloc(void *pPrior, int nBytes){memsys5Realloc22527,959078
static int memsys5Roundup(int n){memsys5Roundup22557,959811
static int memsys5Log(int iValue){memsys5Log22574,960237
static int memsys5Init(void *NotUsed){memsys5Init22586,960557
static void memsys5Shutdown(void *NotUsed){memsys5Shutdown22644,962266
SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){sqlite3Memsys5Dump22655,962491
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){sqlite3MemGetMemsys522698,963868
static SQLITE_WSD int mutexIsInit = 0;mutexIsInit22739,965176
SQLITE_PRIVATE int sqlite3MutexInit(void){ sqlite3MutexInit22747,965338
SQLITE_PRIVATE int sqlite3MutexEnd(void){sqlite3MutexEnd22788,966660
SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){sqlite3_mutex_alloc22804,966975
SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){sqlite3MutexAlloc22813,967307
SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){sqlite3_mutex_free22825,967598
SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){sqlite3_mutex_enter22836,967875
SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){sqlite3_mutex_try22847,968204
SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){sqlite3_mutex_leave22862,968661
SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){sqlite3_mutex_held22874,968970
SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){sqlite3_mutex_notheld22878,969141
static int noopMutexInit(void){ return SQLITE_OK; }noopMutexInit22925,970683
static int noopMutexEnd(void){ return SQLITE_OK; }noopMutexEnd22926,970735
static sqlite3_mutex *noopMutexAlloc(int id){ noopMutexAlloc22927,970786
static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }noopMutexFree22931,970888
static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }noopMutexEnter22932,970964
static int noopMutexTry(sqlite3_mutex *p){noopMutexTry22933,971041
static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }noopMutexLeave22937,971129
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){sqlite3NoopMutex22939,971207
typedef struct sqlite3_debug_mutex {sqlite3_debug_mutex22967,971731
  int id;     /* The mutex type */id22968,971768
  int cnt;    /* Number of entries without a matching leave */cnt22969,971803
} sqlite3_debug_mutex;sqlite3_debug_mutex22970,971866
static int debugMutexHeld(sqlite3_mutex *pX){debugMutexHeld22976,972012
static int debugMutexNotheld(sqlite3_mutex *pX){debugMutexNotheld22980,972140
static int debugMutexInit(void){ return SQLITE_OK; }debugMutexInit22988,972331
static int debugMutexEnd(void){ return SQLITE_OK; }debugMutexEnd22989,972384
static sqlite3_mutex *debugMutexAlloc(int id){debugMutexAlloc22996,972606
static void debugMutexFree(sqlite3_mutex *pX){debugMutexFree23027,973299
static void debugMutexEnter(sqlite3_mutex *pX){debugMutexEnter23050,974215
static int debugMutexTry(sqlite3_mutex *pX){debugMutexTry23055,974398
static void debugMutexLeave(sqlite3_mutex *pX){debugMutexLeave23068,974839
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){sqlite3NoopMutex23075,975055
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){sqlite3DefaultMutex23098,975574
# define SQLITE_MUTEX_NREF SQLITE_MUTEX_NREF23138,976957
# define SQLITE_MUTEX_NREF SQLITE_MUTEX_NREF23140,976992
struct sqlite3_mutex {sqlite3_mutex23146,977102
  pthread_mutex_t mutex;     /* Mutex controlling the lock */mutex23147,977125
  int id;                    /* Mutex type */id23149,977245
  volatile int nRef;         /* Number of entrances */nRef23152,977320
  volatile pthread_t owner;  /* Thread that is within this mutex */owner23153,977375
  int trace;                 /* True to trace changes */trace23154,977443
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER23158,977532
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER23160,977652
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER23162,977725
static int pthreadMutexHeld(sqlite3_mutex *p){pthreadMutexHeld23182,978663
static int pthreadMutexNotheld(sqlite3_mutex *p){pthreadMutexNotheld23185,978778
SQLITE_PRIVATE void sqlite3MemoryBarrier(void){sqlite3MemoryBarrier23195,979098
static int pthreadMutexInit(void){ return SQLITE_OK; }pthreadMutexInit23206,979346
static int pthreadMutexEnd(void){ return SQLITE_OK; }pthreadMutexEnd23207,979401
static sqlite3_mutex *pthreadMutexAlloc(int iType){pthreadMutexAlloc23257,981586
static void pthreadMutexFree(sqlite3_mutex *p){pthreadMutexFree23322,983375
static void pthreadMutexEnter(sqlite3_mutex *p){pthreadMutexEnter23349,984319
static int pthreadMutexTry(sqlite3_mutex *p){pthreadMutexTry23391,985667
static void pthreadMutexLeave(sqlite3_mutex *p){pthreadMutexLeave23448,987410
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){sqlite3DefaultMutex23471,987899
#define _OS_COMMON_H__OS_COMMON_H_23537,989866
#define SQLITE_HWTIME_HSQLITE_HWTIME_H23576,991115
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime23589,991512
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec23597,991720
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime23608,991935
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime23616,992130
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime23640,992872
static sqlite_uint64 g_start;g_start23649,993163
static sqlite_uint64 g_elapsed;g_elapsed23650,993193
#define TIMER_START TIMER_START23651,993225
#define TIMER_END TIMER_END23652,993275
#define TIMER_ELAPSED TIMER_ELAPSED23653,993335
#define TIMER_STARTTIMER_START23655,993377
#define TIMER_ENDTIMER_END23656,993397
#define TIMER_ELAPSED TIMER_ELAPSED23657,993415
#define SimulateIOErrorBenign(SimulateIOErrorBenign23673,994015
#define SimulateIOError(SimulateIOError23674,994076
static void local_ioerr(){local_ioerr23678,994254
#define SimulateDiskfullError(SimulateDiskfullError23683,994394
#define SimulateIOErrorBenign(SimulateIOErrorBenign23695,994689
#define SimulateIOError(SimulateIOError23696,994722
#define SimulateDiskfullError(SimulateDiskfullError23697,994749
#define OpenCounter(OpenCounter23705,994954
#define OpenCounter(OpenCounter23707,995013
#define SQLITE_OS_WIN_HSQLITE_OS_WIN_H23735,995949
# define SQLITE_OS_WINNT SQLITE_OS_WINNT23765,996754
# define SQLITE_OS_WINCE SQLITE_OS_WINCE23773,996901
# define SQLITE_OS_WINCE SQLITE_OS_WINCE23775,996934
# define SQLITE_OS_WINRT SQLITE_OS_WINRT23783,997103
# define SQLITE_WIN32_VOLATILESQLITE_WIN32_VOLATILE23791,997252
# define SQLITE_WIN32_VOLATILE SQLITE_WIN32_VOLATILE23793,997289
# define SQLITE_OS_WIN_THREADS SQLITE_OS_WIN_THREADS23802,997600
# define SQLITE_OS_WIN_THREADS SQLITE_OS_WIN_THREADS23804,997639
struct sqlite3_mutex {sqlite3_mutex23822,998076
  CRITICAL_SECTION mutex;    /* Mutex controlling the lock */mutex23823,998099
  int id;                    /* Mutex type */id23824,998161
  volatile int nRef;         /* Number of enterances */nRef23826,998227
  volatile DWORD owner;      /* Thread holding this mutex */owner23827,998283
  volatile int trace;        /* True to trace changes */trace23828,998344
#define SQLITE_W32_MUTEX_INITIALIZER SQLITE_W32_MUTEX_INITIALIZER23837,998590
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER23840,998654
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER23843,998785
static int winMutexHeld(sqlite3_mutex *p){winMutexHeld23851,999010
static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){winMutexNotheld223855,999111
static int winMutexNotheld(sqlite3_mutex *p){winMutexNotheld23859,999210
SQLITE_PRIVATE void sqlite3MemoryBarrier(void){sqlite3MemoryBarrier23870,999540
static sqlite3_mutex winMutex_staticMutexes[] = {winMutex_staticMutexes23885,999860
static int winMutex_isInit = 0;winMutex_isInit23900,1000261
static int winMutex_isNt = -1; /* <0 means "need to query" */winMutex_isNt23901,1000293
static LONG SQLITE_WIN32_VOLATILE winMutex_lock = 0;winMutex_lock23907,1000570
static int winMutexInit(void){winMutexInit23912,1000754
static int winMutexEnd(void){winMutexEnd23934,1001372
static sqlite3_mutex *winMutexAlloc(int iType){winMutexAlloc23997,1003928
static void winMutexFree(sqlite3_mutex *p){winMutexFree24045,1004929
static void winMutexEnter(sqlite3_mutex *p){winMutexEnter24069,1005858
static int winMutexTry(sqlite3_mutex *p){winMutexTry24092,1006433
static void winMutexLeave(sqlite3_mutex *p){winMutexLeave24142,1008057
SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){sqlite3DefaultMutex24164,1008624
SQLITE_API int sqlite3_release_memory(int n){sqlite3_release_memory24210,1009866
typedef struct ScratchFreeslot {ScratchFreeslot24226,1010320
  struct ScratchFreeslot *pNext;   /* Next unused scratch buffer */pNext24227,1010353
} ScratchFreeslot;ScratchFreeslot24228,1010421
static SQLITE_WSD struct Mem0Global {Mem0Global24233,1010510
  sqlite3_mutex *mutex;         /* Mutex to serialize access */mutex24234,1010548
  sqlite3_int64 alarmThreshold; /* The soft heap limit */alarmThreshold24235,1010612
  void *pScratchEnd;pScratchEnd24243,1010913
  ScratchFreeslot *pScratchFree;pScratchFree24244,1010934
  u32 nScratchFree;nScratchFree24245,1010967
  int nearlyFull;nearlyFull24251,1011104
} mem0 = { 0, 0, 0, 0, 0, 0 };mem024252,1011122
#define mem0 mem024254,1011154
SQLITE_PRIVATE sqlite3_mutex *sqlite3MallocMutex(void){sqlite3MallocMutex24259,1011271
SQLITE_API int sqlite3_memory_alarm(sqlite3_memory_alarm24269,1011533
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){sqlite3_soft_heap_limit6424285,1011867
SQLITE_API void sqlite3_soft_heap_limit(int n){sqlite3_soft_heap_limit24307,1012538
SQLITE_PRIVATE int sqlite3MallocInit(void){sqlite3MallocInit24315,1012693
SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){sqlite3HeapNearlyFull24359,1014156
SQLITE_PRIVATE void sqlite3MallocEnd(void){sqlite3MallocEnd24366,1014288
SQLITE_API sqlite3_int64 sqlite3_memory_used(void){sqlite3_memory_used24376,1014543
SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){sqlite3_memory_highwater24387,1014855
static void sqlite3MallocAlarm(int nByte){sqlite3MallocAlarm24396,1015059
static void mallocWithAlarm(int n, void **pp){mallocWithAlarm24407,1015344
SQLITE_PRIVATE void *sqlite3Malloc(u64 n){sqlite3Malloc24456,1016831
SQLITE_API void *sqlite3_malloc(int n){sqlite3_malloc24481,1017753
SQLITE_API void *sqlite3_malloc64(sqlite3_uint64 n){sqlite3_malloc6424487,1017908
static int scratchAllocOut = 0;scratchAllocOut24501,1018373
SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){sqlite3ScratchMalloc24513,1018764
SQLITE_PRIVATE void sqlite3ScratchFree(void *p){sqlite3ScratchFree24550,1019860
static int isLookaside(sqlite3 *db, void *p){isLookaside24597,1021594
#define isLookaside(isLookaside24601,1021717
SQLITE_PRIVATE int sqlite3MallocSize(void *p){sqlite3MallocSize24608,1021865
SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){sqlite3DbMallocSize24612,1022008
SQLITE_API sqlite3_uint64 sqlite3_msize(void *p){sqlite3_msize24630,1022594
SQLITE_API void sqlite3_free(void *p){sqlite3_free24639,1022869
static SQLITE_NOINLINE void measureAllocationSize(sqlite3 *db, void *p){measureAllocationSize24658,1023476
SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){sqlite3DbFree24666,1023690
SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, u64 nBytes){sqlite3Realloc24696,1024583
SQLITE_API void *sqlite3_realloc(void *pOld, int n){sqlite3_realloc24748,1026345
SQLITE_API void *sqlite3_realloc64(void *pOld, sqlite3_uint64 n){sqlite3_realloc6424755,1026554
SQLITE_PRIVATE void *sqlite3MallocZero(u64 n){sqlite3MallocZero24766,1026769
SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, u64 n){sqlite3DbMallocZero24778,1027023
static SQLITE_NOINLINE void *dbMallocRawFinish(sqlite3 *db, u64 n){dbMallocRawFinish24790,1027339
SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, u64 n){sqlite3DbMallocRaw24822,1028497
SQLITE_PRIVATE void *sqlite3DbMallocRawNN(sqlite3 *db, u64 n){sqlite3DbMallocRawNN24829,1028697
SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, u64 n){sqlite3DbRealloc24871,1029860
static SQLITE_NOINLINE void *dbReallocFinish(sqlite3 *db, void *p, u64 n){dbReallocFinish24878,1030136
SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, u64 n){sqlite3DbReallocOrFree24908,1031051
SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){sqlite3DbStrDup24924,1031570
SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, u64 n){sqlite3DbStrNDup24937,1031810
SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zNew){sqlite3SetString24955,1032180
SQLITE_PRIVATE void sqlite3OomFault(sqlite3 *db){sqlite3OomFault24966,1032561
SQLITE_PRIVATE void sqlite3OomClear(sqlite3 *db){sqlite3OomClear24983,1032976
static SQLITE_NOINLINE int apiOomError(sqlite3 *db){apiOomError24995,1033278
SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){sqlite3ApiExit25013,1033913
#define etRADIX etRADIX25045,1035021
#define etFLOAT etFLOAT25046,1035085
#define etEXP etEXP25047,1035135
#define etGENERIC etGENERIC25048,1035199
#define etSIZE etSIZE25049,1035280
#define etSTRING etSTRING25050,1035359
#define etDYNSTRING etDYNSTRING25051,1035401
#define etPERCENT etPERCENT25052,1035465
#define etCHARX etCHARX25053,1035514
#define etSQLESCAPE etSQLESCAPE25055,1035621
#define etSQLESCAPE2 etSQLESCAPE225056,1035682
#define etTOKEN etTOKEN25058,1035824
#define etSRCLIST etSRCLIST25059,1035885
#define etPOINTER etPOINTER25060,1035938
#define etSQLESCAPE3 etSQLESCAPE325061,1035986
#define etORDINAL etORDINAL25062,1036048
#define etDECIMAL etDECIMAL25063,1036123
#define etINVALID etINVALID25065,1036179
typedef unsigned char etByte;etByte25071,1036293
typedef struct et_info {   /* Information about each format field */et_info25077,1036447
  char fmttype;            /* The format field code letter */fmttype25078,1036516
  etByte base;             /* The base for radix conversion */base25079,1036578
  etByte flags;            /* One or more of FLAG_ constants below */flags25080,1036641
  etByte type;             /* Conversion paradigm */type25081,1036711
  etByte charset;          /* Offset into aDigits[] of the digits string */charset25082,1036764
  etByte prefix;           /* Offset into aPrefix[] of the prefix string */prefix25083,1036840
} et_info;et_info25084,1036916
#define FLAG_SIGNED FLAG_SIGNED25089,1036970
#define FLAG_STRING FLAG_STRING25090,1037044
static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";aDigits25097,1037230
static const char aPrefix[] = "-x0\000X0";aPrefix25098,1037296
static const et_info fmtinfo[] = {fmtinfo25099,1037339
static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){et_getdigit25147,1038977
static void setStrAccumError(StrAccum *p, u8 eError){setStrAccumError25163,1039302
static sqlite3_int64 getIntArg(PrintfArguments *p){getIntArg25172,1039524
static double getDoubleArg(PrintfArguments *p){getDoubleArg25176,1039666
static char *getTextArg(PrintfArguments *p){getTextArg25180,1039807
# define SQLITE_PRINT_BUF_SIZE SQLITE_PRINT_BUF_SIZE25191,1040109
#define etBUFSIZE etBUFSIZE25193,1040150
SQLITE_PRIVATE void sqlite3VXPrintf(sqlite3VXPrintf25198,1040290
static int sqlite3StrAccumEnlarge(StrAccum *p, int N){sqlite3StrAccumEnlarge25797,1059867
SQLITE_PRIVATE void sqlite3AppendChar(StrAccum *p, int N, char c){sqlite3AppendChar25849,1061386
static void SQLITE_NOINLINE enlargeAndAppend(StrAccum *p, const char *z, int N){enlargeAndAppend25866,1062025
SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){sqlite3StrAccumAppend25879,1062422
SQLITE_PRIVATE void sqlite3StrAccumAppendAll(StrAccum *p, const char *z){sqlite3StrAccumAppendAll25896,1062894
static SQLITE_NOINLINE char *strAccumFinishRealloc(StrAccum *p){strAccumFinishRealloc25906,1063199
SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){sqlite3StrAccumFinish25917,1063544
SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){sqlite3StrAccumReset25931,1063877
SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, sqlite3 *db, char *zBase, int n, int mx){sqlite3StrAccumInit25954,1064724
SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){sqlite3VMPrintf25968,1065063
SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){sqlite3MPrintf25988,1065642
SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){sqlite3_vmprintf26001,1065943
SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){sqlite3_mprintf26025,1066528
SQLITE_API char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){sqlite3_vsnprintf26050,1067306
SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){sqlite3_snprintf26065,1067707
static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){renderLogMsg26088,1068565
SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){sqlite3_log26101,1069062
SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){sqlite3DebugPrintf26116,1069576
SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, const char *zFormat, ...){sqlite3XPrintf26135,1070064
static TreeView *sqlite3TreeViewPush(TreeView *p, u8 moreToFollow){sqlite3TreeViewPush26170,1071185
static void sqlite3TreeViewPop(TreeView *p){sqlite3TreeViewPop26186,1071571
static void sqlite3TreeViewLine(TreeView *p, const char *zFormat, ...){sqlite3TreeViewLine26196,1071810
static void sqlite3TreeViewItem(TreeView *p, const char *zLabel,u8 moreFollows){sqlite3TreeViewItem26221,1072541
SQLITE_PRIVATE void sqlite3TreeViewWith(TreeView *pView, const With *pWith, u8 moreToFollow){sqlite3TreeViewWith26229,1072773
SQLITE_PRIVATE void sqlite3TreeViewSelect(TreeView *pView, const Select *p, u8 moreToFollow){sqlite3TreeViewSelect26269,1073992
SQLITE_PRIVATE void sqlite3TreeViewExpr(TreeView *pView, const Expr *pExpr, u8 moreToFollow){sqlite3TreeViewExpr26381,1077572
SQLITE_PRIVATE void sqlite3TreeViewBareExprList(sqlite3TreeViewBareExprList26631,1085470
SQLITE_PRIVATE void sqlite3TreeViewExprList(sqlite3TreeViewExprList26653,1086097
static SQLITE_WSD struct sqlite3PrngType {sqlite3PrngType26691,1087311
  unsigned char isInit;          /* True if initialized */isInit26692,1087354
  unsigned char i, j;            /* State variables */i26693,1087413
  unsigned char i, j;            /* State variables */j26693,1087413
  unsigned char s[256];          /* State variables */s26694,1087468
} sqlite3Prng;sqlite3Prng26695,1087523
SQLITE_API void sqlite3_randomness(int N, void *pBuf){sqlite3_randomness26700,1087571
# define wsdPrng wsdPrng26712,1088136
static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;sqlite3SavedPrng26786,1090027
SQLITE_PRIVATE void sqlite3PrngSaveState(void){sqlite3PrngSaveState26787,1090086
SQLITE_PRIVATE void sqlite3PrngRestoreState(void){sqlite3PrngRestoreState26794,1090280
#define SQLITE_THREADS_IMPLEMENTED SQLITE_THREADS_IMPLEMENTED26842,1092077
struct SQLiteThread {SQLiteThread26846,1092209
  pthread_t tid;                 /* Thread ID */tid26847,1092231
  int done;                      /* Set to true when thread finishes */done26848,1092280
  void *pOut;                    /* Result returned by the thread */pOut26849,1092352
  void *(*xTask)(void*);         /* The thread routine */xTask26850,1092421
  void *pIn;                     /* Argument to the thread */pIn26851,1092479
SQLITE_PRIVATE int sqlite3ThreadCreate(sqlite3ThreadCreate26855,1092571
SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){sqlite3ThreadJoin26892,1093641
#define SQLITE_THREADS_IMPLEMENTED SQLITE_THREADS_IMPLEMENTED26914,1094210
struct SQLiteThread {SQLiteThread26918,1094336
  void *tid;               /* The thread handle */tid26919,1094358
  unsigned id;             /* The thread identifier */id26920,1094409
  void *(*xTask)(void*);   /* The routine to run as a thread */xTask26921,1094464
  void *pIn;               /* Argument to xTask */pIn26922,1094528
  void *pResult;           /* Result of xTask */pResult26923,1094579
static unsigned __stdcall sqlite3ThreadProc(sqlite3ThreadProc26927,1094680
SQLITE_PRIVATE int sqlite3ThreadCreate(sqlite3ThreadCreate26950,1095273
SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){sqlite3ThreadJoin26988,1096495
struct SQLiteThread {SQLiteThread27023,1097544
  void *(*xTask)(void*);   /* The routine to run as a thread */xTask27024,1097566
  void *pIn;               /* Argument to xTask */pIn27025,1097630
  void *pResult;           /* Result of xTask */pResult27026,1097681
SQLITE_PRIVATE int sqlite3ThreadCreate(sqlite3ThreadCreate27030,1097760
SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){sqlite3ThreadJoin27054,1098373
SQLITE_PRIVATE const int sqlite3one = 1;sqlite3one27126,1100587
static const unsigned char sqlite3Utf8Trans1[] = {sqlite3Utf8Trans127133,1100785
#define WRITE_UTF8(WRITE_UTF827145,1101241
#define WRITE_UTF16LE(WRITE_UTF16LE27165,1102270
#define WRITE_UTF16BE(WRITE_UTF16BE27177,1102973
#define READ_UTF16LE(READ_UTF16LE27189,1103676
#define READ_UTF16BE(READ_UTF16BE27199,1104255
#define READ_UTF8(READ_UTF827236,1105937
SQLITE_PRIVATE u32 sqlite3Utf8Read(sqlite3Utf8Read27247,1106551
SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){sqlite3VdbeMemTranslate27283,1107521
SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){sqlite3VdbeMemHandleBom27426,1111734
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){sqlite3Utf8CharLen27464,1112723
SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){sqlite3Utf8To827494,1113454
SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){sqlite3Utf16to827518,1114038
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){sqlite3Utf16ByteLen27539,1114705
SQLITE_PRIVATE void sqlite3UtfSelfTest(void){sqlite3UtfSelfTest27564,1115304
SQLITE_PRIVATE void sqlite3Coverage(int x){sqlite3Coverage27642,1117268
SQLITE_PRIVATE int sqlite3FaultSim(int iTest){sqlite3FaultSim27660,1117824
SQLITE_PRIVATE int sqlite3IsNaN(double x){sqlite3IsNaN27673,1118253
SQLITE_PRIVATE int sqlite3Strlen30(const char *z){sqlite3Strlen3027721,1120063
SQLITE_PRIVATE char *sqlite3ColumnType(Column *pCol, char *zDflt){sqlite3ColumnType27733,1120426
static SQLITE_NOINLINE void  sqlite3ErrorFinish(sqlite3 *db, int err_code){sqlite3ErrorFinish27743,1120771
SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code){sqlite3Error27753,1121122
SQLITE_PRIVATE void sqlite3SystemError(sqlite3 *db, int rc){sqlite3SystemError27763,1121415
SQLITE_PRIVATE void sqlite3ErrorWithMsg(sqlite3 *db, int err_code, const char *zFormat, ...){sqlite3ErrorWithMsg27792,1122386
SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){sqlite3ErrorMsg27825,1123609
SQLITE_PRIVATE void sqlite3Dequote(char *z){sqlite3Dequote27859,1124653
SQLITE_PRIVATE void sqlite3TokenInit(Token *p, char *z){sqlite3TokenInit27885,1125102
#define UpperToLower UpperToLower27891,1125231
SQLITE_API int sqlite3_stricmp(const char *zLeft, const char *zRight){sqlite3_stricmp27903,1125734
SQLITE_PRIVATE int sqlite3StrICmp(const char *zLeft, const char *zRight){sqlite3StrICmp27911,1125936
SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){sqlite3_strnicmp27924,1126234
SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){sqlite3AtoF27959,1127452
static int compare2pow63(const char *zNum, int incr){compare2pow6328149,1133056
SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){sqlite3Atoi6428185,1134191
SQLITE_PRIVATE int sqlite3DecOrHexToI64(const char *z, i64 *pOut){sqlite3DecOrHexToI6428271,1136886
SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){sqlite3GetInt3228301,1137763
SQLITE_PRIVATE int sqlite3Atoi(const char *z){sqlite3Atoi28359,1138985
static int SQLITE_NOINLINE putVarint64(unsigned char *p, u64 v){putVarint6428394,1139925
SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){sqlite3PutVarint28418,1140387
#define SLOT_2_0 SLOT_2_028440,1140929
#define SLOT_4_2_0 SLOT_4_2_028441,1140961
SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){sqlite3GetVarint28448,1141136
SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){sqlite3GetVarint3228619,1144358
SQLITE_PRIVATE int sqlite3VarintLen(u64 v){sqlite3VarintLen28742,1146905
SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){sqlite3Get4byte28752,1147084
SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){sqlite3Put4byte28770,1147520
SQLITE_PRIVATE u8 sqlite3HexToInt(int h){sqlite3HexToInt28794,1148075
SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){sqlite3HexToBlob28812,1148619
static void logBadConnection(const char *zType){logBadConnection28833,1149222
SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){sqlite3SafetyCheckOk28854,1150092
SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){sqlite3SafetyCheckSickOrOk28871,1150451
SQLITE_PRIVATE int sqlite3AddInt64(i64 *pA, i64 iB){sqlite3AddInt6428891,1151041
SQLITE_PRIVATE int sqlite3SubInt64(i64 *pA, i64 iB){sqlite3SubInt6428911,1151660
SQLITE_PRIVATE int sqlite3MulInt64(i64 *pA, i64 iB){sqlite3MulInt6428926,1152022
SQLITE_PRIVATE int sqlite3AbsInt32(int x){sqlite3AbsInt3228952,1152684
SQLITE_PRIVATE void sqlite3FileSuffix3(const char *zBaseFilename, char *z){sqlite3FileSuffix328976,1153494
SQLITE_PRIVATE LogEst sqlite3LogEstAdd(LogEst a, LogEst b){sqlite3LogEstAdd28995,1154015
SQLITE_PRIVATE LogEst sqlite3LogEst(u64 x){sqlite3LogEst29022,1154842
SQLITE_PRIVATE LogEst sqlite3LogEstFromDouble(double x){sqlite3LogEstFromDouble29040,1155310
SQLITE_PRIVATE u64 sqlite3LogEstToInt(LogEst x){sqlite3LogEstToInt29061,1155904
SQLITE_PRIVATE VList *sqlite3VListAdd(sqlite3VListAdd29115,1157869
SQLITE_PRIVATE const char *sqlite3VListNumToName(VList *pIn, int iVal){sqlite3VListNumToName29153,1159151
SQLITE_PRIVATE int sqlite3VListNameToNum(VList *pIn, const char *zName, int nName){sqlite3VListNameToNum29169,1159511
SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){sqlite3HashInit29206,1160663
SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){sqlite3HashClear29218,1160967
static unsigned int strHash(const char *z){strHash29238,1161359
static void insertElement(insertElement29255,1161912
static int rehash(Hash *pH, unsigned int new_size){rehash29289,1162889
static HashElem *findElementWithHash(findElementWithHash29329,1164460
static void removeElementGivenHash(removeElementGivenHash29363,1165402
SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey){sqlite3HashFind29398,1166278
SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){sqlite3HashInsert29422,1167154
# define OpHelp(OpHelp29464,1168546
# define OpHelp(OpHelp29466,1168578
SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){sqlite3OpcodeName29468,1168604
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE29708,1180690
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE29710,1180740
# define HAVE_PREAD HAVE_PREAD29716,1180875
# define HAVE_PWRITE HAVE_PWRITE29717,1180897
# undef USE_PREADUSE_PREAD29720,1180979
# define USE_PREAD64 USE_PREAD6429721,1180997
# undef USE_PREAD64USE_PREAD6429723,1181070
# define USE_PREAD USE_PREAD29724,1181090
#    define HAVE_GETHOSTUUID HAVE_GETHOSTUUID29751,1181820
#define SQLITE_FSFLAGS_IS_MSDOS SQLITE_FSFLAGS_IS_MSDOS29775,1182210
# define SQLITE_UNIX_THREADS SQLITE_UNIX_THREADS29783,1182412
# define SQLITE_DEFAULT_FILE_PERMISSIONS SQLITE_DEFAULT_FILE_PERMISSIONS29790,1182545
# define SQLITE_DEFAULT_PROXYDIR_PERMISSIONS SQLITE_DEFAULT_PROXYDIR_PERMISSIONS29797,1182701
#define MAX_PATHNAME MAX_PATHNAME29803,1182799
#define SQLITE_MAX_SYMLINKS SQLITE_MAX_SYMLINKS29808,1182867
#define osGetpid(osGetpid29812,1182996
#define IS_LOCK_ERROR(IS_LOCK_ERROR29818,1183169
typedef struct unixShm unixShm;               /* Connection shared memory */unixShm29821,1183262
typedef struct unixShmNode unixShmNode;       /* Shared memory instance */unixShmNode29822,1183339
typedef struct unixInodeInfo unixInodeInfo;   /* An i-node */unixInodeInfo29823,1183414
typedef struct UnixUnusedFd UnixUnusedFd;     /* An unused file descriptor */UnixUnusedFd29824,1183476
struct UnixUnusedFd {UnixUnusedFd29832,1183828
  int fd;                   /* File descriptor to close */fd29833,1183850
  int flags;                /* Flags this file descriptor was opened with */flags29834,1183909
  UnixUnusedFd *pNext;      /* Next unused file descriptor on same file */pNext29835,1183986
typedef struct unixFile unixFile;unixFile29842,1184170
struct unixFile {unixFile29843,1184204
  sqlite3_io_methods const *pMethod;  /* Always the first entry */pMethod29844,1184222
  sqlite3_vfs *pVfs;                  /* The VFS that created this unixFile */pVfs29845,1184289
  unixInodeInfo *pInode;              /* Info about locks on this inode */pInode29846,1184368
  int h;                              /* The file descriptor */h29847,1184443
  unsigned char eFileLock;            /* The type of lock held on this fd */eFileLock29848,1184507
  unsigned short int ctrlFlags;       /* Behavioral bits.  UNIXFILE_* flags */ctrlFlags29849,1184584
  int lastErrno;                      /* The unix errno from last I/O error */lastErrno29850,1184663
  void *lockingContext;               /* Locking style specific state */lockingContext29851,1184742
  UnixUnusedFd *pUnused;              /* Pre-allocated UnixUnusedFd */pUnused29852,1184815
  const char *zPath;                  /* Name of the file */zPath29853,1184886
  unixShm *pShm;                      /* Shared memory segment information */pShm29854,1184947
  int szChunk;                        /* Configured by FCNTL_CHUNK_SIZE */szChunk29855,1185025
  int nFetchOut;                      /* Number of outstanding xFetch refs */nFetchOut29857,1185127
  sqlite3_int64 mmapSize;             /* Usable size of mapping at pMapRegion */mmapSize29858,1185205
  sqlite3_int64 mmapSizeActual;       /* Actual size of mapping at pMapRegion */mmapSizeActual29859,1185286
  sqlite3_int64 mmapSizeMax;          /* Configured FCNTL_MMAP_SIZE value */mmapSizeMax29860,1185367
  void *pMapRegion;                   /* Memory mapped region */pMapRegion29861,1185444
  int sectorSize;                     /* Device sector size */sectorSize29864,1185534
  int deviceCharacteristics;          /* Precomputed device characteristics */deviceCharacteristics29865,1185597
  int openFlags;                      /* The flags specified at open() */openFlags29868,1185715
  unsigned fsFlags;                   /* cached details from statfs() */fsFlags29871,1185850
  struct vxworksFileId *pId;          /* Unique file ID */pId29874,1185945
  unsigned char transCntrChng;   /* True if the transaction counter changed */transCntrChng29884,1186426
  unsigned char dbUpdate;        /* True if any part of database file changed */dbUpdate29885,1186505
  unsigned char inNormalWrite;   /* True if in a normal write operation */inNormalWrite29886,1186586
  char aPadding[32];aPadding29894,1186828
static pid_t randomnessPid = 0;randomnessPid29902,1187074
#define UNIXFILE_EXCL UNIXFILE_EXCL29907,1187167
#define UNIXFILE_RDONLY UNIXFILE_RDONLY29908,1187245
#define UNIXFILE_PERSIST_WAL UNIXFILE_PERSIST_WAL29909,1187313
# define UNIXFILE_DIRSYNC UNIXFILE_DIRSYNC29911,1187408
# define UNIXFILE_DIRSYNC UNIXFILE_DIRSYNC29913,1187480
#define UNIXFILE_PSOW UNIXFILE_PSOW29915,1187521
#define UNIXFILE_DELETE UNIXFILE_DELETE29916,1187598
#define UNIXFILE_URI UNIXFILE_URI29917,1187658
#define UNIXFILE_NOLOCK UNIXFILE_NOLOCK29918,1187739
#define _OS_COMMON_H__OS_COMMON_H_29945,1188686
#define SQLITE_HWTIME_HSQLITE_HWTIME_H29984,1189935
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime29997,1190332
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec30005,1190540
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime30016,1190755
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime30024,1190950
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime30048,1191692
static sqlite_uint64 g_start;g_start30057,1191983
static sqlite_uint64 g_elapsed;g_elapsed30058,1192013
#define TIMER_START TIMER_START30059,1192045
#define TIMER_END TIMER_END30060,1192095
#define TIMER_ELAPSED TIMER_ELAPSED30061,1192155
#define TIMER_STARTTIMER_START30063,1192197
#define TIMER_ENDTIMER_END30064,1192217
#define TIMER_ELAPSED TIMER_ELAPSED30065,1192235
#define SimulateIOErrorBenign(SimulateIOErrorBenign30081,1192835
#define SimulateIOError(SimulateIOError30082,1192896
static void local_ioerr(){local_ioerr30086,1193074
#define SimulateDiskfullError(SimulateDiskfullError30091,1193214
#define SimulateIOErrorBenign(SimulateIOErrorBenign30103,1193509
#define SimulateIOError(SimulateIOError30104,1193542
#define SimulateDiskfullError(SimulateDiskfullError30105,1193569
#define OpenCounter(OpenCounter30113,1193774
#define OpenCounter(OpenCounter30115,1193833
# define O_LARGEFILE O_LARGEFILE30127,1194177
# undef O_LARGEFILEO_LARGEFILE30130,1194233
# define O_LARGEFILE O_LARGEFILE30131,1194253
# define O_NOFOLLOW O_NOFOLLOW30134,1194302
# define O_BINARY O_BINARY30137,1194348
#define threadid threadid30145,1194502
#define threadid threadid30147,1194540
#  define HAVE_MREMAP HAVE_MREMAP30155,1194715
#  define HAVE_MREMAP HAVE_MREMAP30157,1194746
# define lseek lseek30166,1194958
static int posixOpen(const char *zFile, int flags, int mode){posixOpen30177,1195335
static struct unix_syscall {unix_syscall30191,1195804
  const char *zName;            /* Name of the system call */zName30192,1195833
  sqlite3_syscall_ptr pCurrent; /* Current value of the system call */pCurrent30193,1195895
  sqlite3_syscall_ptr pDefault; /* Default value */pDefault30194,1195966
#define osOpen osOpen30197,1196094
#define osClose osClose30200,1196226
#define osAccess osAccess30203,1196342
#define osGetcwd osGetcwd30206,1196470
#define osStat osStat30209,1196597
#define osFstat(osFstat30219,1196998
#define osFtruncate osFtruncate30226,1197232
#define osFcntl osFcntl30229,1197354
#define osRead osRead30232,1197478
#define osPread osPread30239,1197737
#define osPread64 osPread6430246,1197973
#define osWrite osWrite30249,1198113
#define osPwrite osPwrite30256,1198379
#define osPwrite64 osPwrite6430264,1198644
#define osFchmod osFchmod30268,1198819
#define osFallocate osFallocate30275,1199083
#define osUnlink osUnlink30278,1199217
#define osOpenDirectory osOpenDirectory30281,1199353
#define osMkdir osMkdir30284,1199491
#define osRmdir osRmdir30287,1199627
#define osFchown osFchown30294,1199857
#define osGeteuid osGeteuid30297,1199990
#define osMmap osMmap30304,1200246
#define osMunmap osMunmap30311,1200523
#define osMremap osMremap30318,1200801
#define osGetpagesize osGetpagesize30325,1201077
#define osReadlink osReadlink30332,1201304
#define osLstat osLstat30339,1201549
} aSyscall[] = {aSyscall30195,1196018
static int robustFchown(int fd, uid_t uid, gid_t gid){robustFchown30349,1201864
static int unixSetSystemCall(unixSetSystemCall30363,1202261
static sqlite3_syscall_ptr unixGetSystemCall(unixGetSystemCall30406,1203546
static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){unixNextSystemCall30425,1204073
# define SQLITE_MINIMUM_FILE_DESCRIPTOR SQLITE_MINIMUM_FILE_DESCRIPTOR30446,1204664
static int robust_open(const char *z, int f, mode_t m){robust_open30466,1205543
static void unixEnterMutex(void){unixEnterMutex30517,1206917
static void unixLeaveMutex(void){unixLeaveMutex30520,1207021
static int unixMutexHeld(void) {unixMutexHeld30524,1207145
static const char *azFileLock(int eFileLock){azFileLock30536,1207456
static int lockTrace(int fd, int op, struct flock *p){lockTrace30557,1208056
#undef osFcntlosFcntl30604,1209308
#define osFcntl osFcntl30605,1209323
static int robust_ftruncate(int h, sqlite3_int64 sz){robust_ftruncate30615,1209614
static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {sqliteErrorFromPosixError30640,1210532
struct vxworksFileId {vxworksFileId30682,1212053
  struct vxworksFileId *pNext;  /* Next in a list of them all */pNext30683,1212076
  int nRef;                     /* Number of references to this one */nRef30684,1212141
  int nName;                    /* Length of the zCanonicalName[] string */nName30685,1212212
  char *zCanonicalName;         /* Canonical filename */zCanonicalName30686,1212288
static struct vxworksFileId *vxworksFileList = 0;vxworksFileList30694,1212449
static int vxworksSimplifyName(char *z, int n){vxworksSimplifyName30709,1212893
static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){vxworksFindFileId30743,1213786
static void vxworksReleaseFileId(struct vxworksFileId *pId){vxworksReleaseFileId30785,1215186
struct unixFileId {unixFileId30897,1220752
  dev_t dev;                  /* Device number */dev30898,1220772
  struct vxworksFileId *pId;  /* Unique file ID for vxworks. */pId30900,1220837
  u64 ino;                   /* Inode number */ino30909,1221323
struct unixInodeInfo {unixInodeInfo30922,1221774
  struct unixFileId fileId;       /* The lookup key */fileId30923,1221797
  int nShared;                    /* Number of SHARED locks held */nShared30924,1221852
  unsigned char eFileLock;        /* One of SHARED_LOCK, RESERVED_LOCK etc. */eFileLock30925,1221920
  unsigned char bProcessLock;     /* An exclusive process lock is held */bProcessLock30926,1221999
  int nRef;                       /* Number of pointers to this structure */nRef30927,1222073
  unixShmNode *pShmNode;          /* Shared memory associated with this inode */pShmNode30928,1222150
  int nLock;                      /* Number of outstanding file locks */nLock30929,1222231
  UnixUnusedFd *pUnused;          /* Unused file descriptors to close */pUnused30930,1222304
  unixInodeInfo *pNext;           /* List of all unixInodeInfo objects */pNext30931,1222377
  unixInodeInfo *pPrev;           /*    .... doubly linked */pPrev30932,1222451
  unsigned long long sharedByte;  /* for AFP simulated shared lock */sharedByte30934,1222545
  sem_t *pSem;                    /* Named POSIX semaphore */pSem30937,1222637
  char aSemName[MAX_PATHNAME+2];  /* Name of that semaphore */aSemName30938,1222699
static unixInodeInfo *inodeList = 0;inodeList30945,1222820
#define unixLogError(unixLogError30963,1223519
static int unixLogErrorAtLine(unixLogErrorAtLine30964,1223586
static void robust_close(unixFile *pFile, int h, int lineno){robust_close31029,1226036
static void storeLastErrno(unixFile *pFile, int error){storeLastErrno31040,1226355
static void closePendingFds(unixFile *pFile){closePendingFds31047,1226526
static void releaseInodeInfo(unixFile *pFile){releaseInodeInfo31065,1226998
static int findInodeInfo(findInodeInfo31099,1227985
static int fileHasMoved(unixFile *pFile){fileHasMoved31182,1230695
static void verifyDbFile(unixFile *pFile){verifyDbFile31203,1231269
static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){unixCheckReservedLock31236,1232259
static int unixFileLock(unixFile *pFile, struct flock *pLock){unixFileLock31296,1234209
static int unixLock(sqlite3_file *id, int eFileLock){unixLock31346,1235711
static void setPendingFd(unixFile *pFile){setPendingFd31573,1243493
static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){posixUnlock31595,1244338
static int unixUnlock(sqlite3_file *id, int eFileLock){unixUnlock31755,1249753
static int closeUnixFile(sqlite3_file *id){closeUnixFile31777,1250483
static int unixClose(sqlite3_file *id){unixClose31812,1251265
static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){nolockCheckReservedLock31857,1253134
static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){nolockLock31862,1253274
static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){nolockUnlock31866,1253396
static int nolockClose(sqlite3_file *id) {nolockClose31874,1253546
#define DOTLOCK_SUFFIX DOTLOCK_SUFFIX31907,1254964
static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {dotlockCheckReservedLock31919,1255504
static int dotlockLock(sqlite3_file *id, int eFileLock) {dotlockLock31960,1256843
static int dotlockUnlock(sqlite3_file *id, int eFileLock) {dotlockUnlock32010,1258193
static int dotlockClose(sqlite3_file *id) {dotlockClose32053,1259286
static int robust_flock(int fd, int op){robust_flock32083,1260424
# define robust_flock(robust_flock32089,1260553
static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){flockCheckReservedLock32099,1260907
static int flockLock(sqlite3_file *id, int eFileLock) {flockLock32179,1263317
static int flockUnlock(sqlite3_file *id, int eFileLock) {flockUnlock32223,1264572
static int flockClose(sqlite3_file *id) {flockClose32257,1265397
static int semXCheckReservedLock(sqlite3_file *id, int *pResOut) {semXCheckReservedLock32286,1266540
static int semXLock(sqlite3_file *id, int eFileLock) {semXLock32353,1268597
static int semXUnlock(sqlite3_file *id, int eFileLock) {semXUnlock32386,1269472
static int semXClose(sqlite3_file *id) {semXClose32423,1270367
typedef struct afpLockingContext afpLockingContext;afpLockingContext32458,1271400
struct afpLockingContext {afpLockingContext32459,1271452
  int reserved;reserved32460,1271479
  const char *dbPath;             /* Name of the open file */dbPath32461,1271495
struct ByteRangeLockPB2ByteRangeLockPB232464,1271561
  unsigned long long offset;        /* offset to first byte to lock */offset32466,1271587
  unsigned long long length;        /* nbr of bytes to lock */length32467,1271658
  unsigned long long retRangeStart; /* nbr of 1st byte locked if successful */retRangeStart32468,1271721
  unsigned char unLockFlag;         /* 1 = unlock, 0 = lock */unLockFlag32469,1271800
  unsigned char startEndFlag;       /* 1=rel to end of fork, 0=rel to start */startEndFlag32470,1271863
  int fd;                           /* file desc to assoc this lock with */fd32471,1271942
#define afpfsByteRangeLock2FSCTL afpfsByteRangeLock2FSCTL32474,1272022
static int afpSetLock(afpSetLock32482,1272256
static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){afpCheckReservedLock32528,1273833
static int afpLock(sqlite3_file *id, int eFileLock){afpLock32598,1275912
static int afpUnlock(sqlite3_file *id, int eFileLock) {afpUnlock32780,1282118
static int afpClose(sqlite3_file *id) {afpClose32883,1285473
static int nfsUnlock(sqlite3_file *id, int eFileLock){nfsUnlock32925,1287048
static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){seekAndRead32961,1288570
static int unixRead(unixRead33010,1289863
static int seekAndWriteFd(seekAndWriteFd33069,1291549
static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){seekAndWrite33115,1292933
static int unixWrite(unixWrite33124,1293198
SQLITE_API int sqlite3_sync_count = 0;sqlite3_sync_count33209,1295663
SQLITE_API int sqlite3_fullsync_count = 0;sqlite3_fullsync_count33210,1295702
# define fdatasync fdatasync33220,1296091
# define HAVE_FULLFSYNC HAVE_FULLFSYNC33229,1296330
# define HAVE_FULLFSYNC HAVE_FULLFSYNC33231,1296362
static int full_fsync(int fd, int fullSync, int dataOnly){full_fsync33259,1297686
static int openDirectory(const char *zFilename, int *pFd){openDirectory33355,1300906
static int unixSync(sqlite3_file *id, int flags){unixSync33392,1302249
static int unixTruncate(sqlite3_file *id, i64 nByte){unixTruncate33442,1303787
static int unixFileSize(sqlite3_file *id, i64 *pSize){unixFileSize33492,1305390
static int fcntlSizeHint(unixFile *pFile, i64 nByte){fcntlSizeHint33530,1306530
static void unixModeBit(unixFile *pFile, unsigned char mask, int *pArg){unixModeBit33599,1308986
static int unixFileControl(sqlite3_file *id, int op, void *pArg){unixFileControl33615,1309355
static int unixSectorSize(sqlite3_file *NotUsed){unixSectorSize33711,1312298
static int unixSectorSize(sqlite3_file *id){unixSectorSize33723,1312566
static int unixDeviceCharacteristics(sqlite3_file *id){unixDeviceCharacteristics33810,1316621
static int unixGetpagesize(void){unixGetpagesize33831,1317160
struct unixShmNode {unixShmNode33874,1318558
  unixInodeInfo *pInode;     /* unixInodeInfo that owns this SHM node */pInode33875,1318579
  sqlite3_mutex *mutex;      /* Mutex to access this object */mutex33876,1318652
  char *zFilename;           /* Name of the mmapped file */zFilename33877,1318715
  int h;                     /* Open file descriptor */h33878,1318775
  int szRegion;              /* Size of shared-memory regions */szRegion33879,1318831
  u16 nRegion;               /* Size of array apRegion */nRegion33880,1318896
  u8 isReadonly;             /* True if read-only */isReadonly33881,1318954
  char **apRegion;           /* Array of mapped shared-memory regions */apRegion33882,1319007
  int nRef;                  /* Number of unixShm objects pointing to this */nRef33883,1319080
  unixShm *pFirst;           /* All unixShm objects pointing to this */pFirst33884,1319158
  u8 exclMask;               /* Mask of exclusive locks held */exclMask33886,1319250
  u8 sharedMask;             /* Mask of shared locks held */sharedMask33887,1319314
  u8 nextShmId;              /* Next available unixShm.id value */nextShmId33888,1319375
struct unixShm {unixShm33905,1319824
  unixShmNode *pShmNode;     /* The underlying unixShmNode object */pShmNode33906,1319841
  unixShm *pNext;            /* Next unixShm with the same unixShmNode */pNext33907,1319910
  u8 hasMutex;               /* True if holding the unixShmNode mutex */hasMutex33908,1319984
  u8 id;                     /* Id of this connection within its unixShmNode */id33909,1320057
  u16 sharedMask;            /* Mask of shared locks held */sharedMask33910,1320137
  u16 exclMask;              /* Mask of exclusive locks held */exclMask33911,1320198
#define UNIX_SHM_BASE UNIX_SHM_BASE33917,1320302
#define UNIX_SHM_DMS UNIX_SHM_DMS33918,1320382
static int unixShmSystemLock(unixShmSystemLock33926,1320627
static int unixShmRegionPerMap(void){unixShmRegionPerMap34005,1323120
static void unixShmPurge(unixFile *pFd){unixShmPurge34019,1323585
static int unixOpenSharedMemory(unixFile *pDbFd){unixOpenSharedMemory34079,1326233
static int unixShmMap(unixShmMap34228,1331688
static int unixShmLock(unixShmLock34366,1336441
static void unixShmBarrier(unixShmBarrier34478,1340342
static int unixShmUnmap(unixShmUnmap34494,1340851
# define unixShmMap unixShmMap34540,1342171
# define unixShmLock unixShmLock34541,1342197
# define unixShmBarrier unixShmBarrier34542,1342223
# define unixShmUnmap unixShmUnmap34543,1342249
static void unixUnmapfile(unixFile *pFd){unixUnmapfile34550,1342399
static void unixRemapfile(unixRemapfile34575,1343151
static int unixMapfile(unixFile *pFd, i64 nMap){unixMapfile34667,1346180
static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){unixFetch34704,1347363
static int unixUnfetch(sqlite3_file *fd, i64 iOff, void *p){unixUnfetch34735,1348337
#define IOMETHODS(IOMETHODS34803,1350714
static const sqlite3_io_methods *autolockIoFinderImpl(autolockIoFinderImpl34955,1357901
  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;autolockIoFinder35009,1359516
static const sqlite3_io_methods *vxworksIoFinderImpl(vxworksIoFinderImpl35019,1359873
  *(*const vxworksIoFinder)(const char*,unixFile*) = vxworksIoFinderImpl;vxworksIoFinder35045,1360620
typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);finder_type35052,1360793
static int fillInUnixFile(fillInUnixFile35065,1361195
static const char *unixTempFileDir(void){unixTempFileDir35252,1367234
static int unixGetTempname(int nBuf, char *zBuf){unixGetTempname35286,1367988
static UnixUnusedFd *findReusableFd(const char *zPath, int flags){findReusableFd35336,1369790
static int getFileMode(getFileMode35381,1371396
static int findCreateFileMode(findCreateFileMode35420,1373025
static int unixOpen(unixOpen35502,1376016
static int unixDelete(unixDelete35758,1385014
static int unixAccess(unixAccess35806,1386333
static int mkFullPathname(mkFullPathname35832,1387124
static int unixFullPathname(unixFullPathname35865,1388187
static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){unixDlOpen35955,1390801
static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){unixDlError35967,1391266
static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){unixDlSym35977,1391516
static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){unixDlClose36000,1392596
  #define unixDlOpen unixDlOpen36005,1392763
  #define unixDlError unixDlError36006,1392787
  #define unixDlSym unixDlSym36007,1392811
  #define unixDlClose unixDlClose36008,1392835
static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){unixRandomness36014,1392937
static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){unixSleep36061,1394685
SQLITE_API int sqlite3_current_time = 0;  /* Fake system time in seconds since 1970. */sqlite3_current_time36088,1395410
static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){unixCurrentTimeInt6436101,1395945
static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){unixCurrentTime36133,1396962
# define unixCurrentTime unixCurrentTime36142,1397171
static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){unixGetLastError36151,1397419
typedef struct proxyLockingContext proxyLockingContext;proxyLockingContext36322,1404807
struct proxyLockingContext {proxyLockingContext36323,1404863
  unixFile *conchFile;         /* Open conch file */conchFile36324,1404892
  char *conchFilePath;         /* Name of the conch file */conchFilePath36325,1404945
  unixFile *lockProxy;         /* Open proxy lock file */lockProxy36326,1405005
  char *lockProxyPath;         /* Name of the proxy lock file */lockProxyPath36327,1405063
  char *dbPath;                /* Name of the open file */dbPath36328,1405128
  int conchHeld;               /* 1 if the conch is held, -1 if lockless */conchHeld36329,1405187
  int nFails;                  /* Number of conch taking failures */nFails36330,1405263
  void *oldLockingContext;     /* Original lockingcontext to restore on close */oldLockingContext36331,1405332
  sqlite3_io_methods const *pOldMethod;     /* Original I/O methods for close */pOldMethod36332,1405413
static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){proxyGetLockPath36340,1405678
static int proxyCreateLockPath(const char *lockPath){proxyCreateLockPath36381,1406725
static int proxyCreateUnixFile(proxyCreateUnixFile36421,1408076
SQLITE_API int sqlite3_hostid_num = 0;sqlite3_hostid_num36505,1410362
#define PROXY_HOSTIDLEN PROXY_HOSTIDLEN36508,1410409
static int proxyGetHostID(unsigned char *pHostID, int *pError){proxyGetHostID36518,1410736
#define PROXY_CONCHVERSION PROXY_CONCHVERSION36547,1411464
#define PROXY_HEADERLEN PROXY_HEADERLEN36548,1411538
#define PROXY_PATHINDEX PROXY_PATHINDEX36549,1411600
#define PROXY_MAXCONCHLEN PROXY_MAXCONCHLEN36550,1411661
static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){proxyBreakConchLock36558,1412008
static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){proxyConchLock36618,1413975
static int proxyTakeConch(unixFile *pFile){proxyTakeConch36696,1416699
static int proxyReleaseConch(unixFile *pFile){proxyReleaseConch36918,1424937
static int proxyCreateConchPathname(char *dbPath, char **pConchPath){proxyCreateConchPathname36948,1426102
static int switchLockProxyPath(unixFile *pFile, const char *path) {switchLockProxyPath36985,1427146
static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){proxyGetDbPathForUnixFile37021,1428221
static int proxyTransformUnixFile(unixFile *pFile, const char *path) {proxyTransformUnixFile37052,1429468
static int proxyFileControl(sqlite3_file *id, int op, void *pArg){proxyFileControl37139,1432159
static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {proxyCheckReservedLock37212,1434644
static int proxyLock(sqlite3_file *id, int eFileLock) {proxyLock37251,1435922
static int proxyUnlock(sqlite3_file *id, int eFileLock) {proxyUnlock37275,1436659
static int proxyClose(sqlite3_file *id) {proxyClose37294,1437189
SQLITE_API int sqlite3_os_init(void){ sqlite3_os_init37356,1439310
  #define UNIXVFS(UNIXVFS37377,1440448
SQLITE_API int sqlite3_os_end(void){ sqlite3_os_end37455,1443592
#define _OS_COMMON_H__OS_COMMON_H_37505,1445266
#define SQLITE_HWTIME_HSQLITE_HWTIME_H37544,1446515
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime37557,1446912
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec37565,1447120
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime37576,1447335
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime37584,1447530
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime37608,1448272
static sqlite_uint64 g_start;g_start37617,1448563
static sqlite_uint64 g_elapsed;g_elapsed37618,1448593
#define TIMER_START TIMER_START37619,1448625
#define TIMER_END TIMER_END37620,1448675
#define TIMER_ELAPSED TIMER_ELAPSED37621,1448735
#define TIMER_STARTTIMER_START37623,1448777
#define TIMER_ENDTIMER_END37624,1448797
#define TIMER_ELAPSED TIMER_ELAPSED37625,1448815
#define SimulateIOErrorBenign(SimulateIOErrorBenign37641,1449415
#define SimulateIOError(SimulateIOError37642,1449476
static void local_ioerr(){local_ioerr37646,1449654
#define SimulateDiskfullError(SimulateDiskfullError37651,1449794
#define SimulateIOErrorBenign(SimulateIOErrorBenign37663,1450089
#define SimulateIOError(SimulateIOError37664,1450122
#define SimulateDiskfullError(SimulateDiskfullError37665,1450149
#define OpenCounter(OpenCounter37673,1450354
#define OpenCounter(OpenCounter37675,1450413
#  define SQLITE_WIN32_HAS_ANSISQLITE_WIN32_HAS_ANSI37707,1451394
#  define SQLITE_WIN32_HAS_WIDESQLITE_WIN32_HAS_WIDE37716,1451649
#  define NTDDI_WIN8 NTDDI_WIN837732,1452042
#  define NTDDI_WINBLUE NTDDI_WINBLUE37736,1452127
#  define NTDDI_WINTHRESHOLD NTDDI_WINTHRESHOLD37740,1452217
#    define SQLITE_WIN32_GETVERSIONEX SQLITE_WIN32_GETVERSIONEX37749,1452519
#    define SQLITE_WIN32_GETVERSIONEX SQLITE_WIN32_GETVERSIONEX37751,1452606
#    define SQLITE_WIN32_CREATEFILEMAPPINGA SQLITE_WIN32_CREATEFILEMAPPINGA37762,1453029
#    define SQLITE_WIN32_CREATEFILEMAPPINGA SQLITE_WIN32_CREATEFILEMAPPINGA37764,1453085
#  define MAX_PATH MAX_PATH37772,1453246
#  define SQLITE_WIN32_MAX_PATH_CHARS SQLITE_WIN32_MAX_PATH_CHARS37780,1453429
#  define UNICODE_STRING_MAX_CHARS UNICODE_STRING_MAX_CHARS37787,1453599
#  define SQLITE_WINNT_MAX_PATH_CHARS SQLITE_WINNT_MAX_PATH_CHARS37795,1453800
#  define SQLITE_WIN32_MAX_PATH_BYTES SQLITE_WIN32_MAX_PATH_BYTES37804,1454102
#  define SQLITE_WINNT_MAX_PATH_BYTES SQLITE_WINNT_MAX_PATH_BYTES37812,1454343
#  define SQLITE_WIN32_MAX_ERRMSG_CHARS SQLITE_WIN32_MAX_ERRMSG_CHARS37820,1454565
#  define winIsDirSep(winIsDirSep37828,1454730
#  define UNUSED_VARIABLE_VALUE(UNUSED_VARIABLE_VALUE37836,1454988
#  define winGetDirSep(winGetDirSep37843,1455146
# define INVALID_FILE_ATTRIBUTES INVALID_FILE_ATTRIBUTES37888,1456649
# define FILE_FLAG_MASK FILE_FLAG_MASK37892,1456725
# define FILE_ATTRIBUTE_MASK FILE_ATTRIBUTE_MASK37896,1456807
typedef struct winShm winShm;           /* A connection to shared-memory */winShm37901,1456937
typedef struct winShmNode winShmNode;   /* A region of shared-memory */winShmNode37902,1457013
typedef struct winceLock {winceLock37910,1457218
  int nReaders;       /* Number of reader locks obtained */nReaders37911,1457245
  BOOL bPending;      /* Indicates a pending lock has been obtained */bPending37912,1457305
  BOOL bReserved;     /* Indicates a reserved lock has been obtained */bReserved37913,1457376
  BOOL bExclusive;    /* Indicates an exclusive lock has been obtained */bExclusive37914,1457448
} winceLock;winceLock37915,1457522
typedef struct winFile winFile;winFile37922,1457649
struct winFile {winFile37923,1457681
  const sqlite3_io_methods *pMethod; /*** Must be first ***/pMethod37924,1457698
  sqlite3_vfs *pVfs;      /* The VFS used to open this file */pVfs37925,1457759
  HANDLE h;               /* Handle for accessing the file */h37926,1457822
  u8 locktype;            /* Type of lock currently held on this file */locktype37927,1457884
  short sharedLockByte;   /* Randomly chosen byte used as a shared lock */sharedLockByte37928,1457957
  u8 ctrlFlags;           /* Flags.  See WINFILE_* below */ctrlFlags37929,1458032
  DWORD lastErrno;        /* The Windows errno from the last I/O error */lastErrno37930,1458092
  winShm *pShm;           /* Instance of shared memory on this file */pShm37932,1458190
  const char *zPath;      /* Full pathname of this file */zPath37934,1458268
  int szChunk;            /* Chunk size configured by FCNTL_CHUNK_SIZE */szChunk37935,1458327
  LPWSTR zDeleteOnClose;  /* Name of file to delete when closing */zDeleteOnClose37937,1458421
  HANDLE hMutex;          /* Mutex used to control access to shared lock */hMutex37938,1458489
  HANDLE hShared;         /* Shared memory segment used for locking */hShared37939,1458565
  winceLock local;        /* Locks obtained by this instance of winFile */local37940,1458636
  winceLock *shared;      /* Global shared lock memory for the file  */shared37941,1458711
  int nFetchOut;                /* Number of outstanding xFetch references */nFetchOut37944,1458817
  HANDLE hMap;                  /* Handle for accessing memory mapping */hMap37945,1458895
  void *pMapRegion;             /* Area memory mapped */pMapRegion37946,1458969
  sqlite3_int64 mmapSize;       /* Usable size of mapped region */mmapSize37947,1459026
  sqlite3_int64 mmapSizeActual; /* Actual size of mapped region */mmapSizeActual37948,1459093
  sqlite3_int64 mmapSizeMax;    /* Configured FCNTL_MMAP_SIZE value */mmapSizeMax37949,1459160
typedef struct winVfsAppData winVfsAppData;winVfsAppData37957,1459349
struct winVfsAppData {winVfsAppData37958,1459393
  const sqlite3_io_methods *pMethod; /* The file I/O methods to use. */pMethod37959,1459416
  void *pAppData;                    /* The extra pAppData, if any. */pAppData37960,1459488
  BOOL bNoLock;                      /* Non-zero if locking is disabled. */bNoLock37961,1459559
#define WINFILE_RDONLY WINFILE_RDONLY37967,1459685
#define WINFILE_PERSIST_WAL WINFILE_PERSIST_WAL37968,1459754
#define WINFILE_PSOW WINFILE_PSOW37969,1459819
#  define SQLITE_WIN32_DBG_BUF_SIZE SQLITE_WIN32_DBG_BUF_SIZE37975,1460002
#  define SQLITE_WIN32_DATA_DIRECTORY_TYPE SQLITE_WIN32_DATA_DIRECTORY_TYPE37983,1460234
#  define SQLITE_WIN32_TEMP_DIRECTORY_TYPE SQLITE_WIN32_TEMP_DIRECTORY_TYPE37991,1460452
#  define SQLITE_WIN32_HEAP_CREATE SQLITE_WIN32_HEAP_CREATE38015,1461567
#  define SQLITE_WIN32_HEAP_MAX_INIT_SIZE SQLITE_WIN32_HEAP_MAX_INIT_SIZE38023,1461757
#  define SQLITE_WIN32_HEAP_INIT_EXTRA SQLITE_WIN32_HEAP_INIT_EXTRA38031,1461979
#  define SQLITE_WIN32_MAX_CACHE_SIZE SQLITE_WIN32_MAX_CACHE_SIZE38040,1462252
#    define SQLITE_WIN32_CACHE_SIZE SQLITE_WIN32_CACHE_SIZE38051,1462682
#    define SQLITE_WIN32_CACHE_SIZE SQLITE_WIN32_CACHE_SIZE38053,1462758
#  undef SQLITE_WIN32_CACHE_SIZESQLITE_WIN32_CACHE_SIZE38063,1463115
#  define SQLITE_WIN32_CACHE_SIZE SQLITE_WIN32_CACHE_SIZE38064,1463148
#  define SQLITE_WIN32_HEAP_INIT_SIZE SQLITE_WIN32_HEAP_INIT_SIZE38071,1463319
#  define SQLITE_WIN32_HEAP_MAX_SIZE SQLITE_WIN32_HEAP_MAX_SIZE38080,1463658
#  define SQLITE_WIN32_HEAP_FLAGS SQLITE_WIN32_HEAP_FLAGS38088,1463861
typedef struct winMemData winMemData;winMemData38096,1464037
struct winMemData {winMemData38097,1464075
  u32 magic1;   /* Magic number to detect structure corruption. */magic138099,1464110
  HANDLE hHeap; /* The handle to our heap. */hHeap38101,1464184
  BOOL bOwned;  /* Do we own the heap (i.e. destroy it on shutdown)? */bOwned38102,1464230
  u32 magic2;   /* Magic number to detect structure corruption. */magic238104,1464317
#define WINMEM_MAGIC1 WINMEM_MAGIC138109,1464410
#define WINMEM_MAGIC2 WINMEM_MAGIC238110,1464447
static struct winMemData win_mem_data = {win_mem_data38113,1464492
#define winMemAssertMagic1(winMemAssertMagic138124,1464645
#define winMemAssertMagic2(winMemAssertMagic238125,1464719
#define winMemAssertMagic(winMemAssertMagic38126,1464793
#define winMemAssertMagic(winMemAssertMagic38128,1464872
#define winMemGetDataPtr(winMemGetDataPtr38131,1464908
#define winMemGetHeap(winMemGetHeap38132,1464950
#define winMemGetOwned(winMemGetOwned38133,1464997
SQLITE_API LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;sqlite3_os_type38159,1465841
static LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;sqlite3_os_type38161,1465906
#  define SYSCALL SYSCALL38165,1465985
#  define osAreFileApisANSI(osAreFileApisANSI38173,1466136
static struct win_syscall {win_syscall38182,1466447
  const char *zName;            /* Name of the system call */zName38183,1466475
  sqlite3_syscall_ptr pCurrent; /* Current value of the system call */pCurrent38184,1466537
  sqlite3_syscall_ptr pDefault; /* Default value */pDefault38185,1466608
#define osAreFileApisANSI osAreFileApisANSI38194,1466898
#define osCharLowerW osCharLowerW38203,1467184
#define osCharUpperW osCharUpperW38211,1467462
#define osCloseHandle osCloseHandle38215,1467603
#define osCreateFileA osCreateFileA38223,1467861
#define osCreateFileW osCreateFileW38232,1468205
#define osCreateFileMappingA osCreateFileMappingA38243,1468662
#define osCreateFileMappingW osCreateFileMappingW38253,1469095
#define osCreateMutexW osCreateMutexW38262,1469441
#define osDeleteFileA osDeleteFileA38271,1469741
#define osDeleteFileW osDeleteFileW38279,1469999
#define osFileTimeToLocalFileTime osFileTimeToLocalFileTime38287,1470244
#define osFileTimeToSystemTime osFileTimeToSystemTime38296,1470531
#define osFlushFileBuffers osFlushFileBuffers38301,1470714
#define osFormatMessageA osFormatMessageA38309,1470978
#define osFormatMessageW osFormatMessageW38318,1471292
#define osFreeLibrary osFreeLibrary38327,1471613
#define osGetCurrentProcessId osGetCurrentProcessId38331,1471755
#define osGetDiskFreeSpaceA osGetDiskFreeSpaceA38339,1472041
#define osGetDiskFreeSpaceW osGetDiskFreeSpaceW38348,1472389
#define osGetFileAttributesA osGetFileAttributesA38357,1472698
#define osGetFileAttributesW osGetFileAttributesW38365,1472985
#define osGetFileAttributesExW osGetFileAttributesExW38373,1473253
#define osGetFileSize osGetFileSize38382,1473549
#define osGetFullPathNameA osGetFullPathNameA38390,1473837
#define osGetFullPathNameW osGetFullPathNameW38399,1474172
#define osGetLastError osGetLastError38404,1474352
#define osGetProcAddressA osGetProcAddressA38419,1474914
#define osGetSystemInfo osGetSystemInfo38428,1475185
#define osGetSystemTime osGetSystemTime38432,1475335
#define osGetSystemTimeAsFileTime osGetSystemTimeAsFileTime38440,1475588
#define osGetTempPathA osGetTempPathA38449,1475874
#define osGetTempPathW osGetTempPathW38457,1476160
#define osGetTickCount osGetTickCount38465,1476413
#define osGetVersionExA osGetVersionExA38473,1476701
#define osGetVersionExW osGetVersionExW38483,1477042
#define osHeapAlloc osHeapAlloc38488,1477206
#define osHeapCreate osHeapCreate38497,1477475
#define osHeapDestroy osHeapDestroy38506,1477745
#define osHeapFree osHeapFree38510,1477886
#define osHeapReAlloc osHeapReAlloc38514,1478037
#define osHeapSize osHeapSize38519,1478211
#define osHeapValidate osHeapValidate38528,1478480
#define osHeapCompact osHeapCompact38537,1478771
#define osLoadLibraryA osLoadLibraryA38545,1479076
#define osLoadLibraryW osLoadLibraryW38554,1479409
#define osLocalFree osLocalFree38562,1479659
#define osLockFile osLockFile38571,1479943
#define osLockFileEx osLockFileEx38582,1480248
#define osMapViewOfFile osMapViewOfFile38593,1480635
#define osMultiByteToWideChar osMultiByteToWideChar38598,1480816
#define osQueryPerformanceCounter osQueryPerformanceCounter38603,1481001
#define osReadFile osReadFile38608,1481173
#define osSetEndOfFile osSetEndOfFile38613,1481356
#define osSetFilePointer osSetFilePointer38621,1481602
#define osSleep osSleep38630,1481879
#define osSystemTimeToFileTime osSystemTimeToFileTime38634,1482013
#define osUnlockFile osUnlockFile38644,1482341
#define osUnlockFileEx osUnlockFileEx38654,1482627
#define osUnmapViewOfFile osUnmapViewOfFile38663,1482969
#define osWideCharToMultiByte osWideCharToMultiByte38667,1483115
#define osWriteFile osWriteFile38672,1483314
#define osCreateEventExW osCreateEventExW38681,1483602
#define osWaitForSingleObject osWaitForSingleObject38690,1483898
#define osWaitForSingleObjectEx osWaitForSingleObjectEx38699,1484169
#define osSetFilePointerEx osSetFilePointerEx38708,1484446
#define osGetFileInformationByHandleEx osGetFileInformationByHandleEx38717,1484751
#define osMapViewOfFileFromApp osMapViewOfFileFromApp38726,1485119
#define osCreateFile2 osCreateFile238735,1485406
#define osLoadPackagedLibrary osLoadPackagedLibrary38744,1485756
#define osGetTickCount64 osGetTickCount6438753,1486029
#define osGetNativeSystemInfo osGetNativeSystemInfo38761,1486279
#define osOutputDebugStringA osOutputDebugStringA38770,1486564
#define osOutputDebugStringW osOutputDebugStringW38778,1486830
#define osGetProcessHeap osGetProcessHeap38782,1486979
#define osCreateFileMappingFromApp osCreateFileMappingFromApp38790,1487285
#define osInterlockedCompareExchange osInterlockedCompareExchange38801,1487760
#define osUuidCreate osUuidCreate38815,1488303
#define osUuidCreateSequential osUuidCreateSequential38823,1488600
#define osFlushViewOfFile osFlushViewOfFile38832,1488906
} aSyscall[] = {aSyscall38186,1466660
static int winSetSystemCall(winSetSystemCall38843,1489286
static sqlite3_syscall_ptr winGetSystemCall(winGetSystemCall38886,1490570
static const char *winNextSystemCall(sqlite3_vfs *p, const char *zName){winNextSystemCall38905,1491096
SQLITE_API int sqlite3_win32_compact_heap(LPUINT pnLargest){sqlite3_win32_compact_heap38928,1491845
SQLITE_API int sqlite3_win32_reset_heap(){sqlite3_win32_reset_heap38968,1493198
SQLITE_API void sqlite3_win32_write_debug(const char *zBuf, int nBuf){sqlite3_win32_write_debug39013,1494849
static HANDLE sleepObj = NULL;sleepObj39056,1496164
SQLITE_API void sqlite3_win32_sleep(DWORD milliseconds){sqlite3_win32_sleep39059,1496203
SQLITE_PRIVATE DWORD sqlite3Win32Wait(HANDLE hObject){sqlite3Win32Wait39074,1496658
# define osIsNT(osIsNT39095,1497425
# define osIsNT(osIsNT39097,1497524
# define osIsNT(osIsNT39099,1497585
# define osIsNT(osIsNT39101,1497614
SQLITE_API int sqlite3_win32_is_nt(void){sqlite3_win32_is_nt39108,1497797
static void *winMemMalloc(int nBytes){winMemMalloc39147,1498986
static void winMemFree(void *pPrior){winMemFree39170,1499578
static void *winMemRealloc(void *pPrior, int nBytes){winMemRealloc39190,1500211
static int winMemSize(void *p){winMemSize39218,1501021
static int winMemRoundup(int n){winMemRoundup39242,1501658
static int winMemInit(void *pAppData){winMemInit39249,1501739
static void winMemShutdown(void *pAppData){winMemShutdown39298,1503374
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetWin32(void){sqlite3MemGetWin3239329,1504451
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault39343,1504747
static LPWSTR winUtf8ToUnicode(const char *zText){winUtf8ToUnicode39353,1505022
static char *winUnicodeToUtf8(LPCWSTR zWideText){winUnicodeToUtf839379,1505632
static LPWSTR winMbcsToUnicode(const char *zText, int useAnsi){winMbcsToUnicode39406,1506255
static char *winUnicodeToMbcs(LPCWSTR zWideText, int useAnsi){winUnicodeToMbcs39435,1507032
static char *winMbcsToUtf8(const char *zText, int useAnsi){winMbcsToUtf839462,1507683
static char *winUtf8ToMbcs(const char *zText, int useAnsi){winUtf8ToMbcs39480,1508100
SQLITE_API LPWSTR sqlite3_win32_utf8_to_unicode(const char *zText){sqlite3_win32_utf8_to_unicode39496,1508447
SQLITE_API char *sqlite3_win32_unicode_to_utf8(LPCWSTR zWideText){sqlite3_win32_unicode_to_utf839512,1508800
SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zText){sqlite3_win32_mbcs_to_utf839528,1509157
SQLITE_API char *sqlite3_win32_mbcs_to_utf8_v2(const char *zText, int useAnsi){sqlite3_win32_mbcs_to_utf8_v239544,1509521
SQLITE_API char *sqlite3_win32_utf8_to_mbcs(const char *zText){sqlite3_win32_utf8_to_mbcs39560,1509889
SQLITE_API char *sqlite3_win32_utf8_to_mbcs_v2(const char *zText, int useAnsi){sqlite3_win32_utf8_to_mbcs_v239576,1510253
SQLITE_API int sqlite3_win32_set_directory(DWORD type, LPCWSTR zValue){sqlite3_win32_set_directory39596,1510891
static int winGetLastErrorMsg(DWORD lastErrno, int nBuf, char *zBuf){winGetLastErrorMsg39631,1511945
#define winLogError(winLogError39721,1515073
static int winLogErrorAtLine(winLogErrorAtLine39722,1515140
# define SQLITE_WIN32_IOERR_RETRY SQLITE_WIN32_IOERR_RETRY39753,1516267
# define SQLITE_WIN32_IOERR_RETRY_DELAY SQLITE_WIN32_IOERR_RETRY_DELAY39756,1516350
static int winIoerrRetry = SQLITE_WIN32_IOERR_RETRY;winIoerrRetry39758,1516400
static int winIoerrRetryDelay = SQLITE_WIN32_IOERR_RETRY_DELAY;winIoerrRetryDelay39759,1516453
#define winIoerrCanRetry1(winIoerrCanRetry139778,1517487
static int winRetryIoerr(int *pnRetry, DWORD *pError){winRetryIoerr39792,1518148
static void winLogIoerr(int nRetry, int lineno){winLogIoerr39821,1518706
struct tm *__cdecl localtime(const time_t *t)localtime39841,1519316
#define HANDLE_TO_WINFILE(HANDLE_TO_WINFILE39868,1520023
static void winceMutexAcquire(HANDLE h){winceMutexAcquire39873,1520142
#define winceMutexRelease(winceMutexRelease39882,1520378
static int winceCreateLock(const char *zFilename, winFile *pFile){winceCreateLock39888,1520517
static void winceDestroyLock(winFile *pFile){winceDestroyLock39982,1523343
static BOOL winceLockFile(winceLockFile40016,1524266
static BOOL winceUnlockFile(winceUnlockFile40082,1526035
static BOOL winLockFile(winLockFile40151,1527909
static BOOL winUnlockFile(winUnlockFile40183,1528675
# define INVALID_SET_FILE_POINTER INVALID_SET_FILE_POINTER40220,1529753
static int winSeekFile(winFile *pFile, sqlite3_int64 iOffset){winSeekFile40228,1530009
#define MX_CLOSE_ATTEMPT MX_CLOSE_ATTEMPT40300,1532609
static int winClose(sqlite3_file *id){winClose40301,1532636
#define WINCE_DELETION_ATTEMPTS WINCE_DELETION_ATTEMPTS40322,1533229
static int winRead(winRead40357,1534264
static int winWrite(winWrite40437,1537356
static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){winTruncate40546,1541297
SQLITE_API int sqlite3_sync_count = 0;sqlite3_sync_count40596,1543220
SQLITE_API int sqlite3_fullsync_count = 0;sqlite3_fullsync_count40597,1543259
static int winSync(sqlite3_file *id, int flags){winSync40603,1543384
static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){winFileSize40688,1545940
# define LOCKFILE_FAIL_IMMEDIATELY LOCKFILE_FAIL_IMMEDIATELY40734,1547297
# define LOCKFILE_EXCLUSIVE_LOCK LOCKFILE_EXCLUSIVE_LOCK40738,1547374
# define SQLITE_LOCKFILE_FLAGS SQLITE_LOCKFILE_FLAGS40749,1547834
# define SQLITE_LOCKFILEEX_FLAGS SQLITE_LOCKFILEEX_FLAGS40758,1548140
static int winGetReadLock(winFile *pFile){winGetReadLock40766,1548333
static int winUnlockReadLock(winFile *pFile){winUnlockReadLock40801,1549317
static int winLock(sqlite3_file *id, int locktype){winLock40848,1550936
static int winCheckReservedLock(sqlite3_file *id, int *pResOut){winCheckReservedLock40991,1555502
static int winUnlock(sqlite3_file *id, int locktype){winUnlock41027,1556736
static int winNolockLock(sqlite3_file *id, int locktype){winNolockLock41077,1558749
static int winNolockCheckReservedLock(sqlite3_file *id, int *pResOut){winNolockCheckReservedLock41083,1558884
static int winNolockUnlock(sqlite3_file *id, int locktype){winNolockUnlock41089,1559031
static void winModeBit(winFile *pFile, unsigned char mask, int *pArg){winModeBit41104,1559558
static int winFileControl(sqlite3_file *id, int op, void *pArg){winFileControl41122,1560054
static int winSectorSize(sqlite3_file *id){winSectorSize41249,1564141
static int winDeviceCharacteristics(sqlite3_file *id){winDeviceCharacteristics41257,1564289
static SYSTEM_INFO winSysInfo;winSysInfo41269,1564690
static void winShmEnterMutex(void){winShmEnterMutex41286,1565204
static void winShmLeaveMutex(void){winShmLeaveMutex41289,1565310
static int winShmMutexHeld(void) {winShmMutexHeld41293,1565431
struct winShmNode {winShmNode41321,1566303
  sqlite3_mutex *mutex;      /* Mutex to access this object */mutex41322,1566323
  char *zFilename;           /* Name of the file */zFilename41323,1566386
  winFile hFile;             /* File handle from winOpen */hFile41324,1566438
  int szRegion;              /* Size of shared-memory regions */szRegion41326,1566499
  int nRegion;               /* Size of array apRegion */nRegion41327,1566564
  struct ShmRegion {ShmRegion41328,1566622
    HANDLE hMap;             /* File handle from CreateFileMapping */hMap41329,1566643
    void *pMap;pMap41330,1566713
  } *aRegion;aRegion41331,1566729
  DWORD lastErrno;           /* The Windows errno from the last I/O error */lastErrno41332,1566743
  int nRef;                  /* Number of winShm objects pointing to this */nRef41334,1566821
  winShm *pFirst;            /* All winShm objects pointing to this */pFirst41335,1566898
  winShmNode *pNext;         /* Next in list of all winShmNode objects */pNext41336,1566969
  u8 nextShmId;              /* Next available winShm.id value */nextShmId41338,1567102
static winShmNode *winShmNodeList = 0;winShmNodeList41347,1567307
struct winShm {winShm41362,1567721
  winShmNode *pShmNode;      /* The underlying winShmNode object */pShmNode41363,1567737
  winShm *pNext;             /* Next winShm with the same winShmNode */pNext41364,1567805
  u8 hasMutex;               /* True if holding the winShmNode mutex */hasMutex41365,1567877
  u16 sharedMask;            /* Mask of shared locks held */sharedMask41366,1567949
  u16 exclMask;              /* Mask of exclusive locks held */exclMask41367,1568010
  u8 id;                     /* Id of this connection with its winShmNode */id41369,1568133
#define WIN_SHM_BASE WIN_SHM_BASE41376,1568257
#define WIN_SHM_DMS WIN_SHM_DMS41377,1568335
#define WINSHM_UNLCK WINSHM_UNLCK41382,1568478
#define WINSHM_RDLCK WINSHM_RDLCK41383,1568502
#define WINSHM_WRLCK WINSHM_WRLCK41384,1568526
static int winShmSystemLock(winShmSystemLock41385,1568550
static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){winShmPurge41433,1570251
static int winOpenSharedMemory(winFile *pDbFd){winOpenSharedMemory41482,1571921
static int winShmUnmap(winShmUnmap41595,1575902
static int winShmLock(winShmLock41636,1577072
static void winShmBarrier(winShmBarrier41745,1580811
static int winShmMap(winShmMap41773,1582024
# define winShmMap winShmMap41903,1586584
# define winShmLock winShmLock41904,1586609
# define winShmBarrier winShmBarrier41905,1586634
# define winShmUnmap winShmUnmap41906,1586659
static int winUnmapfile(winFile *pFile){winUnmapfile41913,1586817
static int winMapfile(winFile *pFd, sqlite3_int64 nByte){winMapfile41963,1589007
static int winFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){winFetch42062,1592564
static int winUnfetch(sqlite3_file *fd, i64 iOff, void *p){winUnfetch42103,1593917
static const sqlite3_io_methods winIoMethod = {winIoMethod42146,1595317
static const sqlite3_io_methods winIoNolockMethod = {winIoNolockMethod42172,1596446
static winVfsAppData winAppData = {winAppData42194,1597455
static winVfsAppData winNolockAppData = {winNolockAppData42200,1597604
static char *winConvertToUtf8Filename(const void *zFilename){winConvertToUtf8Filename42219,1598240
static void *winConvertFromUtf8Filename(const char *zFilename){winConvertFromUtf8Filename42240,1598785
static int winMakeEndInDirSep(int nBuf, char *zBuf){winMakeEndInDirSep42259,1599280
static int winGetTempname(sqlite3_vfs *pVfs, char **pzBuf){winGetTempname42279,1599757
static int winIsDir(const void *zConverted){winIsDir42510,1607552
static int winOpen(winOpen42537,1608255
static int winDelete(winDelete42834,1618325
static int winAccess(winAccess42942,1621366
static BOOL winIsDriveLetterAndColon(winIsDriveLetterAndColon43020,1623784
static BOOL winIsVerbatimPathname(winIsVerbatimPathname43032,1624216
static int winFullPathname(winFullPathname43068,1625400
static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){winDlOpen43252,1631956
static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){winDlError43293,1633080
static void (*winDlSym(sqlite3_vfs *pVfs,void *pH,const char *zSym))(void){winDlSym43297,1633231
static void winDlClose(sqlite3_vfs *pVfs, void *pHandle){winDlClose43305,1633525
  #define winDlOpen winDlOpen43311,1633751
  #define winDlError winDlError43312,1633774
  #define winDlSym winDlSym43313,1633797
  #define winDlClose winDlClose43314,1633820
typedef struct EntropyGatherer EntropyGatherer;EntropyGatherer43318,1633904
struct EntropyGatherer {EntropyGatherer43319,1633952
  unsigned char *a;   /* Gather entropy into this buffer */a43320,1633977
  int na;             /* Size of a[] in bytes */na43321,1634037
  int i;              /* XOR next input into a[i] */i43322,1634086
  int nXor;           /* Number of XOR operations done */nXor43323,1634139
static void xorMemory(EntropyGatherer *p, unsigned char *x, int sz){xorMemory43328,1634301
static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){winRandomness43342,1634626
static int winSleep(sqlite3_vfs *pVfs, int microsec){winSleep43402,1636326
SQLITE_API int sqlite3_current_time = 0;  /* Fake system time in seconds since 1970. */sqlite3_current_time43414,1636699
static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){winCurrentTimeInt6443427,1637233
static int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){winCurrentTime43470,1638628
static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){winGetLastError43510,1640100
SQLITE_API int sqlite3_os_init(void){sqlite3_os_init43520,1640359
SQLITE_API int sqlite3_os_end(void){sqlite3_os_end43651,1645223
#define BITVEC_SZ BITVEC_SZ43704,1647333
#define BITVEC_USIZE BITVEC_USIZE43708,1647494
#define BITVEC_TELEM BITVEC_TELEM43715,1647809
#define BITVEC_SZELEM BITVEC_SZELEM43717,1647881
#define BITVEC_NELEM BITVEC_NELEM43719,1647952
#define BITVEC_NBIT BITVEC_NBIT43721,1648055
#define BITVEC_NINT BITVEC_NINT43724,1648152
#define BITVEC_MXHASH BITVEC_MXHASH43727,1648290
#define BITVEC_HASH(BITVEC_HASH43732,1648533
#define BITVEC_NPTR BITVEC_NPTR43734,1648581
struct Bitvec {Bitvec43758,1649557
  u32 iSize;      /* Maximum bit index.  Max iSize is 4,294,967,296. */iSize43759,1649573
  u32 nSet;       /* Number of bits that are set - only valid for aHashnSet43760,1649645
  u32 iDivisor;   /* Number of bits handled by each apSub[] entry. */iDivisor43763,1649834
    BITVEC_TELEM aBitmap[BITVEC_NELEM];    /* Bitmap representation */aBitmap43768,1650111
    u32 aHash[BITVEC_NINT];      /* Hash table representation */aHash43769,1650182
    Bitvec *apSub[BITVEC_NPTR];  /* Recursive representation */apSub43770,1650247
  } u;u43771,1650311
SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){sqlite3BitvecCreate43779,1650484
SQLITE_PRIVATE int sqlite3BitvecTestNotNull(Bitvec *p, u32 i){sqlite3BitvecTestNotNull43794,1650847
SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){sqlite3BitvecTest43817,1651377
SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){sqlite3BitvecSet43833,1651953
SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){sqlite3BitvecClear43904,1654052
SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){sqlite3BitvecDestroy43941,1654935
SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){sqlite3BitvecSize43956,1655249
#define SETBIT(SETBIT43967,1655574
#define CLEARBIT(CLEARBIT43968,1655621
#define TESTBIT(TESTBIT43969,1655669
SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){sqlite3BitvecBuiltinTest44001,1657054
struct PCache {PCache44119,1660792
  PgHdr *pDirty, *pDirtyTail;         /* List of dirty pages in LRU order */pDirty44120,1660808
  PgHdr *pDirty, *pDirtyTail;         /* List of dirty pages in LRU order */pDirtyTail44120,1660808
  PgHdr *pSynced;                     /* Last synced page in dirty page list */pSynced44121,1660885
  int nRefSum;                        /* Sum of ref counts over all pages */nRefSum44122,1660965
  int szCache;                        /* Configured cache size */szCache44123,1661042
  int szSpill;                        /* Size before spilling occurs */szSpill44124,1661108
  int szPage;                         /* Size of every page in this cache */szPage44125,1661180
  int szExtra;                        /* Size of extra space for each page */szExtra44126,1661257
  u8 bPurgeable;                      /* True if pages are on backing store */bPurgeable44127,1661335
  u8 eCreate;                         /* eCreate value for for xFetch() */eCreate44128,1661414
  int (*xStress)(void*,PgHdr*);       /* Call to try make a page clean */xStress44129,1661489
  void *pStress;                      /* Argument to xStress */pStress44130,1661563
  sqlite3_pcache *pCache;             /* Pluggable cache module */pCache44131,1661627
  int sqlite3PcacheTrace = 2;       /* 0: off  1: simple  2: cache dumps */sqlite3PcacheTrace44144,1662121
  int sqlite3PcacheMxDump = 9999;   /* Max cache entries for pcacheDump() */sqlite3PcacheMxDump44145,1662197
# define pcacheTrace(pcacheTrace44146,1662274
  void pcacheDump(PCache *pCache){pcacheDump44147,1662344
# define pcacheTrace(pcacheTrace44172,1663132
# define pcacheDump(pcacheDump44173,1663156
SQLITE_PRIVATE int sqlite3PcachePageSanity(PgHdr *pPg){sqlite3PcachePageSanity44186,1663469
#define PCACHE_DIRTYLIST_REMOVE PCACHE_DIRTYLIST_REMOVE44226,1665274
#define PCACHE_DIRTYLIST_ADD PCACHE_DIRTYLIST_ADD44227,1665348
#define PCACHE_DIRTYLIST_FRONT PCACHE_DIRTYLIST_FRONT44228,1665421
static void pcacheManageDirtyList(PgHdr *pPage, u8 addRemove){pcacheManageDirtyList44236,1665800
static void pcacheUnpin(PgHdr *p){pcacheUnpin44309,1668294
static int numberOfCachePages(PCache *p){numberOfCachePages44321,1668661
SQLITE_PRIVATE int sqlite3PcacheInitialize(void){sqlite3PcacheInitialize44339,1669320
SQLITE_PRIVATE void sqlite3PcacheShutdown(void){sqlite3PcacheShutdown44348,1669711
SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }sqlite3PcacheSize44358,1670024
SQLITE_PRIVATE int sqlite3PcacheOpen(sqlite3PcacheOpen44372,1670632
SQLITE_PRIVATE int sqlite3PcacheSetPageSize(PCache *pCache, int szPage){sqlite3PcacheSetPageSize44398,1671614
SQLITE_PRIVATE sqlite3_pcache_page *sqlite3PcacheFetch(sqlite3PcacheFetch44442,1673410
SQLITE_PRIVATE int sqlite3PcacheFetchStress(sqlite3PcacheFetchStress44483,1675196
static SQLITE_NOINLINE PgHdr *pcacheFetchFinishWithInit(pcacheFetchFinishWithInit44539,1677350
SQLITE_PRIVATE PgHdr *sqlite3PcacheFetchFinish(sqlite3PcacheFetchFinish44565,1678278
SQLITE_PRIVATE void SQLITE_NOINLINE sqlite3PcacheRelease(PgHdr *p){sqlite3PcacheRelease44588,1678949
SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){sqlite3PcacheRef44607,1679577
SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){sqlite3PcacheDrop44619,1679913
SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){sqlite3PcacheMakeDirty44633,1680302
SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){sqlite3PcacheMakeClean44652,1680937
SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){sqlite3PcacheCleanAll44670,1681465
SQLITE_PRIVATE void sqlite3PcacheClearWritable(PCache *pCache){sqlite3PcacheClearWritable44681,1681734
SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){sqlite3PcacheClearSyncFlags44693,1682064
SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){sqlite3PcacheMove44704,1682322
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){sqlite3PcacheTruncate44726,1683189
SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){sqlite3PcacheClose44759,1684214
SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){sqlite3PcacheClear44768,1684443
static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){pcacheMergeDirtyList44776,1684660
#define N_SORT_BUCKET N_SORT_BUCKET44812,1685576
static PgHdr *pcacheSortDirtyList(PgHdr *pIn){pcacheSortDirtyList44813,1685602
SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){sqlite3PcacheDirtyList44848,1686414
SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){sqlite3PcacheRefCount44862,1686806
SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){sqlite3PcachePageRefcount44869,1686971
SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){sqlite3PcachePagecount44876,1687105
SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){sqlite3PcacheGetCachesize44885,1687327
SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){sqlite3PcacheSetCachesize44893,1687481
SQLITE_PRIVATE int sqlite3PcacheSetSpillsize(PCache *p, int mxPage){sqlite3PcacheSetSpillsize44905,1687935
SQLITE_PRIVATE void sqlite3PcacheShrink(PCache *pCache){sqlite3PcacheShrink44922,1688333
SQLITE_PRIVATE int sqlite3HeaderSizePcache(void){ return ROUND8(sizeof(PgHdr)); }sqlite3HeaderSizePcache44931,1688581
SQLITE_PRIVATE int sqlite3PCachePercentDirty(PCache *pCache){sqlite3PCachePercentDirty44937,1688779
SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){sqlite3PcacheIterateDirty44951,1689264
typedef struct PCache1 PCache1;PCache145045,1693628
typedef struct PgHdr1 PgHdr1;PgHdr145046,1693660
typedef struct PgFreeslot PgFreeslot;PgFreeslot45047,1693690
typedef struct PGroup PGroup;PGroup45048,1693728
struct PgHdr1 {PgHdr145056,1693998
  sqlite3_pcache_page page;      /* Base class. Must be first. pBuf & pExtra */page45057,1694014
  unsigned int iKey;             /* Key value (page number) */iKey45058,1694094
  u8 isPinned;                   /* Page in use, not on the LRU list */isPinned45059,1694157
  u8 isBulkLocal;                /* This page from bulk local storage */isBulkLocal45060,1694229
  u8 isAnchor;                   /* This is the PGroup.lru element */isAnchor45061,1694302
  PgHdr1 *pNext;                 /* Next in hash table chain */pNext45062,1694372
  PCache1 *pCache;               /* Cache that currently owns this page */pCache45063,1694436
  PgHdr1 *pLruNext;              /* Next in LRU list of unpinned pages */pLruNext45064,1694511
  PgHdr1 *pLruPrev;              /* Previous in LRU list of unpinned pages */pLruPrev45065,1694585
struct PGroup {PGroup45090,1695623
  sqlite3_mutex *mutex;          /* MUTEX_STATIC_LRU or NULL */mutex45091,1695639
  unsigned int nMaxPage;         /* Sum of nMax for purgeable caches */nMaxPage45092,1695703
  unsigned int nMinPage;         /* Sum of nMin for purgeable caches */nMinPage45093,1695775
  unsigned int mxPinned;         /* nMaxpage + 10 - nMinPage */mxPinned45094,1695847
  unsigned int nCurrentPage;     /* Number of purgeable pages allocated */nCurrentPage45095,1695911
  PgHdr1 lru;                    /* The beginning and end of the LRU list */lru45096,1695986
struct PCache1 {PCache145107,1696405
  PGroup *pGroup;                     /* PGroup this cache belongs to */pGroup45113,1696698
  int szPage;                         /* Size of database content section */szPage45114,1696771
  int szExtra;                        /* sizeof(MemPage)+sizeof(PgHdr) */szExtra45115,1696848
  int szAlloc;                        /* Total size of one pcache line */szAlloc45116,1696922
  int bPurgeable;                     /* True if cache is purgeable */bPurgeable45117,1696996
  unsigned int nMin;                  /* Minimum number of pages reserved */nMin45118,1697067
  unsigned int nMax;                  /* Configured "cache_size" value */nMax45119,1697144
  unsigned int n90pct;                /* nMax*9/10 */n90pct45120,1697218
  unsigned int iMaxKey;               /* Largest key seen since xTruncate() */iMaxKey45121,1697272
  unsigned int nRecyclable;           /* Number of pages in the LRU list */nRecyclable45126,1697484
  unsigned int nPage;                 /* Total number of pages in apHash */nPage45127,1697560
  unsigned int nHash;                 /* Number of slots in apHash[] */nHash45128,1697636
  PgHdr1 **apHash;                    /* Hash table for fast lookup by key */apHash45129,1697708
  PgHdr1 *pFree;                      /* List of unused pcache-local pages */pFree45130,1697786
  void *pBulk;                        /* Bulk memory used by pcache-local */pBulk45131,1697864
struct PgFreeslot {PgFreeslot45138,1698086
  PgFreeslot *pNext;  /* Next free slot */pNext45139,1698106
static SQLITE_WSD struct PCacheGlobal {PCacheGlobal45145,1698194
  PGroup grp;                    /* The global PGroup for mode (2) */grp45146,1698234
  int isInit;                    /* True if initialized */isInit45153,1698587
  int separateCache;             /* Use a new PGroup for each PCache */separateCache45154,1698646
  int nInitPage;                 /* Initial bulk allocation size */   nInitPage45155,1698718
  int szSlot;                    /* Size of each free slot */szSlot45156,1698789
  int nSlot;                     /* The number of pcache slots */nSlot45157,1698851
  int nReserve;                  /* Try to keep nFreeSlot above this */nReserve45158,1698917
  void *pStart, *pEnd;           /* Bounds of global page cache memory */pStart45159,1698989
  void *pStart, *pEnd;           /* Bounds of global page cache memory */pEnd45159,1698989
  sqlite3_mutex *mutex;          /* Mutex for accessing the following: */mutex45161,1699139
  PgFreeslot *pFree;             /* Free page blocks */pFree45162,1699213
  int nFreeSlot;                 /* Number of unused pcache slots */nFreeSlot45163,1699269
  int bUnderPressure;            /* True if low on PAGECACHE memory */bUnderPressure45168,1699608
} pcache1_g;pcache1_g45169,1699679
#define pcache1 pcache145176,1699897
# define pcache1EnterMutex(pcache1EnterMutex45182,1700082
# define pcache1LeaveMutex(pcache1LeaveMutex45183,1700135
# define PCACHE1_MIGHT_USE_GROUP_MUTEX PCACHE1_MIGHT_USE_GROUP_MUTEX45184,1700188
# define pcache1EnterMutex(pcache1EnterMutex45186,1700235
# define pcache1LeaveMutex(pcache1LeaveMutex45187,1700297
# define PCACHE1_MIGHT_USE_GROUP_MUTEX PCACHE1_MIGHT_USE_GROUP_MUTEX45188,1700359
SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){sqlite3PCacheBufferSetup45204,1701002
static int pcache1InitBulk(PCache1 *pCache){pcache1InitBulk45229,1701699
static void *pcache1Alloc(int nByte){pcache1Alloc45272,1703067
static void pcache1Free(void *p){pcache1Free45310,1704255
static int pcache1MemSize(void *p){pcache1MemSize45343,1705255
static PgHdr1 *pcache1AllocPage(PCache1 *pCache, int benignMalloc){pcache1AllocPage45360,1705716
static void pcache1FreePage(PgHdr1 *p){pcache1FreePage45410,1707170
SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){sqlite3PageMalloc45434,1707798
SQLITE_PRIVATE void sqlite3PageFree(void *p){sqlite3PageFree45441,1707945
static int pcache1UnderMemoryPressure(PCache1 *pCache){pcache1UnderMemoryPressure45462,1708683
static void pcache1ResizeHash(PCache1 *p){pcache1ResizeHash45479,1709237
static PgHdr1 *pcache1PinPage(PgHdr1 *pPage){pcache1PinPage45520,1710296
static void pcache1RemoveFromHash(PgHdr1 *pPage, int freeFlag){pcache1RemoveFromHash45548,1711081
static void pcache1EnforceMaxPage(PCache1 *pCache){pcache1EnforceMaxPage45566,1711588
static void pcache1TruncateUnsafe(pcache1TruncateUnsafe45591,1712351
static int pcache1Init(void *NotUsed){pcache1Init45642,1714113
static void pcache1Shutdown(void *NotUsed){pcache1Shutdown45695,1715773
static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){pcache1Create45709,1716084
static void pcache1Cachesize(sqlite3_pcache *p, int nMax){pcache1Cachesize45756,1717594
static void pcache1Shrink(sqlite3_pcache *p){pcache1Shrink45775,1718138
static int pcache1Pagecount(sqlite3_pcache *p){pcache1Pagecount45792,1718574
static SQLITE_NOINLINE PgHdr1 *pcache1FetchStage2(pcache1FetchStage245810,1719122
static PgHdr1 *pcache1FetchNoMutex(pcache1FetchNoMutex45938,1723586
static PgHdr1 *pcache1FetchWithMutex(pcache1FetchWithMutex45968,1724495
static sqlite3_pcache_page *pcache1Fetch(pcache1Fetch45983,1724847
static void pcache1Unpin(pcache1Unpin46014,1725701
static void pcache1Rekey(pcache1Rekey46050,1726634
static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){pcache1Truncate46090,1727576
static void pcache1Destroy(sqlite3_pcache *p){pcache1Destroy46105,1727987
SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){sqlite3PCacheSetDefault46128,1728829
SQLITE_PRIVATE int sqlite3HeaderSizePcache1(void){ return ROUND8(sizeof(PgHdr1)); }sqlite3HeaderSizePcache146150,1729650
SQLITE_PRIVATE sqlite3_mutex *sqlite3Pcache1Mutex(void){sqlite3Pcache1Mutex46156,1729865
SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){sqlite3PcacheReleaseMemory46170,1730376
SQLITE_PRIVATE void sqlite3PcacheStats(sqlite3PcacheStats46200,1731203
#define ROWSET_ALLOCATION_SIZE ROWSET_ALLOCATION_SIZE46290,1734710
#define ROWSET_ENTRY_PER_CHUNK ROWSET_ENTRY_PER_CHUNK46295,1734807
struct RowSetEntry {            RowSetEntry46306,1735271
  i64 v;                        /* ROWID value for this entry */v46307,1735304
  struct RowSetEntry *pRight;   /* Right subtree (larger entries) or list */pRight46308,1735369
  struct RowSetEntry *pLeft;    /* Left subtree (smaller entries) */pLeft46309,1735446
struct RowSetChunk {RowSetChunk46318,1735764
  struct RowSetChunk *pNextChunk;        /* Next chunk on list of them all */pNextChunk46319,1735785
  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; /* Allocated entries */aEntry46320,1735863
struct RowSet {RowSet46328,1736064
  struct RowSetChunk *pChunk;    /* List of all chunk allocations */pChunk46329,1736080
  sqlite3 *db;                   /* The database connection */db46330,1736149
  struct RowSetEntry *pEntry;    /* List of entries using pRight */pEntry46331,1736212
  struct RowSetEntry *pLast;     /* Last entry on the pEntry list */pLast46332,1736280
  struct RowSetEntry *pFresh;    /* Source of new entry objects */pFresh46333,1736349
  struct RowSetEntry *pForest;   /* List of binary trees of entries */pForest46334,1736416
  u16 nFresh;                    /* Number of objects on pFresh */nFresh46335,1736487
  u16 rsFlags;                   /* Various flags */rsFlags46336,1736554
  int iBatch;                    /* Current insert batch */iBatch46337,1736607
#define ROWSET_SORTED ROWSET_SORTED46343,1736714
#define ROWSET_NEXT ROWSET_NEXT46344,1736782
SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){sqlite3RowSetInit46358,1737324
SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){sqlite3RowSetClear46379,1737931
static struct RowSetEntry *rowSetEntryAlloc(RowSet *p){rowSetEntryAlloc46401,1738532
SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){sqlite3RowSetInsert46426,1739237
static struct RowSetEntry *rowSetEntryMerge(rowSetEntryMerge46457,1740125
static struct RowSetEntry *rowSetEntrySort(struct RowSetEntry *pIn){rowSetEntrySort46492,1740961
static void rowSetTreeToList(rowSetTreeToList46521,1741760
static struct RowSetEntry *rowSetNDeepTree(rowSetNDeepTree46556,1742897
static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){rowSetListToTree46592,1744039
SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){sqlite3RowSetNext46624,1745012
SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, int iBatch, sqlite3_int64 iRowid){sqlite3RowSetTest46658,1746122
#define SQLITE_WAL_HSQLITE_WAL_H46763,1749799
#define WAL_SYNC_TRANSACTIONS WAL_SYNC_TRANSACTIONS46770,1749946
#define SQLITE_SYNC_MASK SQLITE_SYNC_MASK46771,1750026
# define sqlite3WalOpen(sqlite3WalOpen46774,1750128
# define sqlite3WalLimit(sqlite3WalLimit46775,1750179
# define sqlite3WalClose(sqlite3WalClose46776,1750209
# define sqlite3WalBeginReadTransaction(sqlite3WalBeginReadTransaction46777,1750260
# define sqlite3WalEndReadTransaction(sqlite3WalEndReadTransaction46778,1750311
# define sqlite3WalDbsize(sqlite3WalDbsize46779,1750352
# define sqlite3WalBeginWriteTransaction(sqlite3WalBeginWriteTransaction46780,1750403
# define sqlite3WalEndWriteTransaction(sqlite3WalEndWriteTransaction46781,1750454
# define sqlite3WalUndo(sqlite3WalUndo46782,1750505
# define sqlite3WalSavepoint(sqlite3WalSavepoint46783,1750556
# define sqlite3WalSavepointUndo(sqlite3WalSavepointUndo46784,1750590
# define sqlite3WalFrames(sqlite3WalFrames46785,1750641
# define sqlite3WalCheckpoint(sqlite3WalCheckpoint46786,1750692
# define sqlite3WalCallback(sqlite3WalCallback46787,1750745
# define sqlite3WalExclusiveMode(sqlite3WalExclusiveMode46788,1750796
# define sqlite3WalHeapMemory(sqlite3WalHeapMemory46789,1750847
# define sqlite3WalFramesize(sqlite3WalFramesize46790,1750898
# define sqlite3WalFindFrame(sqlite3WalFindFrame46791,1750949
# define sqlite3WalFile(sqlite3WalFile46792,1751000
#define WAL_SAVEPOINT_NDATA WAL_SAVEPOINT_NDATA46795,1751058
typedef struct Wal Wal;Wal46800,1751193
#define PAGERTRACE(PAGERTRACE46993,1759818
#define PAGERID(PAGERID47004,1760141
#define FILEHANDLEID(FILEHANDLEID47005,1760175
#define PAGER_OPEN PAGER_OPEN47224,1770724
#define PAGER_READER PAGER_READER47225,1770762
#define PAGER_WRITER_LOCKED PAGER_WRITER_LOCKED47226,1770800
#define PAGER_WRITER_CACHEMOD PAGER_WRITER_CACHEMOD47227,1770838
#define PAGER_WRITER_DBMOD PAGER_WRITER_DBMOD47228,1770876
#define PAGER_WRITER_FINISHED PAGER_WRITER_FINISHED47229,1770914
#define PAGER_ERROR PAGER_ERROR47230,1770952
#define UNKNOWN_LOCK UNKNOWN_LOCK47280,1773739
# define CODEC1(CODEC147286,1773880
# define CODEC2(CODEC247288,1773968
# define CODEC1(CODEC147292,1774108
# define CODEC2(CODEC247293,1774149
#define MAX_SECTOR_SIZE MAX_SECTOR_SIZE47302,1774481
typedef struct PagerSavepoint PagerSavepoint;PagerSavepoint47318,1775175
struct PagerSavepoint {PagerSavepoint47319,1775221
  i64 iOffset;                 /* Starting offset in main journal */iOffset47320,1775245
  i64 iHdrOffset;              /* See above */iHdrOffset47321,1775314
  Bitvec *pInSavepoint;        /* Set of pages in this savepoint */pInSavepoint47322,1775361
  Pgno nOrig;                  /* Original number of pages in file */nOrig47323,1775429
  Pgno iSubRec;                /* Index of first record in sub-journal */iSubRec47324,1775499
  u32 aWalData[WAL_SAVEPOINT_NDATA];        /* WAL savepoint context */aWalData47326,1775597
#define SPILLFLAG_OFF SPILLFLAG_OFF47333,1775756
#define SPILLFLAG_ROLLBACK SPILLFLAG_ROLLBACK47334,1775832
#define SPILLFLAG_NOSYNC SPILLFLAG_NOSYNC47335,1775911
struct Pager {Pager47493,1783600
  sqlite3_vfs *pVfs;          /* OS functions to use for IO */pVfs47494,1783615
  u8 exclusiveMode;           /* Boolean. True if locking_mode==EXCLUSIVE */exclusiveMode47495,1783678
  u8 journalMode;             /* One of the PAGER_JOURNALMODE_* values */journalMode47496,1783755
  u8 useJournal;              /* Use a rollback journal on this file */useJournal47497,1783829
  u8 noSync;                  /* Do not sync the journal if true */noSync47498,1783901
  u8 fullSync;                /* Do extra syncs of the journal for robustness */fullSync47499,1783969
  u8 extraSync;               /* sync directory after journal delete */extraSync47500,1784050
  u8 ckptSyncFlags;           /* SYNC_NORMAL or SYNC_FULL for checkpoint */ckptSyncFlags47501,1784122
  u8 walSyncFlags;            /* SYNC_NORMAL or SYNC_FULL for wal writes */walSyncFlags47502,1784198
  u8 syncFlags;               /* SYNC_NORMAL or SYNC_FULL otherwise */syncFlags47503,1784274
  u8 tempFile;                /* zFilename is a temporary or immutable file */tempFile47504,1784345
  u8 noLock;                  /* Do not lock (except in WAL mode) */noLock47505,1784424
  u8 readOnly;                /* True for a read-only database */readOnly47506,1784493
  u8 memDb;                   /* True to inhibit all file I/O */memDb47507,1784559
  u8 eState;                  /* Pager state (OPEN, READER, WRITER_LOCKED..) */eState47518,1785185
  u8 eLock;                   /* Current lock held on database file */eLock47519,1785265
  u8 changeCountDone;         /* Set after incrementing the change-counter */changeCountDone47520,1785336
  u8 setMaster;               /* True if a m-j name has been written to jrnl */setMaster47521,1785414
  u8 doNotSpill;              /* Do not spill the cache when non-zero */doNotSpill47522,1785494
  u8 subjInMemory;            /* True to use in-memory sub-journals */subjInMemory47523,1785567
  u8 bUseFetch;               /* True to use xFetch() */bUseFetch47524,1785638
  u8 hasHeldSharedLock;       /* True if a shared lock has ever been held */hasHeldSharedLock47525,1785695
  Pgno dbSize;                /* Number of pages in the database */dbSize47526,1785772
  Pgno dbOrigSize;            /* dbSize before the current transaction */dbOrigSize47527,1785840
  Pgno dbFileSize;            /* Number of pages in the database file */dbFileSize47528,1785914
  Pgno dbHintSize;            /* Value passed to FCNTL_SIZE_HINT call */dbHintSize47529,1785987
  int errCode;                /* One of several kinds of errors */errCode47530,1786060
  int nRec;                   /* Pages journalled since last j-header written */nRec47531,1786127
  u32 cksumInit;              /* Quasi-random value added to every checksum */cksumInit47532,1786208
  u32 nSubRec;                /* Number of records written to sub-journal */nSubRec47533,1786287
  Bitvec *pInJournal;         /* One bit for each page in the database file */pInJournal47534,1786364
  sqlite3_file *fd;           /* File descriptor for database */fd47535,1786443
  sqlite3_file *jfd;          /* File descriptor for main journal */jfd47536,1786508
  sqlite3_file *sjfd;         /* File descriptor for sub-journal */sjfd47537,1786577
  i64 journalOff;             /* Current write offset in the journal file */journalOff47538,1786645
  i64 journalHdr;             /* Byte offset to previous journal header */journalHdr47539,1786722
  sqlite3_backup *pBackup;    /* Pointer to list of ongoing backup processes */pBackup47540,1786797
  PagerSavepoint *aSavepoint; /* Array of active savepoints */aSavepoint47541,1786877
  int nSavepoint;             /* Number of elements in aSavepoint[] */nSavepoint47542,1786940
  u32 iDataVersion;           /* Changes whenever database content changes */iDataVersion47543,1787011
  char dbFileVers[16];        /* Changes whenever database file changes */dbFileVers47544,1787089
  int nMmapOut;               /* Number of mmap pages currently outstanding */nMmapOut47546,1787165
  sqlite3_int64 szMmap;       /* Desired maximum mmap size */szMmap47547,1787244
  PgHdr *pMmapFreelist;       /* List of free mmap page headers (pDirty) */pMmapFreelist47548,1787306
  u16 nExtra;                 /* Add this many bytes to each in-memory page */nExtra47553,1787516
  i16 nReserve;               /* Number of unused bytes at end of each page */nReserve47554,1787595
  u32 vfsFlags;               /* Flags for sqlite3_vfs.xOpen() */vfsFlags47555,1787674
  u32 sectorSize;             /* Assumed sector size during rollback */sectorSize47556,1787740
  int pageSize;               /* Number of bytes in a page */pageSize47557,1787812
  Pgno mxPgno;                /* Maximum allowed size of the database */mxPgno47558,1787874
  i64 journalSizeLimit;       /* Size limit for persistent journal files */journalSizeLimit47559,1787947
  char *zFilename;            /* Name of the database file */zFilename47560,1788023
  char *zJournal;             /* Name of the journal file */zJournal47561,1788085
  int (*xBusyHandler)(void*); /* Function to call when busy */xBusyHandler47562,1788146
  void *pBusyHandlerArg;      /* Context argument for xBusyHandler */pBusyHandlerArg47563,1788209
  int aStat[3];               /* Total cache hits, misses and writes */aStat47564,1788279
  int nRead;                  /* Database pages read */nRead47566,1788370
  void (*xReiniter)(DbPage*); /* Call this routine when reloading pages */xReiniter47568,1788433
  int (*xGet)(Pager*,Pgno,DbPage**,int); /* Routine to fetch a patch */xGet47569,1788508
  void *(*xCodec)(void*,void*,Pgno,int); /* Routine for en/decoding data */xCodec47571,1788604
  void (*xCodecSizeChng)(void*,int,int); /* Notify of page size changes */xCodecSizeChng47572,1788680
  void (*xCodecFree)(void*);             /* Destructor for the codec */xCodecFree47573,1788755
  void *pCodec;               /* First argument to xCodec... methods */pCodec47574,1788827
  char *pTmpSpace;            /* Pager.pageSize bytes of space for tmp use */pTmpSpace47576,1788906
  PCache *pPCache;            /* Pointer to page cache object */pPCache47577,1788984
  Wal *pWal;                  /* Write-ahead log used by "journal_mode=wal" */pWal47579,1789073
  char *zWal;                 /* File name for write-ahead log */zWal47580,1789152
#define PAGER_STAT_HIT PAGER_STAT_HIT47589,1789422
#define PAGER_STAT_MISS PAGER_STAT_MISS47590,1789449
#define PAGER_STAT_WRITE PAGER_STAT_WRITE47591,1789476
SQLITE_API int sqlite3_pager_readdb_count = 0;    /* Number of full pages read from DB */sqlite3_pager_readdb_count47599,1789707
SQLITE_API int sqlite3_pager_writedb_count = 0;   /* Number of full pages written to DB */sqlite3_pager_writedb_count47600,1789797
SQLITE_API int sqlite3_pager_writej_count = 0;    /* Number of pages written to journal */sqlite3_pager_writej_count47601,1789888
# define PAGER_INCR(PAGER_INCR47602,1789979
# define PAGER_INCR(PAGER_INCR47604,1790013
static const unsigned char aJournalMagic[] = {aJournalMagic47632,1791347
#define JOURNAL_PG_SZ(JOURNAL_PG_SZ47640,1791544
#define JOURNAL_HDR_SZ(JOURNAL_HDR_SZ47646,1791735
# define MEMDB MEMDB47655,1792080
# define MEMDB MEMDB47657,1792103
# define USEFETCH(USEFETCH47665,1792314
# define USEFETCH(USEFETCH47667,1792358
#define PAGER_MAX_PGNO PAGER_MAX_PGNO47673,1792443
#define isOpen(isOpen47687,1792772
SQLITE_PRIVATE int sqlite3PagerUseWal(Pager *pPager, Pgno pgno){sqlite3PagerUseWal47694,1793029
# define pagerUseWal(pagerUseWal47703,1793266
# define pagerUseWal(pagerUseWal47705,1793311
# define pagerRollbackWal(pagerRollbackWal47706,1793337
# define pagerWalFrames(pagerWalFrames47707,1793368
# define pagerOpenWalIfPresent(pagerOpenWalIfPresent47708,1793403
# define pagerBeginReadTransaction(pagerBeginReadTransaction47709,1793447
static int assert_pager_state(Pager *p){assert_pager_state47721,1793696
static char *print_pager_state(Pager *p){print_pager_state47860,1798598
static void setGetterMethod(Pager *pPager){setGetterMethod47913,1800745
static int subjRequiresPage(PgHdr *pPg){subjRequiresPage47938,1801446
static int pageInJournal(Pager *pPager, PgHdr *pPg){pageInJournal47956,1801850
static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){read32bits47968,1802216
#define put32bits(put32bits47980,1802512
static int write32bits(sqlite3_file *fd, i64 offset, u32 val){write32bits47987,1802702
static int pagerUnlockDb(Pager *pPager, int eLock){pagerUnlockDb48002,1803259
static int pagerLockDb(Pager *pPager, int eLock){pagerLockDb48029,1804224
static int jrnlBufferSize(Pager *pPager){jrnlBufferSize48061,1805444
# define jrnlBufferSize(jrnlBufferSize48083,1806121
static u32 pager_datahash(int nByte, unsigned char *pData){pager_datahash48095,1806404
static u32 pager_pagehash(PgHdr *pPage){pager_pagehash48103,1806571
static void pager_set_pagehash(PgHdr *pPage){pager_set_pagehash48106,1806695
#define CHECK_PAGE(CHECK_PAGE48115,1807017
static void checkPage(PgHdr *pPg){checkPage48116,1807052
#define pager_datahash(pager_datahash48123,1807244
#define pager_pagehash(pager_pagehash48124,1807275
#define pager_set_pagehash(pager_set_pagehash48125,1807304
#define CHECK_PAGE(CHECK_PAGE48126,1807334
static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){readMasterJournal48154,1808600
static i64 journalHdrOffset(Pager *pPager){journalHdrOffset48208,1810406
static int zeroJournalHdr(Pager *pPager, int doTruncate){zeroJournalHdr48241,1811720
static int writeJournalHdr(Pager *pPager){writeJournalHdr48291,1813601
static int readJournalHdr(readJournalHdr48409,1818929
static int writeMasterJournal(Pager *pPager, const char *zMaster){writeMasterJournal48534,1823891
static void pager_reset(Pager *pPager){pager_reset48602,1826381
SQLITE_PRIVATE u32 sqlite3PagerDataVersion(Pager *pPager){sqlite3PagerDataVersion48611,1826577
static void releaseAllSavepoints(Pager *pPager){releaseAllSavepoints48621,1826912
static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){addToSavepointBitvecs48640,1827554
static void pager_unlock(Pager *pPager){pager_unlock48672,1828794
static int pager_error(Pager *pPager, int rc){pager_error48770,1832634
static int pagerFlushOnCommit(Pager *pPager, int bCommit){pagerFlushOnCommit48804,1833651
static int pager_end_transaction(Pager *pPager, int hasMaster, int bCommit){pager_end_transaction48864,1836354
static void pagerUnlockAndRollback(Pager *pPager){pagerUnlockAndRollback49010,1842220
static u32 pager_cksum(Pager *pPager, const u8 *aData){pager_cksum49044,1843638
static void pagerReportSize(Pager *pPager){pagerReportSize49059,1844015
# define pagerReportSize(pagerReportSize49066,1844215
SQLITE_PRIVATE void sqlite3PagerAlignReserve(Pager *pDest, Pager *pSrc){sqlite3PagerAlignReserve49075,1844524
static int pager_playback_one_page(pager_playback_one_page49120,1846496
static int pager_delmaster(Pager *pPager, const char *zMaster){pager_delmaster49365,1857469
static int pager_truncate(Pager *pPager, Pgno nPage){pager_truncate49475,1861689
SQLITE_PRIVATE int sqlite3SectorSize(sqlite3_file *pFile){sqlite3SectorSize49511,1862895
static void setSectorSize(Pager *pPager){setSectorSize49545,1864337
static int pager_playback(Pager *pPager, int isHot){pager_playback49618,1867694
static int readDbPage(PgHdr *pPg, u32 iFrame){readDbPage49826,1875794
static void pager_write_changecounter(PgHdr *pPg){pager_write_changecounter49888,1878142
static int pagerUndoCallback(void *pCtx, Pgno iPg){pagerUndoCallback49915,1879304
static int pagerRollbackWal(Pager *pPager){pagerRollbackWal49954,1880486
static int pagerWalFrames(pagerWalFrames49986,1881673
static int pagerBeginReadTransaction(Pager *pPager){pagerBeginReadTransaction50053,1883757
static int pagerPagecount(Pager *pPager, Pgno *pnPage){pagerPagecount50086,1884972
static int pagerOpenWalIfPresent(Pager *pPager){pagerOpenWalIfPresent50146,1887295
static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){pagerPlaybackSavepoint50215,1890005
SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){sqlite3PagerSetCachesize50327,1894132
SQLITE_PRIVATE int sqlite3PagerSetSpillsize(Pager *pPager, int mxPage){sqlite3PagerSetSpillsize50335,1894381
static void pagerFixMaplimit(Pager *pPager){pagerFixMaplimit50342,1894594
SQLITE_PRIVATE void sqlite3PagerSetMmapLimit(Pager *pPager, sqlite3_int64 szMmap){sqlite3PagerSetMmapLimit50358,1895023
SQLITE_PRIVATE void sqlite3PagerShrink(Pager *pPager){sqlite3PagerShrink50366,1895221
SQLITE_PRIVATE void sqlite3PagerSetFlags(sqlite3PagerSetFlags50422,1898027
SQLITE_API int sqlite3_opentemp_count = 0;sqlite3_opentemp_count50467,1899439
static int pagerOpentemp(pagerOpentemp50485,1899954
SQLITE_PRIVATE void sqlite3PagerSetBusyhandler(sqlite3PagerSetBusyhandler50524,1901455
SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){sqlite3PagerSetPagesize50570,1903387
SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){sqlite3PagerTempSpace50633,1905524
SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){sqlite3PagerMaxPageCount50644,1905895
static int saved_cnt;saved_cnt50664,1906601
void disable_simulated_io_errors(void){disable_simulated_io_errors50665,1906623
void enable_simulated_io_errors(void){enable_simulated_io_errors50669,1906738
# define disable_simulated_io_errors(disable_simulated_io_errors50673,1906825
# define enable_simulated_io_errors(enable_simulated_io_errors50674,1906864
SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){sqlite3PagerReadFileheader50691,1907528
SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){sqlite3PagerPagecount50719,1908387
static int pager_wait_on_lock(Pager *pPager, int locktype){pager_wait_on_lock50740,1909194
static void assertTruncateConstraintCb(PgHdr *pPg){assertTruncateConstraintCb50782,1911022
static void assertTruncateConstraint(Pager *pPager){assertTruncateConstraint50786,1911182
# define assertTruncateConstraint(assertTruncateConstraint50790,1911317
SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){sqlite3PagerTruncateImage50804,1911900
static int pagerSyncHotJournal(Pager *pPager){pagerSyncHotJournal50835,1913292
static int pagerAcquireMapPage(pagerAcquireMapPage50857,1914000
static void pagerReleaseMapPage(PgHdr *pPg){pagerReleaseMapPage50901,1915225
static void pagerFreeMapHdrs(Pager *pPager){pagerFreeMapHdrs50914,1915597
SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager, sqlite3 *db){sqlite3PagerClose50938,1916371
SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){sqlite3PagerPagenumber50999,1918420
SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){sqlite3PagerRef51007,1918560
static int syncJournal(Pager *pPager, int newHdr){syncJournal51046,1920083
static int pager_write_pagelist(Pager *pPager, PgHdr *pList){pager_write_pagelist51189,1926298
static int openSubJournal(Pager *pPager){openSubJournal51281,1929762
static int subjournalPage(PgHdr *pPg){subjournalPage51307,1930691
static int subjournalPageIfRequired(PgHdr *pPg){subjournalPageIfRequired51344,1931961
static int pagerStress(void *p, PgHdr *pPg){pagerStress51371,1933050
SQLITE_PRIVATE int sqlite3PagerFlush(Pager *pPager){sqlite3PagerFlush51440,1935355
SQLITE_PRIVATE int sqlite3PagerOpen(sqlite3PagerOpen51489,1937378
static int databaseIsUnmoved(Pager *pPager){databaseIsUnmoved51783,1948840
static int hasHotJournal(Pager *pPager, int *pExists){hasHotJournal51834,1951088
SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){sqlite3PagerSharedLock51954,1956431
static void pagerUnlockIfUnused(Pager *pPager){pagerUnlockIfUnused52176,1965344
static int getPageNormal(getPageNormal52239,1968386
static int getPageMMap(getPageMMap52346,1971917
static int getPageError(getPageError52418,1974221
SQLITE_PRIVATE int sqlite3PagerGet(sqlite3PagerGet52434,1974682
SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){sqlite3PagerLookup52454,1975464
SQLITE_PRIVATE void sqlite3PagerUnrefNotNull(DbPage *pPg){sqlite3PagerUnrefNotNull52473,1976092
SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){sqlite3PagerUnref52484,1976352
static int pager_open_journal(Pager *pPager){pager_open_journal52510,1977471
SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){sqlite3PagerBegin52599,1980605
static SQLITE_NOINLINE int pagerAddPageToRollbackJournal(PgHdr *pPg){pagerAddPageToRollbackJournal52668,1983215
static int pager_write(PgHdr *pPg){pager_write52725,1985439
static SQLITE_NOINLINE int pagerWriteLargeSector(PgHdr *pPg){pagerWriteLargeSector52817,1988870
SQLITE_PRIVATE int sqlite3PagerWrite(PgHdr *pPg){sqlite3PagerWrite52911,1992287
SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){sqlite3PagerIswriteable52935,1993094
SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){sqlite3PagerDontWrite52960,1994112
static int pager_incr_changecounter(Pager *pPager, int isDirectMode){pager_incr_changecounter52994,1995648
# define DIRECT_MODE DIRECT_MODE53013,1996410
SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager, const char *zMaster){sqlite3PagerSync53077,1998638
SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){sqlite3PagerExclusiveLock53103,1999566
SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne(sqlite3PagerCommitPhaseOne53145,2001184
SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){sqlite3PagerCommitPhaseTwo53322,2008770
SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){sqlite3PagerRollback53388,2011557
SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){sqlite3PagerIsreadonly53438,2013429
SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){sqlite3PagerRefcount53446,2013614
SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){sqlite3PagerMemUsed53455,2013844
SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){sqlite3PagerPageRefcount53466,2014223
SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){sqlite3PagerStats53474,2014409
SQLITE_PRIVATE void sqlite3PagerCacheStat(Pager *pPager, int eStat, int reset, int *pnVal){sqlite3PagerCacheStat53498,2015281
SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){sqlite3PagerIsMemdb53518,2015942
static SQLITE_NOINLINE int pagerOpenSavepoint(Pager *pPager, int nSavepoint){pagerOpenSavepoint53532,2016486
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){sqlite3PagerOpenSavepoint53577,2018199
SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){sqlite3PagerSavepoint53619,2020033
SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){sqlite3PagerFilename53695,2022947
SQLITE_PRIVATE sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){sqlite3PagerVfs53702,2023146
SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){sqlite3PagerFile53711,2023380
SQLITE_PRIVATE sqlite3_file *sqlite3PagerJrnlFile(Pager *pPager){sqlite3PagerJrnlFile53719,2023596
SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){sqlite3PagerJournalname53730,2023843
SQLITE_PRIVATE void sqlite3PagerSetCodec(sqlite3PagerSetCodec53738,2024014
SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){sqlite3PagerGetCodec53753,2024473
SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){sqlite3PagerCodec53764,2024800
SQLITE_PRIVATE int sqlite3PagerState(Pager *pPager){sqlite3PagerState53773,2024996
SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){sqlite3PagerMovepage53804,2026342
SQLITE_PRIVATE void sqlite3PagerRekey(DbPage *pPg, Pgno iNew, u16 flags){sqlite3PagerRekey53938,2031427
SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){sqlite3PagerGetData53947,2031649
SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){sqlite3PagerGetExtra53956,2031889
SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){sqlite3PagerLockingMode53970,2032382
SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){sqlite3PagerSetJournalMode54003,2033575
SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){sqlite3PagerGetJournalMode54101,2036971
SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){sqlite3PagerOkToChangeJournalMode54110,2037237
SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){sqlite3PagerJournalSizeLimit54123,2037673
SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){sqlite3PagerBackupPtr54137,2038133
SQLITE_PRIVATE void sqlite3PagerClearCache(Pager *pPager){sqlite3PagerClearCache54145,2038343
SQLITE_PRIVATE int sqlite3PagerCheckpoint(sqlite3PagerCheckpoint54160,2038805
SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){sqlite3PagerWalCallback54179,2039536
SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){sqlite3PagerWalSupported54187,2039766
static int pagerExclusiveLock(Pager *pPager){pagerExclusiveLock54197,2040134
static int pagerOpenWal(Pager *pPager){pagerOpenWal54217,2040834
SQLITE_PRIVATE int sqlite3PagerOpenWal(sqlite3PagerOpenWal54262,2042370
SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager, sqlite3 *db){sqlite3PagerCloseWal54301,2043643
SQLITE_PRIVATE int sqlite3PagerSnapshotGet(Pager *pPager, sqlite3_snapshot **ppSnapshot){sqlite3PagerSnapshotGet54344,2045013
SQLITE_PRIVATE int sqlite3PagerSnapshotOpen(Pager *pPager, sqlite3_snapshot *pSnapshot){sqlite3PagerSnapshotOpen54357,2045438
SQLITE_PRIVATE int sqlite3PagerSnapshotRecover(Pager *pPager){sqlite3PagerSnapshotRecover54371,2045798
SQLITE_PRIVATE int sqlite3PagerWalFramesize(Pager *pPager){sqlite3PagerWalFramesize54391,2046413
SQLITE_PRIVATE int sqlite3WalTrace = 0;sqlite3WalTrace54651,2059351
# define WALTRACE(WALTRACE54652,2059391
# define WALTRACE(WALTRACE54654,2059460
#define WAL_MAX_VERSION WAL_MAX_VERSION54670,2060089
#define WALINDEX_MAX_VERSION WALINDEX_MAX_VERSION54671,2060126
#define WAL_WRITE_LOCK WAL_WRITE_LOCK54678,2060350
#define WAL_ALL_BUT_WRITE WAL_ALL_BUT_WRITE54679,2060383
#define WAL_CKPT_LOCK WAL_CKPT_LOCK54680,2060416
#define WAL_RECOVER_LOCK WAL_RECOVER_LOCK54681,2060449
#define WAL_READ_LOCK(WAL_READ_LOCK54682,2060482
#define WAL_NREADER WAL_NREADER54683,2060521
typedef struct WalIndexHdr WalIndexHdr;WalIndexHdr54687,2060601
typedef struct WalIterator WalIterator;WalIterator54688,2060641
typedef struct WalCkptInfo WalCkptInfo;WalCkptInfo54689,2060681
struct WalIndexHdr {WalIndexHdr54705,2061311
  u32 iVersion;                   /* Wal-index version */iVersion54706,2061332
  u32 unused;                     /* Unused (padding) field */unused54707,2061390
  u32 iChange;                    /* Counter incremented each transaction */iChange54708,2061453
  u8 isInit;                      /* 1 when initialized */isInit54709,2061530
  u8 bigEndCksum;                 /* True if checksums in WAL are big-endian */bigEndCksum54710,2061589
  u16 szPage;                     /* Database page size in bytes. 1==64K */szPage54711,2061669
  u32 mxFrame;                    /* Index of last valid frame in the WAL */mxFrame54712,2061745
  u32 nPage;                      /* Size of database in pages */nPage54713,2061822
  u32 aFrameCksum[2];             /* Checksum of last frame in log */aFrameCksum54714,2061888
  u32 aSalt[2];                   /* Two salt values copied from WAL header */aSalt54715,2061958
  u32 aCksum[2];                  /* Checksum over all prior fields */aCksum54716,2062037
struct WalCkptInfo {WalCkptInfo54778,2065422
  u32 nBackfill;                  /* Number of WAL frames backfilled into DB */nBackfill54779,2065443
  u32 aReadMark[WAL_NREADER];     /* Reader marks */aReadMark54780,2065523
  u8 aLock[SQLITE_SHM_NLOCK];     /* Reserved space for locks */aLock54781,2065576
  u32 nBackfillAttempted;         /* WAL frames perhaps written, or maybe not */nBackfillAttempted54782,2065641
  u32 notUsed0;                   /* Available for future enhancements */notUsed054783,2065722
#define READMARK_NOT_USED READMARK_NOT_USED54785,2065799
#define WALINDEX_LOCK_OFFSET WALINDEX_LOCK_OFFSET54793,2066090
#define WALINDEX_HDR_SIZE WALINDEX_HDR_SIZE54794,2066171
#define WAL_FRAME_HDRSIZE WAL_FRAME_HDRSIZE54797,2066291
#define WAL_HDRSIZE WAL_HDRSIZE54801,2066408
#define WAL_MAGIC WAL_MAGIC54812,2066890
#define walFrameOffset(walFrameOffset54819,2067119
struct Wal {Wal54827,2067364
  sqlite3_vfs *pVfs;         /* The VFS used to create pDbFd */pVfs54828,2067377
  sqlite3_file *pDbFd;       /* File handle for the database file */pDbFd54829,2067441
  sqlite3_file *pWalFd;      /* File handle for WAL file */pWalFd54830,2067510
  u32 iCallback;             /* Value to pass to log callback (or 0) */iCallback54831,2067570
  i64 mxWalSize;             /* Truncate WAL to this size upon reset */mxWalSize54832,2067642
  int nWiData;               /* Size of array apWiData */nWiData54833,2067714
  int szFirstBlock;          /* Size of first block written to WAL file */szFirstBlock54834,2067772
  volatile u32 **apWiData;   /* Pointer to wal-index content in memory */apWiData54835,2067847
  u32 szPage;                /* Database page size */szPage54836,2067921
  i16 readLock;              /* Which read lock is being held.  -1 for none */readLock54837,2067975
  u8 syncFlags;              /* Flags to use to sync header writes */syncFlags54838,2068054
  u8 exclusiveMode;          /* Non-zero if connection is in exclusive mode */exclusiveMode54839,2068124
  u8 writeLock;              /* True if in a write transaction */writeLock54840,2068203
  u8 ckptLock;               /* True if holding a checkpoint lock */ckptLock54841,2068269
  u8 readOnly;               /* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY */readOnly54842,2068338
  u8 truncateOnCommit;       /* True to truncate WAL file on commit */truncateOnCommit54843,2068413
  u8 syncHeader;             /* Fsync the WAL header if true */syncHeader54844,2068484
  u8 padToSectorBoundary;    /* Pad transactions out to the next sector */padToSectorBoundary54845,2068548
  WalIndexHdr hdr;           /* Wal-index header for current transaction */hdr54846,2068623
  u32 minFrame;              /* Ignore wal frames before this one */minFrame54847,2068699
  u32 iReCksum;              /* On commit, recalculate checksums from here */iReCksum54848,2068768
  const char *zWalName;      /* Name of WAL file */zWalName54849,2068846
  u32 nCkpt;                 /* Checkpoint sequence counter in the wal-header */nCkpt54850,2068898
  u8 lockError;              /* True if a locking error has occurred */lockError54852,2068999
  WalIndexHdr *pSnapshot;    /* Start transaction here if not NULL */pSnapshot54855,2069108
#define WAL_NORMAL_MODE WAL_NORMAL_MODE54862,2069238
#define WAL_EXCLUSIVE_MODE WAL_EXCLUSIVE_MODE54863,2069268
#define WAL_HEAPMEMORY_MODE WAL_HEAPMEMORY_MODE54864,2069303
#define WAL_RDWR WAL_RDWR54869,2069376
#define WAL_RDONLY WAL_RDONLY54870,2069440
#define WAL_SHM_RDONLY WAL_SHM_RDONLY54871,2069500
typedef u16 ht_slot;ht_slot54877,2069701
struct WalIterator {WalIterator54894,2070317
  int iPrior;                     /* Last result returned from the iterator */iPrior54895,2070338
  int nSegment;                   /* Number of entries in aSegment[] */nSegment54896,2070417
  struct WalSegment {WalSegment54897,2070489
    int iNext;                    /* Next slot in aIndex[] not yet returned */iNext54898,2070511
    ht_slot *aIndex;              /* i0, i1, i2... such that aPgno[iN] ascend */aIndex54899,2070590
    u32 *aPgno;                   /* Array of page numbers. */aPgno54900,2070671
    int nEntry;                   /* Nr. of entries in aPgno[] and aIndex[] */nEntry54901,2070734
    int iZero;                    /* Frame number associated with aPgno[0] */iZero54902,2070813
  } aSegment[1];                  /* One for every 32KB page in the wal-index */aSegment54903,2070891
#define HASHTABLE_NPAGE HASHTABLE_NPAGE54914,2071243
#define HASHTABLE_HASH_1 HASHTABLE_HASH_154915,2071318
#define HASHTABLE_NSLOT HASHTABLE_NSLOT54916,2071390
#define HASHTABLE_NPAGE_ONE HASHTABLE_NPAGE_ONE54923,2071676
#define WALINDEX_PGSZ WALINDEX_PGSZ54926,2071829
static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){walIndexPage54939,2072356
static volatile WalCkptInfo *walCkptInfo(Wal *pWal){walCkptInfo54981,2073638
static volatile WalIndexHdr *walIndexHdr(Wal *pWal){walIndexHdr54989,2073894
#define BYTESWAP32(BYTESWAP3255001,2074393
static void walChecksumBytes(walChecksumBytes55015,2074819
static void walShmBarrier(Wal *pWal){walShmBarrier55053,2075663
static void walIndexWriteHdr(Wal *pWal){walIndexWriteHdr55064,2075932
static void walEncodeFrame(walEncodeFrame55090,2076896
static int walDecodeFrame(walDecodeFrame55121,2078110
static const char *walLockName(int lockIdx){walLockName55176,2079947
static int walLockShared(Wal *pWal, int lockIdx){walLockShared55200,2080677
static void walUnlockShared(Wal *pWal, int lockIdx){walUnlockShared55210,2081090
static int walLockExclusive(Wal *pWal, int lockIdx, int n){walLockExclusive55216,2081368
static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){walUnlockExclusive55226,2081807
static int walHash(u32 iPage){walHash55239,2082337
static int walNextHash(int iPriorHash){walNextHash55244,2082504
static int walHashGet(walHashGet55262,2083197
static int walFramePage(u32 iFrame){walFramePage55300,2084356
static u32 walFramePgno(Wal *pWal, u32 iFrame){walFramePgno55314,2084882
static void walCleanupHash(Wal *pWal){walCleanupHash55334,2085589
static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){walIndexAppend55396,2087815
static int walIndexRecover(Wal *pWal){walIndexRecover55485,2091013
static void walIndexClose(Wal *pWal, int isDelete){walIndexClose55652,2096938
SQLITE_PRIVATE int sqlite3WalOpen(sqlite3WalOpen55679,2097982
SQLITE_PRIVATE void sqlite3WalLimit(Wal *pWal, i64 iLimit){sqlite3WalLimit55753,2100545
static int walIteratorNext(walIteratorNext55767,2101070
static void walMerge(walMerge55820,2102976
static void walMergesort(walMergesort55877,2104814
static void walIteratorFree(WalIterator *p){walIteratorFree55940,2106837
static int walIteratorInit(Wal *pWal, WalIterator **pp){walIteratorInit55956,2107388
static int walBusyLock(walBusyLock56038,2110059
static int walPagesize(Wal *pWal){walPagesize56056,2110685
static void walRestartHdr(Wal *pWal, u32 salt1){walRestartHdr56077,2111503
static int walCheckpoint(walCheckpoint56124,2113588
static void walLimitSize(Wal *pWal, i64 nMax){walLimitSize56310,2121100
SQLITE_PRIVATE int sqlite3WalClose(sqlite3WalClose56327,2121489
static int walIndexTryHdr(Wal *pWal, int *pChanged){walIndexTryHdr56408,2124634
static int walIndexReadHdr(Wal *pWal, int *pChanged){walIndexReadHdr56466,2126835
#define WAL_RETRY WAL_RETRY56531,2129157
static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){walTryBeginRead56583,2132148
SQLITE_PRIVATE int sqlite3WalSnapshotRecover(Wal *pWal){sqlite3WalSnapshotRecover56802,2141605
SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){sqlite3WalBeginReadTransaction56874,2144106
SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){sqlite3WalEndReadTransaction56964,2147641
SQLITE_PRIVATE int sqlite3WalFindFrame(sqlite3WalFindFrame56980,2148174
SQLITE_PRIVATE int sqlite3WalReadFrame(sqlite3WalReadFrame57082,2152152
SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){sqlite3WalDbsize57102,2152854
SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){sqlite3WalBeginWriteTransaction57123,2153509
SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){sqlite3WalEndWriteTransaction57161,2154510
SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){sqlite3WalUndo57183,2155259
SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){sqlite3WalSavepoint57223,2156875
SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){sqlite3WalSavepointUndo57237,2157374
static int walRestartLog(Wal *pWal){walRestartLog57274,2158656
typedef struct WalWriter {WalWriter57321,2160327
  Wal *pWal;                   /* The complete WAL information */pWal57322,2160354
  sqlite3_file *pFd;           /* The WAL file to which we write */pFd57323,2160420
  sqlite3_int64 iSyncPoint;    /* Fsync at this offset */iSyncPoint57324,2160488
  int syncFlags;               /* Flags for the fsync */syncFlags57325,2160546
  int szPage;                  /* Size of one page */szPage57326,2160603
} WalWriter;WalWriter57327,2160657
static int walWriteToLog(walWriteToLog57337,2160957
static int walWriteOneFrame(walWriteOneFrame57362,2161820
static int walRewriteChecksums(Wal *pWal, u32 iLast){walRewriteChecksums57392,2163089
SQLITE_PRIVATE int sqlite3WalFrames(sqlite3WalFrames57441,2164960
SQLITE_PRIVATE int sqlite3WalCheckpoint(sqlite3WalCheckpoint57681,2173910
SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){sqlite3WalCallback57791,2178177
SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){sqlite3WalExclusiveMode57824,2179504
SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){sqlite3WalHeapMemory57866,2180900
SQLITE_PRIVATE int sqlite3WalSnapshotGet(Wal *pWal, sqlite3_snapshot **ppSnapshot){sqlite3WalSnapshotGet57875,2181207
SQLITE_PRIVATE void sqlite3WalSnapshotOpen(Wal *pWal, sqlite3_snapshot *pSnapshot){sqlite3WalSnapshotOpen57899,2181838
SQLITE_API int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2){sqlite3_snapshot_cmp57907,2182115
SQLITE_PRIVATE int sqlite3WalFramesize(Wal *pWal){sqlite3WalFramesize57927,2182888
SQLITE_PRIVATE sqlite3_file *sqlite3WalFile(Wal *pWal){sqlite3WalFile57935,2183081
#define MX_CELL_SIZE(MX_CELL_SIZE58183,2194522
#define MX_CELL(MX_CELL58190,2194842
typedef struct MemPage MemPage;MemPage58193,2194913
typedef struct BtLock BtLock;BtLock58194,2194945
typedef struct CellInfo CellInfo;CellInfo58195,2194975
#  define SQLITE_FILE_HEADER SQLITE_FILE_HEADER58210,2195667
#define PTF_INTKEY PTF_INTKEY58217,2195850
#define PTF_ZERODATA PTF_ZERODATA58218,2195877
#define PTF_LEAFDATA PTF_LEAFDATA58219,2195904
#define PTF_LEAF PTF_LEAF58220,2195931
struct MemPage {MemPage58234,2196478
  u8 isInit;           /* True if previously initialized. MUST BE FIRST! */isInit58235,2196495
  u8 bBusy;            /* Prevent endless loops on corrupt database files */bBusy58236,2196571
  u8 intKey;           /* True if table b-trees.  False for index b-trees */intKey58237,2196648
  u8 intKeyLeaf;       /* True if the leaf of an intKey table */intKeyLeaf58238,2196725
  Pgno pgno;           /* Page number for this page */pgno58239,2196790
  u8 leaf;             /* True if a leaf page */leaf58242,2196995
  u8 hdrOffset;        /* 100 for page 1.  0 otherwise */hdrOffset58243,2197044
  u8 childPtrSize;     /* 0 if leaf==1.  4 if leaf==0 */childPtrSize58244,2197102
  u8 max1bytePayload;  /* min(maxLocal,127) */max1bytePayload58245,2197159
  u8 nOverflow;        /* Number of overflow cell bodies in aCell[] */nOverflow58246,2197206
  u16 maxLocal;        /* Copy of BtShared.maxLocal or BtShared.maxLeaf */maxLocal58247,2197277
  u16 minLocal;        /* Copy of BtShared.minLocal or BtShared.minLeaf */minLocal58248,2197352
  u16 cellOffset;      /* Index in aData of first cell pointer */cellOffset58249,2197427
  u16 nFree;           /* Number of free bytes on the page */nFree58250,2197493
  u16 nCell;           /* Number of cells on this page, local and ovfl */nCell58251,2197555
  u16 maskPage;        /* Mask for page offset */maskPage58252,2197629
  u16 aiOvfl[4];       /* Insert the i-th overflow cell before the aiOvfl-thaiOvfl58253,2197679
  u8 *apOvfl[4];       /* Pointers to the body of overflow cells */apOvfl58255,2197803
  BtShared *pBt;       /* Pointer to BtShared that this page is part of */pBt58256,2197871
  u8 *aData;           /* Pointer to disk image of the page data */aData58257,2197946
  u8 *aDataEnd;        /* One byte past the end of usable data */aDataEnd58258,2198014
  u8 *aCellIdx;        /* The cell index area */aCellIdx58259,2198080
  u8 *aDataOfst;       /* Same as aData for leaves.  aData+4 for interior */aDataOfst58260,2198129
  DbPage *pDbPage;     /* Pager page handle */pDbPage58261,2198206
  u16 (*xCellSize)(MemPage*,u8*);             /* cellSizePtr method */xCellSize58262,2198253
  void (*xParseCell)(MemPage*,u8*,CellInfo*); /* btreeParseCell method */xParseCell58263,2198324
struct BtLock {BtLock58273,2198738
  Btree *pBtree;        /* Btree handle holding this lock */pBtree58274,2198754
  Pgno iTable;          /* Root page of table */iTable58275,2198815
  u8 eLock;             /* READ_LOCK or WRITE_LOCK */eLock58276,2198864
  BtLock *pNext;        /* Next in BtShared.pLock list */pNext58277,2198918
#define READ_LOCK READ_LOCK58281,2199020
#define WRITE_LOCK WRITE_LOCK58282,2199044
struct Btree {Btree58305,2200104
  sqlite3 *db;       /* The database connection holding this btree */db58306,2200119
  BtShared *pBt;     /* Sharable content of this btree */pBt58307,2200189
  u8 inTrans;        /* TRANS_NONE, TRANS_READ or TRANS_WRITE */inTrans58308,2200247
  u8 sharable;       /* True if we can share pBt with another db */sharable58309,2200312
  u8 locked;         /* True if db currently has pBt locked */locked58310,2200380
  u8 hasIncrblobCur; /* True if there are one or more Incrblob cursors */hasIncrblobCur58311,2200443
  int wantToLock;    /* Number of nested calls to sqlite3BtreeEnter() */wantToLock58312,2200517
  int nBackup;       /* Number of backup operations reading this btree */nBackup58313,2200590
  u32 iDataVersion;  /* Combines with pBt->pPager->iDataVersion */iDataVersion58314,2200664
  Btree *pNext;      /* List of other sharable Btrees from the same db */pNext58315,2200731
  Btree *pPrev;      /* Back pointer of the same list */pPrev58316,2200805
  BtLock lock;       /* Object used to lock page 1 */lock58318,2200895
#define TRANS_NONE TRANS_NONE58329,2201227
#define TRANS_READ TRANS_READ58330,2201249
#define TRANS_WRITE TRANS_WRITE58331,2201271
struct BtShared {BtShared58368,2202773
  Pager *pPager;        /* The page cache */pPager58369,2202791
  sqlite3 *db;          /* Database connection currently using this Btree */db58370,2202836
  BtCursor *pCursor;    /* A list of all open cursors */pCursor58371,2202913
  MemPage *pPage1;      /* First page of the database */pPage158372,2202970
  u8 openFlags;         /* Flags to sqlite3BtreeOpen() */openFlags58373,2203027
  u8 autoVacuum;        /* True if auto-vacuum is enabled */autoVacuum58375,2203116
  u8 incrVacuum;        /* True if incr-vacuum is enabled */incrVacuum58376,2203177
  u8 bDoTruncate;       /* True to truncate db on commit */bDoTruncate58377,2203238
  u8 inTransaction;     /* Transaction state */inTransaction58379,2203305
  u8 max1bytePayload;   /* Maximum first byte of cell for a 1-byte payload */max1bytePayload58380,2203353
  u8 optimalReserve;    /* Desired amount of reserved space per page */optimalReserve58382,2203455
  u16 btsFlags;         /* Boolean parameters.  See BTS_* macros below */btsFlags58384,2203534
  u16 maxLocal;         /* Maximum local payload in non-LEAFDATA tables */maxLocal58385,2203608
  u16 minLocal;         /* Minimum local payload in non-LEAFDATA tables */minLocal58386,2203683
  u16 maxLeaf;          /* Maximum local payload in a LEAFDATA table */maxLeaf58387,2203758
  u16 minLeaf;          /* Minimum local payload in a LEAFDATA table */minLeaf58388,2203830
  u32 pageSize;         /* Total number of bytes on a page */pageSize58389,2203902
  u32 usableSize;       /* Number of usable bytes on each page */usableSize58390,2203964
  int nTransaction;     /* Number of open transactions (read + write) */nTransaction58391,2204030
  u32 nPage;            /* Number of pages in the database */nPage58392,2204103
  void *pSchema;        /* Pointer to space allocated by sqlite3BtreeSchema() */pSchema58393,2204165
  void (*xFreeSchema)(void*);  /* Destructor for BtShared.pSchema */xFreeSchema58394,2204246
  sqlite3_mutex *mutex; /* Non-recursive mutex required to access this object */mutex58395,2204315
  Bitvec *pHasContent;  /* Set of pages moved to free-list this transaction */pHasContent58396,2204396
  int nRef;             /* Number of references to this structure */nRef58398,2204508
  BtShared *pNext;      /* Next on a list of sharable BtShared structs */pNext58399,2204577
  BtLock *pLock;        /* List of locks held on this shared-btree struct */pLock58400,2204651
  Btree *pWriter;       /* Btree with currently open write transaction */pWriter58401,2204728
  u8 *pTmpSpace;        /* Temp space sufficient to hold a single cell */pTmpSpace58403,2204809
#define BTS_READ_ONLY BTS_READ_ONLY58409,2204933
#define BTS_PAGESIZE_FIXED BTS_PAGESIZE_FIXED58410,2205005
#define BTS_SECURE_DELETE BTS_SECURE_DELETE58411,2205084
#define BTS_INITIALLY_EMPTY BTS_INITIALLY_EMPTY58412,2205160
#define BTS_NO_WAL BTS_NO_WAL58413,2205238
#define BTS_EXCLUSIVE BTS_EXCLUSIVE58414,2205316
#define BTS_PENDING BTS_PENDING58415,2205390
struct CellInfo {CellInfo58422,2205669
  i64 nKey;      /* The key for INTKEY tables, or nPayload otherwise */nKey58423,2205687
  u8 *pPayload;  /* Pointer to the start of payload */pPayload58424,2205759
  u32 nPayload;  /* Bytes of payload */nPayload58425,2205814
  u16 nLocal;    /* Amount of payload held locally, not on overflow */nLocal58426,2205854
  u16 nSize;     /* Size of the cell content on the main b-tree page */nSize58427,2205925
#define BTCURSOR_MAX_DEPTH BTCURSOR_MAX_DEPTH58439,2206379
struct BtCursor {BtCursor58460,2207176
  Btree *pBtree;            /* The Btree to which this cursor belongs */pBtree58461,2207194
  BtShared *pBt;            /* The BtShared this cursor points to */pBt58462,2207267
  BtCursor *pNext;          /* Forms a linked list of all cursors */pNext58463,2207336
  Pgno *aOverflow;          /* Cache of overflow page locations */aOverflow58464,2207405
  CellInfo info;            /* A parse of the cell we are pointing at */info58465,2207472
  i64 nKey;                 /* Size of pKey, or last integer key */nKey58466,2207545
  void *pKey;               /* Saved key that was cursor last known position */pKey58467,2207613
  Pgno pgnoRoot;            /* The root page of this tree */pgnoRoot58468,2207693
  int nOvflAlloc;           /* Allocated size of aOverflow[] array */nOvflAlloc58469,2207754
  int skipNext;    /* Prev() is noop if negative. Next() is noop if positive.skipNext58470,2207824
  u8 curFlags;              /* zero or more BTCF_* flags defined below */curFlags58472,2207962
  u8 curPagerFlags;         /* Flags to send to sqlite3PagerGet() */curPagerFlags58473,2208036
  u8 eState;                /* One of the CURSOR_XXX constants (see below) */eState58474,2208105
  u8 hints;                 /* As configured by CursorSetHints() */hints58475,2208183
  i8 iPage;                 /* Index of current page in apPage */iPage58479,2208408
  u8 curIntKey;             /* Value of apPage[0]->intKey */curIntKey58480,2208474
  struct KeyInfo *pKeyInfo; /* Argument passed to comparison function */pKeyInfo58481,2208535
  void *padding1;           /* Make object size a multiple of 16 */padding158482,2208608
  u16 aiIdx[BTCURSOR_MAX_DEPTH];        /* Current index in apPage[i] */aiIdx58483,2208676
  MemPage *apPage[BTCURSOR_MAX_DEPTH];  /* Pages from root to current page */apPage58484,2208749
#define BTCF_WriteFlag BTCF_WriteFlag58490,2208875
#define BTCF_ValidNKey BTCF_ValidNKey58491,2208937
#define BTCF_ValidOvfl BTCF_ValidOvfl58492,2209003
#define BTCF_AtLast BTCF_AtLast58493,2209069
#define BTCF_Incrblob BTCF_Incrblob58494,2209145
#define BTCF_Multiple BTCF_Multiple58495,2209218
#define CURSOR_INVALID CURSOR_INVALID58527,2210552
#define CURSOR_VALID CURSOR_VALID58528,2210587
#define CURSOR_SKIPNEXT CURSOR_SKIPNEXT58529,2210622
#define CURSOR_REQUIRESEEK CURSOR_REQUIRESEEK58530,2210657
#define CURSOR_FAULT CURSOR_FAULT58531,2210692
# define PENDING_BYTE_PAGE(PENDING_BYTE_PAGE58536,2210808
#define PTRMAP_PAGENO(PTRMAP_PAGENO58553,2211530
#define PTRMAP_PTROFFSET(PTRMAP_PTROFFSET58554,2211587
#define PTRMAP_ISPAGE(PTRMAP_ISPAGE58555,2211650
#define PTRMAP_ROOTPAGE PTRMAP_ROOTPAGE58588,2213346
#define PTRMAP_FREEPAGE PTRMAP_FREEPAGE58589,2213372
#define PTRMAP_OVERFLOW1 PTRMAP_OVERFLOW158590,2213398
#define PTRMAP_OVERFLOW2 PTRMAP_OVERFLOW258591,2213425
#define PTRMAP_BTREE PTRMAP_BTREE58592,2213452
#define btreeIntegrity(btreeIntegrity58597,2213610
#define ISAUTOVACUUM ISAUTOVACUUM58610,2214113
#define ISAUTOVACUUM ISAUTOVACUUM58612,2214158
typedef struct IntegrityCk IntegrityCk;IntegrityCk58626,2214654
struct IntegrityCk {IntegrityCk58627,2214694
  BtShared *pBt;    /* The tree being checked out */pBt58628,2214715
  Pager *pPager;    /* The associated pager.  Also accessible by pBt->pPager */pPager58629,2214768
  u8 *aPgRef;       /* 1 bit per page in the db (see above) */aPgRef58630,2214848
  Pgno nPage;       /* Number of pages in the database */nPage58631,2214911
  int mxErr;        /* Stop accumulating errors when this reaches zero */mxErr58632,2214969
  int nErr;         /* Number of messages written to zErrMsg so far */nErr58633,2215043
  int mallocFailed; /* A memory allocation error has occurred */mallocFailed58634,2215114
  const char *zPfx; /* Error message prefix */zPfx58635,2215179
  int v1, v2;       /* Values for up to two %d fields in zPfx */v158636,2215226
  int v1, v2;       /* Values for up to two %d fields in zPfx */v258636,2215226
  StrAccum errMsg;  /* Accumulate the error message text here */errMsg58637,2215291
  u32 *heap;        /* Min-heap used for analyzing cell coverage */heap58638,2215356
#define get2byte(get2byte58644,2215511
#define put2byte(put2byte58645,2215554
#define get4byte get4byte58646,2215618
#define put4byte put4byte58647,2215651
# define get2byteAligned(get2byteAligned58655,2215907
# define get2byteAligned(get2byteAligned58657,2216002
# define get2byteAligned(get2byteAligned58659,2216112
# define get2byteAligned(get2byteAligned58661,2216176
static void lockBtreeMutex(Btree *p){lockBtreeMutex58674,2216622
static void SQLITE_NOINLINE unlockBtreeMutex(Btree *p){unlockBtreeMutex58688,2216967
SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){sqlite3BtreeEnter58718,2218064
static void SQLITE_NOINLINE btreeLockCarefully(Btree *p){btreeLockCarefully58752,2219424
SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){sqlite3BtreeLeave58790,2220470
SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){sqlite3BtreeHoldsMutex58808,2220898
static void SQLITE_NOINLINE btreeEnterAll(sqlite3 *db){btreeEnterAll58833,2221852
SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){sqlite3BtreeEnterAll58847,2222159
static void SQLITE_NOINLINE btreeLeaveAll(sqlite3 *db){btreeLeaveAll58850,2222265
SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){sqlite3BtreeLeaveAll58859,2222477
SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){sqlite3BtreeHoldsAllMutexes58870,2222776
SQLITE_PRIVATE int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){sqlite3SchemaMutexHeld58899,2223485
SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){sqlite3BtreeEnter58923,2224327
SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){sqlite3BtreeEnterAll58926,2224400
SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){sqlite3BtreeEnterCursor58945,2224940
SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){sqlite3BtreeLeaveCursor58949,2225061
static const char zMagicHeader[] = SQLITE_FILE_HEADER;zMagicHeader58980,2226117
# define TRACE(TRACE58990,2226390
#define get2byteNotZero(get2byteNotZero59002,2226824
#define BTALLOC_ANY BTALLOC_ANY59007,2226955
#define BTALLOC_EXACT BTALLOC_EXACT59008,2227013
#define BTALLOC_LE BTALLOC_LE59009,2227085
#define IfNotOmitAV(IfNotOmitAV59018,2227366
#define IfNotOmitAV(IfNotOmitAV59020,2227405
SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;sqlite3SharedCacheList59033,2227796
static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;sqlite3SharedCacheList59035,2227866
SQLITE_API int sqlite3_enable_shared_cache(int enable){sqlite3_enable_shared_cache59047,2228249
  #define querySharedCacheTableLock(querySharedCacheTableLock59065,2228884
  #define setSharedCacheTableLock(setSharedCacheTableLock59066,2228937
  #define clearAllSharedCacheTableLocks(clearAllSharedCacheTableLocks59067,2228988
  #define downgradeAllSharedCacheTableLocks(downgradeAllSharedCacheTableLocks59068,2229031
  #define hasSharedCacheTableLock(hasSharedCacheTableLock59069,2229078
  #define hasReadConflicts(hasReadConflicts59070,2229123
static int hasSharedCacheTableLock(hasSharedCacheTableLock59098,2230181
static int hasReadConflicts(Btree *pBtree, Pgno iRoot){hasReadConflicts59185,2233255
static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){querySharedCacheTableLock59205,2233821
static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){setSharedCacheTableLock59277,2236466
static void clearAllSharedCacheTableLocks(Btree *p){clearAllSharedCacheTableLocks59341,2238609
static void downgradeAllSharedCacheTableLocks(Btree *p){downgradeAllSharedCacheTableLocks59385,2240012
static int cursorHoldsMutex(BtCursor *p){cursorHoldsMutex59408,2240621
static int cursorOwnsBtShared(BtCursor *p){cursorOwnsBtShared59420,2241234
#define invalidateOverflowCache(invalidateOverflowCache59430,2241480
static void invalidateAllOverflowCache(BtShared *pBt){invalidateAllOverflowCache59436,2241665
static void invalidateIncrblobCursors(invalidateIncrblobCursors59458,2242467
  #define invalidateIncrblobCursors(invalidateIncrblobCursors59479,2243113
static int btreeSetHasContent(BtShared *pBt, Pgno pgno){btreeSetHasContent59517,2244971
static int btreeGetHasContent(BtShared *pBt, Pgno pgno){btreeGetHasContent59539,2245646
static void btreeClearHasContent(BtShared *pBt){btreeClearHasContent59548,2245942
static void btreeReleaseAllCursorPages(BtCursor *pCur){btreeReleaseAllCursorPages59556,2246117
static int saveCursorKey(BtCursor *pCur){saveCursorKey59578,2246905
static int saveCursorPosition(BtCursor *pCur){saveCursorPosition59614,2247930
static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){saveAllCursors59661,2249642
static int SQLITE_NOINLINE saveCursorsOnList(saveCursorsOnList59678,2250357
SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){sqlite3BtreeClearCursor59703,2251032
static int btreeMoveto(btreeMoveto59715,2251409
static int btreeRestoreCursorPosition(BtCursor *pCur){btreeRestoreCursorPosition59752,2252695
#define restoreCursorPosition(restoreCursorPosition59774,2253323
SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur){sqlite3BtreeCursorHasMoved59791,2253970
SQLITE_PRIVATE int sqlite3BtreeCursorRestore(BtCursor *pCur, int *pDifferentRow){sqlite3BtreeCursorRestore59808,2254640
SQLITE_PRIVATE void sqlite3BtreeCursorHint(BtCursor *pCur, int eHintType, ...){sqlite3BtreeCursorHint59833,2255298
SQLITE_PRIVATE void sqlite3BtreeCursorHintFlags(BtCursor *pCur, unsigned x){sqlite3BtreeCursorHintFlags59841,2255500
static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){ptrmapPageno59857,2256021
static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){ptrmapPut59881,2256721
static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){ptrmapGet59933,2258326
  #define ptrmapPut(ptrmapPut59965,2259277
  #define ptrmapGet(ptrmapGet59966,2259309
  #define ptrmapPutOvflPtr(ptrmapPutOvflPtr59967,2259348
#define findCell(findCell59980,2259771
#define findCellPastPtr(findCellPastPtr59982,2259869
static SQLITE_NOINLINE void btreeParseCellAdjustSizeForOverflow(btreeParseCellAdjustSizeForOverflow59992,2260211
static void btreeParseCellPtrNoPayload(btreeParseCellPtrNoPayload60037,2261980
static void btreeParseCellPtr(btreeParseCellPtr60054,2262505
static void btreeParseCellPtrIndex(btreeParseCellPtrIndex60122,2264427
static void btreeParseCell(btreeParseCell60159,2265678
static u16 cellSizePtr(MemPage *pPage, u8 *pCell){cellSizePtr60179,2266408
static u16 cellSizePtrNoPayload(MemPage *pPage, u8 *pCell){cellSizePtrNoPayload60227,2268084
static u16 cellSize(MemPage *pPage, int iCell){cellSize60253,2268967
static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){ptrmapPutOvflPtr60264,2269267
static int defragmentPage(MemPage *pPage, int nMaxFrag){defragmentPage60289,2270144
static u8 *pageFindSlot(MemPage *pPg, int nByte, int *pRc){pageFindSlot60427,2275411
static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){allocateSpace60490,2277718
static int freeSpace(MemPage *pPage, u16 iStart, u16 iSize){freeSpace60580,2281226
static int decodeFlags(MemPage *pPage, int flagByte){decodeFlags60682,2285062
static int btreeInitPage(MemPage *pPage){btreeInitPage60740,2287236
static void zeroPage(MemPage *pPage, int flags){zeroPage60876,2292647
static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){btreePageFromDbPage60913,2293854
static int btreeGetPage(btreeGetPage60937,2294796
static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){btreePageLookup60959,2295564
static Pgno btreePagecount(BtShared *pBt){btreePagecount60973,2295942
SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){sqlite3BtreeLastPage60976,2296008
static int getAndInitPage(getAndInitPage60995,2296654
static void releasePageNotNull(MemPage *pPage){releasePageNotNull61049,2298349
static void releasePage(MemPage *pPage){releasePage61058,2298704
static int btreeGetUnusedPage(btreeGetUnusedPage61071,2299054
static void pageReinit(DbPage *pData){pageReinit61100,2299943
static int btreeInvokeBusyHandler(void *pArg){btreeInvokeBusyHandler61122,2300740
SQLITE_PRIVATE int sqlite3BtreeOpen(sqlite3BtreeOpen61150,2301849
static int removeFromSharingList(BtShared *pBt){removeFromSharingList61442,2312065
static void allocateTempSpace(BtShared *pBt){allocateTempSpace61481,2313076
static void freeTempSpace(BtShared *pBt){freeTempSpace61510,2314225
SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){sqlite3BtreeClose61521,2314444
SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){sqlite3BtreeSetCacheSize61583,2316287
SQLITE_PRIVATE int sqlite3BtreeSetSpillSize(Btree *p, int mxPage){sqlite3BtreeSetSpillSize61602,2316989
SQLITE_PRIVATE int sqlite3BtreeSetMmapLimit(Btree *p, sqlite3_int64 szMmap){sqlite3BtreeSetMmapLimit61617,2317377
SQLITE_PRIVATE int sqlite3BtreeSetPagerFlags(sqlite3BtreeSetPagerFlags61636,2318162
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){sqlite3BtreeSetPageSize61669,2319359
SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){sqlite3BtreeGetPageSize61702,2320363
SQLITE_PRIVATE int sqlite3BtreeGetReserveNoMutex(Btree *p){sqlite3BtreeGetReserveNoMutex61717,2320963
SQLITE_PRIVATE int sqlite3BtreeGetOptimalReserve(Btree *p){sqlite3BtreeGetOptimalReserve61733,2321471
SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){sqlite3BtreeMaxPageCount61750,2321930
SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){sqlite3BtreeSecureDelete61763,2322310
SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){sqlite3BtreeSetAutoVacuum61782,2322921
SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){sqlite3BtreeGetAutoVacuum61806,2323499
static void setDefaultSyncFlag(BtShared *pBt, u8 safety_level){setDefaultSyncFlag61829,2324137
# define setDefaultSyncFlag(setDefaultSyncFlag61845,2324590
static int lockBtree(BtShared *pBt){lockBtree61857,2324987
static int countValidCursors(BtShared *pBt, int wrOnly){countValidCursors62041,2331669
static void unlockBtreeIfUnused(BtShared *pBt){unlockBtreeIfUnused62060,2332259
static int newDatabase(BtShared *pBt){newDatabase62077,2332808
SQLITE_PRIVATE int sqlite3BtreeNewDb(Btree *p){sqlite3BtreeNewDb62121,2334128
SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){sqlite3BtreeBeginTrans62165,2335987
static int setChildPtrmaps(MemPage *pPage){setChildPtrmaps62312,2340667
static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){modifyPagePointer62357,2342074
static int relocatePage(relocatePage62418,2343823
static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg, int bCommit){incrVacuumStep62511,2347231
static Pgno finalDbSize(BtShared *pBt, Pgno nOrig, Pgno nFree){finalDbSize62607,2350164
SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){sqlite3BtreeIncrVacuum62633,2351102
static int autoVacuumCommit(BtShared *pBt){autoVacuumCommit62675,2352323
# define setChildPtrmaps(setChildPtrmaps62725,2354020
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){sqlite3BtreeCommitPhaseOne62754,2355428
static void btreeEndTransaction(Btree *p){btreeEndTransaction62781,2356128
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){sqlite3BtreeCommitPhaseTwo62843,2358748
SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){sqlite3BtreeCommit62875,2359600
SQLITE_PRIVATE int sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode, int writeOnly){sqlite3BtreeTripAllCursors62912,2361083
SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p, int tripCode, int writeOnly){sqlite3BtreeRollback62955,2362395
SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){sqlite3BtreeBeginStmt63024,2364839
SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){sqlite3BtreeSavepoint63055,2366109
static int btreeCursor(btreeCursor63127,2369187
SQLITE_PRIVATE int sqlite3BtreeCursor(sqlite3BtreeCursor63187,2371447
SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){sqlite3BtreeCursorSize63213,2372340
SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){sqlite3BtreeCursorZero63225,2372772
SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){sqlite3BtreeCloseCursor63233,2372983
  static void assertCellInfo(BtCursor *pCur){assertCellInfo63273,2374068
  #define assertCellInfo(assertCellInfo63281,2374349
static SQLITE_NOINLINE void getCellInfo(BtCursor *pCur){getCellInfo63283,2374384
SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){sqlite3BtreeCursorIsValid63299,2374941
SQLITE_PRIVATE int sqlite3BtreeCursorIsValidNN(BtCursor *pCur){sqlite3BtreeCursorIsValidNN63303,2375070
SQLITE_PRIVATE i64 sqlite3BtreeIntegerKey(BtCursor *pCur){sqlite3BtreeIntegerKey63314,2375461
SQLITE_PRIVATE u32 sqlite3BtreePayloadSize(BtCursor *pCur){sqlite3BtreePayloadSize63331,2376079
static int getOverflowPage(getOverflowPage63357,2377216
static int copyPayload(copyPayload63425,2379249
static int accessPayload(accessPayload63475,2381143
SQLITE_PRIVATE int sqlite3BtreePayload(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){sqlite3BtreePayload63677,2388600
static SQLITE_NOINLINE int accessPayloadChecked(accessPayloadChecked63691,2389161
SQLITE_PRIVATE int sqlite3BtreePayloadChecked(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){sqlite3BtreePayloadChecked63705,2389490
static const void *fetchPayload(fetchPayload63734,2390787
SQLITE_PRIVATE const void *sqlite3BtreePayloadFetch(BtCursor *pCur, u32 *pAmt){sqlite3BtreePayloadFetch63768,2392201
static int moveToChild(BtCursor *pCur, u32 newPgno){moveToChild63782,2392682
static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){assertParentIndex63808,2393555
#  define assertParentIndex(assertParentIndex63819,2393973
static void moveToParent(BtCursor *pCur){moveToParent63830,2394285
static int moveToRoot(BtCursor *pCur){moveToRoot63867,2395872
static int moveToLeftmost(BtCursor *pCur){moveToLeftmost63950,2398481
static int moveToRightmost(BtCursor *pCur){moveToRightmost63975,2399327
SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){sqlite3BtreeFirst63998,2400067
SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){sqlite3BtreeLast64021,2400746
SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked(sqlite3BtreeMovetoUnpacked64092,2403190
SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){sqlite3BtreeEof64335,2412116
SQLITE_PRIVATE i64 sqlite3BtreeRowCountEst(BtCursor *pCur){sqlite3BtreeRowCountEst64348,2412573
static SQLITE_NOINLINE int btreeNext(BtCursor *pCur, int *pRes){btreeNext64388,2414231
SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){sqlite3BtreeNext64455,2416108
static SQLITE_NOINLINE int btreePrevious(BtCursor *pCur, int *pRes){btreePrevious64498,2417883
SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){sqlite3BtreePrevious64557,2419461
static int allocateBtreePage(allocateBtreePage64597,2421067
static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){freePage264919,2432940
static void freePage(MemPage *pPage, int *pRC){freePage65047,2437936
static int clearCell(clearCell65058,2438246
static int fillInCell(fillInCell65137,2441143
static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){dropCell65314,2447105
static void insertCell(insertCell65369,2449044
typedef struct CellArray CellArray;CellArray65462,2452933
struct CellArray {CellArray65463,2452969
  int nCell;              /* Number of cells in apCell[] */nCell65464,2452988
  MemPage *pRef;          /* Reference page */pRef65465,2453048
  u8 **apCell;            /* All cells begin balanced */apCell65466,2453095
  u16 *szCell;            /* Local size of all cells in apCell[] */szCell65467,2453152
static void populateCellCache(CellArray *p, int idx, int N){populateCellCache65474,2453309
static SQLITE_NOINLINE u16 computeCellSize(CellArray *p, int N){computeCellSize65492,2453766
static u16 cachedCellSize(CellArray *p, int N){cachedCellSize65498,2453977
static int rebuildPage(rebuildPage65517,2454689
static int pageInsertArray(pageInsertArray65586,2457469
static int pageFreeArray(pageFreeArray65632,2459292
static int editPage(editPage65689,2461146
#define NN NN65795,2464721
#define NB NB65796,2464796
static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){balance_quick65823,2465980
static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){copyNodeContent65967,2471393
static int balance_nonroot(balance_nonroot66048,2474881
static int balance_deeper(MemPage *pRoot, MemPage **ppChild){balance_deeper66811,2503711
static int balance(BtCursor *pCur){balance66868,2505719
SQLITE_PRIVATE int sqlite3BtreeInsert(sqlite3BtreeInsert67015,2511926
SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur, u8 flags){sqlite3BtreeDelete67229,2520613
static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){btreeCreateTable67394,2527311
SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){sqlite3BtreeCreateTable67537,2531898
static int clearDatabasePage(clearDatabasePage67549,2532193
SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){sqlite3BtreeClearTable67616,2534228
SQLITE_PRIVATE int sqlite3BtreeClearTableOfCursor(BtCursor *pCur){sqlite3BtreeClearTableOfCursor67640,2534929
static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){btreeDropTable67664,2536050
SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){sqlite3BtreeDropTable67746,2538241
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){sqlite3BtreeGetMeta67775,2539432
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){sqlite3BtreeUpdateMeta67805,2540280
SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){sqlite3BtreeCount67838,2541281
SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){sqlite3BtreePager67908,2543670
static void checkAppendMsg(checkAppendMsg67916,2543840
static int getPageReferenced(IntegrityCk *pCheck, Pgno iPg){getPageReferenced67946,2544563
static void setPageReferenced(IntegrityCk *pCheck, Pgno iPg){setPageReferenced67954,2544832
static int checkRef(IntegrityCk *pCheck, Pgno iPage){checkRef67968,2545320
static void checkPtrmap(checkPtrmap67988,2545873
static void checkList(checkList68017,2546785
static void btreeHeapInsert(u32 *aHeap, u32 x){btreeHeapInsert68109,2549969
static int btreeHeapPull(u32 *aHeap, u32 *pOut){btreeHeapPull68119,2550181
static int checkTreePage(checkTreePage68153,2551142
SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck(sqlite3BtreeIntegrityCheck68417,2561252
SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){sqlite3BtreeGetFilename68536,2564946
SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){sqlite3BtreeGetJournalname68549,2565405
SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){sqlite3BtreeIsInTrans68557,2565607
SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){sqlite3BtreeCheckpoint68571,2566071
SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){sqlite3BtreeIsInReadTrans68590,2566531
SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){sqlite3BtreeIsInBackup68596,2566684
SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){sqlite3BtreeSchema68622,2567824
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){sqlite3BtreeSchemaLocked68638,2568314
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){sqlite3BtreeLockTable68655,2568791
SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){sqlite3BtreePutData68685,2569797
SQLITE_PRIVATE void sqlite3BtreeIncrblobCursor(BtCursor *pCur){sqlite3BtreeIncrblobCursor68733,2571556
SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){sqlite3BtreeSetVersion68744,2571872
SQLITE_PRIVATE int sqlite3BtreeCursorHasHint(BtCursor *pCsr, unsigned int mask){sqlite3BtreeCursorHasHint68779,2572887
SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){sqlite3BtreeIsReadonly68786,2573059
SQLITE_PRIVATE int sqlite3HeaderSizeBtree(void){ return ROUND8(sizeof(MemPage)); }sqlite3HeaderSizeBtree68793,2573237
SQLITE_PRIVATE int sqlite3BtreeSharable(Btree *p){sqlite3BtreeSharable68799,2573435
SQLITE_PRIVATE int sqlite3BtreeConnectionCount(Btree *p){sqlite3BtreeConnectionCount68808,2573720
struct sqlite3_backup {sqlite3_backup68836,2574601
  sqlite3* pDestDb;        /* Destination database handle */pDestDb68837,2574625
  Btree *pDest;            /* Destination b-tree file */pDest68838,2574686
  u32 iDestSchema;         /* Original schema cookie in destination */iDestSchema68839,2574743
  int bDestLocked;         /* True once a write-transaction is open on pDest */bDestLocked68840,2574814
  Pgno iNext;              /* Page number of the next source page to copy */iNext68842,2574895
  sqlite3* pSrcDb;         /* Source database handle */pSrcDb68843,2574972
  Btree *pSrc;             /* Source b-tree file */pSrc68844,2575028
  int rc;                  /* Backup process error code */rc68846,2575081
  Pgno nRemaining;         /* Number of pages left to copy */nRemaining68851,2575285
  Pgno nPagecount;         /* Total number of pages to copy */nPagecount68852,2575347
  int isAttached;          /* True once backup has been registered with pager */isAttached68854,2575411
  sqlite3_backup *pNext;   /* Next backup associated with source pager */pNext68855,2575492
static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){findBtree68897,2577395
static int setDestPgsz(sqlite3_backup *p){setDestPgsz68928,2578119
static int checkReadTransaction(sqlite3 *db, Btree *p){checkReadTransaction68940,2578531
SQLITE_API sqlite3_backup *sqlite3_backup_init(sqlite3_backup_init68956,2579069
static int isFatalError(int rc){isFatalError69033,2581755
static int backupOnePage(backupOnePage69042,2582028
static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){backupTruncateFile69138,2585681
static void attachBackupObject(sqlite3_backup *p){attachBackupObject69151,2586047
SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){sqlite3_backup_step69163,2586346
SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){sqlite3_backup_finish69417,2596003
SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){sqlite3_backup_remaining69469,2597576
SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){sqlite3_backup_pagecount69483,2597885
static SQLITE_NOINLINE void backupUpdate(backupUpdate69505,2598588
SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){sqlite3BackupUpdate69530,2599333
SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){sqlite3BackupRestart69545,2599993
SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){sqlite3BtreeCopyFile69562,2600564
SQLITE_PRIVATE int sqlite3VdbeCheckMemInvariants(Mem *p){sqlite3VdbeCheckMemInvariants69646,2603426
SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){sqlite3VdbeChangeEncoding69699,2605342
SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){sqlite3VdbeMemGrow69734,2606513
SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){sqlite3VdbeMemClearAndResize69791,2608494
SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){sqlite3VdbeMemMakeWriteable69809,2609051
SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){sqlite3VdbeMemExpandBlob69836,2609816
static SQLITE_NOINLINE int vdbeMemAddTerminator(Mem *pMem){vdbeMemAddTerminator69863,2610534
SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){sqlite3VdbeMemNulTerminate69876,2610831
SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){sqlite3VdbeMemStringify69901,2611877
SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){sqlite3VdbeMemFinalize69946,2613298
static SQLITE_NOINLINE void vdbeMemClearExternAndSetNull(Mem *p){vdbeMemClearExternAndSetNull69978,2614376
static SQLITE_NOINLINE void vdbeMemClear(Mem *p){vdbeMemClear70008,2615339
SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){sqlite3VdbeMemRelease70029,2615944
static i64 doubleToInt64(double r){doubleToInt6470041,2616299
SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){sqlite3VdbeIntValue70077,2617499
SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){sqlite3VdbeRealValue70102,2618246
SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){sqlite3VdbeIntegerAffinity70124,2618925
SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){sqlite3VdbeMemIntegerify70152,2619826
SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){sqlite3VdbeMemRealify70166,2620222
SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){sqlite3VdbeMemNumerify70183,2620787
SQLITE_PRIVATE void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){sqlite3VdbeMemCast70207,2621741
SQLITE_PRIVATE void sqlite3VdbeMemInit(Mem *pMem, sqlite3 *db, u16 flags){sqlite3VdbeMemInit70249,2623004
SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){sqlite3VdbeMemSetNull70269,2623713
SQLITE_PRIVATE void sqlite3ValueSetNull(sqlite3_value *p){sqlite3ValueSetNull70276,2623880
SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){sqlite3VdbeMemSetZeroBlob70284,2624080
static SQLITE_NOINLINE void vdbeReleaseAndSetInt64(Mem *pMem, i64 val){vdbeReleaseAndSetInt6470299,2624482
SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){sqlite3VdbeMemSetInt6470309,2624735
SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){sqlite3VdbeMemSetDouble70323,2625067
SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){sqlite3VdbeMemSetRowSet70336,2625351
SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){sqlite3VdbeMemTooBig70358,2626022
SQLITE_PRIVATE void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){sqlite3VdbeMemAboutToChange70379,2626573
static SQLITE_NOINLINE void vdbeClrCopy(Mem *pTo, const Mem *pFrom, int eType){vdbeClrCopy70399,2627135
SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){sqlite3VdbeMemShallowCopy70404,2627336
SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){sqlite3VdbeMemCopy70420,2627892
SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){sqlite3VdbeMemMove70443,2628529
SQLITE_PRIVATE int sqlite3VdbeMemSetStr(sqlite3VdbeMemSetStr70469,2629583
static SQLITE_NOINLINE int vdbeMemFromBtreeResize(vdbeMemFromBtreeResize70568,2632668
SQLITE_PRIVATE int sqlite3VdbeMemFromBtree(sqlite3VdbeMemFromBtree70589,2633358
static SQLITE_NOINLINE const void *valueToText(sqlite3_value* pVal, u8 enc){valueToText70624,2634583
SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){sqlite3ValueText70666,2636177
SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){sqlite3ValueNew70683,2636664
struct ValueNewStat4Ctx {ValueNewStat4Ctx70696,2636975
  Parse *pParse;pParse70697,2637001
  Index *pIdx;pIdx70698,2637018
  UnpackedRecord **ppRec;ppRec70699,2637033
  int iVal;iVal70700,2637059
static sqlite3_value *valueNew(sqlite3 *db, struct ValueNewStat4Ctx *p){valueNew70714,2637605
static int valueFromFunction(valueFromFunction70776,2639841
# define valueFromFunction(valueFromFunction70857,2642339
static int valueFromExpr(valueFromExpr70870,2642839
SQLITE_PRIVATE int sqlite3ValueFromExpr(sqlite3ValueFromExpr71003,2647322
static void recordFunc(recordFunc71022,2648108
SQLITE_PRIVATE void sqlite3AnalyzeFunctions(void){sqlite3AnalyzeFunctions71056,2649076
static int stat4ValueFromExpr(stat4ValueFromExpr71081,2649941
SQLITE_PRIVATE int sqlite3Stat4ProbeSetValue(sqlite3Stat4ProbeSetValue71159,2652791
SQLITE_PRIVATE int sqlite3Stat4ValueFromExpr(sqlite3Stat4ValueFromExpr71204,2654353
SQLITE_PRIVATE int sqlite3Stat4Column(sqlite3Stat4Column71221,2655057
SQLITE_PRIVATE void sqlite3Stat4ProbeFree(UnpackedRecord *pRec){sqlite3Stat4ProbeFree71266,2656785
SQLITE_PRIVATE void sqlite3ValueSetStr(sqlite3ValueSetStr71284,2657244
SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){sqlite3ValueFree71297,2657637
static SQLITE_NOINLINE int valueBytes(sqlite3_value *pVal, u8 enc){valueBytes71308,2657977
SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){sqlite3ValueBytes71311,2658097
SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(Parse *pParse){sqlite3VdbeCreate71350,2659330
SQLITE_PRIVATE void sqlite3VdbeError(Vdbe *p, const char *zFormat, ...){sqlite3VdbeError71375,2659921
SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){sqlite3VdbeSetSql71386,2660197
SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){sqlite3VdbeSwap71401,2660650
static int growOpArray(Vdbe *v, int nOp){growOpArray71431,2661503
static void test_addop_breakpoint(void){test_addop_breakpoint71471,2662990
static SQLITE_NOINLINE int growOp3(Vdbe *p, int op, int p1, int p2, int p3){growOp371493,2663500
SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){sqlite3VdbeAddOp371499,2663743
SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){sqlite3VdbeAddOp071544,2664769
SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){sqlite3VdbeAddOp171547,2664870
SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){sqlite3VdbeAddOp271550,2664980
SQLITE_PRIVATE int sqlite3VdbeGoto(Vdbe *p, int iDest){sqlite3VdbeGoto71556,2665167
SQLITE_PRIVATE int sqlite3VdbeLoadString(Vdbe *p, int iDest, const char *zStr){sqlite3VdbeLoadString71563,2665360
SQLITE_PRIVATE void sqlite3VdbeMultiLoad(Vdbe *p, int iDest, const char *zTypes, ...){sqlite3VdbeMultiLoad71575,2665949
SQLITE_PRIVATE int sqlite3VdbeAddOp4(sqlite3VdbeAddOp471595,2666465
SQLITE_PRIVATE int sqlite3VdbeAddOp4Dup8(sqlite3VdbeAddOp4Dup871613,2667019
SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){sqlite3VdbeAddParseSchemaOp71635,2667841
SQLITE_PRIVATE int sqlite3VdbeAddOp4Int(sqlite3VdbeAddOp4Int71644,2668128
SQLITE_PRIVATE void sqlite3VdbeEndCoroutine(Vdbe *v, int regYield){sqlite3VdbeEndCoroutine71663,2668678
SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *v){sqlite3VdbeMakeLabel71690,2669817
SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *v, int x){sqlite3VdbeResolveLabel71709,2670355
SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){sqlite3VdbeRunOnlyOnce71723,2670655
SQLITE_PRIVATE void sqlite3VdbeReusable(Vdbe *p){sqlite3VdbeReusable71730,2670800
typedef struct VdbeOpIter VdbeOpIter;VdbeOpIter71752,2671426
struct VdbeOpIter {VdbeOpIter71753,2671464
  Vdbe *v;                   /* Vdbe to iterate through the opcodes of */v71754,2671484
  SubProgram **apSub;        /* Array of subprograms */apSub71755,2671558
  int nSub;                  /* Number of entries in apSub */nSub71756,2671614
  int iAddr;                 /* Address of next instruction to return */iAddr71757,2671676
  int iSub;                  /* 0 = main program, 1 = first sub-program etc. */iSub71758,2671749
static Op *opIterNext(VdbeOpIter *p){opIterNext71760,2671832
SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){sqlite3VdbeAssertMayAbort71825,2673636
static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){resolveP2Values71885,2675814
SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){sqlite3VdbeCurrentAddr71969,2678255
SQLITE_PRIVATE void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N){sqlite3VdbeVerifyNoMallocRequired71983,2678821
SQLITE_PRIVATE void sqlite3VdbeVerifyNoResultRow(Vdbe *p){sqlite3VdbeVerifyNoResultRow71996,2679304
SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){sqlite3VdbeTakeOpArray72015,2679965
SQLITE_PRIVATE VdbeOp *sqlite3VdbeAddOpList(sqlite3VdbeAddOpList72035,2680570
SQLITE_PRIVATE void sqlite3VdbeScanStatus(sqlite3VdbeScanStatus72083,2681921
SQLITE_PRIVATE void sqlite3VdbeChangeOpcode(Vdbe *p, u32 addr, u8 iNewOpcode){sqlite3VdbeChangeOpcode72111,2682888
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, u32 addr, int val){sqlite3VdbeChangeP172114,2683018
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, u32 addr, int val){sqlite3VdbeChangeP272117,2683127
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, u32 addr, int val){sqlite3VdbeChangeP372120,2683236
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u16 p5){sqlite3VdbeChangeP572123,2683345
SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){sqlite3VdbeJumpHere72132,2683618
static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){freeEphemeralFunction72141,2683843
static SQLITE_NOINLINE void freeP4Mem(sqlite3 *db, Mem *p){freeP4Mem72152,2684085
static SQLITE_NOINLINE void freeP4FuncCtx(sqlite3 *db, sqlite3_context *p){freeP4FuncCtx72156,2684222
static void freeP4(sqlite3 *db, int p4type, void *p4){freeP472160,2684363
static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){vdbeFreeOpArray72208,2685443
SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){sqlite3VdbeLinkSubProgram72226,2685959
SQLITE_PRIVATE int sqlite3VdbeChangeToNoop(Vdbe *p, int addr){sqlite3VdbeChangeToNoop72234,2686138
SQLITE_PRIVATE int sqlite3VdbeDeletePriorOpcode(Vdbe *p, u8 op){sqlite3VdbeDeletePriorOpcode72250,2686579
static void SQLITE_NOINLINE vdbeChangeP4Full(vdbeChangeP4Full72275,2687555
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){sqlite3VdbeChangeP472294,2687966
SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe *p, void *pP4, int n){sqlite3VdbeAppendP472337,2689184
SQLITE_PRIVATE void sqlite3VdbeSetP4KeyInfo(Parse *pParse, Index *pIdx){sqlite3VdbeSetP4KeyInfo72357,2689645
static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){vdbeVComment72373,2690199
SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){sqlite3VdbeComment72382,2690546
SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){sqlite3VdbeNoopComment72390,2690729
SQLITE_PRIVATE void sqlite3VdbeSetLineNumber(Vdbe *v, int iLine){sqlite3VdbeSetLineNumber72405,2691084
SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){sqlite3VdbeGetOp72423,2691899
static int translateP(char c, const Op *pOp){translateP72444,2692573
static int displayComment(displayComment72465,2693313
static void displayP4Expr(StrAccum *p, Expr *pExpr){displayP4Expr72543,2695749
static char *displayP4(Op *pOp, char *zTemp, int nTemp){displayP472617,2698046
SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){sqlite3VdbeUsesBtree72741,2701398
SQLITE_PRIVATE void sqlite3VdbeEnter(Vdbe *p){sqlite3VdbeEnter72772,2702752
static SQLITE_NOINLINE void vdbeLeave(Vdbe *p){vdbeLeave72793,2703257
SQLITE_PRIVATE void sqlite3VdbeLeave(Vdbe *p){sqlite3VdbeLeave72807,2703542
SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){sqlite3VdbePrintOp72817,2703806
static void initMemArray(Mem *p, int N, sqlite3 *db, u16 flags){initMemArray72843,2704576
static void releaseMemArray(Mem *p, int N){releaseMemArray72858,2704830
SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){sqlite3VdbeFrameDelete72904,2706475
SQLITE_PRIVATE int sqlite3VdbeList(sqlite3VdbeList72932,2707470
SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){sqlite3VdbePrintSql73112,2713360
SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){sqlite3VdbeIOTraceSql73131,2713811
struct ReusableSpace {ReusableSpace73161,2714636
  u8 *pSpace;          /* Available memory */pSpace73162,2714659
  int nFree;           /* Bytes of available memory */nFree73163,2714705
  int nNeeded;         /* Total bytes that could not be allocated */nNeeded73164,2714760
static void *allocSpace(allocSpace73181,2715507
SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe *p){sqlite3VdbeRewind73204,2716092
SQLITE_PRIVATE void sqlite3VdbeMakeReady(sqlite3VdbeMakeReady73257,2717700
SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){sqlite3VdbeFreeCursor73356,2721355
static void closeCursorsInFrame(Vdbe *p){closeCursorsInFrame73393,2722295
SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){sqlite3VdbeFrameRestore73411,2722717
static void closeAllCursors(Vdbe *p){closeAllCursors73440,2723576
static void Cleanup(Vdbe *p){Cleanup73467,2724253
SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){sqlite3VdbeSetNumCols73491,2724977
SQLITE_PRIVATE int sqlite3VdbeSetColName(sqlite3VdbeSetColName73515,2725839
static int vdbeCommit(sqlite3 *db, Vdbe *p){vdbeCommit73543,2726926
static void checkActiveVdbeCnt(sqlite3 *db){checkActiveVdbeCnt73805,2736024
#define checkActiveVdbeCnt(checkActiveVdbeCnt73824,2736432
static SQLITE_NOINLINE int vdbeCloseStatement(Vdbe *p, int eOp){vdbeCloseStatement73837,2736896
SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){sqlite3VdbeCloseStatement73883,2738226
SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){sqlite3VdbeCheckFk73902,2738918
SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){sqlite3VdbeHalt73929,2739897
SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){sqlite3VdbeResetStepResult74130,2746794
SQLITE_PRIVATE int sqlite3VdbeTransferError(Vdbe *p){sqlite3VdbeTransferError74142,2747198
static void vdbeInvokeSqllog(Vdbe *v){vdbeInvokeSqllog74164,2747760
# define vdbeInvokeSqllog(vdbeInvokeSqllog74177,2748154
SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){sqlite3VdbeReset74191,2748577
SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){sqlite3VdbeFinalize74271,2750910
SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(sqlite3 *db, AuxData **pp, int iOp, int mask){sqlite3VdbeDeleteAuxData74297,2751810
SQLITE_PRIVATE void sqlite3VdbeClearObject(sqlite3 *db, Vdbe *p){sqlite3VdbeClearObject74323,2752589
SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){sqlite3VdbeDelete74354,2753383
static int SQLITE_NOINLINE handleDeferredMoveto(VdbeCursor *p){handleDeferredMoveto74380,2753978
static int SQLITE_NOINLINE handleMovedCursor(VdbeCursor *p){handleMovedCursor74406,2754829
SQLITE_PRIVATE int sqlite3VdbeCursorRestore(VdbeCursor *p){sqlite3VdbeCursorRestore74421,2755330
SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor **pp, int *piCol){sqlite3VdbeCursorMoveto74442,2756143
SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format, u32 *pLen){sqlite3VdbeSerialType74506,2758488
#   define MAX_6BYTE MAX_6BYTE74517,2758766
static const u8 sqlite3SmallTypeSizes[] = {sqlite3SmallTypeSizes74558,2759621
SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){sqlite3VdbeSerialTypeLen74578,2760461
SQLITE_PRIVATE u8 sqlite3VdbeOneByteSerialTypeLen(u8 serial_type){sqlite3VdbeOneByteSerialTypeLen74587,2760745
static u64 floatSwap(u64 in){floatSwap74627,2762605
# define swapMixedEndianFloat(swapMixedEndianFloat74640,2762762
# define swapMixedEndianFloat(swapMixedEndianFloat74642,2762819
SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, Mem *pMem, u32 serial_type){sqlite3VdbeSerialPut74658,2763436
#define ONE_BYTE_INT(ONE_BYTE_INT74697,2764394
#define TWO_BYTE_INT(TWO_BYTE_INT74698,2764434
#define THREE_BYTE_INT(THREE_BYTE_INT74699,2764487
#define FOUR_BYTE_UINT(FOUR_BYTE_UINT74700,2764554
#define FOUR_BYTE_INT(FOUR_BYTE_INT74701,2764633
static u32 SQLITE_NOINLINE serialGet(serialGet74712,2765106
SQLITE_PRIVATE u32 sqlite3VdbeSerialGet(sqlite3VdbeSerialGet74748,2766450
SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord(sqlite3VdbeAllocUnpackedRecord74847,2770085
SQLITE_PRIVATE void sqlite3VdbeRecordUnpack(sqlite3VdbeRecordUnpack74867,2770876
static int vdbeRecordCompareDebug(vdbeRecordCompareDebug74914,2772534
static void vdbeAssertFieldCountWithinLimits(vdbeAssertFieldCountWithinLimits75019,2776394
# define vdbeAssertFieldCountWithinLimits(vdbeAssertFieldCountWithinLimits75040,2776949
static int vdbeCompareMemString(vdbeCompareMemString75049,2777304
static int isAllZero(const char *z, int n){isAllZero75085,2778496
static SQLITE_NOINLINE int sqlite3BlobCompare(const Mem *pB1, const Mem *pB2){sqlite3BlobCompare75098,2778834
static int sqlite3IntFloatCompare(i64 i, double r){sqlite3IntFloatCompare75131,2779963
SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){sqlite3MemCompare75164,2780920
static i64 vdbeRecordDecodeInt(u32 serial_type, const u8 *aKey){vdbeRecordDecodeInt75250,2783415
SQLITE_PRIVATE int sqlite3VdbeRecordCompareWithSkip(sqlite3VdbeRecordCompareWithSkip75305,2785249
SQLITE_PRIVATE int sqlite3VdbeRecordCompare(sqlite3VdbeRecordCompare75491,2791388
static int vdbeRecordCompareInt(vdbeRecordCompareInt75508,2792001
static int vdbeRecordCompareString(vdbeRecordCompareString75602,2794796
SQLITE_PRIVATE RecordCompare sqlite3VdbeFindCompare(UnpackedRecord *p){sqlite3VdbeFindCompare75663,2796455
SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){sqlite3VdbeIdxRowid75709,2798313
SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare(sqlite3VdbeIdxKeyCompare75786,2801057
SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){sqlite3VdbeSetChanges75821,2802188
SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){sqlite3VdbeCountChanges75831,2802454
SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){sqlite3ExpirePreparedStatements75845,2802952
SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){sqlite3VdbeDb75855,2803148
SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetBoundValue(Vdbe *v, int iVar, u8 aff){sqlite3VdbeGetBoundValue75867,2803574
SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){sqlite3VdbeSetVarmask75888,2804165
SQLITE_PRIVATE void sqlite3VtabImportErrmsg(Vdbe *p, sqlite3_vtab *pVtab){sqlite3VtabImportErrmsg75903,2804584
static void vdbeFreeUnpacked(sqlite3 *db, int nField, UnpackedRecord *p){vdbeFreeUnpacked75924,2805270
SQLITE_PRIVATE void sqlite3VdbePreUpdateHook(sqlite3VdbePreUpdateHook75943,2805906
SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){sqlite3_expired76032,2808891
static int vdbeSafety(Vdbe *p){vdbeSafety76043,2809189
static int vdbeSafetyNotNull(Vdbe *p){vdbeSafetyNotNull76051,2809362
static SQLITE_NOINLINE void invokeProfileCallback(sqlite3 *db, Vdbe *p){invokeProfileCallback76065,2809723
# define checkProfileCallback(checkProfileCallback76086,2810447
# define checkProfileCallback(checkProfileCallback76089,2810551
SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){sqlite3_finalize76101,2810964
SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){sqlite3_reset76128,2811803
SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){sqlite3_clear_bindings76149,2812289
SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){sqlite3_value_blob76174,2812927
SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){sqlite3_value_bytes76187,2813264
SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){sqlite3_value_bytes1676190,2813370
SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){sqlite3_value_double76193,2813485
SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){sqlite3_value_int76196,2813591
SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){sqlite3_value_int6476199,2813695
SQLITE_API unsigned int sqlite3_value_subtype(sqlite3_value *pVal){sqlite3_value_subtype76202,2813805
SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){sqlite3_value_text76206,2813962
SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){sqlite3_value_text1676210,2814132
SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){sqlite3_value_text16be76213,2814253
SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){sqlite3_value_text16le76216,2814372
SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){sqlite3_value_type76224,2814695
SQLITE_API sqlite3_value *sqlite3_value_dup(const sqlite3_value *pOrig){sqlite3_value_dup76264,2815931
SQLITE_API void sqlite3_value_free(sqlite3_value *pOld){sqlite3_value_free76287,2816564
static void setResultStrOrError(setResultStrOrError76303,2817167
static int invokeValueDestructor(invokeValueDestructor76314,2817591
SQLITE_API void sqlite3_result_blob(sqlite3_result_blob76330,2818028
SQLITE_API void sqlite3_result_blob64(sqlite3_result_blob6476340,2818264
SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){sqlite3_result_double76354,2818618
SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){sqlite3_result_error76358,2818795
SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){sqlite3_result_error1676365,2819091
SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){sqlite3_result_int76372,2819377
SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){sqlite3_result_int6476376,2819552
SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){sqlite3_result_null76380,2819724
SQLITE_API void sqlite3_result_subtype(sqlite3_context *pCtx, unsigned int eSubtype){sqlite3_result_subtype76384,2819878
SQLITE_API void sqlite3_result_text(sqlite3_result_text76390,2820107
SQLITE_API void sqlite3_result_text64(sqlite3_result_text6476399,2820334
SQLITE_API void sqlite3_result_text16(sqlite3_result_text1676416,2820789
SQLITE_API void sqlite3_result_text16be(sqlite3_result_text16be76425,2821026
SQLITE_API void sqlite3_result_text16le(sqlite3_result_text16le76434,2821261
SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){sqlite3_result_value76444,2821527
SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){sqlite3_result_zeroblob76448,2821710
SQLITE_API int sqlite3_result_zeroblob64(sqlite3_context *pCtx, u64 n){sqlite3_result_zeroblob6476452,2821882
SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){sqlite3_result_error_code76461,2822184
SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){sqlite3_result_error_toobig76474,2822593
SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){sqlite3_result_error_nomem76483,2822924
static int doWalCallbacks(sqlite3 *db){doWalCallbacks76495,2823329
static int sqlite3Step(Vdbe *p){sqlite3Step76525,2824202
SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){sqlite3_step76655,2828376
SQLITE_API void *sqlite3_user_data(sqlite3_context *p){sqlite3_user_data76706,2830115
SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){sqlite3_context_db_handle76721,2830631
SQLITE_PRIVATE sqlite3_int64 sqlite3StmtCurrentTime(sqlite3_context *p){sqlite3StmtCurrentTime76733,2831104
SQLITE_PRIVATE void sqlite3InvalidFunction(sqlite3InvalidFunction76757,2831939
static SQLITE_NOINLINE void *createAggContext(sqlite3_context *p, int nByte){createAggContext76775,2832534
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){sqlite3_aggregate_context76797,2833145
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){sqlite3_get_auxdata76812,2833587
SQLITE_API void sqlite3_set_auxdata(sqlite3_set_auxdata76833,2834251
SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){sqlite3_aggregate_count76888,2835626
SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){sqlite3_column_count76897,2835859
SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){sqlite3_data_count76906,2836100
static const Mem *columnNullValue(void){columnNullValue76915,2836334
static Mem *columnMem(sqlite3_stmt *pStmt, int i){columnMem76955,2837876
static void columnMallocFailure(sqlite3_stmt *pStmt)columnMallocFailure76990,2838937
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){sqlite3_column_blob77010,2839628
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){sqlite3_column_bytes77020,2839972
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){sqlite3_column_bytes1677025,2840138
SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){sqlite3_column_double77030,2840308
SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){sqlite3_column_int77035,2840482
SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){sqlite3_column_int6477040,2840644
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){sqlite3_column_text77045,2840828
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){sqlite3_column_value77050,2841026
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){sqlite3_column_text1677060,2841325
SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){sqlite3_column_type77066,2841540
static const void *columnName(columnName77088,2842426
SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){sqlite3_column_name77130,2843311
SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_name1677135,2843505
SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){sqlite3_column_decltype77155,2844120
SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){sqlite3_column_decltype1677160,2844322
SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){sqlite3_column_database_name77173,2844832
SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_database_name1677178,2845039
SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){sqlite3_column_table_name77189,2845480
SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_table_name1677194,2845681
SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){sqlite3_column_origin_name77205,2846123
SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_origin_name1677210,2846326
static int vdbeUnbind(Vdbe *p, int i){vdbeUnbind77233,2847190
static int bindText(bindText77276,2848583
SQLITE_API int sqlite3_bind_blob(sqlite3_bind_blob77310,2849569
SQLITE_API int sqlite3_bind_blob64(sqlite3_bind_blob6477322,2849833
SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){sqlite3_bind_double77336,2850159
SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){sqlite3_bind_int77346,2850433
SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){sqlite3_bind_int6477349,2850552
SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){sqlite3_bind_null77359,2850830
SQLITE_API int sqlite3_bind_text( sqlite3_bind_text77368,2851034
SQLITE_API int sqlite3_bind_text64( sqlite3_bind_text6477377,2851228
SQLITE_API int sqlite3_bind_text16(sqlite3_bind_text1677394,2851658
SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){sqlite3_bind_value77404,2851891
SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){sqlite3_bind_zeroblob77435,2852744
SQLITE_API int sqlite3_bind_zeroblob64(sqlite3_stmt *pStmt, int i, sqlite3_uint64 n){sqlite3_bind_zeroblob6477445,2853009
SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){sqlite3_bind_parameter_count77464,2853549
SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){sqlite3_bind_parameter_name77475,2853830
SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){sqlite3VdbeParameterIndex77486,2854161
SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){sqlite3_bind_parameter_index77490,2854340
SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){sqlite3TransferBindings77497,2854585
SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){sqlite3_transfer_bindings77524,2855508
SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){sqlite3_db_handle77548,2856251
SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){sqlite3_stmt_readonly77556,2856447
SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt *pStmt){sqlite3_stmt_busy77563,2856630
SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){sqlite3_next_stmt77574,2857007
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){sqlite3_stmt_status77595,2857511
SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){sqlite3_sql77612,2857883
SQLITE_API char *sqlite3_expanded_sql(sqlite3_stmt *pStmt){sqlite3_expanded_sql77626,2858359
static UnpackedRecord *vdbeUnpackRecord(vdbeUnpackRecord77648,2858968
SQLITE_API int sqlite3_preupdate_old(sqlite3 *db, int iIdx, sqlite3_value **ppValue){sqlite3_preupdate_old77667,2859462
SQLITE_API int sqlite3_preupdate_count(sqlite3 *db){sqlite3_preupdate_count77728,2861280
SQLITE_API int sqlite3_preupdate_depth(sqlite3 *db){sqlite3_preupdate_depth77746,2862016
SQLITE_API int sqlite3_preupdate_new(sqlite3 *db, int iIdx, sqlite3_value **ppValue){sqlite3_preupdate_new77757,2862354
SQLITE_API int sqlite3_stmt_scanstatus(sqlite3_stmt_scanstatus77832,2864644
SQLITE_API void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *pStmt){sqlite3_stmt_scanstatus_reset77891,2866163
static int findNextHostParameter(const char *zSql, int *pnToken){findNextHostParameter77927,2867427
SQLITE_PRIVATE char *sqlite3VdbeExpandSql(sqlite3VdbeExpandSql77970,2869049
# define memAboutToChange(memAboutToChange78129,2875006
# define memAboutToChange(memAboutToChange78131,2875076
SQLITE_API int sqlite3_search_count = 0;sqlite3_search_count78142,2875467
SQLITE_API int sqlite3_interrupt_count = 0;sqlite3_interrupt_count78154,2875870
SQLITE_API int sqlite3_sort_count = 0;sqlite3_sort_count78165,2876260
SQLITE_API int sqlite3_max_blobsize = 0;sqlite3_max_blobsize78176,2876667
static void updateMaxBlobsize(Mem *p){updateMaxBlobsize78177,2876708
# define HAS_UPDATE_HOOK(HAS_UPDATE_HOOK78189,2877029
# define HAS_UPDATE_HOOK(HAS_UPDATE_HOOK78191,2877114
SQLITE_API int sqlite3_found_count = 0;sqlite3_found_count78202,2877496
# define UPDATE_MAX_BLOBSIZE(UPDATE_MAX_BLOBSIZE78210,2877726
# define UPDATE_MAX_BLOBSIZE(UPDATE_MAX_BLOBSIZE78212,2877786
# define VdbeBranchTaken(VdbeBranchTaken78232,2878622
# define VdbeBranchTaken(VdbeBranchTaken78234,2878658
  static void vdbeTakeBranch(int iSrcLine, u8 I, u8 M){vdbeTakeBranch78235,2878722
#define Stringify(Stringify78253,2879307
#define Deephemeralize(Deephemeralize78268,2879954
#define isSorter(isSorter78273,2880151
static VdbeCursor *allocateCursor(allocateCursor78279,2880312
static void applyNumericAffinity(Mem *pRec, int bTryForInt){applyNumericAffinity78348,2883166
static void applyAffinity(applyAffinity78382,2884212
SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){sqlite3_value_numeric_type78418,2885664
SQLITE_PRIVATE void sqlite3ValueApplyAffinity(sqlite3ValueApplyAffinity78432,2886032
static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){computeNumericType78446,2886410
static u16 numericType(Mem *pMem){numericType78465,2887003
SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){sqlite3VdbeMemPrettyPrint78480,2887354
static void memTracePrint(Mem *p){memTracePrint78558,2889351
static void registerTrace(int iReg, Mem *p){registerTrace78580,2890003
#  define REGISTER_TRACE(REGISTER_TRACE78588,2890144
#  define REGISTER_TRACE(REGISTER_TRACE78590,2890229
#define SQLITE_HWTIME_HSQLITE_HWTIME_H78618,2891062
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime78631,2891459
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec78639,2891667
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime78650,2891882
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime78658,2892077
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime78682,2892819
static int checkSavepointCount(sqlite3 *db){checkSavepointCount78704,2893447
static SQLITE_NOINLINE Mem *out2PrereleaseWithClear(Mem *pOut){out2PrereleaseWithClear78717,2893758
static Mem *out2Prerelease(Vdbe *p, VdbeOp *pOp){out2Prerelease78722,2893895
SQLITE_PRIVATE int sqlite3VdbeExec(sqlite3VdbeExec78741,2894339
#   define MAX_ROWID MAX_ROWID82443,3021914
typedef struct Incrblob Incrblob;Incrblob85361,3116978
struct Incrblob {Incrblob85362,3117012
  int nByte;              /* Size of open blob, in bytes */nByte85363,3117030
  int iOffset;            /* Byte offset of blob in cursor data */iOffset85364,3117090
  u16 iCol;               /* Table column this handle is open on */iCol85365,3117157
  BtCursor *pCsr;         /* Cursor pointing at blob row */pCsr85366,3117225
  sqlite3_stmt *pStmt;    /* Statement holding cursor open */pStmt85367,3117285
  sqlite3 *db;            /* The associated database */db85368,3117347
  char *zDb;              /* Database name */zDb85369,3117403
  Table *pTab;            /* Table object */pTab85370,3117449
static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){blobSeekToRow85391,3118356
SQLITE_API int sqlite3_blob_open(sqlite3_blob_open85455,3120226
SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){sqlite3_blob_close85691,3128150
static int blobReadWrite(blobReadWrite85711,3128531
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){sqlite3_blob_read85784,3130753
SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){sqlite3_blob_write85791,3130952
SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){sqlite3_blob_bytes85801,3131288
SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){sqlite3_blob_reopen85816,3131854
#define SQLITE_MAX_PMASZ SQLITE_MAX_PMASZ86004,3140256
typedef struct MergeEngine MergeEngine;     /* Merge PMAs together */MergeEngine86009,3140337
typedef struct PmaReader PmaReader;         /* Incrementally read one PMA */PmaReader86010,3140407
typedef struct PmaWriter PmaWriter;         /* Incrementally write one PMA */PmaWriter86011,3140484
typedef struct SorterRecord SorterRecord;   /* A record being sorted */SorterRecord86012,3140562
typedef struct SortSubtask SortSubtask;     /* A sub-task in the sort process */SortSubtask86013,3140634
typedef struct SorterFile SorterFile;       /* Temporary file object wrapper */SorterFile86014,3140715
typedef struct SorterList SorterList;       /* In-memory list of records */SorterList86015,3140795
typedef struct IncrMerger IncrMerger;       /* Read & merge multiple PMAs */IncrMerger86016,3140871
struct SorterFile {SorterFile86022,3141048
  sqlite3_file *pFd;              /* File handle */pFd86023,3141068
  i64 iEof;                       /* Bytes of data stored in pFd */iEof86024,3141120
struct SorterList {SorterList86035,3141518
  SorterRecord *pList;            /* Linked list of records */pList86036,3141538
  u8 *aMemory;                    /* If non-NULL, bulk memory to hold pList */aMemory86037,3141601
  int szPMA;                      /* Size of pList as PMA in bytes */szPMA86038,3141680
struct MergeEngine {MergeEngine86105,3144657
  int nTree;                 /* Used size of aTree/aReadr (power of 2) */nTree86106,3144678
  SortSubtask *pTask;        /* Used by this thread only */pTask86107,3144752
  int *aTree;                /* Current state of incremental merge */aTree86108,3144812
  PmaReader *aReadr;         /* Array of PmaReaders to merge data from */aReadr86109,3144882
typedef int (*SorterCompare)(SortSubtask*,int*,const void*,int,const void*,int);SorterCompare86143,3146555
struct SortSubtask {SortSubtask86144,3146636
  SQLiteThread *pThread;          /* Background thread, if any */pThread86145,3146657
  int bDone;                      /* Set if thread is finished but not joined */bDone86146,3146723
  VdbeSorter *pSorter;            /* Sorter that owns this sub-task */pSorter86147,3146804
  UnpackedRecord *pUnpacked;      /* Space to unpack a record */pUnpacked86148,3146875
  SorterList list;                /* List for thread to write to a PMA */list86149,3146940
  int nPMA;                       /* Number of PMAs currently in file */nPMA86150,3147014
  SorterCompare xCompare;         /* Compare function to use */xCompare86151,3147087
  SorterFile file;                /* Temp file for level-0 PMAs */file86152,3147151
  SorterFile file2;               /* Space for other PMAs */file286153,3147218
struct VdbeSorter {VdbeSorter86166,3147606
  int mnPmaSize;                  /* Minimum PMA size, in bytes */mnPmaSize86167,3147626
  int mxPmaSize;                  /* Maximum PMA size, in bytes.  0==no limit */mxPmaSize86168,3147693
  int mxKeysize;                  /* Largest serialized key seen so far */mxKeysize86169,3147774
  int pgsz;                       /* Main database page size */pgsz86170,3147849
  PmaReader *pReader;             /* Readr data from here after Rewind() */pReader86171,3147913
  MergeEngine *pMerger;           /* Or here, if bUseThreads==0 */pMerger86172,3147989
  sqlite3 *db;                    /* Database connection */db86173,3148056
  KeyInfo *pKeyInfo;              /* How to compare records */pKeyInfo86174,3148116
  UnpackedRecord *pUnpacked;      /* Used by VdbeSorterCompare() */pUnpacked86175,3148179
  SorterList list;                /* List of in-memory records */list86176,3148247
  int iMemory;                    /* Offset of free space in list.aMemory */iMemory86177,3148313
  int nMemory;                    /* Size of list.aMemory allocation in bytes */nMemory86178,3148390
  u8 bUsePMA;                     /* True if one or more PMAs created */bUsePMA86179,3148471
  u8 bUseThreads;                 /* True to use background threads */bUseThreads86180,3148544
  u8 iPrev;                       /* Previous thread used to flush PMA */iPrev86181,3148615
  u8 nTask;                       /* Size of aTask[] array */nTask86182,3148689
  u8 typeMask;typeMask86183,3148751
  SortSubtask aTask[1];           /* One or more subtasks */aTask86184,3148766
#define SORTER_TYPE_INTEGER SORTER_TYPE_INTEGER86187,3148831
#define SORTER_TYPE_TEXT SORTER_TYPE_TEXT86188,3148864
struct PmaReader {PmaReader86199,3149299
  i64 iReadOff;               /* Current read offset */iReadOff86200,3149318
  i64 iEof;                   /* 1 byte past EOF for this PmaReader */iEof86201,3149374
  int nAlloc;                 /* Bytes of space at aAlloc */nAlloc86202,3149445
  int nKey;                   /* Number of bytes in key */nKey86203,3149506
  sqlite3_file *pFd;          /* File handle we are reading from */pFd86204,3149565
  u8 *aAlloc;                 /* Space for aKey if aBuffer and pMap wont work */aAlloc86205,3149633
  u8 *aKey;                   /* Pointer to current key */aKey86206,3149714
  u8 *aBuffer;                /* Current read buffer */aBuffer86207,3149773
  int nBuffer;                /* Size of read buffer in bytes */nBuffer86208,3149829
  u8 *aMap;                   /* Pointer to mapping of entire file */aMap86209,3149894
  IncrMerger *pIncr;          /* Incremental merger */pIncr86210,3149964
struct IncrMerger {IncrMerger86245,3151743
  SortSubtask *pTask;             /* Task that owns this merger */pTask86246,3151763
  MergeEngine *pMerger;           /* Merge engine thread reads data from */pMerger86247,3151830
  i64 iStartOff;                  /* Offset to start writing file at */iStartOff86248,3151906
  int mxSz;                       /* Maximum bytes of data to store */mxSz86249,3151978
  int bEof;                       /* Set to true when merge is finished */bEof86250,3152049
  int bUseThread;                 /* True to use a bg thread for this object */bUseThread86251,3152124
  SorterFile aFile[2];            /* aFile[0] for reading, [1] for writing */aFile86252,3152204
struct PmaWriter {PmaWriter86263,3152637
  int eFWErr;                     /* Non-zero if in an error state */eFWErr86264,3152656
  u8 *aBuffer;                    /* Pointer to write buffer */aBuffer86265,3152726
  int nBuffer;                    /* Size of write buffer in bytes */nBuffer86266,3152790
  int iBufStart;                  /* First byte of buffer to write */iBufStart86267,3152860
  int iBufEnd;                    /* Last byte of buffer to write */iBufEnd86268,3152930
  i64 iWriteOff;                  /* Offset of start of buffer in file */iWriteOff86269,3152999
  sqlite3_file *pFd;              /* File handle to write to */pFd86270,3153073
struct SorterRecord {SorterRecord86291,3154104
  int nVal;                       /* Size of the record in bytes */nVal86292,3154126
    SorterRecord *pNext;          /* Pointer to next record in list */pNext86294,3154204
    int iNext;                    /* Offset within aMemory of next record */iNext86295,3154275
  } u;u86296,3154352
#define SRVAL(SRVAL86305,3154605
#define SORTER_MAX_MERGE_COUNT SORTER_MAX_MERGE_COUNT86309,3154723
static void vdbePmaReaderClear(PmaReader *pReadr){vdbePmaReaderClear86318,3154978
static int vdbePmaReadBlob(vdbePmaReadBlob86335,3155545
static int vdbePmaReadVarint(PmaReader *p, u64 *pnOut){vdbePmaReadVarint86429,3158805
static int vdbeSorterMapFile(SortSubtask *pTask, SorterFile *pFile, u8 **pp){vdbeSorterMapFile86462,3159774
static int vdbePmaReaderSeek(vdbePmaReaderSeek86479,3160356
static int vdbePmaReaderNext(PmaReader *pReadr){vdbePmaReaderNext86526,3161792
static int vdbePmaReaderInit(vdbePmaReaderInit86573,3163078
static int vdbeSorterCompareTail(vdbeSorterCompareTail86606,3164091
static int vdbeSorterCompare(vdbeSorterCompare86633,3165241
static int vdbeSorterCompareText(vdbeSorterCompareText86652,3165963
static int vdbeSorterCompareInt(vdbeSorterCompareInt86693,3167118
SQLITE_PRIVATE int sqlite3VdbeSorterInit(sqlite3VdbeSorterInit86776,3169903
# define nWorker nWorker86789,3170632
#undef nWorker nWorker86875,3173413
static void vdbeSorterRecordFree(sqlite3 *db, SorterRecord *pRecord){vdbeSorterRecordFree86880,3173535
static void vdbeSortSubtaskCleanup(sqlite3 *db, SortSubtask *pTask){vdbeSortSubtaskCleanup86893,3173865
static void vdbeSorterWorkDebug(SortSubtask *pTask, const char *zEvent){vdbeSorterWorkDebug86916,3174549
static void vdbeSorterRewindDebug(const char *zEvent){vdbeSorterRewindDebug86922,3174792
static void vdbeSorterPopulateDebug(vdbeSorterPopulateDebug86927,3174957
static void vdbeSorterBlockDebug(vdbeSorterBlockDebug86936,3175212
# define vdbeSorterWorkDebug(vdbeSorterWorkDebug86948,3175460
# define vdbeSorterRewindDebug(vdbeSorterRewindDebug86949,3175494
# define vdbeSorterPopulateDebug(vdbeSorterPopulateDebug86950,3175528
# define vdbeSorterBlockDebug(vdbeSorterBlockDebug86951,3175566
static int vdbeSorterJoinThread(SortSubtask *pTask){vdbeSorterJoinThread86958,3175679
static int vdbeSorterCreateThread(vdbeSorterCreateThread86979,3176237
static int vdbeSorterJoinAll(VdbeSorter *pSorter, int rcin){vdbeSorterJoinAll86992,3176697
# define vdbeSorterJoinAll(vdbeSorterJoinAll87011,3177403
# define vdbeSorterJoinThread(vdbeSorterJoinThread87012,3177445
static MergeEngine *vdbeMergeEngineNew(int nReader){vdbeMergeEngineNew87022,3177739
static void vdbeMergeEngineFree(MergeEngine *pMerger){vdbeMergeEngineFree87045,3178467
static void vdbeIncrFree(IncrMerger *pIncr){vdbeIncrFree87059,3178772
SQLITE_PRIVATE void sqlite3VdbeSorterReset(sqlite3 *db, VdbeSorter *pSorter){sqlite3VdbeSorterReset87076,3179233
SQLITE_PRIVATE void sqlite3VdbeSorterClose(sqlite3 *db, VdbeCursor *pCsr){sqlite3VdbeSorterClose87109,3180186
static void vdbeSorterExtendFile(sqlite3 *db, sqlite3_file *pFd, i64 nByte){vdbeSorterExtendFile87131,3180917
# define vdbeSorterExtendFile(vdbeSorterExtendFile87142,3181339
static int vdbeSorterOpenTempFile(vdbeSorterOpenTempFile87150,3181602
static int vdbeSortAllocUnpacked(SortSubtask *pTask){vdbeSortAllocUnpacked87177,3182510
static SorterRecord *vdbeSorterMerge(vdbeSorterMerge87191,3182924
static SorterCompare vdbeSorterGetCompare(VdbeSorter *p){vdbeSorterGetCompare87233,3183833
static int vdbeSorterSort(SortSubtask *pTask, SorterList *pList){vdbeSorterSort87247,3184250
static void vdbePmaWriterInit(vdbePmaWriterInit87303,3185480
static void vdbePmaWriteBlob(PmaWriter *p, u8 *pData, int nData){vdbePmaWriteBlob87325,3186169
static int vdbePmaWriterFinish(PmaWriter *p, i64 *piEof){vdbePmaWriterFinish87358,3187198
static void vdbePmaWriteVarint(PmaWriter *p, u64 iVal){vdbePmaWriteVarint87377,3187762
static int vdbeSorterListToPMA(SortSubtask *pTask, SorterList *pList){vdbeSorterListToPMA87398,3188522
static int vdbeMergeEngineStep(vdbeMergeEngineStep87462,3190578
static void *vdbeSorterFlushThread(void *pCtx){vdbeSorterFlushThread87533,3193445
static int vdbeSorterFlushPMA(VdbeSorter *pSorter){vdbeSorterFlushPMA87547,3193870
SQLITE_PRIVATE int sqlite3VdbeSorterWrite(sqlite3VdbeSorterWrite87614,3196201
static int vdbeIncrPopulate(IncrMerger *pIncr){vdbeIncrPopulate87722,3199912
static void *vdbeIncrPopulateThread(void *pCtx){vdbeIncrPopulateThread87764,3201246
static int vdbeIncrBgPopulate(IncrMerger *pIncr){vdbeIncrBgPopulate87774,3201509
static int vdbeIncrSwap(IncrMerger *pIncr){vdbeIncrSwap87798,3202469
static int vdbeIncrMergerNew(vdbeIncrMergerNew87837,3203337
static void vdbeIncrMergerSetThreads(IncrMerger *pIncr){vdbeIncrMergerSetThreads87861,3204097
static void vdbeMergeEngineCompare(vdbeMergeEngineCompare87874,3204468
#define INCRINIT_NORMAL INCRINIT_NORMAL87927,3205736
#define INCRINIT_TASK INCRINIT_TASK87928,3205762
#define INCRINIT_ROOT INCRINIT_ROOT87929,3205788
static int vdbeMergeEngineInit(vdbeMergeEngineInit87956,3206895
static int vdbePmaReaderIncrMergeInit(PmaReader *pReadr, int eMode){vdbePmaReaderIncrMergeInit88027,3210223
static void *vdbePmaReaderBgIncrInit(void *pCtx){vdbePmaReaderBgIncrInit88094,3212490
static int vdbePmaReaderIncrInit(PmaReader *pReadr, int eMode){vdbePmaReaderIncrInit88115,3213312
static int vdbeMergeEngineLevel0(vdbeMergeEngineLevel088145,3214438
static int vdbeSorterTreeDepth(int nPMA){vdbeSorterTreeDepth88184,3215540
static int vdbeSorterAddToTree(vdbeSorterAddToTree88202,3216093
static int vdbeSorterMergeTreeBuild(vdbeSorterMergeTreeBuild88258,3217836
static int vdbeSorterSetupMerge(VdbeSorter *pSorter){vdbeSorterSetupMerge88337,3220481
SQLITE_PRIVATE int sqlite3VdbeSorterRewind(const VdbeCursor *pCsr, int *pbEof){sqlite3VdbeSorterRewind88419,3223199
SQLITE_PRIVATE int sqlite3VdbeSorterNext(sqlite3 *db, const VdbeCursor *pCsr, int *pbEof){sqlite3VdbeSorterNext88467,3224633
static void *vdbeSorterRowkey(vdbeSorterRowkey88504,3225885
SQLITE_PRIVATE int sqlite3VdbeSorterRowkey(const VdbeCursor *pCsr, Mem *pOut){sqlite3VdbeSorterRowkey88531,3226568
SQLITE_PRIVATE int sqlite3VdbeSorterCompare(sqlite3VdbeSorterCompare88564,3227778
typedef struct MemJournal MemJournal;MemJournal88630,3230197
typedef struct FilePoint FilePoint;FilePoint88631,3230235
typedef struct FileChunk FileChunk;FileChunk88632,3230271
struct FileChunk {FileChunk88640,3230535
  FileChunk *pNext;               /* Next chunk in the journal */pNext88641,3230554
  u8 zChunk[8];                   /* Content of this chunk */zChunk88642,3230620
#define MEMJOURNAL_DFLT_FILECHUNKSIZE MEMJOURNAL_DFLT_FILECHUNKSIZE88648,3230769
#define fileChunkSize(fileChunkSize88654,3230934
struct FilePoint {FilePoint88660,3231142
  sqlite3_int64 iOffset;          /* Offset from the beginning of the file */iOffset88661,3231161
  FileChunk *pChunk;              /* Specific chunk into which cursor points */pChunk88662,3231239
struct MemJournal {MemJournal88669,3231436
  const sqlite3_io_methods *pMethod; /* Parent class. MUST BE FIRST */pMethod88670,3231456
  int nChunkSize;                 /* In-memory chunk-size */nChunkSize88671,3231527
  int nSpill;                     /* Bytes of data before flushing */nSpill88673,3231589
  int nSize;                      /* Bytes of data currently in memory */nSize88674,3231659
  FileChunk *pFirst;              /* Head of in-memory chunk-list */pFirst88675,3231733
  FilePoint endpoint;             /* Pointer to the end of the file */endpoint88676,3231802
  FilePoint readpoint;            /* Pointer to the end of the last xRead() */readpoint88677,3231873
  int flags;                      /* xOpen flags */flags88679,3231953
  sqlite3_vfs *pVfs;              /* The "real" underlying VFS */pVfs88680,3232005
  const char *zJournal;           /* Name of the journal file */zJournal88681,3232071
static int memjrnlRead(memjrnlRead88688,3232256
static void memjrnlFreeChunks(MemJournal *p){memjrnlFreeChunks88739,3233700
static int memjrnlCreateFile(MemJournal *p){memjrnlCreateFile88752,3233968
static int memjrnlWrite(memjrnlWrite88791,3235087
static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){memjrnlTruncate88869,3237608
static int memjrnlClose(sqlite3_file *pJfd){memjrnlClose88885,3237950
static int memjrnlSync(sqlite3_file *pJfd, int flags){memjrnlSync88897,3238225
static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){memjrnlFileSize88905,3238383
static const struct sqlite3_io_methods MemJournalMethods = {MemJournalMethods88914,3238622
SQLITE_PRIVATE int sqlite3JournalOpen(sqlite3JournalOpen88948,3239958
SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){sqlite3MemJournalOpen88984,3241155
SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){sqlite3JournalCreate88995,3241534
SQLITE_PRIVATE int sqlite3JournalIsInMemory(sqlite3_file *p){sqlite3JournalIsInMemory89009,3241933
SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){sqlite3JournalSize89017,3242171
static SQLITE_NOINLINE int walkExpr(Walker *pWalker, Expr *pExpr){walkExpr89061,3243743
SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){sqlite3WalkExpr89078,3244462
SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){sqlite3WalkExprList89086,3244689
SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){sqlite3WalkSelectExpr89103,3245210
SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){sqlite3WalkSelectFrom89121,3246044
SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){sqlite3WalkSelect89158,3247174
static int incrAggDepth(Walker *pWalker, Expr *pExpr){incrAggDepth89214,3248953
static void incrAggFunctionDepth(Expr *pExpr, int N){incrAggFunctionDepth89218,3249096
static void resolveAlias(resolveAlias89247,3250028
static int nameInUsingClause(IdList *pUsing, const char *zCol){nameInUsingClause89296,3251944
SQLITE_PRIVATE int sqlite3MatchSpanName(sqlite3MatchSpanName89313,3252487
static int lookupName(lookupName89363,3254405
SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){sqlite3CreateColumnExpr89691,3265773
static void notValid(notValid89714,3266444
static int exprProbability(Expr *p){exprProbability89736,3267259
static int resolveExprStep(Walker *pWalker, Expr *pExpr){resolveExprStep89756,3267901
static int resolveAsName(resolveAsName90025,3277558
static int resolveOrderByTermToExprList(resolveOrderByTermToExprList90064,3278840
static void resolveOutOfRangeError(resolveOutOfRangeError90111,3280239
static int resolveCompoundOrderBy(resolveCompoundOrderBy90137,3281353
SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy(sqlite3ResolveOrderGroupBy90235,3284398
static int resolveOrderGroupBy(resolveOrderGroupBy90286,3286430
static int resolveSelectStep(Walker *pWalker, Select *p){resolveSelectStep90344,3288673
SQLITE_PRIVATE int sqlite3ResolveExprNames( sqlite3ResolveExprNames90612,3298987
SQLITE_PRIVATE int sqlite3ResolveExprListNames( sqlite3ResolveExprListNames90657,3300265
SQLITE_PRIVATE void sqlite3ResolveSelectNames(sqlite3ResolveSelectNames90682,3301056
SQLITE_PRIVATE void sqlite3ResolveSelfReference(sqlite3ResolveSelfReference90709,3301864
SQLITE_PRIVATE char sqlite3TableColumnAffinity(Table *pTab, int iCol){sqlite3TableColumnAffinity90758,3303731
SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){sqlite3ExprAffinity90779,3304442
SQLITE_PRIVATE Expr *sqlite3ExprAddCollateToken(sqlite3ExprAddCollateToken90815,3305594
SQLITE_PRIVATE Expr *sqlite3ExprAddCollateString(Parse *pParse, Expr *pExpr, const char *zC){sqlite3ExprAddCollateString90831,3306126
SQLITE_PRIVATE Expr *sqlite3ExprSkipCollate(Expr *pExpr){sqlite3ExprSkipCollate90842,3306468
SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){sqlite3ExprCollSeq90866,3307277
SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){sqlite3CompareAffinity90930,3309339
static char comparisonAffinity(Expr *pExpr){comparisonAffinity90957,3310203
SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){sqlite3IndexAffinityOk90980,3311050
static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){binaryCompareP590996,3311505
SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq(sqlite3BinaryCompareCollSeq91014,3312171
static int codeCompare(codeCompare91037,3312703
SQLITE_PRIVATE int sqlite3ExprIsVector(Expr *pExpr){sqlite3ExprIsVector91067,3313839
SQLITE_PRIVATE int sqlite3ExprVectorSize(Expr *pExpr){sqlite3ExprVectorSize91077,3314201
SQLITE_PRIVATE Expr *sqlite3VectorFieldSubexpr(Expr *pVector, int i){sqlite3VectorFieldSubexpr91105,3315112
SQLITE_PRIVATE Expr *sqlite3ExprForVectorField(sqlite3ExprForVectorField91141,3316548
static int exprCodeSubselect(Parse *pParse, Expr *pExpr){exprCodeSubselect91187,3318426
static int exprVectorRegister(exprVectorRegister91215,3319496
static void codeVectorCompare(codeVectorCompare91248,3320771
SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){sqlite3ExprCheckHeight91332,3323694
static void heightOfExpr(Expr *p, int *pnHeight){heightOfExpr91353,3324395
static void heightOfExprList(ExprList *p, int *pnHeight){heightOfExprList91360,3324530
static void heightOfSelect(Select *p, int *pnHeight){heightOfSelect91368,3324698
static void exprSetHeight(Expr *p){exprSetHeight91391,3325477
SQLITE_PRIVATE void sqlite3ExprSetHeightAndFlags(Parse *pParse, Expr *p){sqlite3ExprSetHeightAndFlags91412,3326123
SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){sqlite3SelectExprHeight91422,3326414
SQLITE_PRIVATE void sqlite3ExprSetHeightAndFlags(Parse *pParse, Expr *p){sqlite3ExprSetHeightAndFlags91432,3326703
#define exprSetHeight(exprSetHeight91437,3326910
SQLITE_PRIVATE Expr *sqlite3ExprAlloc(sqlite3ExprAlloc91460,3327983
SQLITE_PRIVATE Expr *sqlite3Expr(sqlite3Expr91509,3329348
SQLITE_PRIVATE void sqlite3ExprAttachSubtrees(sqlite3ExprAttachSubtrees91526,3329893
SQLITE_PRIVATE Expr *sqlite3PExpr(sqlite3PExpr91556,3330627
SQLITE_PRIVATE void sqlite3PExprAddSelect(Parse *pParse, Expr *pExpr, Select *pSelect){sqlite3PExprAddSelect91585,3331481
static int exprAlwaysTrue(Expr *p){exprAlwaysTrue91611,3332450
static int exprAlwaysFalse(Expr *p){exprAlwaysFalse91617,3332613
SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){sqlite3ExprAnd91632,3333076
SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){sqlite3ExprFunction91652,3333663
SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr, u32 n){sqlite3ExprAssignVarNumber91683,3334766
static SQLITE_NOINLINE void sqlite3ExprDeleteNN(sqlite3 *db, Expr *p){sqlite3ExprDeleteNN91751,3336909
SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){sqlite3ExprDelete91778,3337918
static int exprStructSize(Expr *p){exprStructSize91787,3338209
static int dupedExprStructSize(Expr *p, int flags){dupedExprStructSize91827,3340069
static int dupedExprNodeSize(Expr *p, int flags){dupedExprNodeSize91854,3340959
static int dupedExprSize(Expr *p, int flags){dupedExprSize91875,3341797
static Expr *exprDup(sqlite3 *db, Expr *p, int dupFlags, u8 **pzBuffer){exprDup91894,3342480
static With *withDup(sqlite3 *db, With *p){withDup91993,3345887
# define withDup(withDup92011,3346396
SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){sqlite3ExprDup92031,3347244
SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){sqlite3ExprListDup92035,3347406
SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){sqlite3SrcListDup92090,3349281
SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){sqlite3IdListDup92131,3350818
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *pDup, int flags){sqlite3SelectDup92155,3351607
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){sqlite3SelectDup92192,3352818
SQLITE_PRIVATE ExprList *sqlite3ExprListAppend(sqlite3ExprListAppend92207,3353253
SQLITE_PRIVATE ExprList *sqlite3ExprListAppendVector(sqlite3ExprListAppendVector92257,3354750
SQLITE_PRIVATE void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder){sqlite3ExprListSetSortOrder92318,3356922
SQLITE_PRIVATE void sqlite3ExprListSetName(sqlite3ExprListSetName92337,3357530
SQLITE_PRIVATE void sqlite3ExprListSetSpan(sqlite3ExprListSetSpan92362,3358397
SQLITE_PRIVATE void sqlite3ExprListCheckLength(sqlite3ExprListCheckLength92383,3359140
static SQLITE_NOINLINE void exprListDeleteNN(sqlite3 *db, ExprList *pList){exprListDeleteNN92399,3359540
SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){sqlite3ExprListDelete92411,3359938
SQLITE_PRIVATE u32 sqlite3ExprListFlags(const ExprList *pList){sqlite3ExprListFlags92419,3360139
static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){exprNodeIsConstant92457,3361613
static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){selectNodeIsConstant92511,3363522
static int exprIsConst(Expr *p, int initFlag, int iCur){exprIsConst92516,3363662
SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){sqlite3ExprIsConstant92535,3364226
SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){sqlite3ExprIsConstantNotJoin92545,3364553
SQLITE_PRIVATE int sqlite3ExprIsTableConstant(Expr *p, int iCur){sqlite3ExprIsTableConstant92555,3364897
SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p, u8 isInit){sqlite3ExprIsConstantOrFunction92568,3365334
SQLITE_PRIVATE int sqlite3ExprContainsSubquery(Expr *p){sqlite3ExprContainsSubquery92578,3365654
SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){sqlite3ExprIsInteger92595,3366204
SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){sqlite3ExprCanBeNull92641,3367633
SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){sqlite3ExprNeedsNoAffinityChange92671,3368493
SQLITE_PRIVATE int sqlite3IsRowid(const char *z){sqlite3IsRowid92704,3369345
static Select *isCandidateForInOpt(Expr *pX){isCandidateForInOpt92719,3369889
static void sqlite3SetHasNullFlag(Vdbe *v, int iCur, int regHasNull){sqlite3SetHasNullFlag92765,3371850
static int sqlite3InRhsIsConstant(Expr *pIn){sqlite3InRhsIsConstant92782,3372407
SQLITE_PRIVATE int sqlite3FindInIndex(sqlite3FindInIndex92876,3376759
static char *exprINAffinity(Parse *pParse, Expr *pExpr){exprINAffinity93098,3385812
SQLITE_PRIVATE void sqlite3SubselectError(Parse *pParse, int nActual, int nExpect){sqlite3SubselectError93130,3386634
SQLITE_PRIVATE void sqlite3VectorErrorMsg(Parse *pParse, Expr *pExpr){sqlite3VectorErrorMsg93147,3387175
SQLITE_PRIVATE int sqlite3CodeSubselect(sqlite3CodeSubselect93188,3388916
SQLITE_PRIVATE int sqlite3ExprCheckIN(Parse *pParse, Expr *pIn){sqlite3ExprCheckIN93431,3398490
static void sqlite3ExprCodeIN(sqlite3ExprCodeIN93472,3400014
static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){codeReal93713,3409571
static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){codeInteger93731,3410107
static void cacheEntryClear(Parse *pParse, int i){cacheEntryClear93767,3411140
SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){sqlite3ExprCacheStore93784,3411616
SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){sqlite3ExprCacheRemove93839,3413327
SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){sqlite3ExprCachePush93856,3413789
SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse){sqlite3ExprCachePop93870,3414218
static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){sqlite3ExprCachePinRegister93894,3414865
SQLITE_PRIVATE void sqlite3ExprCodeLoadIndexColumn(sqlite3ExprCodeLoadIndexColumn93907,3415215
SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable(sqlite3ExprCodeGetColumnOfTable93929,3416034
SQLITE_PRIVATE int sqlite3ExprCodeGetColumn(sqlite3ExprCodeGetColumn93963,3417321
SQLITE_PRIVATE void sqlite3ExprCodeGetColumnToReg(sqlite3ExprCodeGetColumnToReg93991,3418227
SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){sqlite3ExprCacheClear94006,3418758
SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){sqlite3ExprCacheAffinityChange94028,3419284
SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){sqlite3ExprCodeMove94036,3419565
static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){usedAsColumnCache94050,3420096
static void exprToRegister(Expr *p, int iReg){exprToRegister94067,3420583
static int exprCodeVector(Parse *pParse, Expr *p, int *piFreeable){exprCodeVector94084,3421161
SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeTarget94117,3422171
SQLITE_PRIVATE int sqlite3ExprCodeAtInit(sqlite3ExprCodeAtInit94755,3446242
SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){sqlite3ExprCodeTemp94797,3447656
SQLITE_PRIVATE void sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCode94824,3448353
SQLITE_PRIVATE void sqlite3ExprCodeCopy(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeCopy94844,3449059
SQLITE_PRIVATE void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeFactorable94857,3449587
SQLITE_PRIVATE void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeAndCache94877,3450294
SQLITE_PRIVATE int sqlite3ExprCodeExprList(sqlite3ExprCodeExprList94905,3451264
static void exprCodeBetween(exprCodeBetween94971,3453276
SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){sqlite3ExprIfTrue95040,3456276
SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){sqlite3ExprIfFalse95163,3460593
SQLITE_PRIVATE void sqlite3ExprIfFalseDup(Parse *pParse, Expr *pExpr, int dest,int jumpIfNull){sqlite3ExprIfFalseDup95313,3465849
SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB, int iTab){sqlite3ExprCompare95345,3467306
SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB, int iTab){sqlite3ExprListCompare95403,3469399
SQLITE_PRIVATE int sqlite3ExprCompareSkip(Expr *pA, Expr *pB, int iTab){sqlite3ExprCompareSkip95421,3469926
SQLITE_PRIVATE int sqlite3ExprImpliesExpr(Expr *pE1, Expr *pE2, int iTab){sqlite3ExprImpliesExpr95448,3471061
struct IdxCover {IdxCover95473,3471912
  Index *pIdx;     /* The index to be tested for coverage */pIdx95474,3471930
  int iCur;        /* Cursor number for the table corresponding to the index */iCur95475,3471991
static int exprIdxCover(Walker *pWalker, Expr *pExpr){exprIdxCover95483,3472236
SQLITE_PRIVATE int sqlite3ExprCoveredByIndex(sqlite3ExprCoveredByIndex95504,3472944
struct SrcCount {SrcCount95527,3473629
  SrcList *pSrc;   /* One particular FROM clause in a nested query */pSrc95528,3473647
  int nThis;       /* Number of references to columns in pSrcList */nThis95529,3473717
  int nOther;      /* Number of references to columns in other FROM clauses */nOther95530,3473786
static int exprSrcCount(Walker *pWalker, Expr *pExpr){exprSrcCount95536,3473921
SQLITE_PRIVATE int sqlite3FunctionUsesThisSrc(Expr *pExpr, SrcList *pSrcList){sqlite3FunctionUsesThisSrc95565,3474972
static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){addAggInfoColumn95583,3475497
static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){addAggInfoFunc95599,3475865
static int analyzeAggregate(Walker *pWalker, Expr *pExpr){analyzeAggregate95616,3476269
static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){analyzeAggregatesInSelect95741,3480944
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){sqlite3ExprAnalyzeAggregates95756,3481445
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){sqlite3ExprAnalyzeAggList95772,3481910
SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){sqlite3GetTempReg95785,3482257
SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){sqlite3ReleaseTempReg95800,3482677
SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){sqlite3GetTempRange95817,3483117
SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){sqlite3ReleaseTempRange95832,3483502
SQLITE_PRIVATE void sqlite3ClearTempRegCache(Parse *pParse){sqlite3ClearTempRegCache95847,3483871
SQLITE_PRIVATE int sqlite3NoTempsInRange(Parse *pParse, int iFirst, int iLast){sqlite3NoTempsInRange95858,3484167
static void renameTableFunc(renameTableFunc95913,3485918
static void renameParentFunc(renameParentFunc95978,3487983
static void renameTriggerFunc(renameTriggerFunc96035,3489912
SQLITE_PRIVATE void sqlite3AlterFunctions(void){sqlite3AlterFunctions96107,3492150
static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){whereOrName96136,3493273
static char *whereForeignKeys(Parse *pParse, Table *pTab){whereForeignKeys96154,3493867
static char *whereTempTriggers(Parse *pParse, Table *pTab){whereTempTriggers96170,3494369
static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){reloadTableSchema96204,3495642
static int isSystemTable(Parse *pParse, const char *zName){isSystemTable96253,3497394
SQLITE_PRIVATE void sqlite3AlterRenameTable(sqlite3AlterRenameTable96265,3497717
SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){sqlite3AlterFinishAddColumn96469,3504530
SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){sqlite3AlterBeginAddColumn96607,3509374
# define IsStat4 IsStat496833,3519423
# define IsStat3 IsStat396834,3519446
# define IsStat4 IsStat496836,3519504
# define IsStat3 IsStat396837,3519527
# define IsStat4 IsStat496839,3519556
# define IsStat3 IsStat396840,3519579
# undef SQLITE_STAT4_SAMPLESSQLITE_STAT4_SAMPLES96841,3519602
# define SQLITE_STAT4_SAMPLES SQLITE_STAT4_SAMPLES96842,3519631
#define IsStat34 IsStat3496844,3519670
static void openStatTable(openStatTable96859,3520371
# define SQLITE_STAT4_SAMPLES SQLITE_STAT4_SAMPLES96944,3523227
typedef struct Stat4Accum Stat4Accum;Stat4Accum96952,3523426
typedef struct Stat4Sample Stat4Sample;Stat4Sample96953,3523464
struct Stat4Sample {Stat4Sample96954,3523504
  tRowcnt *anEq;                  /* sqlite_stat4.nEq */anEq96955,3523525
  tRowcnt *anDLt;                 /* sqlite_stat4.nDLt */anDLt96956,3523582
  tRowcnt *anLt;                  /* sqlite_stat4.nLt */anLt96958,3523676
    i64 iRowid;                     /* Rowid in main table of the key */iRowid96960,3523743
    u8 *aRowid;                     /* Key for WITHOUT ROWID tables */aRowid96961,3523816
  } u;u96962,3523887
  u32 nRowid;                     /* Sizeof aRowid[] */nRowid96963,3523894
  u8 isPSample;                   /* True if a periodic sample */isPSample96964,3523950
  int iCol;                       /* If !isPSample, the reason for inclusion */iCol96965,3524016
  u32 iHash;                      /* Tiebreaker hash */iHash96966,3524096
struct Stat4Accum {Stat4Accum96969,3524214
  tRowcnt nRow;             /* Number of rows in the entire table */nRow96970,3524234
  tRowcnt nPSample;         /* How often to do a periodic sample */nPSample96971,3524303
  int nCol;                 /* Number of columns in index + pk/rowid */nCol96972,3524371
  int nKeyCol;              /* Number of index columns w/o the pk/rowid */nKeyCol96973,3524443
  int mxSample;             /* Maximum number of samples to accumulate */mxSample96974,3524518
  Stat4Sample current;      /* Current row as a Stat4Sample */current96975,3524592
  u32 iPrn;                 /* Pseudo-random number used for sampling */iPrn96976,3524655
  Stat4Sample *aBest;       /* Array of nCol best samples */aBest96977,3524728
  int iMin;                 /* Index in a[] of entry with minimum score */iMin96978,3524789
  int nSample;              /* Current number of samples */nSample96979,3524864
  int nMaxEqZero;           /* Max leading 0 in anEq[] for any a[] entry */nMaxEqZero96980,3524924
  int iGet;                 /* Index of current sample accessed by stat_get() */iGet96981,3525000
  Stat4Sample *a;           /* Array of mxSample Stat4Sample objects */a96982,3525081
  sqlite3 *db;              /* Database connection, for malloc() */db96983,3525153
static void sampleClear(sqlite3 *db, Stat4Sample *p){sampleClear96989,3525304
static void sampleSetRowid(sqlite3 *db, Stat4Sample *p, int n, const u8 *pData){sampleSetRowid97001,3525544
static void sampleSetRowidInt64(sqlite3 *db, Stat4Sample *p, i64 iRowid){sampleSetRowidInt6497017,3525939
static void sampleCopy(Stat4Accum *p, Stat4Sample *pTo, Stat4Sample *pFrom){sampleCopy97030,3526229
static void stat4Destructor(void *pOld){stat4Destructor97048,3526797
static void statInit(statInit97082,3528151
static const FuncDef statInitFuncdef = {statInitFuncdef97164,3531038
static int sampleIsBetterPost(sampleIsBetterPost97187,3531932
static int sampleIsBetter(sampleIsBetter97211,3532547
static void sampleInsert(Stat4Accum *p, Stat4Sample *pNew, int nEqZero){sampleInsert97238,3533276
static void samplePushPrevious(Stat4Accum *p, int iChng){samplePushPrevious97335,3536401
static void statPush(statPush97411,3538778
static const FuncDef statPushFuncdef = {statPushFuncdef97480,3540726
#define STAT_GET_STAT1 STAT_GET_STAT197491,3541006
#define STAT_GET_ROWID STAT_GET_ROWID97492,3541075
#define STAT_GET_NEQ STAT_GET_NEQ97493,3541148
#define STAT_GET_NLT STAT_GET_NLT97494,3541219
#define STAT_GET_NDLT STAT_GET_NDLT97495,3541290
static void statGet(statGet97516,3542289
static const FuncDef statGetFuncdef = {statGetFuncdef97631,3545770
static void callStatGet(Vdbe *v, int regStat4, int iParam, int regOut){callStatGet97642,3546049
static void analyzeOneTable(analyzeOneTable97660,3546612
static void loadAnalysis(Parse *pParse, int iDb){loadAnalysis97986,3558983
static void analyzeDatabase(Parse *pParse, int iDb){analyzeDatabase97996,3559205
static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){analyzeTable98023,3560033
SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){sqlite3Analyze98054,3561099
typedef struct analysisInfo analysisInfo;analysisInfo98106,3562676
struct analysisInfo {analysisInfo98107,3562718
  sqlite3 *db;db98108,3562740
  const char *zDatabase;zDatabase98109,3562755
static void decodeIntArray(decodeIntArray98117,3562951
static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){analysisLoader98188,3564859
SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){sqlite3DeleteIndexSamples98251,3566692
static void initAvgEq(Index *pIdx){initAvgEq98276,3567319
static Index *findIndexOrPrimaryKey(findIndexOrPrimaryKey98335,3569468
static int loadStatTbl(loadStatTbl98361,3570305
static int loadStat4(sqlite3 *db, const char *zDb){loadStat498487,3575119
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){sqlite3AnalysisLoad98531,3576732
static int resolveAttachExpr(NameContext *pName, Expr *pExpr)resolveAttachExpr98636,3580007
static void attachFunc(attachFunc98660,3580587
static void detachFunc(detachFunc98863,3586642
static void codeAttach(codeAttach98915,3587991
SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){sqlite3Detach98989,3590167
SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){sqlite3Attach99008,3590713
SQLITE_PRIVATE void sqlite3FixInit(sqlite3FixInit99027,3591358
SQLITE_PRIVATE int sqlite3FixSrcList(sqlite3FixSrcList99060,3592700
SQLITE_PRIVATE int sqlite3FixSelect(sqlite3FixSelect99090,3593704
SQLITE_PRIVATE int sqlite3FixExpr(sqlite3FixExpr99123,3594531
SQLITE_PRIVATE int sqlite3FixExprList(sqlite3FixExprList99149,3595302
SQLITE_PRIVATE int sqlite3FixTriggerStep(sqlite3FixTriggerStep99166,3595712
SQLITE_API int sqlite3_set_authorizer(sqlite3_set_authorizer99257,3598855
static void sqliteAuthBadReturnCode(Parse *pParse){sqliteAuthBadReturnCode99277,3599431
SQLITE_PRIVATE int sqlite3AuthReadCol(sqlite3AuthReadCol99291,3600026
SQLITE_PRIVATE void sqlite3AuthRead(sqlite3AuthRead99329,3601466
SQLITE_PRIVATE int sqlite3AuthCheck(sqlite3AuthCheck99386,3603314
SQLITE_PRIVATE void sqlite3AuthContextPush(sqlite3AuthContextPush99426,3604354
SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){sqlite3AuthContextPop99441,3604697
struct TableLock {TableLock99483,3605971
  int iDb;               /* The database containing the table to be locked */iDb99484,3605990
  int iTab;              /* The root page of the table to be locked */iTab99485,3606068
  u8 isWriteLock;        /* True for write lock.  False for a read lock */isWriteLock99486,3606139
  const char *zLockName; /* Name of the table */zLockName99487,3606214
SQLITE_PRIVATE void sqlite3TableLock(sqlite3TableLock99500,3606677
static void codeTableLocks(Parse *pParse){codeTableLocks99542,3607970
  #define codeTableLocks(codeTableLocks99557,3608388
SQLITE_PRIVATE int sqlite3DbMaskAllZero(yDbMask m){sqlite3DbMaskAllZero99566,3608660
SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){sqlite3FinishCoding99583,3609160
SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){sqlite3NestedParse99702,3613309
SQLITE_PRIVATE int sqlite3UserAuthTable(const char *zTable){sqlite3UserAuthTable99732,3614212
SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){sqlite3FindTable99749,3614853
SQLITE_PRIVATE Table *sqlite3LocateTable(sqlite3LocateTable99790,3616425
SQLITE_PRIVATE Table *sqlite3LocateTableItem(sqlite3LocateTableItem99843,3618315
SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){sqlite3FindIndex99871,3619173
static void freeIndex(sqlite3 *db, Index *p){freeIndex99891,3619832
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){sqlite3UnlinkAndDeleteIndex99911,3620448
SQLITE_PRIVATE void sqlite3CollapseDatabaseArray(sqlite3 *db){sqlite3CollapseDatabaseArray99944,3621514
SQLITE_PRIVATE void sqlite3ResetOneSchema(sqlite3 *db, int iDb){sqlite3ResetOneSchema99970,3622104
SQLITE_PRIVATE void sqlite3ResetAllSchemasOfConnection(sqlite3 *db){sqlite3ResetAllSchemasOfConnection99996,3622825
SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){sqlite3CommitInternalChanges100014,3623248
SQLITE_PRIVATE void sqlite3DeleteColumnNames(sqlite3 *db, Table *pTable){sqlite3DeleteColumnNames100022,3623454
static void SQLITE_NOINLINE deleteTable(sqlite3 *db, Table *pTable){deleteTable100051,3624482
SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){sqlite3DeleteTable100095,3626167
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){sqlite3UnlinkAndDeleteTable100107,3626564
SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){sqlite3NameFromToken100135,3627535
SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){sqlite3OpenMasterTable100150,3627890
SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){sqlite3FindDbName100165,3628407
SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){sqlite3FindDb100185,3629129
SQLITE_PRIVATE int sqlite3TwoPartName(sqlite3TwoPartName100210,3630011
SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){sqlite3CheckObjectName100246,3631195
SQLITE_PRIVATE Index *sqlite3PrimaryKeyIndex(Table *pTab){sqlite3PrimaryKeyIndex100259,3631618
SQLITE_PRIVATE i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){sqlite3ColumnOfIndex100269,3631876
SQLITE_PRIVATE void sqlite3StartTable(sqlite3StartTable100293,3632913
SQLITE_PRIVATE void sqlite3ColumnPropertiesFromName(Table *pTab, Column *pCol){sqlite3ColumnPropertiesFromName100483,3639749
SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName, Token *pType){sqlite3AddColumn100501,3640339
SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){sqlite3AddNotNull100564,3642107
SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn, u8 *pszEst){sqlite3AffinityType100597,3643243
SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){sqlite3AddDefaultValue100669,3645625
static void sqlite3StringToId(Expr *p){sqlite3StringToId100715,3647390
SQLITE_PRIVATE void sqlite3AddPrimaryKey(sqlite3AddPrimaryKey100741,3648376
SQLITE_PRIVATE void sqlite3AddCheckConstraint(sqlite3AddCheckConstraint100811,3650510
SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){sqlite3AddCollateType100836,3651204
SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){sqlite3LocateCollSeq100888,3652957
SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){sqlite3ChangeCookie100922,3654164
static int identLength(const char *z){identLength100938,3654722
static void identPut(char *z, int *pIdx, char *zSignedIdent){identPut100959,3655511
static char *createTableStmt(sqlite3 *db, Table *p){createTableStmt100987,3656288
static int resizeIndexObject(sqlite3 *db, Index *pIdx, int N){resizeIndexObject101055,3658243
static void estimateTableWidth(Table *pTab){estimateTableWidth101079,3658997
static void estimateIndexWidth(Index *pIdx){estimateIndexWidth101093,3659332
static int hasColumn(const i16 *aiCol, int nCol, int x){hasColumn101107,3659738
static void convertToWithoutRowidTable(Parse *pParse, Table *pTab){convertToWithoutRowidTable101137,3661221
SQLITE_PRIVATE void sqlite3EndTable(sqlite3EndTable101284,3666145
SQLITE_PRIVATE void sqlite3CreateView(sqlite3CreateView101526,3674285
SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){sqlite3ViewGetColumnNames101598,3676816
static void sqliteViewResetAll(sqlite3 *db, int idx){sqliteViewResetAll101712,3680782
# define sqliteViewResetAll(sqliteViewResetAll101727,3681248
SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){sqlite3RootPageMoved101748,3682224
static void destroyRootPage(Parse *pParse, int iTable, int iDb){destroyRootPage101778,3683147
static void destroyTable(Parse *pParse, Table *pTab){destroyTable101807,3684348
static void sqlite3ClearStatTables(sqlite3ClearStatTables101865,3686125
SQLITE_PRIVATE void sqlite3CodeDropTable(Parse *pParse, Table *pTab, int iDb, int isView){sqlite3CodeDropTable101888,3686758
SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){sqlite3DropTable101959,3689096
SQLITE_PRIVATE void sqlite3CreateForeignKey(sqlite3CreateForeignKey102075,3692746
SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){sqlite3DeferForeignKey102196,3696139
static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){sqlite3RefillIndex102217,3697001
SQLITE_PRIVATE Index *sqlite3AllocateIndexObject(sqlite3AllocateIndexObject102304,3700708
SQLITE_PRIVATE void sqlite3CreateIndex(sqlite3CreateIndex102344,3702577
SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){sqlite3DefaultRowEst102902,3722721
SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){sqlite3DropIndex102934,3723942
SQLITE_PRIVATE void *sqlite3ArrayAllocate(sqlite3ArrayAllocate103015,3726750
SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){sqlite3IdListAppend103046,3727594
SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){sqlite3IdListDelete103070,3728085
SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){sqlite3IdListIndex103084,3728419
SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge(sqlite3SrcListEnlarge103112,3729384
SQLITE_PRIVATE SrcList *sqlite3SrcListAppend(sqlite3SrcListAppend103194,3732171
SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){sqlite3SrcListAssignCursors103234,3733353
SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){sqlite3SrcListDelete103252,3733850
SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm(sqlite3SrcListAppendFromTerm103286,3735336
SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){sqlite3SrcListIndexedBy103330,3736787
SQLITE_PRIVATE void sqlite3SrcListFuncArgs(Parse *pParse, SrcList *p, ExprList *pList){sqlite3SrcListFuncArgs103352,3737544
SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){sqlite3SrcListShiftJoinType103380,3738528
SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){sqlite3BeginTransaction103393,3738787
SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){sqlite3CommitTransaction103418,3739354
SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){sqlite3RollbackTransaction103435,3739709
SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){sqlite3Savepoint103453,3740142
SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){sqlite3OpenTempDatabase103473,3740888
SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){sqlite3CodeVerifySchema103508,3741947
SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){sqlite3CodeVerifyNamedSchema103527,3742596
SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){sqlite3BeginWriteOperation103551,3743579
SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){sqlite3MultiWrite103565,3744200
SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){sqlite3MayAbort103586,3745205
SQLITE_PRIVATE void sqlite3HaltConstraint(sqlite3HaltConstraint103596,3745536
SQLITE_PRIVATE void sqlite3UniqueConstraint(sqlite3UniqueConstraint103616,3746169
SQLITE_PRIVATE void sqlite3RowidConstraint(sqlite3RowidConstraint103649,3747146
static int collationMatch(const char *zColl, Index *pIndex){collationMatch103673,3747930
static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){reindexTable103692,3748412
static void reindexDatabases(Parse *pParse, char const *zColl){reindexDatabases103711,3749044
SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){sqlite3Reindex103743,3750275
SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoOfIndex(Parse *pParse, Index *pIdx){sqlite3KeyInfoOfIndex103803,3752264
SQLITE_PRIVATE With *sqlite3WithAdd(sqlite3WithAdd103835,3753126
SQLITE_PRIVATE void sqlite3WithDelete(sqlite3 *db, With *pWith){sqlite3WithDelete103885,3754610
static void callCollNeeded(sqlite3 *db, int enc, const char *zName){callCollNeeded103923,3755811
static int synthCollSeq(sqlite3 *db, CollSeq *pColl){synthCollSeq103952,3756848
SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq(sqlite3GetCollSeq103982,3757959
SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){sqlite3CheckCollSeq104023,3759405
static CollSeq *findCollSeqEntry(findCollSeqEntry104051,3760334
SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq(sqlite3FindCollSeq104104,3762131
#define FUNC_PERFECT_MATCH FUNC_PERFECT_MATCH104150,3763882
static int matchQuality(matchQuality104151,3763948
static FuncDef *functionSearch(functionSearch104186,3765011
SQLITE_PRIVATE void sqlite3InsertBuiltinFuncs(sqlite3InsertBuiltinFuncs104202,3765356
SQLITE_PRIVATE FuncDef *sqlite3FindFunction(sqlite3FindFunction104246,3766964
SQLITE_PRIVATE void sqlite3SchemaClear(void *p){sqlite3SchemaClear104336,3770067
SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){sqlite3SchemaGet104368,3771007
SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){sqlite3SrcListLookup104419,3772818
SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){sqlite3IsReadOnly104440,3773381
SQLITE_PRIVATE void sqlite3MaterializeView(sqlite3MaterializeView104477,3774659
SQLITE_PRIVATE Expr *sqlite3LimitWhere(sqlite3LimitWhere104514,3776099
SQLITE_PRIVATE void sqlite3DeleteFrom(sqlite3DeleteFrom104596,3779311
# undef isViewisView104664,3782592
# define isView isView104665,3782607
 #undef isViewisView104956,3793045
 #undef pTriggerpTrigger104959,3793083
SQLITE_PRIVATE void sqlite3GenerateRowDelete(sqlite3GenerateRowDelete105003,3795067
SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete(sqlite3GenerateRowIndexDelete105154,3801530
SQLITE_PRIVATE int sqlite3GenerateIndexKey(sqlite3GenerateIndexKey105218,3804720
SQLITE_PRIVATE void sqlite3ResolvePartIdxLabel(Parse *pParse, int iLabel){sqlite3ResolvePartIdxLabel105280,3807164
static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){sqlite3GetFuncCollSeq105312,3808253
static void sqlite3SkipAccumulatorLoad(sqlite3_context *context){sqlite3SkipAccumulatorLoad105325,3808617
static void minmaxFunc(minmaxFunc105332,3808782
static void typeofFunc(typeofFunc105362,3809500
static void lengthFunc(lengthFunc105383,3810030
static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){absFunc105423,3810857
static void instrFunc(instrFunc105472,3812574
static void printfFunc(printfFunc105517,3813795
static void substrFunc(substrFunc105553,3814857
static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){roundFunc105648,3817063
static void *contextMalloc(sqlite3_context *context, i64 nByte){contextMalloc105689,3818349
static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){upperFunc105710,3818895
static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){lowerFunc105729,3819475
#define noopFunc noopFunc105757,3820500
static void randomFunc(randomFunc105762,3820638
static void randomBlob(randomBlob105788,3821456
static void last_insert_rowid(last_insert_rowid105812,3821973
static void changes(changes105832,3822615
static void total_changes(total_changes105846,3822995
struct compareInfo {compareInfo105861,3823423
  u8 matchAll;          /* "*" or "%" */matchAll105862,3823444
  u8 matchOne;          /* "?" or "_" */matchOne105863,3823485
  u8 matchSet;          /* "[" or 0 */matchSet105864,3823526
  u8 noCase;            /* true to ignore case differences */noCase105865,3823565
# define sqlite3Utf8Read(sqlite3Utf8Read105875,3823908
# define Utf8Read(Utf8Read105876,3823955
# define Utf8Read(Utf8Read105878,3824005
static const struct compareInfo globInfo = { '*', '?', '[', 0 };globInfo105881,3824087
static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };likeInfoNorm105884,3824265
static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };likeInfoAlt105887,3824459
#define SQLITE_MATCH SQLITE_MATCH105892,3824580
#define SQLITE_NOMATCH SQLITE_NOMATCH105893,3824615
#define SQLITE_NOWILDCARDMATCH SQLITE_NOWILDCARDMATCH105894,3824650
static int patternCompare(patternCompare105934,3826019
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){sqlite3_strglob106062,3830562
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){sqlite3_strlike106070,3830825
SQLITE_API int sqlite3_like_count = 0;sqlite3_like_count106080,3831161
static void likeFunc(likeFunc106096,3831589
static void nullifFunc(nullifFunc106161,3833528
static void versionFunc(versionFunc106177,3833934
static void sourceidFunc(sourceidFunc106193,3834426
static void errlogFunc(errlogFunc106209,3834924
static void compileoptionusedFunc(compileoptionusedFunc106225,3835355
static void compileoptiongetFunc(compileoptiongetFunc106249,3836067
static const char hexdigits[] = {hexdigits106267,3836611
static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){quoteFunc106279,3837055
static void unicodeFunc(unicodeFunc106355,3839295
static void charFunc(charFunc106370,3839745
static void hexFunc(hexFunc106411,3840906
static void zeroblobFunc(zeroblobFunc106439,3841614
static void replaceFunc(replaceFunc106462,3842216
static void trimFunc(trimFunc106546,3844976
static void unknownFunc(unknownFunc106637,3847847
static void soundexFunc(soundexFunc106658,3848362
static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){loadExt106711,3849932
typedef struct SumCtx SumCtx;SumCtx106742,3850808
struct SumCtx {SumCtx106743,3850838
  double rSum;      /* Floating point sum */rSum106744,3850854
  i64 iSum;         /* Integer sum */   iSum106745,3850899
  i64 cnt;          /* Number of elements summed */cnt106746,3850940
  u8 overflow;      /* True if integer overflow seen */overflow106747,3850992
  u8 approx;        /* True if non-integer value was input to the sum */approx106748,3851048
static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){sumStep106761,3851562
static void sumFinalize(sqlite3_context *context){sumFinalize106782,3852152
static void avgFinalize(sqlite3_context *context){avgFinalize106795,3852509
static void totalFinalize(sqlite3_context *context){totalFinalize106802,3852707
typedef struct CountCtx CountCtx;CountCtx106813,3853044
struct CountCtx {CountCtx106814,3853078
  i64 n;n106815,3853096
static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){countStep106821,3853172
static void countFinalize(sqlite3_context *context){countFinalize106837,3853816
static void minmaxStep(minmaxStep106846,3854047
static void minMaxFinalize(sqlite3_context *context){minMaxFinalize106884,3855326
static void groupConcatStep(groupConcatStep106898,3855635
static void groupConcatFinalize(sqlite3_context *context){groupConcatFinalize106930,3856554
SQLITE_PRIVATE void sqlite3RegisterPerConnectionBuiltinFunctions(sqlite3 *db){sqlite3RegisterPerConnectionBuiltinFunctions106950,3857223
static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){setLikeOptFlag106961,3857539
SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){sqlite3RegisterLikeFunctions106974,3857935
SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){sqlite3IsLikeFunction107002,3859144
SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(void){sqlite3RegisterBuiltinFunctions107035,3860297
SQLITE_PRIVATE int sqlite3FkLocateIndex(sqlite3FkLocateIndex107344,3874232
static void fkLookupParent(fkLookupParent107479,3879777
static Expr *exprTableRegister(exprTableRegister107620,3886015
static Expr *exprTableColumn(exprTableColumn107652,3886942
static void fkScanChildren(fkScanChildren107699,3889015
SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){sqlite3FkReferences107824,3894214
static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){fkTriggerDelete107836,3894662
SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){sqlite3FkDropTable107864,3895741
static int fkChildIsModified(fkChildIsModified107925,3898253
static int fkParentIsModified(fkParentIsModified107952,3899382
static int isSetNullAction(Parse *pParse, FKey *pFKey){isSetNullAction107981,3900079
SQLITE_PRIVATE void sqlite3FkCheck(sqlite3FkCheck108014,3901399
#define COLUMN_MASK(COLUMN_MASK108208,3909406
SQLITE_PRIVATE u32 sqlite3FkOldmask(sqlite3FkOldmask108214,3909581
SQLITE_PRIVATE int sqlite3FkRequired(sqlite3FkRequired108254,3911013
static Trigger *fkActionTrigger(fkActionTrigger108314,3913413
SQLITE_PRIVATE void sqlite3FkActions(sqlite3FkActions108496,3920218
SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){sqlite3FkDelete108528,3921601
SQLITE_PRIVATE void sqlite3OpenTable(sqlite3OpenTable108594,3923785
SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(sqlite3 *db, Index *pIdx){sqlite3IndexAffinityStr108640,3925445
SQLITE_PRIVATE void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){sqlite3TableAffinity108698,3927385
static int readsTable(Parse *p, int iDb, Table *pTab){readsTable108733,3928376
static int autoIncBegin(autoIncBegin108790,3930250
SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){sqlite3AutoincrementBegin108824,3931397
static void autoIncStep(Parse *pParse, int memId, int regRowid){autoIncStep108879,3933431
static SQLITE_NOINLINE void autoIncrementEnd(Parse *pParse){autoIncrementEnd108892,3933892
SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){sqlite3AutoincrementEnd108927,3934978
# define autoIncBegin(autoIncBegin108935,3935192
# define autoIncStep(autoIncStep108936,3935225
SQLITE_PRIVATE void sqlite3Insert(sqlite3Insert109046,3939558
# undef isViewisView109137,3943516
# define isView isView109138,3943531
 #undef isViewisView109648,3961844
 #undef pTriggerpTrigger109651,3961882
 #undef tmasktmask109654,3961919
#define CKCNSTRNT_COLUMN CKCNSTRNT_COLUMN109660,3962019
#define CKCNSTRNT_ROWID CKCNSTRNT_ROWID109661,3962100
static int checkConstraintExprNode(Walker *pWalker, Expr *pExpr){checkConstraintExprNode109668,3962412
static int checkConstraintUnchanged(Expr *pExpr, int *aiChng, int chngRowid){checkConstraintUnchanged109692,3963245
SQLITE_PRIVATE void sqlite3GenerateConstraintChecks(sqlite3GenerateConstraintChecks109793,3968393
SQLITE_PRIVATE void sqlite3SetMakeRecordP5(Vdbe *v, Table *pTab){sqlite3SetMakeRecordP5110249,3986255
SQLITE_PRIVATE void sqlite3CompleteInsertion(sqlite3CompleteInsertion110273,3987070
SQLITE_PRIVATE int sqlite3OpenTableAndIndices(sqlite3OpenTableAndIndices110375,3991114
SQLITE_API int sqlite3_xferopt_count;sqlite3_xferopt_count110437,3993296
static int xferCompatibleIndex(Index *pDest, Index *pSrc){xferCompatibleIndex110453,3993841
static int xferOptimization(xferOptimization110514,3996287
SQLITE_API int sqlite3_exec(sqlite3_exec110861,4010471
  #define SQLITE_CORE SQLITE_CORE110996,4014703
#define SQLITE3EXT_HSQLITE3EXT_H111018,4015608
struct sqlite3_api_routines {sqlite3_api_routines111031,4016030
  void * (*aggregate_context)(sqlite3_context*,int nBytes);aggregate_context111032,4016060
  int  (*aggregate_count)(sqlite3_context*);aggregate_count111033,4016120
  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));bind_blob111034,4016165
  int  (*bind_double)(sqlite3_stmt*,int,double);bind_double111035,4016238
  int  (*bind_int)(sqlite3_stmt*,int,int);bind_int111036,4016287
  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);bind_int64111037,4016330
  int  (*bind_null)(sqlite3_stmt*,int);bind_null111038,4016384
  int  (*bind_parameter_count)(sqlite3_stmt*);bind_parameter_count111039,4016424
  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);bind_parameter_index111040,4016471
  const char * (*bind_parameter_name)(sqlite3_stmt*,int);bind_parameter_name111041,4016535
  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));bind_text111042,4016593
  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));bind_text16111043,4016666
  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);bind_value111044,4016739
  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);busy_handler111045,4016801
  int  (*busy_timeout)(sqlite3*,int ms);busy_timeout111046,4016859
  int  (*changes)(sqlite3*);changes111047,4016900
  int  (*close)(sqlite3*);close111048,4016929
  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,collation_needed111049,4016956
  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,collation_needed16111051,4017077
  const void * (*column_blob)(sqlite3_stmt*,int iCol);column_blob111053,4017202
  int  (*column_bytes)(sqlite3_stmt*,int iCol);column_bytes111054,4017257
  int  (*column_bytes16)(sqlite3_stmt*,int iCol);column_bytes16111055,4017305
  int  (*column_count)(sqlite3_stmt*pStmt);column_count111056,4017355
  const char * (*column_database_name)(sqlite3_stmt*,int);column_database_name111057,4017399
  const void * (*column_database_name16)(sqlite3_stmt*,int);column_database_name16111058,4017458
  const char * (*column_decltype)(sqlite3_stmt*,int i);column_decltype111059,4017519
  const void * (*column_decltype16)(sqlite3_stmt*,int);column_decltype16111060,4017575
  double  (*column_double)(sqlite3_stmt*,int iCol);column_double111061,4017631
  int  (*column_int)(sqlite3_stmt*,int iCol);column_int111062,4017683
  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);column_int64111063,4017729
  const char * (*column_name)(sqlite3_stmt*,int);column_name111064,4017786
  const void * (*column_name16)(sqlite3_stmt*,int);column_name16111065,4017836
  const char * (*column_origin_name)(sqlite3_stmt*,int);column_origin_name111066,4017888
  const void * (*column_origin_name16)(sqlite3_stmt*,int);column_origin_name16111067,4017945
  const char * (*column_table_name)(sqlite3_stmt*,int);column_table_name111068,4018004
  const void * (*column_table_name16)(sqlite3_stmt*,int);column_table_name16111069,4018060
  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);column_text111070,4018118
  const void * (*column_text16)(sqlite3_stmt*,int iCol);column_text16111071,4018182
  int  (*column_type)(sqlite3_stmt*,int iCol);column_type111072,4018239
  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);column_value111073,4018286
  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);commit_hook111074,4018344
  int  (*complete)(const char*sql);complete111075,4018399
  int  (*complete16)(const void*sql);complete16111076,4018435
  int  (*create_collation)(sqlite3*,const char*,int,void*,create_collation111077,4018473
  int  (*create_collation16)(sqlite3*,const void*,int,void*,create_collation16111079,4018607
  int  (*create_function)(sqlite3*,const char*,int,int,void*,create_function111081,4018745
  int  (*create_function16)(sqlite3*,const void*,int,int,void*,create_function16111085,4019026
  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);create_module111089,4019315
  int  (*data_count)(sqlite3_stmt*pStmt);data_count111090,4019389
  sqlite3 * (*db_handle)(sqlite3_stmt*);db_handle111091,4019431
  int (*declare_vtab)(sqlite3*,const char*);declare_vtab111092,4019472
  int  (*enable_shared_cache)(int);enable_shared_cache111093,4019517
  int  (*errcode)(sqlite3*db);errcode111094,4019553
  const char * (*errmsg)(sqlite3*);errmsg111095,4019584
  const void * (*errmsg16)(sqlite3*);errmsg16111096,4019620
  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);exec111097,4019658
  int  (*expired)(sqlite3_stmt*);expired111098,4019726
  int  (*finalize)(sqlite3_stmt*pStmt);finalize111099,4019760
  void  (*free)(void*);free111100,4019800
  void  (*free_table)(char**result);free_table111101,4019824
  int  (*get_autocommit)(sqlite3*);get_autocommit111102,4019861
  void * (*get_auxdata)(sqlite3_context*,int);get_auxdata111103,4019897
  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);get_table111104,4019944
  int  (*global_recover)(void);global_recover111105,4020012
  void  (*interruptx)(sqlite3*);interruptx111106,4020044
  sqlite_int64  (*last_insert_rowid)(sqlite3*);last_insert_rowid111107,4020077
  const char * (*libversion)(void);libversion111108,4020125
  int  (*libversion_number)(void);libversion_number111109,4020161
  void *(*malloc)(int);malloc111110,4020196
  char * (*mprintf)(const char*,...);mprintf111111,4020220
  int  (*open)(const char*,sqlite3**);open111112,4020258
  int  (*open16)(const void*,sqlite3**);open16111113,4020297
  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);prepare111114,4020338
  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);prepare16111115,4020411
  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);profile111116,4020486
  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);progress_handler111117,4020564
  void *(*realloc)(void*,int);realloc111118,4020627
  int  (*reset)(sqlite3_stmt*pStmt);reset111119,4020658
  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));result_blob111120,4020695
  void  (*result_double)(sqlite3_context*,double);result_double111121,4020768
  void  (*result_error)(sqlite3_context*,const char*,int);result_error111122,4020819
  void  (*result_error16)(sqlite3_context*,const void*,int);result_error16111123,4020878
  void  (*result_int)(sqlite3_context*,int);result_int111124,4020939
  void  (*result_int64)(sqlite3_context*,sqlite_int64);result_int64111125,4020984
  void  (*result_null)(sqlite3_context*);result_null111126,4021040
  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));result_text111127,4021082
  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));result_text16111128,4021155
  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));result_text16be111129,4021230
  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));result_text16le111130,4021307
  void  (*result_value)(sqlite3_context*,sqlite3_value*);result_value111131,4021384
  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);rollback_hook111132,4021442
  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,set_authorizer111133,4021500
  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));set_auxdata111135,4021634
  char * (*snprintf)(int,char*,const char*,...);snprintf111136,4021702
  int  (*step)(sqlite3_stmt*);step111137,4021751
  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,table_column_metadata111138,4021782
  void  (*thread_cleanup)(void);thread_cleanup111140,4021935
  int  (*total_changes)(sqlite3*);total_changes111141,4021968
  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);trace111142,4022003
  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);transfer_bindings111143,4022071
  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,update_hook111144,4022129
  void * (*user_data)(sqlite3_context*);user_data111146,4022269
  const void * (*value_blob)(sqlite3_value*);value_blob111147,4022310
  int  (*value_bytes)(sqlite3_value*);value_bytes111148,4022356
  int  (*value_bytes16)(sqlite3_value*);value_bytes16111149,4022395
  double  (*value_double)(sqlite3_value*);value_double111150,4022436
  int  (*value_int)(sqlite3_value*);value_int111151,4022479
  sqlite_int64  (*value_int64)(sqlite3_value*);value_int64111152,4022516
  int  (*value_numeric_type)(sqlite3_value*);value_numeric_type111153,4022564
  const unsigned char * (*value_text)(sqlite3_value*);value_text111154,4022610
  const void * (*value_text16)(sqlite3_value*);value_text16111155,4022665
  const void * (*value_text16be)(sqlite3_value*);value_text16be111156,4022713
  const void * (*value_text16le)(sqlite3_value*);value_text16le111157,4022763
  int  (*value_type)(sqlite3_value*);value_type111158,4022813
  char *(*vmprintf)(const char*,va_list);vmprintf111159,4022851
  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);overload_function111161,4022911
  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);prepare_v2111163,4023006
  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);prepare16_v2111164,4023081
  int (*clear_bindings)(sqlite3_stmt*);clear_bindings111165,4023158
  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,create_module_v2111167,4023221
  int (*bind_zeroblob)(sqlite3_stmt*,int,int);bind_zeroblob111170,4023373
  int (*blob_bytes)(sqlite3_blob*);blob_bytes111171,4023420
  int (*blob_close)(sqlite3_blob*);blob_close111172,4023456
  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,blob_open111173,4023492
  int (*blob_read)(sqlite3_blob*,void*,int,int);blob_read111175,4023611
  int (*blob_write)(sqlite3_blob*,const void*,int,int);blob_write111176,4023660
  int (*create_collation_v2)(sqlite3*,const char*,int,void*,create_collation_v2111177,4023716
  int (*file_control)(sqlite3*,const char*,int,void*);file_control111180,4023899
  sqlite3_int64 (*memory_highwater)(int);memory_highwater111181,4023954
  sqlite3_int64 (*memory_used)(void);memory_used111182,4023996
  sqlite3_mutex *(*mutex_alloc)(int);mutex_alloc111183,4024034
  void (*mutex_enter)(sqlite3_mutex*);mutex_enter111184,4024072
  void (*mutex_free)(sqlite3_mutex*);mutex_free111185,4024111
  void (*mutex_leave)(sqlite3_mutex*);mutex_leave111186,4024149
  int (*mutex_try)(sqlite3_mutex*);mutex_try111187,4024188
  int (*open_v2)(const char*,sqlite3**,int,const char*);open_v2111188,4024224
  int (*release_memory)(int);release_memory111189,4024281
  void (*result_error_nomem)(sqlite3_context*);result_error_nomem111190,4024311
  void (*result_error_toobig)(sqlite3_context*);result_error_toobig111191,4024359
  int (*sleep)(int);sleep111192,4024408
  void (*soft_heap_limit)(int);soft_heap_limit111193,4024429
  sqlite3_vfs *(*vfs_find)(const char*);vfs_find111194,4024461
  int (*vfs_register)(sqlite3_vfs*,int);vfs_register111195,4024502
  int (*vfs_unregister)(sqlite3_vfs*);vfs_unregister111196,4024543
  int (*xthreadsafe)(void);xthreadsafe111197,4024582
  void (*result_zeroblob)(sqlite3_context*,int);result_zeroblob111198,4024610
  void (*result_error_code)(sqlite3_context*,int);result_error_code111199,4024659
  int (*test_control)(int, ...);test_control111200,4024710
  void (*randomness)(int,void*);randomness111201,4024743
  sqlite3 *(*context_db_handle)(sqlite3_context*);context_db_handle111202,4024776
  int (*extended_result_codes)(sqlite3*,int);extended_result_codes111203,4024827
  int (*limit)(sqlite3*,int,int);limit111204,4024873
  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);next_stmt111205,4024907
  const char *(*sql)(sqlite3_stmt*);sql111206,4024961
  int (*status)(int,int*,int*,int);status111207,4024998
  int (*backup_finish)(sqlite3_backup*);backup_finish111208,4025034
  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);backup_init111209,4025075
  int (*backup_pagecount)(sqlite3_backup*);backup_pagecount111210,4025152
  int (*backup_remaining)(sqlite3_backup*);backup_remaining111211,4025196
  int (*backup_step)(sqlite3_backup*,int);backup_step111212,4025240
  const char *(*compileoption_get)(int);compileoption_get111213,4025283
  int (*compileoption_used)(const char*);compileoption_used111214,4025324
  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,create_function_v2111215,4025366
  int (*db_config)(sqlite3*,int,...);db_config111220,4025707
  sqlite3_mutex *(*db_mutex)(sqlite3*);db_mutex111221,4025745
  int (*db_status)(sqlite3*,int,int*,int*,int);db_status111222,4025785
  int (*extended_errcode)(sqlite3*);extended_errcode111223,4025833
  void (*log)(int,const char*,...);log111224,4025870
  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);soft_heap_limit64111225,4025906
  const char *(*sourceid)(void);sourceid111226,4025959
  int (*stmt_status)(sqlite3_stmt*,int,int);stmt_status111227,4025992
  int (*strnicmp)(const char*,const char*,int);strnicmp111228,4026037
  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);unlock_notify111229,4026085
  int (*wal_autocheckpoint)(sqlite3*,int);wal_autocheckpoint111230,4026145
  int (*wal_checkpoint)(sqlite3*,const char*);wal_checkpoint111231,4026188
  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);wal_hook111232,4026235
  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);blob_reopen111233,4026311
  int (*vtab_config)(sqlite3*,int op,...);vtab_config111234,4026362
  int (*vtab_on_conflict)(sqlite3*);vtab_on_conflict111235,4026405
  int (*close_v2)(sqlite3*);close_v2111237,4026475
  const char *(*db_filename)(sqlite3*,const char*);db_filename111238,4026504
  int (*db_readonly)(sqlite3*,const char*);db_readonly111239,4026556
  int (*db_release_memory)(sqlite3*);db_release_memory111240,4026600
  const char *(*errstr)(int);errstr111241,4026638
  int (*stmt_busy)(sqlite3_stmt*);stmt_busy111242,4026668
  int (*stmt_readonly)(sqlite3_stmt*);stmt_readonly111243,4026703
  int (*stricmp)(const char*,const char*);stricmp111244,4026742
  int (*uri_boolean)(const char*,const char*,int);uri_boolean111245,4026785
  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);uri_int64111246,4026836
  const char *(*uri_parameter)(const char*,const char*);uri_parameter111247,4026905
  char *(*vsnprintf)(int,char*,const char*,va_list);vsnprintf111248,4026962
  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);wal_checkpoint_v2111249,4027015
  int (*auto_extension)(void(*)(void));auto_extension111251,4027111
  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,bind_blob64111252,4027151
  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,bind_text64111254,4027256
  int (*cancel_auto_extension)(void(*)(void));cancel_auto_extension111256,4027376
  int (*load_extension)(sqlite3*,const char*,const char*,char**);load_extension111257,4027423
  void *(*malloc64)(sqlite3_uint64);malloc64111258,4027489
  sqlite3_uint64 (*msize)(void*);msize111259,4027526
  void *(*realloc64)(void*,sqlite3_uint64);realloc64111260,4027560
  void (*reset_auto_extension)(void);reset_auto_extension111261,4027604
  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,result_blob64111262,4027642
  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,result_text64111264,4027752
  int (*strglob)(const char*,const char*);strglob111266,4027878
  sqlite3_value *(*value_dup)(const sqlite3_value*);value_dup111268,4027954
  void (*value_free)(sqlite3_value*);value_free111269,4028007
  int (*result_zeroblob64)(sqlite3_context*,sqlite3_uint64);result_zeroblob64111270,4028045
  int (*bind_zeroblob64)(sqlite3_stmt*, int, sqlite3_uint64);bind_zeroblob64111271,4028106
  unsigned int (*value_subtype)(sqlite3_value*);value_subtype111273,4028200
  void (*result_subtype)(sqlite3_context*,unsigned int);result_subtype111274,4028249
  int (*status64)(int,sqlite3_int64*,sqlite3_int64*,int);status64111276,4028339
  int (*strlike)(const char*,const char*,unsigned int);strlike111277,4028397
  int (*db_cacheflush)(sqlite3*);db_cacheflush111278,4028453
  int (*system_errno)(sqlite3*);system_errno111280,4028520
  int (*trace_v2)(sqlite3*,unsigned,int(*)(unsigned,void*,void*,void*),void*);trace_v2111282,4028586
  char *(*expanded_sql)(sqlite3_stmt*);expanded_sql111283,4028665
  void (*set_last_insert_rowid)(sqlite3*,sqlite3_int64);set_last_insert_rowid111285,4028738
typedef int (*sqlite3_loadext_entry)(sqlite3_loadext_entry111292,4028924
#define sqlite3_aggregate_context sqlite3_aggregate_context111310,4029733
#define sqlite3_aggregate_count sqlite3_aggregate_count111312,4029834
#define sqlite3_bind_blob sqlite3_bind_blob111314,4029909
#define sqlite3_bind_double sqlite3_bind_double111315,4029971
#define sqlite3_bind_int sqlite3_bind_int111316,4030035
#define sqlite3_bind_int64 sqlite3_bind_int64111317,4030096
#define sqlite3_bind_null sqlite3_bind_null111318,4030159
#define sqlite3_bind_parameter_count sqlite3_bind_parameter_count111319,4030221
#define sqlite3_bind_parameter_index sqlite3_bind_parameter_index111320,4030294
#define sqlite3_bind_parameter_name sqlite3_bind_parameter_name111321,4030367
#define sqlite3_bind_text sqlite3_bind_text111322,4030439
#define sqlite3_bind_text16 sqlite3_bind_text16111323,4030501
#define sqlite3_bind_value sqlite3_bind_value111324,4030565
#define sqlite3_busy_handler sqlite3_busy_handler111325,4030628
#define sqlite3_busy_timeout sqlite3_busy_timeout111326,4030693
#define sqlite3_changes sqlite3_changes111327,4030758
#define sqlite3_close sqlite3_close111328,4030818
#define sqlite3_collation_needed sqlite3_collation_needed111329,4030876
#define sqlite3_collation_needed16 sqlite3_collation_needed16111330,4030945
#define sqlite3_column_blob sqlite3_column_blob111331,4031016
#define sqlite3_column_bytes sqlite3_column_bytes111332,4031080
#define sqlite3_column_bytes16 sqlite3_column_bytes16111333,4031145
#define sqlite3_column_count sqlite3_column_count111334,4031212
#define sqlite3_column_database_name sqlite3_column_database_name111335,4031277
#define sqlite3_column_database_name16 sqlite3_column_database_name16111336,4031350
#define sqlite3_column_decltype sqlite3_column_decltype111337,4031425
#define sqlite3_column_decltype16 sqlite3_column_decltype16111338,4031493
#define sqlite3_column_double sqlite3_column_double111339,4031563
#define sqlite3_column_int sqlite3_column_int111340,4031629
#define sqlite3_column_int64 sqlite3_column_int64111341,4031692
#define sqlite3_column_name sqlite3_column_name111342,4031757
#define sqlite3_column_name16 sqlite3_column_name16111343,4031821
#define sqlite3_column_origin_name sqlite3_column_origin_name111344,4031887
#define sqlite3_column_origin_name16 sqlite3_column_origin_name16111345,4031958
#define sqlite3_column_table_name sqlite3_column_table_name111346,4032031
#define sqlite3_column_table_name16 sqlite3_column_table_name16111347,4032101
#define sqlite3_column_text sqlite3_column_text111348,4032173
#define sqlite3_column_text16 sqlite3_column_text16111349,4032237
#define sqlite3_column_type sqlite3_column_type111350,4032303
#define sqlite3_column_value sqlite3_column_value111351,4032367
#define sqlite3_commit_hook sqlite3_commit_hook111352,4032432
#define sqlite3_complete sqlite3_complete111353,4032496
#define sqlite3_complete16 sqlite3_complete16111354,4032557
#define sqlite3_create_collation sqlite3_create_collation111355,4032620
#define sqlite3_create_collation16 sqlite3_create_collation16111356,4032689
#define sqlite3_create_function sqlite3_create_function111357,4032760
#define sqlite3_create_function16 sqlite3_create_function16111358,4032828
#define sqlite3_create_module sqlite3_create_module111359,4032898
#define sqlite3_create_module_v2 sqlite3_create_module_v2111360,4032964
#define sqlite3_data_count sqlite3_data_count111361,4033033
#define sqlite3_db_handle sqlite3_db_handle111362,4033096
#define sqlite3_declare_vtab sqlite3_declare_vtab111363,4033158
#define sqlite3_enable_shared_cache sqlite3_enable_shared_cache111364,4033223
#define sqlite3_errcode sqlite3_errcode111365,4033295
#define sqlite3_errmsg sqlite3_errmsg111366,4033355
#define sqlite3_errmsg16 sqlite3_errmsg16111367,4033414
#define sqlite3_exec sqlite3_exec111368,4033475
#define sqlite3_expired sqlite3_expired111370,4033563
#define sqlite3_finalize sqlite3_finalize111372,4033630
#define sqlite3_free sqlite3_free111373,4033691
#define sqlite3_free_table sqlite3_free_table111374,4033748
#define sqlite3_get_autocommit sqlite3_get_autocommit111375,4033811
#define sqlite3_get_auxdata sqlite3_get_auxdata111376,4033878
#define sqlite3_get_table sqlite3_get_table111377,4033942
#define sqlite3_global_recover sqlite3_global_recover111379,4034035
#define sqlite3_interrupt sqlite3_interrupt111381,4034109
#define sqlite3_last_insert_rowid sqlite3_last_insert_rowid111382,4034172
#define sqlite3_libversion sqlite3_libversion111383,4034242
#define sqlite3_libversion_number sqlite3_libversion_number111384,4034305
#define sqlite3_malloc sqlite3_malloc111385,4034375
#define sqlite3_mprintf sqlite3_mprintf111386,4034434
#define sqlite3_open sqlite3_open111387,4034494
#define sqlite3_open16 sqlite3_open16111388,4034551
#define sqlite3_prepare sqlite3_prepare111389,4034610
#define sqlite3_prepare16 sqlite3_prepare16111390,4034670
#define sqlite3_prepare_v2 sqlite3_prepare_v2111391,4034732
#define sqlite3_prepare16_v2 sqlite3_prepare16_v2111392,4034795
#define sqlite3_profile sqlite3_profile111393,4034860
#define sqlite3_progress_handler sqlite3_progress_handler111394,4034920
#define sqlite3_realloc sqlite3_realloc111395,4034989
#define sqlite3_reset sqlite3_reset111396,4035049
#define sqlite3_result_blob sqlite3_result_blob111397,4035107
#define sqlite3_result_double sqlite3_result_double111398,4035171
#define sqlite3_result_error sqlite3_result_error111399,4035237
#define sqlite3_result_error16 sqlite3_result_error16111400,4035302
#define sqlite3_result_int sqlite3_result_int111401,4035369
#define sqlite3_result_int64 sqlite3_result_int64111402,4035432
#define sqlite3_result_null sqlite3_result_null111403,4035497
#define sqlite3_result_text sqlite3_result_text111404,4035561
#define sqlite3_result_text16 sqlite3_result_text16111405,4035625
#define sqlite3_result_text16be sqlite3_result_text16be111406,4035691
#define sqlite3_result_text16le sqlite3_result_text16le111407,4035759
#define sqlite3_result_value sqlite3_result_value111408,4035827
#define sqlite3_rollback_hook sqlite3_rollback_hook111409,4035892
#define sqlite3_set_authorizer sqlite3_set_authorizer111410,4035958
#define sqlite3_set_auxdata sqlite3_set_auxdata111411,4036025
#define sqlite3_snprintf sqlite3_snprintf111412,4036089
#define sqlite3_step sqlite3_step111413,4036150
#define sqlite3_table_column_metadata sqlite3_table_column_metadata111414,4036207
#define sqlite3_thread_cleanup sqlite3_thread_cleanup111415,4036281
#define sqlite3_total_changes sqlite3_total_changes111416,4036348
#define sqlite3_trace sqlite3_trace111417,4036414
#define sqlite3_transfer_bindings sqlite3_transfer_bindings111419,4036503
#define sqlite3_update_hook sqlite3_update_hook111421,4036580
#define sqlite3_user_data sqlite3_user_data111422,4036644
#define sqlite3_value_blob sqlite3_value_blob111423,4036706
#define sqlite3_value_bytes sqlite3_value_bytes111424,4036769
#define sqlite3_value_bytes16 sqlite3_value_bytes16111425,4036833
#define sqlite3_value_double sqlite3_value_double111426,4036899
#define sqlite3_value_int sqlite3_value_int111427,4036964
#define sqlite3_value_int64 sqlite3_value_int64111428,4037026
#define sqlite3_value_numeric_type sqlite3_value_numeric_type111429,4037090
#define sqlite3_value_text sqlite3_value_text111430,4037161
#define sqlite3_value_text16 sqlite3_value_text16111431,4037224
#define sqlite3_value_text16be sqlite3_value_text16be111432,4037289
#define sqlite3_value_text16le sqlite3_value_text16le111433,4037356
#define sqlite3_value_type sqlite3_value_type111434,4037423
#define sqlite3_vmprintf sqlite3_vmprintf111435,4037486
#define sqlite3_vsnprintf sqlite3_vsnprintf111436,4037547
#define sqlite3_overload_function sqlite3_overload_function111437,4037609
#define sqlite3_prepare_v2 sqlite3_prepare_v2111438,4037679
#define sqlite3_prepare16_v2 sqlite3_prepare16_v2111439,4037742
#define sqlite3_clear_bindings sqlite3_clear_bindings111440,4037807
#define sqlite3_bind_zeroblob sqlite3_bind_zeroblob111441,4037874
#define sqlite3_blob_bytes sqlite3_blob_bytes111442,4037940
#define sqlite3_blob_close sqlite3_blob_close111443,4038003
#define sqlite3_blob_open sqlite3_blob_open111444,4038066
#define sqlite3_blob_read sqlite3_blob_read111445,4038128
#define sqlite3_blob_write sqlite3_blob_write111446,4038190
#define sqlite3_create_collation_v2 sqlite3_create_collation_v2111447,4038253
#define sqlite3_file_control sqlite3_file_control111448,4038325
#define sqlite3_memory_highwater sqlite3_memory_highwater111449,4038390
#define sqlite3_memory_used sqlite3_memory_used111450,4038459
#define sqlite3_mutex_alloc sqlite3_mutex_alloc111451,4038523
#define sqlite3_mutex_enter sqlite3_mutex_enter111452,4038587
#define sqlite3_mutex_free sqlite3_mutex_free111453,4038651
#define sqlite3_mutex_leave sqlite3_mutex_leave111454,4038714
#define sqlite3_mutex_try sqlite3_mutex_try111455,4038778
#define sqlite3_open_v2 sqlite3_open_v2111456,4038840
#define sqlite3_release_memory sqlite3_release_memory111457,4038900
#define sqlite3_result_error_nomem sqlite3_result_error_nomem111458,4038967
#define sqlite3_result_error_toobig sqlite3_result_error_toobig111459,4039038
#define sqlite3_sleep sqlite3_sleep111460,4039110
#define sqlite3_soft_heap_limit sqlite3_soft_heap_limit111461,4039168
#define sqlite3_vfs_find sqlite3_vfs_find111462,4039236
#define sqlite3_vfs_register sqlite3_vfs_register111463,4039297
#define sqlite3_vfs_unregister sqlite3_vfs_unregister111464,4039362
#define sqlite3_threadsafe sqlite3_threadsafe111465,4039429
#define sqlite3_result_zeroblob sqlite3_result_zeroblob111466,4039493
#define sqlite3_result_error_code sqlite3_result_error_code111467,4039561
#define sqlite3_test_control sqlite3_test_control111468,4039631
#define sqlite3_randomness sqlite3_randomness111469,4039696
#define sqlite3_context_db_handle sqlite3_context_db_handle111470,4039759
#define sqlite3_extended_result_codes sqlite3_extended_result_codes111471,4039829
#define sqlite3_limit sqlite3_limit111472,4039903
#define sqlite3_next_stmt sqlite3_next_stmt111473,4039961
#define sqlite3_sql sqlite3_sql111474,4040023
#define sqlite3_status sqlite3_status111475,4040079
#define sqlite3_backup_finish sqlite3_backup_finish111476,4040138
#define sqlite3_backup_init sqlite3_backup_init111477,4040204
#define sqlite3_backup_pagecount sqlite3_backup_pagecount111478,4040268
#define sqlite3_backup_remaining sqlite3_backup_remaining111479,4040337
#define sqlite3_backup_step sqlite3_backup_step111480,4040406
#define sqlite3_compileoption_get sqlite3_compileoption_get111481,4040470
#define sqlite3_compileoption_used sqlite3_compileoption_used111482,4040540
#define sqlite3_create_function_v2 sqlite3_create_function_v2111483,4040611
#define sqlite3_db_config sqlite3_db_config111484,4040682
#define sqlite3_db_mutex sqlite3_db_mutex111485,4040744
#define sqlite3_db_status sqlite3_db_status111486,4040805
#define sqlite3_extended_errcode sqlite3_extended_errcode111487,4040867
#define sqlite3_log sqlite3_log111488,4040936
#define sqlite3_soft_heap_limit64 sqlite3_soft_heap_limit64111489,4040992
#define sqlite3_sourceid sqlite3_sourceid111490,4041062
#define sqlite3_stmt_status sqlite3_stmt_status111491,4041123
#define sqlite3_strnicmp sqlite3_strnicmp111492,4041187
#define sqlite3_unlock_notify sqlite3_unlock_notify111493,4041248
#define sqlite3_wal_autocheckpoint sqlite3_wal_autocheckpoint111494,4041314
#define sqlite3_wal_checkpoint sqlite3_wal_checkpoint111495,4041385
#define sqlite3_wal_hook sqlite3_wal_hook111496,4041452
#define sqlite3_blob_reopen sqlite3_blob_reopen111497,4041513
#define sqlite3_vtab_config sqlite3_vtab_config111498,4041577
#define sqlite3_vtab_on_conflict sqlite3_vtab_on_conflict111499,4041641
#define sqlite3_close_v2 sqlite3_close_v2111501,4041741
#define sqlite3_db_filename sqlite3_db_filename111502,4041802
#define sqlite3_db_readonly sqlite3_db_readonly111503,4041866
#define sqlite3_db_release_memory sqlite3_db_release_memory111504,4041930
#define sqlite3_errstr sqlite3_errstr111505,4042000
#define sqlite3_stmt_busy sqlite3_stmt_busy111506,4042059
#define sqlite3_stmt_readonly sqlite3_stmt_readonly111507,4042121
#define sqlite3_stricmp sqlite3_stricmp111508,4042187
#define sqlite3_uri_boolean sqlite3_uri_boolean111509,4042247
#define sqlite3_uri_int64 sqlite3_uri_int64111510,4042311
#define sqlite3_uri_parameter sqlite3_uri_parameter111511,4042373
#define sqlite3_uri_vsnprintf sqlite3_uri_vsnprintf111512,4042439
#define sqlite3_wal_checkpoint_v2 sqlite3_wal_checkpoint_v2111513,4042501
#define sqlite3_auto_extension sqlite3_auto_extension111515,4042601
#define sqlite3_bind_blob64 sqlite3_bind_blob64111516,4042668
#define sqlite3_bind_text64 sqlite3_bind_text64111517,4042732
#define sqlite3_cancel_auto_extension sqlite3_cancel_auto_extension111518,4042796
#define sqlite3_load_extension sqlite3_load_extension111519,4042870
#define sqlite3_malloc64 sqlite3_malloc64111520,4042937
#define sqlite3_msize sqlite3_msize111521,4042998
#define sqlite3_realloc64 sqlite3_realloc64111522,4043056
#define sqlite3_reset_auto_extension sqlite3_reset_auto_extension111523,4043118
#define sqlite3_result_blob64 sqlite3_result_blob64111524,4043191
#define sqlite3_result_text64 sqlite3_result_text64111525,4043257
#define sqlite3_strglob sqlite3_strglob111526,4043323
#define sqlite3_value_dup sqlite3_value_dup111528,4043414
#define sqlite3_value_free sqlite3_value_free111529,4043476
#define sqlite3_result_zeroblob64 sqlite3_result_zeroblob64111530,4043539
#define sqlite3_bind_zeroblob64 sqlite3_bind_zeroblob64111531,4043609
#define sqlite3_value_subtype sqlite3_value_subtype111533,4043707
#define sqlite3_result_subtype sqlite3_result_subtype111534,4043773
#define sqlite3_status64 sqlite3_status64111536,4043871
#define sqlite3_strlike sqlite3_strlike111537,4043932
#define sqlite3_db_cacheflush sqlite3_db_cacheflush111538,4043992
#define sqlite3_system_errno sqlite3_system_errno111540,4044089
#define sqlite3_trace_v2 sqlite3_trace_v2111542,4044185
#define sqlite3_expanded_sql sqlite3_expanded_sql111543,4044246
#define sqlite3_set_last_insert_rowid sqlite3_set_last_insert_rowid111545,4044342
# define SQLITE_EXTENSION_INIT1 SQLITE_EXTENSION_INIT1111551,4044645
# define SQLITE_EXTENSION_INIT2(SQLITE_EXTENSION_INIT2111552,4044724
# define SQLITE_EXTENSION_INIT3 SQLITE_EXTENSION_INIT3111553,4044775
# define SQLITE_EXTENSION_INIT1 SQLITE_EXTENSION_INIT1111558,4044957
# define SQLITE_EXTENSION_INIT2(SQLITE_EXTENSION_INIT2111559,4045003
# define SQLITE_EXTENSION_INIT3 SQLITE_EXTENSION_INIT3111560,4045071
# define sqlite3_column_database_name sqlite3_column_database_name111576,4045568
# define sqlite3_column_database_name16 sqlite3_column_database_name16111577,4045610
# define sqlite3_column_table_name sqlite3_column_table_name111578,4045652
# define sqlite3_column_table_name16 sqlite3_column_table_name16111579,4045694
# define sqlite3_column_origin_name sqlite3_column_origin_name111580,4045736
# define sqlite3_column_origin_name16 sqlite3_column_origin_name16111581,4045778
# define sqlite3_set_authorizer sqlite3_set_authorizer111585,4045861
# define sqlite3_bind_text16 sqlite3_bind_text16111589,4045936
# define sqlite3_collation_needed16 sqlite3_collation_needed16111590,4045978
# define sqlite3_column_decltype16 sqlite3_column_decltype16111591,4046020
# define sqlite3_column_name16 sqlite3_column_name16111592,4046062
# define sqlite3_column_text16 sqlite3_column_text16111593,4046104
# define sqlite3_complete16 sqlite3_complete16111594,4046146
# define sqlite3_create_collation16 sqlite3_create_collation16111595,4046188
# define sqlite3_create_function16 sqlite3_create_function16111596,4046230
# define sqlite3_errmsg16 sqlite3_errmsg16111597,4046272
# define sqlite3_open16 sqlite3_open16111598,4046314
# define sqlite3_prepare16 sqlite3_prepare16111599,4046356
# define sqlite3_prepare16_v2 sqlite3_prepare16_v2111600,4046398
# define sqlite3_result_error16 sqlite3_result_error16111601,4046440
# define sqlite3_result_text16 sqlite3_result_text16111602,4046482
# define sqlite3_result_text16be sqlite3_result_text16be111603,4046524
# define sqlite3_result_text16le sqlite3_result_text16le111604,4046566
# define sqlite3_value_text16 sqlite3_value_text16111605,4046608
# define sqlite3_value_text16be sqlite3_value_text16be111606,4046650
# define sqlite3_value_text16le sqlite3_value_text16le111607,4046692
# define sqlite3_column_database_name16 sqlite3_column_database_name16111608,4046734
# define sqlite3_column_table_name16 sqlite3_column_table_name16111609,4046776
# define sqlite3_column_origin_name16 sqlite3_column_origin_name16111610,4046818
# define sqlite3_complete sqlite3_complete111614,4046896
# define sqlite3_complete16 sqlite3_complete16111615,4046924
# define sqlite3_column_decltype16 sqlite3_column_decltype16111619,4046990
# define sqlite3_column_decltype sqlite3_column_decltype111620,4047032
# define sqlite3_progress_handler sqlite3_progress_handler111624,4047119
# define sqlite3_create_module sqlite3_create_module111628,4047195
# define sqlite3_create_module_v2 sqlite3_create_module_v2111629,4047228
# define sqlite3_declare_vtab sqlite3_declare_vtab111630,4047264
# define sqlite3_vtab_config sqlite3_vtab_config111631,4047296
# define sqlite3_vtab_on_conflict sqlite3_vtab_on_conflict111632,4047327
# define sqlite3_enable_shared_cache sqlite3_enable_shared_cache111636,4047403
# define sqlite3_profile sqlite3_profile111640,4047516
# define sqlite3_trace sqlite3_trace111641,4047549
# define sqlite3_free_table sqlite3_free_table111645,4047619
# define sqlite3_get_table sqlite3_get_table111646,4047652
#define sqlite3_bind_zeroblob sqlite3_bind_zeroblob111650,4047721
#define sqlite3_blob_bytes sqlite3_blob_bytes111651,4047754
#define sqlite3_blob_close sqlite3_blob_close111652,4047787
#define sqlite3_blob_open sqlite3_blob_open111653,4047820
#define sqlite3_blob_read sqlite3_blob_read111654,4047853
#define sqlite3_blob_write sqlite3_blob_write111655,4047886
#define sqlite3_blob_reopen sqlite3_blob_reopen111656,4047919
# define sqlite3_trace_v2 sqlite3_trace_v2111660,4047991
static const sqlite3_api_routines sqlite3Apis = {sqlite3Apis111678,4048660
static int sqlite3LoadExtension(sqlite3LoadExtension111988,4055765
SQLITE_API int sqlite3_load_extension(sqlite3_load_extension112129,4060353
SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){sqlite3CloseExtensions112147,4060983
SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){sqlite3_enable_load_extension112160,4061369
typedef struct sqlite3AutoExtList sqlite3AutoExtList;sqlite3AutoExtList112180,4061935
static SQLITE_WSD struct sqlite3AutoExtList {sqlite3AutoExtList112181,4061989
  u32 nExt;              /* Number of entries in aExt[] */          nExt112182,4062035
  void (**aExt)(void);   /* Pointers to the extension init functions */aExt112183,4062104
} sqlite3Autoext = { 0, 0 };sqlite3Autoext112184,4062176
# define wsdAutoextInit wsdAutoextInit112193,4062567
# define wsdAutoext wsdAutoext112195,4062662
# define wsdAutoextInitwsdAutoextInit112197,4062693
# define wsdAutoext wsdAutoext112198,4062717
SQLITE_API int sqlite3_auto_extension(sqlite3_auto_extension112206,4062875
SQLITE_API int sqlite3_cancel_auto_extension(sqlite3_cancel_auto_extension112253,4064119
SQLITE_API void sqlite3_reset_auto_extension(void){sqlite3_reset_auto_extension112278,4064665
SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){sqlite3AutoLoadExtensions112300,4065187
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE112358,4066857
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE112360,4066907
#define PragTyp_HEADER_VALUE PragTyp_HEADER_VALUE112380,4067791
#define PragTyp_AUTO_VACUUM PragTyp_AUTO_VACUUM112381,4067840
#define PragTyp_FLAG PragTyp_FLAG112382,4067889
#define PragTyp_BUSY_TIMEOUT PragTyp_BUSY_TIMEOUT112383,4067938
#define PragTyp_CACHE_SIZE PragTyp_CACHE_SIZE112384,4067987
#define PragTyp_CACHE_SPILL PragTyp_CACHE_SPILL112385,4068036
#define PragTyp_CASE_SENSITIVE_LIKE PragTyp_CASE_SENSITIVE_LIKE112386,4068085
#define PragTyp_COLLATION_LIST PragTyp_COLLATION_LIST112387,4068134
#define PragTyp_COMPILE_OPTIONS PragTyp_COMPILE_OPTIONS112388,4068183
#define PragTyp_DATA_STORE_DIRECTORY PragTyp_DATA_STORE_DIRECTORY112389,4068232
#define PragTyp_DATABASE_LIST PragTyp_DATABASE_LIST112390,4068281
#define PragTyp_DEFAULT_CACHE_SIZE PragTyp_DEFAULT_CACHE_SIZE112391,4068330
#define PragTyp_ENCODING PragTyp_ENCODING112392,4068379
#define PragTyp_FOREIGN_KEY_CHECK PragTyp_FOREIGN_KEY_CHECK112393,4068428
#define PragTyp_FOREIGN_KEY_LIST PragTyp_FOREIGN_KEY_LIST112394,4068477
#define PragTyp_INCREMENTAL_VACUUM PragTyp_INCREMENTAL_VACUUM112395,4068526
#define PragTyp_INDEX_INFO PragTyp_INDEX_INFO112396,4068575
#define PragTyp_INDEX_LIST PragTyp_INDEX_LIST112397,4068624
#define PragTyp_INTEGRITY_CHECK PragTyp_INTEGRITY_CHECK112398,4068673
#define PragTyp_JOURNAL_MODE PragTyp_JOURNAL_MODE112399,4068722
#define PragTyp_JOURNAL_SIZE_LIMIT PragTyp_JOURNAL_SIZE_LIMIT112400,4068771
#define PragTyp_LOCK_PROXY_FILE PragTyp_LOCK_PROXY_FILE112401,4068820
#define PragTyp_LOCKING_MODE PragTyp_LOCKING_MODE112402,4068869
#define PragTyp_PAGE_COUNT PragTyp_PAGE_COUNT112403,4068918
#define PragTyp_MMAP_SIZE PragTyp_MMAP_SIZE112404,4068967
#define PragTyp_OPTIMIZE PragTyp_OPTIMIZE112405,4069016
#define PragTyp_PAGE_SIZE PragTyp_PAGE_SIZE112406,4069065
#define PragTyp_SECURE_DELETE PragTyp_SECURE_DELETE112407,4069114
#define PragTyp_SHRINK_MEMORY PragTyp_SHRINK_MEMORY112408,4069163
#define PragTyp_SOFT_HEAP_LIMIT PragTyp_SOFT_HEAP_LIMIT112409,4069212
#define PragTyp_SYNCHRONOUS PragTyp_SYNCHRONOUS112410,4069261
#define PragTyp_TABLE_INFO PragTyp_TABLE_INFO112411,4069310
#define PragTyp_TEMP_STORE PragTyp_TEMP_STORE112412,4069359
#define PragTyp_TEMP_STORE_DIRECTORY PragTyp_TEMP_STORE_DIRECTORY112413,4069408
#define PragTyp_THREADS PragTyp_THREADS112414,4069457
#define PragTyp_WAL_AUTOCHECKPOINT PragTyp_WAL_AUTOCHECKPOINT112415,4069506
#define PragTyp_WAL_CHECKPOINT PragTyp_WAL_CHECKPOINT112416,4069555
#define PragTyp_ACTIVATE_EXTENSIONS PragTyp_ACTIVATE_EXTENSIONS112417,4069604
#define PragTyp_HEXKEY PragTyp_HEXKEY112418,4069653
#define PragTyp_KEY PragTyp_KEY112419,4069702
#define PragTyp_REKEY PragTyp_REKEY112420,4069751
#define PragTyp_LOCK_STATUS PragTyp_LOCK_STATUS112421,4069800
#define PragTyp_PARSER_TRACE PragTyp_PARSER_TRACE112422,4069849
#define PragTyp_STATS PragTyp_STATS112423,4069898
#define PragFlg_NeedSchema PragFlg_NeedSchema112426,4070001
#define PragFlg_NoColumns PragFlg_NoColumns112427,4070072
#define PragFlg_NoColumns1 PragFlg_NoColumns1112428,4070148
#define PragFlg_ReadOnly PragFlg_ReadOnly112429,4070226
#define PragFlg_Result0 PragFlg_Result0112430,4070287
#define PragFlg_Result1 PragFlg_Result1112431,4070356
#define PragFlg_SchemaOpt PragFlg_SchemaOpt112432,4070430
#define PragFlg_SchemaReq PragFlg_SchemaReq112433,4070508
static const char *const pragCName[] = {pragCName112439,4070770
typedef struct PragmaName {PragmaName112492,4072550
  const char *const zName; /* Name of pragma */zName112493,4072578
  u8 ePragTyp;             /* PragTyp_XXX value */ePragTyp112494,4072626
  u8 mPragFlg;             /* Zero or more PragFlg_XXX values */mPragFlg112495,4072677
  u8 iPragCName;           /* Start of column names in pragCName[] */iPragCName112496,4072742
  u8 nPragCName;           /* Num of col names. 0 means use pragma name */nPragCName112497,4072812
  u32 iArg;                /* Extra argument */iArg112498,4072887
} PragmaName;PragmaName112499,4072935
static const PragmaName aPragmaName[] = {aPragmaName112500,4072949
static u8 getSafetyLevel(const char *z, int omitFull, u8 dflt){getSafetyLevel113004,4090243
SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z, u8 dflt){sqlite3GetBoolean113029,4091054
static int getLockingMode(const char *z){getLockingMode113042,4091455
static int getAutoVacuum(const char *z){getAutoVacuum113057,4091941
static int getTempStore(const char *z){getTempStore113073,4092528
static int invalidateTempStorage(Parse *pParse){invalidateTempStorage113091,4092986
static int changeTempStorage(Parse *pParse, const char *zStorageType){changeTempStorage113113,4093692
static void setPragmaResultColumnNames(setPragmaResultColumnNames113128,4094089
static void returnSingleInt(Vdbe *v, i64 value){returnSingleInt113147,4094633
static void returnSingleText(returnSingleText113155,4094859
static void setAllPagerFlags(sqlite3 *db){setAllPagerFlags113171,4095283
# define setAllPagerFlags(setAllPagerFlags113191,4095940
static const char *actionName(u8 action){actionName113199,4096097
SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){sqlite3JournalModename113219,4096704
static const PragmaName *pragmaLocate(const char *zName){pragmaLocate113241,4097336
static int integrityCheckResultRow(Vdbe *v, int regResult){integrityCheckResultRow113265,4097970
SQLITE_PRIVATE void sqlite3Pragma(sqlite3Pragma113289,4098724
# define SQLITE_INTEGRITY_CHECK_ERROR_MAX SQLITE_INTEGRITY_CHECK_ERROR_MAX114356,4134303
typedef struct PragmaVtab PragmaVtab;PragmaVtab115087,4161686
typedef struct PragmaVtabCursor PragmaVtabCursor;PragmaVtabCursor115088,4161724
struct PragmaVtab {PragmaVtab115089,4161774
  sqlite3_vtab base;        /* Base class.  Must be first */base115090,4161794
  sqlite3 *db;              /* The database connection to which it belongs */db115091,4161855
  const PragmaName *pName;  /* Name of the pragma */pName115092,4161933
  u8 nHidden;               /* Number of hidden columns */nHidden115093,4161986
  u8 iHidden;               /* Index of the first hidden column */iHidden115094,4162045
struct PragmaVtabCursor {PragmaVtabCursor115096,4162115
  sqlite3_vtab_cursor base; /* Base class.  Must be first */base115097,4162141
  sqlite3_stmt *pPragma;    /* The pragma statement to run */pPragma115098,4162202
  sqlite_int64 iRowid;      /* Current rowid */iRowid115099,4162264
  char *azArg[2];           /* Value of the argument and schema */azArg115100,4162312
static int pragmaVtabConnect(pragmaVtabConnect115106,4162438
static int pragmaVtabDisconnect(sqlite3_vtab *pVtab){pragmaVtabDisconnect115169,4164000
static int pragmaVtabBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){pragmaVtabBestIndex115182,4164486
static int pragmaVtabOpen(sqlite3_vtab *pVtab, sqlite3_vtab_cursor **ppCursor){pragmaVtabOpen115219,4165690
static void pragmaVtabCursorClear(PragmaVtabCursor *pCsr){pragmaVtabCursorClear115230,4166073
static int pragmaVtabClose(sqlite3_vtab_cursor *cur){pragmaVtabClose115241,4166347
static int pragmaVtabNext(sqlite3_vtab_cursor *pVtabCursor){pragmaVtabNext115249,4166590
static int pragmaVtabFilter(pragmaVtabFilter115267,4167034
static int pragmaVtabEof(sqlite3_vtab_cursor *pVtabCursor){pragmaVtabEof115313,4168398
static int pragmaVtabColumn(pragmaVtabColumn115321,4168636
static int pragmaVtabRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *p){pragmaVtabRowid115339,4169118
static const sqlite3_module pragmaVtabModule = {pragmaVtabModule115346,4169338
SQLITE_PRIVATE Module *sqlite3PragmaVtabRegister(sqlite3 *db, const char *zName){sqlite3PragmaVtabRegister115377,4171009
static void corruptSchema(corruptSchema115414,4172339
SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){sqlite3InitCallback115443,4173404
static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){sqlite3InitOne115527,4176527
SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){sqlite3Init115747,4183824
SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){sqlite3ReadSchema115791,4185072
static void schemaIsValid(Parse *pParse){schemaIsValid115811,4185546
SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){sqlite3SchemaToIndex115860,4187204
SQLITE_PRIVATE void sqlite3ParserReset(Parse *pParse){sqlite3ParserReset115888,4188109
static int sqlite3Prepare(sqlite3Prepare115904,4188566
static int sqlite3LockAndPrepare(sqlite3LockAndPrepare116055,4193568
SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){sqlite3Reprepare116094,4194961
SQLITE_API int sqlite3_prepare(sqlite3_prepare116131,4196087
SQLITE_API int sqlite3_prepare_v2(sqlite3_prepare_v2116143,4196595
static int sqlite3Prepare16(sqlite3Prepare16116161,4197214
SQLITE_API int sqlite3_prepare16(sqlite3_prepare16116219,4199367
SQLITE_API int sqlite3_prepare16_v2(sqlite3_prepare16_v2116231,4199872
/***/ int sqlite3SelectTrace = 0;sqlite3SelectTrace116268,4201144
# define SELECTTRACE(SELECTTRACE116269,4201178
# define SELECTTRACE(SELECTTRACE116275,4201368
typedef struct DistinctCtx DistinctCtx;DistinctCtx116284,4201604
struct DistinctCtx {DistinctCtx116285,4201644
  u8 isTnct;      /* True if the DISTINCT keyword is present */isTnct116286,4201665
  u8 eTnctType;   /* One of the WHERE_DISTINCT_* operators */eTnctType116287,4201729
  int tabTnct;    /* Ephemeral table used for DISTINCT processing */tabTnct116288,4201791
  int addrTnct;   /* Address of OP_OpenEphemeral opcode for tabTnct */addrTnct116289,4201860
typedef struct SortCtx SortCtx;SortCtx116296,4202078
struct SortCtx {SortCtx116297,4202110
  ExprList *pOrderBy;   /* The ORDER BY (or GROUP BY clause) */pOrderBy116298,4202127
  int nOBSat;           /* Number of ORDER BY terms satisfied by indices */nOBSat116299,4202191
  int iECursor;         /* Cursor number for the sorter */iECursor116300,4202267
  int regReturn;        /* Register holding block-output return address */regReturn116301,4202326
  int labelBkOut;       /* Start label for the block-output subroutine */labelBkOut116302,4202401
  int addrSortIndex;    /* Address of the OP_SorterOpen or OP_OpenEphemeral */addrSortIndex116303,4202475
  int labelDone;        /* Jump here when done, ex: LIMIT reached */labelDone116304,4202554
  u8 sortFlags;         /* Zero or more SORTFLAG_* bits */sortFlags116305,4202623
  u8 bOrderedInnerLoop; /* ORDER BY correctly sorts the inner loop */bOrderedInnerLoop116306,4202682
#define SORTFLAG_UseSorter SORTFLAG_UseSorter116308,4202755
static void clearSelect(sqlite3 *db, Select *p, int bFree){clearSelect116314,4202951
SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){sqlite3SelectDestInit116335,4203552
SQLITE_PRIVATE Select *sqlite3SelectNew(sqlite3SelectNew116348,4203841
SQLITE_PRIVATE void sqlite3SelectSetName(Select *p, const char *zName){sqlite3SelectSetName116408,4205646
SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){sqlite3SelectDelete116419,4205895
static Select *findRightmost(Select *p){findRightmost116426,4206072
SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){sqlite3JoinType116448,4206647
static int columnIndex(Table *pTab, const char *zCol){columnIndex116509,4208671
static int tableAndColumnIndex(tableAndColumnIndex116526,4209123
static void addWhereTerm(addWhereTerm116561,4210279
static void setJoinExpr(Expr *p, int iTable){setJoinExpr116620,4212722
static int sqliteProcessJoin(Parse *pParse, Select *p){sqliteProcessJoin116651,4213861
static void pushOntoSorter(pushOntoSorter116751,4217523
static void codeOffset(codeOffset116872,4222954
static void codeDistinct(codeDistinct116892,4223672
static void selectInnerLoop(selectInnerLoop116920,4224705
SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoAlloc(sqlite3 *db, int N, int X){sqlite3KeyInfoAlloc117281,4238513
SQLITE_PRIVATE void sqlite3KeyInfoUnref(KeyInfo *p){sqlite3KeyInfoUnref117301,4238971
SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoRef(KeyInfo *p){sqlite3KeyInfoRef117312,4239176
SQLITE_PRIVATE int sqlite3KeyInfoIsWriteable(KeyInfo *p){ return p->nRef==1; }sqlite3KeyInfoIsWriteable117327,4239533
static KeyInfo *keyInfoFromExprList(keyInfoFromExprList117344,4240280
static const char *selectOpName(int id){selectOpName117374,4241185
static void explainTempTable(Parse *pParse, const char *zUsage){explainTempTable117396,4241844
# define explainSetInteger(explainSetInteger117411,4242468
# define explainTempTable(explainTempTable117415,4242577
# define explainSetInteger(explainSetInteger117416,4242608
static void explainComposite(explainComposite117434,4243391
# define explainComposite(explainComposite117453,4244190
static void generateSortTail(generateSortTail117462,4244504
# define columnType(columnType117614,4249959
# define columnType(columnType117616,4250075
static const char *columnTypeImpl(columnTypeImpl117618,4250137
static void generateColumnTypes(generateColumnTypes117769,4255190
static void generateColumnNames(generateColumnNames117809,4256561
SQLITE_PRIVATE int sqlite3ColumnsFromExprList(sqlite3ColumnsFromExprList117888,4259207
SQLITE_PRIVATE void sqlite3SelectAddColumnTypeAndCollation(sqlite3SelectAddColumnTypeAndCollation117989,4262799
SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){sqlite3ResultSetOfSelect118038,4264358
static SQLITE_NOINLINE Vdbe *allocVdbe(Parse *pParse){allocVdbe118074,4265484
SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){sqlite3GetVdbe118084,4265782
static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){computeLimitRegisters118113,4267024
static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){multiSelectCollSeq118168,4268961
static KeyInfo *multiSelectOrderByKeyInfo(Parse *pParse, Select *p, int nExtra){multiSelectOrderByKeyInfo118194,4269845
static void generateWithRecursiveQuery(generateWithRecursiveQuery118260,4272687
static int multiSelectValues(multiSelectValues118410,4278245
static int multiSelect(multiSelect118473,4280220
SQLITE_PRIVATE void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p){sqlite3SelectWrongNumTermsError118834,4292758
static int generateOutputSubroutine(generateOutputSubroutine118863,4293799
static int multiSelectOrderBy(multiSelectOrderBy119072,4301641
static Expr *substExpr(substExpr119401,4314124
static void substExprList(substExprList119440,4315457
static void substSelect(substSelect119452,4315861
static int flattenSubquery(flattenSubquery119621,4323274
static int pushDownWhereTerms(pushDownWhereTerms120074,4339947
static u8 minMaxQuery(AggInfo *pAggInfo, ExprList **ppMinMax){minMaxQuery120128,4342008
static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){isSimpleCount120164,4343235
SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){sqlite3IndexedByLookup120195,4344153
static int convertCompoundSelectToSubquery(Walker *pWalker, Select *p){convertCompoundSelectToSubquery120234,4345562
static int cannotBeFunction(Parse *pParse, struct SrcList_item *pFrom){cannotBeFunction120289,4347186
static struct Cte *searchWith(searchWith120308,4347843
SQLITE_PRIVATE void sqlite3WithPush(Parse *pParse, With *pWith, u8 bFree){sqlite3WithPush120339,4348937
static int withExpand(withExpand120364,4349923
static void selectPopWith(Walker *pWalker, Select *p){selectPopWith120488,4354001
#define selectPopWith selectPopWith120499,4354286
static int selectExpander(Walker *pWalker, Select *p){selectExpander120526,4355423
SQLITE_PRIVATE int sqlite3ExprWalkNoop(Walker *NotUsed, Expr *NotUsed2){sqlite3ExprWalkNoop120805,4365511
static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){sqlite3SelectExpand120823,4366219
static void selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){selectAddSubqueryTypeInfo120852,4367180
static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){sqlite3SelectAddTypeInfo120886,4368115
SQLITE_PRIVATE void sqlite3SelectPrep(sqlite3SelectPrep120910,4368925
static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){resetAccumulator120935,4369752
static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){finalizeAggFunctions120976,4371218
static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){updateAccumulator120992,4371746
static void explainSimpleCount(explainSimpleCount121075,4374623
# define explainSimpleCount(explainSimpleCount121093,4375247
SQLITE_PRIVATE int sqlite3Select(sqlite3Select121109,4375748
typedef struct TabResult {TabResult122008,4411735
  char **azResult;   /* Accumulated output */azResult122009,4411762
  char *zErrMsg;     /* Error message text, if an error occurs */zErrMsg122010,4411808
  u32 nAlloc;        /* Slots allocated for azResult[] */nAlloc122011,4411874
  u32 nRow;          /* Number of rows in the result */nRow122012,4411932
  u32 nColumn;       /* Number of columns in the result */nColumn122013,4411988
  u32 nData;         /* Slots used in azResult[].  (nRow+1)*nColumn */nData122014,4412047
  int rc;            /* Return code from sqlite3_exec() */rc122015,4412118
} TabResult;TabResult122016,4412177
static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){sqlite3_get_table_cb122023,4412366
SQLITE_API int sqlite3_get_table(sqlite3_get_table122097,4414546
SQLITE_API void sqlite3_free_table(sqlite3_free_table122166,4416660
SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){sqlite3DeleteTriggerStep122201,4417718
SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){sqlite3TriggerList122229,4418779
SQLITE_PRIVATE void sqlite3BeginTrigger(sqlite3BeginTrigger122262,4419923
SQLITE_PRIVATE void sqlite3FinishTrigger(sqlite3FinishTrigger122450,4426863
SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){sqlite3TriggerSelectStep122530,4429632
static TriggerStep *triggerStepAllocate(triggerStepAllocate122548,4430227
SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep(sqlite3TriggerInsertStep122573,4430941
SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep(sqlite3TriggerUpdateStep122602,4431981
SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep(sqlite3TriggerDeleteStep122627,4432972
SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){sqlite3DeleteTrigger122646,4433539
SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){sqlite3DropTrigger122664,4434218
static Table *tableOfTrigger(Trigger *pTrigger){tableOfTrigger122706,4435423
SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){sqlite3DropTriggerPtr122714,4435609
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){sqlite3UnlinkAndDeleteTrigger122754,4436834
static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){checkColumnOverlap122782,4437854
SQLITE_PRIVATE Trigger *sqlite3TriggersExist(sqlite3TriggersExist122797,4438379
static SrcList *targetSrcList(targetSrcList122833,4439570
static int codeTriggerProgram(codeTriggerProgram122860,4440375
static const char *onErrorText(int onError){onErrorText122937,4442886
static void transferParseError(Parse *pTo, Parse *pFrom){transferParseError122955,4443393
static TriggerPrg *codeRowTrigger(codeRowTrigger122971,4443850
static TriggerPrg *getRowTrigger(getRowTrigger123084,4448154
SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect(sqlite3CodeRowTriggerDirect123118,4449365
SQLITE_PRIVATE void sqlite3CodeRowTrigger(sqlite3CodeRowTrigger123190,4452819
SQLITE_PRIVATE u32 sqlite3TriggerColmask(sqlite3TriggerColmask123252,4455688
SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){sqlite3ColumnDefault123345,4459510
SQLITE_PRIVATE void sqlite3Update(sqlite3Update123373,4460406
# undef isViewisView123459,4464670
# define isView isView123460,4464685
 #undef isViewisView124021,4484490
 #undef pTriggerpTrigger124024,4484528
static void updateVirtualTable(updateVirtualTable124049,4485410
static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){execSql124186,4490743
static int execSqlF(sqlite3 *db, char **pzErrMsg, const char *zSql, ...){execSqlF124210,4491481
SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse, Token *pNm){sqlite3Vacuum124253,4493341
SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb){sqlite3RunVacuum124283,4494296
struct VtabCtx {VtabCtx124549,4504741
  VTable *pVTable;    /* The virtual table being constructed */pVTable124550,4504758
  Table *pTab;        /* The Table object to which the virtual table belongs */pTab124551,4504822
  VtabCtx *pPrior;    /* Parent context (if any) */pPrior124552,4504902
  int bDeclared;      /* True after sqlite3_declare_vtab() is called */bDeclared124553,4504954
SQLITE_PRIVATE Module *sqlite3VtabCreateModule(sqlite3VtabCreateModule124561,4505241
static int createModule(createModule124596,4506419
SQLITE_API int sqlite3_create_module(sqlite3_create_module124621,4507230
SQLITE_API int sqlite3_create_module_v2(sqlite3_create_module_v2124636,4507805
SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){sqlite3VtabLock124657,4508704
SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){sqlite3GetVTable124667,4508996
SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){sqlite3VtabUnlock124678,4509348
static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){vtabDisconnectAll124702,4510054
SQLITE_PRIVATE void sqlite3VtabDisconnect(sqlite3 *db, Table *p){sqlite3VtabDisconnect124742,4511380
SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){sqlite3VtabUnlockList124780,4512758
SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){sqlite3VtabClear124811,4513802
static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){addModuleArgument124828,4514288
SQLITE_PRIVATE void sqlite3VtabBeginParse(sqlite3VtabBeginParse124847,4514912
static void addArgumentToVtab(Parse *pParse){addArgumentToVtab124896,4516841
SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){sqlite3VtabFinishParse124909,4517231
SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){sqlite3VtabArgInit124993,4520185
SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){sqlite3VtabArgExtend125003,4520466
static int vtabCallConstructor(vtabCallConstructor125019,4520884
SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){sqlite3VtabCallConnect125148,4524780
static int growVTrans(sqlite3 *db){growVTrans125182,4525696
static void addToVTrans(sqlite3 *db, VTable *pVTab){addToVTrans125204,4526324
SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){sqlite3VtabCallCreate125218,4526828
SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){sqlite3_declare_vtab125259,4528185
SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){sqlite3VtabCallDestroy125344,4530475
static void callFinaliser(sqlite3 *db, int offset){callFinaliser125382,4531668
SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, Vdbe *p){sqlite3VtabSync125410,4532452
SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){sqlite3VtabRollback125432,4533005
SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){sqlite3VtabCommit125441,4533258
SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){sqlite3VtabBegin125454,4533687
SQLITE_PRIVATE int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){sqlite3VtabSavepoint125514,4535645
SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction(sqlite3VtabOverloadFunction125560,4537166
SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){sqlite3VtabMakeWritable125626,4539275
SQLITE_PRIVATE int sqlite3VtabEponymousTableInit(Parse *pParse, Module *pMod){sqlite3VtabEponymousTableInit125659,4540543
SQLITE_PRIVATE void sqlite3VtabEponymousTableClear(sqlite3 *db, Module *pMod){sqlite3VtabEponymousTableClear125696,4541690
SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *db){sqlite3_vtab_on_conflict125715,4542305
SQLITE_API int sqlite3_vtab_config(sqlite3 *db, int op, ...){sqlite3_vtab_config125733,4542971
/***/ int sqlite3WhereTrace;sqlite3WhereTrace125811,4545494
# define WHERETRACE(WHERETRACE125815,4545625
# define WHERETRACE_ENABLED WHERETRACE_ENABLED125816,4545698
# define WHERETRACE(WHERETRACE125818,4545734
typedef struct WhereClause WhereClause;WhereClause125823,4545792
typedef struct WhereMaskSet WhereMaskSet;WhereMaskSet125824,4545832
typedef struct WhereOrInfo WhereOrInfo;WhereOrInfo125825,4545874
typedef struct WhereAndInfo WhereAndInfo;WhereAndInfo125826,4545914
typedef struct WhereLevel WhereLevel;WhereLevel125827,4545956
typedef struct WhereLoop WhereLoop;WhereLoop125828,4545994
typedef struct WherePath WherePath;WherePath125829,4546030
typedef struct WhereTerm WhereTerm;WhereTerm125830,4546066
typedef struct WhereLoopBuilder WhereLoopBuilder;WhereLoopBuilder125831,4546102
typedef struct WhereScan WhereScan;WhereScan125832,4546152
typedef struct WhereOrCost WhereOrCost;WhereOrCost125833,4546188
typedef struct WhereOrSet WhereOrSet;WhereOrSet125834,4546228
struct WhereLevel {WhereLevel125851,4546939
  int iLeftJoin;        /* Memory cell used to implement LEFT OUTER JOIN */iLeftJoin125852,4546959
  int iTabCur;          /* The VDBE cursor used to access the table */iTabCur125853,4547035
  int iIdxCur;          /* The VDBE cursor used to access pIdx */iIdxCur125854,4547106
  int addrBrk;          /* Jump here to break out of the loop */addrBrk125855,4547172
  int addrNxt;          /* Jump here to start the next IN combination */addrNxt125856,4547237
  int addrSkip;         /* Jump here for next iteration of skip-scan */addrSkip125857,4547310
  int addrCont;         /* Jump here to continue with the next loop cycle */addrCont125858,4547382
  int addrFirst;        /* First instruction of interior of the loop */addrFirst125859,4547459
  int addrBody;         /* Beginning of the body of this loop */addrBody125860,4547531
  u32 iLikeRepCntr;     /* LIKE range processing counter register (times 2) */iLikeRepCntr125862,4547635
  int addrLikeRep;      /* LIKE range processing address */addrLikeRep125863,4547714
  u8 iFrom;             /* Which entry in the FROM clause */iFrom125865,4547781
  u8 op, p3, p5;        /* Opcode, P3 & P5 of the opcode that ends the loop */op125866,4547842
  u8 op, p3, p5;        /* Opcode, P3 & P5 of the opcode that ends the loop */p3125866,4547842
  u8 op, p3, p5;        /* Opcode, P3 & P5 of the opcode that ends the loop */p5125866,4547842
  int p1, p2;           /* Operands of the opcode used to ends the loop */p1125867,4547921
  int p1, p2;           /* Operands of the opcode used to ends the loop */p2125867,4547921
      int nIn;              /* Number of entries in aInLoop[] */nIn125870,4548083
      struct InLoop {InLoop125871,4548148
        int iCur;              /* The VDBE cursor used by this IN operator */iCur125872,4548170
        int addrInTop;         /* Top of the IN loop */addrInTop125873,4548248
        u8 eEndLoopOp;         /* IN Loop terminator. OP_Next or OP_Prev */eEndLoopOp125874,4548304
      } *aInLoop;           /* Information about each nested IN operator */aInLoop125875,4548380
    } in;                 /* Used when pWLoop->wsFlags&WHERE_IN_ABLE */in125876,4548456
    Index *pCovidx;       /* Possible covering index for WHERE_MULTI_OR */pCovidx125877,4548528
  } u;u125878,4548603
  struct WhereLoop *pWLoop;  /* The selected WhereLoop object */pWLoop125879,4548610
  Bitmask notReady;          /* FROM entries not usable at this level */notReady125880,4548675
  int addrVisit;        /* Address at which row is visited */addrVisit125882,4548785
struct WhereLoop {WhereLoop125900,4549624
  Bitmask prereq;       /* Bitmask of other loops that must run first */prereq125901,4549643
  Bitmask maskSelf;     /* Bitmask identifying table iTab */maskSelf125902,4549716
  char cId;             /* Symbolic ID of this loop for debugging use */cId125904,4549797
  u8 iTab;              /* Position in FROM clause of table for this loop */iTab125906,4549877
  u8 iSortIdx;          /* Sorting index number.  0==None */iSortIdx125907,4549954
  LogEst rSetup;        /* One-time setup cost (ex: create transient index) */rSetup125908,4550015
  LogEst rRun;          /* Cost of running each loop */rRun125909,4550094
  LogEst nOut;          /* Estimated number of output rows */nOut125910,4550150
      u16 nEq;               /* Number of equality constraints */nEq125913,4550293
      u16 nBtm;              /* Size of BTM vector */nBtm125914,4550359
      u16 nTop;              /* Size of TOP vector */nTop125915,4550413
      Index *pIndex;         /* Index used, or NULL */pIndex125916,4550467
    } btree;btree125917,4550522
      int idxNum;            /* Index number */idxNum125919,4550599
      u8 needFree;           /* True if sqlite3_free(idxStr) is needed */needFree125920,4550647
      i8 isOrdered;          /* True if satisfies ORDER BY */isOrdered125921,4550721
      u16 omitMask;          /* Terms that may be omitted */omitMask125922,4550783
      char *idxStr;          /* Index identifier string */idxStr125923,4550844
    } vtab;vtab125924,4550903
  } u;u125925,4550915
  u32 wsFlags;          /* WHERE_* flags describing the plan */wsFlags125926,4550922
  u16 nLTerm;           /* Number of entries in aLTerm[] */nLTerm125927,4550986
  u16 nSkip;            /* Number of NULL aLTerm[] entries */nSkip125928,4551046
# define WHERE_LOOP_XFER_SZ WHERE_LOOP_XFER_SZ125930,4551177
  u16 nLSlot;           /* Number of slots allocated for aLTerm[] */nLSlot125931,4551232
  WhereTerm **aLTerm;   /* WhereTerms used */aLTerm125932,4551301
  WhereLoop *pNextLoop; /* Next WhereLoop object in the WhereClause */pNextLoop125933,4551347
  WhereTerm *aLTermSpace[3];  /* Initial aLTerm[] space */aLTermSpace125934,4551418
struct WhereOrCost {WhereOrCost125941,4551661
  Bitmask prereq;     /* Prerequisites */prereq125942,4551682
  LogEst rRun;        /* Cost of running this subquery */rRun125943,4551724
  LogEst nOut;        /* Number of outputs for this subquery */nOut125944,4551782
#define N_OR_COST N_OR_COST125951,4552029
struct WhereOrSet {WhereOrSet125952,4552049
  u16 n;                      /* Number of valid a[] entries */n125953,4552069
  WhereOrCost a[N_OR_COST];   /* Set of best costs */a125954,4552133
struct WherePath {WherePath125975,4553121
  Bitmask maskLoop;     /* Bitmask of all WhereLoop objects in this path */maskLoop125976,4553140
  Bitmask revLoop;      /* aLoop[]s that should be reversed for ORDER BY */revLoop125977,4553216
  LogEst nRow;          /* Estimated number of rows generated by this path */nRow125978,4553292
  LogEst rCost;         /* Total cost of this path */rCost125979,4553370
  LogEst rUnsorted;     /* Total cost of this path ignoring sorting costs */rUnsorted125980,4553424
  i8 isOrdered;         /* No. of ORDER BY terms satisfied. -1 for unknown */isOrdered125981,4553501
  WhereLoop **aLoop;    /* Array of WhereLoop objects implementing this path */aLoop125982,4553579
struct WhereTerm {WhereTerm126036,4556169
  Expr *pExpr;            /* Pointer to the subexpression that is this term */pExpr126037,4556188
  WhereClause *pWC;       /* The clause this term is part of */pWC126038,4556267
  LogEst truthProb;       /* Probability of truth for this expression */truthProb126039,4556331
  u16 wtFlags;            /* TERM_xxx bit flags.  See below */wtFlags126040,4556404
  u16 eOperator;          /* A WO_xx value describing <op> */eOperator126041,4556467
  u8 nChild;              /* Number of children that must disable us */nChild126042,4556529
  u8 eMatchOp;            /* Op for vtab MATCH/LIKE/GLOB/REGEXP terms */eMatchOp126043,4556601
  int iParent;            /* Disable pWC->a[iParent] when this term disabled */iParent126044,4556674
  int leftCursor;         /* Cursor number of X in "X <op> <expr>" */leftCursor126045,4556754
  int iField;             /* Field in (?,?,?) IN (SELECT...) vector */iField126046,4556824
    int leftColumn;         /* Column number of X in "X <op> <expr>" */leftColumn126048,4556905
    WhereOrInfo *pOrInfo;   /* Extra information if (eOperator & WO_OR)!=0 */pOrInfo126049,4556977
    WhereAndInfo *pAndInfo; /* Extra information if (eOperator& WO_AND)!=0 */pAndInfo126050,4557055
  } u;u126051,4557133
  Bitmask prereqRight;    /* Bitmask of tables used by pExpr->pRight */prereqRight126052,4557140
  Bitmask prereqAll;      /* Bitmask of tables referenced by pExpr */prereqAll126053,4557212
#define TERM_DYNAMIC TERM_DYNAMIC126059,4557331
#define TERM_VIRTUAL TERM_VIRTUAL126060,4557410
#define TERM_CODED TERM_CODED126061,4557484
#define TERM_COPIED TERM_COPIED126062,4557548
#define TERM_ORINFO TERM_ORINFO126063,4557597
#define TERM_ANDINFO TERM_ANDINFO126064,4557678
#define TERM_OR_OK TERM_OR_OK126065,4557757
#  define TERM_VNULL TERM_VNULL126067,4557863
#  define TERM_VNULL TERM_VNULL126069,4557942
#define TERM_LIKEOPT TERM_LIKEOPT126071,4558014
#define TERM_LIKECOND TERM_LIKECOND126072,4558092
#define TERM_LIKE TERM_LIKE126073,4558167
#define TERM_IS TERM_IS126074,4558231
struct WhereScan {WhereScan126080,4558446
  WhereClause *pOrigWC;      /* Original, innermost WhereClause */pOrigWC126081,4558465
  WhereClause *pWC;          /* WhereClause currently being scanned */pWC126082,4558532
  const char *zCollName;     /* Required collating sequence, if not NULL */zCollName126083,4558603
  Expr *pIdxExpr;            /* Search for this index expression */pIdxExpr126084,4558679
  char idxaff;               /* Must match this affinity, if zCollName!=NULL */idxaff126085,4558747
  unsigned char nEquiv;      /* Number of entries in aEquiv[] */nEquiv126086,4558827
  unsigned char iEquiv;      /* Next unused slot in aEquiv[] */iEquiv126087,4558892
  u32 opMask;                /* Acceptable operators */opMask126088,4558956
  int k;                     /* Resume scanning at this->pWC->a[this->k] */k126089,4559012
  int aiCur[11];             /* Cursors in the equivalence class */aiCur126090,4559088
  i16 aiColumn[11];          /* Corresponding column number in the eq-class */aiColumn126091,4559156
struct WhereClause {WhereClause126106,4559719
  WhereInfo *pWInfo;       /* WHERE clause processing context */pWInfo126107,4559740
  WhereClause *pOuter;     /* Outer conjunction */pOuter126108,4559805
  u8 op;                   /* Split operator.  TK_AND or TK_OR */op126109,4559856
  int nTerm;               /* Number of terms */nTerm126110,4559922
  int nSlot;               /* Number of entries in a[] */nSlot126111,4559971
  WhereTerm *a;            /* Each a[] describes a term of the WHERE cluase */a126112,4560029
  WhereTerm aStatic[1];    /* Initial static space for a[] */aStatic126114,4560140
  WhereTerm aStatic[8];    /* Initial static space for a[] */aStatic126116,4560208
struct WhereOrInfo {WhereOrInfo126124,4560421
  WhereClause wc;          /* Decomposition into subterms */wc126125,4560442
  Bitmask indexable;       /* Bitmask of all indexable tables in the clause */indexable126126,4560503
struct WhereAndInfo {WhereAndInfo126133,4560728
  WhereClause wc;          /* The subexpression broken out */wc126134,4560750
struct WhereMaskSet {WhereMaskSet126163,4562081
  int n;                        /* Number of assigned cursor values */n126164,4562103
  int ix[BMS];                  /* Cursor assigned to each bit */ix126165,4562174
#define initMaskSet(initMaskSet126171,4562286
struct WhereLoopBuilder {WhereLoopBuilder126177,4562455
  WhereInfo *pWInfo;        /* Information about this WHERE */pWInfo126178,4562481
  WhereClause *pWC;         /* WHERE clause terms */pWC126179,4562544
  ExprList *pOrderBy;       /* ORDER BY clause */pOrderBy126180,4562597
  WhereLoop *pNew;          /* Template WhereLoop */pNew126181,4562647
  WhereOrSet *pOrSet;       /* Record best loops here, if not NULL */pOrSet126182,4562700
  UnpackedRecord *pRec;     /* Probe for stat4 (if required) */pRec126184,4562806
  int nRecValid;            /* Number of valid fields currently in pRec */nRecValid126185,4562870
  unsigned int bldFlags;    /* SQLITE_BLDF_* flags */bldFlags126187,4562952
#define SQLITE_BLDF_INDEXED SQLITE_BLDF_INDEXED126191,4563060
#define SQLITE_BLDF_UNIQUE SQLITE_BLDF_UNIQUE126192,4563121
struct WhereInfo {WhereInfo126204,4563574
  Parse *pParse;            /* Parsing and code generating context */pParse126205,4563593
  SrcList *pTabList;        /* List of tables in the join */pTabList126206,4563663
  ExprList *pOrderBy;       /* The ORDER BY clause or NULL */pOrderBy126207,4563724
  ExprList *pResultSet;     /* Result set of the query */pResultSet126208,4563786
  LogEst iLimit;            /* LIMIT if wctrlFlags has WHERE_USE_LIMIT */iLimit126209,4563844
  int aiCurOnePass[2];      /* OP_OpenWrite cursors for the ONEPASS opt */aiCurOnePass126210,4563918
  int iContinue;            /* Jump here to continue with next record */iContinue126211,4563993
  int iBreak;               /* Jump here to break out of the loop */iBreak126212,4564066
  int savedNQueryLoop;      /* pParse->nQueryLoop outside the WHERE loop */savedNQueryLoop126213,4564135
  u16 wctrlFlags;           /* Flags originally passed to sqlite3WhereBegin() */wctrlFlags126214,4564211
  u8 nLevel;                /* Number of nested loop */nLevel126215,4564292
  i8 nOBSat;                /* Number of ORDER BY terms satisfied by indices */nOBSat126216,4564348
  u8 sorted;                /* True if really sorted (not just grouped) */sorted126217,4564428
  u8 eOnePass;              /* ONEPASS_OFF, or _SINGLE, or _MULTI */eOnePass126218,4564503
  u8 untestedTerms;         /* Not all WHERE terms resolved by outer loop */untestedTerms126219,4564572
  u8 eDistinct;             /* One of the WHERE_DISTINCT_* values */eDistinct126220,4564649
  u8 bOrderedInnerLoop;     /* True if only the inner-most loop is ordered */bOrderedInnerLoop126221,4564718
  int iTop;                 /* The very beginning of the WHERE loop */iTop126222,4564796
  WhereLoop *pLoops;        /* List of all WhereLoop objects */pLoops126223,4564867
  Bitmask revMask;          /* Mask of ORDER BY terms that need reversing */revMask126224,4564931
  LogEst nRowOut;           /* Estimated number of output rows */nRowOut126225,4565008
  WhereClause sWC;          /* Decomposition of the WHERE clause */sWC126226,4565074
  WhereMaskSet sMaskSet;    /* Map cursor numbers to bitmasks */sMaskSet126227,4565142
  WhereLevel a[1];          /* Information about each nest loop in WHERE */a126228,4565207
# define sqlite3WhereExplainOneScan(sqlite3WhereExplainOneScan126260,4566492
# define sqlite3WhereAddScanStatus(sqlite3WhereAddScanStatus126270,4566959
#define WO_IN WO_IN126305,4568359
#define WO_EQ WO_EQ126306,4568384
#define WO_LT WO_LT126307,4568409
#define WO_LE WO_LE126308,4568450
#define WO_GT WO_GT126309,4568491
#define WO_GE WO_GE126310,4568532
#define WO_MATCH WO_MATCH126311,4568573
#define WO_IS WO_IS126312,4568598
#define WO_ISNULL WO_ISNULL126313,4568623
#define WO_OR WO_OR126314,4568648
#define WO_AND WO_AND126315,4568716
#define WO_EQUIV WO_EQUIV126316,4568785
#define WO_NOOP WO_NOOP126317,4568853
#define WO_ALL WO_ALL126319,4568932
#define WO_SINGLE WO_SINGLE126320,4569002
#define WHERE_COLUMN_EQ WHERE_COLUMN_EQ126327,4569266
#define WHERE_COLUMN_RANGE WHERE_COLUMN_RANGE126328,4569318
#define WHERE_COLUMN_IN WHERE_COLUMN_IN126329,4569384
#define WHERE_COLUMN_NULL WHERE_COLUMN_NULL126330,4569440
#define WHERE_CONSTRAINT WHERE_CONSTRAINT126331,4569495
#define WHERE_TOP_LIMIT WHERE_TOP_LIMIT126332,4569575
#define WHERE_BTM_LIMIT WHERE_BTM_LIMIT126333,4569649
#define WHERE_BOTH_LIMIT WHERE_BOTH_LIMIT126334,4569723
#define WHERE_IDX_ONLY WHERE_IDX_ONLY126335,4569791
#define WHERE_IPK WHERE_IPK126336,4569864
#define WHERE_INDEXED WHERE_INDEXED126337,4569938
#define WHERE_VIRTUALTABLE WHERE_VIRTUALTABLE126338,4570017
#define WHERE_IN_ABLE WHERE_IN_ABLE126339,4570088
#define WHERE_ONEROW WHERE_ONEROW126340,4570164
#define WHERE_MULTI_OR WHERE_MULTI_OR126341,4570238
#define WHERE_AUTO_INDEX WHERE_AUTO_INDEX126342,4570309
#define WHERE_SKIPSCAN WHERE_SKIPSCAN126343,4570378
#define WHERE_UNQ_WANTED WHERE_UNQ_WANTED126344,4570452
#define WHERE_PARTIALIDX WHERE_PARTIALIDX126345,4570533
static const char *explainIndexColumnName(Index *pIdx, int i){explainIndexColumnName126355,4570863
static void explainAppendTerm(explainAppendTerm126370,4571371
static void explainIndexRange(StrAccum *pStr, WhereLoop *pLoop){explainIndexRange126414,4572805
SQLITE_PRIVATE int sqlite3WhereExplainOneScan(sqlite3WhereExplainOneScan126448,4574033
SQLITE_PRIVATE void sqlite3WhereAddScanStatus(sqlite3WhereAddScanStatus126560,4578402
static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){disableTerm126622,4581142
static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){codeApplyAffinity126653,4582152
static void updateRangeAffinityStr(updateRangeAffinityStr126690,4583275
static int codeEqualityTerm(codeEqualityTerm126721,4584516
static int codeAllEqualityTerms(codeAllEqualityTerms126931,4592632
static void whereLikeOptimizationStringFixup(whereLikeOptimizationStringFixup127051,4597495
# define whereLikeOptimizationStringFixup(whereLikeOptimizationStringFixup127068,4598161
struct CCurHint {CCurHint127077,4598419
  int iTabCur;    /* Cursor for the main table */iTabCur127078,4598437
  int iIdxCur;    /* Cursor for the index, if pIdx!=0.  Unused otherwise */iIdxCur127079,4598487
  Index *pIdx;    /* The index used to access the table */pIdx127080,4598563
static int codeCursorHintCheckExpr(Walker *pWalker, Expr *pExpr){codeCursorHintCheckExpr127089,4598930
static int codeCursorHintIsOrFunction(Walker *pWalker, Expr *pExpr){codeCursorHintIsOrFunction127116,4599782
static int codeCursorHintFixExpr(Walker *pWalker, Expr *pExpr){codeCursorHintFixExpr127151,4600983
static void codeCursorHint(codeCursorHint127184,4602273
# define codeCursorHint(codeCursorHint127285,4606002
static void codeDeferredSeek(codeDeferredSeek127306,4606927
static void codeExprOrVector(Parse *pParse, Expr *p, int iReg, int nReg){codeExprOrVector127345,4608310
SQLITE_PRIVATE Bitmask sqlite3WhereCodeOneLoopStart(sqlite3WhereCodeOneLoopStart127373,4609058
static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){whereOrInfoDelete128406,4652476
static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){whereAndInfoDelete128414,4652668
static int whereClauseInsert(WhereClause *pWC, Expr *p, u16 wtFlags){whereClauseInsert128438,4653765
static int allowedOp(int op){allowedOp128479,4655026
static void exprCommute(Parse *pParse, Expr *pExpr){exprCommute128499,4655831
static u16 operatorMask(int op){operatorMask128530,4656964
static int isLikeOrGlob(isLikeOrGlob128568,4658150
static int isMatchOfColumn(isMatchOfColumn128676,4662052
static void transferJoinMarkings(Expr *pDerived, Expr *pBase){transferJoinMarkings128718,4663167
static void markTermAsChild(WhereClause *pWC, int iChild, int iParent){markTermAsChild128728,4663421
static WhereTerm *whereNthSubterm(WhereTerm *pTerm, int N){whereNthSubterm128739,4663812
static void whereCombineDisjuncts(whereCombineDisjuncts128769,4664655
static void exprAnalyzeOrTerm(exprAnalyzeOrTerm128895,4669783
static int termIsEquivalence(Parse *pParse, Expr *pExpr){termIsEquivalence129158,4680662
static Bitmask exprSelectUsage(WhereMaskSet *pMaskSet, Select *pS){exprSelectUsage129186,4681697
static int exprMightBeIndexed(exprMightBeIndexed129220,4683051
static void exprAnalyze(exprAnalyze129283,4685567
SQLITE_PRIVATE void sqlite3WhereSplit(WhereClause *pWC, Expr *pExpr, u8 op){sqlite3WhereSplit129690,4700987
SQLITE_PRIVATE void sqlite3WhereClauseInit(sqlite3WhereClauseInit129705,4701370
SQLITE_PRIVATE void sqlite3WhereClauseClear(WhereClause *pWC){sqlite3WhereClauseClear129721,4701832
SQLITE_PRIVATE Bitmask sqlite3WhereExprUsage(WhereMaskSet *pMaskSet, Expr *p){sqlite3WhereExprUsage129746,4702487
SQLITE_PRIVATE Bitmask sqlite3WhereExprListUsage(WhereMaskSet *pMaskSet, ExprList *pList){sqlite3WhereExprListUsage129763,4703092
SQLITE_PRIVATE void sqlite3WhereExprAnalyze(sqlite3WhereExprAnalyze129783,4703670
SQLITE_PRIVATE void sqlite3WhereTabFuncArgs(sqlite3WhereTabFuncArgs129800,4704130
/***/ int sqlite3WhereTrace = 0;sqlite3WhereTrace129861,4706461
SQLITE_PRIVATE LogEst sqlite3WhereOutputRowCount(WhereInfo *pWInfo){sqlite3WhereOutputRowCount129868,4706575
SQLITE_PRIVATE int sqlite3WhereIsDistinct(WhereInfo *pWInfo){sqlite3WhereIsDistinct129876,4706806
SQLITE_PRIVATE int sqlite3WhereIsOrdered(WhereInfo *pWInfo){sqlite3WhereIsOrdered129884,4707022
SQLITE_PRIVATE int sqlite3WhereOrderedInnerLoop(WhereInfo *pWInfo){sqlite3WhereOrderedInnerLoop129896,4707437
SQLITE_PRIVATE int sqlite3WhereContinueLabel(WhereInfo *pWInfo){sqlite3WhereContinueLabel129904,4707670
SQLITE_PRIVATE int sqlite3WhereBreakLabel(WhereInfo *pWInfo){sqlite3WhereBreakLabel129913,4707895
SQLITE_PRIVATE int sqlite3WhereOkOnePass(WhereInfo *pWInfo, int *aiCur){sqlite3WhereOkOnePass129934,4708829
static void whereOrMove(WhereOrSet *pDest, WhereOrSet *pSrc){whereOrMove129949,4709284
static int whereOrInsert(whereOrInsert129961,4709712
SQLITE_PRIVATE Bitmask sqlite3WhereGetMask(WhereMaskSet *pMaskSet, int iCursor){sqlite3WhereGetMask129998,4710679
static void createMask(WhereMaskSet *pMaskSet, int iCursor){createMask130017,4711215
static WhereTerm *whereScanNext(WhereScan *pScan){whereScanNext130027,4711579
static WhereTerm *whereScanInit(whereScanInit130128,4715342
SQLITE_PRIVATE WhereTerm *sqlite3WhereFindTerm(sqlite3WhereFindTerm130190,4717904
static int findIndexCol(findIndexCol130224,4718972
static int indexColumnNotNull(Index *pIdx, int iCol){indexColumnNotNull130253,4719821
static int isDistinctRedundant(isDistinctRedundant130276,4720421
static LogEst estLog(LogEst N){estLog130337,4722608
static void translateColumnToCopy(translateColumnToCopy130353,4723209
static void TRACE_IDX_INPUTS(sqlite3_index_info *p){TRACE_IDX_INPUTS130393,4724555
static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){TRACE_IDX_OUTPUTS130411,4725082
#define TRACE_IDX_INPUTS(TRACE_IDX_INPUTS130427,4725673
#define TRACE_IDX_OUTPUTS(TRACE_IDX_OUTPUTS130428,4725701
static int termCanDriveIndex(termCanDriveIndex130437,4725937
static void constructAutomaticIndex(constructAutomaticIndex130461,4726791
static sqlite3_index_info *allocateIndexInfo(allocateIndexInfo130668,4735161
static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){vtabBestIndex130808,4740442
static int whereKeyStats(whereKeyStats130857,4741974
static LogEst whereRangeAdjust(WhereTerm *pTerm, LogEst nNew){whereRangeAdjust131049,4749263
SQLITE_PRIVATE char sqlite3IndexColumnAffinity(sqlite3 *db, Index *pIdx, int iCol){sqlite3IndexColumnAffinity131066,4749660
static int whereRangeSkipScanEst(whereRangeSkipScanEst131112,4751494
static int whereRangeScanEst(whereRangeScanEst131224,4755846
static int whereEqualScanEst(whereEqualScanEst131403,4763009
static int whereInScanEst(whereInScanEst131467,4765111
static void whereTermPrint(WhereTerm *pTerm, int iTerm){whereTermPrint131504,4766311
SQLITE_PRIVATE void sqlite3WhereClausePrint(WhereClause *pWC){sqlite3WhereClausePrint131541,4767589
static void whereLoopPrint(WhereLoop *p, WhereClause *pWC){whereLoopPrint131553,4767824
static void whereLoopInit(WhereLoop *p){whereLoopInit131605,4769575
static void whereLoopClearUnion(sqlite3 *db, WhereLoop *p){whereLoopClearUnion131615,4769795
static void whereLoopClear(sqlite3 *db, WhereLoop *p){whereLoopClear131632,4770359
static int whereLoopResize(sqlite3 *db, WhereLoop *p, int n){whereLoopResize131641,4770609
static int whereLoopXfer(sqlite3 *db, WhereLoop *pTo, WhereLoop *pFrom){whereLoopXfer131657,4771099
static void whereLoopDelete(sqlite3 *db, WhereLoop *p){whereLoopDelete131676,4771667
static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){whereInfoFree131684,4771811
static int whereLoopCheaperProperSubset(whereLoopCheaperProperSubset131720,4773010
static void whereLoopAdjustCost(const WhereLoop *p, WhereLoop *pTemplate){whereLoopAdjustCost131757,4774266
static WhereLoop **whereLoopFindLesser(whereLoopFindLesser131793,4775798
static int whereLoopInsert(WhereLoopBuilder *pBuilder, WhereLoop *pTemplate){whereLoopInsert131881,4779583
static void whereLoopOutputAdjust(whereLoopOutputAdjust132007,4783928
static int whereRangeVectorLen(whereRangeVectorLen132070,4786098
# define ApplyCostMultiplier(ApplyCostMultiplier132124,4788095
# define ApplyCostMultiplier(ApplyCostMultiplier132126,4788143
static int whereLoopAddBtreeIndex(whereLoopAddBtreeIndex132141,4788627
static int indexMightHelpWithOrderBy(indexMightHelpWithOrderBy132467,4801779
static Bitmask columnsInIndex(Index *pIdx){columnsInIndex132501,4802769
static int whereUsablePartialIndex(int iTab, WhereClause *pWC, Expr *pWhere){whereUsablePartialIndex132518,4803181
static int whereLoopAddBtree(whereLoopAddBtree132572,4805421
static int whereLoopAddVirtualOne(whereLoopAddVirtualOne132824,4815517
static int whereLoopAddVirtual(whereLoopAddVirtual132978,4821421
static int whereLoopAddOr(whereLoopAddOr133099,4826195
static int whereLoopAddAll(WhereLoopBuilder *pBuilder){whereLoopAddAll133222,4830221
static i8 wherePathSatisfiesOrderBy(wherePathSatisfiesOrderBy133290,4832769
SQLITE_PRIVATE int sqlite3WhereIsSorted(WhereInfo *pWInfo){sqlite3WhereIsSorted133600,4845283
static const char *wherePathName(WherePath *pPath, int nLoop, WhereLoop *pLast){wherePathName133608,4845527
static LogEst whereSortingCost(whereSortingCost133623,4845940
static int wherePathSolver(WhereInfo *pWInfo, LogEst nRowEst){wherePathSolver133668,4847390
static int whereShortCut(WhereLoopBuilder *pBuilder){whereShortCut134036,4862654
SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin(sqlite3WhereBegin134202,4868991
SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){sqlite3WhereEnd134664,4885995
#define YYNOERRORRECOVERY YYNOERRORRECOVERY134858,4892889
#define yytestcase(yytestcase134863,4892968
#define YYPARSEFREENEVERNULL YYPARSEFREENEVERNULL134869,4893091
# define sqlite3Parser_ENGINEALWAYSONSTACK sqlite3Parser_ENGINEALWAYSONSTACK134881,4893585
#define YYMALLOCARGTYPE YYMALLOCARGTYPE134888,4893770
struct LimitVal {LimitVal134894,4893906
  Expr *pLimit;    /* The LIMIT expression.  NULL if there is no limit */pLimit134895,4893924
  Expr *pOffset;   /* The OFFSET expression.  NULL if there is none */pOffset134896,4893998
struct TrigEvent { int a; IdList * b; };TrigEvent134908,4894350
struct TrigEvent { int a; IdList * b; };a134908,4894350
struct TrigEvent { int a; IdList * b; };b134908,4894350
static void disableLookaside(Parse *pParse){disableLookaside134914,4894502
  static void parserDoubleLinkSelect(Parse *pParse, Select *p){parserDoubleLinkSelect134925,4894808
  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){spanSet134946,4895556
  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token t){spanExpr134955,4895876
  static void spanBinaryExpr(spanBinaryExpr134981,4896669
  static void exprNot(Parse *pParse, int doNot, ExprSpan *pSpan){exprNot134994,4897148
  static void spanUnaryPostfix(spanUnaryPostfix135002,4897378
  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){binaryToUnaryIfNull135014,4897923
  static void spanUnaryPrefix(spanUnaryPrefix135025,4898234
  static ExprList *parserAddExprIdListTerm(parserAddExprIdListTerm135042,4898945
# define INTERFACE INTERFACE135114,4903079
#define YYCODETYPE YYCODETYPE135117,4903188
#define YYNOCODE YYNOCODE135118,4903221
#define YYACTIONTYPE YYACTIONTYPE135119,4903242
#define YYWILDCARD YYWILDCARD135120,4903282
#define sqlite3ParserTOKENTYPE sqlite3ParserTOKENTYPE135121,4903304
  int yyinit;yyinit135123,4903357
  sqlite3ParserTOKENTYPE yy0;yy0135124,4903371
  Expr* yy72;yy72135125,4903401
  TriggerStep* yy145;yy145135126,4903415
  ExprList* yy148;yy148135127,4903437
  SrcList* yy185;yy185135128,4903456
  ExprSpan yy190;yy190135129,4903474
  int yy194;yy194135130,4903492
  Select* yy243;yy243135131,4903505
  IdList* yy254;yy254135132,4903522
  With* yy285;yy285135133,4903539
  struct TrigEvent yy332;yy332135134,4903554
  struct LimitVal yy354;yy354135135,4903580
  struct {int value; int mask;} yy497;value135136,4903605
  struct {int value; int mask;} yy497;mask135136,4903605
  struct {int value; int mask;} yy497;yy497135136,4903605
} YYMINORTYPE;YYMINORTYPE135137,4903644
#define YYSTACKDEPTH YYSTACKDEPTH135139,4903680
#define sqlite3ParserARG_SDECL sqlite3ParserARG_SDECL135141,4903712
#define sqlite3ParserARG_PDECL sqlite3ParserARG_PDECL135142,4903758
#define sqlite3ParserARG_FETCH sqlite3ParserARG_FETCH135143,4903804
#define sqlite3ParserARG_STORE sqlite3ParserARG_STORE135144,4903869
#define YYFALLBACK YYFALLBACK135145,4903927
#define YYNSTATE YYNSTATE135146,4903948
#define YYNRULE YYNRULE135147,4903981
#define YY_MAX_SHIFT YY_MAX_SHIFT135148,4904014
#define YY_MIN_SHIFTREDUCE YY_MIN_SHIFTREDUCE135149,4904047
#define YY_MAX_SHIFTREDUCE YY_MAX_SHIFTREDUCE135150,4904080
#define YY_MIN_REDUCE YY_MIN_REDUCE135151,4904113
#define YY_MAX_REDUCE YY_MAX_REDUCE135152,4904147
#define YY_ERROR_ACTION YY_ERROR_ACTION135153,4904181
#define YY_ACCEPT_ACTION YY_ACCEPT_ACTION135154,4904215
#define YY_NO_ACTION YY_NO_ACTION135155,4904249
# define yytestcase(yytestcase135167,4904712
#define YY_ACTTAB_COUNT YY_ACTTAB_COUNT135227,4907412
static const YYACTIONTYPE yy_action[] = {yy_action135228,4907443
static const YYCODETYPE yy_lookahead[] = {yy_lookahead135387,4919088
#define YY_SHIFT_USE_DFLT YY_SHIFT_USE_DFLT135546,4930734
#define YY_SHIFT_COUNT YY_SHIFT_COUNT135547,4930767
#define YY_SHIFT_MIN YY_SHIFT_MIN135548,4930799
#define YY_SHIFT_MAX YY_SHIFT_MAX135549,4930831
static const short yy_shift_ofst[] = {yy_shift_ofst135550,4930864
#define YY_REDUCE_USE_DFLT YY_REDUCE_USE_DFLT135598,4934286
#define YY_REDUCE_COUNT YY_REDUCE_COUNT135599,4934320
#define YY_REDUCE_MIN YY_REDUCE_MIN135600,4934350
#define YY_REDUCE_MAX YY_REDUCE_MAX135601,4934381
static const short yy_reduce_ofst[] = {yy_reduce_ofst135602,4934412
static const YYACTIONTYPE yy_default[] = {yy_default135637,4936867
static const YYCODETYPE yyFallback[] = {yyFallback135702,4940981
struct yyStackEntry {yyStackEntry135818,4944877
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */stateno135819,4944899
  YYCODETYPE major;      /* The major token value.  This is the codemajor135820,4944980
  YYMINORTYPE minor;     /* The user-supplied minor token value.  Thisminor135822,4945121
typedef struct yyStackEntry yyStackEntry;yyStackEntry135825,4945253
struct yyParser {yyParser135829,4945395
  yyStackEntry *yytos;          /* Pointer to top element of the stack */yytos135830,4945413
  int yyhwm;                    /* High-water mark of the stack */yyhwm135832,4945515
  int yyerrcnt;                 /* Shifts left before out of the error */yyerrcnt135835,4945615
  int yystksz;                  /* Current side of the stack */yystksz135839,4945794
  yyStackEntry *yystack;        /* The parser's stack */yystack135840,4945858
  yyStackEntry yystk0;          /* First stack entry */yystk0135841,4945915
typedef struct yyParser yyParser;yyParser135846,4946051
static FILE *yyTraceFILE = 0;yyTraceFILE135850,4946126
static char *yyTracePrompt = 0;yyTracePrompt135851,4946156
SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){sqlite3ParserTrace135872,4946700
static const char *const yyTokenName[] = { yyTokenName135883,4947092
static const char *const yyRuleName[] = {yyRuleName135953,4951625
static int yyGrowStack(yyParser *p){yyGrowStack136295,4965949
# define YYMALLOCARGTYPE YYMALLOCARGTYPE136329,4966851
SQLITE_PRIVATE void sqlite3ParserInit(void *yypParser){sqlite3ParserInit136334,4966954
SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(YYMALLOCARGTYPE)){sqlite3ParserAlloc136369,4967842
static void yy_destructor(yy_destructor136385,4968508
static void yy_pop_parser_stack(yyParser *pParser){yy_pop_parser_stack136487,4971351
SQLITE_PRIVATE void sqlite3ParserFinalize(void *p){sqlite3ParserFinalize136505,4971798
SQLITE_PRIVATE void sqlite3ParserFree(sqlite3ParserFree136522,4972413
SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){sqlite3ParserStackPeak136538,4972823
static unsigned int yy_find_shift_action(yy_find_shift_action136548,4973047
static int yy_find_reduce_action(yy_find_reduce_action136611,4974818
static void yyStackOverflow(yyParser *yypParser){yyStackOverflow136641,4975541
static void yyTraceShift(yyParser *yypParser, int yyNewState){yyTraceShift136662,4976272
# define yyTraceShift(yyTraceShift136675,4976665
static void yy_shift(yy_shift136681,4976733
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */lhs136724,4978032
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */nrhs136725,4978105
} yyRuleInfo[] = {yyRuleInfo136726,4978183
static void yy_reduce(yy_reduce137067,4983010
static void yy_parse_failed(yy_parse_failed138374,5040989
static void yy_syntax_error(yy_syntax_error138395,5041712
#define TOKEN TOKEN138401,5041974
static void yy_accept(yy_accept138414,5042508
SQLITE_PRIVATE void sqlite3Parser(sqlite3Parser138453,5043784
#define CC_X CC_X138640,5050183
#define CC_KYWD CC_KYWD138641,5050257
#define CC_ID CC_ID138642,5050331
#define CC_DIGIT CC_DIGIT138643,5050397
#define CC_DOLLAR CC_DOLLAR138644,5050437
#define CC_VARALPHA CC_VARALPHA138645,5050474
#define CC_VARNUM CC_VARNUM138646,5050548
#define CC_SPACE CC_SPACE138647,5050609
#define CC_QUOTE CC_QUOTE138648,5050659
#define CC_QUOTE2 CC_QUOTE2138649,5050740
#define CC_PIPE CC_PIPE138650,5050803
#define CC_MINUS CC_MINUS138651,5050869
#define CC_LT CC_LT138652,5050935
#define CC_GT CC_GT138653,5050996
#define CC_EQ CC_EQ138654,5051051
#define CC_BANG CC_BANG138655,5051106
#define CC_SLASH CC_SLASH138656,5051156
#define CC_LP CC_LP138657,5051216
#define CC_RP CC_RP138658,5051253
#define CC_SEMI CC_SEMI138659,5051290
#define CC_PLUS CC_PLUS138660,5051327
#define CC_STAR CC_STAR138661,5051364
#define CC_PERCENT CC_PERCENT138662,5051401
#define CC_COMMA CC_COMMA138663,5051438
#define CC_AND CC_AND138664,5051475
#define CC_TILDA CC_TILDA138665,5051512
#define CC_DOT CC_DOT138666,5051549
#define CC_ILLEGAL CC_ILLEGAL138667,5051586
static const unsigned char aiClass[] = {aiClass138669,5051638
# define charMap(charMap138720,5054678
# define charMap(charMap138723,5054764
const unsigned char ebcdicToAscii[] = {ebcdicToAscii138724,5054816
static int keywordCode(const char *z, int n, int *pType){keywordCode138772,5057417
SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){sqlite3KeywordCode139037,5070821
#define SQLITE_N_KEYWORD SQLITE_N_KEYWORD139042,5070957
#define IdChar(IdChar139065,5071734
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {sqlite3IsEbcdicIdChar139068,5071827
#define IdChar(IdChar139083,5072682
SQLITE_PRIVATE int sqlite3IsIdChar(u8 c){ return IdChar(c); }sqlite3IsIdChar139088,5072853
SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){sqlite3GetToken139096,5073053
SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){sqlite3RunParser139376,5080049
#define IdChar(IdChar139546,5085443
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];sqlite3IsEbcdicIdChar139549,5085536
#define IdChar(IdChar139550,5085587
#define tkSEMI tkSEMI139559,5085832
#define tkWS tkWS139560,5085852
#define tkOTHER tkOTHER139561,5085872
#define tkEXPLAIN tkEXPLAIN139563,5085920
#define tkCREATE tkCREATE139564,5085940
#define tkTEMP tkTEMP139565,5085960
#define tkTRIGGER tkTRIGGER139566,5085980
#define tkEND tkEND139567,5086000
SQLITE_API int sqlite3_complete(const char *zSql){sqlite3_complete139623,5088234
SQLITE_API int sqlite3_complete16(const void *zSql){sqlite3_complete16139788,5093325
SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;sqlite3_version139942,5098151
SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }sqlite3_libversion139948,5098361
SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }sqlite3_sourceid139954,5098624
SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }sqlite3_libversion_number139959,5098833
SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }sqlite3_threadsafe139965,5099133
#   define SQLITE_DEBUG_OS_TRACE SQLITE_DEBUG_OS_TRACE139974,5099447
  int sqlite3OSTrace = SQLITE_DEBUG_OS_TRACE;sqlite3OSTrace139976,5099490
SQLITE_API void (SQLITE_CDECL *sqlite3IoTrace)(const char*, ...) = 0;sqlite3IoTrace139986,5099842
SQLITE_API char *sqlite3_temp_directory = 0;sqlite3_temp_directory139996,5100142
SQLITE_API char *sqlite3_data_directory = 0;sqlite3_data_directory140005,5100448
SQLITE_API int sqlite3_initialize(void){sqlite3_initialize140038,5101830
SQLITE_API int sqlite3_shutdown(void){sqlite3_shutdown140204,5107720
SQLITE_API int sqlite3_config(int op, ...){sqlite3_config140258,5109389
static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){setupLookaside140564,5121478
SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){sqlite3_db_mutex140623,5123129
SQLITE_API int sqlite3_db_release_memory(sqlite3 *db){sqlite3_db_release_memory140637,5123411
SQLITE_API int sqlite3_db_cacheflush(sqlite3 *db){sqlite3_db_cacheflush140661,5123976
SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){sqlite3_db_config140690,5124737
static int allSpaces(const char *z, int n){allSpaces140751,5126614
static int binCollFunc(binCollFunc140763,5126943
static int nocaseCollatingFunc(nocaseCollatingFunc140800,5128103
SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){sqlite3_last_insert_rowid140817,5128456
SQLITE_API void sqlite3_set_last_insert_rowid(sqlite3 *db, sqlite3_int64 iRowid){sqlite3_set_last_insert_rowid140830,5128749
SQLITE_API int sqlite3_changes(sqlite3 *db){sqlite3_changes140845,5129128
SQLITE_API int sqlite3_total_changes(sqlite3 *db){sqlite3_total_changes140858,5129395
SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){sqlite3CloseSavepoints140873,5129785
static void functionDestroy(sqlite3 *db, FuncDef *p){functionDestroy140890,5130326
static void disconnectAllVtab(sqlite3 *db){disconnectAllVtab140905,5130739
static int connectionIsBusy(sqlite3 *db){connectionIsBusy140936,5131590
static int sqlite3Close(sqlite3 *db, int forceZombie){sqlite3Close140950,5131890
SQLITE_API int sqlite3_close(sqlite3 *db){ return sqlite3Close(db,0); }sqlite3_close141009,5134045
SQLITE_API int sqlite3_close_v2(sqlite3 *db){ return sqlite3Close(db,1); }sqlite3_close_v2141010,5134117
SQLITE_PRIVATE void sqlite3LeaveMutexAndCloseZombie(sqlite3 *db){sqlite3LeaveMutexAndCloseZombie141021,5134510
SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db, int tripCode){sqlite3RollbackAll141144,5138564
SQLITE_PRIVATE const char *sqlite3ErrName(int rc){sqlite3ErrName141194,5140186
SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){sqlite3ErrStr141302,5147507
static int sqliteDefaultBusyCallback(sqliteDefaultBusyCallback141355,5149644
# define NDELAY NDELAY141364,5150012
SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){sqlite3InvokeBusyHandler141401,5150909
SQLITE_API int sqlite3_busy_handler(sqlite3_busy_handler141417,5151282
SQLITE_API void sqlite3_progress_handler(sqlite3_progress_handler141440,5151913
SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){sqlite3_busy_timeout141471,5152557
SQLITE_API void sqlite3_interrupt(sqlite3 *db){sqlite3_interrupt141487,5152968
SQLITE_PRIVATE int sqlite3CreateFunc(sqlite3CreateFunc141504,5153487
SQLITE_API int sqlite3_create_function(sqlite3_create_function141603,5156544
SQLITE_API int sqlite3_create_function_v2(sqlite3_create_function_v2141617,5156932
SQLITE_API int sqlite3_create_function16(sqlite3_create_function16141660,5157938
SQLITE_API int sqlite3_overload_function(sqlite3_overload_function141700,5159186
SQLITE_API void *sqlite3_trace(sqlite3 *db, void(*xTrace)(void*,const char*), void *pArg){sqlite3_trace141732,5160061
SQLITE_API int sqlite3_trace_v2(sqlite3_trace_v2141753,5160624
SQLITE_API void *sqlite3_profile(sqlite3_profile141783,5161605
SQLITE_API void *sqlite3_commit_hook(sqlite3_commit_hook141811,5162246
SQLITE_API void *sqlite3_update_hook(sqlite3_update_hook141836,5162914
SQLITE_API void *sqlite3_rollback_hook(sqlite3_rollback_hook141861,5163573
SQLITE_API void *sqlite3_preupdate_hook(sqlite3_preupdate_hook141887,5164269
SQLITE_PRIVATE int sqlite3WalDefaultHook(sqlite3WalDefaultHook141910,5165091
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){sqlite3_wal_autocheckpoint141936,5166038
SQLITE_API void *sqlite3_wal_hook(sqlite3_wal_hook141957,5166590
SQLITE_API int sqlite3_wal_checkpoint_v2(sqlite3_wal_checkpoint_v2141984,5167214
SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){sqlite3_wal_checkpoint142046,5169126
SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){sqlite3Checkpoint142072,5170319
SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){sqlite3TempInMemory142116,5172200
SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){sqlite3_errmsg142137,5172636
SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){sqlite3_errmsg16142165,5173304
SQLITE_API int sqlite3_errcode(sqlite3 *db){sqlite3_errcode142210,5174711
SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){sqlite3_extended_errcode142219,5174943
SQLITE_API int sqlite3_system_errno(sqlite3 *db){sqlite3_system_errno142228,5175170
SQLITE_API const char *sqlite3_errstr(int rc){sqlite3_errstr142237,5175416
static int createCollation(createCollation142245,5175601
static const int aHardLimit[] = {aHardLimit142322,5177923
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){sqlite3_limit142385,5179817
SQLITE_PRIVATE int sqlite3ParseUri(sqlite3ParseUri142453,5182961
static int openDatabase(openDatabase142689,5190805
SQLITE_API int sqlite3_open(sqlite3_open143021,5201353
SQLITE_API int sqlite3_open_v2(sqlite3_open_v2143028,5201540
SQLITE_API int sqlite3_open16(sqlite3_open16143041,5201915
SQLITE_API int sqlite3_create_collation(sqlite3_create_collation143080,5202990
SQLITE_API int sqlite3_create_collation_v2(sqlite3_create_collation_v2143093,5203302
SQLITE_API int sqlite3_create_collation16(sqlite3_create_collation16143118,5203923
SQLITE_API int sqlite3_collation_needed(sqlite3_collation_needed143148,5204744
SQLITE_API int sqlite3_collation_needed16(sqlite3_collation_needed16143169,5205353
SQLITE_API int sqlite3_global_recover(void){sqlite3_global_recover143191,5205999
SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){sqlite3_get_autocommit143202,5206332
static int reportError(int iErr, int lineno, const char *zType){reportError143223,5206976
SQLITE_PRIVATE int sqlite3CorruptError(int lineno){sqlite3CorruptError143228,5207159
SQLITE_PRIVATE int sqlite3MisuseError(int lineno){sqlite3MisuseError143232,5207325
SQLITE_PRIVATE int sqlite3CantopenError(int lineno){sqlite3CantopenError143236,5207476
SQLITE_PRIVATE int sqlite3NomemError(int lineno){sqlite3NomemError143241,5207661
SQLITE_PRIVATE int sqlite3IoerrnomemError(int lineno){sqlite3IoerrnomemError143245,5207807
SQLITE_API void sqlite3_thread_cleanup(void){sqlite3_thread_cleanup143259,5208269
SQLITE_API int sqlite3_table_column_metadata(sqlite3_table_column_metadata143267,5208458
SQLITE_API int sqlite3_sleep(int ms){sqlite3_sleep143385,5212049
SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){sqlite3_extended_result_codes143401,5212413
SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){sqlite3_file_control143414,5212782
SQLITE_API int sqlite3_test_control(int op, ...){sqlite3_test_control143454,5213903
SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){sqlite3_uri_parameter143808,5226662
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){sqlite3_uri_boolean143823,5227111
SQLITE_API sqlite3_int64 sqlite3_uri_int64(sqlite3_uri_int64143832,5227396
SQLITE_PRIVATE Btree *sqlite3DbNameToBtree(sqlite3 *db, const char *zDbName){sqlite3DbNameToBtree143848,5227879
SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName){sqlite3_db_filename143857,5228144
SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName){sqlite3_db_readonly143873,5228557
SQLITE_API int sqlite3_snapshot_get(sqlite3_snapshot_get143890,5228994
SQLITE_API int sqlite3_snapshot_open(sqlite3_snapshot_open143926,5229804
SQLITE_API int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb){sqlite3_snapshot_recover143964,5230726
SQLITE_API void sqlite3_snapshot_free(sqlite3_snapshot *pSnapshot){sqlite3_snapshot_free143995,5231480
#define assertMutexHeld(assertMutexHeld144032,5232596
static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;sqlite3BlockedList144041,5232948
static void checkListProperties(sqlite3 *db){checkListProperties144058,5233586
# define checkListProperties(checkListProperties144077,5234158
static void removeFromBlockedList(sqlite3 *db){removeFromBlockedList144084,5234346
static void addToBlockedList(sqlite3 *db){addToBlockedList144099,5234692
static void enterMutex(void){enterMutex144114,5234976
static void leaveMutex(void){leaveMutex144122,5235147
SQLITE_API int sqlite3_unlock_notify(sqlite3_unlock_notify144149,5236077
SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){sqlite3ConnectionBlocked144199,5237478
SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){sqlite3ConnectionUnlocked144227,5238446
SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){sqlite3ConnectionClosed144326,5242289
#define _FTSINT_H_FTSINT_H144643,5255788
# define NDEBUG NDEBUG144646,5255855
# undef SQLITE_ENABLE_FTS3SQLITE_ENABLE_FTS3144651,5255952
# undef SQLITE_ENABLE_FTS4SQLITE_ENABLE_FTS4144652,5255979
# define SQLITE_ENABLE_FTS3SQLITE_ENABLE_FTS3144661,5256293
#define _FTS3_TOKENIZER_H__FTS3_TOKENIZER_H_144695,5257406
typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;sqlite3_tokenizer_module144722,5258619
typedef struct sqlite3_tokenizer sqlite3_tokenizer;sqlite3_tokenizer144723,5258685
typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;sqlite3_tokenizer_cursor144724,5258737
struct sqlite3_tokenizer_module {sqlite3_tokenizer_module144726,5258804
  int iVersion;iVersion144731,5258905
  int (*xCreate)(xCreate144750,5259688
  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);xDestroy144760,5260056
  int (*xOpen)(xOpen144767,5260319
  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);xClose144777,5260685
  int (*xNext)(xNext144803,5261971
  int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid);xLanguageid144818,5262577
struct sqlite3_tokenizer {sqlite3_tokenizer144821,5262648
  const sqlite3_tokenizer_module *pModule;  /* The module for this tokenizer */pModule144822,5262675
struct sqlite3_tokenizer_cursor {sqlite3_tokenizer_cursor144826,5262830
  sqlite3_tokenizer *pTokenizer;       /* Tokenizer for this cursor. */pTokenizer144827,5262864
#define _FTS3_HASH_H__FTS3_HASH_H_144858,5264061
typedef struct Fts3Hash Fts3Hash;Fts3Hash144861,5264126
typedef struct Fts3HashElem Fts3HashElem;Fts3HashElem144862,5264160
struct Fts3Hash {Fts3Hash144872,5264659
  char keyClass;          /* HASH_INT, _POINTER, _STRING, _BINARY */keyClass144873,5264677
  char copyKey;           /* True if copy of key made on insert */copyKey144874,5264746
  int count;              /* Number of entries in this table */count144875,5264813
  Fts3HashElem *first;    /* The first element of the array */first144876,5264877
  int htsize;             /* Number of buckets in the hash table */htsize144877,5264940
  struct _fts3ht {        /* the hash table */_fts3ht144878,5265008
    int count;               /* Number of entries with this hash */count144879,5265055
    Fts3HashElem *chain;     /* Pointer to first entry with this hash */chain144880,5265123
  } *ht;ht144881,5265196
struct Fts3HashElem {Fts3HashElem144890,5265467
  Fts3HashElem *next, *prev; /* Next and previous elements in the table */next144891,5265489
  Fts3HashElem *next, *prev; /* Next and previous elements in the table */prev144891,5265489
  void *data;                /* Data associated with this element */data144892,5265564
  void *pKey; int nKey;      /* Key associated with this element */pKey144893,5265633
  void *pKey; int nKey;      /* Key associated with this element */nKey144893,5265633
#define FTS3_HASH_STRING FTS3_HASH_STRING144908,5266208
#define FTS3_HASH_BINARY FTS3_HASH_BINARY144909,5266238
#define fts3HashInit fts3HashInit144923,5266787
#define fts3HashInsert fts3HashInsert144924,5266832
#define fts3HashFind fts3HashFind144925,5266879
#define fts3HashClear fts3HashClear144926,5266924
#define fts3HashFindElem fts3HashFindElem144927,5266970
#define fts3HashFirst(fts3HashFirst144941,5267303
#define fts3HashNext(fts3HashNext144942,5267342
#define fts3HashData(fts3HashData144943,5267380
#define fts3HashKey(fts3HashKey144944,5267418
#define fts3HashKeysize(fts3HashKeysize144945,5267456
#define fts3HashCount(fts3HashCount144950,5267539
# define SQLITE_FTS3_MAX_EXPR_DEPTH SQLITE_FTS3_MAX_EXPR_DEPTH144965,5268149
#define FTS3_MERGE_COUNT FTS3_MERGE_COUNT144974,5268371
#define FTS3_MAX_PENDING_DATA FTS3_MAX_PENDING_DATA144984,5268816
#define SizeofArray(SizeofArray144991,5269067
# define MIN(MIN144995,5269136
# define MAX(MAX144998,5269191
#define FTS3_VARINT_MAX FTS3_VARINT_MAX145005,5269384
#define FTS3_SEGDIR_MAXLEVEL FTS3_SEGDIR_MAXLEVEL145022,5270215
#define FTS3_SEGDIR_MAXLEVEL_STR FTS3_SEGDIR_MAXLEVEL_STR145023,5270254
# define testcase(testcase145030,5270411
#define POS_COLUMN POS_COLUMN145036,5270504
#define POS_END POS_END145037,5270561
# define ALWAYS(ALWAYS145050,5270885
# define NEVER(NEVER145051,5270908
# define ALWAYS(ALWAYS145053,5270959
# define NEVER(NEVER145054,5271004
# define ALWAYS(ALWAYS145058,5271142
# define NEVER(NEVER145059,5271165
typedef unsigned char u8;         /* 1-byte (or larger) unsigned integer */u8145065,5271236
typedef short int i16;            /* 2-byte (or larger) signed integer */i16145066,5271312
typedef unsigned int u32;         /* 4-byte unsigned integer */u32145067,5271386
typedef sqlite3_uint64 u64;       /* 8-byte unsigned integer */u64145068,5271450
typedef sqlite3_int64 i64;        /* 8-byte signed integer */i64145069,5271514
#define UNUSED_PARAMETER(UNUSED_PARAMETER145074,5271650
# define NDEBUG NDEBUG145080,5271796
# define TESTONLY(TESTONLY145089,5272058
# define TESTONLY(TESTONLY145091,5272088
# define FTS_CORRUPT_VTAB FTS_CORRUPT_VTAB145098,5272216
# define FTS_CORRUPT_VTAB FTS_CORRUPT_VTAB145100,5272269
typedef struct Fts3Table Fts3Table;Fts3Table145103,5272323
typedef struct Fts3Cursor Fts3Cursor;Fts3Cursor145104,5272359
typedef struct Fts3Expr Fts3Expr;Fts3Expr145105,5272397
typedef struct Fts3Phrase Fts3Phrase;Fts3Phrase145106,5272431
typedef struct Fts3PhraseToken Fts3PhraseToken;Fts3PhraseToken145107,5272469
typedef struct Fts3Doclist Fts3Doclist;Fts3Doclist145109,5272518
typedef struct Fts3SegFilter Fts3SegFilter;Fts3SegFilter145110,5272558
typedef struct Fts3DeferredToken Fts3DeferredToken;Fts3DeferredToken145111,5272602
typedef struct Fts3SegReader Fts3SegReader;Fts3SegReader145112,5272654
typedef struct Fts3MultiSegReader Fts3MultiSegReader;Fts3MultiSegReader145113,5272698
typedef struct MatchinfoBuffer MatchinfoBuffer;MatchinfoBuffer145115,5272753
struct Fts3Table {Fts3Table145124,5273098
  sqlite3_vtab base;              /* Base class used by SQLite core */base145125,5273117
  sqlite3 *db;                    /* The database connection */db145126,5273188
  const char *zDb;                /* logical database name */zDb145127,5273252
  const char *zName;              /* virtual table name */zName145128,5273314
  int nColumn;                    /* number of named columns in virtual table */nColumn145129,5273373
  char **azColumn;                /* column names.  malloced */azColumn145130,5273454
  u8 *abNotindexed;               /* True for 'notindexed' columns */abNotindexed145131,5273518
  sqlite3_tokenizer *pTokenizer;  /* tokenizer for inserts and queries */pTokenizer145132,5273588
  char *zContentTbl;              /* content=xxx option, or NULL */zContentTbl145133,5273662
  char *zLanguageid;              /* languageid=xxx option, or NULL */zLanguageid145134,5273730
  int nAutoincrmerge;             /* Value configured by 'automerge' */nAutoincrmerge145135,5273801
  u32 nLeafAdd;                   /* Number of leaf blocks added this trans */nLeafAdd145136,5273873
  sqlite3_stmt *aStmt[40];aStmt145141,5274103
  sqlite3_stmt *pSeekStmt;        /* Cache for fts3CursorSeekStmt() */pSeekStmt145142,5274130
  char *zReadExprlist;zReadExprlist145144,5274202
  char *zWriteExprlist;zWriteExprlist145145,5274225
  int nNodeSize;                  /* Soft limit for node size */nNodeSize145147,5274250
  u8 bFts4;                       /* True for FTS4, false for FTS3 */bFts4145148,5274315
  u8 bHasStat;                    /* True if %_stat table exists (2==unknown) */bHasStat145149,5274385
  u8 bHasDocsize;                 /* True if %_docsize table exists */bHasDocsize145150,5274466
  u8 bDescIdx;                    /* True if doclists are in reverse order */bDescIdx145151,5274537
  u8 bIgnoreSavepoint;            /* True to ignore xSavepoint invocations */bIgnoreSavepoint145152,5274615
  int nPgsz;                      /* Page size for host database */nPgsz145153,5274693
  char *zSegmentsTbl;             /* Name of %_segments table */zSegmentsTbl145154,5274761
  sqlite3_blob *pSegments;        /* Blob handle open on %_segments table */pSegments145155,5274826
  int nIndex;                     /* Size of aIndex[] */nIndex145174,5275833
  struct Fts3Index {Fts3Index145175,5275890
    int nPrefix;                  /* Prefix length (0 for main terms index) */nPrefix145176,5275911
    Fts3Hash hPending;            /* Pending terms table for this index */hPending145177,5275990
  } *aIndex;aIndex145178,5276065
  int nMaxPendingData;            /* Max pending data before flush to disk */nMaxPendingData145179,5276078
  int nPendingData;               /* Current bytes of pending data */nPendingData145180,5276156
  sqlite_int64 iPrevDocid;        /* Docid of most recently inserted document */iPrevDocid145181,5276226
  int iPrevLangid;                /* Langid of recently inserted document */iPrevLangid145182,5276307
  int bPrevDelete;                /* True if last operation was a delete */bPrevDelete145183,5276384
  int inTransaction;     /* True after xBegin but before xCommit/xRollback */inTransaction145191,5276788
  int mxSavepoint;       /* Largest valid xSavepoint integer */mxSavepoint145192,5276866
  int bNoIncrDoclist;bNoIncrDoclist145198,5277093
struct Fts3Cursor {Fts3Cursor145207,5277339
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base145208,5277359
  i16 eSearch;                    /* Search strategy (see below) */eSearch145209,5277430
  u8 isEof;                       /* True if at End Of Results */isEof145210,5277498
  u8 isRequireSeek;               /* True if must seek pStmt to %_content row */isRequireSeek145211,5277564
  u8 bSeekStmt;                   /* True if pStmt is a seek */bSeekStmt145212,5277645
  sqlite3_stmt *pStmt;            /* Prepared statement in use by the cursor */pStmt145213,5277709
  Fts3Expr *pExpr;                /* Parsed MATCH query string */pExpr145214,5277789
  int iLangid;                    /* Language being queried for */iLangid145215,5277855
  int nPhrase;                    /* Number of matchable phrases in query */nPhrase145216,5277922
  Fts3DeferredToken *pDeferred;   /* Deferred search tokens, if any */pDeferred145217,5277999
  sqlite3_int64 iPrevId;          /* Previous id read from aDoclist */iPrevId145218,5278070
  char *pNextId;                  /* Pointer into the body of aDoclist */pNextId145219,5278141
  char *aDoclist;                 /* List of docids for full-text queries */aDoclist145220,5278215
  int nDoclist;                   /* Size of buffer at aDoclist */nDoclist145221,5278292
  u8 bDesc;                       /* True to sort in descending order */bDesc145222,5278359
  int eEvalmode;                  /* An FTS3_EVAL_XX constant */eEvalmode145223,5278432
  int nRowAvg;                    /* Average size of database rows, in pages */nRowAvg145224,5278497
  sqlite3_int64 nDoc;             /* Documents in table */nDoc145225,5278577
  i64 iMinDocid;                  /* Minimum docid to return */iMinDocid145226,5278636
  i64 iMaxDocid;                  /* Maximum docid to return */iMaxDocid145227,5278700
  int isMatchinfoNeeded;          /* True when aMatchinfo[] needs filling in */isMatchinfoNeeded145228,5278764
  MatchinfoBuffer *pMIBuffer;     /* Buffer for matchinfo data */pMIBuffer145229,5278844
#define FTS3_EVAL_FILTER FTS3_EVAL_FILTER145232,5278914
#define FTS3_EVAL_NEXT FTS3_EVAL_NEXT145233,5278944
#define FTS3_EVAL_MATCHINFO FTS3_EVAL_MATCHINFO145234,5278974
#define FTS3_FULLSCAN_SEARCH FTS3_FULLSCAN_SEARCH145251,5279697
#define FTS3_DOCID_SEARCH FTS3_DOCID_SEARCH145252,5279768
#define FTS3_FULLTEXT_SEARCH FTS3_FULLTEXT_SEARCH145253,5279843
#define FTS3_HAVE_LANGID FTS3_HAVE_LANGID145261,5280189
#define FTS3_HAVE_DOCID_GE FTS3_HAVE_DOCID_GE145262,5280252
#define FTS3_HAVE_DOCID_LE FTS3_HAVE_DOCID_LE145263,5280311
struct Fts3Doclist {Fts3Doclist145265,5280371
  char *aAll;                    /* Array containing doclist (or NULL) */aAll145266,5280392
  int nAll;                      /* Size of a[] in bytes */nAll145267,5280466
  char *pNextDocid;              /* Pointer to next docid */pNextDocid145268,5280526
  sqlite3_int64 iDocid;          /* Current docid (if pList!=0) */iDocid145270,5280588
  int bFreeList;                 /* True if pList should be sqlite3_free()d */bFreeList145271,5280655
  char *pList;                   /* Pointer to position list following iDocid */pList145272,5280734
  int nList;                     /* Length of position list */nList145273,5280815
struct Fts3PhraseToken {Fts3PhraseToken145282,5281161
  char *z;                        /* Text of the token */z145283,5281186
  int n;                          /* Number of bytes in buffer z */n145284,5281244
  int isPrefix;                   /* True if token ends with a "*" character */isPrefix145285,5281312
  int bFirst;                     /* True if token must appear at position 0 */bFirst145286,5281392
  Fts3DeferredToken *pDeferred;   /* Deferred token object for this token */pDeferred145291,5281660
  Fts3MultiSegReader *pSegcsr;    /* Segment-reader for this token */pSegcsr145292,5281737
struct Fts3Phrase {Fts3Phrase145295,5281811
  Fts3Doclist doclist;doclist145297,5281873
  int bIncr;                 /* True if doclist is loaded incrementally */bIncr145298,5281896
  int iDoclistToken;iDoclistToken145299,5281971
  char *pOrPoslist;pOrPoslist145303,5282090
  i64 iOrDocid;iOrDocid145304,5282110
  int nToken;                /* Number of tokens in the phrase */nToken145309,5282283
  int iColumn;               /* Index of column this phrase must match */iColumn145310,5282349
  Fts3PhraseToken aToken[1]; /* One entry for each token in the phrase */aToken145311,5282423
struct Fts3Expr {Fts3Expr145335,5283397
  int eType;                 /* One of the FTSQUERY_XXX values defined below */eType145336,5283415
  int nNear;                 /* Valid if eType==FTSQUERY_NEAR */nNear145337,5283495
  Fts3Expr *pParent;         /* pParent->pLeft==this or pParent->pRight==this */pParent145338,5283560
  Fts3Expr *pLeft;           /* Left operand */pLeft145339,5283641
  Fts3Expr *pRight;          /* Right operand */pRight145340,5283689
  Fts3Phrase *pPhrase;       /* Valid if eType==FTSQUERY_PHRASE */pPhrase145341,5283738
  sqlite3_int64 iDocid;      /* Current docid */iDocid145344,5283864
  u8 bEof;                   /* True this expression is at EOF already */bEof145345,5283913
  u8 bStart;                 /* True if iDocid is valid */bStart145346,5283987
  u8 bDeferred;              /* True if this expression is entirely deferred */bDeferred145347,5284046
  int iPhrase;               /* Index of this phrase in matchinfo() results */iPhrase145350,5284188
  u32 *aMI;                  /* See above */aMI145351,5284267
#define FTSQUERY_NEAR FTSQUERY_NEAR145365,5284597
#define FTSQUERY_NOT FTSQUERY_NOT145366,5284623
#define FTSQUERY_AND FTSQUERY_AND145367,5284649
#define FTSQUERY_OR FTSQUERY_OR145368,5284675
#define FTSQUERY_PHRASE FTSQUERY_PHRASE145369,5284701
# define sqlite3Fts3FreeDeferredTokens(sqlite3Fts3FreeDeferredTokens145395,5286074
# define sqlite3Fts3DeferToken(sqlite3Fts3DeferToken145396,5286116
# define sqlite3Fts3CacheDeferredDoclists(sqlite3Fts3CacheDeferredDoclists145397,5286164
# define sqlite3Fts3FreeDeferredDoclists(sqlite3Fts3FreeDeferredDoclists145398,5286219
# define sqlite3Fts3DeferredTokenList(sqlite3Fts3DeferredTokenList145399,5286263
#define FTS3_SEGCURSOR_PENDING FTS3_SEGCURSOR_PENDING145406,5286507
#define FTS3_SEGCURSOR_ALL FTS3_SEGCURSOR_ALL145407,5286548
#define FTS3_SEGMENT_REQUIRE_POS FTS3_SEGMENT_REQUIRE_POS145417,5287042
#define FTS3_SEGMENT_IGNORE_EMPTY FTS3_SEGMENT_IGNORE_EMPTY145418,5287088
#define FTS3_SEGMENT_COLUMN_FILTER FTS3_SEGMENT_COLUMN_FILTER145419,5287134
#define FTS3_SEGMENT_PREFIX FTS3_SEGMENT_PREFIX145420,5287180
#define FTS3_SEGMENT_SCAN FTS3_SEGMENT_SCAN145421,5287226
#define FTS3_SEGMENT_FIRST FTS3_SEGMENT_FIRST145422,5287272
struct Fts3SegFilter {Fts3SegFilter145425,5287379
  const char *zTerm;zTerm145426,5287402
  int nTerm;nTerm145427,5287423
  int iCol;iCol145428,5287436
  int flags;flags145429,5287448
struct Fts3MultiSegReader {Fts3MultiSegReader145432,5287465
  Fts3SegReader **apSegment;      /* Array of Fts3SegReader objects */apSegment145434,5287552
  int nSegment;                   /* Size of apSegment array */nSegment145435,5287623
  int nAdvance;                   /* How many seg-readers to advance */nAdvance145436,5287687
  Fts3SegFilter *pFilter;         /* Pointer to filter object */pFilter145437,5287759
  char *aBuffer;                  /* Buffer to merge doclists in */aBuffer145438,5287824
  int nBuffer;                    /* Allocated size of aBuffer[] in bytes */nBuffer145439,5287892
  int iColFilter;                 /* If >=0, filter for this column */iColFilter145441,5287970
  int bRestart;bRestart145442,5288041
  int nCost;                      /* Cost of running iterator */nCost145445,5288087
  int bLookup;                    /* True if a lookup of a single entry. */bLookup145446,5288152
  char *zTerm;                    /* Pointer to term buffer */zTerm145449,5288309
  int nTerm;                      /* Size of zTerm in bytes */nTerm145450,5288372
  char *aDoclist;                 /* Pointer to doclist buffer */aDoclist145451,5288435
  int nDoclist;                   /* Size of aDoclist[] in bytes */nDoclist145452,5288501
#define fts3GetVarint32(fts3GetVarint32145457,5288635
# define SQLITE_CORE SQLITE_CORE145535,5292071
SQLITE_PRIVATE int sqlite3Fts3Always(int b) { assert( b ); return b; }sqlite3Fts3Always145558,5292612
SQLITE_PRIVATE int sqlite3Fts3Never(int b)  { assert( !b ); return b; }sqlite3Fts3Never145559,5292683
SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){sqlite3Fts3PutVarint145568,5292967
#define GETVARINT_STEP(GETVARINT_STEP145580,5293342
#define GETVARINT_INIT(GETVARINT_INIT145583,5293517
SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *pBuf, sqlite_int64 *v){sqlite3Fts3GetVarint145592,5293852
SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){sqlite3Fts3GetVarint32145618,5294578
SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){sqlite3Fts3VarintLen145639,5295103
SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){sqlite3Fts3Dequote145662,5295599
static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){fts3GetDeltaVarint145691,5296451
static void fts3GetReverseVarint(fts3GetReverseVarint145706,5296963
static int fts3DisconnectMethod(sqlite3_vtab *pVtab){fts3DisconnectMethod145728,5297428
SQLITE_PRIVATE void sqlite3Fts3ErrMsg(char **pzErr, const char *zFormat, ...){sqlite3Fts3ErrMsg145756,5298116
static void fts3DbExec(fts3DbExec145771,5298539
static int fts3DestroyMethod(sqlite3_vtab *pVtab){fts3DestroyMethod145794,5299085
static void fts3DeclareVtab(int *pRc, Fts3Table *p){fts3DeclareVtab145826,5300421
SQLITE_PRIVATE void sqlite3Fts3CreateStatTable(int *pRc, Fts3Table *p){sqlite3Fts3CreateStatTable145863,5301607
static int fts3CreateTables(Fts3Table *p){fts3CreateTables145881,5302245
static void fts3DatabasePageSize(int *pRc, Fts3Table *p){fts3DatabasePageSize145946,5304221
static int fts3IsSpecialColumn(fts3IsSpecialColumn145980,5305240
static void fts3Appendf(fts3Appendf146005,5305676
static char *fts3QuoteId(char const *zInput){fts3QuoteId146038,5306671
static char *fts3ReadExprList(Fts3Table *p, const char *zFunc, int *pRc){fts3ReadExprList146080,5308129
static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){fts3WriteExprList146137,5310004
static int fts3GobbleInt(const char **pp, int *pnOut){fts3GobbleInt146172,5310990
static int fts3PrefixParameter(fts3PrefixParameter146207,5312279
static int fts3ContentColumns(fts3ContentColumns146276,5314558
static int fts3InitVtab(fts3InitVtab146351,5317075
static int fts3ConnectMethod(fts3ConnectMethod146730,5329742
static int fts3CreateMethod(fts3CreateMethod146740,5330262
static void fts3SetEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){fts3SetEstimatedRows146756,5330989
static void fts3SetUniqueFlag(sqlite3_index_info *pIdxInfo){fts3SetUniqueFlag146769,5331412
static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){fts3BestIndexMethod146785,5331907
static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts3OpenMethod146910,5336148
static void fts3CursorFinalizeStmt(Fts3Cursor *pCsr){fts3CursorFinalizeStmt146934,5336946
static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){fts3CloseMethod146951,5337397
static int fts3CursorSeekStmt(Fts3Cursor *pCsr){fts3CursorSeekStmt146973,5338163
static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){fts3CursorSeek146997,5338855
static int fts3ScanInteriorNode(fts3ScanInteriorNode147040,5340372
static int fts3SelectLeaf(fts3SelectLeaf147161,5345247
static void fts3PutDeltaVarint(fts3PutDeltaVarint147209,5346952
static void fts3PoslistCopy(char **pp, char **ppPoslist){fts3PoslistCopy147233,5347978
static void fts3ColumnlistCopy(char **pp, char **ppPoslist){fts3ColumnlistCopy147280,5349706
#define POSITION_LIST_END POSITION_LIST_END147305,5350316
static void fts3ReadNextPos(fts3ReadNextPos147325,5351244
static int fts3PutColNumber(char **pp, int iCol){fts3PutColNumber147346,5351891
static void fts3PoslistMerge(fts3PoslistMerge147364,5352502
static int fts3PoslistPhraseMerge(fts3PoslistPhraseMerge147454,5355647
static int fts3PoslistNearMerge(fts3PoslistNearMerge147578,5359223
typedef struct TermSelect TermSelect;TermSelect147617,5360381
struct TermSelect {TermSelect147618,5360419
  char *aaOutput[16];             /* Malloc'd output buffers */aaOutput147619,5360439
  int anOutput[16];               /* Size each output buffer in bytes */anOutput147620,5360503
static void fts3GetDeltaVarint3(fts3GetDeltaVarint3147636,5361203
static void fts3PutDeltaVarint3(fts3PutDeltaVarint3147670,5362292
#define DOCID_CMP(DOCID_CMP147700,5363349
static int fts3DoclistOrMerge(fts3DoclistOrMerge147716,5364057
static int fts3DoclistPhraseMerge(fts3DoclistPhraseMerge147808,5367706
SQLITE_PRIVATE int sqlite3Fts3FirstFilter(sqlite3Fts3FirstFilter147879,5369861
static int fts3TermSelectFinishMerge(Fts3Table *p, TermSelect *pTS){fts3TermSelectFinishMerge147931,5371340
static int fts3TermSelectMerge(fts3TermSelectMerge147985,5372873
static int fts3SegReaderCursorAppend(fts3SegReaderCursorAppend148057,5375359
static int fts3SegReaderCursor(fts3SegReaderCursor148082,5376019
SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor(sqlite3Fts3SegReaderCursor148156,5379025
static int fts3SegReaderCursorAddZero(fts3SegReaderCursorAddZero148188,5380341
static int fts3TermSegReaderCursor(fts3TermSegReaderCursor148213,5381350
static void fts3SegReaderCursorFree(Fts3MultiSegReader *pSegcsr){fts3SegReaderCursorFree148270,5383124
static int fts3TermSelect(fts3TermSelect148279,5383364
static int fts3DoclistCountDocids(char *aList, int nList){fts3DoclistCountDocids148336,5385322
static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){fts3NextMethod148362,5386260
# define LARGEST_INT64 LARGEST_INT64148388,5387041
# define SMALLEST_INT64 SMALLEST_INT64148389,5387112
static sqlite3_int64 fts3DocidRange(sqlite3_value *pVal, i64 iDefault){fts3DocidRange148397,5387361
static int fts3FilterMethod(fts3FilterMethod148423,5388195
static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){fts3EofMethod148540,5392157
static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){fts3RowidMethod148550,5392504
static int fts3ColumnMethod(fts3ColumnMethod148567,5393063
static int fts3UpdateMethod(fts3UpdateMethod148617,5394934
static int fts3SyncMethod(sqlite3_vtab *pVtab){fts3SyncMethod148630,5395406
static int fts3SetHasStat(Fts3Table *p){fts3SetHasStat148682,5397638
static int fts3BeginMethod(sqlite3_vtab *pVtab){fts3BeginMethod148706,5398290
static int fts3CommitMethod(sqlite3_vtab *pVtab){fts3CommitMethod148723,5398796
static int fts3RollbackMethod(sqlite3_vtab *pVtab){fts3RollbackMethod148738,5399264
static void fts3ReversePoslist(char *pStart, char **ppPoslist){fts3ReversePoslist148753,5399768
static int fts3FunctionArg(fts3FunctionArg148796,5401439
static void fts3SnippetFunc(fts3SnippetFunc148819,5402187
static void fts3OffsetsFunc(fts3OffsetsFunc148862,5403743
static void fts3OptimizeFunc(fts3OptimizeFunc148888,5404534
static void fts3MatchinfoFunc(fts3MatchinfoFunc148922,5405541
static int fts3FindFunctionMethod(fts3FindFunctionMethod148942,5406203
static int fts3RenameMethod(fts3RenameMethod148978,5407277
static int fts3SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){fts3SavepointMethod149036,5408948
static int fts3ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){fts3ReleaseMethod149053,5409400
static int fts3RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){fts3RollbackToMethod149068,5409804
static const sqlite3_module fts3Module = {fts3Module149078,5410115
static void hashDestroy(void *p){hashDestroy149109,5411269
SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){sqlite3Fts3Init149140,5412584
static void fts3EvalAllocateReaders(fts3EvalAllocateReaders149250,5415999
static int fts3EvalPhraseMergeToken(fts3EvalPhraseMergeToken149292,5417556
static int fts3EvalPhraseLoad(fts3EvalPhraseLoad149356,5419169
static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){fts3EvalDeferredPhrase149392,5420371
#define MAX_INCR_PHRASE_TOKENS MAX_INCR_PHRASE_TOKENS149490,5423133
static int fts3EvalPhraseStart(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p){fts3EvalPhraseStart149504,5423719
SQLITE_PRIVATE void sqlite3Fts3DoclistPrev(sqlite3Fts3DoclistPrev149561,5425835
SQLITE_PRIVATE void sqlite3Fts3DoclistNext(sqlite3Fts3DoclistNext149617,5427394
static void fts3EvalDlPhraseNext(fts3EvalDlPhraseNext149654,5428474
typedef struct TokenDoclist TokenDoclist;TokenDoclist149700,5429851
struct TokenDoclist {TokenDoclist149701,5429893
  int bIgnore;bIgnore149702,5429915
  sqlite3_int64 iDocid;iDocid149703,5429930
  char *pList;pList149704,5429954
  int nList;nList149705,5429969
static int incrPhraseTokenNext(incrPhraseTokenNext149717,5430358
static int fts3EvalIncrPhraseNext(fts3EvalIncrPhraseNext149769,5432071
static int fts3EvalPhraseNext(fts3EvalPhraseNext149869,5435412
static void fts3EvalStartReaders(fts3EvalStartReaders149908,5436873
typedef struct Fts3TokenAndCost Fts3TokenAndCost;Fts3TokenAndCost149944,5438268
struct Fts3TokenAndCost {Fts3TokenAndCost149945,5438318
  Fts3Phrase *pPhrase;            /* The phrase the token belongs to */pPhrase149946,5438344
  int iToken;                     /* Position of token in phrase */iToken149947,5438416
  Fts3PhraseToken *pToken;        /* The token itself */pToken149948,5438484
  Fts3Expr *pRoot;                /* Root of NEAR/AND cluster */pRoot149949,5438541
  int nOvfl;                      /* Number of overflow pages to load doclist */nOvfl149950,5438606
  int iCol;                       /* The column the token must match */iCol149951,5438687
static void fts3EvalTokenCosts(fts3EvalTokenCosts149961,5439010
static int fts3EvalAverageDocsize(Fts3Cursor *pCsr, int *pnPage){fts3EvalAverageDocsize150015,5441070
static int fts3EvalSelectDeferred(fts3EvalSelectDeferred150076,5443143
static int fts3EvalStart(Fts3Cursor *pCsr){fts3EvalStart150209,5448538
static void fts3EvalInvalidatePoslist(Fts3Phrase *pPhrase){fts3EvalInvalidatePoslist150259,5449864
static int fts3EvalNearTrim(fts3EvalNearTrim150290,5451098
static void fts3EvalNextRow(fts3EvalNextRow150364,5454313
static int fts3EvalNearTest(Fts3Expr *pExpr, int *pRc){fts3EvalNearTest150505,5459465
static int fts3EvalTestExpr(fts3EvalTestExpr150591,5462335
SQLITE_PRIVATE int sqlite3Fts3EvalTestDeferred(Fts3Cursor *pCsr, int *pRc){sqlite3Fts3EvalTestDeferred150702,5466101
static int fts3EvalNext(Fts3Cursor *pCsr){fts3EvalNext150732,5467071
static void fts3EvalRestart(fts3EvalRestart150773,5468383
static void fts3EvalUpdateCounts(Fts3Expr *pExpr){fts3EvalUpdateCounts150816,5469627
static int fts3EvalGatherStats(fts3EvalGatherStats150859,5470948
SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats(sqlite3Fts3EvalPhraseStats150970,5474738
SQLITE_PRIVATE int sqlite3Fts3EvalPhrasePoslist(sqlite3Fts3EvalPhrasePoslist151018,5476406
SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *pPhrase){sqlite3Fts3EvalPhraseCleanup151152,5480789
SQLITE_PRIVATE int sqlite3Fts3Corrupt(){sqlite3Fts3Corrupt151170,5481230
__declspec(dllexport)__declspec151180,5481394
typedef struct Fts3auxTable Fts3auxTable;Fts3auxTable151215,5482287
typedef struct Fts3auxCursor Fts3auxCursor;Fts3auxCursor151216,5482329
struct Fts3auxTable {Fts3auxTable151218,5482374
  sqlite3_vtab base;              /* Base class used by SQLite core */base151219,5482396
  Fts3Table *pFts3Tab;pFts3Tab151220,5482467
struct Fts3auxCursor {Fts3auxCursor151223,5482494
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base151224,5482517
  Fts3MultiSegReader csr;        /* Must be right after "base" */csr151225,5482588
  Fts3SegFilter filter;filter151226,5482654
  char *zStop;zStop151227,5482678
  int nStop;                      /* Byte-length of string zStop */nStop151228,5482693
  int iLangid;                    /* Language id to query */iLangid151229,5482761
  int isEof;                      /* True if cursor is at EOF */isEof151230,5482822
  sqlite3_int64 iRowid;           /* Current rowid */iRowid151231,5482887
  int iCol;                       /* Current value of 'col' column */iCol151233,5482942
  int nStat;                      /* Size of aStat[] array */nStat151234,5483012
  struct Fts3auxColstats {Fts3auxColstats151235,5483074
    sqlite3_int64 nDoc;           /* 'documents' values for current csr row */nDoc151236,5483101
    sqlite3_int64 nOcc;           /* 'occurrences' values for current csr row */nOcc151237,5483180
  } *aStat;aStat151238,5483261
#define FTS3_AUX_SCHEMA FTS3_AUX_SCHEMA151244,5483313
static int fts3auxConnectMethod(fts3auxConnectMethod151252,5483614
static int fts3auxDisconnectMethod(sqlite3_vtab *pVtab){fts3auxDisconnectMethod151323,5486043
#define FTS4AUX_EQ_CONSTRAINT FTS4AUX_EQ_CONSTRAINT151337,5486397
#define FTS4AUX_GE_CONSTRAINT FTS4AUX_GE_CONSTRAINT151338,5486429
#define FTS4AUX_LE_CONSTRAINT FTS4AUX_LE_CONSTRAINT151339,5486461
static int fts3auxBestIndexMethod(fts3auxBestIndexMethod151344,5486553
static int fts3auxOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts3auxOpenMethod151414,5488426
static int fts3auxCloseMethod(sqlite3_vtab_cursor *pCursor){fts3auxCloseMethod151430,5488850
static int fts3auxGrowStatArray(Fts3auxCursor *pCsr, int nSize){fts3auxGrowStatArray151443,5489251
static int fts3auxNextMethod(sqlite3_vtab_cursor *pCursor){fts3auxNextMethod151462,5489779
static int fts3auxFilterMethod(fts3auxFilterMethod151556,5492524
static int fts3auxEofMethod(sqlite3_vtab_cursor *pCursor){fts3auxEofMethod151651,5495751
static int fts3auxColumnMethod(fts3auxColumnMethod151659,5495927
static int fts3auxRowidMethod(fts3auxRowidMethod151700,5496976
SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db){sqlite3Fts3InitAux151713,5497387
SQLITE_API int sqlite3_fts3_enable_parentheses = 0;sqlite3_fts3_enable_parentheses151815,5501498
#  define sqlite3_fts3_enable_parentheses sqlite3_fts3_enable_parentheses151818,5501596
#  define sqlite3_fts3_enable_parentheses sqlite3_fts3_enable_parentheses151820,5501647
#define SQLITE_FTS3_DEFAULT_NEAR_PARAM SQLITE_FTS3_DEFAULT_NEAR_PARAM151827,5501749
typedef struct ParseContext ParseContext;ParseContext151840,5502168
struct ParseContext {ParseContext151841,5502210
  sqlite3_tokenizer *pTokenizer;      /* Tokenizer module */pTokenizer151842,5502232
  int iLangid;                        /* Language id used with tokenizer */iLangid151843,5502293
  const char **azCol;                 /* Array of column names for fts3 table */azCol151844,5502369
  int bFts4;                          /* True to allow FTS4-only syntax */bFts4151845,5502450
  int nCol;                           /* Number of entries in azCol[] */nCol151846,5502525
  int iDefaultCol;                    /* Default column to query */iDefaultCol151847,5502598
  int isNot;                          /* True if getNextNode() sees a unary - */isNot151848,5502666
  sqlite3_context *pCtx;              /* Write error message here */pCtx151849,5502747
  int nNest;                          /* Number of nested brackets */nNest151850,5502816
static int fts3isspace(char c){fts3isspace151864,5503436
static void *fts3MallocZero(int nByte){fts3MallocZero151873,5503709
SQLITE_PRIVATE int sqlite3Fts3OpenTokenizer(sqlite3Fts3OpenTokenizer151879,5503842
static int getNextToken(getNextToken151924,5505286
static void *fts3ReallocOrFree(void *pOrig, int nNew){fts3ReallocOrFree152003,5507735
static int getNextString(getNextString152023,5508470
static int getNextNode(getNextNode152141,5512254
static int opPrecedence(Fts3Expr *p){opPrecedence152307,5517753
static void insertBinaryOperator(insertBinaryOperator152328,5518507
static int fts3ExprParse(fts3ExprParse152359,5519635
static int fts3ExprCheckDepth(Fts3Expr *p, int nMaxDepth){fts3ExprCheckDepth152508,5524048
static int fts3ExprBalance(Fts3Expr **pp, int nMaxDepth){fts3ExprBalance152534,5524798
static int fts3ExprParseUnbalanced(fts3ExprParseUnbalanced152708,5529982
SQLITE_PRIVATE int sqlite3Fts3ExprParse(sqlite3Fts3ExprParse152771,5532520
static void fts3FreeExprNode(Fts3Expr *p){fts3FreeExprNode152815,5534088
SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *pDel){sqlite3Fts3ExprFree152829,5534540
static int queryTestTokenizer(queryTestTokenizer152862,5535521
static char *exprToString(Fts3Expr *pExpr, char *zBuf){exprToString152897,5536555
static void fts3ExprTest(fts3ExprTest152954,5538327
SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){sqlite3Fts3ExprInitTestInterface153044,5540659
static void *fts3HashMalloc(int n){fts3HashMalloc153098,5542322
static void fts3HashFree(void *p){fts3HashFree153105,5542439
SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){sqlite3Fts3HashInit153119,5542964
SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){sqlite3Fts3HashClear153134,5543431
static int fts3StrHash(const void *pKey, int nKey){fts3StrHash153157,5543956
static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){fts3StrCompare153167,5544203
static int fts3BinHash(const void *pKey, int nKey){fts3BinHash153175,5544445
static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){fts3BinCompare153183,5544631
static int (*ftsHashFunction(int keyClass))(const void*,int){ftsHashFunction153200,5545346
static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){ftsCompareFunction153215,5545761
static void fts3HashInsertElement(fts3HashInsertElement153226,5546034
static int fts3Rehash(Fts3Hash *pH, int new_size){fts3Rehash153256,5546943
static Fts3HashElem *fts3FindElementByHash(fts3FindElementByHash153280,5547865
static void fts3RemoveElementByHash(fts3RemoveElementByHash153308,5548753
SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem(sqlite3Fts3HashFindElem153342,5549531
SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){sqlite3Fts3HashFind153363,5550179
SQLITE_PRIVATE void *sqlite3Fts3HashInsert(sqlite3Fts3HashInsert153385,5551084
typedef struct porter_tokenizer {porter_tokenizer153484,5554103
  sqlite3_tokenizer base;      /* Base class */base153485,5554137
} porter_tokenizer;porter_tokenizer153486,5554185
typedef struct porter_tokenizer_cursor {porter_tokenizer_cursor153491,5554259
  sqlite3_tokenizer_cursor base;base153492,5554300
  const char *zInput;          /* input we are tokenizing */zInput153493,5554333
  int nInput;                  /* size of the input */nInput153494,5554394
  int iOffset;                 /* current position in zInput */iOffset153495,5554449
  int iToken;                  /* index of next token to be returned */iToken153496,5554513
  char *zToken;                /* storage for current token */zToken153497,5554585
  int nAllocated;              /* space allocated to zToken buffer */nAllocated153498,5554648
} porter_tokenizer_cursor;porter_tokenizer_cursor153499,5554718
static int porterCreate(porterCreate153505,5554789
static int porterDestroy(sqlite3_tokenizer *pTokenizer){porterDestroy153524,5555165
static int porterOpen(porterOpen153535,5555478
static int porterClose(sqlite3_tokenizer_cursor *pCursor){porterClose153568,5556345
static const char cType[] = {cType153577,5556568
static int isConsonant(const char *z){isConsonant153596,5557193
static int isVowel(const char *z){isVowel153605,5557389
static int m_gt_0(const char *z){m_gt_0153634,5558301
static int m_eq_1(const char *z){m_eq_1153644,5558525
static int m_gt_1(const char *z){m_gt_1153658,5558859
static int hasVowel(const char *z){hasVowel153672,5559179
static int doubleConsonant(const char *z){doubleConsonant153683,5559426
static int star_oh(const char *z){star_oh153695,5559790
static int stem(stem153715,5560345
static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){copy_stemmer153740,5561225
static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){porter_stemmer153787,5562721
static const char porterIdChar[] = {porterIdChar154026,5568033
#define isDelim(isDelim154034,5568437
static int porterNext(porterNext154040,5568645
static const sqlite3_tokenizer_module porterTokenizerModule = {porterTokenizerModule154088,5570177
SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule(sqlite3Fts3PorterTokenizerModule154102,5570427
static int fts3TokenizerEnabled(sqlite3_context *context){fts3TokenizerEnabled154148,5571922
static void fts3TokenizerFunc(fts3TokenizerFunc154175,5573053
SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){sqlite3Fts3IsIdChar154223,5574314
SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){sqlite3Fts3NextToken154237,5574964
SQLITE_PRIVATE int sqlite3Fts3InitTokenizer(sqlite3Fts3InitTokenizer154274,5575724
static void testFunc(testFunc154370,5578567
int registerTokenizer(registerTokenizer154462,5580749
int queryTokenizer(queryTokenizer154485,5581212
static void intTestFunc(intTestFunc154530,5582561
SQLITE_PRIVATE int sqlite3Fts3InitHashTable(sqlite3Fts3InitHashTable154584,5584326
typedef struct simple_tokenizer {simple_tokenizer154665,5586478
  sqlite3_tokenizer base;base154666,5586512
  char delim[128];             /* flag ASCII delimiters */delim154667,5586538
} simple_tokenizer;simple_tokenizer154668,5586597
typedef struct simple_tokenizer_cursor {simple_tokenizer_cursor154670,5586618
  sqlite3_tokenizer_cursor base;base154671,5586659
  const char *pInput;          /* input we are tokenizing */pInput154672,5586692
  int nBytes;                  /* size of the input */nBytes154673,5586753
  int iOffset;                 /* current position in pInput */iOffset154674,5586808
  int iToken;                  /* index of next token to be returned */iToken154675,5586872
  char *pToken;                /* storage for current token */pToken154676,5586944
  int nTokenAllocated;         /* space allocated to zToken buffer */nTokenAllocated154677,5587007
} simple_tokenizer_cursor;simple_tokenizer_cursor154678,5587077
static int simpleDelim(simple_tokenizer *t, unsigned char c){simpleDelim154681,5587106
static int fts3_isalnum(int x){fts3_isalnum154684,5587202
static int simpleCreate(simpleCreate154691,5587352
static int simpleDestroy(sqlite3_tokenizer *pTokenizer){simpleDestroy154732,5588393
static int simpleOpen(simpleOpen154743,5588706
static int simpleClose(sqlite3_tokenizer_cursor *pCursor){simpleClose154776,5589578
static int simpleNext(simpleNext154787,5589904
static const sqlite3_tokenizer_module simpleTokenizerModule = {simpleTokenizerModule154844,5591753
SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule(sqlite3Fts3SimpleTokenizerModule154858,5592004
typedef struct Fts3tokTable Fts3tokTable;Fts3tokTable154914,5593888
typedef struct Fts3tokCursor Fts3tokCursor;Fts3tokCursor154915,5593930
struct Fts3tokTable {Fts3tokTable154920,5594009
  sqlite3_vtab base;              /* Base class used by SQLite core */base154921,5594031
  const sqlite3_tokenizer_module *pMod;pMod154922,5594102
  sqlite3_tokenizer *pTok;pTok154923,5594142
struct Fts3tokCursor {Fts3tokCursor154929,5594214
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base154930,5594237
  char *zInput;                   /* Input string */zInput154931,5594308
  sqlite3_tokenizer_cursor *pCsr; /* Cursor to iterate through zInput */pCsr154932,5594361
  int iRowid;                     /* Current 'rowid' value */iRowid154933,5594434
  const char *zToken;             /* Current 'token' value */zToken154934,5594496
  int nToken;                     /* Size of zToken in bytes */nToken154935,5594558
  int iStart;                     /* Current 'start' value */iStart154936,5594622
  int iEnd;                       /* Current 'end' value */iEnd154937,5594684
  int iPos;                       /* Current 'pos' value */iPos154938,5594744
static int fts3tokQueryTokenizer(fts3tokQueryTokenizer154944,5594873
static int fts3tokDequoteArray(fts3tokDequoteArray154975,5595880
#define FTS3_TOK_SCHEMA FTS3_TOK_SCHEMA155013,5596772
static int fts3tokConnectMethod(fts3tokConnectMethod155025,5597180
static int fts3tokDisconnectMethod(sqlite3_vtab *pVtab){fts3tokDisconnectMethod155089,5598970
static int fts3tokBestIndexMethod(fts3tokBestIndexMethod155100,5599214
static int fts3tokOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts3tokOpenMethod155129,5599833
static void fts3tokResetCursor(Fts3tokCursor *pCsr){fts3tokResetCursor155147,5600305
static int fts3tokCloseMethod(sqlite3_vtab_cursor *pCursor){fts3tokCloseMethod155166,5600702
static int fts3tokNextMethod(sqlite3_vtab_cursor *pCursor){fts3tokNextMethod155177,5600948
static int fts3tokFilterMethod(fts3tokFilterMethod155199,5601501
static int fts3tokEofMethod(sqlite3_vtab_cursor *pCursor){fts3tokEofMethod155236,5602693
static int fts3tokColumnMethod(fts3tokColumnMethod155244,5602875
static int fts3tokRowidMethod(fts3tokRowidMethod155276,5603781
SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3 *db, Fts3Hash *pHash){sqlite3Fts3InitTok155289,5604207
#define FTS_MAX_APPENDABLE_HEIGHT FTS_MAX_APPENDABLE_HEIGHT155352,5606800
#define FTS3_NODE_PADDING FTS3_NODE_PADDING155364,5607309
int test_fts3_node_chunksize = (4*1024);test_fts3_node_chunksize155384,5608258
int test_fts3_node_chunk_threshold = (4*1024)*4;test_fts3_node_chunk_threshold155385,5608299
# define FTS3_NODE_CHUNKSIZE FTS3_NODE_CHUNKSIZE155386,5608348
# define FTS3_NODE_CHUNK_THRESHOLD FTS3_NODE_CHUNK_THRESHOLD155387,5608408
# define FTS3_NODE_CHUNKSIZE FTS3_NODE_CHUNKSIZE155389,5608480
# define FTS3_NODE_CHUNK_THRESHOLD FTS3_NODE_CHUNK_THRESHOLD155390,5608519
#define FTS_STAT_DOCTOTAL FTS_STAT_DOCTOTAL155397,5608716
#define FTS_STAT_INCRMERGEHINT FTS_STAT_INCRMERGEHINT155398,5608749
#define FTS_STAT_AUTOINCRMERGE FTS_STAT_AUTOINCRMERGE155399,5608782
static void fts3LogMerge(int nMerge, sqlite3_int64 iAbsLevel){fts3LogMerge155408,5609077
#define fts3LogMerge(fts3LogMerge155412,5609228
typedef struct PendingList PendingList;PendingList155416,5609264
typedef struct SegmentNode SegmentNode;SegmentNode155417,5609304
typedef struct SegmentWriter SegmentWriter;SegmentWriter155418,5609344
struct PendingList {PendingList155424,5609536
  int nData;nData155425,5609557
  char *aData;aData155426,5609570
  int nSpace;nSpace155427,5609585
  sqlite3_int64 iLastDocid;iLastDocid155428,5609599
  sqlite3_int64 iLastCol;iLastCol155429,5609627
  sqlite3_int64 iLastPos;iLastPos155430,5609653
struct Fts3DeferredToken {Fts3DeferredToken155437,5609766
  Fts3PhraseToken *pToken;        /* Pointer to corresponding expr token */pToken155438,5609793
  int iCol;                       /* Column token must occur in */iCol155439,5609869
  Fts3DeferredToken *pNext;       /* Next in list of deferred tokens */pNext155440,5609936
  PendingList *pList;             /* Doclist is assembled here */pList155441,5610008
struct Fts3SegReader {Fts3SegReader155461,5610692
  int iIdx;                       /* Index within level, or 0x7FFFFFFF for PT */iIdx155462,5610715
  u8 bLookup;                     /* True for a lookup only */bLookup155463,5610796
  u8 rootOnly;                    /* True for a root-only reader */rootOnly155464,5610859
  sqlite3_int64 iStartBlock;      /* Rowid of first leaf block to traverse */iStartBlock155466,5610928
  sqlite3_int64 iLeafEndBlock;    /* Rowid of final leaf block to traverse */iLeafEndBlock155467,5611006
  sqlite3_int64 iEndBlock;        /* Rowid of final block in segment (or 0) */iEndBlock155468,5611084
  sqlite3_int64 iCurrentBlock;    /* Current leaf block (or 0) */iCurrentBlock155469,5611163
  char *aNode;                    /* Pointer to node data (or NULL) */aNode155471,5611230
  int nNode;                      /* Size of buffer at aNode (or 0) */nNode155472,5611301
  int nPopulate;                  /* If >0, bytes of buffer aNode[] loaded */nPopulate155473,5611372
  sqlite3_blob *pBlob;            /* If not NULL, blob handle to read node */pBlob155474,5611450
  Fts3HashElem **ppNextElem;ppNextElem155476,5611529
  int nTerm;                      /* Number of bytes in current term */nTerm155483,5611805
  char *zTerm;                    /* Pointer to current term */zTerm155484,5611877
  int nTermAlloc;                 /* Allocated size of zTerm buffer */nTermAlloc155485,5611941
  char *aDoclist;                 /* Pointer to doclist of current entry */aDoclist155486,5612012
  int nDoclist;                   /* Size of doclist in current entry */nDoclist155487,5612088
  char *pOffsetList;pOffsetList155492,5612299
  int nOffsetList;                /* For descending pending seg-readers only */nOffsetList155493,5612320
  sqlite3_int64 iDocid;iDocid155494,5612400
#define fts3SegReaderIsPending(fts3SegReaderIsPending155497,5612428
#define fts3SegReaderIsRootOnly(fts3SegReaderIsRootOnly155498,5612483
struct SegmentWriter {SegmentWriter155509,5612793
  SegmentNode *pTree;             /* Pointer to interior tree structure */pTree155510,5612816
  sqlite3_int64 iFirst;           /* First slot in %_segments written */iFirst155511,5612891
  sqlite3_int64 iFree;            /* Next free slot in %_segments */iFree155512,5612964
  char *zTerm;                    /* Pointer to previous term buffer */zTerm155513,5613033
  int nTerm;                      /* Number of bytes in zTerm */nTerm155514,5613105
  int nMalloc;                    /* Size of malloc'd buffer at zMalloc */nMalloc155515,5613170
  char *zMalloc;                  /* Malloc'd space (possibly) used for zTerm */zMalloc155516,5613245
  int nSize;                      /* Size of allocation at aData */nSize155517,5613326
  int nData;                      /* Bytes of data in aData */nData155518,5613394
  char *aData;                    /* Pointer to block from malloc() */aData155519,5613457
  i64 nLeafData;                  /* Number of bytes of leaf data written */nLeafData155520,5613528
struct SegmentNode {SegmentNode155541,5614441
  SegmentNode *pParent;           /* Parent node (or NULL for root node) */pParent155542,5614462
  SegmentNode *pRight;            /* Pointer to right-sibling */pRight155543,5614538
  SegmentNode *pLeftmost;         /* Pointer to left-most node of this depth */pLeftmost155544,5614603
  int nEntry;                     /* Number of terms written to node so far */nEntry155545,5614683
  char *zTerm;                    /* Pointer to previous term buffer */zTerm155546,5614762
  int nTerm;                      /* Number of bytes in zTerm */nTerm155547,5614834
  int nMalloc;                    /* Size of malloc'd buffer at zMalloc */nMalloc155548,5614899
  char *zMalloc;                  /* Malloc'd space (possibly) used for zTerm */zMalloc155549,5614974
  int nData;                      /* Bytes of valid data so far */nData155550,5615055
  char *aData;                    /* Node data */aData155551,5615122
#define SQL_DELETE_CONTENT SQL_DELETE_CONTENT155557,5615240
#define SQL_IS_EMPTY SQL_IS_EMPTY155558,5615281
#define SQL_DELETE_ALL_CONTENT SQL_DELETE_ALL_CONTENT155559,5615322
#define SQL_DELETE_ALL_SEGMENTS SQL_DELETE_ALL_SEGMENTS155560,5615364
#define SQL_DELETE_ALL_SEGDIR SQL_DELETE_ALL_SEGDIR155561,5615405
#define SQL_DELETE_ALL_DOCSIZE SQL_DELETE_ALL_DOCSIZE155562,5615446
#define SQL_DELETE_ALL_STAT SQL_DELETE_ALL_STAT155563,5615487
#define SQL_SELECT_CONTENT_BY_ROWID SQL_SELECT_CONTENT_BY_ROWID155564,5615528
#define SQL_NEXT_SEGMENT_INDEX SQL_NEXT_SEGMENT_INDEX155565,5615569
#define SQL_INSERT_SEGMENTS SQL_INSERT_SEGMENTS155566,5615610
#define SQL_NEXT_SEGMENTS_ID SQL_NEXT_SEGMENTS_ID155567,5615651
#define SQL_INSERT_SEGDIR SQL_INSERT_SEGDIR155568,5615692
#define SQL_SELECT_LEVEL SQL_SELECT_LEVEL155569,5615733
#define SQL_SELECT_LEVEL_RANGE SQL_SELECT_LEVEL_RANGE155570,5615774
#define SQL_SELECT_LEVEL_COUNT SQL_SELECT_LEVEL_COUNT155571,5615815
#define SQL_SELECT_SEGDIR_MAX_LEVEL SQL_SELECT_SEGDIR_MAX_LEVEL155572,5615856
#define SQL_DELETE_SEGDIR_LEVEL SQL_DELETE_SEGDIR_LEVEL155573,5615897
#define SQL_DELETE_SEGMENTS_RANGE SQL_DELETE_SEGMENTS_RANGE155574,5615938
#define SQL_CONTENT_INSERT SQL_CONTENT_INSERT155575,5615979
#define SQL_DELETE_DOCSIZE SQL_DELETE_DOCSIZE155576,5616020
#define SQL_REPLACE_DOCSIZE SQL_REPLACE_DOCSIZE155577,5616061
#define SQL_SELECT_DOCSIZE SQL_SELECT_DOCSIZE155578,5616102
#define SQL_SELECT_STAT SQL_SELECT_STAT155579,5616143
#define SQL_REPLACE_STAT SQL_REPLACE_STAT155580,5616184
#define SQL_SELECT_ALL_PREFIX_LEVEL SQL_SELECT_ALL_PREFIX_LEVEL155582,5616226
#define SQL_DELETE_ALL_TERMS_SEGDIR SQL_DELETE_ALL_TERMS_SEGDIR155583,5616267
#define SQL_DELETE_SEGDIR_RANGE SQL_DELETE_SEGDIR_RANGE155584,5616308
#define SQL_SELECT_ALL_LANGID SQL_SELECT_ALL_LANGID155585,5616349
#define SQL_FIND_MERGE_LEVEL SQL_FIND_MERGE_LEVEL155586,5616390
#define SQL_MAX_LEAF_NODE_ESTIMATE SQL_MAX_LEAF_NODE_ESTIMATE155587,5616431
#define SQL_DELETE_SEGDIR_ENTRY SQL_DELETE_SEGDIR_ENTRY155588,5616472
#define SQL_SHIFT_SEGDIR_ENTRY SQL_SHIFT_SEGDIR_ENTRY155589,5616513
#define SQL_SELECT_SEGDIR SQL_SELECT_SEGDIR155590,5616554
#define SQL_CHOMP_SEGDIR SQL_CHOMP_SEGDIR155591,5616595
#define SQL_SEGMENT_IS_APPENDABLE SQL_SEGMENT_IS_APPENDABLE155592,5616636
#define SQL_SELECT_INDEXES SQL_SELECT_INDEXES155593,5616677
#define SQL_SELECT_MXLEVEL SQL_SELECT_MXLEVEL155594,5616718
#define SQL_SELECT_LEVEL_RANGE2 SQL_SELECT_LEVEL_RANGE2155596,5616760
#define SQL_UPDATE_LEVEL_IDX SQL_UPDATE_LEVEL_IDX155597,5616801
#define SQL_UPDATE_LEVEL SQL_UPDATE_LEVEL155598,5616842
static int fts3SqlStmt(fts3SqlStmt155611,5617397
static int fts3SelectDocsize(fts3SelectDocsize155752,5623191
SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal(sqlite3Fts3SelectDoctotal155777,5623955
SQLITE_PRIVATE int sqlite3Fts3SelectDocsize(sqlite3Fts3SelectDocsize155798,5624531
static void fts3SqlExec(fts3SqlExec155814,5625089
static int fts3Writelock(Fts3Table *p){fts3Writelock155846,5626264
static sqlite3_int64 getAbsoluteLevel(getAbsoluteLevel155885,5627826
SQLITE_PRIVATE int sqlite3Fts3AllSegdirs(sqlite3Fts3AllSegdirs155917,5628893
static int fts3PendingListAppendVarint(fts3PendingListAppendVarint155964,5630487
static int fts3PendingListAppend(fts3PendingListAppend156008,5631746
static void fts3PendingListDelete(PendingList *pList){fts3PendingListDelete156063,5633228
static int fts3PendingTermsAddOne(fts3PendingTermsAddOne156070,5633372
static int fts3PendingTermsAdd(fts3PendingTermsAdd156108,5634559
static int fts3PendingTermsDocid(fts3PendingTermsDocid156186,5636889
SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){sqlite3Fts3PendingTermsClear156218,5637982
static int fts3InsertTerms(fts3InsertTerms156240,5638705
static int fts3InsertData(fts3InsertData156275,5639839
static int fts3DeleteAll(Fts3Table *p, int bContent){fts3DeleteAll156349,5642220
static int langidFromSelect(Fts3Table *p, sqlite3_stmt *pSelect){langidFromSelect156373,5642923
static void fts3DeleteTerms( fts3DeleteTerms156384,5643277
static int fts3AllocateSegdirIdx(fts3AllocateSegdirIdx156446,5645372
SQLITE_PRIVATE int sqlite3Fts3ReadBlock(sqlite3Fts3ReadBlock156517,5648211
SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){sqlite3Fts3SegmentsClose156571,5649857
static int fts3SegReaderIncrRead(Fts3SegReader *pReader){fts3SegReaderIncrRead156576,5649980
static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){fts3SegReaderRequire156600,5650661
static void fts3SegReaderSetEof(Fts3SegReader *pSeg){fts3SegReaderSetEof156616,5651094
static int fts3SegReaderNext(fts3SegReaderNext156630,5651508
static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){fts3SegReaderFirstDocid156742,5655102
static int fts3SegReaderNextDocid(fts3SegReaderNextDocid156774,5656260
SQLITE_PRIVATE int sqlite3Fts3MsrOvfl(sqlite3Fts3MsrOvfl156863,5659157
SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){sqlite3Fts3SegReaderFree156901,5660052
SQLITE_PRIVATE int sqlite3Fts3SegReaderNew(sqlite3Fts3SegReaderNew156917,5660426
static int SQLITE_CDECL fts3CompareElemByTerm(fts3CompareElemByTerm156965,5662166
SQLITE_PRIVATE int sqlite3Fts3SegReaderPending(sqlite3Fts3SegReaderPending157001,5663305
static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){fts3SegReaderCmp157097,5666478
static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){fts3SegReaderDoclistCmp157130,5667345
static int fts3SegReaderDoclistCmpRev(Fts3SegReader *pLhs, Fts3SegReader *pRhs){fts3SegReaderDoclistCmpRev157142,5667697
static int fts3SegReaderTermCmp(fts3SegReaderTermCmp157163,5668416
static void fts3SegReaderSort(fts3SegReaderSort157188,5669181
static int fts3WriteSegment(fts3WriteSegment157221,5670138
SQLITE_PRIVATE int sqlite3Fts3MaxLevel(Fts3Table *p, int *pnMax){sqlite3Fts3MaxLevel157243,5670930
static int fts3WriteSegdir(fts3WriteSegdir157262,5671347
static int fts3PrefixCompress(fts3PrefixCompress157302,5672977
static int fts3NodeAddTerm(fts3NodeAddTerm157318,5673521
static int fts3TreeFinishNode(fts3TreeFinishNode157429,5677335
static int fts3NodeWrite(fts3NodeWrite157455,5678245
static void fts3NodeFree(SegmentNode *pTree){fts3NodeFree157499,5679765
static int fts3SegWriterAdd(fts3SegWriterAdd157524,5680532
static int fts3SegWriterFlush(fts3SegWriterFlush157666,5685965
static void fts3SegWriterFree(SegmentWriter *pWriter){fts3SegWriterFree157702,5687402
static int fts3IsEmpty(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty){fts3IsEmpty157721,5688095
static int fts3SegmentMaxLevel(fts3SegmentMaxLevel157748,5688831
static int fts3SegmentIsMaxLevel(Fts3Table *p, i64 iAbsLevel, int *pbMax){fts3SegmentIsMaxLevel157784,5690011
static int fts3DeleteSegment(fts3DeleteSegment157812,5690893
static int fts3DeleteSegdir(fts3DeleteSegdir157844,5692019
static void fts3ColumnFilter(fts3ColumnFilter157901,5694013
static int fts3MsrBufferData(fts3MsrBufferData157946,5695185
SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext(sqlite3Fts3MsrIncrNext157963,5695583
static int fts3SegReaderStart(fts3SegReaderStart158031,5697406
SQLITE_PRIVATE int sqlite3Fts3SegReaderStart(sqlite3Fts3SegReaderStart158063,5698537
SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart(sqlite3Fts3MsrIncrStart158072,5698876
SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr){sqlite3Fts3MsrIncrRestart158127,5700683
SQLITE_PRIVATE int sqlite3Fts3SegReaderStep(sqlite3Fts3SegReaderStep158147,5701181
SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish(sqlite3Fts3SegReaderFinish158325,5707044
static void fts3ReadEndBlockField(fts3ReadEndBlockField158352,5707913
static int fts3PromoteSegments(fts3PromoteSegments158385,5708674
static int fts3SegmentMerge(fts3SegmentMerge158487,5712398
SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){sqlite3Fts3PendingTermsFlush158584,5715981
static void fts3EncodeIntArray(fts3EncodeIntArray158620,5717036
static void fts3DecodeIntArray(fts3DecodeIntArray158636,5717462
static void fts3InsertDocsize(fts3InsertDocsize158657,5718058
static void fts3UpdateDocTotals(fts3UpdateDocTotals158701,5719601
static int fts3DoOptimize(Fts3Table *p, int bReturnDone){fts3DoOptimize158776,5721700
static int fts3DoRebuild(Fts3Table *p){fts3DoRebuild158817,5722979
static int fts3IncrmergeCsr(fts3IncrmergeCsr158897,5725197
typedef struct IncrmergeWriter IncrmergeWriter;IncrmergeWriter158941,5726812
typedef struct NodeWriter NodeWriter;NodeWriter158942,5726860
typedef struct Blob Blob;Blob158943,5726898
typedef struct NodeReader NodeReader;NodeReader158944,5726924
struct Blob {Blob158952,5727157
  char *a;                        /* Pointer to allocation */a158953,5727171
  int n;                          /* Number of valid bytes of data in a[] */n158954,5727233
  int nAlloc;                     /* Allocated size of a[] (nAlloc>=n) */nAlloc158955,5727310
struct NodeWriter {NodeWriter158962,5727486
  sqlite3_int64 iBlock;           /* Current block id */iBlock158963,5727506
  Blob key;                       /* Last key written to the current block */key158964,5727563
  Blob block;                     /* Current block image */block158965,5727641
struct IncrmergeWriter {IncrmergeWriter158972,5727821
  int nLeafEst;                   /* Space allocated for leaf blocks */nLeafEst158973,5727846
  int nWork;                      /* Number of leaf pages flushed */nWork158974,5727918
  sqlite3_int64 iAbsLevel;        /* Absolute level of input segments */iAbsLevel158975,5727987
  int iIdx;                       /* Index of *output* segment in iAbsLevel+1 */iIdx158976,5728060
  sqlite3_int64 iStart;           /* Block number of first allocated block */iStart158977,5728141
  sqlite3_int64 iEnd;             /* Block number of last allocated block */iEnd158978,5728219
  sqlite3_int64 nLeafData;        /* Bytes of leaf page data so far */nLeafData158979,5728296
  u8 bNoLeafData;                 /* If true, store 0 for segment size */bNoLeafData158980,5728367
  NodeWriter aNodeWriter[FTS_MAX_APPENDABLE_HEIGHT];aNodeWriter158981,5728441
struct NodeReader {NodeReader158992,5728702
  const char *aNode;aNode158993,5728722
  int nNode;nNode158994,5728743
  int iOff;                       /* Current offset within aNode[] */iOff158995,5728756
  sqlite3_int64 iChild;           /* Pointer to child node */iChild158998,5728888
  Blob term;                      /* Current term */term158999,5728950
  const char *aDoclist;           /* Pointer to doclist */aDoclist159000,5729003
  int nDoclist;                   /* Size of doclist in bytes */nDoclist159001,5729062
static void blobGrowBuffer(Blob *pBlob, int nMin, int *pRc){blobGrowBuffer159013,5729533
static int nodeReaderNext(NodeReader *p){nodeReaderNext159036,5730277
static void nodeReaderRelease(NodeReader *p){nodeReaderRelease159074,5731384
static int nodeReaderInit(NodeReader *p, const char *aNode, int nNode){nodeReaderInit159085,5731716
static int fts3IncrmergePush(fts3IncrmergePush159111,5732554
static int fts3AppendToNode(fts3AppendToNode159212,5736340
static int fts3IncrmergeAppend(fts3IncrmergeAppend159262,5738170
static void fts3IncrmergeRelease(fts3IncrmergeRelease159347,5741285
static int fts3TermCmp(fts3TermCmp159437,5744862
static int fts3IsAppendable(Fts3Table *p, sqlite3_int64 iEnd, int *pbRes){fts3IsAppendable159463,5745652
static int fts3IncrmergeLoad(fts3IncrmergeLoad159494,5746821
static int fts3IncrmergeOutputIdx( fts3IncrmergeOutputIdx159626,5751772
static int fts3IncrmergeWriter( fts3IncrmergeWriter159671,5753410
static int fts3RemoveSegdirEntry(fts3RemoveSegdirEntry159736,5755912
static int fts3RepackSegdirLevel(fts3RepackSegdirLevel159760,5756732
static void fts3StartNode(Blob *pNode, int iHeight, sqlite3_int64 iChild){fts3StartNode159816,5758421
static int fts3TruncateNode(fts3TruncateNode159835,5759092
static int fts3TruncateSegment(fts3TruncateSegment159890,5761026
static int fts3IncrmergeChomp(fts3IncrmergeChomp159975,5764126
static int fts3IncrmergeHintStore(Fts3Table *p, Blob *pHint){fts3IncrmergeHintStore160026,5765698
static int fts3IncrmergeHintLoad(Fts3Table *p, Blob *pHint){fts3IncrmergeHintLoad160049,5766449
static void fts3IncrmergeHintPush(fts3IncrmergeHintPush160085,5767547
static int fts3IncrmergeHintPop(Blob *pHint, i64 *piAbsLevel, int *pnInput){fts3IncrmergeHintPop160106,5768413
SQLITE_PRIVATE int sqlite3Fts3Incrmerge(Fts3Table *p, int nMerge, int nMin){sqlite3Fts3Incrmerge160132,5769229
static int fts3Getint(const char **pz){fts3Getint160287,5775192
static int fts3DoIncrmerge(fts3DoIncrmerge160304,5775663
static int fts3DoAutoincrmerge(fts3DoAutoincrmerge160347,5776690
static u64 fts3ChecksumEntry(fts3ChecksumEntry160375,5777523
static u64 fts3ChecksumIndex(fts3ChecksumIndex160405,5778626
static int fts3IntegrityCheck(Fts3Table *p, int *pbOk){fts3IntegrityCheck160479,5780790
static int fts3DoIntegrityCheck(fts3DoIntegrityCheck160593,5784994
static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){fts3SpecialInsert160611,5785439
SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){sqlite3Fts3FreeDeferredDoclists160651,5786870
SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){sqlite3Fts3FreeDeferredTokens160663,5787210
SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){sqlite3Fts3CacheDeferredDoclists160682,5787809
SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList(sqlite3Fts3DeferredTokenList160735,5789870
SQLITE_PRIVATE int sqlite3Fts3DeferToken(sqlite3Fts3DeferToken160765,5790451
static int fts3DeleteByRowid(fts3DeleteByRowid160793,5791290
SQLITE_PRIVATE int sqlite3Fts3UpdateMethod(sqlite3Fts3UpdateMethod160842,5792722
SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){sqlite3Fts3Optimize160988,5798049
#define FTS3_MATCHINFO_NPHRASE FTS3_MATCHINFO_NPHRASE161031,5799300
#define FTS3_MATCHINFO_NCOL FTS3_MATCHINFO_NCOL161032,5799358
#define FTS3_MATCHINFO_NDOC FTS3_MATCHINFO_NDOC161033,5799416
#define FTS3_MATCHINFO_AVGLENGTH FTS3_MATCHINFO_AVGLENGTH161034,5799474
#define FTS3_MATCHINFO_LENGTH FTS3_MATCHINFO_LENGTH161035,5799536
#define FTS3_MATCHINFO_LCS FTS3_MATCHINFO_LCS161036,5799598
#define FTS3_MATCHINFO_HITS FTS3_MATCHINFO_HITS161037,5799660
#define FTS3_MATCHINFO_LHITS FTS3_MATCHINFO_LHITS161038,5799732
#define FTS3_MATCHINFO_LHITS_BM FTS3_MATCHINFO_LHITS_BM161039,5799802
#define FTS3_MATCHINFO_DEFAULT FTS3_MATCHINFO_DEFAULT161044,5799941
typedef struct LoadDoclistCtx LoadDoclistCtx;LoadDoclistCtx161051,5800093
struct LoadDoclistCtx {LoadDoclistCtx161052,5800139
  Fts3Cursor *pCsr;               /* FTS3 Cursor */pCsr161053,5800163
  int nPhrase;                    /* Number of phrases seen so far */nPhrase161054,5800215
  int nToken;                     /* Number of tokens seen so far */nToken161055,5800285
typedef struct SnippetIter SnippetIter;SnippetIter161062,5800464
typedef struct SnippetPhrase SnippetPhrase;SnippetPhrase161063,5800504
typedef struct SnippetFragment SnippetFragment;SnippetFragment161064,5800548
struct SnippetIter {SnippetIter161066,5800597
  Fts3Cursor *pCsr;               /* Cursor snippet is being generated from */pCsr161067,5800618
  int iCol;                       /* Extract snippet from this column */iCol161068,5800697
  int nSnippet;                   /* Requested snippet length (in tokens) */nSnippet161069,5800770
  int nPhrase;                    /* Number of phrases in query */nPhrase161070,5800847
  SnippetPhrase *aPhrase;         /* Array of size nPhrase */aPhrase161071,5800914
  int iCurrent;                   /* First token of current snippet */iCurrent161072,5800976
struct SnippetPhrase {SnippetPhrase161075,5801051
  int nToken;                     /* Number of tokens in phrase */nToken161076,5801074
  char *pList;                    /* Pointer to start of phrase position list */pList161077,5801141
  int iHead;                      /* Next value in position list */iHead161078,5801222
  char *pHead;                    /* Position list data following iHead */pHead161079,5801290
  int iTail;                      /* Next value in trailing position list */iTail161080,5801365
  char *pTail;                    /* Position list data following iTail */pTail161081,5801442
struct SnippetFragment {SnippetFragment161084,5801521
  int iCol;                       /* Column snippet is extracted from */iCol161085,5801546
  int iPos;                       /* Index of first token in snippet */iPos161086,5801619
  u64 covered;                    /* Mask of query phrases covered */covered161087,5801691
  u64 hlmask;                     /* Mask of snippet terms to highlight */hlmask161088,5801761
typedef struct MatchInfo MatchInfo;MatchInfo161095,5801976
struct MatchInfo {MatchInfo161096,5802012
  Fts3Cursor *pCursor;            /* FTS3 Cursor */pCursor161097,5802031
  int nCol;                       /* Number of columns in table */nCol161098,5802083
  int nPhrase;                    /* Number of matchable phrases in query */nPhrase161099,5802150
  sqlite3_int64 nDoc;             /* Number of docs in database */nDoc161100,5802227
  char flag;flag161101,5802294
  u32 *aMatchinfo;                /* Pre-allocated buffer */aMatchinfo161102,5802307
struct MatchinfoBuffer {MatchinfoBuffer161110,5802544
  u8 aRef[3];aRef161111,5802569
  int nElem;nElem161112,5802583
  int bGlobal;                    /* Set if global data is loaded */bGlobal161113,5802596
  char *zMatchinfo;zMatchinfo161114,5802665
  u32 aMatchinfo[1];aMatchinfo161115,5802685
typedef struct StrBuffer StrBuffer;StrBuffer161124,5802932
struct StrBuffer {StrBuffer161125,5802968
  char *z;                        /* Pointer to buffer containing string */z161126,5802987
  int n;                          /* Length of z in bytes (excl. nul-term) */n161127,5803063
  int nAlloc;                     /* Allocated size of buffer z in bytes */nAlloc161128,5803141
static MatchinfoBuffer *fts3MIBufferNew(int nElem, const char *zMatchinfo){fts3MIBufferNew161139,5803388
static void fts3MIBufferFree(void *p){fts3MIBufferFree161158,5803991
static void (*fts3MIBufferAlloc(MatchinfoBuffer *p, u32 **paOut))(void*){fts3MIBufferAlloc161175,5804396
static void fts3MIBufferSetGlobal(MatchinfoBuffer *p){fts3MIBufferSetGlobal161200,5804970
SQLITE_PRIVATE void sqlite3Fts3MIBufferFree(MatchinfoBuffer *p){sqlite3Fts3MIBufferFree161208,5805198
static void fts3GetDeltaPosition(char **pp, int *piPos){fts3GetDeltaPosition161243,5806249
static int fts3ExprIterate2(fts3ExprIterate2161252,5806441
static int fts3ExprIterate(fts3ExprIterate161284,5807695
static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3ExprLoadDoclistsCb161299,5808257
static int fts3ExprLoadDoclists(fts3ExprLoadDoclists161322,5808962
static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3ExprPhraseCountCb161336,5809528
static int fts3ExprPhraseCount(Fts3Expr *pExpr){fts3ExprPhraseCount161341,5809672
static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){fts3SnippetAdvance161352,5810016
static int fts3SnippetNextCandidate(SnippetIter *pIter){fts3SnippetNextCandidate161374,5810442
static void fts3SnippetDetails(fts3SnippetDetails161420,5811783
static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3SnippetFindPositions161473,5813571
static int fts3BestSnippet(fts3BestSnippet161515,5814929
static int fts3StringAppend(fts3StringAppend161601,5817798
static int fts3SnippetShift(fts3SnippetShift161653,5819658
static int fts3SnippetText(fts3SnippetText161717,5822317
static int fts3ColumnlistCount(char **ppCollist){fts3ColumnlistCount161845,5827897
static void fts3ExprLHits(fts3ExprLHits161863,5828261
static void fts3ExprLHitGather(fts3ExprLHitGather161899,5829335
static int fts3ExprGlobalHitsCb(fts3ExprGlobalHitsCb161941,5830855
static int fts3ExprLocalHitsCb(fts3ExprLocalHitsCb161957,5831453
static int fts3MatchinfoCheck(fts3MatchinfoCheck161980,5832064
static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){fts3MatchinfoSize162001,5832646
static int fts3MatchinfoSelectDoctotal(fts3MatchinfoSelectDoctotal162034,5833391
typedef struct LcsIterator LcsIterator;LcsIterator162066,5834223
struct LcsIterator {LcsIterator162067,5834263
  Fts3Expr *pExpr;                /* Pointer to phrase expression */pExpr162068,5834284
  int iPosOffset;                 /* Tokens count up to end of this phrase */iPosOffset162069,5834353
  char *pRead;                    /* Cursor used to iterate through aDoclist */pRead162070,5834431
  int iPos;                       /* Current position */iPos162071,5834511
#define LCS_ITERATOR_FINISHED LCS_ITERATOR_FINISHED162078,5834709
static int fts3MatchinfoLcsCb(fts3MatchinfoLcsCb162080,5834752
static int fts3LcsIteratorAdvance(LcsIterator *pIter){fts3LcsIteratorAdvance162095,5835284
static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){fts3MatchinfoLcs162123,5836062
static int fts3MatchinfoValues(fts3MatchinfoValues162207,5838950
static void fts3GetMatchinfo(fts3GetMatchinfo162319,5842444
SQLITE_PRIVATE void sqlite3Fts3Snippet(sqlite3Fts3Snippet162404,5845127
typedef struct TermOffset TermOffset;TermOffset162503,5848691
typedef struct TermOffsetCtx TermOffsetCtx;TermOffsetCtx162504,5848729
struct TermOffset {TermOffset162506,5848774
  char *pList;                    /* Position-list */pList162507,5848794
  int iPos;                       /* Position just read from pList */iPos162508,5848848
  int iOff;                       /* Offset of this term from read positions */iOff162509,5848918
struct TermOffsetCtx {TermOffsetCtx162512,5849002
  Fts3Cursor *pCsr;pCsr162513,5849025
  int iCol;                       /* Column of table to populate aTerm for */iCol162514,5849045
  int iTerm;iTerm162515,5849123
  sqlite3_int64 iDocid;iDocid162516,5849136
  TermOffset *aTerm;aTerm162517,5849160
static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3ExprTermOffsetInit162523,5849271
SQLITE_PRIVATE void sqlite3Fts3Offsets(sqlite3Fts3Offsets162552,5850136
SQLITE_PRIVATE void sqlite3Fts3Matchinfo(sqlite3Fts3Matchinfo162690,5854690
static const unsigned char sqlite3Utf8Trans1[] = {sqlite3Utf8Trans1162752,5856419
#define READ_UTF8(READ_UTF8162763,5856874
#define WRITE_UTF8(WRITE_UTF8162775,5857489
typedef struct unicode_tokenizer unicode_tokenizer;unicode_tokenizer162797,5858559
typedef struct unicode_cursor unicode_cursor;unicode_cursor162798,5858611
struct unicode_tokenizer {unicode_tokenizer162800,5858658
  sqlite3_tokenizer base;base162801,5858685
  int bRemoveDiacritic;bRemoveDiacritic162802,5858711
  int nException;nException162803,5858735
  int *aiException;aiException162804,5858753
struct unicode_cursor {unicode_cursor162807,5858777
  sqlite3_tokenizer_cursor base;base162808,5858801
  const unsigned char *aInput;    /* Input text being tokenized */aInput162809,5858834
  int nInput;                     /* Size of aInput[] in bytes */nInput162810,5858901
  int iOff;                       /* Current offset within aInput[] */iOff162811,5858967
  int iToken;                     /* Index of next token to be returned */iToken162812,5859038
  char *zToken;                   /* storage for current token */zToken162813,5859113
  int nAlloc;                     /* space allocated at zToken */nAlloc162814,5859179
static int unicodeDestroy(sqlite3_tokenizer *pTokenizer){unicodeDestroy162821,5859309
static int unicodeAddExceptions(unicodeAddExceptions162848,5860456
static int unicodeIsException(unicode_tokenizer *p, int iCode){unicodeIsException162902,5862078
static int unicodeIsAlnum(unicode_tokenizer *p, int iCode){unicodeIsAlnum162927,5862606
static int unicodeCreate(unicodeCreate162935,5862847
static int unicodeOpen(unicodeOpen162985,5864325
static int unicodeClose(sqlite3_tokenizer_cursor *pCursor){unicodeClose163017,5865127
static int unicodeNext(unicodeNext163028,5865445
SQLITE_PRIVATE void sqlite3Fts3UnicodeTokenizer(sqlite3_tokenizer_module const **ppModule){sqlite3Fts3UnicodeTokenizer163096,5867716
SQLITE_PRIVATE int sqlite3FtsUnicodeIsalnum(int c){sqlite3FtsUnicodeIsalnum163143,5869052
static int remove_diacritic(int c){remove_diacritic163275,5876091
SQLITE_PRIVATE int sqlite3FtsUnicodeIsdiacritic(int c){sqlite3FtsUnicodeIsdiacritic163325,5878132
SQLITE_PRIVATE int sqlite3FtsUnicodeFold(int c, int bRemoveDiacritic){sqlite3FtsUnicodeFold163344,5878725
typedef sqlite3_int64 i64;i64163550,5887774
typedef sqlite3_uint64 u64;u64163551,5887801
typedef unsigned char u8;u8163552,5887829
typedef unsigned short u16;u16163553,5887855
typedef unsigned int u32;u32163554,5887883
# define UNUSED_PARAMETER(UNUSED_PARAMETER163560,5888008
typedef struct Rtree Rtree;Rtree163563,5888055
typedef struct RtreeCursor RtreeCursor;RtreeCursor163564,5888083
typedef struct RtreeNode RtreeNode;RtreeNode163565,5888123
typedef struct RtreeCell RtreeCell;RtreeCell163566,5888159
typedef struct RtreeConstraint RtreeConstraint;RtreeConstraint163567,5888195
typedef struct RtreeMatchArg RtreeMatchArg;RtreeMatchArg163568,5888243
typedef struct RtreeGeomCallback RtreeGeomCallback;RtreeGeomCallback163569,5888287
typedef union RtreeCoord RtreeCoord;RtreeCoord163570,5888339
typedef struct RtreeSearchPoint RtreeSearchPoint;RtreeSearchPoint163571,5888376
#define RTREE_MAX_DIMENSIONS RTREE_MAX_DIMENSIONS163574,5888499
#define HASHSIZE HASHSIZE163580,5888681
#define RTREE_DEFAULT_ROWEST RTREE_DEFAULT_ROWEST163589,5889068
#define RTREE_MIN_ROWEST RTREE_MIN_ROWEST163590,5889105
struct Rtree {Rtree163595,5889184
  sqlite3_vtab base;          /* Base class.  Must be first */base163596,5889199
  sqlite3 *db;                /* Host database connection */db163597,5889262
  int iNodeSize;              /* Size in bytes of each node in the node table */iNodeSize163598,5889323
  u8 nDim;                    /* Number of dimensions */nDim163599,5889404
  u8 nDim2;                   /* Twice the number of dimensions */nDim2163600,5889461
  u8 eCoordType;              /* RTREE_COORD_REAL32 or RTREE_COORD_INT32 */eCoordType163601,5889528
  u8 nBytesPerCell;           /* Bytes consumed per cell */nBytesPerCell163602,5889604
  u8 inWrTrans;               /* True if inside write transaction */inWrTrans163603,5889664
  int iDepth;                 /* Current depth of the r-tree structure */iDepth163604,5889733
  char *zDb;                  /* Name of database containing r-tree table */zDb163605,5889807
  char *zName;                /* Name of r-tree table */ zName163606,5889884
  u32 nBusy;                  /* Current number of users of this structure */nBusy163607,5889942
  i64 nRowEst;                /* Estimated number of rows in this table */nRowEst163608,5890020
  u32 nCursor;                /* Number of open cursors */nCursor163609,5890095
  RtreeNode *pDeleted;pDeleted163616,5890431
  int iReinsertHeight;        /* Height of sub-trees Reinsert() has run on */iReinsertHeight163617,5890454
  sqlite3_blob *pNodeBlob;pNodeBlob163620,5890562
  sqlite3_stmt *pWriteNode;pWriteNode163623,5890653
  sqlite3_stmt *pDeleteNode;pDeleteNode163624,5890681
  sqlite3_stmt *pReadRowid;pReadRowid163627,5890775
  sqlite3_stmt *pWriteRowid;pWriteRowid163628,5890803
  sqlite3_stmt *pDeleteRowid;pDeleteRowid163629,5890832
  sqlite3_stmt *pReadParent;pReadParent163632,5890928
  sqlite3_stmt *pWriteParent;pWriteParent163633,5890957
  sqlite3_stmt *pDeleteParent;pDeleteParent163634,5890987
  RtreeNode *aHash[HASHSIZE]; /* Hash table of in-memory nodes. */ aHash163636,5891019
#define RTREE_COORD_REAL32 RTREE_COORD_REAL32163640,5891135
#define RTREE_COORD_INT32 RTREE_COORD_INT32163641,5891164
  typedef sqlite3_int64 RtreeDValue;       /* High accuracy coordinate */RtreeDValue163649,5891384
  typedef int RtreeValue;                  /* Low accuracy coordinate */RtreeValue163650,5891458
# define RTREE_ZERO RTREE_ZERO163651,5891531
  typedef double RtreeDValue;              /* High accuracy coordinate */RtreeDValue163653,5891559
  typedef float RtreeValue;                /* Low accuracy coordinate */RtreeValue163654,5891633
# define RTREE_ZERO RTREE_ZERO163655,5891706
struct RtreeSearchPoint {RtreeSearchPoint163667,5892142
  RtreeDValue rScore;    /* The score for this node.  Smallest goes first. */rScore163668,5892168
  sqlite3_int64 id;      /* Node ID */id163669,5892246
  u8 iLevel;             /* 0=entries.  1=leaf node.  2+ for higher */iLevel163670,5892285
  u8 eWithin;            /* PARTLY_WITHIN or FULLY_WITHIN */eWithin163671,5892356
  u8 iCell;              /* Cell index within the node */iCell163672,5892417
#define RTREE_MINCELLS(RTREE_MINCELLS163684,5892753
#define RTREE_REINSERT(RTREE_REINSERT163685,5892823
#define RTREE_MAXCELLS RTREE_MAXCELLS163686,5892867
#define RTREE_MAX_DEPTH RTREE_MAX_DEPTH163695,5893210
#define RTREE_CACHE_SZ RTREE_CACHE_SZ163703,5893464
struct RtreeCursor {RtreeCursor163708,5893525
  sqlite3_vtab_cursor base;         /* Base class.  Must be first */base163709,5893546
  u8 atEOF;                         /* True if at end of search */atEOF163710,5893615
  u8 bPoint;                        /* True if sPoint is valid */bPoint163711,5893682
  int iStrategy;                    /* Copy of idxNum search parameter */iStrategy163712,5893748
  int nConstraint;                  /* Number of entries in aConstraint */nConstraint163713,5893822
  RtreeConstraint *aConstraint;     /* Search constraints. */aConstraint163714,5893897
  int nPointAlloc;                  /* Number of slots allocated for aPoint[] */nPointAlloc163715,5893959
  int nPoint;                       /* Number of slots used in aPoint[] */nPoint163716,5894040
  int mxLevel;                      /* iLevel value for root of the tree */mxLevel163717,5894115
  RtreeSearchPoint *aPoint;         /* Priority queue for search points */aPoint163718,5894191
  RtreeSearchPoint sPoint;          /* Cached next search point */sPoint163719,5894266
  RtreeNode *aNode[RTREE_CACHE_SZ]; /* Rtree node cache */aNode163720,5894333
  u32 anQueue[RTREE_MAX_DEPTH+1];   /* Number of queued entries by iLevel */anQueue163721,5894392
#define RTREE_OF_CURSOR(RTREE_OF_CURSOR163725,5894513
union RtreeCoord {RtreeCoord163731,5894717
  RtreeValue f;      /* Floating point value */f163732,5894736
  int i;             /* Integer value */i163733,5894784
  u32 u;             /* Unsigned for byte-order conversions */u163734,5894825
# define DCOORD(DCOORD163744,5895170
# define DCOORD(DCOORD163746,5895222
struct RtreeConstraint {RtreeConstraint163756,5895479
  int iCoord;                     /* Index of constrained coordinate */iCoord163757,5895504
  int op;                         /* Constraining operation */op163758,5895576
    RtreeDValue rValue;             /* Constraint value. */rValue163760,5895649
    int (*xGeom)(sqlite3_rtree_geometry*,int,RtreeDValue*,int*);xGeom163761,5895709
    int (*xQueryFunc)(sqlite3_rtree_query_info*);xQueryFunc163762,5895774
  } u;u163763,5895824
  sqlite3_rtree_query_info *pInfo;  /* xGeom and xQueryFunc argument */pInfo163764,5895831
#define RTREE_EQ RTREE_EQ163768,5895952
#define RTREE_LE RTREE_LE163769,5895986
#define RTREE_LT RTREE_LT163770,5896020
#define RTREE_GE RTREE_GE163771,5896054
#define RTREE_GT RTREE_GT163772,5896088
#define RTREE_MATCH RTREE_MATCH163773,5896122
#define RTREE_QUERY RTREE_QUERY163774,5896201
struct RtreeNode {RtreeNode163780,5896314
  RtreeNode *pParent;         /* Parent node */pParent163781,5896333
  i64 iNode;                  /* The node number */iNode163782,5896381
  int nRef;                   /* Number of references to this node */nRef163783,5896433
  int isDirty;                /* True if the node needs to be written to disk */isDirty163784,5896503
  u8 *zData;                  /* Content of the node, as should be on disk */zData163785,5896584
  RtreeNode *pNext;           /* Next node in this hash collision chain */pNext163786,5896662
#define NCELL(NCELL163790,5896785
struct RtreeCell {RtreeCell163795,5896887
  i64 iRowid;                                 /* Node or entry ID */iRowid163796,5896906
  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];  /* Bounding box coordinates */aCoord163797,5896975
struct RtreeGeomCallback {RtreeGeomCallback163815,5897666
  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);xGeom163816,5897693
  int (*xQueryFunc)(sqlite3_rtree_query_info*);xQueryFunc163817,5897759
  void (*xDestructor)(void*);xDestructor163818,5897807
  void *pContext;pContext163819,5897837
#define RTREE_GEOMETRY_MAGIC RTREE_GEOMETRY_MAGIC163828,5898083
struct RtreeMatchArg {RtreeMatchArg163836,5898385
  u32 magic;                  /* Always RTREE_GEOMETRY_MAGIC */magic163837,5898408
  RtreeGeomCallback cb;       /* Info about the callback functions */cb163838,5898472
  int nParam;                 /* Number of parameters to the SQL function */nParam163839,5898542
  sqlite3_value **apSqlParam; /* Original SQL parameter values */apSqlParam163840,5898619
  RtreeDValue aParam[1];      /* Values for parameters to the SQL function */aParam163841,5898685
# define MAX(MAX163845,5898779
# define MIN(MIN163848,5898840
# define GCC_VERSION GCC_VERSION163858,5899243
# define GCC_VERSION GCC_VERSION163860,5899329
# define testcase(testcase163868,5899504
# define SQLITE_BYTEORDER SQLITE_BYTEORDER163885,5900166
# define SQLITE_BYTEORDER SQLITE_BYTEORDER163887,5900244
# define SQLITE_BYTEORDER SQLITE_BYTEORDER163889,5900284
# define MSVC_VERSION MSVC_VERSION163897,5900530
# define MSVC_VERSION MSVC_VERSION163899,5900567
static int readInt16(u8 *p){readInt16163907,5900736
static void readCoord(u8 *p, RtreeCoord *pCoord){readCoord163910,5900794
static i64 readInt64(u8 *p){readInt64163927,5901302
static void writeInt16(u8 *p, int i){writeInt16163959,5902084
static int writeCoord(u8 *p, RtreeCoord *pCoord){writeCoord163963,5902170
static int writeInt64(u8 *p, i64 i){writeInt64163986,5902784
static void nodeReference(RtreeNode *p){nodeReference164011,5903349
static void nodeZero(Rtree *pRtree, RtreeNode *p){nodeZero164020,5903485
static int nodeHash(i64 iNode){nodeHash164029,5903706
static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){nodeHashLookup164037,5903878
static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){nodeHashInsert164046,5904092
static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){nodeHashDelete164057,5904356
static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){nodeNew164073,5904877
static void nodeBlobReset(Rtree *pRtree){nodeBlobReset164090,5905317
static int nodeAcquire(nodeAcquire164101,5905589
static void nodeOverwriteCell(nodeOverwriteCell164205,5908780
static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){nodeDeleteCell164223,5909356
static int nodeInsertCell(nodeInsertCell164238,5909881
static int nodeWrite(Rtree *pRtree, RtreeNode *pNode){nodeWrite164262,5910594
static int nodeRelease(Rtree *pRtree, RtreeNode *pNode){nodeRelease164287,5911316
static i64 nodeGetRowid(nodeGetRowid164314,5912006
static void nodeGetCoord(nodeGetCoord164326,5912390
static void nodeGetCell(nodeGetCell164340,5912958
static int rtreeCreate(rtreeCreate164371,5913876
static int rtreeConnect(rtreeConnect164384,5914125
static void rtreeReference(Rtree *pRtree){rtreeReference164397,5914368
static void rtreeRelease(Rtree *pRtree){rtreeRelease164405,5914547
static int rtreeDisconnect(sqlite3_vtab *pVtab){rtreeDisconnect164426,5915148
static int rtreeDestroy(sqlite3_vtab *pVtab){rtreeDestroy164434,5915306
static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){rtreeOpen164462,5915917
static void freeCursorConstraints(RtreeCursor *pCsr){freeCursorConstraints164483,5916396
static int rtreeClose(sqlite3_vtab_cursor *cur){rtreeClose164501,5916912
static int rtreeEof(sqlite3_vtab_cursor *cur){rtreeEof164521,5917495
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD164538,5918194
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD164544,5918513
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD164550,5918808
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD164558,5919235
#define RTREE_DECODE_COORD(RTREE_DECODE_COORD164564,5919507
static int rtreeCallbackConstraint(rtreeCallbackConstraint164576,5919958
static void rtreeNonleafConstraint(rtreeNonleafConstraint164652,5923280
static void rtreeLeafConstraint(rtreeLeafConstraint164697,5925029
static int nodeRowidIndex(nodeRowidIndex164724,5926149
static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){nodeParentIndex164746,5926605
static int rtreeSearchPointCompare(rtreeSearchPointCompare164765,5927348
static void rtreeSearchPointSwap(RtreeCursor *p, int i, int j){rtreeSearchPointSwap164779,5927677
static RtreeSearchPoint *rtreeSearchPointFirst(RtreeCursor *pCur){rtreeSearchPointFirst164800,5928174
static RtreeNode *rtreeNodeOfFirstSearchPoint(RtreeCursor *pCur, int *pRC){rtreeNodeOfFirstSearchPoint164807,5928388
static RtreeSearchPoint *rtreeEnqueue(rtreeEnqueue164823,5928842
static RtreeSearchPoint *rtreeSearchPointNew(rtreeSearchPointNew164858,5929809
# define RTREE_QUEUE_TRACE(RTREE_QUEUE_TRACE164920,5931584
static void rtreeSearchPointPop(RtreeCursor *p){rtreeSearchPointPop164925,5931699
static int rtreeStepToLeaf(RtreeCursor *pCur){rtreeStepToLeaf164973,5932935
static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){rtreeNext165043,5935040
static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){rtreeRowid165057,5935406
static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){rtreeColumn165071,5935840
static int findLeafNode(findLeafNode165105,5936946
static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){deserializeGeometry165131,5937829
static int rtreeFilter(rtreeFilter165177,5939400
static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){rtreeBestIndex165312,5943962
static RtreeDValue cellArea(Rtree *pRtree, RtreeCell *p){cellArea165397,5946950
static RtreeDValue cellMargin(Rtree *pRtree, RtreeCell *p){cellMargin165427,5947956
static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){cellUnion165440,5948246
static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){cellContains165461,5948884
static RtreeDValue cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){cellGrowth165479,5949376
static RtreeDValue cellOverlap(cellOverlap165488,5949644
static int ChooseLeaf(ChooseLeaf165520,5950352
static int AdjustTree(AdjustTree165580,5951978
static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){rowidWrite165609,5952716
static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){parentWrite165619,5953055
static void SortByDistance(SortByDistance165646,5953959
static void SortByDimension(SortByDimension165712,5955644
static int splitNodeStartree(splitNodeStartree165771,5957279
static int updateMapping(updateMapping165869,5959920
static int SplitNode(SplitNode165888,5960394
static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){fixLeafParent166035,5964382
static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){removeNode166067,5965674
static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){fixBoundingBox166116,5966931
static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){deleteCell166143,5967724
static int Reinsert(Reinsert166174,5968564
static int rtreeInsertCell(rtreeInsertCell166279,5971502
static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){reinsertNodeContent166314,5972383
static int newRowid(Rtree *pRtree, i64 *piRowid){newRowid166343,5973141
static int rtreeDeleteRowid(Rtree *pRtree, sqlite3_int64 iDelete){rtreeDeleteRowid166356,5973511
#define RNDTOWARDS RNDTOWARDS166440,5976045
#define RNDAWAY RNDAWAY166441,5976113
static RtreeValue rtreeValueDown(sqlite3_value *v){rtreeValueDown166448,5976367
static RtreeValue rtreeValueUp(sqlite3_value *v){rtreeValueUp166456,5976559
static int rtreeConstraintError(Rtree *pRtree, int iCol){rtreeConstraintError166479,5977389
static int rtreeUpdate(rtreeUpdate166517,5978382
static int rtreeBeginTransaction(sqlite3_vtab *pVtab){rtreeBeginTransaction166648,5982516
static int rtreeEndTransaction(sqlite3_vtab *pVtab){rtreeEndTransaction166659,5982823
static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){rtreeRename166669,5983044
static int rtreeQueryStat1(sqlite3 *db, Rtree *pRtree){rtreeQueryStat1166693,5983833
static sqlite3_module rtreeModule = {rtreeModule166732,5984814
static int rtreeSqlInit(rtreeSqlInit166758,5986242
  #define N_STATEMENT N_STATEMENT166767,5986386
static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){getIntFromStmt166837,5988764
static int getNodeSize(getNodeSize166867,5989907
static int rtreeInit(rtreeInit166911,5991232
static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){rtreenode167019,5994980
static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){rtreedepth167074,5996659
SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){sqlite3RtreeInit167091,5997213
static void rtreeFreeCallback(void *p){rtreeFreeCallback167122,5998216
static void rtreeMatchArgFree(void *pArg){rtreeMatchArgFree167131,5998467
static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){geomCallback167154,5999271
SQLITE_API int sqlite3_rtree_geometry_callback(sqlite3_rtree_geometry_callback167192,6000422
SQLITE_API int sqlite3_rtree_query_callback(sqlite3_rtree_query_callback167216,6001372
__declspec(dllexport)__declspec167239,6002311
# define SQLITE_MAX_LIKE_PATTERN_LENGTH SQLITE_MAX_LIKE_PATTERN_LENGTH167307,6004206
static void xFree(void *p){xFree167313,6004337
static const unsigned char icuUtf8Trans1[] = {icuUtf8Trans1167322,6004545
#define SQLITE_ICU_READ_UTF8(SQLITE_ICU_READ_UTF8167333,6004996
#define SQLITE_ICU_SKIP_UTF8(SQLITE_ICU_SKIP_UTF8167342,6005428
static int icuLikeCompare(icuLikeCompare167354,6005854
static void icuLikeFunc(icuLikeFunc167442,6008328
static void icuFunctionError(icuFunctionError167488,6009658
static void icuRegexpDelete(void *p){icuRegexpDelete167503,6010180
static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){icuRegexpFunc167527,6010939
static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){icuCaseFunc16167610,6013481
static void icuCollationDel(void *pCtx){icuCollationDel167668,6015229
static int icuCollationColl(icuCollationColl167677,6015468
static void icuLoadCollation(icuLoadCollation167709,6016382
SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){sqlite3IcuInit167749,6017532
__declspec(dllexport)__declspec167788,6019280
typedef struct IcuTokenizer IcuTokenizer;IcuTokenizer167830,6020415
typedef struct IcuCursor IcuCursor;IcuCursor167831,6020457
struct IcuTokenizer {IcuTokenizer167833,6020494
  sqlite3_tokenizer base;base167834,6020516
  char *zLocale;zLocale167835,6020542
struct IcuCursor {IcuCursor167838,6020563
  sqlite3_tokenizer_cursor base;base167839,6020582
  UBreakIterator *pIter;      /* ICU break-iterator object */pIter167841,6020616
  int nChar;                  /* Number of UChar elements in pInput */nChar167842,6020678
  UChar *aChar;               /* Copy of input using utf-16 encoding */aChar167843,6020749
  int *aOffset;               /* Offsets of each character in utf-8 input */aOffset167844,6020821
  int nBuffer;nBuffer167846,6020899
  char *zBuffer;zBuffer167847,6020914
  int iToken;iToken167849,6020932
static int icuCreate(icuCreate167855,6020992
static int icuDestroy(sqlite3_tokenizer *pTokenizer){icuDestroy167885,6021632
static int icuOpen(icuOpen167897,6021981
static int icuClose(sqlite3_tokenizer_cursor *pCursor){icuClose167969,6023793
static int icuNext(icuNext167980,6024054
static const sqlite3_tokenizer_module icuTokenizerModule = {icuTokenizerModule168045,6025782
SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule(sqlite3Fts3IcuTokenizerModule168058,6026266
#define _SQLITE3RBU_H_SQLITE3RBU_H168427,6043271
typedef struct sqlite3rbu sqlite3rbu;sqlite3rbu168435,6043404
#define SQLITE_RBU_STATE_OAL SQLITE_RBU_STATE_OAL168672,6054321
#define SQLITE_RBU_STATE_MOVE SQLITE_RBU_STATE_MOVE168673,6054359
#define SQLITE_RBU_STATE_CHECKPOINT SQLITE_RBU_STATE_CHECKPOINT168674,6054397
#define SQLITE_RBU_STATE_DONE SQLITE_RBU_STATE_DONE168675,6054435
#define SQLITE_RBU_STATE_ERROR SQLITE_RBU_STATE_ERROR168676,6054473
#define SQLITE_RBU_UPDATE_CACHESIZE SQLITE_RBU_UPDATE_CACHESIZE168748,6057361
# define SWAP(SWAP168754,6057475
#define RBU_STATE_STAGE RBU_STATE_STAGE168801,6059131
#define RBU_STATE_TBL RBU_STATE_TBL168802,6059164
#define RBU_STATE_IDX RBU_STATE_IDX168803,6059197
#define RBU_STATE_ROW RBU_STATE_ROW168804,6059230
#define RBU_STATE_PROGRESS RBU_STATE_PROGRESS168805,6059263
#define RBU_STATE_CKPT RBU_STATE_CKPT168806,6059296
#define RBU_STATE_COOKIE RBU_STATE_COOKIE168807,6059329
#define RBU_STATE_OALSZ RBU_STATE_OALSZ168808,6059362
#define RBU_STATE_PHASEONESTEP RBU_STATE_PHASEONESTEP168809,6059395
#define RBU_STAGE_OAL RBU_STAGE_OAL168811,6059429
#define RBU_STAGE_MOVE RBU_STAGE_MOVE168812,6059461
#define RBU_STAGE_CAPTURE RBU_STAGE_CAPTURE168813,6059493
#define RBU_STAGE_CKPT RBU_STAGE_CKPT168814,6059525
#define RBU_STAGE_DONE RBU_STAGE_DONE168815,6059557
#define RBU_CREATE_STATE RBU_CREATE_STATE168818,6059591
typedef struct RbuFrame RbuFrame;RbuFrame168821,6059689
typedef struct RbuObjIter RbuObjIter;RbuObjIter168822,6059723
typedef struct RbuState RbuState;RbuState168823,6059761
typedef struct rbu_vfs rbu_vfs;rbu_vfs168824,6059795
typedef struct rbu_file rbu_file;rbu_file168825,6059827
typedef struct RbuUpdateStmt RbuUpdateStmt;RbuUpdateStmt168826,6059861
typedef unsigned int u32;u32168829,6059940
typedef unsigned short u16;u16168830,6059966
typedef unsigned char u8;u8168831,6059994
typedef sqlite3_int64 i64;i64168832,6060020
#define WAL_LOCK_WRITE WAL_LOCK_WRITE168840,6060220
#define WAL_LOCK_CKPT WAL_LOCK_CKPT168841,6060246
#define WAL_LOCK_READ0 WAL_LOCK_READ0168842,6060272
#define SQLITE_FCNTL_RBUCNT SQLITE_FCNTL_RBUCNT168844,6060299
struct RbuState {RbuState168849,6060417
  int eStage;eStage168850,6060435
  char *zTbl;zTbl168851,6060449
  char *zIdx;zIdx168852,6060463
  i64 iWalCksum;iWalCksum168853,6060477
  int nRow;nRow168854,6060494
  i64 nProgress;nProgress168855,6060506
  u32 iCookie;iCookie168856,6060523
  i64 iOalSz;iOalSz168857,6060538
  i64 nPhaseOneStep;nPhaseOneStep168858,6060552
struct RbuUpdateStmt {RbuUpdateStmt168861,6060577
  char *zMask;                    /* Copy of update mask used with pUpdate */zMask168862,6060600
  sqlite3_stmt *pUpdate;          /* Last update statement (or NULL) */pUpdate168863,6060678
  RbuUpdateStmt *pNext;pNext168864,6060750
struct RbuObjIter {RbuObjIter168883,6061376
  sqlite3_stmt *pTblIter;         /* Iterate through tables */pTblIter168884,6061396
  sqlite3_stmt *pIdxIter;         /* Index iterator */pIdxIter168885,6061459
  int nTblCol;                    /* Size of azTblCol[] array */nTblCol168886,6061514
  char **azTblCol;                /* Array of unquoted target column names */azTblCol168887,6061579
  char **azTblType;               /* Array of target column types */azTblType168888,6061657
  int *aiSrcOrder;                /* src table col -> target table col */aiSrcOrder168889,6061726
  u8 *abTblPk;                    /* Array of flags, set on target PK columns */abTblPk168890,6061800
  u8 *abNotNull;                  /* Array of flags, set on NOT NULL columns */abNotNull168891,6061881
  u8 *abIndexed;                  /* Array of flags, set on indexed & PK cols */abIndexed168892,6061961
  int eType;                      /* Table type - an RBU_PK_XXX value */eType168893,6062042
  int bCleanup;                   /* True in "cleanup" state */bCleanup168896,6062163
  const char *zTbl;               /* Name of target db table */zTbl168897,6062227
  const char *zDataTbl;           /* Name of rbu db table (or null) */zDataTbl168898,6062291
  const char *zIdx;               /* Name of target db index (or null) */zIdx168899,6062362
  int iTnum;                      /* Root page of current object */iTnum168900,6062436
  int iPkTnum;                    /* If eType==EXTERNAL, root of PK index */iPkTnum168901,6062504
  int bUnique;                    /* Current index is unique */bUnique168902,6062581
  int nIndex;                     /* Number of aux. indexes on table zTbl */nIndex168903,6062645
  int nCol;                       /* Number of columns in current object */nCol168906,6062776
  sqlite3_stmt *pSelect;          /* Source data */pSelect168907,6062852
  sqlite3_stmt *pInsert;          /* Statement for INSERT operations */pInsert168908,6062904
  sqlite3_stmt *pDelete;          /* Statement for DELETE ops */pDelete168909,6062976
  sqlite3_stmt *pTmpInsert;       /* Insert into rbu_tmp_$zDataTbl */pTmpInsert168910,6063041
  RbuUpdateStmt *pRbuUpdate;pRbuUpdate168913,6063176
#define RBU_PK_NOTABLE RBU_PK_NOTABLE168926,6063483
#define RBU_PK_NONE RBU_PK_NONE168927,6063515
#define RBU_PK_IPK RBU_PK_IPK168928,6063547
#define RBU_PK_EXTERNAL RBU_PK_EXTERNAL168929,6063579
#define RBU_PK_WITHOUT_ROWID RBU_PK_WITHOUT_ROWID168930,6063611
#define RBU_PK_VTAB RBU_PK_VTAB168931,6063643
#define RBU_INSERT RBU_INSERT168938,6063794
#define RBU_DELETE RBU_DELETE168939,6063864
#define RBU_REPLACE RBU_REPLACE168940,6063942
#define RBU_IDX_DELETE RBU_IDX_DELETE168941,6064011
#define RBU_IDX_INSERT RBU_IDX_INSERT168942,6064090
#define RBU_UPDATE RBU_UPDATE168944,6064162
struct RbuFrame {RbuFrame168950,6064383
  u32 iDbPage;iDbPage168951,6064401
  u32 iWalFrame;iWalFrame168952,6064416
struct sqlite3rbu {sqlite3rbu168995,6066130
  int eStage;                     /* Value of RBU_STATE_STAGE field */eStage168996,6066150
  sqlite3 *dbMain;                /* target database handle */dbMain168997,6066221
  sqlite3 *dbRbu;                 /* rbu database handle */dbRbu168998,6066284
  char *zTarget;                  /* Path to target db */zTarget168999,6066344
  char *zRbu;                     /* Path to rbu db */zRbu169000,6066402
  char *zState;                   /* Path to state db (or NULL if zRbu) */zState169001,6066457
  char zStateDb[5];               /* Db name for state ("stat" or "main") */zStateDb169002,6066532
  int rc;                         /* Value returned by last rbu_step() call */rc169003,6066609
  char *zErrmsg;                  /* Error message if rc!=SQLITE_OK */zErrmsg169004,6066688
  int nStep;                      /* Rows processed for current object */nStep169005,6066759
  int nProgress;                  /* Rows processed for all objects */nProgress169006,6066833
  RbuObjIter objiter;             /* Iterator for skipping through tbl/idx */objiter169007,6066904
  const char *zVfsName;           /* Name of automatically created rbu vfs */zVfsName169008,6066982
  rbu_file *pTargetFd;            /* File handle open on target db */pTargetFd169009,6067060
  int nPagePerSector;             /* Pages per sector for pTargetFd */nPagePerSector169010,6067130
  i64 iOalSz;iOalSz169011,6067201
  i64 nPhaseOneStep;nPhaseOneStep169012,6067215
  u32 iMaxFrame;                  /* Largest iWalFrame value in aFrame[] */iMaxFrame169017,6067433
  u32 mLock;mLock169018,6067509
  int nFrame;                     /* Entries in aFrame[] array */nFrame169019,6067522
  int nFrameAlloc;                /* Allocated size of aFrame[] array */nFrameAlloc169020,6067588
  RbuFrame *aFrame;aFrame169021,6067661
  int pgsz;pgsz169022,6067681
  u8 *aBuf;aBuf169023,6067693
  i64 iWalCksum;iWalCksum169024,6067705
  int nRbu;                       /* Number of RBU VFS in the stack */nRbu169027,6067760
  rbu_file *pRbuFd;               /* Fd for main db of dbRbu */pRbuFd169028,6067831
struct rbu_vfs {rbu_vfs169034,6067971
  sqlite3_vfs base;               /* rbu VFS shim methods */base169035,6067988
  sqlite3_vfs *pRealVfs;          /* Underlying VFS */pRealVfs169036,6068049
  sqlite3_mutex *mutex;           /* Mutex to protect pMain */mutex169037,6068104
  rbu_file *pMain;                /* Linked list of main db files */pMain169038,6068167
struct rbu_file {rbu_file169045,6068341
  sqlite3_file base;              /* sqlite3_file methods */base169046,6068359
  sqlite3_file *pReal;            /* Underlying file handle */pReal169047,6068420
  rbu_vfs *pRbuVfs;               /* Pointer to the rbu_vfs object */pRbuVfs169048,6068483
  sqlite3rbu *pRbu;               /* Pointer to rbu object (rbu target only) */pRbu169049,6068553
  int openFlags;                  /* Flags this file was opened with */openFlags169051,6068634
  u32 iCookie;                    /* Cookie value for main db files */iCookie169052,6068706
  u8 iWriteVer;                   /* "write-version" value for main db files */iWriteVer169053,6068777
  u8 bNolock;                     /* True to fail EXCLUSIVE locks */bNolock169054,6068857
  int nShm;                       /* Number of entries in apShm[] array */nShm169056,6068927
  char **apShm;                   /* Array of mmap'd *-shm regions */apShm169057,6069002
  char *zDel;                     /* Delete this when closing file */zDel169058,6069072
  const char *zWal;               /* Wal filename for this main db file */zWal169060,6069143
  rbu_file *pWalFd;               /* Wal file descriptor for this main db */pWalFd169061,6069218
  rbu_file *pMainNext;            /* Next MAIN_DB file */pMainNext169062,6069295
#define rbuIsVacuum(rbuIsVacuum169068,6069417
static unsigned int rbuDeltaGetInt(const char **pz, int *pLen){rbuDeltaGetInt169088,6070085
static unsigned int rbuDeltaChecksum(const char *zIn, size_t N){rbuDeltaChecksum169115,6071062
static int rbuDeltaApply(rbuDeltaApply169167,6072644
static int rbuDeltaOutputSize(const char *zDelta, int lenDelta){rbuDeltaOutputSize169253,6074992
static void rbuFossilDeltaFunc(rbuFossilDeltaFunc169275,6075657
static int prepareAndCollectError(prepareAndCollectError169327,6077051
static int resetAndCollectError(sqlite3_stmt *pStmt, char **pzErrmsg){resetAndCollectError169349,6077664
static int prepareFreeAndCollectError(prepareFreeAndCollectError169372,6078638
static void rbuObjIterFreeCols(RbuObjIter *pIter){rbuObjIterFreeCols169394,6079095
static void rbuObjIterClearStatements(RbuObjIter *pIter){rbuObjIterClearStatements169414,6079622
static void rbuObjIterFinalize(RbuObjIter *pIter){rbuObjIterFinalize169441,6080256
static int rbuObjIterNext(sqlite3rbu *p, RbuObjIter *pIter){rbuObjIterNext169457,6080785
static void rbuTargetNameFunc(rbuTargetNameFunc169537,6083492
static int rbuObjIterFirst(sqlite3rbu *p, RbuObjIter *pIter){rbuObjIterFirst169572,6084480
static char *rbuMPrintf(sqlite3rbu *p, const char *zFmt, ...){rbuMPrintf169607,6085737
static int rbuMPrintfExec(sqlite3rbu *p, sqlite3 *db, const char *zFmt, ...){rbuMPrintfExec169632,6086473
static void *rbuMalloc(sqlite3rbu *p, int nByte){rbuMalloc169659,6087243
static void rbuAllocateIterArrays(sqlite3rbu *p, RbuObjIter *pIter, int nCol){rbuAllocateIterArrays169679,6087725
static char *rbuStrndup(const char *zStr, int *pRc){rbuStrndup169704,6088687
static void rbuFinalize(sqlite3rbu *p, sqlite3_stmt *pStmt){rbuFinalize169728,6089236
static void rbuTableType(rbuTableType169776,6091058
static void rbuObjIterCacheIndexedCols(sqlite3rbu *p, RbuObjIter *pIter){rbuObjIterCacheIndexedCols169860,6093512
static int rbuObjIterCacheTableInfo(sqlite3rbu *p, RbuObjIter *pIter){rbuObjIterCacheTableInfo169907,6095052
static char *rbuObjIterGetCollist(rbuObjIterGetCollist170016,6099087
static char *rbuObjIterGetIndexCols(rbuObjIterGetIndexCols170055,6100345
static char *rbuObjIterGetOldlist(rbuObjIterGetOldlist170159,6103844
static char *rbuObjIterGetWhere(rbuObjIterGetWhere170200,6104895
static void rbuBadControlError(sqlite3rbu *p){rbuBadControlError170241,6106122
static char *rbuObjIterGetSetlist(rbuObjIterGetSetlist170264,6107122
static char *rbuObjIterGetBindlist(sqlite3rbu *p, int nBind){rbuObjIterGetBindlist170318,6108819
static char *rbuWithoutRowidPK(sqlite3rbu *p, RbuObjIter *pIter){rbuWithoutRowidPK170345,6109500
static void rbuCreateImposterTable2(sqlite3rbu *p, RbuObjIter *pIter){rbuCreateImposterTable2170404,6111693
static void rbuCreateImposterTable(sqlite3rbu *p, RbuObjIter *pIter){rbuCreateImposterTable170478,6115008
static void rbuObjIterPrepareTmpInsert(rbuObjIterPrepareTmpInsert170534,6116984
static void rbuTmpInsertFunc(rbuTmpInsertFunc170552,6117580
static int rbuObjIterPrepareAll(rbuObjIterPrepareAll170587,6118453
static int rbuGetUpdateStmt(rbuGetUpdateStmt170809,6126466
static sqlite3 *rbuOpenDbhandle(rbuOpenDbhandle170877,6128435
static void rbuFreeState(RbuState *p){rbuFreeState170898,6128931
static RbuState *rbuLoadState(sqlite3rbu *p){rbuLoadState170915,6129388
static void rbuOpenDatabase(sqlite3rbu *p, int *pbRetry){rbuOpenDatabase170988,6131274
static void rbuFileSuffix3(const char *zBase, char *z){rbuFileSuffix3171167,6136577
static i64 rbuShmChecksum(sqlite3rbu *p){rbuShmChecksum171188,6137151
static void rbuSetupCheckpoint(sqlite3rbu *p, RbuState *pState){rbuSetupCheckpoint171217,6138254
static int rbuCaptureWalRead(sqlite3rbu *pRbu, i64 iOff, int iAmt){rbuCaptureWalRead171301,6141502
static int rbuCaptureDbWrite(sqlite3rbu *pRbu, i64 iOff){rbuCaptureDbWrite171333,6142520
static void rbuCheckpointFrame(sqlite3rbu *p, RbuFrame *pFrame){rbuCheckpointFrame171343,6142857
static void rbuLockDatabase(sqlite3rbu *p){rbuLockDatabase171361,6143375
static LPWSTR rbuWinUtf8ToUnicode(const char *zFilename){rbuWinUtf8ToUnicode171371,6143678
static void rbuMoveOalFile(sqlite3rbu *p){rbuMoveOalFile171401,6144591
static int rbuStepType(sqlite3rbu *p, const char **pzMask){rbuStepType171492,6147189
static void assertColumnName(sqlite3_stmt *pStmt, int iCol, const char *zName){assertColumnName171535,6148228
# define assertColumnName(assertColumnName171540,6148416
static void rbuStepOneOp(sqlite3rbu *p, int eType){rbuStepOneOp171548,6148673
static int rbuStep(sqlite3rbu *p){rbuStep171631,6151386
static void rbuIncrSchemaCookie(sqlite3rbu *p){rbuIncrSchemaCookie171696,6153505
static void rbuSaveState(sqlite3rbu *p, int eStage){rbuSaveState171727,6154658
static void rbuCopyPragma(sqlite3rbu *p, const char *zPragma){rbuCopyPragma171786,6156416
static void rbuCreateTargetSchema(sqlite3rbu *p){rbuCreateTargetSchema171806,6157107
SQLITE_API int sqlite3rbu_step(sqlite3rbu *p){sqlite3rbu_step171858,6158593
static int rbuStrCompare(const char *z1, const char *z2){rbuStrCompare171987,6162928
static void rbuSetupOal(sqlite3rbu *p, RbuState *pState){rbuSetupOal172003,6163549
static void rbuDeleteOalFile(sqlite3rbu *p){rbuDeleteOalFile172035,6164425
static void rbuCreateVfs(sqlite3rbu *p){rbuCreateVfs172051,6164932
static void rbuDeleteVfs(sqlite3rbu *p){rbuDeleteVfs172070,6165442
static void rbuIndexCntFunc(rbuIndexCntFunc172082,6165776
static void rbuInitPhaseOneSteps(sqlite3rbu *p){rbuInitPhaseOneSteps172131,6167312
static sqlite3rbu *openRbuHandle(openRbuHandle172172,6168529
static sqlite3rbu *rbuMisuseError(void){rbuMisuseError172328,6173505
SQLITE_API sqlite3rbu *sqlite3rbu_open(sqlite3rbu_open172341,6173764
SQLITE_API sqlite3rbu *sqlite3rbu_vacuum(sqlite3rbu_vacuum172354,6174102
SQLITE_API sqlite3 *sqlite3rbu_db(sqlite3rbu *pRbu, int bRbu){sqlite3rbu_db172366,6174389
static void rbuEditErrmsg(sqlite3rbu *p){rbuEditErrmsg172380,6174742
SQLITE_API int sqlite3rbu_close(sqlite3rbu *p, char **pzErrmsg){sqlite3rbu_close172398,6175234
SQLITE_API sqlite3_int64 sqlite3rbu_progress(sqlite3rbu *pRbu){sqlite3rbu_progress172456,6177085
SQLITE_API void sqlite3rbu_bp_progress(sqlite3rbu *p, int *pnOne, int *pnTwo){sqlite3rbu_bp_progress172464,6177273
SQLITE_API int sqlite3rbu_state(sqlite3rbu *p){sqlite3rbu_state172499,6178051
SQLITE_API int sqlite3rbu_savestate(sqlite3rbu *p){sqlite3rbu_savestate172527,6178936
static void rbuUnlockShm(rbu_file *p){rbuUnlockShm172617,6182998
static int rbuVfsClose(sqlite3_file *pFile){rbuVfsClose172633,6183366
static u32 rbuGetU32(u8 *aBuf){rbuGetU32172666,6184194
static void rbuPutU32(u8 *aBuf, u32 iVal){rbuPutU32172677,6184432
static void rbuPutU16(u8 *aBuf, u16 iVal){rbuPutU16172684,6184610
static int rbuVfsRead(rbuVfsRead172692,6184762
static int rbuVfsWrite(rbuVfsWrite172758,6187001
static int rbuVfsTruncate(sqlite3_file *pFile, sqlite_int64 size){rbuVfsTruncate172793,6187957
static int rbuVfsSync(sqlite3_file *pFile, int flags){rbuVfsSync172801,6188147
static int rbuVfsFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){rbuVfsFileSize172815,6188513
static int rbuVfsLock(sqlite3_file *pFile, int eLock){rbuVfsLock172836,6189110
static int rbuVfsUnlock(sqlite3_file *pFile, int eLock){rbuVfsUnlock172858,6189710
static int rbuVfsCheckReservedLock(sqlite3_file *pFile, int *pResOut){rbuVfsCheckReservedLock172866,6189939
static int rbuVfsFileControl(sqlite3_file *pFile, int op, void *pArg){rbuVfsFileControl172874,6190187
static int rbuVfsSectorSize(sqlite3_file *pFile){rbuVfsSectorSize172929,6191917
static int rbuVfsDeviceCharacteristics(sqlite3_file *pFile){rbuVfsDeviceCharacteristics172937,6192134
static int rbuVfsShmLock(sqlite3_file *pFile, int ofst, int n, int flags){rbuVfsShmLock172945,6192343
static int rbuVfsShmMap(rbuVfsShmMap172984,6193589
static void rbuVfsShmBarrier(sqlite3_file *pFile){rbuVfsShmBarrier173038,6194974
static int rbuVfsShmUnmap(sqlite3_file *pFile, int delFlag){rbuVfsShmUnmap173046,6195139
static rbu_file *rbuFindMaindb(rbu_vfs *pRbuVfs, const char *zWal){rbuFindMaindb173068,6195855
static const char *rbuMainToWal(const char *zName, int flags){rbuMainToWal173083,6196431
static int rbuVfsOpen(rbuVfsOpen173106,6196842
static int rbuVfsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){rbuVfsDelete173219,6200824
static int rbuVfsAccess(rbuVfsAccess173228,6201126
static int rbuVfsFullPathname(rbuVfsFullPathname173273,6202562
static void *rbuVfsDlOpen(sqlite3_vfs *pVfs, const char *zPath){rbuVfsDlOpen173287,6202893
static void rbuVfsDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){rbuVfsDlError173297,6203238
static void (*rbuVfsDlSym(rbuVfsDlSym173305,6203495
static void rbuVfsDlClose(sqlite3_vfs *pVfs, void *pHandle){rbuVfsDlClose173317,6203745
static int rbuVfsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){rbuVfsRandomness173327,6204032
static int rbuVfsSleep(sqlite3_vfs *pVfs, int nMicro){rbuVfsSleep173336,6204315
static int rbuVfsCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){rbuVfsCurrentTime173344,6204542
static int rbuVfsGetLastError(sqlite3_vfs *pVfs, int a, char *b){rbuVfsGetLastError173352,6204735
SQLITE_API void sqlite3rbu_destroy_vfs(const char *zName){sqlite3rbu_destroy_vfs173360,6204917
SQLITE_API int sqlite3rbu_create_vfs(const char *zName, const char *zParent){sqlite3rbu_create_vfs173374,6205370
#define VTAB_SCHEMA VTAB_SCHEMA173514,6210525
typedef struct StatTable StatTable;StatTable173530,6211548
typedef struct StatCursor StatCursor;StatCursor173531,6211584
typedef struct StatPage StatPage;StatPage173532,6211622
typedef struct StatCell StatCell;StatCell173533,6211656
struct StatCell {StatCell173535,6211691
  int nLocal;                     /* Bytes of local payload */nLocal173536,6211709
  u32 iChildPg;                   /* Child node (or 0 if this is a leaf) */iChildPg173537,6211772
  int nOvfl;                      /* Entries in aOvfl[] */nOvfl173538,6211848
  u32 *aOvfl;                     /* Array of overflow page numbers */aOvfl173539,6211907
  int nLastOvfl;                  /* Bytes of payload on final overflow page */nLastOvfl173540,6211978
  int iOvfl;                      /* Iterates through aOvfl[] */iOvfl173541,6212058
struct StatPage {StatPage173544,6212127
  u32 iPgno;iPgno173545,6212145
  DbPage *pPg;pPg173546,6212158
  int iCell;iCell173547,6212173
  char *zPath;                    /* Path to this page */zPath173549,6212187
  u8 flags;                       /* Copy of flags byte */flags173552,6212295
  int nCell;                      /* Number of cells on page */nCell173553,6212354
  int nUnused;                    /* Number of unused bytes on page */nUnused173554,6212418
  StatCell *aCell;                /* Array of parsed cells */aCell173555,6212489
  u32 iRightChildPg;              /* Right-child page number (or 0) */iRightChildPg173556,6212551
  int nMxPayload;                 /* Largest payload of any cell on this page */nMxPayload173557,6212622
struct StatCursor {StatCursor173560,6212707
  sqlite3_vtab_cursor base;base173561,6212727
  sqlite3_stmt *pStmt;            /* Iterates through set of root pages */pStmt173562,6212755
  int isEof;                      /* After pStmt has returned SQLITE_DONE */isEof173563,6212830
  int iDb;                        /* Schema used for this query */iDb173564,6212907
  StatPage aPage[32];aPage173566,6212975
  int iPage;                      /* Current entry in aPage[] */iPage173567,6212997
  char *zName;                    /* Value of 'name' column */zName173570,6213089
  char *zPath;                    /* Value of 'path' column */zPath173571,6213152
  u32 iPageno;                    /* Value of 'pageno' column */iPageno173572,6213215
  char *zPagetype;                /* Value of 'pagetype' column */zPagetype173573,6213280
  int nCell;                      /* Value of 'ncell' column */nCell173574,6213347
  int nPayload;                   /* Value of 'payload' column */nPayload173575,6213411
  int nUnused;                    /* Value of 'unused' column */nUnused173576,6213477
  int nMxPayload;                 /* Value of 'mx_payload' column */nMxPayload173577,6213542
  i64 iOffset;                    /* Value of 'pgOffset' column */iOffset173578,6213611
  int szPage;                     /* Value of 'pgSize' column */szPage173579,6213678
struct StatTable {StatTable173582,6213747
  sqlite3_vtab base;base173583,6213766
  sqlite3 *db;db173584,6213787
  int iDb;                        /* Index of database to analyze */iDb173585,6213802
# define get2byte(get2byte173589,6213892
static int statConnect(statConnect173595,6213999
static int statDisconnect(sqlite3_vtab *pVtab){statDisconnect173637,6214870
static int statBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){statBestIndex173649,6215242
static int statOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){statOpen173695,6216640
static void statClearPage(StatPage *p){statClearPage173712,6217061
static void statResetCsr(StatCursor *pCsr){statResetCsr173725,6217328
static int statClose(sqlite3_vtab_cursor *pCursor){statClose173740,6217616
static void getLocalPayload(getLocalPayload173748,6217812
static int statDecodePage(Btree *pBt, StatPage *p){statDecodePage173771,6218576
static void statSizeAndOffset(StatCursor *pCsr){statSizeAndOffset173866,6221647
static int statNext(sqlite3_vtab_cursor *pCursor){statNext173891,6222427
static int statEof(sqlite3_vtab_cursor *pCursor){statEof174024,6226343
static int statFilter(statFilter174029,6226462
static int statColumn(statColumn174074,6227772
static int statRowid(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){statRowid174121,6229182
SQLITE_PRIVATE int sqlite3DbstatRegister(sqlite3 *db){sqlite3DbstatRegister174130,6229425
SQLITE_PRIVATE int sqlite3DbstatRegister(sqlite3 *db){ return SQLITE_OK; }sqlite3DbstatRegister174156,6230728
typedef struct SessionTable SessionTable;SessionTable174172,6231261
typedef struct SessionChange SessionChange;SessionChange174173,6231303
typedef struct SessionBuffer SessionBuffer;SessionBuffer174174,6231347
typedef struct SessionInput SessionInput;SessionInput174175,6231391
#   define SESSIONS_STRM_CHUNK_SIZE SESSIONS_STRM_CHUNK_SIZE174182,6231556
#   define SESSIONS_STRM_CHUNK_SIZE SESSIONS_STRM_CHUNK_SIZE174184,6231602
typedef struct SessionHook SessionHook;SessionHook174188,6231659
struct SessionHook {SessionHook174189,6231699
  void *pCtx;pCtx174190,6231720
  int (*xOld)(void*,int,sqlite3_value**);xOld174191,6231734
  int (*xNew)(void*,int,sqlite3_value**);xNew174192,6231776
  int (*xCount)(void*);xCount174193,6231818
  int (*xDepth)(void*);xDepth174194,6231842
struct sqlite3_session {sqlite3_session174200,6231905
  sqlite3 *db;                    /* Database handle session is attached to */db174201,6231930
  char *zDb;                      /* Name of database session is attached to */zDb174202,6232009
  int bEnable;                    /* True if currently recording */bEnable174203,6232089
  int bIndirect;                  /* True if all changes are indirect */bIndirect174204,6232157
  int bAutoAttach;                /* True to auto-attach tables */bAutoAttach174205,6232230
  int rc;                         /* Non-zero if an error has occurred */rc174206,6232297
  void *pFilterCtx;               /* First argument to pass to xTableFilter */pFilterCtx174207,6232371
  int (*xTableFilter)(void *pCtx, const char *zTab);xTableFilter174208,6232450
  sqlite3_session *pNext;         /* Next session object on same db. */pNext174209,6232503
  SessionTable *pTable;           /* List of attached tables */pTable174210,6232575
  SessionHook hook;               /* APIs to grab new and old data with */hook174211,6232639
struct SessionBuffer {SessionBuffer174217,6232800
  u8 *aBuf;                       /* Pointer to changeset buffer */aBuf174218,6232823
  int nBuf;                       /* Size of buffer aBuf */nBuf174219,6232891
  int nAlloc;                     /* Size of allocation containing aBuf */nAlloc174220,6232951
struct SessionInput {SessionInput174229,6233282
  int bNoDiscard;                 /* If true, discard no data */bNoDiscard174230,6233304
  int iCurrent;                   /* Offset in aData[] of current change */iCurrent174231,6233369
  int iNext;                      /* Offset in aData[] of next change */iNext174232,6233445
  u8 *aData;                      /* Pointer to buffer containing changeset */aData174233,6233518
  int nData;                      /* Number of bytes in aData */nData174234,6233597
  SessionBuffer buf;              /* Current read buffer */buf174236,6233663
  int (*xInput)(void*, void*, int*);        /* Input stream call (or NULL) */xInput174237,6233723
  void *pIn;                                /* First argument to xInput */pIn174238,6233801
  int bEof;                       /* Set to true after xInput finished */bEof174239,6233876
struct sqlite3_changeset_iter {sqlite3_changeset_iter174245,6233998
  SessionInput in;                /* Input buffer or stream */in174246,6234030
  SessionBuffer tblhdr;           /* Buffer to hold apValue/zTab/abPK/ */tblhdr174247,6234093
  int bPatchset;                  /* True if this is a patchset */bPatchset174248,6234167
  int rc;                         /* Iterator error code */rc174249,6234234
  sqlite3_stmt *pConflict;        /* Points to conflicting row, if any */pConflict174250,6234294
  char *zTab;                     /* Current table */zTab174251,6234368
  int nCol;                       /* Number of columns in zTab */nCol174252,6234422
  int op;                         /* Current operation */op174253,6234488
  int bIndirect;                  /* True if current change was indirect */bIndirect174254,6234546
  u8 *abPK;                       /* Primary key array */abPK174255,6234622
  sqlite3_value **apValue;        /* old.* and new.* values */apValue174256,6234680
struct SessionTable {SessionTable174272,6235344
  SessionTable *pNext;pNext174273,6235366
  char *zName;                    /* Local name of table */zName174274,6235389
  int nCol;                       /* Number of columns in table zName */nCol174275,6235449
  const char **azCol;             /* Column names */azCol174276,6235522
  u8 *abPK;                       /* Array of primary key flags */abPK174277,6235575
  int nEntry;                     /* Total number of entries in hash table */nEntry174278,6235642
  int nChange;                    /* Size of apChange[] array */nChange174279,6235720
  SessionChange **apChange;       /* Hash table buckets */apChange174280,6235785
struct SessionChange {SessionChange174410,6241315
  int op;                         /* One of UPDATE, DELETE, INSERT */op174411,6241338
  int bIndirect;                  /* True if this change is "indirect" */bIndirect174412,6241408
  int nRecord;                    /* Number of bytes in buffer aRecord[] */nRecord174413,6241482
  u8 *aRecord;                    /* Buffer containing old.* record */aRecord174414,6241558
  SessionChange *pNext;           /* For hash-table collisions */pNext174415,6241629
static int sessionVarintPut(u8 *aBuf, int iVal){sessionVarintPut174422,6241804
static int sessionVarintLen(int iVal){sessionVarintLen174429,6241968
static int sessionVarintGet(u8 *aBuf, int *piVal){sessionVarintGet174437,6242134
#define SESSION_UINT32(SESSION_UINT32174442,6242276
static sqlite3_int64 sessionGetI64(u8 *aRec){sessionGetI64174448,6242449
static void sessionPutI64(u8 *aBuf, sqlite3_int64 i){sessionPutI64174458,6242681
static int sessionSerializeValue(sessionSerializeValue174482,6243493
#define HASH_APPEND(HASH_APPEND174569,6246091
static unsigned int sessionHashAppendI64(unsigned int h, i64 i){sessionHashAppendI64174575,6246322
static unsigned int sessionHashAppendBlob(unsigned int h, int n, const u8 *z){sessionHashAppendBlob174584,6246630
static unsigned int sessionHashAppendType(unsigned int h, int eType){sessionHashAppendType174594,6246929
static int sessionPreupdateHash(sessionPreupdateHash174609,6247601
static int sessionSerialLen(u8 *a){sessionSerialLen174673,6249704
static unsigned int sessionChangeHash(sessionChangeHash174691,6250318
static int sessionChangeEqual(sessionChangeEqual174740,6252005
static void sessionMergeRecord(sessionMergeRecord174783,6253618
static u8 *sessionMergeValue(sessionMergeValue174829,6255039
static int sessionMergeUpdate(sessionMergeUpdate174863,6255722
static int sessionPreupdateEqual(sessionPreupdateEqual174940,6257860
static int sessionGrowHash(int bPatchset, SessionTable *pTab){sessionGrowHash175020,6260991
static int sessionTableInfo(sessionTableInfo175084,6263182
static int sessionInitTable(sqlite3_session *pSession, SessionTable *pTab){sessionInitTable175184,6266125
static void sessionPreupdateOneChange(sessionPreupdateOneChange175212,6266994
static int sessionFindTable(sessionFindTable175333,6271162
static void xPreUpdate(xPreUpdate175369,6272164
static int sessionPreupdateOld(void *pCtx, int iVal, sqlite3_value **ppVal){sessionPreupdateOld175407,6273563
static int sessionPreupdateNew(void *pCtx, int iVal, sqlite3_value **ppVal){sessionPreupdateNew175410,6273703
static int sessionPreupdateCount(void *pCtx){sessionPreupdateCount175413,6273843
static int sessionPreupdateDepth(void *pCtx){sessionPreupdateDepth175416,6273941
static void sessionPreupdateHooks(sessionPreupdateHooks175424,6274132
typedef struct SessionDiffCtx SessionDiffCtx;SessionDiffCtx175434,6274434
struct SessionDiffCtx {SessionDiffCtx175435,6274480
  sqlite3_stmt *pStmt;pStmt175436,6274504
  int nOldOff;nOldOff175437,6274527
static int sessionDiffOld(void *pCtx, int iVal, sqlite3_value **ppVal){sessionDiffOld175443,6274586
static int sessionDiffNew(void *pCtx, int iVal, sqlite3_value **ppVal){sessionDiffNew175448,6274785
static int sessionDiffCount(void *pCtx){sessionDiffCount175453,6274974
static int sessionDiffDepth(void *pCtx){sessionDiffDepth175457,6275129
static void sessionDiffHooks(sessionDiffHooks175465,6275271
static char *sessionExprComparePK(sessionExprComparePK175476,6275572
static char *sessionExprCompareOther(sessionExprCompareOther175499,6276039
static char *sessionSelectFindNew(sessionSelectFindNew175530,6276642
static int sessionDiffFindNew(sessionDiffFindNew175546,6277066
static int sessionDiffFindModified(sessionDiffFindModified175577,6277811
SQLITE_API int sqlite3session_diff(sqlite3session_diff175617,6278875
SQLITE_API int sqlite3session_create(sqlite3session_create175711,6281323
static void sessionDeleteTable(SessionTable *pList){sessionDeleteTable175749,6282722
SQLITE_API void sqlite3session_delete(sqlite3_session *pSession){sqlite3session_delete175773,6283331
SQLITE_API void sqlite3session_table_filter(sqlite3session_table_filter175802,6284226
SQLITE_API int sqlite3session_attach(sqlite3session_attach175820,6284810
static int sessionBufferGrow(SessionBuffer *p, int nByte, int *pRc){sessionBufferGrow175872,6286662
static void sessionAppendValue(SessionBuffer *p, sqlite3_value *pVal, int *pRc){sessionAppendValue175899,6287356
static void sessionAppendByte(SessionBuffer *p, u8 v, int *pRc){sessionAppendByte175921,6287960
static void sessionAppendVarint(SessionBuffer *p, int v, int *pRc){sessionAppendVarint175934,6288328
static void sessionAppendBlob(sessionAppendBlob175947,6288725
static void sessionAppendStr(sessionAppendStr175967,6289273
static void sessionAppendInteger(sessionAppendInteger175987,6289795
static void sessionAppendIdent(sessionAppendIdent176006,6290471
static void sessionAppendCol(sessionAppendCol176031,6291284
static int sessionAppendUpdate(sessionAppendUpdate176093,6293506
static int sessionAppendDelete(sessionAppendDelete176192,6296610
static int sessionSelectStmt(sessionSelectStmt176247,6298009
static int sessionSelectBind(sessionSelectBind176290,6299480
static void sessionAppendTableHdr(sessionAppendTableHdr176361,6301229
static int sessionGenerateChangeset(sessionGenerateChangeset176384,6302242
SQLITE_API int sqlite3session_changeset(sqlite3session_changeset176510,6306753
SQLITE_API int sqlite3session_changeset_strm(sqlite3session_changeset_strm176521,6307142
SQLITE_API int sqlite3session_patchset_strm(sqlite3session_patchset_strm176532,6307422
SQLITE_API int sqlite3session_patchset(sqlite3session_patchset176547,6307867
SQLITE_API int sqlite3session_enable(sqlite3_session *pSession, int bEnable){sqlite3session_enable176558,6308271
SQLITE_API int sqlite3session_indirect(sqlite3_session *pSession, int bIndirect){sqlite3session_indirect176572,6308647
SQLITE_API int sqlite3session_isempty(sqlite3_session *pSession){sqlite3session_isempty176587,6309093
static int sessionChangesetStart(sessionChangesetStart176603,6309500
SQLITE_API int sqlite3changeset_start(sqlite3changeset_start176637,6310672
SQLITE_API int sqlite3changeset_start_strm(sqlite3changeset_start_strm176648,6311064
static void sessionDiscardData(SessionInput *pIn){sessionDiscardData176660,6311455
static int sessionInputBuffer(SessionInput *pIn, int nByte){sessionInputBuffer176680,6312090
static void sessionSkipRecord(sessionSkipRecord176708,6312933
static int sessionValueSetStr(sessionValueSetStr176734,6313670
static int sessionReadRecord(sessionReadRecord176775,6315639
static int sessionChangesetBufferTblhdr(SessionInput *pIn, int *pnByte){sessionChangesetBufferTblhdr176840,6317751
static int sessionChangesetBufferRecord(sessionChangesetBufferRecord176872,6318766
static int sessionChangesetReadTblhdr(sqlite3_changeset_iter *p){sessionChangesetReadTblhdr176916,6320271
static int sessionChangesetNext(sessionChangesetNext176962,6321820
SQLITE_API int sqlite3changeset_next(sqlite3_changeset_iter *p){sqlite3changeset_next177069,6325471
SQLITE_API int sqlite3changeset_op(sqlite3changeset_op177078,6325757
SQLITE_API int sqlite3changeset_pk(sqlite3changeset_pk177098,6326520
SQLITE_API int sqlite3changeset_old(sqlite3changeset_old177121,6327456
SQLITE_API int sqlite3changeset_new(sqlite3changeset_new177149,6328492
#define sessionChangesetNew(sessionChangesetNew177169,6329197
#define sessionChangesetOld(sessionChangesetOld177170,6329277
SQLITE_API int sqlite3changeset_conflict(sqlite3changeset_conflict177183,6329820
SQLITE_API int sqlite3changeset_fk_conflicts(sqlite3changeset_fk_conflicts177206,6330624
SQLITE_API int sqlite3changeset_finalize(sqlite3_changeset_iter *p){sqlite3changeset_finalize177224,6331108
static int sessionChangesetInvert(sessionChangesetInvert177239,6331506
SQLITE_API int sqlite3changeset_invert(sqlite3changeset_invert177398,6336521
SQLITE_API int sqlite3changeset_invert_strm(sqlite3changeset_invert_strm177417,6337129
typedef struct SessionApplyCtx SessionApplyCtx;SessionApplyCtx177436,6337584
struct SessionApplyCtx {SessionApplyCtx177437,6337632
  sqlite3 *db;db177438,6337657
  sqlite3_stmt *pDelete;          /* DELETE statement */pDelete177439,6337672
  sqlite3_stmt *pUpdate;          /* UPDATE statement */pUpdate177440,6337729
  sqlite3_stmt *pInsert;          /* INSERT statement */pInsert177441,6337786
  sqlite3_stmt *pSelect;          /* SELECT statement */pSelect177442,6337843
  int nCol;                       /* Size of azCol[] and abPK[] arrays */nCol177443,6337900
  const char **azCol;             /* Array of column names */azCol177444,6337974
  u8 *abPK;                       /* Boolean array - true if column is in PK */abPK177445,6338036
  int bDeferConstraints;          /* True to defer constraints */bDeferConstraints177447,6338117
  SessionBuffer constraints;      /* Deferred constraints are stored here */constraints177448,6338183
static int sessionDeleteRow(sessionDeleteRow177468,6338917
static int sessionUpdateRow(sessionUpdateRow177551,6341487
static int sessionSelectRow(sessionSelectRow177629,6343913
static int sessionInsertRow(sessionInsertRow177647,6344514
static int sessionBindValue(sessionBindValue177681,6345485
static int sessionBindRow(sessionBindRow177714,6347028
static int sessionSeekToRow(sessionSeekToRow177757,6348867
static int sessionConflictHandler(sessionConflictHandler177817,6351450
static int sessionApplyOneOp(sessionApplyOneOp177912,6354936
static int sessionApplyOneWithRetry(sessionApplyOneWithRetry178032,6359186
static int sessionRetryConstraints(sessionRetryConstraints178089,6361441
static int sessionChangesetApply(sessionChangesetApply178143,6363259
SQLITE_API int sqlite3changeset_apply(sqlite3changeset_apply178312,6368908
SQLITE_API int sqlite3changeset_apply_strm(sqlite3changeset_apply_strm178340,6370088
struct sqlite3_changegroup {sqlite3_changegroup178366,6371125
  int rc;                         /* Error code */rc178367,6371154
  int bPatch;                     /* True to accumulate patchsets */bPatch178368,6371205
  SessionTable *pList;            /* List of tables in current patch */pList178369,6371274
static int sessionChangeMerge(sessionChangeMerge178377,6371557
static int sessionChangesetToHash(sessionChangesetToHash178500,6375816
static int sessionChangegroupOutput(sessionChangegroupOutput178623,6379679
SQLITE_API int sqlite3changegroup_new(sqlite3_changegroup **pp){sqlite3changegroup_new178675,6381026
SQLITE_API int sqlite3changegroup_add(sqlite3_changegroup *pGrp, int nData, void *pData){sqlite3changegroup_add178692,6381495
SQLITE_API int sqlite3changegroup_output(sqlite3changegroup_output178708,6382014
SQLITE_API int sqlite3changegroup_add_strm(sqlite3changegroup_add_strm178719,6382241
SQLITE_API int sqlite3changegroup_output_strm(sqlite3changegroup_output_strm178738,6382742
SQLITE_API void sqlite3changegroup_delete(sqlite3_changegroup *pGrp){sqlite3changegroup_delete178749,6382998
SQLITE_API int sqlite3changeset_concat(sqlite3changeset_concat178759,6383193
SQLITE_API int sqlite3changeset_concat_strm(sqlite3changeset_concat_strm178788,6384085
# define UNUSED_PARAM(UNUSED_PARAM178854,6386200
# define LARGEST_INT64 LARGEST_INT64178858,6386266
# define SMALLEST_INT64 SMALLEST_INT64178859,6386337
#  define safe_isdigit(safe_isdigit178869,6386631
#  define safe_isalnum(safe_isalnum178870,6386676
#  define safe_isxdigit(safe_isxdigit178871,6386721
static const char jsonIsSpace[] = {jsonIsSpace178885,6387262
#define safe_isspace(safe_isspace178903,6388165
  typedef sqlite3_uint64 u64;u64178908,6388400
  typedef unsigned int u32;u32178909,6388430
  typedef unsigned char u8;u8178910,6388458
typedef struct JsonString JsonString;JsonString178914,6388508
typedef struct JsonNode JsonNode;JsonNode178915,6388546
typedef struct JsonParse JsonParse;JsonParse178916,6388580
struct JsonString {JsonString178922,6388806
  sqlite3_context *pCtx;   /* Function context - put error messages here */pCtx178923,6388826
  char *zBuf;              /* Append JSON content here */zBuf178924,6388902
  u64 nAlloc;              /* Bytes of storage available in zBuf[] */nAlloc178925,6388960
  u64 nUsed;               /* Bytes of zBuf[] currently used */nUsed178926,6389030
  u8 bStatic;              /* True if zBuf is static space */bStatic178927,6389094
  u8 bErr;                 /* True if an error has been encountered */bErr178928,6389156
  char zSpace[100];        /* Initial static space */zSpace178929,6389227
#define JSON_NULL JSON_NULL178934,6389308
#define JSON_TRUE JSON_TRUE178935,6389332
#define JSON_FALSE JSON_FALSE178936,6389356
#define JSON_INT JSON_INT178937,6389380
#define JSON_REAL JSON_REAL178938,6389404
#define JSON_STRING JSON_STRING178939,6389428
#define JSON_ARRAY JSON_ARRAY178940,6389452
#define JSON_OBJECT JSON_OBJECT178941,6389476
#define JSON_SUBTYPE JSON_SUBTYPE178944,6389541
static const char * const jsonType[] = {jsonType178949,6389632
#define JNODE_RAW JNODE_RAW178955,6389796
#define JNODE_ESCAPE JNODE_ESCAPE178956,6389870
#define JNODE_REMOVE JNODE_REMOVE178957,6389942
#define JNODE_REPLACE JNODE_REPLACE178958,6389997
#define JNODE_PATCH JNODE_PATCH178959,6390071
#define JNODE_APPEND JNODE_APPEND178960,6390141
#define JNODE_LABEL JNODE_LABEL178961,6390221
struct JsonNode {JsonNode178966,6390323
  u8 eType;              /* One of the JSON_ type values */eType178967,6390341
  u8 jnFlags;            /* JNODE flags */jnFlags178968,6390401
  u32 n;                 /* Bytes of content, or number of sub-nodes */n178969,6390444
    const char *zJContent; /* Content for INT, REAL, and STRING */zJContent178971,6390526
    u32 iAppend;           /* More terms for ARRAY and OBJECT */iAppend178972,6390593
    u32 iKey;              /* Key for ARRAY objects in json_tree() */iKey178973,6390658
    u32 iReplace;          /* Replacement content for JNODE_REPLACE */iReplace178974,6390728
    JsonNode *pPatch;      /* Node chain of patch for JNODE_PATCH */pPatch178975,6390799
  } u;u178976,6390868
struct JsonParse {JsonParse178981,6390917
  u32 nNode;         /* Number of slots of aNode[] used */nNode178982,6390936
  u32 nAlloc;        /* Number of slots of aNode[] allocated */nAlloc178983,6390995
  JsonNode *aNode;   /* Array of nodes containing the parse */aNode178984,6391059
  const char *zJson; /* Original JSON string */zJson178985,6391122
  u32 *aUp;          /* Index of parent of each node */aUp178986,6391170
  u8 oom;            /* Set to true if out of memory */oom178987,6391226
  u8 nErr;           /* Number of errors seen */nErr178988,6391282
static void jsonZero(JsonString *p){jsonZero178997,6391595
static void jsonInit(JsonString *p, sqlite3_context *pCtx){jsonInit179006,6391764
static void jsonReset(JsonString *p){jsonReset179016,6391970
static void jsonOom(JsonString *p){jsonOom179024,6392117
static int jsonGrow(JsonString *p, u32 N){jsonGrow179033,6392355
static void jsonAppendRaw(JsonString *p, const char *zIn, u32 N){jsonAppendRaw179060,6392975
static void jsonPrintf(int N, JsonString *p, const char *zFormat, ...){jsonPrintf179068,6393230
static void jsonAppendChar(JsonString *p, char c){jsonAppendChar179079,6393552
static void jsonAppendSeparator(JsonString *p){jsonAppendSeparator179087,6393790
static void jsonAppendString(JsonString *p, const char *zIn, u32 N){jsonAppendString179099,6394169
static void jsonAppendValue(jsonAppendValue179142,6395574
static void jsonResult(JsonString *p){jsonResult179182,6396603
static u32 jsonNodeSize(JsonNode *pNode){jsonNodeSize179205,6397455
static void jsonParseReset(JsonParse *pParse){jsonParseReset179213,6397664
static void jsonRenderNode(jsonRenderNode179227,6398035
static void jsonReturnJson(jsonReturnJson179309,6400242
static void jsonReturn(jsonReturn179324,6400660
#  define JSON_NOINLINE JSON_NOINLINE179471,6404951
#  define JSON_NOINLINE JSON_NOINLINE179473,6405044
#  define JSON_NOINLINEJSON_NOINLINE179475,6405096
static JSON_NOINLINE int jsonParseAddNodeExpand(jsonParseAddNodeExpand179479,6405129
static int jsonParseAddNode(jsonParseAddNode179506,6406005
static int jsonIs4Hex(const char *z){jsonIs4Hex179527,6406594
static int jsonParseValue(JsonParse *pParse, u32 i){jsonParseValue179541,6407041
static int jsonParse(jsonParse179687,6411286
static void jsonParseFillInParentage(JsonParse *pParse, u32 i, u32 iParent){jsonParseFillInParentage179719,6412123
static int jsonParseFindParents(JsonParse *pParse){jsonParseFindParents179746,6412760
static int jsonLabelCompare(JsonNode *pNode, const char *zKey, u32 nKey){jsonLabelCompare179762,6413140
static JsonNode *jsonLookupStep(jsonLookupStep179784,6413899
static JsonNode *jsonLookupAppend(jsonLookupAppend179897,6417091
static char *jsonPathSyntaxError(const char *zErr){jsonPathSyntaxError179923,6417926
static JsonNode *jsonLookup(jsonLookup179937,6418370
static void jsonWrongNumArgs(jsonWrongNumArgs179974,6419240
static void jsonRemoveAllNulls(JsonNode *pNode){jsonRemoveAllNulls179987,6419584
static void jsonParseFunc(jsonParseFunc180014,6420332
static void jsonTest1Func(jsonTest1Func180052,6421398
static void jsonQuoteFunc(jsonQuoteFunc180072,6422057
static void jsonArrayFunc(jsonArrayFunc180091,6422490
static void jsonArrayLengthFunc(jsonArrayLengthFunc180118,6423037
static void jsonExtractFunc(jsonExtractFunc180156,6424032
static JsonNode *jsonMergePatch(jsonMergePatch180197,6424981
static void jsonPatchFunc(jsonPatchFunc180267,6427456
static void jsonObjectFunc(jsonObjectFunc180299,6428349
static void jsonRemoveFunc(jsonRemoveFunc180341,6429377
static void jsonReplaceFunc(jsonReplaceFunc180374,6430254
static void jsonSetFunc(jsonSetFunc180421,6431502
static void jsonTypeFunc(jsonTypeFunc180470,6432728
static void jsonValidFunc(jsonValidFunc180499,6433384
static void jsonArrayStep(jsonArrayStep180524,6433992
static void jsonArrayFinal(sqlite3_context *ctx){jsonArrayFinal180543,6434407
static void jsonObjectStep(jsonObjectStep180568,6435116
static void jsonObjectFinal(sqlite3_context *ctx){jsonObjectFinal180593,6435716
typedef struct JsonEachCursor JsonEachCursor;JsonEachCursor180617,6436511
struct JsonEachCursor {JsonEachCursor180618,6436557
  sqlite3_vtab_cursor base;  /* Base class - must be first */base180619,6436581
  u32 iRowid;                /* The rowid */iRowid180620,6436643
  u32 iBegin;                /* The first node of the scan */iBegin180621,6436688
  u32 i;                     /* Index in sParse.aNode[] of current row */i180622,6436750
  u32 iEnd;                  /* EOF when i equals or exceeds this value */iEnd180623,6436824
  u8 eType;                  /* Type of top-level element */eType180624,6436899
  u8 bRecursive;             /* True for json_tree().  False for json_each() */bRecursive180625,6436960
  char *zJson;               /* Input JSON */zJson180626,6437040
  char *zRoot;               /* Path by which to filter zJson */zRoot180627,6437086
  JsonParse sParse;          /* Parse of the input JSON */sParse180628,6437151
static int jsonEachConnect(jsonEachConnect180632,6437264
#define JEACH_KEY JEACH_KEY180643,6437454
#define JEACH_VALUE JEACH_VALUE180644,6437478
#define JEACH_TYPE JEACH_TYPE180645,6437502
#define JEACH_ATOM JEACH_ATOM180646,6437526
#define JEACH_ID JEACH_ID180647,6437550
#define JEACH_PARENT JEACH_PARENT180648,6437574
#define JEACH_FULLKEY JEACH_FULLKEY180649,6437598
#define JEACH_PATH JEACH_PATH180650,6437622
#define JEACH_JSON JEACH_JSON180651,6437646
#define JEACH_ROOT JEACH_ROOT180652,6437670
static int jsonEachDisconnect(sqlite3_vtab *pVtab){jsonEachDisconnect180670,6438149
static int jsonEachOpenEach(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){jsonEachOpenEach180676,6438310
static int jsonEachOpenTree(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){jsonEachOpenTree180688,6438658
static void jsonEachCursorReset(JsonEachCursor *p){jsonEachCursorReset180699,6438985
static int jsonEachClose(sqlite3_vtab_cursor *cur){jsonEachClose180712,6439259
static int jsonEachEof(sqlite3_vtab_cursor *cur){jsonEachEof180721,6439524
static int jsonEachNext(sqlite3_vtab_cursor *cur){jsonEachNext180727,6439708
static void jsonEachComputePath(jsonEachComputePath180768,6440645
static int jsonEachColumn(jsonEachColumn180795,6441438
static int jsonEachRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){jsonEachRowid180893,6444176
static int jsonEachBestIndex(jsonEachBestIndex180904,6444585
static int jsonEachFilter(jsonEachFilter180943,6445690
static sqlite3_module jsonEachModule = {jsonEachModule181022,6448020
static sqlite3_module jsonTreeModule = {jsonTreeModule181049,6449245
SQLITE_PRIVATE int sqlite3Json1Init(sqlite3 *db){sqlite3Json1Init181082,6450829
__declspec(dllexport)__declspec181153,6453626
# define NDEBUG NDEBUG181174,6454214
# undef NDEBUGNDEBUG181177,6454284
#define _FTS5_H_FTS5_H181201,6454881
typedef struct Fts5ExtensionApi Fts5ExtensionApi;Fts5ExtensionApi181216,6455187
typedef struct Fts5Context Fts5Context;Fts5Context181217,6455237
typedef struct Fts5PhraseIter Fts5PhraseIter;Fts5PhraseIter181218,6455277
typedef void (*fts5_extension_function)(fts5_extension_function181220,6455324
struct Fts5PhraseIter {Fts5PhraseIter181228,6455737
  const unsigned char *a;a181229,6455761
  const unsigned char *b;b181230,6455787
struct Fts5ExtensionApi {Fts5ExtensionApi181448,6465448
  int iVersion;                   /* Currently always set to 3 */iVersion181449,6465474
  void *(*xUserData)(Fts5Context*);xUserData181451,6465541
  int (*xColumnCount)(Fts5Context*);xColumnCount181453,6465578
  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);xRowCount181454,6465615
  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);xColumnTotalSize181455,6465671
  int (*xTokenize)(Fts5Context*, xTokenize181457,6465747
  int (*xPhraseCount)(Fts5Context*);xPhraseCount181463,6465990
  int (*xPhraseSize)(Fts5Context*, int iPhrase);xPhraseSize181464,6466027
  int (*xInstCount)(Fts5Context*, int *pnInst);xInstCount181466,6466077
  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);xInst181467,6466125
  sqlite3_int64 (*xRowid)(Fts5Context*);xRowid181469,6466205
  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);xColumnText181470,6466246
  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);xColumnSize181471,6466318
  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,xQueryPhrase181473,6466379
  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));xSetAuxdata181476,6466505
  void *(*xGetAuxdata)(Fts5Context*, int bClear);xGetAuxdata181477,6466576
  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);xPhraseFirst181479,6466627
  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);xPhraseNext181480,6466706
  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);xPhraseFirstColumn181482,6466785
  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);xPhraseNextColumn181483,6466864
typedef struct Fts5Tokenizer Fts5Tokenizer;Fts5Tokenizer181682,6477163
typedef struct fts5_tokenizer fts5_tokenizer;fts5_tokenizer181683,6477207
struct fts5_tokenizer {fts5_tokenizer181684,6477253
  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);xCreate181685,6477277
  void (*xDelete)(Fts5Tokenizer*);xDelete181686,6477355
  int (*xTokenize)(Fts5Tokenizer*, xTokenize181687,6477390
#define FTS5_TOKENIZE_QUERY FTS5_TOKENIZE_QUERY181703,6478061
#define FTS5_TOKENIZE_PREFIX FTS5_TOKENIZE_PREFIX181704,6478100
#define FTS5_TOKENIZE_DOCUMENT FTS5_TOKENIZE_DOCUMENT181705,6478139
#define FTS5_TOKENIZE_AUX FTS5_TOKENIZE_AUX181706,6478178
#define FTS5_TOKEN_COLOCATED FTS5_TOKEN_COLOCATED181710,6478352
typedef struct fts5_api fts5_api;fts5_api181719,6478652
struct fts5_api {fts5_api181720,6478686
  int iVersion;                   /* Currently always set to 2 */iVersion181721,6478704
  int (*xCreateTokenizer)(xCreateTokenizer181724,6478802
  int (*xFindTokenizer)(xFindTokenizer181733,6478993
  int (*xCreateFunction)(xCreateFunction181741,6479160
#define _FTS5INT_H_FTS5INT_H181774,6479905
typedef unsigned char  u8;u8181785,6480085
typedef unsigned int   u32;u32181786,6480112
typedef unsigned short u16;u16181787,6480140
typedef short i16;i16181788,6480168
typedef sqlite3_int64 i64;i64181789,6480187
typedef sqlite3_uint64 u64;u64181790,6480214
# define ArraySize(ArraySize181793,6480261
#define testcase(testcase181796,6480325
#define ALWAYS(ALWAYS181797,6480345
#define NEVER(NEVER181798,6480365
#define MIN(MIN181800,6480385
#define MAX(MAX181801,6480428
# define LARGEST_INT64 LARGEST_INT64181806,6480553
# define SMALLEST_INT64 SMALLEST_INT64181807,6480614
#define FTS5_MAX_TOKEN_SIZE FTS5_MAX_TOKEN_SIZE181814,6480888
#define FTS5_MAX_PREFIX_INDEXES FTS5_MAX_PREFIX_INDEXES181821,6481128
#define FTS5_DEFAULT_NEARDIST FTS5_DEFAULT_NEARDIST181823,6481164
#define FTS5_DEFAULT_RANK FTS5_DEFAULT_RANK181824,6481197
#define FTS5_RANK_NAME FTS5_RANK_NAME181827,6481272
#define FTS5_ROWID_NAME FTS5_ROWID_NAME181828,6481302
# define FTS5_CORRUPT FTS5_CORRUPT181831,6481355
# define FTS5_CORRUPT FTS5_CORRUPT181834,6481441
# define assert_nc(assert_nc181844,6481757
# define assert_nc(assert_nc181846,6481828
# define UNUSED_PARAM(UNUSED_PARAM181852,6481975
# define UNUSED_PARAM2(UNUSED_PARAM2181856,6482041
typedef struct Fts5Global Fts5Global;Fts5Global181859,6482100
typedef struct Fts5Colset Fts5Colset;Fts5Colset181860,6482138
struct Fts5Colset {Fts5Colset181868,6482459
  int nCol;nCol181869,6482479
  int aiCol[1];aiCol181870,6482491
typedef struct Fts5Config Fts5Config;Fts5Config181880,6482741
struct Fts5Config {Fts5Config181917,6483949
  sqlite3 *db;                    /* Database handle */db181918,6483969
  char *zDb;                      /* Database holding FTS index (e.g. "main") */zDb181919,6484025
  char *zName;                    /* Name of FTS index */zName181920,6484106
  int nCol;                       /* Number of columns */nCol181921,6484164
  char **azCol;                   /* Column names */azCol181922,6484222
  u8 *abUnindexed;                /* True for unindexed columns */abUnindexed181923,6484275
  int nPrefix;                    /* Number of prefix indexes */nPrefix181924,6484342
  int *aPrefix;                   /* Sizes in bytes of nPrefix prefix indexes */aPrefix181925,6484407
  int eContent;                   /* An FTS5_CONTENT value */eContent181926,6484488
  char *zContent;                 /* content table */ zContent181927,6484550
  char *zContentRowid;            /* "content_rowid=" option value */ zContentRowid181928,6484605
  int bColumnsize;                /* "columnsize=" option value (dflt==1) */bColumnsize181929,6484676
  int eDetail;                    /* FTS5_DETAIL_XXX value */eDetail181930,6484753
  char *zContentExprlist;zContentExprlist181931,6484815
  Fts5Tokenizer *pTok;pTok181932,6484841
  fts5_tokenizer *pTokApi;pTokApi181933,6484864
  int iCookie;                    /* Incremented when %_config is modified */iCookie181936,6484938
  int pgsz;                       /* Approximate page size used in %_data */pgsz181937,6485016
  int nAutomerge;                 /* 'automerge' setting */nAutomerge181938,6485093
  int nCrisisMerge;               /* Maximum allowed segments per level */nCrisisMerge181939,6485153
  int nUsermerge;                 /* 'usermerge' setting */nUsermerge181940,6485228
  int nHashSize;                  /* Bytes of memory for in-memory hash */nHashSize181941,6485288
  char *zRank;                    /* Name of rank function */zRank181942,6485363
  char *zRankArgs;                /* Arguments to rank function */zRankArgs181943,6485425
  char **pzErrmsg;pzErrmsg181946,6485563
  int bPrefixIndex;               /* True to use prefix-indexes */bPrefixIndex181949,6485603
#define FTS5_CURRENT_VERSION FTS5_CURRENT_VERSION181954,6485744
#define FTS5_CONTENT_NORMAL FTS5_CONTENT_NORMAL181956,6485776
#define FTS5_CONTENT_NONE FTS5_CONTENT_NONE181957,6485808
#define FTS5_CONTENT_EXTERNAL FTS5_CONTENT_EXTERNAL181958,6485840
#define FTS5_DETAIL_FULL FTS5_DETAIL_FULL181960,6485873
#define FTS5_DETAIL_NONE FTS5_DETAIL_NONE181961,6485903
#define FTS5_DETAIL_COLUMNS FTS5_DETAIL_COLUMNS181962,6485933
typedef struct Fts5Buffer Fts5Buffer;Fts5Buffer182002,6487205
struct Fts5Buffer {Fts5Buffer182003,6487243
  u8 *p;p182004,6487263
  int n;n182005,6487272
  int nSpace;nSpace182006,6487281
#define fts5BufferZero(fts5BufferZero182020,6487889
#define fts5BufferAppendVarint(fts5BufferAppendVarint182021,6487952
#define fts5BufferFree(fts5BufferFree182022,6488027
#define fts5BufferAppendBlob(fts5BufferAppendBlob182023,6488090
#define fts5BufferSet(fts5BufferSet182024,6488165
#define fts5BufferGrow(fts5BufferGrow182026,6488234
#define FTS5_POS2COLUMN(FTS5_POS2COLUMN182035,6488535
#define FTS5_POS2OFFSET(FTS5_POS2OFFSET182036,6488583
typedef struct Fts5PoslistReader Fts5PoslistReader;Fts5PoslistReader182038,6488639
struct Fts5PoslistReader {Fts5PoslistReader182039,6488691
  const u8 *a;                    /* Position list to iterate through */a182041,6488788
  int n;                          /* Size of buffer at a[] in bytes */n182042,6488861
  int i;                          /* Current offset in a[] */i182043,6488932
  u8 bFlag;                       /* For client use (any custom purpose) */bFlag182045,6488995
  u8 bEof;                        /* Set to true at EOF */bEof182048,6489097
  i64 iPos;                       /* (iCol<<32) + iPos */iPos182049,6489156
typedef struct Fts5PoslistWriter Fts5PoslistWriter;Fts5PoslistWriter182057,6489467
struct Fts5PoslistWriter {Fts5PoslistWriter182058,6489519
  i64 iPrev;iPrev182059,6489546
typedef struct Fts5Termset Fts5Termset;Fts5Termset182079,6490273
typedef struct Fts5Index Fts5Index;Fts5Index182093,6490830
typedef struct Fts5IndexIter Fts5IndexIter;Fts5IndexIter182094,6490866
struct Fts5IndexIter {Fts5IndexIter182096,6490911
  i64 iRowid;iRowid182097,6490934
  const u8 *pData;pData182098,6490948
  int nData;nData182099,6490967
  u8 bEof;bEof182100,6490980
#define sqlite3Fts5IterEof(sqlite3Fts5IterEof182103,6490995
#define FTS5INDEX_QUERY_PREFIX FTS5INDEX_QUERY_PREFIX182108,6491113
#define FTS5INDEX_QUERY_DESC FTS5INDEX_QUERY_DESC182109,6491176
#define FTS5INDEX_QUERY_TEST_NOIDX FTS5INDEX_QUERY_TEST_NOIDX182110,6491257
#define FTS5INDEX_QUERY_SCAN FTS5INDEX_QUERY_SCAN182111,6491331
#define FTS5INDEX_QUERY_SKIPEMPTY FTS5INDEX_QUERY_SKIPEMPTY182116,6491563
#define FTS5INDEX_QUERY_NOOUTPUT FTS5INDEX_QUERY_NOOUTPUT182117,6491605
#define fts5GetVarint32(fts5GetVarint32182264,6496389
#define fts5GetVarint fts5GetVarint182265,6496453
#define fts5FastGetVarint32(fts5FastGetVarint32182267,6496500
typedef struct Fts5Hash Fts5Hash;Fts5Hash182303,6497515
#define FTS5_STMT_SCAN_ASC FTS5_STMT_SCAN_ASC182354,6499309
#define FTS5_STMT_SCAN_DESC FTS5_STMT_SCAN_DESC182355,6499389
#define FTS5_STMT_LOOKUP FTS5_STMT_LOOKUP182356,6499470
typedef struct Fts5Storage Fts5Storage;Fts5Storage182358,6499550
typedef struct Fts5Expr Fts5Expr;Fts5Expr182401,6501367
typedef struct Fts5ExprNode Fts5ExprNode;Fts5ExprNode182402,6501401
typedef struct Fts5Parse Fts5Parse;Fts5Parse182403,6501443
typedef struct Fts5Token Fts5Token;Fts5Token182404,6501479
typedef struct Fts5ExprPhrase Fts5ExprPhrase;Fts5ExprPhrase182405,6501515
typedef struct Fts5ExprNearset Fts5ExprNearset;Fts5ExprNearset182406,6501561
struct Fts5Token {Fts5Token182408,6501610
  const char *p;                  /* Token text (not NULL terminated) */p182409,6501629
  int n;                          /* Size of buffer p in bytes */n182410,6501702
typedef struct Fts5PoslistPopulator Fts5PoslistPopulator;Fts5PoslistPopulator182444,6502752
#define FTS5_OR FTS5_OR182552,6506125
#define FTS5_AND FTS5_AND182553,6506173
#define FTS5_NOT FTS5_NOT182554,6506221
#define FTS5_TERM FTS5_TERM182555,6506269
#define FTS5_COLON FTS5_COLON182556,6506317
#define FTS5_LP FTS5_LP182557,6506365
#define FTS5_RP FTS5_RP182558,6506413
#define FTS5_MINUS FTS5_MINUS182559,6506461
#define FTS5_LCP FTS5_LCP182560,6506509
#define FTS5_RCP FTS5_RCP182561,6506557
#define FTS5_STRING FTS5_STRING182562,6506605
#define FTS5_COMMA FTS5_COMMA182563,6506653
#define FTS5_PLUS FTS5_PLUS182564,6506701
#define FTS5_STAR FTS5_STAR182565,6506749
#define fts5YYNOERRORRECOVERY fts5YYNOERRORRECOVERY182601,6508036
#define fts5yytestcase(fts5yytestcase182606,6508123
#define fts5YYPARSEFREENOTNULL fts5YYPARSEFREENOTNULL182612,6508250
#define fts5YYMALLOCARGTYPE fts5YYMALLOCARGTYPE182618,6508416
# define INTERFACE INTERFACE182675,6512200
#define fts5YYCODETYPE fts5YYCODETYPE182678,6512309
#define fts5YYNOCODE fts5YYNOCODE182679,6512346
#define fts5YYACTIONTYPE fts5YYACTIONTYPE182680,6512370
#define sqlite3Fts5ParserFTS5TOKENTYPE sqlite3Fts5ParserFTS5TOKENTYPE182681,6512409
  int fts5yyinit;fts5yyinit182683,6512474
  sqlite3Fts5ParserFTS5TOKENTYPE fts5yy0;fts5yy0182684,6512492
  int fts5yy4;fts5yy4182685,6512534
  Fts5Colset* fts5yy11;fts5yy11182686,6512549
  Fts5ExprNode* fts5yy24;fts5yy24182687,6512573
  Fts5ExprNearset* fts5yy46;fts5yy46182688,6512599
  Fts5ExprPhrase* fts5yy53;fts5yy53182689,6512628
} fts5YYMINORTYPE;fts5YYMINORTYPE182690,6512656
#define fts5YYSTACKDEPTH fts5YYSTACKDEPTH182692,6512700
#define sqlite3Fts5ParserARG_SDECL sqlite3Fts5ParserARG_SDECL182694,6512736
#define sqlite3Fts5ParserARG_PDECL sqlite3Fts5ParserARG_PDECL182695,6512790
#define sqlite3Fts5ParserARG_FETCH sqlite3Fts5ParserARG_FETCH182696,6512844
#define sqlite3Fts5ParserARG_STORE sqlite3Fts5ParserARG_STORE182697,6512921
#define fts5YYNSTATE fts5YYNSTATE182698,6512987
#define fts5YYNRULE fts5YYNRULE182699,6513023
#define fts5YY_MAX_SHIFT fts5YY_MAX_SHIFT182700,6513059
#define fts5YY_MIN_SHIFTREDUCE fts5YY_MIN_SHIFTREDUCE182701,6513095
#define fts5YY_MAX_SHIFTREDUCE fts5YY_MAX_SHIFTREDUCE182702,6513131
#define fts5YY_MIN_REDUCE fts5YY_MIN_REDUCE182703,6513167
#define fts5YY_MAX_REDUCE fts5YY_MAX_REDUCE182704,6513203
#define fts5YY_ERROR_ACTION fts5YY_ERROR_ACTION182705,6513239
#define fts5YY_ACCEPT_ACTION fts5YY_ACCEPT_ACTION182706,6513275
#define fts5YY_NO_ACTION fts5YY_NO_ACTION182707,6513311
# define fts5yytestcase(fts5yytestcase182719,6513792
#define fts5YY_ACTTAB_COUNT fts5YY_ACTTAB_COUNT182779,6516632
static const fts5YYACTIONTYPE fts5yy_action[] = {fts5yy_action182780,6516665
static const fts5YYCODETYPE fts5yy_lookahead[] = {fts5yy_lookahead182791,6517354
#define fts5YY_SHIFT_USE_DFLT fts5YY_SHIFT_USE_DFLT182802,6518044
#define fts5YY_SHIFT_COUNT fts5YY_SHIFT_COUNT182803,6518079
#define fts5YY_SHIFT_MIN fts5YY_SHIFT_MIN182804,6518114
#define fts5YY_SHIFT_MAX fts5YY_SHIFT_MAX182805,6518148
static const unsigned char fts5yy_shift_ofst[] = {fts5yy_shift_ofst182806,6518183
#define fts5YY_REDUCE_USE_DFLT fts5YY_REDUCE_USE_DFLT182811,6518453
#define fts5YY_REDUCE_COUNT fts5YY_REDUCE_COUNT182812,6518490
#define fts5YY_REDUCE_MIN fts5YY_REDUCE_MIN182813,6518523
#define fts5YY_REDUCE_MAX fts5YY_REDUCE_MAX182814,6518557
static const signed char fts5yy_reduce_ofst[] = {fts5yy_reduce_ofst182815,6518590
static const fts5YYACTIONTYPE fts5yy_default[] = {fts5yy_default182819,6518761
static const fts5YYCODETYPE fts5yyFallback[] = {fts5yyFallback182841,6519723
struct fts5yyStackEntry {fts5yyStackEntry182861,6520449
  fts5YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */stateno182862,6520475
  fts5YYCODETYPE major;      /* The major token value.  This is the codemajor182863,6520560
  fts5YYMINORTYPE minor;     /* The user-supplied minor token value.  Thisminor182865,6520705
typedef struct fts5yyStackEntry fts5yyStackEntry;fts5yyStackEntry182868,6520841
struct fts5yyParser {fts5yyParser182872,6520991
  fts5yyStackEntry *fts5yytos;          /* Pointer to top element of the stack */fts5yytos182873,6521013
  int fts5yyhwm;                    /* High-water mark of the stack */fts5yyhwm182875,6521127
  int fts5yyerrcnt;                 /* Shifts left before out of the error */fts5yyerrcnt182878,6521235
  int fts5yystksz;                  /* Current side of the stack */fts5yystksz182882,6521426
  fts5yyStackEntry *fts5yystack;        /* The parser's stack */fts5yystack182883,6521494
  fts5yyStackEntry fts5yystk0;          /* First stack entry */fts5yystk0182884,6521559
typedef struct fts5yyParser fts5yyParser;fts5yyParser182889,6521715
static FILE *fts5yyTraceFILE = 0;fts5yyTraceFILE182893,6521798
static char *fts5yyTracePrompt = 0;fts5yyTracePrompt182894,6521832
static void sqlite3Fts5ParserTrace(FILE *TraceFILE, char *zTracePrompt){sqlite3Fts5ParserTrace182915,6522380
static const char *const fts5yyTokenName[] = { fts5yyTokenName182926,6522792
static const char *const fts5yyRuleName[] = {fts5yyRuleName182940,6523416
static int fts5yyGrowStack(fts5yyParser *p){fts5yyGrowStack182976,6524648
# define fts5YYMALLOCARGTYPE fts5YYMALLOCARGTYPE183010,6525634
static void sqlite3Fts5ParserInit(void *fts5yypParser){sqlite3Fts5ParserInit183015,6525741
static void *sqlite3Fts5ParserAlloc(void *(*mallocProc)(fts5YYMALLOCARGTYPE)){sqlite3Fts5ParserAlloc183050,6526717
static void fts5yy_destructor(fts5yy_destructor183066,6527415
static void fts5yy_pop_parser_stack(fts5yyParser *pParser){fts5yy_pop_parser_stack183124,6529117
static void sqlite3Fts5ParserFinalize(void *p){sqlite3Fts5ParserFinalize183142,6529632
static void sqlite3Fts5ParserFree(sqlite3Fts5ParserFree183159,6530287
static int sqlite3Fts5ParserStackPeak(void *p){sqlite3Fts5ParserStackPeak183175,6530709
static unsigned int fts5yy_find_shift_action(fts5yy_find_shift_action183185,6530941
static int fts5yy_find_reduce_action(fts5yy_find_reduce_action183248,6532876
static void fts5yyStackOverflow(fts5yyParser *fts5yypParser){fts5yyStackOverflow183278,6533663
static void fts5yyTraceShift(fts5yyParser *fts5yypParser, int fts5yyNewState){fts5yyTraceShift183299,6534462
# define fts5yyTraceShift(fts5yyTraceShift183312,6534927
static void fts5yy_shift(fts5yy_shift183318,6534999
  fts5YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */lhs183361,6536574
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */nrhs183362,6536651
} fts5yyRuleInfo[] = {fts5yyRuleInfo183363,6536729
static void fts5yy_reduce(fts5yy_reduce183398,6537255
static void fts5yy_parse_failed(fts5yy_parse_failed183608,6545715
static void fts5yy_syntax_error(fts5yy_syntax_error183629,6546498
#define FTS5TOKEN FTS5TOKEN183635,6546792
static void fts5yy_accept(fts5yy_accept183649,6547301
static void sqlite3Fts5Parser(sqlite3Fts5Parser183688,6548641
typedef struct CInstIter CInstIter;CInstIter183881,6555755
struct CInstIter {CInstIter183882,6555791
  const Fts5ExtensionApi *pApi;   /* API offered by current FTS version */pApi183883,6555810
  Fts5Context *pFts;              /* First arg to pass to pApi functions */pFts183884,6555885
  int iCol;                       /* Column to search */iCol183885,6555961
  int iInst;                      /* Next phrase instance index */iInst183886,6556018
  int nInst;                      /* Total number of phrase instances */nInst183887,6556085
  int iStart;                     /* First token in coalesced phrase instance */iStart183890,6556184
  int iEnd;                       /* Last token in coalesced phrase instance */iEnd183891,6556265
static int fts5CInstIterNext(CInstIter *pIter){fts5CInstIterNext183898,6556493
static int fts5CInstIterInit(fts5CInstIterInit183929,6557304
typedef struct HighlightContext HighlightContext;HighlightContext183955,6557783
struct HighlightContext {HighlightContext183956,6557833
  CInstIter iter;                 /* Coalesced Instance Iterator */iter183957,6557859
  int iPos;                       /* Current token offset in zIn[] */iPos183958,6557927
  int iRangeStart;                /* First token to include */iRangeStart183959,6557997
  int iRangeEnd;                  /* If non-zero, last token to include */iRangeEnd183960,6558060
  const char *zOpen;              /* Opening highlight */zOpen183961,6558135
  const char *zClose;             /* Closing highlight */zClose183962,6558193
  const char *zIn;                /* Input text */zIn183963,6558251
  int nIn;                        /* Size of input text in bytes */nIn183964,6558302
  int iOff;                       /* Current offset within zIn[] */iOff183965,6558370
  char *zOut;                     /* Output value */zOut183966,6558438
static void fts5HighlightAppend(fts5HighlightAppend183978,6558928
static int fts5HighlightCb(fts5HighlightCb183993,6559264
static void fts5HighlightFunction(fts5HighlightFunction184047,6560907
typedef struct Fts5SFinder Fts5SFinder;Fts5SFinder184096,6562466
struct Fts5SFinder {Fts5SFinder184097,6562506
  int iPos;                       /* Current token position */iPos184098,6562527
  int nFirstAlloc;                /* Allocated size of aFirst[] */nFirstAlloc184099,6562590
  int nFirst;                     /* Number of entries in aFirst[] */nFirst184100,6562657
  int *aFirst;                    /* Array of first token in each sentence */aFirst184101,6562727
  const char *zDoc;               /* Document being tokenized */zDoc184102,6562805
static int fts5SentenceFinderAdd(Fts5SFinder *p, int iAdd){fts5SentenceFinderAdd184110,6563034
static int fts5SentenceFinderCb(fts5SentenceFinderCb184129,6563643
static int fts5SnippetScore(fts5SnippetScore184162,6564621
static void fts5SnippetFunction(fts5SnippetFunction184208,6566001
typedef struct Fts5Bm25Data Fts5Bm25Data;Fts5Bm25Data184364,6571288
struct Fts5Bm25Data {Fts5Bm25Data184365,6571330
  int nPhrase;                    /* Number of phrases in query */nPhrase184366,6571352
  double avgdl;                   /* Average number of tokens in each row */avgdl184367,6571419
  double *aIDF;                   /* IDF for each phrase */aIDF184368,6571496
  double *aFreq;                  /* Array used to calculate phrase freq. */aFreq184369,6571556
static int fts5CountCb(fts5CountCb184376,6571777
static int fts5Bm25GetData(fts5Bm25GetData184392,6572207
static void fts5Bm25Function(fts5Bm25Function184464,6574728
static int sqlite3Fts5AuxInit(fts5_api *pApi){sqlite3Fts5AuxInit184522,6576965
static int sqlite3Fts5BufferSize(int *pRc, Fts5Buffer *pBuf, u32 nByte){sqlite3Fts5BufferSize184567,6578225
static void sqlite3Fts5BufferAppendVarint(int *pRc, Fts5Buffer *pBuf, i64 iVal){sqlite3Fts5BufferAppendVarint184591,6578779
static void sqlite3Fts5Put32(u8 *aBuf, int iVal){sqlite3Fts5Put32184596,6578968
static int sqlite3Fts5Get32(const u8 *aBuf){sqlite3Fts5Get32184603,6579153
static void sqlite3Fts5BufferAppendBlob(sqlite3Fts5BufferAppendBlob184612,6579457
static void sqlite3Fts5BufferAppendString(sqlite3Fts5BufferAppendString184629,6579926
static void sqlite3Fts5BufferAppendPrintf(sqlite3Fts5BufferAppendPrintf184647,6580485
static char *sqlite3Fts5Mprintf(int *pRc, const char *zFmt, ...){sqlite3Fts5Mprintf184668,6580869
static void sqlite3Fts5BufferFree(Fts5Buffer *pBuf){sqlite3Fts5BufferFree184686,6581231
static void sqlite3Fts5BufferZero(Fts5Buffer *pBuf){sqlite3Fts5BufferZero184695,6581454
static void sqlite3Fts5BufferSet(sqlite3Fts5BufferSet184704,6581711
static int sqlite3Fts5PoslistNext64(sqlite3Fts5PoslistNext64184714,6581887
static int sqlite3Fts5PoslistReaderNext(Fts5PoslistReader *pIter){sqlite3Fts5PoslistReaderNext184744,6582611
static int sqlite3Fts5PoslistReaderInit(sqlite3Fts5PoslistReaderInit184751,6582807
static void sqlite3Fts5PoslistSafeAppend(sqlite3Fts5PoslistSafeAppend184768,6583377
static int sqlite3Fts5PoslistWriterAppend(sqlite3Fts5PoslistWriterAppend184783,6583800
static void *sqlite3Fts5MallocZero(int *pRc, int nByte){sqlite3Fts5MallocZero184794,6584124
static char *sqlite3Fts5Strndup(int *pRc, const char *pIn, int nIn){sqlite3Fts5Strndup184815,6584748
static int sqlite3Fts5IsBareword(char t){sqlite3Fts5IsBareword184843,6585453
typedef struct Fts5TermsetEntry Fts5TermsetEntry;Fts5TermsetEntry184861,6586257
struct Fts5TermsetEntry {Fts5TermsetEntry184862,6586307
  char *pTerm;pTerm184863,6586333
  int nTerm;nTerm184864,6586348
  int iIdx;                       /* Index (main or aPrefix[] entry) */iIdx184865,6586361
  Fts5TermsetEntry *pNext;pNext184866,6586433
struct Fts5Termset {Fts5Termset184869,6586464
  Fts5TermsetEntry *apHash[512];apHash184870,6586485
static int sqlite3Fts5TermsetNew(Fts5Termset **pp){sqlite3Fts5TermsetNew184873,6586522
static int sqlite3Fts5TermsetAdd(sqlite3Fts5TermsetAdd184879,6586669
static void sqlite3Fts5TermsetFree(Fts5Termset *p){sqlite3Fts5TermsetFree184928,6587972
#define FTS5_DEFAULT_PAGE_SIZE FTS5_DEFAULT_PAGE_SIZE184961,6588771
#define FTS5_DEFAULT_AUTOMERGE FTS5_DEFAULT_AUTOMERGE184962,6588809
#define FTS5_DEFAULT_USERMERGE FTS5_DEFAULT_USERMERGE184963,6588847
#define FTS5_DEFAULT_CRISISMERGE FTS5_DEFAULT_CRISISMERGE184964,6588885
#define FTS5_DEFAULT_HASHSIZE FTS5_DEFAULT_HASHSIZE184965,6588923
#define FTS5_MAX_PAGE_SIZE FTS5_MAX_PAGE_SIZE184968,6589001
static int fts5_iswhitespace(char x){fts5_iswhitespace184970,6589040
static int fts5_isopenquote(char x){fts5_isopenquote184974,6589100
static const char *fts5ConfigSkipWhitespace(const char *pIn){fts5ConfigSkipWhitespace184983,6589389
static const char *fts5ConfigSkipBareword(const char *pIn){fts5ConfigSkipBareword184996,6589745
static int fts5_isdigit(char a){fts5_isdigit185003,6589908
static const char *fts5ConfigSkipLiteral(const char *pIn){fts5ConfigSkipLiteral185009,6589975
static int fts5Dequote(char *z){fts5Dequote185085,6591820
static void sqlite3Fts5Dequote(char *z){sqlite3Fts5Dequote185130,6592884
struct Fts5Enum {Fts5Enum185141,6593139
  const char *zName;zName185142,6593157
  int eVal;eVal185143,6593178
typedef struct Fts5Enum Fts5Enum;Fts5Enum185145,6593193
static int fts5ConfigSetEnum(fts5ConfigSetEnum185147,6593228
static int fts5ConfigParseSpecial(fts5ConfigParseSpecial185176,6594018
static int fts5ConfigDefaultTokenizer(Fts5Global *pGlobal, Fts5Config *pConfig){fts5ConfigDefaultTokenizer185340,6598698
static const char *fts5ConfigGobbleWord(fts5ConfigGobbleWord185362,6599666
static int fts5ConfigParseColumn(fts5ConfigParseColumn185402,6600569
static int fts5ConfigMakeExprlist(Fts5Config *p){fts5ConfigMakeExprlist185430,6601212
static int sqlite3Fts5ConfigParse(sqlite3Fts5ConfigParse185463,6602352
static void sqlite3Fts5ConfigFree(Fts5Config *pConfig){sqlite3Fts5ConfigFree185582,6605721
static int sqlite3Fts5ConfigDeclareVtab(Fts5Config *pConfig){sqlite3Fts5ConfigDeclareVtab185609,6606529
static int sqlite3Fts5Tokenize(sqlite3Fts5Tokenize185655,6608267
static const char *fts5ConfigSkipArgs(const char *pIn){fts5ConfigSkipArgs185674,6609022
static int sqlite3Fts5ConfigParseRank(sqlite3Fts5ConfigParseRank185701,6609586
static int sqlite3Fts5ConfigSetValue(sqlite3Fts5ConfigSetValue185760,6610911
static int sqlite3Fts5ConfigLoad(Fts5Config *pConfig, int iCookie){sqlite3Fts5ConfigLoad185853,6613259
#define FTS5_EOF FTS5_EOF185927,6615291
#define FTS5_LARGEST_INT64 FTS5_LARGEST_INT64185929,6615311
typedef struct Fts5ExprTerm Fts5ExprTerm;Fts5ExprTerm185931,6615377
struct Fts5Expr {Fts5Expr185945,6615771
  Fts5Index *pIndex;pIndex185946,6615789
  Fts5Config *pConfig;pConfig185947,6615810
  Fts5ExprNode *pRoot;pRoot185948,6615833
  int bDesc;                      /* Iterate in descending rowid order */bDesc185949,6615856
  int nPhrase;                    /* Number of phrases in expression */nPhrase185950,6615930
  Fts5ExprPhrase **apExprPhrase;  /* Pointers to phrase objects */apExprPhrase185951,6616002
struct Fts5ExprNode {Fts5ExprNode185964,6616404
  int eType;                      /* Node type */eType185965,6616426
  int bEof;                       /* True at EOF */bEof185966,6616476
  int bNomatch;                   /* True if entry is not a match */bNomatch185967,6616528
  int (*xNext)(Fts5Expr*, Fts5ExprNode*, int, i64);xNext185970,6616633
  i64 iRowid;                     /* Current rowid */iRowid185972,6616686
  Fts5ExprNearset *pNear;         /* For FTS5_STRING - cluster of phrases */pNear185973,6616740
  int nChild;                     /* Number of child nodes */nChild185977,6616952
  Fts5ExprNode *apChild[1];       /* Array of child nodes */apChild185978,6617014
#define Fts5NodeIsString(Fts5NodeIsString185981,6617079
#define fts5ExprNodeNext(fts5ExprNodeNext185987,6617315
struct Fts5ExprTerm {Fts5ExprTerm185993,6617480
  int bPrefix;                    /* True for a prefix term */bPrefix185994,6617502
  char *zTerm;                    /* nul-terminated term */zTerm185995,6617565
  Fts5IndexIter *pIter;           /* Iterator for this term */pIter185996,6617625
  Fts5ExprTerm *pSynonym;         /* Pointer to first in list of synonyms */pSynonym185997,6617688
struct Fts5ExprPhrase {Fts5ExprPhrase186004,6617886
  Fts5ExprNode *pNode;            /* FTS5_STRING node this phrase is part of */pNode186005,6617910
  Fts5Buffer poslist;             /* Current position list */poslist186006,6617990
  int nTerm;                      /* Number of entries in aTerm[] */nTerm186007,6618052
  Fts5ExprTerm aTerm[1];          /* Terms that make up this phrase */aTerm186008,6618121
struct Fts5ExprNearset {Fts5ExprNearset186015,6618322
  int nNear;                      /* NEAR parameter */nNear186016,6618347
  Fts5Colset *pColset;            /* Columns to search (NULL -> all columns) */pColset186017,6618402
  int nPhrase;                    /* Number of entries in aPhrase[] array */nPhrase186018,6618482
  Fts5ExprPhrase *apPhrase[1];    /* Array of phrase pointers */apPhrase186019,6618559
struct Fts5Parse {Fts5Parse186026,6618653
  Fts5Config *pConfig;pConfig186027,6618672
  char *zErr;zErr186028,6618695
  int rc;rc186029,6618709
  int nPhrase;                    /* Size of apPhrase array */nPhrase186030,6618719
  Fts5ExprPhrase **apPhrase;      /* Array of all phrases */apPhrase186031,6618782
  Fts5ExprNode *pExpr;            /* Result of a successful parse */pExpr186032,6618843
static void sqlite3Fts5ParseError(Fts5Parse *pParse, const char *zFmt, ...){sqlite3Fts5ParseError186035,6618916
static int fts5ExprIsspace(char t){fts5ExprIsspace186045,6619159
static int fts5ExprGetToken(fts5ExprGetToken186052,6619317
static void *fts5ParseAlloc(u64 t){ return sqlite3_malloc((int)t); }fts5ParseAlloc186115,6620975
static void fts5ParseFree(void *p){ sqlite3_free(p); }fts5ParseFree186116,6621044
static int sqlite3Fts5ExprNew(sqlite3Fts5ExprNew186118,6621100
static void sqlite3Fts5ParseNodeFree(Fts5ExprNode *p){sqlite3Fts5ParseNodeFree186178,6622738
static void sqlite3Fts5ExprFree(Fts5Expr *p){sqlite3Fts5ExprFree186192,6623036
static i64 fts5ExprSynonymRowid(Fts5ExprTerm *pTerm, int bDesc, int *pbEof){fts5ExprSynonymRowid186204,6623295
static int fts5ExprSynonymList(fts5ExprSynonymList186228,6623835
static int fts5ExprPhraseIsMatch(fts5ExprPhraseIsMatch186311,6626271
typedef struct Fts5LookaheadReader Fts5LookaheadReader;Fts5LookaheadReader186392,6628698
struct Fts5LookaheadReader {Fts5LookaheadReader186393,6628754
  const u8 *a;                    /* Buffer containing position list */a186394,6628783
  int n;                          /* Size of buffer a[] in bytes */n186395,6628855
  int i;                          /* Current offset in position list */i186396,6628923
  i64 iPos;                       /* Current position */iPos186397,6628995
  i64 iLookahead;                 /* Next position */iLookahead186398,6629052
#define FTS5_LOOKAHEAD_EOF FTS5_LOOKAHEAD_EOF186401,6629110
static int fts5LookaheadReaderNext(Fts5LookaheadReader *p){fts5LookaheadReaderNext186403,6629155
static int fts5LookaheadReaderInit(fts5LookaheadReaderInit186411,6629398
typedef struct Fts5NearTrimmer Fts5NearTrimmer;Fts5NearTrimmer186422,6629720
struct Fts5NearTrimmer {Fts5NearTrimmer186423,6629768
  Fts5LookaheadReader reader;     /* Input iterator */reader186424,6629793
  Fts5PoslistWriter writer;       /* Writer context */writer186425,6629848
  Fts5Buffer *pOut;               /* Output poslist */pOut186426,6629903
static int fts5ExprNearIsMatch(int *pRc, Fts5ExprNearset *pNear){fts5ExprNearIsMatch186446,6630823
static int fts5ExprAdvanceto(fts5ExprAdvanceto186545,6634043
static int fts5ExprSynonymAdvanceto(fts5ExprSynonymAdvanceto186571,6634824
static int fts5ExprNearTest(fts5ExprNearTest186601,6635626
static int fts5ExprNearInitAll(fts5ExprNearInitAll186658,6637482
static int fts5RowidCmp(fts5RowidCmp186720,6638960
static void fts5ExprSetEof(Fts5ExprNode *pNode){fts5ExprSetEof186735,6639233
static void fts5ExprNodeZeroPoslist(Fts5ExprNode *pNode){fts5ExprNodeZeroPoslist186744,6639413
static int fts5NodeCompare(fts5NodeCompare186774,6640262
static int fts5ExprNodeTest_STRING(fts5ExprNodeTest_STRING186795,6640926
static int fts5ExprNodeNext_STRING(fts5ExprNodeNext_STRING186864,6643272
static int fts5ExprNodeTest_TERM(fts5ExprNodeTest_TERM186929,6645022
static int fts5ExprNodeNext_TERM(fts5ExprNodeNext_TERM186957,6646053
static void fts5ExprNodeTest_OR(fts5ExprNodeTest_OR186981,6646564
static int fts5ExprNodeNext_OR(fts5ExprNodeNext_OR187000,6647112
static int fts5ExprNodeTest_AND(fts5ExprNodeTest_AND187032,6647814
static int fts5ExprNodeNext_AND(fts5ExprNodeNext_AND187084,6649314
static int fts5ExprNodeTest_NOT(fts5ExprNodeTest_NOT187099,6649619
static int fts5ExprNodeNext_NOT(fts5ExprNodeNext_NOT187127,6650417
static int fts5ExprNodeTest(fts5ExprNodeTest187148,6650926
static int fts5ExprNodeFirst(Fts5Expr *pExpr, Fts5ExprNode *pNode){fts5ExprNodeFirst187193,6651991
static int sqlite3Fts5ExprFirst(Fts5Expr *p, Fts5Index *pIdx, i64 iFirst, int bDesc){sqlite3Fts5ExprFirst187252,6653789
static int sqlite3Fts5ExprNext(Fts5Expr *p, i64 iLast){sqlite3Fts5ExprNext187283,6654719
static int sqlite3Fts5ExprEof(Fts5Expr *p){sqlite3Fts5ExprEof187297,6655109
static i64 sqlite3Fts5ExprRowid(Fts5Expr *p){sqlite3Fts5ExprRowid187301,6655181
static int fts5ParseStringFromToken(Fts5Token *pToken, char **pz){fts5ParseStringFromToken187305,6655257
static void fts5ExprPhraseFree(Fts5ExprPhrase *pPhrase){fts5ExprPhraseFree187314,6655478
static Fts5ExprNearset *sqlite3Fts5ParseNearset(sqlite3Fts5ParseNearset187343,6656396
typedef struct TokenCtx TokenCtx;TokenCtx187401,6658043
struct TokenCtx {TokenCtx187402,6658077
  Fts5ExprPhrase *pPhrase;pPhrase187403,6658095
  int rc;rc187404,6658122
static int fts5ParseTokenize(fts5ParseTokenize187410,6658196
static void sqlite3Fts5ParsePhraseFree(Fts5ExprPhrase *pPhrase){sqlite3Fts5ParsePhraseFree187475,6660318
static void sqlite3Fts5ParseNearsetFree(Fts5ExprNearset *pNear){sqlite3Fts5ParseNearsetFree187482,6660480
static void sqlite3Fts5ParseFinished(Fts5Parse *pParse, Fts5ExprNode *p){sqlite3Fts5ParseFinished187493,6660726
static Fts5ExprPhrase *sqlite3Fts5ParseTerm(sqlite3Fts5ParseTerm187503,6661054
static int sqlite3Fts5ExprClonePhrase(sqlite3Fts5ExprClonePhrase187564,6663036
static void sqlite3Fts5ParseNear(Fts5Parse *pParse, Fts5Token *pTok){sqlite3Fts5ParseNear187654,6666007
static void sqlite3Fts5ParseSetDistance(sqlite3Fts5ParseSetDistance187662,6666237
static Fts5Colset *fts5ParseColset(fts5ParseColset187697,6667170
static Fts5Colset *sqlite3Fts5ParseColsetInvert(Fts5Parse *pParse, Fts5Colset *p){sqlite3Fts5ParseColsetInvert187738,6668427
static Fts5Colset *sqlite3Fts5ParseColset(sqlite3Fts5ParseColset187761,6668916
static void sqlite3Fts5ParseSetColset(sqlite3Fts5ParseSetColset187793,6669777
static void fts5ExprAssignXNext(Fts5ExprNode *pNode){fts5ExprAssignXNext187814,6670210
static void fts5ExprAddChildren(Fts5ExprNode *p, Fts5ExprNode *pSub){fts5ExprAddChildren187846,6670937
static Fts5ExprNode *sqlite3Fts5ParseNode(sqlite3Fts5ParseNode187861,6671424
static Fts5ExprNode *sqlite3Fts5ParseImplicitAnd(sqlite3Fts5ParseImplicitAnd187936,6673868
static char *fts5ExprTermPrint(Fts5ExprTerm *pTerm){fts5ExprTermPrint188000,6675571
static char *fts5PrintfAppend(char *zApp, const char *zFmt, ...){fts5PrintfAppend188032,6676296
static char *fts5ExprPrintTcl(fts5ExprPrintTcl188053,6676861
static char *fts5ExprPrint(Fts5Config *pConfig, Fts5ExprNode *pExpr){fts5ExprPrint188132,6678959
static void fts5ExprFunction(fts5ExprFunction188214,6681067
static void fts5ExprFunctionHr(fts5ExprFunctionHr188297,6683285
static void fts5ExprFunctionTcl(fts5ExprFunctionTcl188304,6683540
static void fts5ExprIsAlnum(fts5ExprIsAlnum188317,6683996
static void fts5ExprFold(fts5ExprFold188333,6684458
static int sqlite3Fts5ExprInit(Fts5Global *pGlobal, sqlite3 *db){sqlite3Fts5ExprInit188355,6685182
static int sqlite3Fts5ExprPhraseCount(Fts5Expr *pExpr){sqlite3Fts5ExprPhraseCount188385,6685983
static int sqlite3Fts5ExprPhraseSize(Fts5Expr *pExpr, int iPhrase){sqlite3Fts5ExprPhraseSize188392,6686152
static int sqlite3Fts5ExprPoslist(Fts5Expr *pExpr, int iPhrase, const u8 **pa){sqlite3Fts5ExprPoslist188401,6686414
struct Fts5PoslistPopulator {Fts5PoslistPopulator188415,6686786
  Fts5PoslistWriter writer;writer188416,6686816
  int bOk;                        /* True if ok to populate */bOk188417,6686844
  int bMiss;bMiss188418,6686907
static Fts5PoslistPopulator *sqlite3Fts5ExprClearPoslists(Fts5Expr *pExpr, int bLive){sqlite3Fts5ExprClearPoslists188421,6686924
struct Fts5ExprCtx {Fts5ExprCtx188443,6687610
  Fts5Expr *pExpr;pExpr188444,6687631
  Fts5PoslistPopulator *aPopulator;aPopulator188445,6687650
  i64 iOff;iOff188446,6687686
typedef struct Fts5ExprCtx Fts5ExprCtx;Fts5ExprCtx188448,6687701
static int fts5ExprColsetTest(Fts5Colset *pColset, int iCol){fts5ExprColsetTest188453,6687783
static int fts5ExprPopulatePoslistsCb(fts5ExprPopulatePoslistsCb188461,6687951
static int sqlite3Fts5ExprPopulatePoslists(sqlite3Fts5ExprPopulatePoslists188496,6689218
static void fts5ExprClearPoslists(Fts5ExprNode *pNode){fts5ExprClearPoslists188526,6689942
static int fts5ExprCheckPoslists(Fts5ExprNode *pNode, i64 iRowid){fts5ExprCheckPoslists188537,6690223
static void sqlite3Fts5ExprCheckPoslists(Fts5Expr *pExpr, i64 iRowid){sqlite3Fts5ExprCheckPoslists188581,6691210
static int sqlite3Fts5ExprPhraseCollist(sqlite3Fts5ExprPhraseCollist188588,6691397
typedef struct Fts5HashEntry Fts5HashEntry;Fts5HashEntry188642,6692688
struct Fts5Hash {Fts5Hash188651,6692903
  int eDetail;                    /* Copy of Fts5Config.eDetail */eDetail188652,6692921
  int *pnByte;                    /* Pointer to bytes counter */pnByte188653,6692988
  int nEntry;                     /* Number of entries currently in hash */nEntry188654,6693053
  int nSlot;                      /* Size of aSlot[] array */nSlot188655,6693129
  Fts5HashEntry *pScan;           /* Current ordered scan item */pScan188656,6693191
  Fts5HashEntry **aSlot;          /* Array of hash slots */aSlot188657,6693257
struct Fts5HashEntry {Fts5HashEntry188681,6694041
  Fts5HashEntry *pHashNext;       /* Next hash entry with same hash-key */pHashNext188682,6694064
  Fts5HashEntry *pScanNext;       /* Next entry in sorted order */pScanNext188683,6694139
  int nAlloc;                     /* Total size of allocation */nAlloc188685,6694209
  int iSzPoslist;                 /* Offset of space for 4-byte poslist size */iSzPoslist188686,6694274
  int nData;                      /* Total bytes of data (incl. structure) */nData188687,6694354
  int nKey;                       /* Length of zKey[] in bytes */nKey188688,6694432
  u8 bDel;                        /* Set delete-flag @ iSzPoslist */bDel188689,6694498
  u8 bContent;                    /* Set content-flag (detail=none mode) */bContent188690,6694567
  i16 iCol;                       /* Column of last value written */iCol188691,6694643
  int iPos;                       /* Position of last value written */iPos188692,6694712
  i64 iRowid;                     /* Rowid of last value written */iRowid188693,6694783
  char zKey[8];                   /* Nul-terminated entry key */zKey188694,6694851
#define FTS5_HASHENTRYSIZE FTS5_HASHENTRYSIZE188700,6694977
static int sqlite3Fts5HashNew(Fts5Config *pConfig, Fts5Hash **ppNew, int *pnByte){sqlite3Fts5HashNew188707,6695069
static void sqlite3Fts5HashFree(Fts5Hash *pHash){sqlite3Fts5HashFree188737,6695761
static void sqlite3Fts5HashClear(Fts5Hash *pHash){sqlite3Fts5HashClear188748,6695972
static unsigned int fts5HashKey(int nSlot, const u8 *p, int n){fts5HashKey188762,6696328
static unsigned int fts5HashKey2(int nSlot, u8 b, const u8 *p, int n){fts5HashKey2188771,6696507
static int fts5HashResize(Fts5Hash *pHash){fts5HashResize188784,6696781
static void fts5HashAddPoslistSize(Fts5Hash *pHash, Fts5HashEntry *p){fts5HashAddPoslistSize188811,6697458
static int sqlite3Fts5HashWrite(sqlite3Fts5HashWrite188851,6698646
static Fts5HashEntry *fts5HashEntryMerge(fts5HashEntryMerge189001,6703456
static int fts5HashEntrySort(fts5HashEntrySort189045,6704433
static int sqlite3Fts5HashQuery(sqlite3Fts5HashQuery189090,6705523
static int sqlite3Fts5HashScanInit(sqlite3Fts5HashScanInit189115,6706270
static void sqlite3Fts5HashScanNext(Fts5Hash *p){sqlite3Fts5HashScanNext189122,6706481
static int sqlite3Fts5HashScanEof(Fts5Hash *p){sqlite3Fts5HashScanEof189127,6706608
static void sqlite3Fts5HashScanEntry(sqlite3Fts5HashScanEntry189131,6706683
#define FTS5_OPT_WORK_UNIT FTS5_OPT_WORK_UNIT189197,6708913
#define FTS5_WORK_UNIT FTS5_WORK_UNIT189198,6708992
#define FTS5_MIN_DLIDX_SIZE FTS5_MIN_DLIDX_SIZE189200,6709070
#define FTS5_MAIN_PREFIX FTS5_MAIN_PREFIX189202,6709146
#define FTS5_AVERAGES_ROWID FTS5_AVERAGES_ROWID189364,6714682
#define FTS5_STRUCTURE_ROWID FTS5_STRUCTURE_ROWID189365,6714760
#define FTS5_DATA_ID_B FTS5_DATA_ID_B189378,6715241
#define FTS5_DATA_DLI_B FTS5_DATA_DLI_B189379,6715305
#define FTS5_DATA_HEIGHT_B FTS5_DATA_HEIGHT_B189380,6715372
#define FTS5_DATA_PAGE_B FTS5_DATA_PAGE_B189381,6715440
#define fts5_dri(fts5_dri189383,6715511
#define FTS5_SEGMENT_ROWID(FTS5_SEGMENT_ROWID189390,6715919
#define FTS5_DLIDX_ROWID(FTS5_DLIDX_ROWID189391,6715993
#define FTS5_MAX_SEGMENT FTS5_MAX_SEGMENT189396,6716128
static int sqlite3Fts5Corrupt() { return SQLITE_CORRUPT_VTAB; }sqlite3Fts5Corrupt189399,6716179
#define FTS5_DATA_ZERO_PADDING FTS5_DATA_ZERO_PADDING189408,6716461
#define FTS5_DATA_PADDING FTS5_DATA_PADDING189409,6716494
typedef struct Fts5Data Fts5Data;Fts5Data189411,6716524
typedef struct Fts5DlidxIter Fts5DlidxIter;Fts5DlidxIter189412,6716558
typedef struct Fts5DlidxLvl Fts5DlidxLvl;Fts5DlidxLvl189413,6716602
typedef struct Fts5DlidxWriter Fts5DlidxWriter;Fts5DlidxWriter189414,6716644
typedef struct Fts5Iter Fts5Iter;Fts5Iter189415,6716692
typedef struct Fts5PageWriter Fts5PageWriter;Fts5PageWriter189416,6716726
typedef struct Fts5SegIter Fts5SegIter;Fts5SegIter189417,6716772
typedef struct Fts5DoclistIter Fts5DoclistIter;Fts5DoclistIter189418,6716812
typedef struct Fts5SegWriter Fts5SegWriter;Fts5SegWriter189419,6716860
typedef struct Fts5Structure Fts5Structure;Fts5Structure189420,6716904
typedef struct Fts5StructureLevel Fts5StructureLevel;Fts5StructureLevel189421,6716948
typedef struct Fts5StructureSegment Fts5StructureSegment;Fts5StructureSegment189422,6717002
struct Fts5Data {Fts5Data189424,6717061
  u8 *p;                          /* Pointer to buffer containing record */p189425,6717079
  int nn;                         /* Size of record in bytes */nn189426,6717155
  int szLeaf;                     /* Size of leaf without page-index */szLeaf189427,6717219
struct Fts5Index {Fts5Index189433,6717333
  Fts5Config *pConfig;            /* Virtual table configuration */pConfig189434,6717352
  char *zDataTbl;                 /* Name of %_data table */zDataTbl189435,6717420
  int nWorkUnit;                  /* Leaf pages in a "unit" of work */nWorkUnit189436,6717481
  Fts5Hash *pHash;                /* Hash table for in-memory data */pHash189442,6717700
  int nPendingData;               /* Current bytes of pending data */nPendingData189443,6717770
  i64 iWriteRowid;                /* Rowid for current doc being written */iWriteRowid189444,6717840
  int bDelete;                    /* Current write is a delete */bDelete189445,6717916
  int rc;                         /* Current error code */rc189448,6718004
  sqlite3_blob *pReader;          /* RO incr-blob open on %_data table */pReader189451,6718115
  sqlite3_stmt *pWriter;          /* "INSERT ... %_data VALUES(?,?)" */pWriter189452,6718189
  sqlite3_stmt *pDeleter;         /* "DELETE FROM %_data ... id>=? AND id<=?" */pDeleter189453,6718261
  sqlite3_stmt *pIdxWriter;       /* "INSERT ... %_idx VALUES(?,?,?,?)" */pIdxWriter189454,6718342
  sqlite3_stmt *pIdxDeleter;      /* "DELETE FROM %_idx WHERE segid=? */pIdxDeleter189455,6718417
  sqlite3_stmt *pIdxSelect;pIdxSelect189456,6718490
  int nRead;                      /* Total number of blocks read */nRead189457,6718518
  sqlite3_stmt *pDataVersion;pDataVersion189459,6718587
  i64 iStructVersion;             /* data_version when pStruct read */iStructVersion189460,6718617
  Fts5Structure *pStruct;         /* Current db structure (or NULL) */pStruct189461,6718688
struct Fts5DoclistIter {Fts5DoclistIter189464,6718763
  u8 *aEof;                       /* Pointer to 1 byte past end of doclist */aEof189465,6718788
  i64 iRowid;iRowid189468,6718912
  u8 *aPoslist;aPoslist189469,6718926
  int nPoslist;nPoslist189470,6718942
  int nSize;nSize189471,6718958
struct Fts5StructureSegment {Fts5StructureSegment189479,6719174
  int iSegid;                     /* Segment id */iSegid189480,6719204
  int pgnoFirst;                  /* First leaf page number in segment */pgnoFirst189481,6719255
  int pgnoLast;                   /* Last leaf page number in segment */pgnoLast189482,6719329
struct Fts5StructureLevel {Fts5StructureLevel189484,6719405
  int nMerge;                     /* Number of segments in incr-merge */nMerge189485,6719433
  int nSeg;                       /* Total number of segments on level */nSeg189486,6719506
  Fts5StructureSegment *aSeg;     /* Array of segments. aSeg[0] is oldest. */aSeg189487,6719580
struct Fts5Structure {Fts5Structure189489,6719661
  int nRef;                       /* Object reference count */nRef189490,6719684
  u64 nWriteCounter;              /* Total leaves written to level 0 */nWriteCounter189491,6719747
  int nSegment;                   /* Total segments in this structure */nSegment189492,6719819
  int nLevel;                     /* Number of levels in this index */nLevel189493,6719892
  Fts5StructureLevel aLevel[1];   /* Array of nLevel level objects */aLevel189494,6719963
struct Fts5PageWriter {Fts5PageWriter189500,6720108
  int pgno;                       /* Page number for this page */pgno189501,6720132
  int iPrevPgidx;                 /* Previous value written into pgidx */iPrevPgidx189502,6720198
  Fts5Buffer buf;                 /* Buffer containing leaf data */buf189503,6720272
  Fts5Buffer pgidx;               /* Buffer containing page-index */pgidx189504,6720340
  Fts5Buffer term;                /* Buffer containing previous term on page */term189505,6720409
struct Fts5DlidxWriter {Fts5DlidxWriter189507,6720492
  int pgno;                       /* Page number for this page */pgno189508,6720517
  int bPrevValid;                 /* True if iPrev is valid */bPrevValid189509,6720583
  i64 iPrev;                      /* Previous rowid value written to page */iPrev189510,6720646
  Fts5Buffer buf;                 /* Buffer containing page data */buf189511,6720723
struct Fts5SegWriter {Fts5SegWriter189513,6720794
  int iSegid;                     /* Segid to write to */iSegid189514,6720817
  Fts5PageWriter writer;          /* PageWriter object */writer189515,6720875
  i64 iPrevRowid;                 /* Previous rowid written to current leaf */iPrevRowid189516,6720933
  u8 bFirstRowidInDoclist;        /* True if next rowid is first in doclist */bFirstRowidInDoclist189517,6721012
  u8 bFirstRowidInPage;           /* True if next rowid is first in page */bFirstRowidInPage189518,6721091
  u8 bFirstTermInPage;            /* True if next term will be first in leaf */bFirstTermInPage189520,6721238
  int nLeafWritten;               /* Number of leaf pages written */nLeafWritten189521,6721318
  int nEmpty;                     /* Number of contiguous term-less nodes */nEmpty189522,6721387
  int nDlidx;                     /* Allocated size of aDlidx[] array */nDlidx189524,6721465
  Fts5DlidxWriter *aDlidx;        /* Array of Fts5DlidxWriter objects */aDlidx189525,6721538
  Fts5Buffer btterm;              /* Next term to insert into %_idx table */btterm189528,6721658
  int iBtPage;                    /* Page number corresponding to btterm */iBtPage189529,6721735
typedef struct Fts5CResult Fts5CResult;Fts5CResult189532,6721815
struct Fts5CResult {Fts5CResult189533,6721855
  u16 iFirst;                     /* aSeg[] index of firstest iterator */iFirst189534,6721876
  u8 bTermEq;                     /* True if the terms are equal */bTermEq189535,6721950
struct Fts5SegIter {Fts5SegIter189584,6723696
  Fts5StructureSegment *pSeg;     /* Segment to iterate through */pSeg189585,6723717
  int flags;                      /* Mask of configuration flags */flags189586,6723784
  int iLeafPgno;                  /* Current leaf page number */iLeafPgno189587,6723852
  Fts5Data *pLeaf;                /* Current leaf data */pLeaf189588,6723917
  Fts5Data *pNextLeaf;            /* Leaf page (iLeafPgno+1) */pNextLeaf189589,6723975
  int iLeafOffset;                /* Byte offset within current leaf */iLeafOffset189590,6724039
  void (*xNext)(Fts5Index*, Fts5SegIter*, int*);xNext189593,6724132
  int iTermLeafPgno;iTermLeafPgno189597,6724323
  int iTermLeafOffset;iTermLeafOffset189598,6724344
  int iPgidxOff;                  /* Next offset in pgidx */iPgidxOff189600,6724368
  int iEndofDoclist;iEndofDoclist189601,6724429
  int iRowidOffset;               /* Current entry in aRowidOffset[] */iRowidOffset189604,6724528
  int nRowidOffset;               /* Allocated size of aRowidOffset[] array */nRowidOffset189605,6724600
  int *aRowidOffset;              /* Array of offset to rowid fields */aRowidOffset189606,6724679
  Fts5DlidxIter *pDlidx;          /* If there is a doclist-index */pDlidx189608,6724752
  Fts5Buffer term;                /* Current term */term189611,6724873
  i64 iRowid;                     /* Current rowid */iRowid189612,6724926
  int nPos;                       /* Number of bytes in current position list */nPos189613,6724980
  u8 bDel;                        /* True if the delete flag is set */bDel189614,6725061
#define ASSERT_SZLEAF_OK(ASSERT_SZLEAF_OK189621,6725223
#define FTS5_SEGITER_ONETERM FTS5_SEGITER_ONETERM189625,6725330
#define FTS5_SEGITER_REVERSE FTS5_SEGITER_REVERSE189626,6725364
#define fts5LeafIsTermless(fts5LeafIsTermless189633,6725592
#define fts5LeafTermOff(fts5LeafTermOff189635,6725648
#define fts5LeafFirstRowidOff(fts5LeafFirstRowidOff189637,6725722
struct Fts5Iter {Fts5Iter189662,6726851
  Fts5IndexIter base;             /* Base class containing output vars */base189663,6726869
  Fts5Index *pIndex;              /* Index that owns this iterator */pIndex189665,6726944
  Fts5Structure *pStruct;         /* Database structure for this iterator */pStruct189666,6727014
  Fts5Buffer poslist;             /* Buffer containing current poslist */poslist189667,6727091
  Fts5Colset *pColset;            /* Restrict matches to these columns */pColset189668,6727165
  void (*xSetOutputs)(Fts5Iter*, Fts5SegIter*);xSetOutputs189671,6727281
  int nSeg;                       /* Size of aSeg[] array */nSeg189673,6727330
  int bRev;                       /* True to iterate in reverse order */bRev189674,6727391
  u8 bSkipEmpty;                  /* True to skip deleted entries */bSkipEmpty189675,6727464
  i64 iSwitchRowid;               /* Firstest rowid of other than aFirst[1] */iSwitchRowid189677,6727534
  Fts5CResult *aFirst;            /* Current merge state (see above) */aFirst189678,6727613
  Fts5SegIter aSeg[1];            /* Array of segment iterators */aSeg189679,6727685
struct Fts5DlidxLvl {Fts5DlidxLvl189696,6728054
  Fts5Data *pData;              /* Data for current page of this level */pData189697,6728076
  int iOff;                     /* Current offset into pData */iOff189698,6728150
  int bEof;                     /* At EOF already */bEof189699,6728214
  int iFirstOff;                /* Used by reverse iterators */iFirstOff189700,6728267
  int iLeafPgno;                /* Page number of current leaf page */iLeafPgno189703,6728357
  i64 iRowid;                   /* First rowid on leaf iLeafPgno */iRowid189704,6728428
struct Fts5DlidxIter {Fts5DlidxIter189706,6728499
  int nLvl;nLvl189707,6728522
  int iSegid;iSegid189708,6728534
  Fts5DlidxLvl aLvl[1];aLvl189709,6728548
static void fts5PutU16(u8 *aOut, u16 iVal){fts5PutU16189712,6728576
static u16 fts5GetU16(const u8 *aIn){fts5GetU16189717,6728671
static void *fts5IdxMalloc(Fts5Index *p, int nByte){fts5IdxMalloc189727,6728949
static int fts5BufferCompareBlob(fts5BufferCompareBlob189740,6729313
static int fts5BufferCompare(Fts5Buffer *pLeft, Fts5Buffer *pRight){fts5BufferCompare189759,6729925
static int fts5LeafFirstTermOff(Fts5Data *pLeaf){fts5LeafFirstTermOff189765,6730133
static void fts5CloseReader(Fts5Index *p){fts5CloseReader189774,6730318
static Fts5Data *fts5DataRead(Fts5Index *p, i64 iRowid){fts5DataRead189789,6730622
static void fts5DataRelease(Fts5Data *pData){fts5DataRelease189860,6732776
static Fts5Data *fts5LeafRead(Fts5Index *p, i64 iRowid){fts5LeafRead189864,6732848
static int fts5IndexPrepareStmt(fts5IndexPrepareStmt189876,6733097
static void fts5DataWrite(Fts5Index *p, i64 iRowid, const u8 *pData, int nData){fts5DataWrite189896,6733450
static void fts5DataDelete(Fts5Index *p, i64 iFirst, i64 iLast){fts5DataDelete189919,6734104
static void fts5DataRemoveSegment(Fts5Index *p, int iSegid){fts5DataRemoveSegment189950,6734865
static void fts5StructureRelease(Fts5Structure *pStruct){fts5StructureRelease189972,6735584
static void fts5StructureRef(Fts5Structure *pStruct){fts5StructureRef189983,6735849
static int fts5StructureDecode(fts5StructureDecode189999,6736382
static void fts5StructureAddLevel(int *pRc, Fts5Structure **ppStruct){fts5StructureAddLevel190075,6738625
static void fts5StructureExtendLevel(fts5StructureExtendLevel190099,6739288
static Fts5Structure *fts5StructureReadUncached(Fts5Index *p){fts5StructureReadUncached190128,6740038
static i64 fts5IndexDataVersion(Fts5Index *p){fts5IndexDataVersion190152,6740775
static Fts5Structure *fts5StructureRead(Fts5Index *p){fts5StructureRead190183,6741652
static void fts5StructureInvalidate(Fts5Index *p){fts5StructureInvalidate190222,6742825
static int fts5StructureCountSegments(Fts5Structure *pStruct){fts5StructureCountSegments190234,6743121
#define fts5BufferSafeAppendBlob(fts5BufferSafeAppendBlob190247,6743470
#define fts5BufferSafeAppendVarint(fts5BufferSafeAppendVarint190253,6743717
static void fts5StructureWrite(Fts5Index *p, Fts5Structure *pStruct){fts5StructureWrite190265,6744111
# define fts5PrintStructure(fts5PrintStructure190317,6746017
static int fts5SegmentSize(Fts5StructureSegment *pSeg){fts5SegmentSize190320,6746058
static void fts5StructurePromoteTo(fts5StructurePromoteTo190329,6746323
static void fts5StructurePromote(fts5StructurePromote190372,6747754
static int fts5DlidxLvlNext(Fts5DlidxLvl *pLvl){fts5DlidxLvlNext190423,6749420
static int fts5DlidxIterNextR(Fts5Index *p, Fts5DlidxIter *pIter, int iLvl){fts5DlidxIterNextR190455,6750198
static int fts5DlidxIterNext(Fts5Index *p, Fts5DlidxIter *pIter){fts5DlidxIterNext190475,6750793
static int fts5DlidxIterFirst(Fts5DlidxIter *pIter){fts5DlidxIterFirst190490,6751299
static int fts5DlidxIterEof(Fts5Index *p, Fts5DlidxIter *pIter){fts5DlidxIterEof190499,6751470
static void fts5DlidxIterLast(Fts5Index *p, Fts5DlidxIter *pIter){fts5DlidxIterLast190503,6751588
static int fts5DlidxLvlPrev(Fts5DlidxLvl *pLvl){fts5DlidxLvlPrev190526,6752228
static int fts5DlidxIterPrevR(Fts5Index *p, Fts5DlidxIter *pIter, int iLvl){fts5DlidxIterPrevR190575,6753634
static int fts5DlidxIterPrev(Fts5Index *p, Fts5DlidxIter *pIter){fts5DlidxIterPrev190598,6754288
static void fts5DlidxIterFree(Fts5DlidxIter *pIter){fts5DlidxIterFree190605,6754479
static Fts5DlidxIter *fts5DlidxIterInit(fts5DlidxIterInit190615,6754675
static i64 fts5DlidxIterRowid(Fts5DlidxIter *pIter){fts5DlidxIterRowid190662,6755879
static int fts5DlidxIterPgno(Fts5DlidxIter *pIter){fts5DlidxIterPgno190665,6755966
static void fts5SegIterNextPage(fts5SegIterNextPage190672,6756116
static int fts5GetPoslistSize(const u8 *p, int *pnSz, int *pbDel){fts5GetPoslistSize190710,6757278
static void fts5SegIterLoadNPos(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterLoadNPos190731,6757810
static void fts5SegIterLoadRowid(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterLoadRowid190760,6758634
static void fts5SegIterLoadTerm(Fts5Index *p, Fts5SegIter *pIter, int nKeep){fts5SegIterLoadTerm190793,6759650
static void fts5SegIterSetNext(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterSetNext190825,6760702
static void fts5SegIterInit(fts5SegIterInit190843,6761339
static void fts5SegIterReverseInitPage(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterReverseInitPage190891,6763192
static void fts5SegIterReverseNewPage(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterReverseNewPage190944,6764465
static int fts5MultiIterIsEmpty(Fts5Index *p, Fts5Iter *pIter){fts5MultiIterIsEmpty190996,6766093
static void fts5SegIterNext_Reverse(fts5SegIterNext_Reverse191006,6766408
static void fts5SegIterNext_None(fts5SegIterNext_None191040,6767363
static void fts5SegIterNext(fts5SegIterNext191112,6769531
#define SWAPVAL(SWAPVAL191236,6773294
#define fts5IndexSkipVarint(fts5IndexSkipVarint191238,6773350
static void fts5SegIterReverse(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterReverse191248,6773679
static void fts5SegIterLoadDlidx(Fts5Index *p, Fts5SegIter *pIter){fts5SegIterLoadDlidx191334,6776718
static void fts5LeafSeek(fts5LeafSeek191368,6777996
static sqlite3_stmt *fts5IdxSelectStmt(Fts5Index *p){fts5IdxSelectStmt191491,6780891
static void fts5SegIterSeekInit(fts5SegIterSeekInit191510,6781573
static void fts5SegIterHashInit(fts5SegIterHashInit191592,6784300
static void fts5SegIterClear(Fts5SegIter *pIter){fts5SegIterClear191642,6785756
static void fts5AssertComparisonResult(fts5AssertComparisonResult191659,6786299
static void fts5AssertMultiIterSetup(Fts5Index *p, Fts5Iter *pIter){fts5AssertMultiIterSetup191701,6787386
# define fts5AssertMultiIterSetup(fts5AssertMultiIterSetup191735,6788523
static int fts5MultiIterDoCompare(Fts5Iter *pIter, int iOut){fts5MultiIterDoCompare191746,6788894
static void fts5SegIterGotoPage(fts5SegIterGotoPage191800,6790366
static void fts5SegIterNextFrom(fts5SegIterNextFrom191838,6791433
static void fts5MultiIterFree(Fts5Iter *pIter){fts5MultiIterFree191892,6793046
static void fts5MultiIterAdvanced(fts5MultiIterAdvanced191904,6793312
static int fts5MultiIterAdvanceRowid(fts5MultiIterAdvanceRowid191932,6794443
static void fts5MultiIterSetEof(Fts5Iter *pIter){fts5MultiIterSetEof191975,6795751
static void fts5MultiIterNext(fts5MultiIterNext191988,6796178
static void fts5MultiIterNext2(fts5MultiIterNext2192026,6797277
static void fts5IterSetOutputs_Noop(Fts5Iter *pUnused1, Fts5SegIter *pUnused2){fts5IterSetOutputs_Noop192055,6798035
static Fts5Iter *fts5MultiIterAlloc(fts5MultiIterAlloc192059,6798155
static void fts5PoslistCallback(fts5PoslistCallback192081,6798793
typedef struct PoslistCallbackCtx PoslistCallbackCtx;PoslistCallbackCtx192093,6799047
struct PoslistCallbackCtx {PoslistCallbackCtx192094,6799101
  Fts5Buffer *pBuf;               /* Append to this buffer */pBuf192095,6799129
  Fts5Colset *pColset;            /* Restrict matches to this column */pColset192096,6799191
  int eState;                     /* See above */eState192097,6799263
typedef struct PoslistOffsetsCtx PoslistOffsetsCtx;PoslistOffsetsCtx192100,6799317
struct PoslistOffsetsCtx {PoslistOffsetsCtx192101,6799369
  Fts5Buffer *pBuf;               /* Append to this buffer */pBuf192102,6799396
  Fts5Colset *pColset;            /* Restrict matches to this column */pColset192103,6799458
  int iRead;iRead192104,6799530
  int iWrite;iWrite192105,6799543
static int fts5IndexColsetTest(Fts5Colset *pColset, int iCol){fts5IndexColsetTest192111,6799602
static void fts5PoslistOffsetsCallback(fts5PoslistOffsetsCallback192119,6799771
static void fts5PoslistFilterCallback(fts5PoslistFilterCallback192142,6800348
static void fts5ChunkIterate(fts5ChunkIterate192194,6801682
static void fts5SegiterPoslist(fts5SegiterPoslist192241,6803108
static int fts5IndexExtractCol(fts5IndexExtractCol192276,6804281
static int fts5IndexExtractColset (fts5IndexExtractColset192313,6805474
static void fts5IterSetOutputs_None(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_None192335,6806017
static void fts5IterSetOutputs_Nocolset(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_Nocolset192345,6806340
static void fts5IterSetOutputs_ZeroColset(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_ZeroColset192370,6807277
static void fts5IterSetOutputs_Col(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_Col192380,6807628
static void fts5IterSetOutputs_Col100(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_Col100192398,6808173
static void fts5IterSetOutputs_Full(Fts5Iter *pIter, Fts5SegIter *pSeg){fts5IterSetOutputs_Full192438,6809225
static void fts5IterSetOutputCb(int *pRc, Fts5Iter *pIter){fts5IterSetOutputCb192469,6810437
static void fts5MultiIterNew(fts5MultiIterNew192512,6811678
static void fts5MultiIterNew2(fts5MultiIterNew2192613,6815268
static int fts5MultiIterEof(Fts5Index *p, Fts5Iter *pIter){fts5MultiIterEof192653,6816357
static i64 fts5MultiIterRowid(Fts5Iter *pIter){fts5MultiIterRowid192665,6816728
static void fts5MultiIterNextFrom(fts5MultiIterNextFrom192673,6816962
static const u8 *fts5MultiIterTerm(Fts5Iter *pIter, int *pn){fts5MultiIterTerm192692,6817442
static int fts5AllocateSegid(Fts5Index *p, Fts5Structure *pStruct){fts5AllocateSegid192707,6817953
static void fts5IndexDiscardData(Fts5Index *p){fts5IndexDiscardData192763,6819611
static int fts5PrefixCompress(int nOld, const u8 *pOld, const u8 *pNew){fts5PrefixCompress192778,6820005
static void fts5WriteDlidxClear(fts5WriteDlidxClear192786,6820165
static int fts5WriteDlidxGrow(fts5WriteDlidxGrow192812,6820918
static int fts5WriteFlushDlidx(Fts5Index *p, Fts5SegWriter *pWriter){fts5WriteFlushDlidx192838,6821619
static void fts5WriteFlushBtree(Fts5Index *p, Fts5SegWriter *pWriter){fts5WriteFlushBtree192862,6822467
static void fts5WriteBtreeTerm(fts5WriteBtreeTerm192890,6823593
static void fts5WriteBtreeNoTerm(fts5WriteBtreeNoTerm192904,6824044
static i64 fts5DlidxExtractFirstRowid(Fts5Buffer *pBuf){fts5DlidxExtractFirstRowid192920,6824648
static void fts5WriteDlidxAppend(fts5WriteDlidxAppend192934,6825035
static void fts5WriteFlushLeaf(Fts5Index *p, Fts5SegWriter *pWriter){fts5WriteFlushLeaf192994,6827045
static void fts5WriteAppendTerm(fts5WriteAppendTerm193043,6828546
static void fts5WriteAppendRowid(fts5WriteAppendRowid193121,6831362
static void fts5WriteAppendPoslistData(fts5WriteAppendPoslistData193154,6832402
static void fts5WriteFinish(fts5WriteFinish193188,6833245
static void fts5WriteInit(fts5WriteInit193216,6833967
static void fts5TrimSegments(Fts5Index *p, Fts5Iter *pIter){fts5TrimSegments193263,6835486
static void fts5MergeChunkCallback(fts5MergeChunkCallback193320,6837562
static void fts5IndexMergeLevel(fts5IndexMergeLevel193332,6837783
static int fts5IndexMerge(fts5IndexMerge193476,6842515
static void fts5IndexAutomerge(fts5IndexAutomerge193535,6844440
static void fts5IndexCrisismerge(fts5IndexCrisismerge193556,6845347
static int fts5IndexReturn(Fts5Index *p){fts5IndexReturn193574,6845936
typedef struct Fts5FlushCtx Fts5FlushCtx;Fts5FlushCtx193580,6846033
struct Fts5FlushCtx {Fts5FlushCtx193581,6846075
  Fts5Index *pIdx;pIdx193582,6846097
  Fts5SegWriter writer; writer193583,6846116
static int fts5PoslistPrefix(const u8 *aBuf, int nMax){fts5PoslistPrefix193591,6846327
static void fts5FlushOneHash(Fts5Index *p){fts5FlushOneHash193612,6846875
static void fts5IndexFlush(Fts5Index *p){fts5IndexFlush193764,6852566
static Fts5Structure *fts5IndexOptimizeStruct(fts5IndexOptimizeStruct193773,6852771
static int sqlite3Fts5IndexOptimize(Fts5Index *p){sqlite3Fts5IndexOptimize193835,6854745
static int sqlite3Fts5IndexMerge(Fts5Index *p, int nMerge){sqlite3Fts5IndexMerge193869,6855544
static void fts5AppendRowid(fts5AppendRowid193891,6856151
static void fts5AppendPoslist(fts5AppendPoslist193901,6856329
static void fts5DoclistIterNext(Fts5DoclistIter *pIter){fts5DoclistIterNext193917,6856723
static void fts5DoclistIterInit(fts5DoclistIterInit193943,6857290
#define fts5MergeAppendDocid(fts5MergeAppendDocid193971,6858012
static void fts5BufferSwap(Fts5Buffer *p1, Fts5Buffer *p2){fts5BufferSwap193980,6858334
static void fts5NextRowid(Fts5Buffer *pBuf, int *piOff, i64 *piRowid){fts5NextRowid193986,6858447
static void fts5MergeRowidLists(fts5MergeRowidLists194001,6858840
static void fts5MergePrefixLists(fts5MergePrefixLists194048,6860181
static void fts5SetupPrefixIter(fts5SetupPrefixIter194161,6863972
static int sqlite3Fts5IndexBeginWrite(Fts5Index *p, int bDelete, i64 iRowid){sqlite3Fts5IndexBeginWrite194261,6867016
static int sqlite3Fts5IndexSync(Fts5Index *p, int bCommit){sqlite3Fts5IndexSync194285,6867614
static int sqlite3Fts5IndexRollback(Fts5Index *p){sqlite3Fts5IndexRollback194298,6868047
static int sqlite3Fts5IndexReinit(Fts5Index *p){sqlite3Fts5IndexReinit194311,6868465
static int sqlite3Fts5IndexOpen(sqlite3Fts5IndexOpen194327,6868989
static int sqlite3Fts5IndexClose(Fts5Index *p){sqlite3Fts5IndexClose194368,6870014
static int sqlite3Fts5IndexCharlenToBytelen(sqlite3Fts5IndexCharlenToBytelen194391,6870703
static int fts5IndexCharlen(const char *pIn, int nIn){fts5IndexCharlen194411,6871142
static int sqlite3Fts5IndexWrite(sqlite3Fts5IndexWrite194433,6871823
static int sqlite3Fts5IndexQuery(sqlite3Fts5IndexQuery194469,6873002
static int sqlite3Fts5IterNext(Fts5IndexIter *pIndexIter){sqlite3Fts5IterNext194551,6875939
static int sqlite3Fts5IterNextScan(Fts5IndexIter *pIndexIter){sqlite3Fts5IterNextScan194561,6876253
static int sqlite3Fts5IterNextFrom(Fts5IndexIter *pIndexIter, i64 iMatch){sqlite3Fts5IterNextFrom194585,6876958
static const char *sqlite3Fts5IterTerm(Fts5IndexIter *pIndexIter, int *pn){sqlite3Fts5IterTerm194594,6877209
static void sqlite3Fts5IterClose(Fts5IndexIter *pIndexIter){sqlite3Fts5IterClose194604,6877484
static int sqlite3Fts5IndexGetAverages(Fts5Index *p, i64 *pnRow, i64 *anSize){sqlite3Fts5IndexGetAverages194619,6877912
static int sqlite3Fts5IndexSetAverages(Fts5Index *p, const u8 *pData, int nData){sqlite3Fts5IndexSetAverages194643,6878561
static int sqlite3Fts5IndexReads(Fts5Index *p){sqlite3Fts5IndexReads194653,6878871
static int sqlite3Fts5IndexSetCookie(Fts5Index *p, int iNew){sqlite3Fts5IndexSetCookie194664,6879156
static int sqlite3Fts5IndexLoadConfig(Fts5Index *p){sqlite3Fts5IndexLoadConfig194684,6879754
static u64 sqlite3Fts5IndexEntryCksum(sqlite3Fts5IndexEntryCksum194701,6880235
static void fts5TestDlidxReverse(fts5TestDlidxReverse194727,6880944
static int fts5QueryCksum(fts5QueryCksum194763,6881956
static void fts5TestTerm(fts5TestTerm194807,6883344
# define fts5TestDlidxReverse(fts5TestDlidxReverse194870,6885513
# define fts5TestTerm(fts5TestTerm194871,6885550
static void fts5IndexIntegrityCheckEmpty(fts5IndexIntegrityCheckEmpty194882,6885824
static void fts5IntegrityCheckPgidx(Fts5Index *p, Fts5Data *pLeaf){fts5IntegrityCheckPgidx194903,6886457
static void fts5IndexIntegrityCheckSegment(fts5IndexIntegrityCheckSegment194953,6887724
static int sqlite3Fts5IndexIntegrityCheck(Fts5Index *p, u64 cksum){sqlite3Fts5IndexIntegrityCheck195097,6892842
static void fts5DecodeRowid(fts5DecodeRowid195188,6896385
static void fts5DebugRowid(int *pRc, Fts5Buffer *pBuf, i64 iKey){fts5DebugRowid195207,6897034
static void fts5DebugStructure(fts5DebugStructure195225,6897583
static void fts5DecodeStructure(fts5DecodeStructure195254,6898553
static void fts5DecodeAverages(fts5DecodeAverages195279,6899219
static int fts5DecodePoslist(int *pRc, Fts5Buffer *pBuf, const u8 *a, int n){fts5DecodePoslist195302,6899880
static int fts5DecodeDoclist(int *pRc, Fts5Buffer *pBuf, const u8 *a, int n){fts5DecodeDoclist195320,6900441
static void fts5DecodeRowidList(fts5DecodeRowidList195358,6901709
static void fts5DecodeFunction(fts5DecodeFunction195389,6902428
static void fts5RowidFunction(fts5RowidFunction195576,6907793
static int sqlite3Fts5IndexInit(sqlite3 *db){sqlite3Fts5IndexInit195615,6909025
static int sqlite3Fts5IndexReset(Fts5Index *p){sqlite3Fts5IndexReset195636,6909499
SQLITE_API int sqlite3_fts5_may_be_corrupt = 1;sqlite3_fts5_may_be_corrupt195668,6910491
typedef struct Fts5Auxdata Fts5Auxdata;Fts5Auxdata195671,6910541
typedef struct Fts5Auxiliary Fts5Auxiliary;Fts5Auxiliary195672,6910581
typedef struct Fts5Cursor Fts5Cursor;Fts5Cursor195673,6910625
typedef struct Fts5Sorter Fts5Sorter;Fts5Sorter195674,6910663
typedef struct Fts5Table Fts5Table;Fts5Table195675,6910701
typedef struct Fts5TokenizerModule Fts5TokenizerModule;Fts5TokenizerModule195676,6910737
struct Fts5TransactionState {Fts5TransactionState195709,6912059
  int eState;                     /* 0==closed, 1==open, 2==synced */eState195710,6912089
  int iSavepoint;                 /* Number of open savepoints (0 -> none) */iSavepoint195711,6912159
struct Fts5Global {Fts5Global195719,6912459
  fts5_api api;                   /* User visible part of object (see fts5.h) */api195720,6912479
  sqlite3 *db;                    /* Associated database connection */ db195721,6912560
  i64 iNextId;                    /* Used to allocate unique cursor ids */iNextId195722,6912632
  Fts5Auxiliary *pAux;            /* First in list of all aux. functions */pAux195723,6912707
  Fts5TokenizerModule *pTok;      /* First in list of all tokenizer modules */pTok195724,6912783
  Fts5TokenizerModule *pDfltTok;  /* Default tokenizer module */pDfltTok195725,6912862
  Fts5Cursor *pCsr;               /* First in list of all open cursors */pCsr195726,6912927
struct Fts5Auxiliary {Fts5Auxiliary195734,6913192
  Fts5Global *pGlobal;            /* Global context for this function */pGlobal195735,6913215
  char *zFunc;                    /* Function name (nul-terminated) */zFunc195736,6913288
  void *pUserData;                /* User-data pointer */pUserData195737,6913359
  fts5_extension_function xFunc;  /* Callback function */xFunc195738,6913417
  void (*xDestroy)(void*);        /* Destructor function */xDestroy195739,6913475
  Fts5Auxiliary *pNext;           /* Next registered auxiliary function */pNext195740,6913535
struct Fts5TokenizerModule {Fts5TokenizerModule195748,6913799
  char *zName;                    /* Name of tokenizer */zName195749,6913828
  void *pUserData;                /* User pointer passed to xCreate() */pUserData195750,6913886
  fts5_tokenizer x;               /* Tokenizer functions */x195751,6913959
  void (*xDestroy)(void*);        /* Destructor function */xDestroy195752,6914019
  Fts5TokenizerModule *pNext;     /* Next registered tokenizer module */pNext195753,6914079
struct Fts5Table {Fts5Table195759,6914187
  sqlite3_vtab base;              /* Base class used by SQLite core */base195760,6914206
  Fts5Config *pConfig;            /* Virtual table configuration */pConfig195761,6914277
  Fts5Index *pIndex;              /* Full-text index */pIndex195762,6914345
  Fts5Storage *pStorage;          /* Document store */pStorage195763,6914401
  Fts5Global *pGlobal;            /* Global (connection wide) data */pGlobal195764,6914456
  Fts5Cursor *pSortCsr;           /* Sort data from this cursor */pSortCsr195765,6914526
  struct Fts5TransactionState ts;ts195767,6914613
struct Fts5MatchPhrase {Fts5MatchPhrase195771,6914658
  Fts5Buffer *pPoslist;           /* Pointer to current poslist */pPoslist195772,6914683
  int nTerm;                      /* Size of phrase in terms */nTerm195773,6914750
struct Fts5Sorter {Fts5Sorter195785,6915111
  sqlite3_stmt *pStmt;pStmt195786,6915131
  i64 iRowid;                     /* Current rowid */iRowid195787,6915154
  const u8 *aPoslist;             /* Position lists for current row */aPoslist195788,6915208
  int nIdx;                       /* Number of entries in aIdx[] */nIdx195789,6915279
  int aIdx[1];                    /* Offsets into aPoslist for current row */aIdx195790,6915347
struct Fts5Cursor {Fts5Cursor195813,6916174
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base195814,6916194
  Fts5Cursor *pNext;              /* Next cursor in Fts5Cursor.pCsr list */pNext195815,6916265
  int *aColumnSize;               /* Values for xColumnSize() */aColumnSize195816,6916341
  i64 iCsrId;                     /* Cursor id */iCsrId195817,6916406
  int ePlan;                      /* FTS5_PLAN_XXX value */ePlan195820,6916510
  int bDesc;                      /* True for "ORDER BY rowid DESC" queries */bDesc195821,6916570
  i64 iFirstRowid;                /* Return no rowids earlier than this */iFirstRowid195822,6916649
  i64 iLastRowid;                 /* Return no rowids later than this */iLastRowid195823,6916724
  sqlite3_stmt *pStmt;            /* Statement used to read %_content */pStmt195824,6916797
  Fts5Expr *pExpr;                /* Expression for MATCH queries */pExpr195825,6916870
  Fts5Sorter *pSorter;            /* Sorter for "ORDER BY rank" queries */pSorter195826,6916939
  int csrflags;                   /* Mask of cursor flags (see below) */csrflags195827,6917014
  i64 iSpecial;                   /* Result of special query */iSpecial195828,6917087
  char *zRank;                    /* Custom rank function */zRank195831,6917218
  char *zRankArgs;                /* Custom rank function args */zRankArgs195832,6917279
  Fts5Auxiliary *pRank;           /* Rank callback (or NULL) */pRank195833,6917345
  int nRankArg;                   /* Number of trailing arguments for rank() */nRankArg195834,6917409
  sqlite3_value **apRankArg;      /* Array of trailing arguments */apRankArg195835,6917489
  sqlite3_stmt *pRankArgStmt;     /* Origin of objects in apRankArg[] */pRankArgStmt195836,6917557
  Fts5Auxiliary *pAux;            /* Currently executing extension function */pAux195839,6917662
  Fts5Auxdata *pAuxdata;          /* First in linked list of saved aux-data */pAuxdata195840,6917741
  Fts5PoslistReader *aInstIter;   /* One for each phrase */aInstIter195843,6917888
  int nInstAlloc;                 /* Size of aInst[] array (entries / 3) */nInstAlloc195844,6917948
  int nInstCount;                 /* Number of phrase instances */nInstCount195845,6918024
  int *aInst;                     /* 3 integers per phrase instance */aInst195846,6918091
#define FTS5_BI_MATCH FTS5_BI_MATCH195853,6918268
#define FTS5_BI_RANK FTS5_BI_RANK195854,6918332
#define FTS5_BI_ROWID_EQ FTS5_BI_ROWID_EQ195855,6918395
#define FTS5_BI_ROWID_LE FTS5_BI_ROWID_LE195856,6918456
#define FTS5_BI_ROWID_GE FTS5_BI_ROWID_GE195857,6918517
#define FTS5_BI_ORDER_RANK FTS5_BI_ORDER_RANK195859,6918579
#define FTS5_BI_ORDER_ROWID FTS5_BI_ORDER_ROWID195860,6918615
#define FTS5_BI_ORDER_DESC FTS5_BI_ORDER_DESC195861,6918651
#define FTS5CSR_EOF FTS5CSR_EOF195866,6918728
#define FTS5CSR_REQUIRE_CONTENT FTS5CSR_REQUIRE_CONTENT195867,6918767
#define FTS5CSR_REQUIRE_DOCSIZE FTS5CSR_REQUIRE_DOCSIZE195868,6918806
#define FTS5CSR_REQUIRE_INST FTS5CSR_REQUIRE_INST195869,6918845
#define FTS5CSR_FREE_ZRANK FTS5CSR_FREE_ZRANK195870,6918884
#define FTS5CSR_REQUIRE_RESEEK FTS5CSR_REQUIRE_RESEEK195871,6918923
#define FTS5CSR_REQUIRE_POSLIST FTS5CSR_REQUIRE_POSLIST195872,6918962
#define BitFlagAllTest(BitFlagAllTest195874,6919002
#define BitFlagTest(BitFlagTest195875,6919049
#define CsrFlagSet(CsrFlagSet195881,6919155
#define CsrFlagClear(CsrFlagClear195882,6919217
#define CsrFlagTest(CsrFlagTest195883,6919280
struct Fts5Auxdata {Fts5Auxdata195885,6919342
  Fts5Auxiliary *pAux;            /* Extension to which this belongs */pAux195886,6919363
  void *pPtr;                     /* Pointer value */pPtr195887,6919435
  void(*xDelete)(void*);          /* Destructor */xDelete195888,6919489
  Fts5Auxdata *pNext;             /* Next object in linked list */pNext195889,6919540
#define FTS5_BEGIN FTS5_BEGIN195893,6919631
#define FTS5_SYNC FTS5_SYNC195894,6919657
#define FTS5_COMMIT FTS5_COMMIT195895,6919683
#define FTS5_ROLLBACK FTS5_ROLLBACK195896,6919709
#define FTS5_SAVEPOINT FTS5_SAVEPOINT195897,6919735
#define FTS5_RELEASE FTS5_RELEASE195898,6919761
#define FTS5_ROLLBACKTO FTS5_ROLLBACKTO195899,6919787
static void fts5CheckTransactionState(Fts5Table *p, int op, int iSavepoint){fts5CheckTransactionState195900,6919813
# define fts5CheckTransactionState(fts5CheckTransactionState195946,6920919
static int fts5IsContentless(Fts5Table *pTab){fts5IsContentless195952,6921022
static void fts5FreeVtab(Fts5Table *pTab){fts5FreeVtab195959,6921194
static int fts5DisconnectMethod(sqlite3_vtab *pVtab){fts5DisconnectMethod195971,6921459
static int fts5DestroyMethod(sqlite3_vtab *pVtab){fts5DestroyMethod195979,6921617
static int fts5InitVtab(fts5InitVtab195999,6922166
static int fts5ConnectMethod(fts5ConnectMethod196065,6924346
static int fts5CreateMethod(fts5CreateMethod196075,6924866
#define FTS5_PLAN_MATCH FTS5_PLAN_MATCH196089,6925422
#define FTS5_PLAN_SOURCE FTS5_PLAN_SOURCE196090,6925485
#define FTS5_PLAN_SPECIAL FTS5_PLAN_SPECIAL196091,6925565
#define FTS5_PLAN_SORTED_MATCH FTS5_PLAN_SORTED_MATCH196092,6925630
#define FTS5_PLAN_SCAN FTS5_PLAN_SCAN196093,6925707
#define FTS5_PLAN_ROWID FTS5_PLAN_ROWID196094,6925775
static void fts5SetUniqueFlag(sqlite3_index_info *pIdxInfo){fts5SetUniqueFlag196101,6926053
static int fts5BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){fts5BestIndexMethod196149,6927623
static int fts5NewTransaction(Fts5Table *pTab){fts5NewTransaction196243,6931173
static int fts5OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts5OpenMethod196254,6931462
static int fts5StmtType(Fts5Cursor *pCsr){fts5StmtType196280,6932296
static void fts5CsrNewrow(Fts5Cursor *pCsr){fts5CsrNewrow196292,6932686
static void fts5FreeCursorComponents(Fts5Cursor *pCsr){fts5FreeCursorComponents196301,6932880
static int fts5CloseMethod(sqlite3_vtab_cursor *pCursor){fts5CloseMethod196344,6934012
static int fts5SorterNext(Fts5Cursor *pCsr){fts5SorterNext196360,6934440
static void fts5TripCursors(Fts5Table *pTab){fts5TripCursors196403,6935406
static int fts5CursorReseek(Fts5Cursor *pCsr, int *pbSkip){fts5CursorReseek196426,6936222
static int fts5NextMethod(sqlite3_vtab_cursor *pCursor){fts5NextMethod196458,6937177
static int fts5PrepareStatement(fts5PrepareStatement196502,6938213
static int fts5CursorFirstSorted(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){fts5CursorFirstSorted196530,6938748
static int fts5CursorFirst(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){fts5CursorFirst196578,6940271
static int fts5SpecialMatch(fts5SpecialMatch196595,6940815
static Fts5Auxiliary *fts5FindAuxiliary(Fts5Table *pTab, const char *zName){fts5FindAuxiliary196630,6941834
static int fts5FindRankFunction(Fts5Cursor *pCsr){fts5FindRankFunction196642,6942138
static int fts5CursorParseRank(fts5CursorParseRank196692,6943594
static i64 fts5GetRowidLimit(sqlite3_value *pVal, i64 iDefault){fts5GetRowidLimit196729,6944523
static int fts5FilterMethod(fts5FilterMethod196750,6945061
static int fts5EofMethod(sqlite3_vtab_cursor *pCursor){fts5EofMethod196888,6950679
static i64 fts5CursorRowid(Fts5Cursor *pCsr){fts5CursorRowid196896,6950895
static int fts5RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){fts5RowidMethod196914,6951440
static int fts5SeekCursor(Fts5Cursor *pCsr, int bErrormsg){fts5SeekCursor196945,6952234
static void fts5SetVtabError(Fts5Table *p, const char *zFormat, ...){fts5SetVtabError196977,6953208
static int fts5SpecialInsert(fts5SpecialInsert197000,6954063
static int fts5SpecialDelete(fts5SpecialDelete197055,6955887
static void fts5StorageInsert(fts5StorageInsert197068,6956207
static int fts5UpdateMethod(fts5UpdateMethod197098,6957038
static int fts5SyncMethod(sqlite3_vtab *pVtab){fts5SyncMethod197219,6961194
static int fts5BeginMethod(sqlite3_vtab *pVtab){fts5BeginMethod197233,6961556
static int fts5CommitMethod(sqlite3_vtab *pVtab){fts5CommitMethod197244,6961910
static int fts5RollbackMethod(sqlite3_vtab *pVtab){fts5RollbackMethod197254,6962271
static void *fts5ApiUserData(Fts5Context *pCtx){fts5ApiUserData197264,6962556
static int fts5ApiColumnCount(Fts5Context *pCtx){fts5ApiColumnCount197269,6962680
static int fts5ApiColumnTotalSize(fts5ApiColumnTotalSize197274,6962831
static int fts5ApiRowCount(Fts5Context *pCtx, i64 *pnRow){fts5ApiRowCount197284,6963088
static int fts5ApiTokenize(fts5ApiTokenize197290,6963302
static int fts5ApiPhraseCount(Fts5Context *pCtx){fts5ApiPhraseCount197303,6963665
static int fts5ApiPhraseSize(Fts5Context *pCtx, int iPhrase){fts5ApiPhraseSize197308,6963808
static int fts5ApiColumnText(fts5ApiColumnText197313,6963971
static int fts5CsrPoslist(fts5CsrPoslist197334,6964432
static int fts5CacheInstArray(Fts5Cursor *pCsr){fts5CacheInstArray197386,6965941
static int fts5ApiInstCount(Fts5Context *pCtx, int *pnInst){fts5ApiInstCount197453,6967783
static int fts5ApiInst(fts5ApiInst197463,6968060
static sqlite3_int64 fts5ApiRowid(Fts5Context *pCtx){fts5ApiRowid197492,6968735
static int fts5ColumnSizeCb(fts5ColumnSizeCb197496,6968837
static int fts5ApiColumnSize(Fts5Context *pCtx, int iCol, int *pnToken){fts5ApiColumnSize197513,6969375
static int fts5ApiSetAuxdata(fts5ApiSetAuxdata197566,6970854
static void *fts5ApiGetAuxdata(Fts5Context *pCtx, int bClear){fts5ApiGetAuxdata197601,6971822
static void fts5ApiPhraseNext(fts5ApiPhraseNext197621,6972203
static int fts5ApiPhraseFirst(fts5ApiPhraseFirst197643,6972669
static void fts5ApiPhraseNextColumn(fts5ApiPhraseNextColumn197661,6973052
static int fts5ApiPhraseFirstColumn(fts5ApiPhraseFirstColumn197691,6973754
static const Fts5ExtensionApi sFts5Api = {sFts5Api197739,6974942
static int fts5ApiQueryPhrase(fts5ApiQueryPhrase197765,6975495
static void fts5ApiInvoke(fts5ApiInvoke197802,6976531
static Fts5Cursor *fts5CursorFromCsrid(Fts5Global *pGlobal, i64 iCsrId){fts5CursorFromCsrid197815,6976803
static void fts5ApiCallback(fts5ApiCallback197823,6977007
static Fts5Index *sqlite3Fts5IndexFromCsrid(sqlite3Fts5IndexFromCsrid197855,6977786
static int fts5PoslistBlob(sqlite3_context *pCtx, Fts5Cursor *pCsr){fts5PoslistBlob197885,6978947
static int fts5ColumnMethod(fts5ColumnMethod197942,6980608
static int fts5FindFunctionMethod(fts5FindFunctionMethod197993,6982256
static int fts5RenameMethod(fts5RenameMethod198018,6982998
static int fts5SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){fts5SavepointMethod198031,6983344
static int fts5ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){fts5ReleaseMethod198044,6983725
static int fts5RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){fts5RollbackToMethod198057,6984137
static int fts5CreateAux(fts5CreateAux198068,6984538
static int fts5CreateTokenizer(fts5CreateTokenizer198107,6985821
static Fts5TokenizerModule *fts5LocateTokenizer(fts5LocateTokenizer198142,6986946
static int fts5FindTokenizer(fts5FindTokenizer198163,6987372
static int sqlite3Fts5GetTokenizer(sqlite3Fts5GetTokenizer198184,6987911
static void fts5ModuleDestroy(void *pCtx){fts5ModuleDestroy198216,6988622
static void fts5Fts5Func(fts5Fts5Func198236,6989137
static void fts5SourceIdFunc(fts5SourceIdFunc198253,6989690
static int fts5Init(sqlite3 *db){fts5Init198263,6990101
__declspec(dllexport)__declspec198346,6993114
__declspec(dllexport)__declspec198359,6993362
SQLITE_PRIVATE int sqlite3Fts5Init(sqlite3 *db){sqlite3Fts5Init198371,6993602
struct Fts5Storage {Fts5Storage198394,6994095
  Fts5Config *pConfig;pConfig198395,6994116
  Fts5Index *pIndex;pIndex198396,6994139
  int bTotalsValid;               /* True if nTotalRow/aTotalSize[] are valid */bTotalsValid198397,6994160
  i64 nTotalRow;                  /* Total number of rows in FTS table */nTotalRow198398,6994241
  i64 *aTotalSize;                /* Total sizes of each column */ aTotalSize198399,6994315
  sqlite3_stmt *aStmt[11];aStmt198400,6994383
#define FTS5_STMT_INSERT_CONTENT FTS5_STMT_INSERT_CONTENT198414,6994632
#define FTS5_STMT_REPLACE_CONTENT FTS5_STMT_REPLACE_CONTENT198415,6994668
#define FTS5_STMT_DELETE_CONTENT FTS5_STMT_DELETE_CONTENT198416,6994704
#define FTS5_STMT_REPLACE_DOCSIZE FTS5_STMT_REPLACE_DOCSIZE198417,6994740
#define FTS5_STMT_DELETE_DOCSIZE FTS5_STMT_DELETE_DOCSIZE198418,6994777
#define FTS5_STMT_LOOKUP_DOCSIZE FTS5_STMT_LOOKUP_DOCSIZE198419,6994813
#define FTS5_STMT_REPLACE_CONFIG FTS5_STMT_REPLACE_CONFIG198420,6994849
#define FTS5_STMT_SCAN FTS5_STMT_SCAN198421,6994884
static int fts5StorageGetStmt(fts5StorageGetStmt198429,6995141
static int fts5ExecPrintf(fts5ExecPrintf198528,6998280
static int sqlite3Fts5DropAll(Fts5Config *pConfig){sqlite3Fts5DropAll198556,6998778
static void fts5StorageRenameOne(fts5StorageRenameOne198580,6999520
static int sqlite3Fts5StorageRename(Fts5Storage *pStorage, const char *zName){sqlite3Fts5StorageRename198594,7000020
static int sqlite3Fts5CreateTable(sqlite3Fts5CreateTable198614,7000708
static int sqlite3Fts5StorageOpen(sqlite3Fts5StorageOpen198649,7001771
static int sqlite3Fts5StorageClose(Fts5Storage *p){sqlite3Fts5StorageClose198715,7003639
typedef struct Fts5InsertCtx Fts5InsertCtx;Fts5InsertCtx198730,7003901
struct Fts5InsertCtx {Fts5InsertCtx198731,7003945
  Fts5Storage *pStorage;pStorage198732,7003968
  int iCol;iCol198733,7003993
  int szCol;                      /* Size of column value in tokens */szCol198734,7004005
static int fts5StorageInsertCallback(fts5StorageInsertCallback198740,7004158
static int fts5StorageDeleteFromIndex(fts5StorageDeleteFromIndex198763,7005100
static int fts5StorageInsertDocsize(fts5StorageInsertDocsize198821,7006819
static int fts5StorageLoadTotals(Fts5Storage *p, int bCache){fts5StorageLoadTotals198850,7007800
static int fts5StorageSaveTotals(Fts5Storage *p){fts5StorageSaveTotals198866,7008250
static int sqlite3Fts5StorageDelete(Fts5Storage *p, i64 iDel, sqlite3_value **apVal){sqlite3Fts5StorageDelete198888,7008736
static int sqlite3Fts5StorageDeleteAll(Fts5Storage *p){sqlite3Fts5StorageDeleteAll198929,7009779
static int sqlite3Fts5StorageRebuild(Fts5Storage *p){sqlite3Fts5StorageRebuild198958,7010605
static int sqlite3Fts5StorageOptimize(Fts5Storage *p){sqlite3Fts5StorageOptimize199010,7012020
static int sqlite3Fts5StorageMerge(Fts5Storage *p, int nMerge){sqlite3Fts5StorageMerge199014,7012124
static int sqlite3Fts5StorageReset(Fts5Storage *p){sqlite3Fts5StorageReset199018,7012242
static int fts5StorageNewRowid(Fts5Storage *p, i64 *piRowid){fts5StorageNewRowid199031,7012733
static int sqlite3Fts5StorageContentInsert(sqlite3Fts5StorageContentInsert199052,7013299
static int sqlite3Fts5StorageIndexInsert(sqlite3Fts5StorageIndexInsert199087,7014297
static int fts5StorageCount(Fts5Storage *p, const char *zSuffix, i64 *pnRow){fts5StorageCount199129,7015505
typedef struct Fts5IntegrityCtx Fts5IntegrityCtx;Fts5IntegrityCtx199157,7016165
struct Fts5IntegrityCtx {Fts5IntegrityCtx199158,7016215
  i64 iRowid;iRowid199159,7016241
  int iCol;iCol199160,7016255
  int szCol;szCol199161,7016267
  u64 cksum;cksum199162,7016280
  Fts5Termset *pTermset;pTermset199163,7016293
  Fts5Config *pConfig;pConfig199164,7016318
static int fts5StorageIntegrityCallback(fts5StorageIntegrityCallback199171,7016402
static int sqlite3Fts5StorageIntegrity(Fts5Storage *p){sqlite3Fts5StorageIntegrity199241,7018398
static int sqlite3Fts5StorageStmt(sqlite3Fts5StorageStmt199342,7021853
static void sqlite3Fts5StorageStmtRelease(sqlite3Fts5StorageStmtRelease199366,7022455
static int fts5StorageDecodeSizeArray(fts5StorageDecodeSizeArray199383,7022796
static int sqlite3Fts5StorageDocsize(Fts5Storage *p, i64 iRowid, int *aCol){sqlite3Fts5StorageDocsize199404,7023423
static int sqlite3Fts5StorageSize(Fts5Storage *p, int iCol, i64 *pnToken){sqlite3Fts5StorageSize199430,7024270
static int sqlite3Fts5StorageRowCount(Fts5Storage *p, i64 *pnRow){sqlite3Fts5StorageRowCount199448,7024683
static int sqlite3Fts5StorageSync(Fts5Storage *p, int bCommit){sqlite3Fts5StorageSync199459,7024918
static int sqlite3Fts5StorageRollback(Fts5Storage *p){sqlite3Fts5StorageRollback199473,7025324
static int sqlite3Fts5StorageConfigValue(sqlite3Fts5StorageConfigValue199478,7025451
static unsigned char aAsciiTokenChar[128] = {aAsciiTokenChar199530,7026825
typedef struct AsciiTokenizer AsciiTokenizer;AsciiTokenizer199541,7027443
struct AsciiTokenizer {AsciiTokenizer199542,7027489
  unsigned char aTokenChar[128];aTokenChar199543,7027513
static void fts5AsciiAddExceptions(fts5AsciiAddExceptions199546,7027550
static void fts5AsciiDelete(Fts5Tokenizer *p){fts5AsciiDelete199562,7027830
static int fts5AsciiCreate(fts5AsciiCreate199569,7027937
static void asciiFold(char *aOut, const char *aIn, int nByte){asciiFold199610,7028912
static int fts5AsciiTokenize(fts5AsciiTokenize199622,7029146
static const unsigned char sqlite3Utf8Trans1[] = {sqlite3Utf8Trans1199691,7030792
#define READ_UTF8(READ_UTF8199702,7031247
#define WRITE_UTF8(WRITE_UTF8199715,7031863
typedef struct Unicode61Tokenizer Unicode61Tokenizer;Unicode61Tokenizer199737,7032933
struct Unicode61Tokenizer {Unicode61Tokenizer199738,7032987
  unsigned char aTokenChar[128];  /* ASCII range token characters */aTokenChar199739,7033015
  char *aFold;                    /* Buffer to fold text into */aFold199740,7033084
  int nFold;                      /* Size of aFold[] in bytes */nFold199741,7033149
  int bRemoveDiacritic;           /* True if remove_diacritics=1 is set */bRemoveDiacritic199742,7033214
  int nException;nException199743,7033289
  int *aiException;aiException199744,7033307
static int fts5UnicodeAddExceptions(fts5UnicodeAddExceptions199747,7033331
static int fts5UnicodeIsException(Unicode61Tokenizer *p, int iCode){fts5UnicodeIsException199796,7034800
static void fts5UnicodeDelete(Fts5Tokenizer *pTok){fts5UnicodeDelete199820,7035245
static int fts5UnicodeCreate(fts5UnicodeCreate199833,7035507
static int fts5UnicodeIsAlnum(Unicode61Tokenizer *p, int iCode){fts5UnicodeIsAlnum199891,7037165
static int fts5UnicodeTokenize(fts5UnicodeTokenize199896,7037375
#define FTS5_PORTER_MAX_TOKEN FTS5_PORTER_MAX_TOKEN200006,7040607
typedef struct PorterTokenizer PorterTokenizer;PorterTokenizer200008,7040641
struct PorterTokenizer {PorterTokenizer200009,7040689
  fts5_tokenizer tokenizer;       /* Parent tokenizer module */tokenizer200010,7040714
  Fts5Tokenizer *pTokenizer;      /* Parent tokenizer instance */pTokenizer200011,7040778
  char aBuf[FTS5_PORTER_MAX_TOKEN + 64];aBuf200012,7040844
static void fts5PorterDelete(Fts5Tokenizer *pTok){fts5PorterDelete200018,7040927
static int fts5PorterCreate(fts5PorterCreate200031,7041181
typedef struct PorterContext PorterContext;PorterContext200067,7042038
struct PorterContext {PorterContext200068,7042082
  void *pCtx;pCtx200069,7042105
  int (*xToken)(void*, int, const char*, int, int, int);xToken200070,7042119
  char *aBuf;aBuf200071,7042176
typedef struct PorterRule PorterRule;PorterRule200074,7042194
struct PorterRule {PorterRule200075,7042232
  const char *zSuffix;zSuffix200076,7042252
  int nSuffix;nSuffix200077,7042275
  int (*xCond)(char *zStem, int nStem);xCond200078,7042290
  const char *zOutput;zOutput200079,7042330
  int nOutput;nOutput200080,7042353
static int fts5PorterIsVowel(char c, int bYIsVowel){fts5PorterIsVowel200109,7042995
static int fts5PorterGobbleVC(char *zStem, int nStem, int bPrevCons){fts5PorterGobbleVC200115,7043145
static int fts5Porter_MGt0(char *zStem, int nStem){fts5Porter_MGt0200132,7043551
static int fts5Porter_MGt1(char *zStem, int nStem){fts5Porter_MGt1200137,7043691
static int fts5Porter_MEq1(char *zStem, int nStem){fts5Porter_MEq1200147,7043921
static int fts5Porter_Ostar(char *zStem, int nStem){fts5Porter_Ostar200157,7044151
static int fts5Porter_MGt1_and_S_or_T(char *zStem, int nStem){fts5Porter_MGt1_and_S_or_T200174,7044604
static int fts5Porter_Vowel(char *zStem, int nStem){fts5Porter_Vowel200181,7044821
static int fts5PorterStep4(char *aBuf, int *pnBuf){fts5PorterStep4200197,7045201
static int fts5PorterStep1B2(char *aBuf, int *pnBuf){fts5PorterStep1B2200331,7048566
static int fts5PorterStep2(char *aBuf, int *pnBuf){fts5PorterStep2200365,7049266
static int fts5PorterStep3(char *aBuf, int *pnBuf){fts5PorterStep3200512,7053810
static int fts5PorterStep1B(char *aBuf, int *pnBuf){fts5PorterStep1B200578,7055381
static void fts5PorterStep1A(char *aBuf, int *pnBuf){fts5PorterStep1A200615,7056324
static int fts5PorterCb(fts5PorterCb200633,7056714
static int fts5PorterTokenize(fts5PorterTokenize200702,7058216
static int sqlite3Fts5TokenizerInit(fts5_api *pApi){sqlite3Fts5TokenizerInit200722,7058718
static int sqlite3Fts5UnicodeIsalnum(int c){sqlite3Fts5UnicodeIsalnum200776,7060127
static int fts5_remove_diacritic(int c){fts5_remove_diacritic200908,7067145
static int sqlite3Fts5UnicodeIsdiacritic(int c){sqlite3Fts5UnicodeIsdiacritic200958,7069191
static int sqlite3Fts5UnicodeFold(int c, int bRemoveDiacritic){sqlite3Fts5UnicodeFold200977,7069777
static int sqlite3Fts5GetVarint32(const unsigned char *p, u32 *v){sqlite3Fts5GetVarint32201133,7076633
#define SLOT_2_0 SLOT_2_0201204,7078178
#define SLOT_4_2_0 SLOT_4_2_0201205,7078210
static u8 sqlite3Fts5GetVarint(const unsigned char *p, u64 *v){sqlite3Fts5GetVarint201211,7078384
# define FTS5_NOINLINE FTS5_NOINLINE201390,7081557
# define FTS5_NOINLINEFTS5_NOINLINE201392,7081602
static int FTS5_NOINLINE fts5PutVarint64(unsigned char *p, u64 v){fts5PutVarint64201405,7082057
static int sqlite3Fts5PutVarint(unsigned char *p, u64 v){sqlite3Fts5PutVarint201430,7082522
static int sqlite3Fts5GetVarintLen(u32 iVal){sqlite3Fts5GetVarintLen201444,7082756
typedef struct Fts5VocabTable Fts5VocabTable;Fts5VocabTable201493,7084265
typedef struct Fts5VocabCursor Fts5VocabCursor;Fts5VocabCursor201494,7084311
struct Fts5VocabTable {Fts5VocabTable201496,7084360
  sqlite3_vtab base;base201497,7084384
  char *zFts5Tbl;                 /* Name of fts5 table */zFts5Tbl201498,7084405
  char *zFts5Db;                  /* Db containing fts5 table */zFts5Db201499,7084464
  sqlite3 *db;                    /* Database handle */db201500,7084529
  Fts5Global *pGlobal;            /* FTS5 global object for this database */pGlobal201501,7084585
  int eType;                      /* FTS5_VOCAB_COL or ROW */eType201502,7084662
struct Fts5VocabCursor {Fts5VocabCursor201505,7084728
  sqlite3_vtab_cursor base;base201506,7084753
  sqlite3_stmt *pStmt;            /* Statement holding lock on pIndex */pStmt201507,7084781
  Fts5Index *pIndex;              /* Associated FTS5 index */pIndex201508,7084854
  int bEof;                       /* True if this cursor is at EOF */bEof201510,7084917
  Fts5IndexIter *pIter;           /* Term/rowid iterator object */pIter201511,7084987
  int nLeTerm;                    /* Size of zLeTerm in bytes */nLeTerm201513,7085055
  char *zLeTerm;                  /* (term <= $zLeTerm) paramater, or NULL */zLeTerm201514,7085120
  Fts5Config *pConfig;            /* Fts5 table configuration */pConfig201517,7085243
  int iCol;iCol201518,7085308
  i64 *aCnt;aCnt201519,7085320
  i64 *aDoc;aDoc201520,7085333
  i64 rowid;                      /* This table's current rowid value */rowid201523,7085400
  Fts5Buffer term;                /* Current value of 'term' column */term201524,7085473
#define FTS5_VOCAB_COL FTS5_VOCAB_COL201527,7085548
#define FTS5_VOCAB_ROW FTS5_VOCAB_ROW201528,7085576
#define FTS5_VOCAB_COL_SCHEMA FTS5_VOCAB_COL_SCHEMA201530,7085605
#define FTS5_VOCAB_ROW_SCHEMA FTS5_VOCAB_ROW_SCHEMA201531,7085658
#define FTS5_VOCAB_TERM_EQ FTS5_VOCAB_TERM_EQ201536,7085782
#define FTS5_VOCAB_TERM_GE FTS5_VOCAB_TERM_GE201537,7085814
#define FTS5_VOCAB_TERM_LE FTS5_VOCAB_TERM_LE201538,7085846
static int fts5VocabTableType(const char *zType, char **pzErr, int *peType){fts5VocabTableType201547,7086120
static int fts5VocabDisconnectMethod(sqlite3_vtab *pVtab){fts5VocabDisconnectMethod201573,7086707
static int fts5VocabDestroyMethod(sqlite3_vtab *pVtab){fts5VocabDestroyMethod201582,7086906
static int fts5VocabInitVtab(fts5VocabInitVtab201609,7087597
static int fts5VocabConnectMethod(fts5VocabConnectMethod201670,7089636
static int fts5VocabCreateMethod(fts5VocabCreateMethod201680,7090163
static int fts5VocabBestIndexMethod(fts5VocabBestIndexMethod201694,7090741
static int fts5VocabOpenMethod(fts5VocabOpenMethod201756,7092556
static void fts5VocabResetCursor(Fts5VocabCursor *pCsr){fts5VocabResetCursor201814,7094063
static int fts5VocabCloseMethod(sqlite3_vtab_cursor *pCursor){fts5VocabCloseMethod201827,7094405
static int fts5VocabNextMethod(sqlite3_vtab_cursor *pCursor){fts5VocabNextMethod201840,7094726
static int fts5VocabFilterMethod(fts5VocabFilterMethod201956,7098275
static int fts5VocabEofMethod(sqlite3_vtab_cursor *pCursor){fts5VocabEofMethod202018,7100006
static int fts5VocabColumnMethod(fts5VocabColumnMethod202023,7100144
static int fts5VocabRowidMethod(fts5VocabRowidMethod202067,7101464
static int sqlite3Fts5VocabInit(Fts5Global *pGlobal, sqlite3 *db){sqlite3Fts5VocabInit202076,7101657
